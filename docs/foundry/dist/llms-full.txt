# foundry - Ethereum Development Framework

### Anvil

Anvil is a fast local Ethereum development node.

Anvil is part of the Foundry suite and is installed alongside `forge`, `cast` and `chisel`. If you haven't installed Foundry
yet, see [Foundry installation](/introduction/installation).

#### Getting started

To use Anvil, simply type `anvil`. To fork against a live Ethereum network run `anvil --fork-url <RPC_URL>`.

Let's fork Ethereum mainnet at the latest block:

```bash
anvil --fork-url https://reth-ethereum.ithaca.xyz/rpc
```

```bash


                             _   _
                            (_) | |
      __ _   _ __   __   __  _  | |
     / _` | | '_ \  \ \ / / | | | |
    | (_| | | | | |  \ V /  | | | |
     \__,_| |_| |_|   \_/   |_| |_|

    0.2.0 (c4fcf12 2024-12-12T00:23:45.094165202Z)
    https://github.com/foundry-rs/foundry

Available Accounts
==================

(0) 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 (10000.000000000000000000 ETH)
(1) 0x70997970C51812dc3A010C7d01b50e0d17dc79C8 (10000.000000000000000000 ETH)
(2) 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC (10000.000000000000000000 ETH)
(3) 0x90F79bf6EB2c4f870365E785982E1f101E93b906 (10000.000000000000000000 ETH)
(4) 0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65 (10000.000000000000000000 ETH)
(5) 0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc (10000.000000000000000000 ETH)
(6) 0x976EA74026E726554dB657fA54763abd0C3a0aa9 (10000.000000000000000000 ETH)
(7) 0x14dC79964da2C08b23698B3D3cc7Ca32193d9955 (10000.000000000000000000 ETH)
(8) 0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f (10000.000000000000000000 ETH)
(9) 0xa0Ee7A142d267C1f36714E4a8F75612F20a79720 (10000.000000000000000000 ETH)

Private Keys
==================

(0) 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80
(1) 0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d
(2) 0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a
(3) 0x7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6
(4) 0x47e179ec197488593b187f80a00eb0da91f1b9d0b13f8733639f19c30a34926a
(5) 0x8b3a350cf5c34c9194ca85829a2df0ec3153be0318b5e2d3348e872092edffba
(6) 0x92db14e403b83dfe3df233f83dfa3a0d7096f21ca9b0d6d6b8d88b2b4ec1564e
(7) 0x4bbbf85ce3377467afe5d46f804f221813b2bb87f24d81f60f1fcdbf7cbf4356
(8) 0xdbda1821b80551c9d65939329250298aa3472ba22feea921c0cf5d620ea67b97
(9) 0x2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6

Wallet
==================
Mnemonic:          test test test test test test test test test test test junk
Derivation path:   m/44'/60'/0'/0/


Fork
==================
Endpoint:       https://eth.merkle.io
Block number:   21387064
Block hash:     0x904aee789b82ac0412448bc2ea9bb3774d10c2dae4a0e5b7f6451ac2ecd0787a
Chain ID:       1

Base Fee
==================

26049293674

Gas Limit
==================

30000000

Genesis Timestamp
==================

1734014216

Listening on 127.0.0.1:8545
```

<br />

:::info
See the [`anvil` Reference](/anvil/reference) for in depth information on Anvil and its capabilities.
:::

### Notes

#### EIP-7702 and Default Accounts

Since the advent of EIP-7702, Anvil's default accounts have been delegated to drainers such as [https://etherscan.io/address/0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266#authlist7702](https://etherscan.io/address/0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266#authlist7702)

This can negatively impact developer experience when users are running Anvil in fork mode and are making RPC calls that involve one of the default anvil accounts. To avoid this issue, use a different mnemonic when starting Anvil:

```bash
anvil --mnemonic "<custom mnemonic>" --fork-url https://reth-ethereum.ithaca.xyz/rpc
```


### anvil

#### NAME

anvil - Create a local testnet node for deploying and testing smart contracts. It can also be used to fork other EVM compatible networks.

#### SYNOPSIS

`anvil` \[*options*]

#### DESCRIPTION

Create a local testnet node for deploying and testing smart contracts. It can also be used to fork other EVM compatible networks.

This section covers an extensive list of information about Mining Modes, Supported Transport Layers, Supported RPC Methods, Anvil flags and their usages. You can run multiple flags at the same time.

##### Mining Modes

Mining modes refer to how frequent blocks are mined using Anvil. By default, it automatically generates a new block as soon as a transaction is submitted.

You can change this setting to interval mining if you will, which means that a new block will be generated in a given period of time selected by the user. If you want to go for this type of mining, you can do it by adding the `--block-time <block-time-in-seconds>` flag, like in the following example.

```sh
# Produces a new block every 10 seconds
anvil --block-time 10
```

There's also a third mining mode called never. In this case, it disables auto and interval mining, and mine on demand instead. You can do this by typing:

```sh
# Enables never mining mode
anvil --no-mining
```

To speed up the finalization of blocks, you can use the `--slots-in-an-epoch` flag with a value of `1` for example. This will lead to the block at height `N-2` being finalized, where `N` is the latest block.

##### Supported Transport Layers

HTTP and Websocket connections are supported. The server listens on port 8545 by default, but it can be changed by running the following command:

```sh
anvil --port <PORT>
```

##### Default CREATE2 Deployer

Anvil, when used without forking, includes the [default CREATE2 deployer proxy](https://github.com/Arachnid/deterministic-deployment-proxy) at the address `0x4e59b44847b379578588920ca78fbf26c0b4956c`.

This allows you to test CREATE2 deployments locally without forking.

##### Supported RPC Methods

##### Standard Methods

The standard methods are based on [this](https://ethereum.org/en/developers/docs/apis/json-rpc/) reference.

* `web3_clientVersion`

* `web3_sha3`

* `eth_chainId`

* `eth_networkId`

* `eth_gasPrice`

* `eth_accounts`

* `eth_blockNumber`

* `eth_getBalance`

* `eth_getStorageAt`

* `eth_getBlockByHash`

* `eth_getBlockByNumber`

* `eth_getTransactionCount`

* `eth_getBlockTransactionCountByHash`

* `eth_getBlockTransactionCountByNumber`

* `eth_getUncleCountByBlockHash`

* `eth_getUncleCountByBlockNumber`

* `eth_getCode`

* `eth_sign`

* `eth_signTypedData_v4`

* `eth_sendTransaction`

* `eth_sendRawTransaction`

* `eth_call`

* `eth_createAccessList`

* `eth_estimateGas`

* `eth_getTransactionByHash`

* `eth_getTransactionByBlockHashAndIndex`

* `eth_getTransactionByBlockNumberAndIndex`

* `eth_getTransactionReceipt`

* `eth_getUncleByBlockHashAndIndex`

* `eth_getUncleByBlockNumberAndIndex`

* `eth_getLogs`

* `eth_newFilter`

* `eth_getFilterChanges`

* `eth_newBlockFilter`

* `eth_newPendingTransactionFilter`

* `eth_getFilterLogs`

* `eth_uninstallFilter`

* `eth_getWork`

* `eth_subscribe`

* `eth_unsubscribe`

* `eth_syncing`

* `eth_submitWork`

* `eth_submitHashrate`

* `eth_feeHistory`

* `eth_getProof`

* `debug_traceTransaction`
  Use `anvil --steps-tracing` to get `structLogs`

* `debug_traceCall`
  Note that non-standard traces are not yet supported. This means you can't pass any arguments to the `trace` parameter.

* `trace_transaction`

* `trace_block`

##### Custom Methods

The `anvil_*` namespace is an alias for `hardhat`. For more info, refer to the [Hardhat documentation](https://hardhat.org/hardhat-network/reference#hardhat-network-methods).

`anvil_impersonateAccount`
Send transactions impersonating an externally owned account or contract.

`anvil_stopImpersonatingAccount`
Stops impersonating an account or contract if previously set with `anvil_impersonateAccount`.

`anvil_autoImpersonateAccount`
Accepts `true` to enable auto impersonation of accounts, and `false` to disable it. When enabled, any transaction's sender will be automatically impersonated. Same as `anvil_impersonateAccount`.

`anvil_getAutomine`
Returns true if automatic mining is enabled, and false if it is not.

`anvil_mine`
Mines a series of blocks.

`anvil_dropTransaction`
Removes transactions from the pool.

`anvil_reset`
Reset the fork to a fresh forked state, and optionally update the fork config.

`anvil_setRpcUrl`
Sets the backend RPC URL.

`anvil_setBalance`
Modifies the balance of an account.

`anvil_setCode`
Sets the code of a contract.

`anvil_setNonce`
Sets the nonce of an address.

`anvil_setStorageAt`
Writes a single slot of the account's storage.

`anvil_setCoinbase`
Sets the coinbase address.

`anvil_setLoggingEnabled`
Enable or disable logging.

`anvil_setMinGasPrice`
Set the minimum gas price for the node.

`anvil_setNextBlockBaseFeePerGas`
Sets the base fee of the next block.

`anvil_setChainId`
Sets the chain ID of the current EVM instance.

`anvil_dumpState`
Returns a hex string representing the complete state of the chain. Can be re-imported into a fresh/restarted instance of Anvil to reattain the same state.

`anvil_loadState`
When given a hex string previously returned by `anvil_dumpState`, merges the contents into the current chain state. Will overwrite any colliding accounts/storage slots.

`anvil_nodeInfo`
Retrieves the configuration params for the currently running Anvil node.

##### Special Methods

The special methods come from Ganache. You can take a look at the documentation [here](https://github.com/trufflesuite/ganache-cli-archive/blob/master/README.md).

`evm_setAutomine`
Enables or disables, based on the single boolean argument, the automatic mining of new blocks with each new transaction submitted to the network.

`evm_setIntervalMining`
Sets the mining behavior to interval with the given interval (seconds).

`evm_snapshot`
Snapshot the state of the blockchain at the current block.

`evm_revert`
Revert the state of the blockchain to a previous snapshot. Takes a single parameter, which is the snapshot id to revert to.

`evm_increaseTime`
Jump forward in time by the given amount of time, in seconds.

`evm_setNextBlockTimestamp`
Similar to `evm_increaseTime` but takes the exact timestamp that you want in the next block.

`anvil_setBlockTimestampInterval`
Similar to `evm_increaseTime` but sets a block timestamp `interval`. The timestamp of the next block will be computed as `lastBlock_timestamp + interval`.

`evm_setBlockGasLimit`
Sets the block gas limit for the following blocks.

`anvil_removeBlockTimestampInterval`
Removes an `anvil_setBlockTimestampInterval` if it exists.

`evm_mine`
Mine a single block.

`anvil_enableTraces`
Turn on call traces for transactions that are returned to the user when they execute a transaction (instead of just txhash/receipt).

`eth_sendUnsignedTransaction`
Execute a transaction regardless of signature status.

For the next three methods, make sure to read [Geth's documentation](https://geth.ethereum.org/docs/rpc/ns-txpool).

`txpool_status`
Returns the number of transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.

`txpool_inspect`
Returns a summary of all the transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.

`txpool_content`
Returns the details of all transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.

##### Otterscan Methods

The `ots_*` namespace implements the [Otterscan specification](https://docs.otterscan.io/api-docs/ots-api).

`ots_getApiLevel`
Used by Otterscan to check if it's connecting to a compatible node and display a friendly message if it is not.

`ots_getInternalOperations`
Returns the internal ETH transfers inside a transaction.

`ots_hasCode`
Check if a certain address contains a deployed code.

`ots_getTransactionError`
Extract the transaction raw error output.

`ots_traceTransaction`
Extract all variations of calls, contract creation and self-destructs and returns a call tree.

`ots_getBlockDetails`
Tailor-made and expanded version of eth\_getBlock\* for block details page in Otterscan.

`ots_getBlockTransactions`
Get paginated transactions for a certain block, And removes some verbose fields such logs.

`ots_searchTransactionsBefore`
Gets paginated inbound/outbound transaction calls for a certain address, and before a given target block.

`ots_searchTransactionsAfter`
Gets paginated inbound/outbound transaction calls for a certain address, and after a given target block.

`ots_getTransactionBySenderAndNonce`
Gets the transaction hash for a certain sender address, given its nonce.

`ots_getContractCreator`
Gets the transaction hash and the address which created a contract.

#### OPTIONS

##### General Options

`-a, --accounts <ACCOUNTS>`
     Set the number of accounts. \[default: 10]

`--auto-impersonate`
     Enable autoImpersonate on startup.

`-b, --block-time <block-time>`
     Block time in seconds for interval mining.

`--balance <BALANCE>`
     Set the balance of the accounts. \[default: 10000]

`--derivation-path <DERIVATION_PATH>`
     Set the derivation path of the child key to be derived. \[default: m/44'/60'/0'/0/]

`-h, --help`
     Print help information.

`--hardfork <HARDFORK>`
     Choose the EVM hardfork to use e.g. `prague`, `cancun`, `shanghai`, `paris`, `london`, etc... \[default: latest]

`--init <PATH>`
     Initialize the genesis block with the given `genesis.json` file.

`-m, --mnemonic <MNEMONIC>`
     BIP39 mnemonic phrase used for generating accounts.

`--no-mining`
     Disable auto and interval mining, and mine on demand instead.

`--order <ORDER>`
     How transactions are sorted in the mempool. \[default: fees]

`-p, --port <PORT>`
     Port number to listen on. \[default: 8545]

`--steps-tracing`
     Enable steps tracing used for debug calls returning geth-style traces. \[aliases: tracing]

`--ipc [<PATH>]`
     Starts an IPC endpoint at the given `PATH` argument or the default path: unix: `tmp/anvil.ipc`, windows: `\\.\pipe\anvil.ipc`.

`--silent`
     Don't print anything on startup.

`--timestamp <TIMESTAMP>`
     Set the timestamp of the genesis block.

`-V, --version`
     Print version information.

`--disable-default-create2-deployer`
     Disables deploying the default CREATE2 factory when running Anvil without forking.

##### EVM Options

`-f, --fork-url <URL>`
     Fetch state over a remote endpoint instead of starting from an empty state.

`--fork-block-number <BLOCK>`
     Fetch state from a specific block number over a remote endpoint (Must pass `--fork-url` in the same command-line).

`--fork-chain-id <CHAIN>`
     Specify chain id to skip fetching it from remote endpoint. This enables offline-start mode.
You still must pass both `--fork-url` and `--fork-block-number`, and already have your required state cached on disk, anything missing locally
would be fetched from the remote.

`--fork-retry-backoff <BACKOFF>`
     Initial retry backoff on encountering errors.

`--fork-transaction-hash <TRANSACTION>`
     Fetch state from a specific transaction hash over a remote endpoint (Must pass `--fork-url` in the same command-line).

`--retries <retries>`
     Number of retry requests for spurious networks (timed out requests). \[default: 5]

`--timeout <timeout>`
     Timeout in ms for requests sent to remote JSON-RPC server in forking mode. \[default: 45000]

`--compute-units-per-second <CUPS>`
     Sets the number of assumed available compute units per second for this provider. \[default: 330]

`--no-rate-limit`
     Disables rate limiting for this node's provider. Will always override `--compute-units-per-second` if present. \[default: false]

`--no-storage-caching`
     Disables RPC caching; all storage slots are read from the endpoint. This flag overrides the project's configuration file (Must pass --fork-url in the same command-line).

##### Executor Environment Config

`--base-fee <FEE>`
`--block-base-fee-per-gas <FEE>`
     The base fee in a block.

`--chain-id <CHAIN_ID>`
     The chain ID. \[default: 31337]

`--code-size-limit <CODE_SIZE>`
     EIP-170: Contract code size limit in bytes. Useful to increase for tests. \[default: 0x6000 (\~25kb)]

`--gas-limit <GAS_LIMIT>`
     The block gas limit.

`--gas-price <GAS_PRICE>`
     The gas price.

##### Server Options

`--allow-origin <allow-origin>`
     Set the CORS `allow_origin`. \[default: \*]

`--no-cors`
     Disable CORS.

`--host <HOST>`
     The IP address the server will listen on.

`--config-out <OUT_FILE>`
     Writes output of `anvil` as json to user-specified file.

`--prune-history`
     Don't keep full chain history.

`--no-request-size-limit`
     Disable the request size limit. Default is 2MB

#### EXAMPLES

1. Set the number of accounts to 15 and their balance to 300 ETH

```sh
anvil --accounts 15 --balance 300
```

2. Choose the address which will execute the tests

```sh
anvil --sender 0xC8479C45EE87E0B437c09d3b8FE8ED14ccDa825E
```

3. Change how transactions are sorted in the mempool to FIFO

```sh
anvil --order fifo
```

#### Shell Completions

`anvil completions` *shell*

Generates a shell completions script for the given shell.

Supported shells are:

* bash
* elvish
* fish
* powershell
* zsh

##### EXAMPLES

1. Generate shell completions script for zsh:
   ```sh
   anvil completions zsh > $HOME/.oh-my-zsh/completions/_anvil
   ```

#### Usage within Docker

In order to run anvil as a service in Github Actions with the [Docker container](/guides/foundry-in-docker), where passing arguments to the entrypoint command is not possible, use the `ANVIL_IP_ADDR` environment variable to set the host's IP. `ANVIL_IP_ADDR=0.0.0.0` is equivalent to providing the `--host <ip>` option.

##### Using `genesis.json`

The `genesis.json` file in Anvil serves a similar purpose as in Geth, defining the network's initial state, consensus rules, and preallocated accounts to ensure all nodes start consistently and maintain network integrity. All values, including balance, gas limit and such, are to be defined as hexadecimals.

* `chainId`: Identifier for the blockchain, unique to each network.
* `nonce`: A counter used in hashing algorithms to ensure data integrity.
* `timestamp`: The creation time of the genesis block in Unix time.
* `extraData`: Additional data that can be included by the creator of the genesis block.
* `gasLimit`: The maximum amount of gas that can be used in the block.
* `difficulty`: A measure of how difficult it is to mine a new block.
* `mixHash`: A unique identifier proving a sufficient amount of computation for the block.
* `coinbase`: The Ethereum address of the miner who mined this block.
* `stateRoot`: The root of the state trie, reflecting the final state after all transactions.
* `alloc`: Allows pre-allocating Ether to a set of addresses with predefined balances.
* `number`: The block number, with the genesis block being 0.
* `gasUsed`: The total gas used in the block.
* `parentHash`: The hash of the parent block, all zeros for the genesis block since there is no parent.

A sample for simulating mainnet via genesis can be found [here](https://github.com/paradigmxyz/reth/blob/8f3e4a15738d8174d41f4aede5570ecead141a77/crates/primitives/res/genesis/mainnet.json).

```json
{
  "chainId": "0x2323",
  "nonce": "0x42",
  "timestamp": "0x0",
  "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
  "gasLimit": "0x1388",
  "difficulty": "0x400000000",
  "mixHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
  "coinbase": "0x0000000000000000000000000000000000000000",
  "stateRoot": "0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544",
  "alloc": {
    "000d836201318ec6899a67540690382780743280": {
      "balance": "0xad78ebc5ac6200000"
    }
  },
  "number": "0x0",
  "gasUsed": "0x0",
  "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000"
}
```


### Cast

Cast is a Swiss Army knife for interacting with Ethereum applications from the command line. You can make smart contract calls, send transactions, or retrieve any type of chain data - all from your command-line!

The `cast` binary can be used both within and outside of a Foundry project.

Cast is part of the Foundry suite and is installed alongside `forge`, `chisel`, and `anvil`. If you haven't installed Foundry
yet, see [Foundry installation](/introduction/installation).

#### Getting started

Here are a few examples of what you can do:

**Check the latest block on Ethereum Mainnet**:

```sh
cast block-number --rpc-url https://reth-ethereum.ithaca.xyz/rpc
```

**Check the Ether balance of `vitalik.eth`**

```sh
cast balance vitalik.eth --ether --rpc-url https://reth-ethereum.ithaca.xyz/rpc
```

**Replay and trace a transaction**

```sh
cast run 0x9c32042f5e997e27e67f82583839548eb19dc78c4769ad6218657c17f2a5ed31 --rpc-url https://reth-ethereum.ithaca.xyz/rpc
```

Optionally, pass `--etherscan-api-key <API_KEY>` to decode transaction traces using verified source maps, providing more detailed and human-readable information.

**Retrieve the total supply of the DAI token**

```sh
// [!include ~/snippets/output/cast/cast-call:all]
```

**Decode calldata**

```sh
// [!include ~/snippets/output/cast/cast-4byte-calldata:all]
```

**Send messages between two Anvil accounts**

```sh
cast send --private-key <PRIVATE_KEY> 0x3c44cdddb6a900fa2b585dd299e03d12fa4293bc $(cast from-utf8 "hello world") --rpc-url http://127.0.0.1:8545/
```

<br />

:::info
See the [`cast` Reference](/cast/reference/overview) for a complete overview of all the available subcommands.
:::


### Chisel

Chisel is a fast, utilitarian, and verbose Solidity REPL.

The `chisel` binary can be used both within and outside of a Foundry project.
If the binary is executed in a Foundry project root, Chisel will inherit the project's configuration options.

Chisel is part of the Foundry suite and is installed alongside `forge`, `cast`, and `anvil`. If you haven't installed Foundry
yet, see [Foundry installation](/introduction/installation).

#### Getting started

To use Chisel, simply type `chisel`.

```sh
chisel
```

From here, start writing Solidity code! Chisel will offer verbose feedback on each input.

Create a variable `a` and query it:

```console
➜ uint256 a = 123;
➜ a
Type: uint256
├ Hex: 0x7b
├ Hex (full word): 0x000000000000000000000000000000000000000000000000000000000000007b
└ Decimal: 123
```

Finally, run `!source` to see `a` was applied:

```solidity
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.28;

import {Vm} from "forge-std/Vm.sol";

contract REPL {
    Vm internal constant vm = Vm(address(uint160(uint256(keccak256("hevm cheat code")))));

    /// @notice REPL contract entry point
    function run() public {
        uint256 a = 123;
    }
}
```

To see available commands, type `!help` within the REPL.

<br />

:::info
See the [`chisel` Reference](/chisel/reference) for in depth information on Chisel and its capabilities.
:::


### chisel

#### NAME

`chisel` - Test and receive verbose feedback on Solidity inputs within a REPL environment.

#### SYNOPSIS

`chisel` \[*options*]

##### Subcommands (bin)

1. `chisel list`
   * Displays all cached sessions stored in `~/.foundry/cache/chisel`.
2. `chisel load <id>`
   * If a cached session with `id = <id>` exists, launches the REPL and loads the corresponding session.
3. `chisel view <id>`
   * If a cached session with `id = <id>` exists, displays the source code of the session's REPL contract.
4. `chisel clear-cache`
   * Deletes all cache files within the `~/.foundry/cache/chisel` directory. These sessions are unrecoverable, so use this command with care.

##### Flags

See `man chisel` or `chisel --help` for all available environment configuration flags.

#### DESCRIPTION

Chisel is a Solidity REPL (short for "read-eval-print loop") that allows developers to write
and test Solidity code snippets. It provides an interactive environment for writing and executing
Solidity code, as well as a set of built-in commands for working with and debugging your code. This
makes it a useful tool for quickly testing and experimenting with Solidity code without having to
spin up a sandbox foundry test suite.

#### Usage

To open chisel, simply execute the `chisel` binary.

From there, input valid Solidity code. There are two kinds of inputs to the chisel prompt apart from commands:

1. Expressions
   * Expressions are statements that return a value or otherwise can be evaluated on their own. For example,
     `1 << 8` is an expression that will evaluate to a `uint256` with the value `256`. Expressions will be
     evaluated up front, and will not persist in the session state past their evaluation.
   * Examples:
     * `address(0).balance`
     * `abi.encode(256, bytes32(0), "Chisel!")`
     * `myViewFunc(128)`
     * ...
2. Statements

   * Statements are snippets of code that are meant to persist in the session's state. Statements include
     variable definitions, calls to non-state-mutating functions that return a value, and contract, function,
     event, error, mapping, or struct definitions. If you would like an expression to be evaluated as a statement,
     a semi-colon (`;`) can be appended to the end.
   * Examples:

     * `uint256 a = 0xa57b`

     * `myStateMutatingFunc(128)` || `myViewFunc(128);`. Notice the `;`

     * ```solidity
       function hash64(
         bytes32 _a,
         bytes32 _b
       ) internal pure returns (bytes32 _hash) {
           assembly {
               // Store the 64 bytes we want to hash in scratch space
               mstore(0x00, _a)
               mstore(0x20, _b)

               // Hash the memory in scratch space
               // and assign the result to `_hash`
               _hash := keccak256(0x00, 0x40)
           }
       }
       ```

     * `event ItHappened(bytes32 indexed hash)`

     * `struct Complex256 { uint256 re; uint256 im; }`

     * ...

##### Available Commands

```text
// [!include ~/snippets/output/chisel/help:output]
```

**General**

`!help` | `!h`

Display all commands.

`!quit` | `!q`

Quit Chisel.

`!exec <command> [args]` | `!e <command> [args]`

Execute a shell command and print the output.

Example:

```sh
➜ !e ls
CHANGELOG.md
LICENSE
README.md
TESTS.md
artifacts
cache
contracts
crytic-export
deploy
deploy-config
deployments
dist
echidna.yaml
forge-artifacts
foundry.toml
hardhat.config.ts
layout-lock.json
node_modules
package.json
scripts
slither.config.json
slither.db.json
src
tasks
test-case-generator
tsconfig.build.json
tsconfig.build.tsbuildinfo
tsconfig.json
```

**Session**

`!clear` | `!c`

Clear current session source.

Under the hood, each Chisel session has an underlying contract that is altered as you input statements. This command clears this contract and resets your session to the default state.

`!source` | `!so`

Display the source code of the current session.

As mentioned above, each Chisel session has an underlying contract. This command will display the source code of this contract.

`!save [id]` | `!s [id]`

Save the current session to cache.

Chisel allows for caching sessions, which can be very useful if you are testing more complex logic in Chisel or if you want to return to a session at a later time. All cached Chisel sessions are stored in `~/.foundry/cache/chisel`.

If an `id` argument is not supplied, Chisel will automatically assign a numerical ID to the session you are saving.

`!load <id>` | `!l <id>`

Load a previous session ID from cache.

This command will load a previously cached session from the cache. Along with the session's source, all environment settings will also be loaded. The `id` argument must correspond with an existing cached session in the `~/.foundry/cache/chisel` directory.

`!list` | `!ls`

List all cached sessions.

This command will display all cached chisel sessions within the `~/.foundry/cache/chisel` directory.

`!clearcache` | `!cc`

Clear the chisel cache of all stored sessions.

Deletes all cache files within the `~/.foundry/cache/chisel` directory. These sessions are unrecoverable, so use this command with care.

`!export` | `!ex`

Export the current session source to a script file.

If `chisel` was executed from the root directory of a foundry project, it is possible to export your current session to a foundry script in the `scripts` dir of your project.

`!fetch <addr> <name>` | `!fe <addr> <name>`

Fetch the interface of a verified contract on Etherscan.

This command will attempt to parse the interface of a verified contract @ `<addr>` from the Etherscan API. If successful, the interface will be inserted into the session source with the name `<name>`.

At the moment, only interfaces of verified contracts on Ethereum mainnet can be fetched. In the future, Chisel will support fetching interfaces from multiple Etherscan-supported chains.

`!edit`

Open the current session's `run()` function in an editor.

chisel will use the editor defined in the `$EDITOR` environment variable.

**Environment**

`!fork <url>` | `!f <url>`

Fork an RPC for the current session. Supply 0 arguments to return to a local network.

Attempts to fork the state of the provided RPC. If no URL is provided, returns to using a blank, local devnet state.

`!traces` | `!t`

Enable / disable traces for the current session.

When tracing is enabled, foundry-style call tracing and logs will be printed after each statement is inserted.

**Debug**

`!memdump` | `!md`

Dump the raw memory of the current state.

Attempts to dump the raw memory of the machine state after the last instruction of the REPL contract's `run` function has finished executing.

`!stackdump` | `!sd`

Dump the raw stack of the current state.

Attempts to dump the raw stack of the machine state after the last instruction of the REPL contract's `run` function has finished executing.

`!rawstack <var>` | `!rs <var>`

Display the raw value of a variable's stack allocation. For variables that are > 32 bytes in length, this will display their memory pointer.

This command is useful when you want to view the full raw stack allocation for a variable that is less than 32 bytes in length.

Example:

```sh
➜ address addr
➜ assembly {
    addr := not(0)
}
➜ addr
Type: address
└ Data: 0xffffffffffffffffffffffffffffffffffffffff
➜ !rs addr
Type: bytes32
└ Data: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
➜
```


### Continuous Integration

#### GitHub Actions

To test your project using GitHub Actions, here is a sample workflow:

```yml
on: [push]

name: test

jobs:
  check:
    name: Foundry project
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Run tests
        run: forge test -vvv
```

#### Travis CI

To test your project using Travis CI, here is a sample workflow:

```yml
language: rust
cache:
  cargo: true
  directories:
    - $HOME/.foundry

install:
  - curl -L https://foundry.paradigm.xyz | bash
  - export PATH=$PATH:$HOME/.foundry/bin
  - foundryup -b master

script:
  - forge test -vvv
```

### GitLab CI

To test your project using GitLab CI, here is a sample workflow:
Note: check out [Policy](https://docs.gitlab.com/runner/executors/docker.html#how-pull-policies-work) to fetch the remote image

```yml
variables:
  GIT_SUBMODULE_STRATEGY: recursive

jobs:
  image: ghcr.io/foundry-rs/foundry
  script:
    - forge install
    - forge test -vvv
```


### Dynamic Test Linking

[v1.1 release](https://github.com/foundry-rs/foundry/releases/tag/v1.1.0) comes with dynamic test linking feature, built on top of [Solar](https://github.com/paradigmxyz/solar), which eliminates redundant test compilation when changing the contract logic, Foundry skips recompiling large test suites, resulting in massive time savings.

How it works:

On the initial build, Foundry preprocesses test contracts by extracting constructor parameters of the contracts under test and replacing direct instantiations with [`deployCode` cheatcodes](/reference/cheatcodes/get-deployed-code).

Subsequent compilations reuse pre-built artifacts for deployed contracts instead of recompiling both the source and all associated test contracts.
Dynamic test linking capability is built on top of [Solar](https://github.com/paradigmxyz/solar), the blazingly fast and modular Solidity compiler.

You can enable this feature by setting the `dynamic_test_linking` configuration option to `true` in your `foundry.toml` file:

```toml
[profile.default]
...
dynamic_test_linking = true
```

OR by passing the `--dynamic-test-linking` flag to the `forge build` command:

```bash
forge build --dynamic-test-linking
```

We are looking into enabling this by default in the future.

Benchmarks from the [PR](https://github.com/foundry-rs/foundry/pull/10010) show greater than 10x speedup in compilation time for large projects:

| Project                                                                                                                  | Change                                                                                                                                                                              | Files compiled (with / without, after initial compile) | Time to compile (with / without, after initial compile) |
| ------------------------------------------------------------------------------------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------ | ------------------------------------------------------- |
| [uniswap v4-core](https://github.com/Uniswap/v4-core/tree/80311e34080fee64b6fc6c916e9a51a437d0e482)                      | add `Lock.lock();` at [PoolManager.sol#L107](https://github.com/Uniswap/v4-core/blob/80311e34080fee64b6fc6c916e9a51a437d0e482/src/PoolManager.sol#L107)                             | 1 / 19                                                 | 2.25s / 165.13s                                         |
| [spark-psm](https://github.com/sparkdotfi/spark-psm/tree/9d0bcc045e81407408368c9a4bb6e3f13db77e32)                       | change `amountOut < minAmountOut` at [PSM3.sol#L125](https://github.com/sparkdotfi/spark-psm/blob/9d0bcc045e81407408368c9a4bb6e3f13db77e32/src/PSM3.sol#L125)                       | 3 / 28                                                 | 2.14s / 16.15s                                          |
| [morpho-blue-bundlers](https://github.com/morpho-org/morpho-blue-bundlers/tree/1fa17256abb86c4de48fd5e251ebd46aae70ca1a) | change `if (assets < 0)` at [MorphoBundler.sol#L106](https://github.com/morpho-org/morpho-blue-bundlers/blob/1fa17256abb86c4de48fd5e251ebd46aae70ca1a/src/MorphoBundler.sol#L106)   | 11 / 36                                                | 16.39s / 251.05s                                        |
| [morpho-blue](https://github.com/morpho-org/morpho-blue/commit/9e2b0755b47bbe5b09bf1be8f00e060d4eab6f1c)                 | add `require(assets != 0, ErrorsLib.ZERO_ASSETS)` at [Morpho.sol#L424](https://github.com/morpho-org/morpho-blue/blob/9e2b0755b47bbe5b09bf1be8f00e060d4eab6f1c/src/Morpho.sol#L424) | 1 / 23                                                 | 1.01s / 133.73s                                         |
| [sablier lockup](https://github.com/sablier-labs/lockup/tree/b2f33926fcac72a1a855c6b8ccaa75166895f13c)                   | change `if (cliffTime < 0)` at [SablierLockup.sol#L480](https://github.com/sablier-labs/lockup/blob/b2f33926fcac72a1a855c6b8ccaa75166895f13c/src/SablierLockup.sol#L480)            | 1 / 104                                                | 781ms / 71.29s                                          |
| [solady](https://github.com/Vectorized/solady/commit/724c39bdfebb593157c2dfa6797c07a25dfb564c)                           | add additional `_setOwner(newOwner)` at [Ownable.sol#L182](https://github.com/Vectorized/solady/blob/724c39bdfebb593157c2dfa6797c07a25dfb564c/src/auth/Ownable.sol#L182)            | 9 / 14                                                 | 6.17s / 6.34s                                           |
| [euler evc](https://github.com/euler-xyz/ethereum-vault-connector/commit/64f6d2171a57e02a0f95bcbdecf1d92e9d253d40)       | change `SET_MAX_ELEMENTS` to `11` at [Set.sol#L7](https://github.com/euler-xyz/ethereum-vault-connector/blob/64f6d2171a57e02a0f95bcbdecf1d92e9d253d40/src/Set.sol#L7)               | 28 / 30                                                | 9.17s / 9.40s                                           |


### Integrating with Hardhat

It's possible to have your Foundry project work alongside [Hardhat](https://hardhat.org/). This article assumes that you have Foundry and node installed in your system. This article also assumes familiarity with both Foundry and Hardhat.

#### Why does this not work out of the box?

Hardhat by default expects libraries to be installed in `node_modules`, the default folder for all NodeJS dependencies. Foundry expects them to be in `lib`. Of course [we can configure Foundry](/config/overview) but not easily to the directory structure of `node_modules`.

For this reason, the recommended setup is to use [hardhat-foundry](https://www.npmjs.com/package/@nomicfoundation/hardhat-foundry). When hardhat-foundry is installed and used correctly, Hardhat will use the same contracts directory that is used by Foundry, and it will be able to use dependencies installed with forge install.

In this article we will cover both scenarios:

1. Adding Hardhat to a Foundry project, and,
2. Adding Foundry to a Hardhat project.

#### Just show me the example repo!

[Enjoy!](https://github.com/foundry-rs/HardhatInFoundry)

If you want to adapt this to a Foundry project you already have or learn how it works, read below:

#### Adding Hardhat to a Foundry project

Inside your Foundry project working directory:

1. `npm init -y` - This will set up a `package.json` file.
2. `npm i --save-dev hardhat` - Install Hardhat as a dev dependency into your project.
3. `npx hardhat init` - Initialize your Hardhat project inside the same directory and choose the  "**Create an empty hardhat.config.js**" option. This will create a basic `hardhat.config.js` file.
4. `npm i --save-dev @nomicfoundation/hardhat-foundry @nomicfoundation/hardhat-toolbox` - This will install the hardhat-foundry plugin and the Hardhat toolbox plugin which is a combination of all the basic dependencies you need to run Hardhat tests.

Your hardhat.config.js file should look like this to make the plugins work:

```javascript
require("@nomicfoundation/hardhat-toolbox");
require("@nomicfoundation/hardhat-foundry");
/** @type import('hardhat/config').HardhatUserConfig */
module.exports = {
  solidity: "0.8.19",
};
```

5. By default, a Foundry project ships with a simple `Counter.sol` contract and a couple of tests. Create a file named `Counter.t.js` inside the `test` directory parallel to the default `Counter.t.sol` file.
6. Add the following code to the `Counter.t.js` file:

```javascript
const { expect } = require("chai");
const hre = require("hardhat");
const { loadFixture } = require("@nomicfoundation/hardhat-toolbox/network-helpers");

describe("Counter contract", function () {
  async function CounterLockFixture() {
    const counter = await ethers.deployContract("Counter");
    await counter.setNumber(0);

    return { counter };
  }

  it("Should increment the number correctly", async function () {
    const { counter } = await loadFixture(CounterLockFixture);
    await counter.increment();
    expect(await counter.number()).to.equal(1);
  });

  // This is not a fuzz test because Hardhat does not support fuzzing yet.
  it("Should set the number correctly", async function () {
    const { counter } = await loadFixture(CounterLockFixture);
    await counter.setNumber(100);
    expect(await counter.number()).to.equal(100);
  });
});
```

This piece of code will execute the same tests as the default `Counter.t.sol` file.

And this is it!
You can create Hardhat and Foundry tests in the same `test` directory and run them with `npx hardhat test` and `forge test` respectively.
Check out [Hardhat's documentation](https://hardhat.org/docs) to learn more.

#### Adding Foundry to a Hardhat project

Inside your Hardhat project working directory:

1. `npm i --save-dev @nomicfoundation/hardhat-foundry`- Install the hardhat-foundry plugin.
2. Add `require("@nomicfoundation/hardhat-foundry");` to the top of your `hardhat.config.js` file.

> ℹ️ **Note**
> Step number 3 will only work if your directory is an initialized git repository. Run `git init` if you haven't already.

3. Run `npx hardhat init-foundry` in your terminal. This will generate a `foundry.toml` file based on your Hardhat project's existing configuration, and will install the `forge-std` library.

Hardhat will now set up a basic Foundry project inside the same directory with a few configurations inside the `foundry.toml` file to make sure that Foundry knows where to look for your contracts, tests and dependencies. You can always change these configurations later by editing the `foundry.toml` file.


### Configuring your `foundry.toml`

Forge can be configured using a configuration file called `foundry.toml`, which is placed in the root of your project.

Configuration can be namespaced by profiles. The default profile is named `default`, from which all other profiles inherit. You are free to customize the `default` profile, and add as many new profiles as you need.

Additionally, you can create a global `foundry.toml` in your home directory.

Let's take a look at a configuration file that contains two profiles: the default profile, which always enables the optimizer, as well as a CI profile, that always displays traces:

```toml
[profile.default]
optimizer = true
optimizer_runs = 20_000

[profile.ci]
verbosity = 4
```

When running `forge`, you can specify the profile to use using the `FOUNDRY_PROFILE` environment variable.

#### Standalone sections

Besides the profile sections, the configuration file can also contain standalone sections (`[fmt]`, `[fuzz]`, `[invariant]` etc). By default, each standalone section belongs to the `default` profile.
i.e. `[fmt]` is equivalent to `[profile.default.fmt]`.

To configure the standalone section for different profiles other than `default`, use syntax `[profile.<profile name>.<standalone>]`.
i.e. `[profile.ci.fuzz]`.

<br />

:::info
See the [`foundry.toml` Reference](/config/reference/default-config) for a complete overview of what you can configure.
:::


### Shell Autocompletion

You can generate autocompletion shell scripts for `bash`, `elvish`, `fish`, `powershell`, and `zsh`.

#### zsh

First, ensure that the following is present somewhere in your `~/.zshrc` file (if not, add it):

```sh
autoload -U compinit
compinit -i
```

Then run:

```sh
forge completions zsh | sudo tee /usr/local/share/zsh/site-functions/_forge
cast completions zsh | sudo tee /usr/local/share/zsh/site-functions/_cast
anvil completions zsh | sudo tee /usr/local/share/zsh/site-functions/_anvil
```

For macOS:

```sh
forge completions zsh > /opt/homebrew/completions/zsh/_forge
cast completions zsh > /opt/homebrew/completions/zsh/_cast
anvil completions zsh > /opt/homebrew/completions/zsh/_anvil
```

#### fish

```sh
mkdir -p $HOME/.config/fish/completions
forge completions fish > $HOME/.config/fish/completions/forge.fish
cast completions fish > $HOME/.config/fish/completions/cast.fish
anvil completions fish > $HOME/.config/fish/completions/anvil.fish
source $HOME/.config/fish/config.fish
```

#### bash

```sh
mkdir -p $HOME/.local/share/bash-completion/completions
forge completions bash > $HOME/.local/share/bash-completion/completions/forge
cast completions bash > $HOME/.local/share/bash-completion/completions/cast
anvil completions bash > $HOME/.local/share/bash-completion/completions/anvil
exec bash
```


### Static Analyzers

#### Slither

To test your project using [slither](https://github.com/crytic/slither), here is a sample `slither.config.json`:

```json
{
  "filter_paths": "lib"
}
```

To run Slither on the entire project, use this command in the root of the project:

```sh
slither .
```

By default (as of version 0.10.0), this will skip tests and scripts. To force inclusion of the tests and scripts, add the `--foundry-compile-all` flag.

To run Slither on a single file, use this command:

```sh
slither src/Contract.sol
```

Note, this requires configuring the [solc version in the foundry config file](https://book.getfoundry.sh/config/reference/solidity-compiler#solc_version).

You do not need to provide remappings via the `solc_remaps` option as Slither will automatically detect remappings in a Foundry project. Slither will invoke `forge` to perform the build.

See the [Slither wiki](https://github.com/crytic/slither/wiki/Usage) for more information.

In order to use a custom configuration, such as the sample `slither.config.json` mentioned above, the following command is used as mentioned in the [slither-wiki](https://github.com/crytic/slither/wiki/Usage#configuration-file). By default slither looks for the `slither.config.json` but you can define the path and any other `json` file of your choice:

```sh
slither --config-file <path>/file.config.json .
```

Example output (Raw):

```bash
Pragma version^0.8.13 (Counter.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7
solc-0.8.13 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

setNumber(uint256) should be declared external:
        - Counter.setNumber(uint256) (Counter.sol#7-9)
increment() should be declared external:
        - Counter.increment() (Counter.sol#11-13)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
Counter.sol analyzed (1 contracts with 78 detectors), 4 result(s) found
```

Slither also has a [GitHub Action](https://github.com/marketplace/actions/slither-action) for CI/CD.

#### Aderyn

To test your project using [aderyn](https://github.com/cyfrin/aderyn), install the [VS Code extension](https://marketplace.visualstudio.com/items?itemName=Cyfrin.aderyn\&ssr=false#overview) supported by Cyfrin.

To run the tool manually, follow the [Quick Start](https://cyfrin.gitbook.io/cyfrin-docs/aderyn-cli/quickstart) example with video guide.

```bash
cd path/to/solidity/project/root
aderyn
```

Explore more CLI options [here](https://cyfrin.gitbook.io/cyfrin-docs/cli-options).

#### Mythril

To test your project using [mythril](https://github.com/ConsenSys/mythril), here is a sample `mythril.config.json`:

```json
{
  "remappings": ["ds-test/=lib/ds-test/src/", "forge-std/=lib/forge-std/src/"],
  "optimizer": {
    "enabled": true,
    "runs": 200
  }
}
```

Note, you need switch `rustc` to nightly to install `mythril`:

```
rustup default nightly
pip3 install mythril
myth analyze src/Contract.sol --solc-json mythril.config.json
```

See the [mythril docs](https://mythril-classic.readthedocs.io/en/develop/) for more information.

You can pass custom Solc compiler output to Mythril using the `--solc-json` flag. For example:

```bash
myth analyze src/Counter.sol --solc-json mythril.config.json
.
.
mythril.laser.plugin.loader [INFO]: Loading laser plugin: coverage
mythril.laser.plugin.loader [INFO]: Loading laser plugin: mutation-pruner
.
.
Achieved 11.56% coverage for code: 608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220659fce8aadca285da9206b61f95de294d3958c409cc3011ded856f421885867464736f6c63430008100033
mythril.laser.plugin.plugins.coverage.coverage_plugin [INFO]: Achieved 90.13% coverage for code: 6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220659fce8aadca285da9206b61f95de294d3958c409cc3011ded856f421885867464736f6c63430008100033
mythril.laser.plugin.plugins.instruction_profiler [INFO]: Total: 1.0892839431762695 s
[ADD         ]   0.9974 %,  nr      9,  total   0.0109 s,  avg   0.0012 s,  min   0.0011 s,  max   0.0013 s
.
.
[SWAP1       ]   1.8446 %,  nr     18,  total   0.0201 s,  avg   0.0011 s,  min   0.0010 s,  max   0.0013 s
[SWAP2       ]   0.8858 %,  nr      9,  total   0.0096 s,  avg   0.0011 s,  min   0.0010 s,  max   0.0011 s

mythril.analysis.security [INFO]: Starting analysis
mythril.mythril.mythril_analyzer [INFO]: Solver statistics:
Query count: 61
Solver time: 3.6820807456970215
The analysis was completed successfully. No issues were detected.
```

The findings will be listed at the end of this output if any. Since the default `Counter.sol` doesn't have any logic, `mythx` reports that no issues were found.


### Integrating with VSCode

You can get Solidity support for Visual Studio Code by installing the [VSCode Solidity extension](https://github.com/juanfranblanco/vscode-solidity).

To make the extension play nicely with Foundry, you may have to tweak a couple of things.

#### 1. Remappings

You may want to place your remappings in `remappings.txt`.

If they are already in `foundry.toml`, copy them over and use `remappings.txt` instead. If you just use the autogenerated remappings that Foundry provides, run `forge remappings > remappings.txt`.

#### 2. Dependencies

You may have to add the following to your `.vscode/settings.json` for the extension to find your dependencies:

```json
{
  "solidity.packageDefaultDependenciesContractsDirectory": "src",
  "solidity.packageDefaultDependenciesDirectory": "lib"
}
```

Where `src` is the source code directory and `lib` is your dependency directory.

#### 3. Formatter

To enable the built-in formatter that comes with Foundry to automatically format your code on save, you can add the following settings to your `.vscode/settings.json`:

```json
{
  "editor.formatOnSave": true,
  "[solidity]": {
    "editor.defaultFormatter": "JuanBlanco.solidity"
  },
  "solidity.formatter": "forge"
}
```

To configure the formatter settings, refer to the [Formatter](/config/reference/formatter) reference.

#### 4. Solc Version

Finally, it is recommended to specify a Solidity compiler version:

```json
"solidity.compileUsingRemoteVersion": "v0.8.17"
```

To get Foundry in line with the chosen version, add the following to your `default` profile in `foundry.toml`.

```toml
solc = "0.8.17"
```

#### Example of using OpenZeppelin contracts and non-standard project layout.

```bash
.
└── project
    └── contracts
        ├── lib
        │   ├── forge-std
        │   └── openzeppelin-contracts
        ├── script
        ├── src
        └── test
```

Add line to `remappings.txt` file ([`forge remapping`](/guides/project-setup/dependencies#remapping-dependencies)):

```solidity
@openzeppelin/=lib/openzeppelin-contracts/
```

Add line to `.vscode/settings.json` file (solidity extension settings):

```json
{
  "solidity.remappings": [
    "@openzeppelin/=project/contracts/lib/openzeppelin-contracts/"
  ]
}
```

Now all contracts from the OpenZeppelin documentation can be used.

```javascript
import { ERC20 } from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
```


### Vyper support

Foundry supports compiling and testing Vyper contracts.

#### 1. Compilation

You can install Vyper by following the instructions [here](https://vyper.readthedocs.io/en/stable/installing-vyper.html). If you have `vyper` available in your PATH, foundry will automatically use it.

Otherwise, you can set the path to `vyper` in your `foundry.toml` by adding the following:

```toml
[vyper]
path = "/path/to/vyper"
```

##### Vyper libraries via `forge install`

If you want an import like the following to work in your Vyper contract:

```vyper
from snekmate.utils import eip712_domain_separator
```

You can install Vyper the desired library via `forge install` e.g. `forge install pcaversaccio/snekmate`.

You then need to adjust your `foundry.toml` as follows (replacing "snekmate" with the name of your
desired package):

```toml
skip = ["**/lib/snekmate/**"]
libs = ["lib", "lib/snekmate/src"]
```

##### Vyper libraries via `pip`

Alternatively if you want to install the package via `pip` into your system's python configuration
or a virtual environment you can point foundry to it by modifying your `foundry.toml` as follows:

```toml
# Assuming you have a virtual environment in `.venv` and are using Python 3.12
libs = ["lib", ".venv/lib/python3.12/site-packages/"]
```

Note that compatible alternative python package managers like `uv` will work too.

#### 2. Solidity tests

Let's write a test for this simple Counter contract:

```vyper
number: public(uint256)

@deploy
@payable
def __init__(initial_number: uint256):
    self.number = initial_number

@external
def set_number(new_number: uint256):
    self.number = new_number

@external
def increment():
    self.number += 1
```

We can deploy it by using the `deployCode` cheatcode from `forge-std` and test it with the following Solidity test:

```solidity
import {Test} from "forge-std/Test.sol";

interface ICounter {
    function increment() external;
    function number() external view returns (uint256);
    function set_number(uint256 newNumber) external;
}

contract CounterTest is Test {
    ICounter public counter;
    uint256 initialNumber = 5;

    function setUp() public {
        counter = ICounter(deployCode("Counter", abi.encode(initialNumber)));
        assertEq(counter.number(), initialNumber);
    }

    function test_Increment() public {
        counter.increment();
        assertEq(counter.number(), initialNumber + 1);
    }

    function testFuzz_SetNumber(uint256 x) public {
        counter.set_number(x);
        assertEq(counter.number(), x);
    }
}
```

#### 3. Deploying

You can deploy Vyper contracts via `forge create` command:

```bash
forge create Counter --constructor-args '1' --rpc-url $RPC_URL --private-key $PRIVATE_KEY
```

And with `deployCode` you can deploy Vyper contracts in your scripts as well:

```solidity
import {Script} from "forge-std/Script.sol";

contract CounterScript is Script {
    function run() public {
        vm.broadcast();
        deployCode("src/Counter.vy", abi.encode(1));
    }
}
```

#### 4. Vyper scripts

You can write Vyper scripts in the same way as Solidity scripts:

```vyper
interface Vm:
    def startBroadcast(): nonpayable

interface ICounter:
    def increment(): nonpayable
    def number() -> uint256: view

vm: constant(Vm) = Vm(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D)

@external
def run(counter: address):
    number_before: uint256 = staticcall ICounter(counter).number()

    extcall vm.startBroadcast()
    extcall ICounter(counter).increment()

    number_after: uint256 = staticcall ICounter(counter).number()

    assert number_after == number_before + 1
```

Such script can be run with the following command:

```bash
forge script script/Increment.s.vy  --sig 'run' '<counter address>' --rpc-url $RPC_URL --broadcast  --private-key $PRIVATE_KEY
```

#### 5. Limitations

* While you can write and run tests and scripts in Vyper, there is no `new` keyword in Vyper allowing you to deploy contracts. This will be addressed in the future with new cheatcodes.
* Vyper does not allow overloads with the same names but different parameter types. Thus some cheatcode combinations might require workarounds to be used. (e.g. `startBroadcast(address sender))` and `startBroadcast(uint256 pk)`)
* `forge coverage` currently does not support Vyper contracts.


### Debugger

Forge ships with an interactive debugger.

The debugger is accessible on [`forge test`](/forge/reference/forge-test), on [`forge script`](/forge/reference/forge-script) and on [`cast run`](/cast/reference/cast-run). You can only select a single function or a single transaction to debug at the time.

Using `forge test` (or `forge script`):

```sh
forge test --debug --match-test "<REGEX>"
```

Where `<REGEX>` is the function signature of the file you want to debug. For example:

```sh
forge test --debug --match-test "test_Increment"
```

If the matching test is a fuzz test, the debugger will open the first failing fuzz scenario, or the last successful one, whichever comes first. For example:

```sh
forge test --debug --match-test "testFuzz_SetNumber"
```

Using `cast run`:

```sh
cast run --debug \
  0xd15e0237413d7b824b784e1bbc3926e52f4726e5e5af30418803b8b327b4f8ca
```

#### Debugger layout

![An image of the debugger UI](/debugger.png)

When the debugger is run, you are presented with a terminal divided into four quadrants:

* **Quadrant 1**: The opcodes in the debugging session, with the current opcode highlighted. Additionally, the address of the current account, the program counter and the accumulated gas usage is also displayed
* **Quadrant 2**: The current stack, as well as the size of the stack
* **Quadrant 3**: The source view
* **Quadrant 4**: The current memory of the EVM

As you step through your code, you will notice that the words in the stack and memory sometimes change color.

For the memory:

* **Red words** are about to be written to by the current opcode
* **Green words** were written to by the previous opcode
* **Cyan words** are being read by the current opcode

For the stack, **cyan words** are either being read or popped by the current opcode.

> ⚠️ **Note**
>
> In most test frameworks, the first test assertion to fail is the one reported.
> In foundry, the last test assertion to fail (that comes from DSTest or cheatcodes) is the one to be reported.

#### Navigating

#### General

* <kbd>q</kbd>: Quit the debugger
* <kbd>h</kbd>: Show help

#### Navigating calls

* <kbd>0-9</kbd> + <kbd>k</kbd>: Step a number of times backwards (alternatively scroll up with your mouse)
* <kbd>0-9</kbd> + <kbd>j</kbd>: Step a number of times forwards (alternatively scroll down with your mouse)
* <kbd>g</kbd>: Move to the beginning of the transaction
* <kbd>G</kbd>: Move to the end of the transaction
* <kbd>c</kbd>: Move to the previous call-type instruction (i.e. [`CALL`][op-call], [`STATICCALL`][op-staticcall], [`DELEGATECALL`][op-delegatecall], and [`CALLCODE`][op-callcode]).
* <kbd>C</kbd>: Move to the next call-type instruction
* <kbd>a</kbd>: Move to the previous [`JUMP`][op-jump] or [`JUMPI`][op-jumpi] instruction
* <kbd>s</kbd>: Move to the next [`JUMPDEST`][op-jumpdest] instruction
* <kbd>'</kbd> + <kbd>a-z</kbd>: Move to `<char>` breakpoint set by a [`vm.breakpoint`][cheat-breakpoint] cheatcode

#### Navigating memory

* <kbd>Ctrl</kbd> + <kbd>j</kbd>: Scroll the memory view down
* <kbd>Ctrl</kbd> + <kbd>k</kbd>: Scroll the memory view up
* <kbd>m</kbd>: Show memory as UTF8

#### Navigating the stack

* <kbd>J</kbd>: Scroll the stack view down
* <kbd>K</kbd>: Scroll the stack view up
* <kbd>t</kbd>: Show labels on the stack to see what items the current op will consume

[op-call]: https://www.evm.codes/#f1

[op-staticcall]: https://www.evm.codes/#fa

[op-delegatecall]: https://www.evm.codes/#f4

[op-callcode]: https://www.evm.codes/#f2

[op-jumpdest]: https://www.evm.codes/#5b

[op-jump]: https://www.evm.codes/#f1

[op-jumpi]: https://www.evm.codes/#57

[cheat-breakpoint]: /reference/cheatcodes/breakpoint


### Deploying

Forge can deploy smart contracts to a given network with the [`forge create`](/forge/reference/forge-create) command.

Forge CLI can deploy only one contract at a time.

For deploying and verifying multiple smart contracts on multiple chains in one go, Forge's [Solidity scripting](/guides/scripting-with-solidity) would be the more efficient approach.

To deploy a contract, you must provide a RPC URL (env: `ETH_RPC_URL`) and the private key of the account that will deploy the contract. Additionally the `--broadcast` flag is responsible for publishing your transaction to the network as a safety precaution and mirrors the `--broadcast` flag of `forge script`. If you do not pass the `--broadcast` flag your transaction is a dry-run.

To deploy `MyContract` to a network:

```sh
forge create src/MyContract.sol:MyContract --rpc-url <YOUR_RPC_URL> --private-key <YOUR_PRIVATE_KEY> --broadcast
compiling...
success.
Deployer: 0xa735b3c25f...
Deployed to: 0x4054415432...
Transaction hash: 0x6b4e0ff93a...
```

Solidity files may contain multiple contracts. `:MyContract` above specifies which contract to deploy from the `src/MyContract.sol` file.

Use the `--constructor-args` flag to pass arguments to the constructor:

```solidity
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import {ERC20} from "solmate/tokens/ERC20.sol";

contract MyToken is ERC20 {
    constructor(
        string memory name,
        string memory symbol,
        uint8 decimals,
        uint256 initialSupply
    ) ERC20(name, symbol, decimals) {
        _mint(msg.sender, initialSupply);
    }
}
```

Additionally, we can tell Forge to verify our contract on Etherscan, Sourcify or Blockscout, if the network is supported, by passing `--verify`.

```sh
forge create src/MyToken.sol:MyToken --rpc-url <YOUR_RPC_URL> \
    --private-key <YOUR_PRIVATE_KEY> \
    --broadcast \
    --etherscan-api-key <YOUR_ETHERSCAN_API_KEY> \
    --verify \
    --constructor-args "ForgeUSD" "FUSD" 18 1000000000000000000000
```

### Multi-chain deployments

Deploying and verifying multiple smart contracts on multiple chains in one go is possible by using forking cheatcodes.

For example, if you want to deploy a `Counter` contract on Sepolia Mainnet and Base Sepolia using a single command, you can configure RPC endpoints and verifiers as:

```toml
[rpc_endpoints]
sepolia = "${SEPOLIA_URL}"
base-sepolia = "${BASE_SEPOLIA_URL}"

[etherscan]
sepolia = { key = "${ETHERSCAN_API_KEY}" }
base-sepolia = { key = "${ETHERSCAN_API_KEY}" }
```

and create a `CounterScript` script as:

```solidity
contract CounterScript is Script {
    function run() public {
        vm.createSelectFork("sepolia");
        vm.startBroadcast();
        new Counter();
        vm.stopBroadcast();

        vm.createSelectFork("base-sepolia");
        vm.startBroadcast();
        new Counter();
        vm.stopBroadcast();
    }
}
```

When running:

```sh
forge script script/CounterScript.s.sol --slow --multi --broadcast --private-key <YOUR_PRIVATE_KEY> --verify
```

The script will create the Sepolia Mainnet fork (`vm.createSelectFork("sepolia")`), deploy and verify the `Counter` contract, and then move to Base Sepolia chain deployment (`vm.createSelectFork("base-sepolia")`).

For a list of all available forking cheatcodes see [`forking`](/reference/cheatcodes/forking) docs.

### Verifying a pre-existing contract

It is recommended to use the `--verify` flag with `forge create` to automatically verify the contract on explorer after a deployment.
Note that for Etherscan [`ETHERSCAN_API_KEY`](https://docs.etherscan.io/getting-started/viewing-api-usage-statistics) must be set.

If you are verifying an already deployed contract, read on.

You can verify a contract on Etherscan, Sourcify, oklink or Blockscout with the [`forge verify-contract`](/forge/reference/forge-verify-contract) command.

You must provide:

* the contract address
* the contract name or the path to the contract `<path>:<contractname>`
* your Etherscan API key (env: `ETHERSCAN_API_KEY`) (if verifying on Etherscan or similar explorers e.g. BscScan / BaseScan / Polygonscan).

Moreover, you may need to provide:

* the constructor arguments in the ABI-encoded format, if there are any
* external linked libraries in `src_file_path:library_name:library_address` format, if there are any
* [compiler version](https://etherscan.io/solcversions) used for build, with 8 hex digits from the commit version prefix (the commit will usually not be a nightly build). It is auto-detected if not specified.
* the number of optimizations, if the Solidity optimizer was activated. It is auto-detected if not specified.
* the [chain ID](https://evm-chainlist.netlify.app/), if the contract is not on Ethereum Mainnet

Let's say you want to verify `MyToken` (see above). You set the [number of optimizations](/config/reference/solidity-compiler#optimizer_runs) to 1 million, compiled it with v0.8.10, and deployed it, as shown above, to the Sepolia testnet (chain ID: 11155111). Note that `--num-of-optimizations` will default to 0 if not set on verification, while it defaults to 200 if not set on deployment, so make sure you pass `--num-of-optimizations 200` if you left the default compilation settings.

Here's how to verify it:

```bash
forge verify-contract \
    --chain-id 11155111 \
    --num-of-optimizations 1000000 \
    --watch \
    --constructor-args $(cast abi-encode "constructor(string,string,uint256,uint256)" "ForgeUSD" "FUSD" 18 1000000000000000000000) \
    --verifier etherscan \
    --etherscan-api-key <your_etherscan_api_key> \
    --compiler-version v0.8.10+commit.fc410830 \
    <CONTRACT_ADDRESS> \
    src/MyToken.sol:MyToken

Submitted contract for verification:
                Response: `OK`
                GUID: `a6yrbjp5prvakia6bqp5qdacczyfhkyi5j1r6qbds1js41ak1a`
                url: https://sepolia.etherscan.io//address/0x6a54…3a4c#code
```

> ℹ️ **Note:**
>
> External libraries can be specified with `--libraries` argument, one for each linked library. For example, to verify a contract with two linked libraries (`Maths` and `Utils`) the `forge verify-command` should be run with
>
> ```bash
> --libraries src/lib/Maths.sol:Maths:<maths_lib_address> \
> --libraries src/lib/Utils.sol:Utils:<utils_lib_address>
> ```
>
> arguments.

It is recommended to use the [`--watch`](/forge/reference/forge-verify-contract#verify-contract-options) flag along
with `verify-contract` command in order to poll for the verification result.

If the `--watch` flag was not supplied, you can check
the verification status with the [`forge verify-check`](/forge/reference/forge-verify-check) command:

```bash
forge verify-check --chain-id 11155111 <GUID> <YOUR_ETHERSCAN_API_KEY>
Contract successfully verified.
```

<br />

> 💡 **Tip**
>
> Use Cast's [`abi-encode`](/cast/reference/cast-abi-encode) to ABI-encode arguments.
>
> In this example, we ran `cast abi-encode "constructor(string,string,uint8,uint256)" "ForgeUSD" "FUSD" 18 1000000000000000000000` to ABI-encode the arguments.

<br />

#### Troubleshooting

##### `missing hex prefix ("0x") for hex string`

Make sure the private key string begins with `0x`.

##### `EIP-1559 not activated`

EIP-1559 is not supported or not activated on the RPC server. Pass the `--legacy` flag to use legacy transactions instead of the EIP-1559 ones. If you do development in a local environment, you can use Hardhat instead of Ganache.

##### `Failed to parse tokens`

Make sure the passed arguments are of correct type.

##### `Signature error`

Make sure the private key is correct.

##### `Compiler version commit for verify`

If you want to check the exact commit you are running locally, try: ` ~/.svm/0.x.y/solc-0.x.y --version` where `x` and
`y` are major and minor version numbers respectively. The output of this will be something like:

```bash
solc, the solidity compiler commandline interface
Version: 0.8.12+commit.f00d7308.Darwin.appleclang
```

Note: You cannot just paste the entire string "0.8.12+commit.f00d7308.Darwin.appleclang" as the argument for the compiler-version. But you can use the 8 hex digits of the commit to look up exactly what you should copy and paste from [compiler version](https://etherscan.io/solcversions).

##### `Invalid API Key`

With [Etherscan API V2](https://docs.etherscan.io/etherscan-v2), only Etherscan keys are valid, this can be used for similar explorers eg BscScan/BaseScan/Polygonscan. Legacy keys from other explorers have been deprecated.

#### Known Issues

##### Verifying Contracts With Ambiguous Import Paths

Forge passes source directories (`src`, `lib`, `test` etc) as `--include-path` arguments to the compiler.
This means that given the following project tree

```text
|- src
|-- folder
|--- Contract.sol
|--- IContract.sol
```

it is possible to import `IContract` inside the `Contract.sol` using `folder/IContract.sol` import path.

Etherscan is not able to recompile such sources. Consider changing the imports to use relative import path.


### Forge Overview

Forge is a command-line tool that ships with Foundry. Forge tests, builds, and deploys your smart contracts.

Forge is part of the Foundry suite and is installed alongside `cast`, `chisel`, and `anvil`. If you haven't installed Foundry
yet, see [Foundry installation](/introduction/installation).

#### Getting started

The best way to understand Forge is to simply try it (in less than 30 seconds!).

First, let's initialize a new `counter` example repository:

```sh
forge init counter
```

Next `cd` into `counter` and build :

```sh
forge build
```

```console
[⠊] Compiling...
[⠔] Compiling 27 files with Solc 0.8.28
[⠒] Solc 0.8.28 finished in 452.13ms
Compiler run successful!
```

Let's [test](https://book.getfoundry.sh/forge/tests#tests) our contracts:

```sh
forge test
```

```console
[⠊] Compiling...
No files changed, compilation skipped

Ran 2 tests for test/Counter.t.sol:CounterTest
[PASS] testFuzz_SetNumber(uint256) (runs: 256, μ: 31121, ~: 31277)
[PASS] test_Increment() (gas: 31293)
Suite result: ok. 2 passed; 0 failed; 0 skipped; finished in 5.35ms (4.86ms CPU time)

Ran 1 test suite in 5.91ms (5.35ms CPU time): 2 tests passed, 0 failed, 0 skipped (2 total tests)
```

Finally, let's run our deployment script:

```sh
forge script script/Counter.s.sol
```

```
[⠊] Compiling...
No files changed, compilation skipped
Script ran successfully.
Gas used: 109037

If you wish to simulate on-chain transactions pass a RPC URL.
```

:::info
See the [`forge` Reference](/forge/reference/overview) for a complete overview of all the available subcommands.
:::


### Deterministic deployments using `CREATE2`

Enshrined into the EVM as part of the [Constantinople fork](https://ethereum.org/en/history/#constantinople) of 2019, `CREATE2` is an opcode that started its journey as [EIP-1014](https://eips.ethereum.org/EIPS/eip-1014).
`CREATE2` allows you to deploy smart contracts to deterministic addresses, based on parameters controlled by the deployer.

As a result, it's often mentioned as enabling "counterfactual" deployments, where you can interact with an addresses that haven't been created yet because `CREATE2` guarantees known code can be placed at that address.

This is in contrast to the `CREATE` opcode, where the address of the deployed contract is a function of the deployer's nonce.
With `CREATE2`, you can use the same deployer account to deploy contracts to the same address across multiple networks, even if the address has varying nonces.

For the best user experience it is recommended to avoid having different addresses of the same deployment across different EVM chains.

### Getting started

> ℹ️ **Note**
>
> This guide is intended to help you get started with configuring deterministic deployments using `CREATE2`.
> By default, `new Counter{salt: salt}()` will use the deterministic deployer at [`0x4e59b44847b379578588920ca78fbf26c0b4956c`](https://github.com/Arachnid/deterministic-deployment-proxy). Note that the deployer may not be available on all EVM chains.
> A different deployer address can be configured by setting `create2_deployer` in `foundry.toml` or by using `--create2-deployer` argument.

### Configuring your `foundry.toml`

In order to reliably deploy to deterministic addresses we will need to make sure our bytecode stays the same. To do so configure our `foundry.toml` as follows:

```toml
[profile.default]
solc = "<SOLC_VERSION>"
evm_version = "<EVM_VERSION>"
bytecode_hash = "none"
cbor_metadata = false
```

#### Solc version

It is required to pin your `solc` (Solidity) version. It is generally recommended to use a recent version or, if preferred, the latest version.

#### EVM version

Next, configure your `evm_version`. It is generally recommended to use the most recent hardfork but depending on your deployment targets this may need to use an older hardfork due to opcode incompatibilities.

#### Metadata and bytecode

By default the Solidity compiler appends the hash of the metadata file at end of the bytecode. This bytecode includes things like the compiler version and the ABI.

Since the source file hashes are included in the metadata file, even if a single byte of source files changes, the metadata hash changes too. That means, if we can compile a contract with given source files and the bytecode + the appended metadata hash are exactly the same as an on-chain contract, we can be sure that this is a byte-by-byte match of the same source files and the same compilation settings.

The metadata file may look something like this:

```json
{
  "compiler": {
    "version": "0.8.28+commit.7893614a"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "increment"
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "number",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newNumber",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setNumber"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {},
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {},
      "version": 1
    }
  },
  "settings": {
    "remappings": ["forge-std/=lib/forge-std/src/"],
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "compilationTarget": {
      "src/Counter.sol": "Counter"
    },
    "evmVersion": "cancun",
    "libraries": {}
  },
  "sources": {
    "src/Counter.sol": {
      "keccak256": "0x09277f949d59a9521708c870dc39c2c434ad8f86a5472efda6a732ef728c0053",
      "urls": [
        "bzz-raw://94cd5258357da018bf911aeda60ed9f5b130dce27445669ee200313cd3389200",
        "dweb:/ipfs/QmNbEfWAqXCtfQpk6u7TpGa8sTHXFLpUz7uebz2FVbchSC"
      ],
      "license": "UNLICENSED"
    }
  },
  "version": 1
}
```

Click [here](https://playground.sourcify.dev/) to learn more about the metadata file.

By disabling the metadata as follows:

```toml
bytecode_hash = "none"
cbor_metadata = false
```

You are not including the metadata hash as part of the bytecode. This means that whilst your bytecode can now be deterministic you won't be able to have a [`full match`](https://docs.sourcify.dev/docs/full-vs-partial-match/#full-perfect-matches), only a [`partial match`](https://docs.sourcify.dev/docs/full-vs-partial-match/#partial-matches) when verifying your contracts. Depending on your requirements this may be acceptable.

#### Optimizer

If you are enabling the `optimizer` make sure your `optimizer_runs` stay consistent.

#### Create2 factory

By default, your contracts won't use the default (or specified using the `create2_deployer` configuration) create2 factory and will default to executing the create2 opcode from the contract it's executed on. For example, this behavior occurs when running tests or executing scripts without a private key.

You can use the following configuration:

```toml
always_use_create_2_factory = true
```

If you wish to always use the create2 factory. This comes handy if you wish to use the create2 factory deployment addresses in your tests for example.

### Deploying the contract

When using Solidity's default `CREATE` where the new address of a contract is determined by taking the `hash` of the `sender`'s address and the `sender`'s `nonce`:

```
new_contract_address = keccak256(rlp_encode([sender, nonce]))[12:]
```

```solidity
// Using the default CREATE opcode
Counter counter = new Counter();
```

Because the `nonce` can only be used a single time it on each chain it is an unreliable way of deploying to the same contract address.

Instead let's use `CREATE2`'s `salt` parameter.

The `salt` parameter in `CREATE2` is a key component that determines the final deployed contract address. It allows for flexibility and uniqueness in deterministic deployments. The address of the deployed contract is derived using the following formula:

```
new_contract_address = keccak256(0xff ++ deployer ++ salt ++ keccak256(init_code))
```

```solidity
// Passing the `salt` parameter to the CREATE2 opcode
Counter counter = new Counter{salt: salt}();
```

* `0xff` is a fixed prefix ensuring uniqueness.
* `deployer` is the address executing the CREATE2 operation.
* `salt` is a 32-byte value chosen by the deployer.
* `keccak256(bytecode)` is the hash of the contract's creation bytecode.

Given that `0xff` is fixed, the `deployer` is a deterministic deployer ([0x4e59b44847b379578588920ca78fbf26c0b4956c](https://github.com/Arachnid/deterministic-deployment-proxy)) and our bytecode is fixed we can use the `salt` parameter to fully control our new contract address.

### Additional resources

* [Contract Metadata](https://docs.soliditylang.org/en/latest/metadata.html)
* [Deterministic deployments agnostic to the initialization code](https://github.com/Vectorized/solady/blob/main/src/utils/CREATE3.sol)


### Implementing and Testing EIP-712 signatures

Foundry offers multiple utilities to make it easy and reliable to work with EIP-712 signatures.

EIP-712 is a standard for hashing and signing typed structured data. Instead of signing an opaque hash, users can sign human-readable messages, significantly improving usability and security. This is particularly useful for meta-transactions, permit functions (like in ERC-20 permits), and other off-chain signature schemes. However, correctly implementing EIP-712 hashing logic can be intricate. Foundry's suite provides powerful utilities specifically designed to help developers test and validate their EIP-712 implementations with confidence.

This guide will show you how to leverage Foundry's EIP-712 commands and cheatcodes with a practical, real-world example, demonstrating how to validate a complex library like Uniswap's `PermitHash.sol` from their Permit2 system. This will showcase how to ensure that a custom EIP-712 hashing implementation aligns perfectly with the standard.

### EIP-712 commands

Forge offers a couple of commands which are useful when working with EIP-712 types:

#### forge eip712

Outputs the canonical type definitions of the structs in the target files in the terminal.

:::tip
Use the `forge eip712` command to generate the canonical type definitions and manually copy-paste them into your contracts. This way you will avoid typos.
:::

#### forge bind-json

Automatically generates solidity bindings for the structs in the target files.
The generated bindings can easily be serialized to JSON strings, and also parsed from JSON strings.
Additionally, these bindings also allow the EIP-712 cheatcodes to derive the type definitions just their name.

### EIP-712 cheatcodes

Foundry offers several cheatcodes to interact with EIP-712 types:

##### vm.eip712HashType

* Generates the `typeHash` for an EIP-712 struct definition. This is `keccak256` of the canonical type encoding.
* It can take a direct string definition (i.e. `"Mail(address from,string contents)"`) or a type name if you've used `forge bind-json` to generate bindings from your Solidity structs.

##### vm.eip712HashStruct

* Computes the `structHash`: `keccak256(typeHash + encodeData(struct)).`
* `encodeData(struct)` is the ABI-encoded values of the struct's members.
* Like `vm.eip712HashType`, it accepts either a direct type definition string or a type name (with bindings).

##### vm.eip712HashTypedData

* Generates the final EIP-712 digest to be signed: `keccak256("\x19\x01" + domainSeparator + structHash)`.
* It takes a full JSON string representing the typed data as per the EIP-712 specification. Useful for end-to-end testing of signature verification.

#### Testing Uniswap's `PermitHash` library

Uniswap's `Permit2` system utilizes the `PermitHash.sol` library to create hashes that comply with the EIP-712 standard for various permit structures. In this guide, we will demonstrate how to use Foundry to verify that the library correctly implements the EIP-712 hashing rules.

Our objective is to focus on a few hashing functions within `PermitHash.sol`. We will provide these functions with sample data and then use `vm.eip712HashStruct` —with the same data and the canonical EIP-712 type definition— to determine if the generated hashes match.

##### Setting up the test environment

Before starting with the validations, we have to create the `PermitHash.t.sol` test file.

```solidity
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "forge-std/Test.sol";
// Import the library we are testing
import {PermitHash} from "src/libraries/PermitHash.sol";
import {IAllowanceTransfer as IAT} from "src/interfaces/IAllowanceTransfer.sol";

/* These are the structs, defined in `IAT`, that `PermitHash` relies on:

struct PermitDetails {
  address token;
  uint160 amount;
  uint48 expiration;
  uint48 nonce;
}

struct PermitSingle {
  PermitDetails details;
  address spender;
  uint256 sigDeadline;
}
*/
```

> **Tip:** as previously explained, you can use `forge bind-json` to leverage Foundry's capabilities, and have higher guarantees when testing. By running that command, you can simply use the struct name when using the EIP-712 cheatcodes, and Foundry will automatically derive the canonical type definition.

#### Validating `typHash`

First of all, ensure that the type hashes for each of the structs are correct:

```solidity
contract PermitHashTest is Test {
  function test_validatePermitDetails_typeHash() public {
    // This test doesn't rely on the bindings generated by `forge json`, therefore it requires
    // the string representation of the type as an input for the cheatcode.

    // Assume available on Uniswap's library. Otherwise you'd have to copy-paste it manually.
    string memory _PERMIT_DETAILS_TYPEDEF =
      "PermitDetails(address token,uint160 amount,uint48 expiration,uint48 nonce)";

    // The type hash constant defined in Uniswap's library
    bytes32 typeHash = PermitHash._PERMIT_DETAILS_TYPEHASH;

    // Use the cheatcode to get the expected hash (with string representation)
    bytes32 expected = vm.eip712HashType(_PERMIT_DETAILS_TYPEDEF);

    assertEq(typeHash, expected, "PermitDetails typeHash mismatch");
  }

  function test_validatePermitSingle_typeHash() public {
    // The type hash constant defined in Uniswap's library
    bytes32 typeHash = PermitHash._PERMIT_SINGLE_TYPEHASH;

    // Use the cheatcode to get the expected hash (needs bindings)
    bytes32 expected = vm.eip712HashType("PermitSingle");

    assertEq(typeHash, expected, "PermitSingle typeHash mismatch");
  }
}
```

:::note
If the library's `typeHash` was flawed, the assertion against the cheatcode would surface it.
:::

#### Validating `structHash`

After being certain that the hashes of the type definitions are correct, let's validate that the hashes of the structs follow the EIP-712 specification.

```solidity
contract PermitHashTest is Test {
  address TOKEN = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
  address SPENDER = 0xdEADBEeF00000000000000000000000000000000;

  function test_validatePermitDetails_structHash() public {
    // This test doesn't rely on the bindings generated by `forge bind-json`, therefore it requires
    // the string representation of the type as an input for the cheatcode.

    // Assume available on Uniswap's library. Otherwise you'd have to copy-paste it manually.
    string memory _PERMIT_DETAILS_TYPEDEF =
      "PermitDetails(address token,uint160 amount,uint48 expiration,uint48 nonce)";

    // Prepare the test data for PermitDetails
    IAllowanceTransfer.PermitDetails memory details = IAllowanceTransfer.PermitDetails({
      token: TOKEN,
      amount: 100 ether,
      expiration: uint48(block.timestamp + 3600),
      nonce: 123
    });

    // Get the structHash from Uniswap's library.
    // Despite private, assume it is available with a public function.
    bytes32 structHash = PermitHash._hashPermitDetails(details);

    // Use the cheatcode to get the expected hash (with string representation)
    bytes32 expected = vm.eip712HashStruct(_PERMIT_DETAILS_TYPEDEF, abi.encode(details));

    assertEq(structHash, expected, "PermitDetails structHash mismatch");
  }

  function test_validatePermitSingle_structHash() public {
    IAT.PermitDetails memory details = IAT.PermitDetails({
      token: TOKEN,
      amount: 200 ether,
      expiration: uint48(block.timestamp + 7200),
      nonce: 456
    });

    IAT.PermitSingle memory permitSingle = IAT.PermitSingle({
      details: details,
      spender: SPENDER,
      sigDeadline: block.timestamp + 10800
    });

    // Get the structHash from Uniswap's library.
    bytes32 structHash = PermitHash.hash(permitSingle);

    // Use the cheatcode to get the expected hash (needs bindings)
    bytes32 expectedStructHash = vm.eip712HashStruct("PermitSingle", abi.encode(permitSingle));

    assertEq(structHash, expected, "PermitSingle structHash mismatch");
  }
}
```

:::note
If the library's `structHash` was flawed, the assertion against the cheatcode would surface it.
:::


### Forking Mainnet with `Cast` and `Anvil`

By combining [Anvil][anvil] and [Cast][cast], you can fork and test by interacting with contracts on a real network. The goal of this guide is to show you how to transfer DAI tokens from someone who holds DAI to an account created by Anvil.

### Getting started

Let's start by forking mainnet.

```sh
anvil --fork-url https://mainnet.infura.io/v3/$INFURA_KEY
```

You will see 10 accounts are created with their public and private keys. We will work with `0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266` (Let's call this user Alice).

### Transferring DAI

Go to Etherscan and search for holders of DAI tokens ([here](https://etherscan.io/token/0x6b175474e89094c44da98b954eedeac495271d0f#balances)). Let's pick a random account. In this example we will be using `0xfc2eE3bD619B7cfb2dE2C797b96DeeCbD7F68e46`. Let's export our contracts and accounts as environment variables:

```sh
export ALICE=0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266
export DAI=0x6b175474e89094c44da98b954eedeac495271d0f
export UNLUCKY_USER=0xfc2eE3bD619B7cfb2dE2C797b96DeeCbD7F68e46
```

We can check Alice's balance using [`cast call`][cast-call]:

```sh
cast call $DAI \
  "balanceOf(address)(uint256)" \
  $ALICE
0
```

Similarly, we can also check our unlucky user's balance using `cast call`:

```sh
cast call $DAI \
  "balanceOf(address)(uint256)" \
  $UNLUCKY_USER
21840114973524208109322438
```

Let's transfer some tokens from the unlucky user to Alice using [`cast send`][cast-send]:

```sh
# This calls Anvil and lets us impersonate our unlucky user
cast rpc anvil_impersonateAccount $UNLUCKY_USER
cast send $DAI \
--from $UNLUCKY_USER \
  "transfer(address,uint256)(bool)" \
  $ALICE \
  300000000000000000000000 \
  --unlocked
blockHash               0xbf31c45f6935a0714bb4f709b5e3850ab0cc2f8bffe895fefb653d154e0aa062
blockNumber             15052891
...
```

Let's check that the transfer worked:

```sh
cast call $DAI \
  "balanceOf(address)(uint256)" \
  $ALICE
300000000000000000000000

cast call $DAI \
  "balanceOf(address)(uint256)" \
  $UNLUCKY_USER
21540114973524208109322438
```

[anvil]: ../reference/anvil/

[cast]: ../cast/reference/

[cast-call]: ../cast/reference/cast-call.md

[cast-send]: ../cast/reference/cast-send.md


### Running Foundry inside of Docker

This guide shows you how to build, test, and deploy a smart contract using Foundry's Docker image. It adapts code from the \[`first steps`] guide. If you haven't completed that guide yet, and are new to solidity, you may want to start with it first. Alternatively, if you have some familiarity with Docker and Solidity, you can use your own existing project and adjust accordingly.

> This guide is for illustrative purposes only and provided on an as-is basis. The guide is not audited nor fully tested. No code in this guide should be used in a production environment.

#### Installation and Setup

The only installation required to run this guide is Docker, and optionally, an IDE of your choice.
Follow the [Docker installation instructions](/introduction/installation).

To keep future commands succinct, let's re-tag the image:
`docker tag ghcr.io/foundry-rs/foundry:latest foundry:latest`

Having Foundry installed locally is not strictly required, but it may be helpful for debugging. You can install it using [foundryup](/introduction/installation#using-foundryup).

Finally, to use any of the `cast` or `forge create` portions of this guide, you will need access to an Ethereum node. If you don't have your own node running (likely), you can use a 3rd party node service. We won't recommend a specific provider in this guide. A good place to start learning about Nodes-as-a-Service is [Ethereum's article](https://ethereum.org/en/developers/docs/nodes-and-clients/nodes-as-a-service/) on the subject.

**For the rest of this guide, it is assumed that the RPC endpoint of your ethereum node is set like this**: `export RPC_URL=<YOUR_RPC_URL>`

#### A tour around the Foundry docker image

The docker image can be used in two primary ways:

1. As an interface directly to forge and cast
2. As a base image for building your own containerized test, build, and deployment tooling

We will cover both, but let's start by taking a look at interfacing with foundry using docker. This is also a good test that your local installation worked!

We can run any of the `cast` [commands](/cast/reference/overview) against our docker image. Let's fetch the latest block information:

```sh
docker run foundry "cast block --rpc-url $RPC_URL latest"
baseFeePerGas        "0xb634241e3"
difficulty           "0x2e482bdf51572b"
extraData            "0x486976656f6e20686b"
gasLimit             "0x1c9c380"
gasUsed              "0x652993"
hash                 "0x181748772da2f968bcc91940c8523bb6218a7d57669ded06648c9a9fb6839db5"
logsBloom            "0x406010046100001198c220108002b606400029444814008210820c04012804131847150080312500300051044208430002008029880029011520380060262400001c538d00440a885a02219d49624aa110000003094500022c003600a00258009610c410323580032000849a0408a81a0a060100022505202280c61880c80020e080244400440404520d210429a0000400010089410c8408162903609c920014028a94019088681018c909980701019201808040004100000080540610a9144d050020220c10a24c01c000002005400400022420140e18100400e10254926144c43a200cc008142080854088100128844003010020c344402386a8c011819408"
miner                "0x1ad91ee08f21be3de0ba2ba6918e714da6b45836"
mixHash              "0xb920857687476c1bcb21557c5f6196762a46038924c5f82dc66300347a1cfc01"
nonce                "0x1ce6929033fbba90"
number               "0xdd3309"
parentHash           "0x39c6e1aa997d18a655c6317131589fd327ae814ef84e784f5eb1ab54b9941212"
receiptsRoot         "0x4724f3b270dcc970f141e493d8dc46aeba6fffe57688210051580ac960fe0037"
sealFields           []
sha3Uncles           "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347"
size                 "0x1d6bb"
stateRoot            "0x0d4b714990132cf0f21801e2931b78454b26aad706fc6dc16b64e04f0c14737a"
timestamp            "0x6246259b"
totalDifficulty      "0x9923da68627095fd2e7"
transactions         [...]
uncles               []
```

If we're in a directory with some Solidity [source code](https://github.com/dmfxyz/foundry-docker-guide), we can mount that directory into Docker and use `forge` however we wish. For example:

```sh
docker run -v $PWD:/app foundry "forge test --root /app --watch"
```

You can see our code was compiled and tested entirely within the container. Also, since we passed the `--watch` option, the container will recompile the code whenever a change is detected.

#### Creating a "build and test" image

Let's use the Foundry docker image as a base for using our own Docker image. We'll use the image to:

1. Build our solidity code
2. Run our solidity tests

A simple `Dockerfile` can accomplish these two goals:

```docker
# Use the latest foundry image
FROM ghcr.io/foundry-rs/foundry

# Copy our source code into the container
WORKDIR /app

# Build and test the source code
COPY . .
RUN forge build
RUN forge test
```

You can build this docker image and watch forge build/run the tests within the container:

```sh
docker build --no-cache --progress=plain .
```

Now, what happens if one of our tests fails? Modify `src/test/Counter.t.sol` to make a false assertion. Try to build image again.

```solidity
function testFuzz_SetNumber(uint256 x) public {
    counter.setNumber(x);
    assertEq(counter.number(), 5);
}
```

```sh
docker build --no-cache --progress=plain .
<...>
#9 0.522 Failed tests:
#9 0.522 [FAIL: assertion failed: 425 != 5; counterexample: calldata=[...] args=[425]] testFuzz_SetNumber(uint256) (runs: 0, μ: 0, ~: 0)
#9 0.522
#9 0.522 Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 686.53µs (407.06µs CPU time)
------
error: failed to solve: executor failed running [/bin/sh -c forge test]: exit code: 1
```

Our image failed to build because our tests failed! This is actually a nice property, because it means if we have a Docker image that successfully built (and therefore is available for use), we know the code inside the image passed the tests.\*

> \*Of course, chain of custody of your docker images is very important. Docker layer hashes can be very useful for verification. In a production environment, consider [signing your docker images](https://docs.docker.com/engine/security/trust/#:~\:text=To%20sign%20a%20Docker%20Image,the%20local%20Docker%20trust%20repository).

#### Creating a "deployer" image

Now, we'll move on to a bit more of an advanced Dockerfile. Let's add an entrypoint that allows us to deploy our code by using the built (and tested!) image. We can target the Sepolia testnet first.

```docker
# Use the latest foundry image
FROM ghcr.io/foundry-rs/foundry

# Copy our source code into the container
WORKDIR /app

# Build and test the source code
COPY . .
RUN forge build
RUN forge test

# Set the entrypoint to the forge deployment command
ENTRYPOINT ["forge", "create"]
```

Let's build the image, this time giving it a name:

```sh
docker build --no-cache --progress=plain -t counter .
```

Here's how we can use our docker image to deploy:

```sh
docker run counter-deployer --rpc-url $RPC_URL --private-key $PRIVATE_KEY ./src/Counter.sol:Counter
No files changed, compilation skipped
Deployer: 0x496e09fcb240c33b8fda3b4b74d81697c03b6b3d
Deployed to: 0x23d465eaa80ad2e5cdb1a2345e4b54edd12560d3
Transaction hash: 0xf88c68c4a03a86b0e7ecb05cae8dea36f2896cd342a6af978cab11101c6224a9
```

We've just built, tested, and deployed our contract entirely within a Docker container! This guide was intended for testnet, but you can run the exact same Docker image targeting mainnet and be confident that the same code is being deployed by the same tooling.

#### Why is this useful?

Docker is about portability, reproducibility, and environment invariance. This means you can be less concerned about unexpected changes when you switch between environments, networks, developers, etc. Here are a few basic examples of why one may like to use Docker images for smart contract deployment:

* Reduces overhead of ensuring system level dependencies match between deployment environments (e.g. does your production runner always have the same version of `forge` as your dev runner?)
* Increases confidence that code has been tested prior to deployment and has not been altered (e.g. if, in the above image, your code re-compiles on deployment, that's a major red flag).
* Eases pain points around segregation of duties: people with your mainnet credentials do not need to ensure they have the latest compiler, codebase, etc. It's easy to ensure that the docker deploy image someone ran in testnet is identical to the one targeting mainnet.
* Docker is an accepted standard on virtually all public cloud providers. It makes it easy to schedule jobs, tasks, etc that need to interact with the blockchain.

#### Using `docker-compose` to launch Anvil

To launch Anvil using [Docker Compose](https://docs.docker.com/compose/) one could use the following `docker-compose.yml` configuration:

```yml
services:
  anvil:
    image: ghcr.io/foundry-rs/foundry
    container_name: anvil
    environment:
      ANVIL_IP_ADDR: "0.0.0.0"
    working_dir: /anvil
    ports:
      - "8545:8545"
    command: anvil
```

Finally, run `docker compose up`.

```
docker compose up
[+] Running 1/1
 ✔ Container anvil  Created
Attaching to anvil
anvil  |
anvil  |
anvil  |                              _   _
anvil  |                             (_) | |
anvil  |       __ _   _ __   __   __  _  | |
anvil  |      / _` | | '_ \  \ \ / / | | | |
anvil  |     | (_| | | | | |  \ V /  | | | |
anvil  |      \__,_| |_| |_|   \_/   |_| |_|
anvil  |
anvil  |     0.3.1-dev (fea38858b0 2025-01-21T16:48:49.865302749Z)
anvil  |     https://github.com/foundry-rs/foundry
anvil  |     ...
```


### Scripting with Solidity

Solidity scripting is a way to declaratively deploy contracts using Solidity, instead of using the more limiting and less user friendly [`forge create`](/forge/reference/forge-create).

Solidity scripts are like the scripts you write when working with tools like Hardhat; what makes Solidity scripting different is that they are written in Solidity instead of JavaScript, and they are run on the fast Foundry EVM backend, which provides advanced simulation with dry-run capabilities.

### Overview

`forge script` does not work in an asynchronous manner. First, it collects all transactions from the script, and only then does it broadcast them all. It can essentially be split into 4 phases:

1. Local Simulation - The contract script is run in a local evm. If a rpc/fork url has been provided, it will execute the script in that context. Any **external call** (not static, not internal) from a `vm.broadcast` and/or `vm.startBroadcast` will be appended to a list.
2. Onchain Simulation - Optional. If a rpc/fork url has been provided, then it will sequentially execute all the collected transactions from the previous phase here.
3. Broadcasting - Optional. If the `--broadcast` flag is provided and the previous phases have succeeded, it will broadcast the transactions collected at step `1`. and simulated at step `2`.
4. Verification - Optional. If the `--verify` flag is provided, there's an API key, and the previous phases have succeeded it will attempt to verify the contract. (eg. etherscan).

:::tip
Transactions that previously failed or timed-out can be submitted again by providing `--resume` flag.
:::

Given this flow, it's important to be aware that transactions whose behaviour can be influenced by external state/actors might have a different result than what was simulated on step `2`, e.g. front running.

### Getting started

Let's try to deploy the basic `Counter` contract Foundry provides:

```sh
forge init Counter
```

Next let's try compiling our contracts to make sure everything is in order.

```sh
forge build
```

### Deploying our contract

We are going to deploy the `Counter` contract to the Sepolia testnet but in order to do so we will need to complete a few prerequisites:

1. Get a Sepolia RPC URL.

You can either grab an RPC URL from [Chainlist](https://chainlist.org/chain/11155111) or use an RPC provider like [Alchemy](https://www.alchemy.com/) or [Infura](https://www.infura.io/).

2. Get a one-time use private key for deploying.

```sh
`cast wallet new`
```

```
Successfully created new keypair.
Address:     <PUBLIC KEY>
Private key: <PRIVATE_KEY>
```

3. Fund the private key.

Grab some Sepolia testnet ETH, available in different faucets:

* [Alchemy](https://sepoliafaucet.com/)
* [Quicknode](https://faucet.quicknode.com/ethereum/sepolia)
* [Proof of work faucet](https://sepolia-faucet.pk910.de/)

Some faucets require you to have a balance on Ethereum mainnet.

If so, claim the testnet ETH on a wallet you control and transfer the testnet ETH to your newly created deployer keypair.

4. Get a Sepolia Etherscan API key.

#### Configuring `foundry.toml`

Once you have all that create a `.env` file and add the variables. Foundry automatically loads in a `.env` file present in your project directory.

The .env file should follow this format:

```sh
SEPOLIA_RPC_URL=
ETHERSCAN_API_KEY=
```

We now need to edit the `foundry.toml` file. There should already be one in the root of the project.

Add the following lines to the end of the file:

```toml
[rpc_endpoints]
sepolia = "${SEPOLIA_RPC_URL}"

[etherscan]
sepolia = { key = "${ETHERSCAN_API_KEY}" }
```

This creates a [RPC alias](/reference/cheatcodes/rpc) for Sepolia and loads the Etherscan API key.

However this does not affect the `getChain` method.

#### Writing the script

Next, navigate to the `script` folder and locate the `CounterScript`.

Modify the contents so it looks like this:

```solidity
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Script, console} from "forge-std/Script.sol";
import {Counter} from "../src/Counter.sol";

contract CounterScript is Script {
    Counter public counter;

    function setUp() public {}

    function run() public {
        vm.startBroadcast();

        counter = new Counter();

        vm.stopBroadcast();
    }
}
```

Now let's read through the code and figure out what it actually means and does.

```solidity
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;
```

Remember even if it's a script it still works like a smart contract, but is never deployed, so just like any other smart contract written in Solidity the `pragma version` has to be specified.

```solidity
import {Script, console} from "forge-std/Script.sol";
import {Counter} from "../src/Counter.sol";
```

Just like we may import Forge Std to get testing utilities when writing tests, it also provides some scripting utilities.

The next line just imports the `Counter` contract.

```solidity
contract CounterScript is Script {
```

We have created a contract called `CounterScript` and it inherits `Script` from Forge Std.

```solidity
function run() external {
```

By default, scripts are executed by calling the function named `run`, our entrypoint.

This loads in the private key from our `.env` file. **Note:** you must be careful when exposing private keys in a `.env` file and loading them into programs. This is only recommended for use with non-privileged deployers or for local / test setups. For production setups please review the various [wallet options](/forge/reference/forge-script#wallet-options---raw) that Foundry supports.

```solidity
vm.startBroadcast();
```

This is a special cheatcode that records calls and contract creations made by our main script contract. The private key of the sender we will pass in will instruct it to use that key for signing the transactions. Later, we will broadcast these transactions to deploy our `Counter` contract.

```solidity
Counter counter = new Counter();
```

Here we have just created our `Counter` contract. Because we called `vm.startBroadcast()` before this line, the contract creation will be recorded by Forge, and as mentioned previously, we can broadcast the transaction to deploy the contract on-chain. The broadcast transaction logs will be stored in the `broadcast` directory by default. You can change the logs location by setting [`broadcast`](/config/reference/project#broadcast) in your `foundry.toml` file.

The broadcasting sender is determined by checking the following in order:

1. If `--sender` argument was provided, that address is used.
2. If exactly one signer (e.g. private key, hardware wallet, keystore) is set, that signer is used.
3. Otherwise, the default Foundry sender (`0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38`) is attempted to be used.

Now that you're up to speed about what the script smart contract does, let's run it.

#### Deploying to a testnet

You should have added the variables we mentioned earlier to the `.env` for this next part to work.

At the root of the project run:

```sh
# To load the variables in the .env file
source .env

# To deploy and verify our contract
forge script --chain sepolia script/Counter.s.sol:CounterScript --rpc-url $SEPOLIA_RPC_URL --broadcast --verify -vvvv --interactives 1
```

Note the `--interactives 1`, this will open an interactive prompt to enter your private key. For anything beyond a simple testnet deployment in a development setting you are **STRONGLY** [recommended to use a hardware wallet or a password protected keystore](/guides/best-practices/key-management).

```
Enter private key: <PRIVATE_KEY>
```

Forge is going to run our script and broadcast the transactions for us - this can take a little while, since Forge will also wait for the transaction receipts. You should see something like this after a minute or so:

```
[⠊] Compiling...
No files changed, compilation skipped
Enter private key:
Traces:
  [137029] CounterScript::run()
    ├─ [0] VM::startBroadcast()
    │   └─ ← [Return]
    ├─ [96345] → new Counter@<ADDRESS>
    │   └─ ← [Return] 481 bytes of code
    ├─ [0] VM::stopBroadcast()
    │   └─ ← [Return]
    └─ ← [Stop]


Script ran successfully.

## Setting up 1 EVM.
==========================
Simulated On-chain Traces:

  [96345] → new Counter@<ADDRESS>
    └─ ← [Return] 481 bytes of code


==========================

Chain 11155111

Estimated gas price: <GAS_PRICE> gwei

Estimated total gas used for script: <GAS>

Estimated amount required: <GAS_AMOUNT> ETH

==========================

##### sepolia
✅  [Success] Hash: <HASH>
Contract Address: <ADDRESS>
Block: <BLOCK>
Paid: <GAS>

✅ Sequence #1 on sepolia | Total Paid: <GAS>


==========================

ONCHAIN EXECUTION COMPLETE & SUCCESSFUL.
##
Start verification for (1) contracts
Start verifying contract `<ADDRESS>` deployed on sepolia
Compiler version: 0.8.28

Submitting verification for [src/Counter.sol:Counter] <ADDRESS>.
Submitted contract for verification:
	Response: `OK`
	GUID: `<GUID>`
	URL: https://sepolia.etherscan.io/address/<ADDRESS>
Contract verification status:
Response: `NOTOK`
Details: `Pending in queue`
Warning: Verification is still pending...; waiting 15 seconds before trying again (7 tries remaining)
Contract verification status:
Response: `OK`
Details: `Pass - Verified`
Contract successfully verified
All (1) contracts were verified!

Transactions saved to: /home/user/counter/broadcast/Counter.s.sol/11155111/run-latest.json

Sensitive values saved to: /home/user/counter/cache/Counter.s.sol/11155111/run-latest.json
```

This confirms that you have successfully deployed the `Counter` contract to the Sepolia testnet and have also verified it on Etherscan, all with one command.

#### Deploying to a local Anvil instance

You can deploy to Anvil, the local testnet, by configuring the `--fork-url`.

Let's start Anvil in one terminal window:

```sh
anvil
```

This will show you are list of default accounts.

```
Available Accounts
==================

(0) 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 (10000.000000000000000000 ETH)
...

Private Keys
==================

(0) 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80
...
```

Then run the following script in a different terminal window:

```sh
forge script script/Counter.s.sol:CounterScript --fork-url http://localhost:8545 --broadcast --interactives 1
```

Next enter the private key, pick one from the list.

```
Enter private key: <PRIVATE_KEY>
```

```
[⠊] Compiling...
No files changed, compilation skipped
Enter private key:
Script ran successfully.

## Setting up 1 EVM.

==========================

Chain 31337

Estimated gas price: 2.000000001 gwei

Estimated total gas used for script: 203856

Estimated amount required: 0.000407712000203856 ETH

==========================

##### anvil-hardhat
✅  [Success] Hash: 0x6795deaad7fd483eda4b16af7d8b871c7f6e49beb50709ce1cf0ca81c29247d1
Contract Address: 0x5FbDB2315678afecb367f032d93F642f64180aa3
Block: 1
Paid: 0.000156813000156813 ETH (156813 gas * 1.000000001 gwei)

✅ Sequence #1 on anvil-hardhat | Total Paid: 0.000156813000156813 ETH (156813 gas * avg 1.000000001 gwei)


==========================

ONCHAIN EXECUTION COMPLETE & SUCCESSFUL.

Transactions saved to: /home/user/counter/broadcast/Counter.s.sol/31337/run-latest.json

Sensitive values saved to: /home/user/counter/cache/Counter.s.sol/31337/run-latest.json
```


### Foundry Tutorial Videos

Unofficial *youtube playlists* of Foundry tutorials from Blockchain educators.

|                                                                                      URL                                                                                     |                                                                                                                         Description                                                                                                                        |                                                  Author                                                  |
| :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------: |
|   <a href="https://www.youtube.com/playlist?list=PL4Rj_WH6yLgWe7TxankiqkrkVKXIwOP42" target="_blank"><img src="https://i.ytimg.com/vi/umepbfKp5rI/hq720.jpg" alt="" /></a>   | <a href="https://www.youtube.com/playlist?list=PL4Rj_WH6yLgWe7TxankiqkrkVKXIwOP42" target="_blank">*Blockchain Developer, Solidity, Foundry Full Course 2023* \~ Learn Solidity, Blockchain Development, & Smart Contracts Powered By AI - Full Course</a> |           <a href="https://www.youtube.com/@PatrickAlphaC" target="_blank">Patrick Collins</a>           |
|     <a href="https://youtube.com/playlist?list=PLO5VPQH6OWdUrKEWPF07CSuVm3T99DQki" target="_blank"><img src="https://i.ytimg.com/vi/tgs5q-GJmg4/hq720.jpg" alt="" /></a>     |                                                <a href="https://youtube.com/playlist?list=PLO5VPQH6OWdUrKEWPF07CSuVm3T99DQki" target="_blank">*Foundry* \~ Playlist of beginner level videos on Foundry</a>                                                | <a href="https://www.youtube.com/@smartcontractprogrammer" target="_blank">Smart Contract Programmer</a> |
|              <a href="https://www.youtube.com/watch?v=hOB1Yiuxojk" target="_blank"><img src="https://i.ytimg.com/vi/hOB1Yiuxojk/maxresdefault.jpg" alt="" /></a>             |                                                        <a href="https://www.youtube.com/watch?v=hOB1Yiuxojk" target="_blank">A Complete Introduction to Smart Contract Development With Foundry</a>                                                        |               <a href="https://www.youtube.com/@axelar-network" target="_blank">Axelar</a>               |
|     <a href="https://updraft.cyfrin.io/courses/foundry" target="_blank"><img src="https://cyfrin-updraft-cms-main.imgix.net/assets/preview_images/f101.png" alt="" /></a>    |                                                                        <a href="https://updraft.cyfrin.io/courses/foundry" target="_blank">Cyfrin Updraft - Foundry Fundamentals</a>                                                                       |                          <a href="https://updraft.cyfrin.io/">Cyfrin Updraft</a>                         |
| <a href="https://updraft.cyfrin.io/courses/advanced-foundry" target="_blank"><img src="https://cyfrin-updraft-cms-main.imgix.net/assets/preview_images/af.png" alt="" /></a> |                                                                     <a href="https://updraft.cyfrin.io/courses/advanced-foundry" target="_blank">Cyfrin Updraft - Advanced Foundry</a>                                                                     |                          <a href="https://updraft.cyfrin.io/">Cyfrin Updraft</a>                         |


### Getting Started

Foundry is a blazing fast, portable and modular toolkit for Ethereum application development written in Rust. It consists of four essential tools that suffice all the needs a blockchain app developer will ever have.

Here's an overview of the tools available at your disposal after [running foundryup](/introduction/installation#using-foundryup):

| Tool                             | What it enables                                                     |
| -------------------------------- | ------------------------------------------------------------------- |
| **[`forge`](/forge/overview)**   | Build, test, debug, deploy and verify smart contracts               |
| **[`anvil`](/anvil/overview)**   | Run a local Ethereum development node with forking capabilities     |
| **[`cast`](/cast/overview)**     | Interact with contracts, send transactions, and retrieve chain data |
| **[`chisel`](/chisel/overview)** | Fast Solidity REPL for rapid prototyping and debugging              |

:::tip
You can always view detailed help for any command or subcommand by appending `--help` to it.
:::

***

#### Forge

Forge is a command-line tool for building, testing, and deploying smart contracts.

##### Initialize a new project

```bash
# Create a new project called Counter
forge init Counter
cd Counter
```

##### Build and test contracts

```bash
# Compile your contracts
forge build

# Run your test suite
forge test

# Run tests against live chain state by forking
forge test --fork-url https://reth-ethereum.ithaca.xyz/rpc
```

##### Deploy contracts

```bash
# Use forge scripts to deploy contracts
# Set your private key
export PRIVATE_KEY="0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80"

# Deploy to local anvil instance
forge script script/Counter.s.sol --rpc-url http://127.0.0.1:8545 --broadcast --private-key $PRIVATE_KEY
```

`forge` also enables more advanced workflows such as:

* [Table testing](/forge/advanced-testing/table-testing) - Property-based testing with test cases inputs organized into a table format
* [Fuzz testing](/forge/advanced-testing/fuzz-testing) - Property-based testing with randomized inputs
* [Invariant testing](/forge/advanced-testing/invariant-testing) - Test system-wide properties across function call sequences
* [Gas tracking](/forge/gas-tracking/overview) - Monitor and optimize gas consumption across your contracts
* [Coverage reports](/forge/reference/forge-coverage) - Generate detailed test coverage analysis with `forge coverage`

Learn more about `forge` [here](/forge/overview).

***

#### Anvil

Anvil is a fast local Ethereum development node that is perfect for testing your contracts and other blockchain workflows in a controlled environment.

##### Start a local development node

```bash
# Start anvil with 10 pre-funded accounts
anvil
```

##### Fork mainnet state

```bash
# Fork latest mainnet state for testing
anvil --fork-url https://reth-ethereum.ithaca.xyz/rpc
```

`anvil` comes up with other advanced capabilities such as:

* **Custom `anvil_` methods** - Advanced node control including [account impersonation](/anvil/reference#anvil_impersonateaccount), [state manipulation](/anvil/reference#anvil_setbalance), and [mining control](/anvil/reference#anvil_mine)
* **Forking capabilities** - Fork anvil off another live chain

All of the above is provided while maintaining full compliance with the Ethereum JSON-RPC spec.

Learn more about `anvil` [here](/anvil/overview).

#### Cast

Cast is your Swiss army knife for interacting with Ethereum applications from the command line. You can make smart contract calls, send transactions, or retrieve any type of chain data.

##### Read contract data

```bash
# Check ETH balance
cast balance vitalik.eth --ether --rpc-url https://reth-ethereum.ithaca.xyz/rpc

# Call a contract function to read data
cast call 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 \
"balanceOf(address)" 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045 \
--rpc-url https://reth-ethereum.ithaca.xyz/rpc
```

##### Send transactions

```bash
# Set your private key
export PRIVATE_KEY="0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80"

# Send ETH to an address
cast send 0x70997970C51812dc3A010C7d01b50e0d17dc79C8 --value 10000000 --private-key $PRIVATE_KEY
```

##### Interact with JSON-RPC

```bash
# Call JSON-RPC methods directly
cast rpc eth_getHeaderByNumber $(cast 2h 22539851) --rpc-url https://reth-ethereum.ithaca.xyz/rpc

# Get latest block number
cast block-number --rpc-url https://reth-ethereum.ithaca.xyz/rpc
```

Learn more about `cast` [here](/cast/overview).

***

#### Chisel

Chisel is a fast, utilitarian, and verbose Solidity REPL for rapid prototyping and debugging. It's perfect for testing Solidity snippets and exploring contract behavior interactively.

##### Start the REPL

```bash
# Launch chisel REPL
chisel
```

##### Interactive Solidity development

```solidity
// Create and query variables
➜ uint256 a = 123;
➜ a
Type: uint256
├ Hex: 0x7b
├ Hex (full word): 0x000000000000000000000000000000000000000000000000000000000000007b
└ Decimal: 123

// Test contract functions
➜ function add(uint256 x, uint256 y) pure returns (uint256) { return x + y; }
➜ add(5, 10)
Type: uint256
└ Decimal: 15
```

Learn more about `chisel` [here](/chisel/overview).


### Installation

If you encounter any issues during installation, refer to the [FAQ](/misc/faq) for assistance.

#### Precompiled Binaries

Precompiled binaries can be downloaded from the [GitHub releases page](https://github.com/foundry-rs/foundry/releases). For easier management, we recommend using [Foundryup](#using-foundryup).

#### Using Foundryup

Foundryup is the official installer for the Foundry toolchain. You can learn more about it [here](https://github.com/foundry-rs/foundry/blob/master/foundryup/README.md).

To install Foundryup, open your terminal and run the following command:

```sh
curl -L https://foundry.paradigm.xyz | bash
```

This will install Foundryup. Simply follow the on-screen instructions, and the `foundryup` command will become available in your CLI.

Running `foundryup` will automatically install the latest stable version of the [precompiled binaries](#precompiled-binaries): `forge`, `cast`, `anvil`, and `chisel`. If you wish to use the latest `nightly` build run `foundryup --install nightly`. For additional options, such as installing a specific version or commit, run `foundryup --help`.

> ℹ️ **Note**\
> If you're using Windows, you'll need to install and use [Git BASH](https://gitforwindows.org/) or [WSL](https://learn.microsoft.com/en-us/windows/wsl/install) as your terminal, since Foundryup currently doesn't support Powershell or Command Prompt (Cmd).

##### Verify integrity and provenance of binaries

Foundry binaries are attested by using [GitHub artifact attestations](https://docs.github.com/en/actions/security-for-github-actions/using-artifact-attestations/using-artifact-attestations-to-establish-provenance-for-builds). It is strongly recommended to verify the binaries installed using `foundryup` in order to check that they were built and distributed from Foundry repository.\
For example, `forge` binary integrity and provenance can be verified by running:

```shell
gh attestation verify --owner foundry-rs $(which forge)

✓ Verification succeeded!

The following 1 attestation matched the policy criteria

- Attestation #1
  - Build repo:..... foundry-rs/foundry
  - Build workflow:. .github/workflows/release.yml@refs/tags/stable
  - Signer repo:.... foundry-rs/foundry
  - Signer workflow: .github/workflows/release.yml@refs/tags/stable
```

#### Building from Source

##### Prerequisites

You'll need the [Rust](https://rust-lang.org) compiler and Cargo, Rust's package manager. The easiest way to install both is by using [`rustup.rs`](https://rustup.rs/).

Foundry generally supports building only with the latest stable version of Rust. If you're using an older version of Rust, you can update it with `rustup`:

```sh
rustup update stable
```

For Windows users, you'll also need a recent version of [Visual Studio](https://visualstudio.microsoft.com/downloads/), with the "Desktop Development With C++" workload installed.

##### Building

You can either use the various flags provided by [Foundryup](#using-foundryup):

```sh
foundryup --branch master
foundryup --path path/to/foundry
```

Alternatively, you can install via Cargo with the following command:

```sh
cargo install --git https://github.com/foundry-rs/foundry --profile release --locked forge cast chisel anvil
```

You can also manually build from a local copy of the [Foundry repository](https://github.com/foundry-rs/foundry):

```sh
# clone the repository
git clone https://github.com/foundry-rs/foundry.git
cd foundry
# install Forge
cargo install --path ./crates/forge --profile release --force --locked
# install Cast
cargo install --path ./crates/cast --profile release --force --locked
# install Anvil
cargo install --path ./crates/anvil --profile release --force --locked
# install Chisel
cargo install --path ./crates/chisel --profile release --force --locked
```

#### CI Installation with GitHub Actions

For instructions on setting up Foundry in a CI pipeline, refer to the [foundry-rs/foundry-toolchain](https://github.com/foundry-rs/foundry-toolchain) GitHub Action.

#### Using Foundry with Docker

:::note
Some systems, including those with M1 chips, may experience issues when building the Docker image locally. This is a known issue.
:::

Foundry can also be run inside a Docker container. If you don't have Docker installed, you can download it from [Docker's website](https://docs.docker.com/get-docker/).

Once Docker is installed, you can pull the latest Foundry release by running:

```sh
docker pull ghcr.io/foundry-rs/foundry:latest
```

You can also build the Docker image locally by running the following command from the Foundry repository:

```sh
docker build -t foundry .
```

For examples and guides on using this image, refer to the [Docker guide](/guides/foundry-in-docker).

#### Uninstalling

Foundry contains everything in a `.foundry` directory, usually located in `/home/<user>/.foundry/` on Linux, `/Users/<user>/.foundry/` on MacOS and `C:\Users\<user>\.foundry` on Windows where `<user>` is your username.

To uninstall Foundry remove the `.foundry` directory.

:::warning
The .foundry directory can contain keystores. Make sure to backup any keystores you want to keep.
:::

Remove Foundry from PATH:

* Optionally Foundry can be removed from editing shell configuration file (`.bashrc`, `.zshrc`, etc.). To do so remove the line that adds Foundry to PATH:

```sh
export PATH="$PATH:/home/user/.foundry/bin"
```


### Foundry Overview

![Foundry banner](/og-image.png)

Foundry is a smart contract development toolchain.

Foundry manages your dependencies, compiles your project, runs tests, deploys, and lets you interact with the chain from the command-line and via Solidity scripts.

### Navigating the Documentation

#### Getting Started

Get up and running with Foundry by [installing the toolkit](/introduction/installation) and [get started](/introduction/getting-started) with the basics of each tool.

#### Guides

Comprehensive tutorials and best practices for building robust smart contracts and development workflows with Foundry.

* **Best Practices**
  * [Writing Contracts](/guides/best-practices/writing-contracts) - Guidelines for clean, secure smart contract development
  * [Writing Tests](/guides/best-practices/writing-tests) - Effective testing strategies and patterns
  * [Writing Scripts](/guides/best-practices/writing-scripts) - Deployment and automation script best practices
  * [Security](/guides/best-practices/security) - Security considerations and vulnerability prevention
  * [Key Management](/guides/best-practices/key-management) - Safe handling of private keys and secrets
  * [Commenting](/guides/best-practices/commenting) - Documentation and code commenting standards
* [Scripting with Solidity](/guides/scripting-with-solidity) - Advanced deployment and automation techniques
* [Deterministic deployments using CREATE2](/guides/deterministic-deployments-using-create2) - Predictable contract addresses
* [Forking Mainnet with Cast and Anvil](/guides/forking-mainnet-with-cast-anvil) - Test against live chain state
* [Running Foundry inside of Docker](/guides/foundry-in-docker) - Containerized development environments
* [Implementing and Testing EIP-712 signatures](/guides/eip712)

#### Project Setup

Learn how to organize your projects with the [forge project setup guides](/guides/project-setup/creating-a-new-project) for scaling smart contract codebases.

#### Forge

Master the core smart contract development tool with the [Forge overview](/forge/overview), covering building, testing, deploying, and verifying contracts.

#### Cast

Learn to interact with blockchain networks from the command line using [Cast](/cast/overview) for contract calls, transactions, and chain data retrieval.

#### Anvil

Set up local development networks with [Anvil](/anvil/overview), Foundry's fast Ethereum-compatible node with forking capabilities.

#### Chisel

Explore Solidity interactively with [Chisel](/chisel/overview), the integrated REPL for rapid prototyping and debugging.

#### Configuration

Customize your Foundry setup and integrate with other tools for an optimized development workflow.

* [Config Overview with `foundry.toml`](/config/overview) - Project configuration and settings
* [Continuous Integration](/config/continuous-integration) - CI/CD pipeline integration
* [Integrating with VSCode](/config/vscode) - Editor setup and extensions
* [Shell Autocompletion](/config/shell-autocompletion) - Command-line productivity enhancements
* [Static Analyzers](/config/static-analyzers) - Code analysis tool integration
* [Integrating with Hardhat](/config/hardhat) - Cross-framework compatibility
* [Vyper support](/config/vyper) - Alternative smart contract language support

#### Contributing

Help improve Foundry by contributing - see the [contribution guidelines](https://github.com/foundry-rs/foundry/blob/master/CONTRIBUTING.md) to learn more.

#### Reference

Complete command references, configuration options, and API documentation for all Foundry tools.

* [FAQ](/misc/faq) - Frequently asked questions and troubleshooting
* **Command References**
  * [forge Commands](/forge/reference/overview) - Complete forge CLI reference
  * [cast Commands](/cast/reference/overview) - Complete cast CLI reference
  * [anvil Commands](/anvil/reference) - Complete anvil CLI reference
  * [chisel Commands](/chisel/reference) - Complete chisel CLI reference
* **Configuration & APIs**
  * [Config Reference](/config/reference/overview) - All configuration options
  * [Cheatcodes Reference](/reference/cheatcodes/overview) - Testing utilities and helpers
  * [Forge Standard Library Reference](/reference/forge-std/overview) - Standard library documentation
  * [DSTest Reference](/reference/ds-test) - Legacy testing framework reference

:::tip
You can also check out [Awesome Foundry](https://github.com/crisgarner/awesome-foundry), a curated list of awesome Foundry resources, guides, tools, and libraries!
:::


## Prompting

One of the fastest ways to build smart contracts is by using AI to assist with writing boilerplate code, implementing complex testing patterns, and following security best practices. When building, iterating on, or debugging smart contracts using AI tools and Large Language Models (LLMs), a well-structured and extensive prompt helps provide the model with clearer guidelines and examples that can dramatically improve output quality.

Below is an extensive example prompt that can help you build smart contracts using Foundry while adhering to the industries best practices.

### Build smart contracts using a prompt

Use the structured prompt by copying and pasting it into your AI tool of choice (for example OpenAI's ChatGPT or Anthropic's Claude).

**Make sure to enter your specific requirements at the end between the `<user_prompt>` and `</user_prompt>` tags**

````xml
<system_context>
You are an advanced assistant specialized in Ethereum smart contract development using Foundry. You have deep knowledge of Forge, Cast, Anvil, Chisel, Solidity best practices, modern smart contract development patterns, and advanced testing methodologies including fuzz testing and invariant testing.
</system_context>

<behavior_guidelines>
- Respond in a clear and professional manner
- Focus exclusively on Foundry-based solutions and tooling
- Provide complete, working code examples with proper imports
- Default to current Foundry and Solidity best practices
- Always include comprehensive testing approaches (unit, fuzz, invariant)
- Prioritize security and gas efficiency
- Ask clarifying questions when requirements are ambiguous
- Explain complex concepts and provide context for decisions
- Follow proper naming conventions and code organization patterns
- DO NOT write to or modify `foundry.toml` without asking. Explain which config property you are trying to add or change and why.
</behavior_guidelines>

<foundry_standards>
- Use Foundry's default project structure: `src/` for contracts, `test/` for tests, `script/` for deployment scripts, `lib/` for dependencies
- Write tests using Foundry's testing framework with forge-std
- Use named imports: `import {Contract} from "src/Contract.sol"`
- Follow NatSpec documentation standards for all public/external functions
- Use descriptive test names: `test_RevertWhen_ConditionNotMet()`, `testFuzz_FunctionName()`, `invariant_PropertyName()`
- Implement proper access controls and security patterns
- Always include error handling and input validation
- Use events for important state changes
- Optimize for readability over gas savings unless specifically requested
- Enable dynamic test linking for large projects: `dynamic_test_linking = true`
</foundry_standards>

<naming_conventions>
Contract Files:
- PascalCase for contracts: `MyContract.sol`, `ERC20Token.sol`
- Interface prefix: `IMyContract.sol`
- Abstract prefix: `AbstractMyContract.sol`
- Test suffix: `MyContract.t.sol`
- Script suffix: `Deploy.s.sol`, `MyContractScript.s.sol`

Functions and Variables:
- mixedCase for functions: `deposit()`, `withdrawAll()`, `getUserBalance()`
- mixedCase for variables: `totalSupply`, `userBalances`
- SCREAMING_SNAKE_CASE for constants: `MAX_SUPPLY`, `INTEREST_RATE`
- SCREAMING_SNAKE_CASE for immutables: `OWNER`, `DEPLOYMENT_TIME`
- PascalCase for structs: `UserInfo`, `PoolData`
- PascalCase for enums: `Status`, `TokenType`

Test Naming:
- `test_FunctionName_Condition` for unit tests
- `test_RevertWhen_Condition` for revert tests
- `testFuzz_FunctionName` for fuzz tests
- `invariant_PropertyName` for invariant tests
- `testFork_Scenario` for fork tests
</naming_conventions>

<testing_requirements>
Unit Testing:
- Write comprehensive test suites for all functionality
- Use `test_` prefix for standard tests, `testFuzz_` for fuzz tests
- Test both positive and negative cases (success and revert scenarios)
- Use `vm.expectRevert()` for testing expected failures
- Include setup functions that establish test state
- Use descriptive assertion messages: `assertEq(result, expected, "error message")`
- Test state changes, event emissions, and return values
- Write fork tests for integration with existing protocols
- Never place assertions in `setUp()` functions

Fuzz Testing:
- Use appropriate parameter types to avoid overflows (e.g., uint96 instead of uint256)
- Use `vm.assume()` to exclude invalid inputs rather than early returns
- Use fixtures for specific edge cases that must be tested
- Configure sufficient runs in foundry.toml: `fuzz = { runs = 1000 }`
- Test property-based behaviors rather than isolated scenarios

Invariant Testing:
- Use `invariant_` prefix for invariant functions
- Implement handler-based testing for complex protocols
- Use ghost variables to track state across function calls
- Test with multiple actors using proper actor management
- Use bounded inputs with `bound()` function for controlled testing
- Configure appropriate runs, depth, and timeout values
- Examples: totalSupply == sum of balances, xy = k for AMMs
</testing_requirements>

<security_practices>
- Implement reentrancy protection where applicable (ReentrancyGuard)
- Use access control patterns (OpenZeppelin's Ownable, AccessControl)
- Validate all user inputs and external contract calls
- Follow CEI (Checks-Effects-Interactions) pattern
- Use safe math operations (Solidity 0.8+ has built-in overflow protection)
- Implement proper error handling for external calls
- Consider front-running and MEV implications
- Use time-based protections carefully (avoid block.timestamp dependencies)
- Implement proper slippage protection for DeFi applications
- Consider upgrade patterns carefully (proxy considerations)
- Run `forge lint` to catch security and style issues
- Address high-severity lints: incorrect-shift, divide-before-multiply
</security_practices>

<forge_commands>
Core Build & Test Commands:
- `forge init <project_name>` - Initialize new Foundry project
- `forge build` - Compile contracts and generate artifacts
- `forge build --dynamic-test-linking` - Enable fast compilation for large projects
- `forge test` - Run test suite with gas reporting
- `forge test --match-test <pattern>` - Run specific tests
- `forge test --match-contract <pattern>` - Run tests in specific contracts
- `forge test -vvv` - Run tests with detailed trace output
- `forge test --fuzz-runs 10000` - Run fuzz tests with custom iterations
- `forge coverage` - Generate code coverage report
- `forge snapshot` - Generate gas usage snapshots

Documentation & Analysis:
- `forge doc` - Generate documentation from NatSpec comments
- `forge lint` - Lint Solidity code for security and style issues
- `forge lint --severity high` - Show only high-severity issues
- `forge verify-contract` - Verify contracts on Etherscan
- `forge inspect <contract> <field>` - Inspect compiled contract metadata
- `forge flatten <contract>` - Flatten contract and dependencies

Dependencies & Project Management:
- `forge install <dependency>` - Install dependencies via git submodules
- `forge install OpenZeppelin/openzeppelin-contracts@v4.9.0` - Install specific version
- `forge update` - Update dependencies
- `forge remove <dependency>` - Remove dependencies
- `forge remappings` - Display import remappings

Deployment & Scripting:
- `forge script <script>` - Execute deployment/interaction scripts
- `forge script script/Deploy.s.sol --broadcast --verify` - Deploy and verify
- `forge script script/Deploy.s.sol --resume` - Resume failed deployment
</forge_commands>

<cast_commands>
Core Cast Commands:
- `cast call <address> <signature> [args]` - Make a read-only contract call
- `cast send <address> <signature> [args]` - Send a transaction
- `cast balance <address>` - Get ETH balance of address
- `cast code <address>` - Get bytecode at address
- `cast logs <signature>` - Fetch event logs matching signature
- `cast receipt <tx_hash>` - Get transaction receipt
- `cast tx <tx_hash>` - Get transaction details
- `cast block <block>` - Get block information
- `cast gas-price` - Get current gas price
- `cast estimate <address> <signature> [args]` - Estimate gas for transaction

ABI & Data Manipulation:
- `cast abi-encode <signature> [args]` - ABI encode function call
- `cast abi-decode <signature> <data>` - ABI decode transaction data
- `cast keccak <data>` - Compute Keccak-256 hash
- `cast sig <signature>` - Get function selector
- `cast 4byte <selector>` - Lookup function signature

Wallet Operations:
- `cast wallet new` - Generate new wallet
- `cast wallet sign <message>` - Sign message with wallet
- `cast wallet verify <signature> <message> <address>` - Verify signature
</cast_commands>

<anvil_usage>
Anvil Local Development:
- `anvil` - Start local Ethereum node on localhost:8545
- `anvil --fork-url <rpc_url>` - Fork mainnet or other network
- `anvil --fork-block-number <number>` - Fork at specific block
- `anvil --accounts <number>` - Number of accounts to generate (default: 10)
- `anvil --balance <amount>` - Initial balance for generated accounts
- `anvil --gas-limit <limit>` - Block gas limit
- `anvil --gas-price <price>` - Gas price for transactions
- `anvil --port <port>` - Port for RPC server
- `anvil --chain-id <id>` - Chain ID for the network
- `anvil --block-time <seconds>` - Automatic block mining interval

Advanced Anvil Usage:
- Use for local testing and development
- Fork mainnet for testing with real protocols
- Reset state with `anvil_reset` RPC method
- Use `anvil_mine` to manually mine blocks
- Set specific block times with `anvil_setBlockTimestampInterval`
- Impersonate accounts with `anvil_impersonateAccount`
</anvil_usage>

<configuration_patterns>
foundry.toml Configuration:
```toml
[profile.default]
src = "src"
out = "out"
libs = ["lib"]
dynamic_test_linking = true  # Enable for faster compilation
remappings = [
    "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
    "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
    "@chimera/=lib/chimera/src/"
]

# Compiler settings
solc_version = "0.8.20"
optimizer = true
optimizer_runs = 200
via_ir = false

# Testing configuration
gas_reports = ["*"]
ffi = false
fs_permissions = [{ access = "read", path = "./"}]

# Fuzz testing
[fuzz]
runs = 1000
max_test_rejects = 65536

# Invariant testing
[invariant]
runs = 256
depth = 15
fail_on_revert = false
show_metrics = true

# Linting
[lint]
exclude_lints = []  # Only exclude when necessary

[rpc_endpoints]
mainnet = "${MAINNET_RPC_URL}"
sepolia = "${SEPOLIA_RPC_URL}"
arbitrum = "${ARBITRUM_RPC_URL}"
polygon = "${POLYGON_RPC_URL}"

[etherscan]
mainnet = { key = "${ETHERSCAN_API_KEY}" }
sepolia = { key = "${ETHERSCAN_API_KEY}" }
arbitrum = { key = "${ARBISCAN_API_KEY}", url = "https://api.arbiscan.io/api" }
polygon = { key = "${POLYGONSCAN_API_KEY}", url = "https://api.polygonscan.com/api" }
```
</configuration_patterns>

<common_workflows>

1. **Fuzz Testing Workflow**:
```solidity
// Use appropriate parameter types and bounds
function testFuzz_Deposit(uint96 amount, uint256 actorSeed) public {
    // Bound inputs to valid ranges
    amount = uint96(bound(amount, 1, type(uint96).max));
    address actor = actors[bound(actorSeed, 0, actors.length - 1)];

    // Use assumptions to exclude invalid cases
    vm.assume(amount > 0.1 ether);
    vm.assume(actor != address(0));

    // Setup state
    vm.startPrank(actor);
    deal(address(token), actor, amount);

    // Execute and verify properties
    uint256 sharesBefore = vault.balanceOf(actor);
    vault.deposit(amount, actor);
    uint256 sharesAfter = vault.balanceOf(actor);

    // Property assertions
    assertGt(sharesAfter, sharesBefore, "Shares should increase");
    assertEq(vault.totalAssets(), amount, "Total assets should equal deposit");

    vm.stopPrank();
}

// Use fixtures for edge cases
uint256[] public amountFixtures = [0, 1, type(uint256).max - 1];
function testFuzz_WithFixtures(uint256 fixtureIndex) public {
    uint256 amount = amountFixtures[bound(fixtureIndex, 0, amountFixtures.length - 1)];
    // Test with specific edge case values
}
```

2. **Invariant Testing with Handlers**:
```solidity
// Handler contract for bounded invariant testing
contract VaultHandler {
    Vault public vault;
    IERC20 public asset;

    // Ghost variables for tracking state
    uint256 public ghost_depositSum;
    uint256 public ghost_withdrawSum;
    mapping(address => uint256) public ghost_userDeposits;

    // Actor management
    address[] public actors;
    address internal currentActor;

    modifier useActor(uint256 actorSeed) {
        currentActor = actors[bound(actorSeed, 0, actors.length - 1)];
        vm.startPrank(currentActor);
        _;
        vm.stopPrank();
    }

    constructor(Vault _vault, IERC20 _asset) {
        vault = _vault;
        asset = _asset;
        // Initialize actors
        for (uint i = 0; i < 5; i++) {
            actors.push(makeAddr(string(abi.encode("actor", i))));
        }
    }

    function deposit(uint256 assets, uint256 actorSeed) external useActor(actorSeed) {
        // Bound inputs
        assets = bound(assets, 0, 1e30);

        // Setup
        deal(address(asset), currentActor, assets);
        asset.approve(address(vault), assets);

        // Pre-state
        uint256 sharesBefore = vault.balanceOf(currentActor);

        // Action
        uint256 shares = vault.deposit(assets, currentActor);

        // Post-state assertions
        assertEq(vault.balanceOf(currentActor), sharesBefore + shares);

        // Update ghost variables
        ghost_depositSum += assets;
        ghost_userDeposits[currentActor] += assets;
    }

    function withdraw(uint256 shares, uint256 actorSeed) external useActor(actorSeed) {
        shares = bound(shares, 0, vault.balanceOf(currentActor));

        if (shares == 0) return;

        uint256 assetsBefore = asset.balanceOf(currentActor);
        uint256 assets = vault.redeem(shares, currentActor, currentActor);

        assertEq(asset.balanceOf(currentActor), assetsBefore + assets);

        ghost_withdrawSum += assets;
    }
}

// Invariant test contract
contract VaultInvariantTest is Test {
    Vault vault;
    MockERC20 asset;
    VaultHandler handler;

    function setUp() external {
        asset = new MockERC20();
        vault = new Vault(asset);
        handler = new VaultHandler(vault, asset);

        targetContract(address(handler));
    }

    // Core invariants
    function invariant_totalSupplyEqualsShares() external {
        assertEq(vault.totalSupply(), vault.totalShares());
    }

    function invariant_assetsGreaterThanSupply() external {
        assertGe(vault.totalAssets(), vault.totalSupply());
    }

    function invariant_ghostVariablesConsistent() external {
        assertGe(handler.ghost_depositSum(), handler.ghost_withdrawSum());
    }
}
```

3. **Deployment Script with Verification**:
```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {Script, console} from "forge-std/Script.sol";
import {MyContract} from "src/MyContract.sol";

contract DeployScript is Script {
    function run() public {
        // Load deployment parameters
        uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");
        address owner = vm.envAddress("OWNER");

        vm.startBroadcast(deployerPrivateKey);

        // Deploy with constructor parameters
        MyContract myContract = new MyContract(owner);

        // Post-deployment configuration
        myContract.initialize();

        // Log deployment info
        console.log("MyContract deployed to:", address(myContract));
        console.log("Deployer:", vm.addr(deployerPrivateKey));
        console.log("Owner:", owner);

        vm.stopBroadcast();

        // Verify deployment
        require(myContract.owner() == owner, "Owner not set correctly");
    }
}

// Deployment commands:
// forge script script/Deploy.s.sol --rpc-url sepolia --broadcast --verify -vvvv --interactives 1
// forge script script/Deploy.s.sol --rpc-url sepolia --broadcast --verify --resume  # Resume failed
```

4. **Forge Lint Workflow**:
```bash
# Basic linting
forge lint

# Filter by severity
forge lint --severity high --severity medium

# JSON output for CI/CD
forge lint --json > lint-results.json

# Lint specific directories
forge lint src/contracts/ test/

# Configuration in foundry.toml to exclude specific lints
[lint]
exclude_lints = ["divide-before-multiply"]  # Only when justified
```

5. **EIP-712 Implementation and Testing**:
```solidity
// EIP-712 implementation example
contract EIP712Example {
    bytes32 private constant DOMAIN_TYPEHASH =
        keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)");

    bytes32 private constant PERMIT_TYPEHASH =
        keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");

    function _hashTypedDataV4(bytes32 structHash) internal view returns (bytes32) {
        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);
    }
}

// EIP-712 testing with cheatcodes
contract EIP712Test is Test {
    function test_EIP712TypeHash() public {
        bytes32 expected = vm.eip712HashType("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");
        assertEq(PERMIT_TYPEHASH, expected, "Type hash mismatch");
    }

    function test_EIP712StructHash() public {
        Permit memory permit = Permit({
            owner: address(1),
            spender: address(2),
            value: 100,
            nonce: 0,
            deadline: block.timestamp + 1 hours
        });

        bytes32 structHash = vm.eip712HashStruct("Permit", abi.encode(permit));
        bytes32 expected = keccak256(abi.encode(PERMIT_TYPEHASH, permit.owner, permit.spender, permit.value, permit.nonce, permit.deadline));
        assertEq(structHash, expected, "Struct hash mismatch");
    }
}

// Generate type definitions
// forge eip712 --contract MyContract
```

6. **Dynamic Test Linking Setup**:
```toml
# Add to foundry.toml for 10x+ compilation speedup
[profile.default]
dynamic_test_linking = true

# Or use flag
# forge build --dynamic-test-linking
# forge test --dynamic-test-linking
```

</common_workflows>

<project_structure>
Comprehensive Foundry Project Layout:
```
project/
├── foundry.toml              # Foundry configuration
├── remappings.txt            # Import remappings (optional)
├── .env.example              # Environment variables template
├── .gitignore                # Git ignore patterns
├── README.md                 # Project documentation
├── src/                      # Smart contracts
│   ├── interfaces/           # Interface definitions
│   │   └── IMyContract.sol
│   ├── libraries/            # Reusable libraries
│   │   └── MyLibrary.sol
│   ├── abstracts/            # Abstract contracts
│   │   └── AbstractContract.sol
│   └── MyContract.sol        # Main contracts
├── test/                     # Test files
│   ├── unit/                 # Unit tests
│   │   └── MyContract.t.sol
│   ├── integration/          # Integration tests
│   │   └── Integration.t.sol
│   ├── fuzz/                 # Fuzz tests
│   │   └── FuzzMyContract.t.sol
│   ├── invariant/            # Invariant tests
│   │   ├── handlers/         # Test handlers
│   │   │   └── VaultHandler.sol
│   │   └── InvariantTests.t.sol
│   ├── fork/                 # Fork tests
│   │   └── ForkTest.t.sol
│   └── utils/                # Test utilities
│       └── TestUtils.sol
├── script/                   # Deployment scripts
│   ├── Deploy.s.sol          # Main deployment
│   ├── Configure.s.sol       # Post-deployment config
│   └── input/                # Script input data
│       └── sepolia.json
├── lib/                      # Dependencies (git submodules)
├── out/                      # Compiled artifacts
├── cache/                    # Build cache
├── broadcast/                # Deployment logs
└── docs/                     # Generated documentation
```
</project_structure>

<deployment_patterns>
Complete Deployment Workflow:

1. **Environment Setup**:
```bash
# .env file
SEPOLIA_RPC_URL=https://sepolia.infura.io/v3/YOUR_KEY
ETHERSCAN_API_KEY=YOUR_ETHERSCAN_KEY
PRIVATE_KEY=0x...  # Or use --interactives 1

# foundry.toml
[rpc_endpoints]
sepolia = "${SEPOLIA_RPC_URL}"

[etherscan]
sepolia = { key = "${ETHERSCAN_API_KEY}" }
```

2. **Deployment Script Pattern**:
```solidity
contract DeployScript is Script {
    function run() public {
        uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");

        vm.startBroadcast(deployerPrivateKey);

        // Deploy contracts in dependency order
        Token token = new Token();
        Vault vault = new Vault(token);

        // Configure contracts
        token.grantRole(token.MINTER_ROLE(), address(vault));

        vm.stopBroadcast();

        // Log important addresses
        console.log("Token:", address(token));
        console.log("Vault:", address(vault));
    }
}
```

3. **Deployment Commands**:
```bash
# Simulate locally
forge script script/Deploy.s.sol

# Deploy to testnet with verification
forge script script/Deploy.s.sol \
  --rpc-url sepolia \
  --broadcast \
  --verify \
  -vvvv \
  --interactives 1

# Resume failed deployment
forge script script/Deploy.s.sol \
  --rpc-url sepolia \
  --resume

# Mainnet deployment (extra caution)
forge script script/Deploy.s.sol \
  --rpc-url mainnet \
  --broadcast \
  --verify \
  --gas-estimate-multiplier 120 \
  --interactives 1
```
</deployment_patterns>

<user_prompt>
{user_prompt}
</user_prompt>
````

### Example Usage

Here's how you might customize the prompt for a specific project:

```text
<user_prompt>
I need to create a vault contract with the following features:
- ERC4626 compliant vault
- Deposit/withdraw functionality with fees
- Reward distribution mechanism
- Access controls for admin functions
- Include comprehensive testing (unit, fuzz, invariant)
- Include deployment script with verification
- Follow all security best practices

Please provide the complete implementation with proper Foundry project structure, including invariant tests with handlers to verify vault properties.
</user_prompt>
```

Remember to always review and test any AI-generated code thoroughly before using it in production environments.


### Miscellaneous

* [Struct encoding](./struct-encoding.md)


### FAQ

This is a collection of common questions and answers. If you do not find your question listed here, hop in the [Telegram support channel][tg-support]
and let us help you!

#### I can't build from source!

Make sure you're on the latest stable Rust toolchain:

```sh
rustup default stable
rustup update stable
```

#### `libusb` error when running `forge`/`cast`

If you are using the binaries as released, you may see the following error on MacOS:

```sh
dyld: Library not loaded: /usr/local/opt/libusb/lib/libusb-1.0.0.dylib
```

In order to fix this, you must install the `libusb` library:

```sh
brew install libusb
```

#### Out of date `GLIBC`

If you run into an error resembling the following after using `foundryup`:

```sh
forge: /lib/x86_64-linux-gnu/libc.so.6: version 'GLIBC_2.29' not found (required by forge)
```

There are 2 workarounds:

1. [Building from source](/introduction/installation/#building-from-source)
2. [Using Docker](/introduction/installation/#using-foundry-with-docker)

#### Help! I can't see my logs!

Forge does not display logs by default. If you want to see logs from Hardhat's `console.log` or from DSTest-style `log_*` events,
you need to run [`forge test`][forge-test] with verbosity 2 (`-vv`).

If you want to see other events your contracts emit, you need to run with traces enabled.
To do that, set the verbosity to 3 (`-vvv`) to see traces for failing tests, or 4 (`-vvvv`) to see traces for all tests.

#### My tests are failing and I don't know why!

To gain better insight into why your tests are failing, try using traces. To enable traces, you need to increase the verbosity
on [forge test][forge-test] to at least 3 (`-vvv`) but you can go as high as 5 (`-vvvvv`) for even more traces.

You can learn more about traces in our [Understanding Traces][traces] chapter.

#### How do I use `console.log`?

To use Hardhat's `console.log` you must add it to your project by copying the file over from [here][console-log].

Alternatively, you can use [Forge Std][forge-std] which comes bundled with `console.log`. To use `console.log` from Forge Std,
you have to import it:

```solidity
import {console} from "forge-std/console.sol";
```

#### How do I run specific tests?

If you want to run only a few tests, you can use `--match-test` to filter test functions,
`--match-contract` to filter test contracts, and `--match-path` to filter test files on [`forge test`][forge-test].

#### How do I use a specific Solidity compiler?

Forge will try to auto-detect what Solidity compiler works for your project.

To use a specific Solidity compiler, you can set [`solc`][config-solc] in your [config file][config],
or pass `--use solc:<version>` to a Forge command that supports it (e.g. [`forge build`][forge-build]
or [`forge test`][forge-test]).
Paths to a solc binary are also accepted. To use a specific local solc binary, you can set `solc = "<path to solc>"` in your config file, or pass `--use "<path to solc>"`.
The solc version/path can also be set via the env variable `FOUNDRY_SOLC=<version/path>`, but the cli arg `--use` has priority.

For example, if you have a project that supports all 0.7.x Solidity versions, but you want to compile with solc 0.7.0, you could use `forge build --use solc:0.7.0`.

#### How do I fork from a live network?

To fork from a live network, pass `--fork-url <URL>` to [`forge test`][forge-test].
You can also fork from a specific block using `--fork-block-number <BLOCK>`, which adds determinism to your test, and allows Forge to cache
the chain data for that block.

For example, to fork from Ethereum mainnet at block 10,000,000 you could use: `forge test --fork-url $MAINNET_RPC_URL --fork-block-number 10000000`.

#### How do I add my own assertions?

You can add your own assertions by creating your own base test contract and having that inherit from the test framework of your choice.

For example, if you use DSTest, you could create a base test contract like this:

```solidity
contract TestBase is DSTest {
    function myCustomAssertion(uint a, uint b) {
      if (a != b) {
          emit log_string("a and b did not match");
          fail();
      }
    }
}
```

You would then inherit from `TestBase` in your test contracts.

```solidity
contract MyContractTest is TestBase {
    function testSomething() {
        // ...
    }
}
```

Similarly, if you use [Forge Std][forge-std], you can create a base test contract that inherits from `Test`.

For a good example of a base test contract that has helper methods and custom assertions, see [Solmate's `DSTestPlus`][dstestplus].

#### How do I use Forge offline?

Forge will sometimes check for newer Solidity versions that fit your project. To use Forge offline, use the `--offline` flag.

#### I'm getting Solc errors

[solc-bin](https://binaries.soliditylang.org/) doesn't offer static builds for Apple silicon. Foundry relies on [svm](https://github.com/alloy-rs/svm-rs) to install native builds for Apple silicon.

All solc versions are installed under `~/.svm/` if the directory already exists. If not, it uses `$XDG_DATA_HOME/svm/`, commonly mapped to `$HOME/.local/share/svm/` on Linux or `$HOME/Library/Application Support/svm/` on MacOS. If you encounter solc related errors, such as `SolcError: ...` please remove the `~/.svm/` directory and try again, this will trigger a fresh install and usually resolves the issue.

If you're on Apple silicon, please ensure the [`z3` theorem prover](https://github.com/Z3Prover/z3) is installed: `brew install z3`

> **Note**: native Apple silicon builds are only available from `0.8.5` upwards. If you need older versions, you must enable Apple silicon rosetta to run them.

#### Forge fails in JavaScript monorepos (`pnpm`)

Managers like `pnpm` use symlinks to manage `node_modules` folders.

A common layout may look like:

```text
├── contracts
│    ├── contracts
│    ├── foundry.toml
│    ├── lib
│    ├── node_modules
│    ├── package.json
├── node_modules
│    ├── ...
├── package.json
├── pnpm-lock.yaml
├── pnpm-workspace.yaml
```

Where the Foundry workspace is in `./contracts`, but packages in `./contracts/node_modules` are symlinked to `./node_modules`.

When running `forge build` in `./contracts/node_modules`, this can lead to an error like:

```console
error[6275]: ParserError: Source "node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol" not found: File outside of allowed directories. The following are allowed: "<repo>/contracts", "<repo>/contracts/contracts", "<repo>/contracts/lib".
 --> node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:8:1:
  |
8 | import "../../../utils/cryptography/draft-EIP712.sol";
```

This error happens when `solc` was able to resolve symlinked files, but they're outside the Foundry workspace (`./contracts`).

Adding `node_modules` to `allow_paths` in `foundry.toml` grants solc access to that directory, and it will be able to read it:

```toml
# This translates to `solc --allow-paths ../node_modules`
allow_paths = ["../node_modules"]
```

Note that the path is relative to the Foundry workspace. See also [solc allowed-paths](https://docs.soliditylang.org/en/latest/path-resolution.html#allowed-paths)

#### I'm getting `Permission denied (os error 13)`

If you see an error like

```console
Failed to create artifact parent folder "/.../MyProject/out/IsolationModeMagic.sol": Permission denied (os error 13)
```

Then there's likely a folder permission issue. Ensure `user` has write access in the project root's folder.

It has been [reported](https://github.com/foundry-rs/foundry/issues/3268) that on linux, canonicalizing paths can result in weird paths (`/_1/...`). This can be resolved by nuking the entire project folder and initializing again.

#### Connection refused when running `forge build`

If you're unable to access github URLs called by `forge build`, you will see an error like

```console
Error:
error sending request for url (https://raw.githubusercontent.com/roynalnaruto/solc-builds/ff4ea8a7bbde4488428de69f2c40a7fc56184f5e/macosx/aarch64/list.json): error trying to connect: tcp connect error: Connection refused (os error 61)
```

Connection failed because access to the URL from your location may be restricted. To solve this, you should set proxy.

You could run `export http_proxy=http://127.0.0.1:7890 https_proxy=http://127.0.0.1:7890` first in the terminal then you will `forge build` successfully.

#### I'm getting `[NotActivated] EvmError: NotActivated` error in my tests.

This error refers to an EVM version mismatch, make sure the `evm_version` configuration is inline with the test (forked chain) you're using (similar for errors like `prevrandao not set`). See [`evm_version` configuration](/config/reference/solidity-compiler#evm_version)

[tg-support]: https://t.me/foundry_support

[forge-test]: ./forge/reference/forge-test.md

[traces]: ./forge/traces.md

[config-solc]: ./config/reference/solidity-compiler.md#solc_version

[config]: ./config/

[forge-build]: ./forge/reference/forge-build.md

[console-log]: ./reference/forge-std/console-log.md

[forge-std]: https://github.com/foundry-rs/forge-std

[dstestplus]: https://github.com/transmissions11/solmate/blob/19a4f345970ed39ee6369f343d145e0d4071c18a/src/test/utils/DSTestPlus.sol#L10


### Struct Encoding

Structs are user defined types that can group several variables:

```solidity
struct MyStruct {
    address addr;
    uint256 amount;
}
```

Only the new [ABI coder v2](https://docs.soliditylang.org/en/latest/layout-of-source-files.html#abi-coder-pragma) can encode and decode arbitrarily nested arrays and structs. Since Solidity 0.8.0 it is activated by default, prior to that it needs to be activated via `pragma experimental ABIEncoderV2`.

Solidity structs map to the ABI type "tuple". For more information on how Solidity types map to ABI types see [Mapping Solidity to ABI types](https://docs.soliditylang.org/en/latest/abi-spec.html#mapping-solidity-to-abi-types) in the Solidity documentation.

Structs are therefore encoded and decoded as tuples. So the struct we defined above, `MyStruct`, maps to the tuple `(address,uint256)` in terms of the ABI.

Let's see how this works in a contract:

```solidity
pragma solidity =0.8.15;


contract Test {
    struct MyStruct {
        address addr;
        uint256 amount;
    }
    function f(MyStruct memory t) public pure {}
}
```

The ABI of the `f` function in this contract is:

```json
{
  "inputs": [
    {
      "components": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "internalType": "struct Test.MyStruct",
      "name": "t",
      "type": "tuple"
    }
  ],
  "name": "f",
  "outputs": [],
  "stateMutability": "pure",
  "type": "function"
}
```

which reads: The function `f` takes 1 input of type `tuple` with two components of type `address` and `uint256`.

**Nested Struct Encoding:**
Here's a more complex example with nested structs:

```solidity
pragma solidity 0.8.21;

contract Test {
    struct nestedStruct {
        address addr;
        uint256 amount;
    }

    struct MyStruct {
        string nestedStructName;
        uint256 nestedStructCount;
        nestedStruct _nestedStruct;
    }

    function f(MyStruct memory t) public pure {}
}
```

The ABI of the `f` function in this contract is:

```json
{
  "inputs": [
    {
      "name": "t",
      "type": "tuple",
      "internalType": "struct Test.MyStruct",
      "components": [
        {
          "name": "nestedStructName",
          "type": "string",
          "internalType": "string"
        },
        {
          "name": "nestedStructCount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "_nestedStruct",
          "type": "tuple",
          "internalType": "struct Test.nestedStruct",
          "components": [
            {
              "name": "addr",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "amount",
              "type": "uint256",
              "internalType": "uint256"
            }
          ]
        }
      ]
    }
  ],
  "name": "f",
  "outputs": [],
  "stateMutability": "pure",
  "type": "function"
}
```

which reads: The function `f` takes 1 input of type tuple with three components: a string, a uint256, and another tuple representing the nested struct with components addr of type address and amount of type uint256.

To encode `MyStruct` to pass it as a parameter to the function `f`:

```bash
cast abi-encode "f((string,uint256,(address,uint256)))" "(example,1,(0x...,1))"
```

To deploy a contract accepting `MyStruct` as an argument:

```bash
forge create src/Test.sol:Test --constructor-args "(example,1,(0x...,1))"
```


### Foundry v1.0 migration guide

Several breaking changes were introduced in Foundry `v1.0` version, which could require updates on projects using older versions.
This guide documents the suggested best practices when migrating from an older version.

* [Foundry v1.0 migration guide](#foundry-v10-migration-guide)
  * [Solc optimizer disabled by default](#solc-optimizer-disabled-by-default)
  * [Expect revert cheatcode disabled on internal calls by default](#expect-revert-cheatcode-disabled-on-internal-calls-by-default)
  * [Removed support for testFail tests](#removed-support-for-testfail-tests)
  * [Removed support for legacy console.sol signatures](#removed-support-for-legacy-consolesol-signatures)
  * [Conflicting remappings are ignored](#conflicting-remappings-are-ignored)
  * [Artifacts not persisted on `forge coverage`](#artifacts-not-persisted-on-forge-coverage)
  * [Other](#other)

#### Solc optimizer disabled by default

Enabling optimizer by default could introduce bugs for seemingly correct code (if there are bugs in optimizer itself) - see [#2486](https://github.com/foundry-rs/foundry/issues/2486). Foundry `v1.0` default settings could affect current projects by reporting higher contract sizes and / or project build failures. It is recommended to explicitly enable optimizer and their runs in `foundry.toml` configuration:

```toml
optimizer = true
optimizer_runs = 200
```

> ℹ️ **Note**
>
> Projects using additional compiler profiles with optimizer runs but without explicitly enable optimizer could fail to build with `Missing profile satisfying settings restrictions` message.

See: [optimizer configuration](/config/reference/solidity-compiler#optimizer)

#### Expect revert cheatcode disabled on internal calls by default

When testing internal functions with `vm.expectRevert` cheatcode at the same call depth only the first `vm.expectRevert` is executed - see [#3437](https://github.com/foundry-rs/foundry/issues/3437). In Foundry `v1.0` default settings this behavior is disabled by default. This could affect current projects by reporting test failures as `[FAIL: call didn't revert at a lower depth than cheatcode call depth]`. It is recommended to review these failing tests and either enable revert on internal calls or rewrite tests to avoid this.\
For example, a test like the one below:

```solidity
contract ContractTest is Test {
    error CustomError();

    function revertWithCustomError() internal {
        revert CustomError();
    }

    function testExample() public {
        vm.expectRevert();
        revertWithCustomError();
    }
}
```

can be changed to use a mock `CustomContract` that expose a public function:

```solidity
contract CustomContract {
    error CustomError();

    function revertWithCustomError() external {
        revert CustomError();
    }
}

contract ContractTest is Test {
    CustomContract internal c;

    function setUp() public {
        c = new CustomContract();
    }

    function testExample() public {
        vm.expectRevert();
        c.revertWithCustomError();
    }
}
```

or configured to allow expect reverts:

```solidity
    /// forge-config: default.allow_internal_expect_revert = true
    function testExample() public {
        vm.expectRevert();
        revertWithCustomError();
    }
```

See: [`vm.expectRevert`](/reference/cheatcodes/expect-revert#error) cheatcode

#### Removed support for testFail tests

The `testFail` test prefix support is removed in Foundry `v1.0` in order to prevent confusion - see [#4437](https://github.com/foundry-rs/foundry/issues/4437). This could affect existing projects by reporting test failures where they're not expected. Existing `testFail` tests can be migrated for `v1.0` by using `vm.expectRevert()` cheatcode or by using a `try/catch` approach and assert the failure.\
For example, a test like the one below:

```solidity
function testFail_IncrementAsNotOwner() public {
    vm.prank(address(0));
    upOnly.increment();
}
```

can be rewritten as

```solidity
function test_RevertWhen_CallerIsNotOwner() public {
    vm.expectRevert(Unauthorized.selector);
    vm.prank(address(0));
    upOnly.increment();
}
```

#### Removed support for legacy console.sol signatures

Foundry `v1.0` removes the support for `console.sol` selectors that use the faulty ABI encoding - see [#8910](https://github.com/foundry-rs/foundry/issues/8910). This could affect existing projects by producing test build failures, therefore they need to be updated accordingly. For example:

```solidity
console.log("testMisc", 42);
console.log(0);
```

should be rewritten as

```solidity
console.log("testMisc", uint256(42));
console.log(uint256(0));
console.logUint(0);
```

> ℹ️ **Note**
>
> Latest `forge-std` version should be used in order to use the newly signatures for console logging and avoid unexpected behaviour.

#### Conflicting remappings are ignored

Prior to Foundry `v1.0`, `forge` inferred remappings by taking into account remappings of sub-projects. When conflicting remappings were present, the longest / most specified had the priority. This was dangerous, as adding sub-projects were able to completely change the code that is executed, even if the remappings of the root project are not changed - see [#8910](https://github.com/foundry-rs/foundry/issues/9146).
With `v1.0`, a project will fail to build if the same remapping

```toml
@openzeppelin/=lib/openzeppelin-contracts/contracts/
```

is defined in both root project and in an imported dependency.
To fix it, the project root remapping should be added in `src` context:

```toml
src:@openzeppelin/=lib/openzeppelin-contracts/contracts/
```

#### Artifacts not persisted on `forge coverage`

In prior versions, `forge coverage` was changing the artifacts (which are unoptimized in order to provide accurate source hit maps) without any warnings. This was confusing and was leading to undesired situations like the one in [#8840 comment](https://github.com/foundry-rs/foundry/issues/8840#issuecomment-2390792012). Foundry `v1.0` does not generate artifacts when running coverage anymore hence projects should be aware of the change.

#### Other

* `FORGE_SNAPSHOT_CHECK` requires boolean value. Use `FORGE_SNAPSHOT_CHECK=true|false`.
* `forge inspect --pretty` flag was removed. Use `forge inspect` for table view.
* `forge bind --ethers` was removed. Use `forge bind` (defaults to `alloy`).
* `forge debug` subcommand was removed. Use `forge test --debug` and `forge script --debug`.
* `cast etherscan-source` subcommand was replaced with `cast source`. Use additional `explorer_url` and `explorer_api_url` args for alternative block explorers.
* `foundryup` installs stable if no version specified. Use `foundryup -i nightly` to install nightly versions.


### References

* [forge Commands](/forge/reference/overview)
* [cast Commands](/cast/reference/overview)
* [anvil Reference](/anvil/reference)
* [chisel Reference](/chisel/reference)
* [Config Reference](/config/reference/overview)
* [Cheatcodes Reference](/reference/cheatcodes/overview)
* [Forge Standard Library Reference](/reference/forge-std/overview)
* [ds-test Reference](/reference/ds-test)


### DSTest Reference

Dappsys Test (DSTest for short) provides basic logging and assertion functionality. It is included in the Forge Standard Library.

To get access to the functions, import `forge-std/Test.sol` and inherit from `Test` in your test contract:

```solidity
import {Test} from "forge-std/Test.sol";

contract ContractTest is Test {
    // ... tests ...
}
```

#### Logging

This is a complete overview of all the available logging events. For detailed descriptions and example usage, see below.

```solidity
event log                    (string);
event logs                   (bytes);

event log_address            (address);
event log_bytes32            (bytes32);
event log_int                (int);
event log_uint               (uint);
event log_bytes              (bytes);
event log_string             (string);

event log_named_address      (string key, address val);
event log_named_bytes32      (string key, bytes32 val);
event log_named_decimal_int  (string key, int val, uint decimals);
event log_named_decimal_uint (string key, uint val, uint decimals);
event log_named_int          (string key, int val);
event log_named_uint         (string key, uint val);
event log_named_bytes        (string key, bytes val);
event log_named_string       (string key, string val);
```

#### Logging events

This section documents all events for logging and provides usage examples.

##### `log`

```solidity
event log(string);
```

##### Example

```solidity
emit log("here");
// here
```

<br />

***

##### logs

```solidity
event logs(bytes);
```

##### Example

```solidity
emit logs(bytes("abcd"));
// 0x6162636400000000000000000000000000000000000000000000000000000000
```

<br />

***

##### log\_\<type>

```solidity
event log_<type>(<type>);
```

Where `<type>` can be `address`, `bytes32`, `int`, `uint`, `bytes`, `string`

##### Example

```solidity
uint256 amount = 1 ether;
emit log_uint(amount);
// 1000000000000000000
```

<br />

***

##### log\_named\_\<type>

```solidity
event log_named_<type>(string key, <type> val);
```

Where `<type>` can be `address`, `bytes32`, `int`, `uint`, `bytes`, `string`

##### Example

```solidity
uint256 amount = 1 ether;
emit log_named_uint("Amount", amount);
// amount: 1000000000000000000
```

<br />

***

##### log\_named\_decimal\_\<type>

```solidity
event log_named_decimal_<type>(string key, <type> val, uint decimals);
```

Where `<type>` can be `int`, `uint`

##### Example

```solidity
uint256 amount = 1 ether;
emit log_named_decimal_uint("Amount", amount, 18);
// amount: 1.000000000000000000
```

#### Asserting

This is a complete overview of all the available assertion functions. For detailed descriptions and example usage, see below.

```solidity
// Assert the `condition` is true
function assertTrue(bool condition) internal;
function assertTrue(bool condition, string memory err) internal;

// Assert `a` is equal to `b`
function assertEq(address a, address b) internal;
function assertEq(address a, address b, string memory err) internal;
function assertEq(bytes32 a, bytes32 b) internal;
function assertEq(bytes32 a, bytes32 b, string memory err) internal;
function assertEq(int a, int b) internal;
function assertEq(int a, int b, string memory err) internal;
function assertEq(uint a, uint b) internal;
function assertEq(uint a, uint b, string memory err) internal;
function assertEqDecimal(int a, int b, uint decimals) internal;
function assertEqDecimal(int a, int b, uint decimals, string memory err) internal;
function assertEqDecimal(uint a, uint b, uint decimals) internal;
function assertEqDecimal(uint a, uint b, uint decimals, string memory err) internal;
function assertEq(string memory a, string memory b) internal;
function assertEq(string memory a, string memory b, string memory err) internal;
function assertEq32(bytes32 a, bytes32 b) internal;
function assertEq32(bytes32 a, bytes32 b, string memory err) internal;
function assertEq0(bytes memory a, bytes memory b) internal;
function assertEq0(bytes memory a, bytes memory b, string memory err) internal;

// Assert  `a` is greater than `b`
function assertGt(uint a, uint b) internal;
function assertGt(uint a, uint b, string memory err) internal;
function assertGt(int a, int b) internal;
function assertGt(int a, int b, string memory err) internal;
function assertGtDecimal(int a, int b, uint decimals) internal;
function assertGtDecimal(int a, int b, uint decimals, string memory err) internal;
function assertGtDecimal(uint a, uint b, uint decimals) internal;
function assertGtDecimal(uint a, uint b, uint decimals, string memory err) internal;

// Assert  `a` is greater than or equal to `b`
function assertGe(uint a, uint b) internal;
function assertGe(uint a, uint b, string memory err) internal;
function assertGe(int a, int b) internal;
function assertGe(int a, int b, string memory err) internal;
function assertGeDecimal(int a, int b, uint decimals) internal;
function assertGeDecimal(int a, int b, uint decimals, string memory err) internal;
function assertGeDecimal(uint a, uint b, uint decimals) internal;
function assertGeDecimal(uint a, uint b, uint decimals, string memory err) internal;

// Assert  `a` is lesser than `b`
function assertLt(uint a, uint b) internal;
function assertLt(uint a, uint b, string memory err) internal;
function assertLt(int a, int b) internal;
function assertLt(int a, int b, string memory err) internal;
function assertLtDecimal(int a, int b, uint decimals) internal;
function assertLtDecimal(int a, int b, uint decimals, string memory err) internal;
function assertLtDecimal(uint a, uint b, uint decimals) internal;
function assertLtDecimal(uint a, uint b, uint decimals, string memory err) internal;

// Assert  `a` is lesser than or equal to `b`
function assertLe(uint a, uint b) internal;
function assertLe(uint a, uint b, string memory err) internal;
function assertLe(int a, int b) internal;
function assertLe(int a, int b, string memory err) internal;
function assertLeDecimal(int a, int b, uint decimals) internal;
function assertLeDecimal(int a, int b, uint decimals, string memory err) internal;
function assertLeDecimal(uint a, uint b, uint decimals) internal;
function assertLeDecimal(uint a, uint b, uint decimals, string memory err) internal;

// Asserts `a` is approximately equal to `b` with delta in absolute value.
function assertApproxEqAbs(uint256 a, uint256 b, uint256 maxDelta) internal;
function assertApproxEqAbs(uint256 a, uint256 b, uint256 maxDelta, string memory err) internal;

// Asserts `a` is approximately equal to `b` with delta in percentage, where `1e18` is 100%.
function assertApproxEqRel(uint256 a, uint256 b, uint256 maxPercentDelta) internal;
function assertApproxEqRel(uint256 a, uint256 b, uint256 maxPercentDelta, string memory err) internal;
```

#### Assertion functions

This section documents all functions for asserting and provides usage examples.

##### `assertTrue`

```solidity
function assertTrue(bool condition) internal;
```

Asserts the `condition` is true.

##### Example

```solidity
bool success = contract.fun();
assertTrue(success);
```

<br />

***

##### `assertEq`

```solidity
function assertEq(<type> a, <type> b) internal;
```

Where `<type>` can be `address`, `bytes32`, `int`, `uint`

Asserts `a` is equal to `b`.

##### Example

```solidity
uint256 a = 1 ether;
uint256 b = 1e18 wei;
assertEq(a, b);
```

<br />

***

##### `assertEqDecimal`

```solidity
function assertEqDecimal(<type> a, <type> b, uint decimals) internal;
```

Where `<type>` can be `int`, `uint`

Asserts `a` is equal to `b`.

##### Example

```solidity
uint256 a = 1 ether;
uint256 b = 1e18 wei;
assertEqDecimal(a, b, 18);
```

<br />

***

##### `assertEq32`

```solidity
function assertEq32(bytes32 a, bytes32 b) internal;
```

Asserts `a` is equal to `b`.

##### Example

```solidity
assertEq(bytes32("abcd"), 0x6162636400000000000000000000000000000000000000000000000000000000);
```

<br />

***

##### `assertEq0`

```solidity
function assertEq0(bytes a, bytes b) internal;
```

Asserts `a` is equal to `b`.

##### Example

```solidity
string memory name1 = "Alice";
string memory name2 = "Bob";
assertEq0(bytes(name1), bytes(name2)); // [FAIL]
```

<br />

***

##### `assertGt`

```solidity
function assertGt(<type> a, <type> b) internal;
```

Where `<type>` can be `int`, `uint`

Asserts `a` is greater than `b`.

##### Example

```solidity
uint256 a = 2 ether;
uint256 b = 1e18 wei;
assertGt(a, b);
```

<br />

***

##### `assertGtDecimal`

```solidity
function assertGtDecimal(<type> a, <type> b, uint decimals) internal;
```

Where `<type>` can be `int`, `uint`

Asserts `a` is greater than `b`.

##### Example

```solidity
uint256 a = 2 ether;
uint256 b = 1e18 wei;
assertGtDecimal(a, b, 18);
```

<br />

***

##### `assertGe`

```solidity
function assertGe(<type> a, <type> b) internal;
```

Where `<type>` can be `int`, `uint`

Asserts `a` is greater than or equal to `b`.

##### Example

```solidity
uint256 a = 1 ether;
uint256 b = 1e18 wei;
assertGe(a, b);
```

<br />

***

##### `assertGeDecimal`

```solidity
function assertGeDecimal(<type> a, <type> b, uint decimals) internal;
```

Where `<type>` can be `int`, `uint`

Asserts `a` is greater than or equal to `b`.

##### Example

```solidity
uint256 a = 1 ether;
uint256 b = 1e18 wei;
assertGeDecimal(a, b, 18);
```

<br />

***

##### `assertLt`

```solidity
function assertLt(<type> a, <type> b) internal;
```

Where `<type>` can be `int`, `uint`

Asserts `a` is lesser than `b`.

##### Example

```solidity
uint256 a = 1 ether;
uint256 b = 2e18 wei;
assertLt(a, b);
```

<br />

***

##### `assertLtDecimal`

```solidity
function assertLtDecimal(<type> a, <type> b, uint decimals) internal;
```

Where `<type>` can be `int`, `uint`

Asserts `a` is lesser than `b`.

##### Example

```solidity
uint256 a = 1 ether;
uint256 b = 2e18 wei;
assertLtDecimal(a, b, 18);
```

<br />

***

##### `assertLe`

```solidity
function assertLe(<type> a, <type> b) internal;
```

Where `<type>` can be `int`, `uint`

Asserts `a` is lesser than or equal to `b`.

##### Example

```solidity
uint256 a = 1 ether;
uint256 b = 1e18 wei;
assertLe(a, b);
```

<br />

***

##### `assertLeDecimal`

```solidity
function assertLeDecimal(<type> a, <type> b, uint decimals) internal;
```

Where `<type>` can be `int`, `uint`

Asserts `a` is lesser than or equal to `b`.

##### Example

```solidity
uint256 a = 1 ether;
uint256 b = 1e18 wei;
assertLeDecimal(a, b, 18);
```

<br />

***

##### `assertApproxEqAbs`

```solidity
function assertApproxEqAbs(<type> a, <type> b, uint256 maxDelta) internal;
```

Where `<type>` can be `int`, `uint`

Asserts `a` is approximately equal to `b` with delta in absolute value.

##### Example

```solidity
function testRevert () external {
    uint256 a = 100;
    uint256 b = 200;

    assertApproxEqAbs(a, b, 90);
}
```

<br />

***

##### `assertApproxEqRel`

```solidity
function assertApproxEqRel(<type> a, <type> b, uint256 maxPercentDelta) internal;
```

Where `<type>` can be `int`, `uint`

Asserts `a` is approximately equal to `b` with delta in percentage, where `1e18` is 100%.

##### Example

```solidity
function testRevert () external {
    uint256 a = 100;
    uint256 b = 200;
    assertApproxEqRel(a, b, 0.4e18);
}
```

<br />

> ℹ️ **Information**
>
> You can pass a custom error message to the above functions by providing an additional parameter `string err`.


### ABI Commands

* [cast abi-encode](/cast/reference/cast-abi-encode)
* [cast 4byte](/cast/reference/cast-4byte)
* [cast 4byte-calldata](/cast/reference/cast-4byte-calldata)
* [cast 4byte-event](/cast/reference/cast-4byte-event)
* [cast calldata](/cast/reference/cast-calldata)
* [cast decode-abi](/cast/reference/cast-decode-abi)
* [cast decode-calldata](/cast/reference/cast-decode-calldata)
* [cast pretty-calldata](/cast/reference/cast-pretty-calldata)
* [cast selectors](/cast/reference/cast-selectors)
* [cast upload-signature](/cast/reference/cast-upload-signature)


### Account Commands

* [cast balance](/cast/reference/cast-balance)
* [cast storage](/cast/reference/cast-storage)
* [cast proof](/cast/reference/cast-proof)
* [cast nonce](/cast/reference/cast-nonce)
* [cast code](/cast/reference/cast-code)
* [cast codesize](/cast/reference/cast-codesize)
* [cast index](/cast/reference/cast-index)


### Block Commands

* [cast find-block](/cast/reference/cast-find-block)
* [cast gas-price](/cast/reference/cast-gas-price)
* [cast block-number](/cast/reference/cast-block-number)
* [cast basefee](/cast/reference/cast-basefee)
* [cast block](/cast/reference/cast-block)
* [cast age](/cast/reference/cast-age)


import CommonOptions from "./common-options.mdx";

### cast 4byte-calldata

#### NAME

cast-4byte-calldata - Decode ABI-encoded calldata using [Openchain Signatures](https://openchain.xyz/signatures).

#### SYNOPSIS

`cast 4byte-calldata` \[*options*] *calldata*

#### DESCRIPTION

Decode ABI-encoded calldata using [Openchain Signatures](https://openchain.xyz/signatures).

#### OPTIONS

##### 4byte Options

`--id` *id*\
    The index of the resolved signature to use.
    \
    [https://openchain.xyz/signatures](https://openchain.xyz/signatures) can have multiple possible signatures for a given selector.\
    The index can be an integer, or the tags "earliest" and "latest".

<CommonOptions />

#### EXAMPLES

1. Decode calldata for a `transfer` call:
   ```sh
   cast 4byte-calldata 0xa9059cbb000000000000000000000000e78388b4ce79068e89bf8aa7f218ef6b9ab0e9d00000000000000000000000000000000000000000000000000174b37380cea000
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast 4byte](/cast/reference/cast-4byte), [cast 4byte-event](/cast/reference/cast-4byte-event)


import CommonOptions from "./common-options.mdx";

### cast 4byte-event

#### NAME

cast-4byte-event - Get the event signature for a given topic 0 from [Openchain Signatures](https://openchain.xyz/signatures).

#### SYNOPSIS

`cast 4byte-event` \[*options*] *topic\_0*

#### DESCRIPTION

Get the event signature for a given topic 0 from [https://openchain.xyz/signatures](https://openchain.xyz/signatures).

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Get the event signature for a topic 0 of `0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef`:
   ```sh
   cast 4byte-event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast 4byte](/cast/reference/cast-4byte.mdx), [cast 4byte-calldata](/cast/reference/cast-4byte-calldata.mdx)


import CommonOptions from "./common-options.mdx";

### cast 4byte

#### NAME

cast-4byte - Get the function signatures for the given selector from [Openchain Signatures](https://openchain.xyz/signatures).

#### SYNOPSIS

`cast 4byte` \[*options*] *sig*

#### DESCRIPTION

Get the function signatures for the given selector from [https://openchain.xyz/signatures](https://openchain.xyz/signatures).

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Get the function signature for the selector `0x8cc5ce99`:
   ```sh
   cast 4byte 0x8cc5ce99
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast 4byte-calldata](/cast/reference/cast-4byte-calldata.mdx), [cast 4byte-event](/cast/reference/cast-4byte-event.mdx), [cast selectors](/cast/reference/cast-selectors.mdx)


import CommonOptions from "./common-options.mdx";

### cast abi-encode

#### NAME

cast-abi-encode - ABI encode the given function arguments, excluding the selector.

#### SYNOPSIS

`cast abi-encode` \[*options*] *sig* \[*args...*]

#### DESCRIPTION

ABI encode the given function, excluding the selector.

The signature (*sig*) is a fragment in the form `<function name>(<types...>)`.

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. ABI-encode the arguments for a call to `someFunc(address,uint256)`:

   ```sh
   cast abi-encode "someFunc(address,uint256)" 0x... 1
   ```

2. For encoding a type with components (as a tuple, or custom struct):

   ```sh
   cast abi-encode "someFunc((string,uint256))" "(myString,1)"
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast calldata](/cast/reference/cast-calldata.mdx)


import SigDescription from "./sig-description.mdx";
import WalletOptions from "../../reference/common/wallet-options.mdx";
import RpcOptions from "../../reference/common/rpc-options.mdx";
import EtherscanOptions from "../../reference/common/etherscan-options.mdx";
import CommonOptions from "./common-options.mdx";

### cast access-list

#### NAME

cast-access-list - Create an access list for a transaction.

#### SYNOPSIS

`cast access-list` \[*options*] *to* *sig* \[*args...*]

#### DESCRIPTION

Create an access list for a transaction.

The destination (*to*) can be an ENS name or an address.

<SigDescription />

#### OPTIONS

##### Query Options

`-B` *block*\
`--block` *block*\
    The block height you want to query at.

    Can be a block number, or any of the tags: `earliest`, `finalized`, `safe`, `latest` or `pending`.

<WalletOptions />

<RpcOptions />

<EtherscanOptions />

<CommonOptions />

#### SEE ALSO

[cast](/cast/reference/overview), [cast send](/cast/reference/cast-send.mdx), [cast publish](/cast/reference/cast-publish.mdx), [cast call](/cast/reference/cast-call.mdx)


import CommonOptions from "./common-options.mdx";

### cast address-zero

#### NAME

cast address-zero - Prints the zero address.

#### SYNOPSIS

`cast address-zero`

#### DESCRIPTION

Prints the zero address.

#### OPTIONS

<CommonOptions />

[cast](/cast/reference/overview)


import RpcUrlOption from "../../reference/common/rpc-url-option.mdx";
import CommonOptions from "./common-options.mdx";

### cast age

#### NAME

cast-age - Get the timestamp of a block.

#### SYNOPSIS

`cast age` \[*options*] \[*block*]

#### DESCRIPTION

Get the timestamp of a block.

The specified *block* can be a block number, or any of the tags: `earliest`, `finalized`, `safe`, `latest` or `pending`. Default to `latest`.

#### OPTIONS

##### RPC Options

<RpcUrlOption />

<CommonOptions />

#### EXAMPLES

1. Get the timestamp of the latest block:

   ```sh
   cast age
   ```

2. Get the timestamp of the genesis block:
   ```sh
   cast age 1
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast block](/cast/reference/cast-block.mdx), [cast basefee](/cast/reference/cast-basefee.mdx)


import RpcUrlOption from "../../reference/common/rpc-url-option.mdx";
import CommonOptions from "./common-options.mdx";

### cast balance

#### NAME

cast-balance - Get the balance of an account in wei.

#### SYNOPSIS

`cast balance` \[*options*] *who*

#### DESCRIPTION

Get the balance of an account.

The argument *who* can be an ENS name or an address.

#### OPTIONS

##### Query Options

`-B` *block*\
`--block` *block*\
    The block height you want to query at.

    Can be a block number, or any of the tags: `earliest`, `finalized`, `safe`, `latest` or `pending`.

`-e` *ether*\
`--ether` *ether*\
     If this flag is used then balance will be shown in ether

##### RPC Options

<RpcUrlOption />

<CommonOptions />

#### EXAMPLES

1. Get the balance of beer.eth
   ```sh
   cast balance beer.eth
   ```
2. Get the ERC20 balance of any address using RPC URL

   ```sh
   # To load the variables in the .env file
   source .env

   # To get the USDT balance of Binance
   cast balance --erc20 0xdAC17F958D2ee523a2206206994597C13D831ec7 0xF977814e90dA44bFA03b6295A0616a897441aceC --rpc-url $MAINNET_RPC_URL
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast nonce](/cast/reference/cast-nonce.mdx)


import RpcUrlOption from "../../reference/common/rpc-url-option.mdx";
import CommonOptions from "./common-options.mdx";

### cast basefee

#### NAME

cast-base-fee - Get the basefee of a block.

#### SYNOPSIS

`cast base-fee` \[*options*] \[*block*]

#### DESCRIPTION

Get the basefee of a block.

The specified *block* can be a block number, or any of the tags: `earliest`, `finalized`, `safe`, `latest` or `pending`. Default to `latest`.

#### OPTIONS

##### RPC Options

<RpcUrlOption />

<CommonOptions />

#### EXAMPLES

1. Get the basefee of the latest block:

   ```sh
   cast base-fee
   ```

2. Get the basefee of the genesis block:
   ```sh
   cast base-fee 1
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast block](/cast/reference/cast-block.mdx), [cast age](/cast/reference/cast-age.mdx)


import RpcUrlOption from "../../reference/common/rpc-url-option.mdx";
import CommonOptions from "./common-options.mdx";

### cast block-number

#### NAME

cast-block-number - Get the latest block number.

#### SYNOPSIS

`cast block-number` \[*options*]

#### DESCRIPTION

Get the latest block number.

#### OPTIONS

##### RPC Options

<RpcUrlOption />

<CommonOptions />

#### EXAMPLES

1. Get the latest block number:
   ```sh
   cast block-number
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast block](/cast/reference/cast-block.mdx)


import DisplayOptions from "../../reference/common/display-options.mdx";
import RpcUrlOption from "../../reference/common/rpc-url-option.mdx";
import CommonOptions from "./common-options.mdx";

### cast block

#### NAME

cast-block - Get information about a block.

#### SYNOPSIS

`cast block` \[*options*] \[*block*]

#### DESCRIPTION

Get information about a block.

The specified *block* can be a block number, or any of the tags: `earliest`, `finalized`, `safe`, `latest` or `pending`. Default to `latest`.

#### OPTIONS

`-f` *field*\
`--field` *field*\
     If specified, only get the given field of the block.

<DisplayOptions />

##### RPC Options

<RpcUrlOption />

<CommonOptions />

#### EXAMPLES

1. Get the latest block:

   ```sh
   cast block
   ```

2. Get the `finalized` block:

   ```sh
   cast block finalized
   ```

3. Get the hash of the latest block:
   ```sh
   cast block latest -f hash
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast basefee](/cast/reference/cast-basefee.mdx), [cast age](/cast/reference/cast-age.mdx)


import SigDescription from "./sig-description.mdx";
import WalletOptions from "../../reference/common/wallet-options.mdx";
import RpcOptions from "../../reference/common/rpc-options.mdx";
import EtherscanOptions from "../../reference/common/etherscan-options.mdx";
import CommonOptions from "./common-options.mdx";

### cast call

#### NAME

cast-call - Perform a call on an account without publishing a transaction.

#### SYNOPSIS

`cast call` \[*options*] *to* *sig* \[*args...*]

#### DESCRIPTION

Perform a call on an account without publishing a transaction.

The destination (*to*) can be an ENS name or an address.

<SigDescription />

#### OPTIONS

`--trace`\
    Prints traces for the transaction.

`--debug`\
    Opens an interactive debugger with the transaction. Needs `--trace`.

`--labels <address:label>`\
    Labels to apply to the traces, with the format `address:label`. Needs `--trace`.

`--evm-version`\
    The EVM version to use. Needs `--trace`.

`--data` data\
    Allows setting the data field directly without providing
sig \[args…].\
    Data needs to be in hexadecimal format.

##### Query Options

`-B` *block*\
`--block` *block*\
    The block height you want to query at.

    Can be a block number, or any of the tags: `earliest`, `finalized`, `safe`, `latest` or `pending`.

<WalletOptions />

<RpcOptions />

<EtherscanOptions />

<CommonOptions />

#### EXAMPLES

1. Call `balanceOf(address)` on the WETH contract:

   ```sh
   cast call 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 \
     "balanceOf(address)(uint256)" 0x...
   ```

2. Call `tokenURI(uint256)(string)` on the Tubby Cats NFT contract:

   ```sh
   export CONTRACT=0xca7ca7bcc765f77339be2d648ba53ce9c8a262bd
   export TOKEN_ID=19938
   cast call $CONTRACT "tokenURI(uint256)(string)" $TOKEN_ID
   ```

3. Call `getAmountsOut(uint,address[])` on the Uniswap v2 router contract:

   ```sh
   cast call 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D \
    "getAmountsOut(uint,address[])" 1 "[0x6b...0f,0xc0...c2]"
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast send](/cast/reference/cast-send.mdx), [cast publish](/cast/reference/cast-publish.mdx), [cast receipt](/cast/reference/cast-receipt.mdx)


import CommonOptions from "./common-options.mdx";

### cast calldata

#### NAME

cast-calldata - ABI-encode a function with arguments.

#### SYNOPSIS

`cast calldata` \[*options*] *sig* \[*args...*]

#### DESCRIPTION

ABI-encode a function with arguments.

The signature (*sig*) is a fragment in the form `<function name>(<types...>)`.

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. ABI-encode the arguments for a call to `someFunc(address,uint256)`:
   ```sh
   cast calldata "someFunc(address,uint256)" 0x... 1
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast abi-encode](/cast/reference/cast-abi-encode.mdx)


import RpcUrlOption from "../../reference/common/rpc-url-option.mdx";
import CommonOptions from "./common-options.mdx";

### cast chain-id

#### NAME

cast-chain-id - Get the Ethereum chain ID.

#### SYNOPSIS

`cast chain-id` \[*options*]

#### DESCRIPTION

Get the Ethereum [chain ID][chain-id] from the RPC endpoint we are connected to.

#### OPTIONS

##### RPC Options

<RpcUrlOption />

<CommonOptions />

#### EXAMPLES

1. Get the chain ID when talking to `$RPC`:

   ```sh
   cast chain-id --rpc-url $RPC
   ```

2. Get the chain ID when `$ETH_RPC_URL` is set:
   ```sh
   cast chain-id
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast chain](/cast/reference/cast-chain.mdx)

[chain-id]: https://chainlist.org/


import RpcUrlOption from "../../reference/common/rpc-url-option.mdx";
import CommonOptions from "./common-options.mdx";

### cast chain

#### NAME

cast-chain - Get the symbolic name of the current chain.

#### SYNOPSIS

`cast chain` \[*options*]

#### DESCRIPTION

Get the symbolic chain name from the RPC endpoint we are connected to.

#### OPTIONS

##### RPC Options

<RpcUrlOption />

<CommonOptions />

#### EXAMPLES

1. Get the chain name when talking to `$RPC`:

   ```sh
   cast chain --rpc-url $RPC
   ```

2. Get the chain name when `$ETH_RPC_URL` is set:
   ```sh
   cast chain
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast chain-id](/cast/reference/cast-chain-id.mdx)


import RpcUrlOption from "../../reference/common/rpc-url-option.mdx";
import CommonOptions from "./common-options.mdx";

### cast client

#### NAME

cast-client - Get the current client version.

#### SYNOPSIS

`cast client` \[*options*]

#### DESCRIPTION

Get the current client version.

#### OPTIONS

##### RPC Options

<RpcUrlOption />

<CommonOptions />

#### EXAMPLES

1. Get the current client version:
   ```sh
   cast client
   ```

#### SEE ALSO

[cast](/cast/reference/overview)


import RpcUrlOption from "../../reference/common/rpc-url-option.mdx";
import CommonOptions from "./common-options.mdx";

### cast code

#### NAME

cast-code - Get the bytecode of a contract.

#### SYNOPSIS

`cast code` \[*options*] *address*

#### DESCRIPTION

Get the bytecode of a contract.

The contract (*address*) can be an ENS name or an address.

#### OPTIONS

##### Query Options

`-B` *block*\
`--block` *block*\
    The block height you want to query at.

    Can be a block number, or any of the tags: `earliest`, `finalized`, `safe`, `latest` or `pending`.

##### RPC Options

<RpcUrlOption />

<CommonOptions />

#### EXAMPLES

1. Get the bytecode of the WETH contract.
   ```sh
   cast code 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast proof](/cast/reference/cast-proof.mdx)


import RpcUrlOption from "../../reference/common/rpc-url-option.mdx";
import CommonOptions from "./common-options.mdx";

### cast codesize

#### NAME

cast-codesize - Get the runtime bytecode size of a contract.

#### SYNOPSIS

`cast codesize` \[*options*] *address*

#### DESCRIPTION

Get the runtime bytecode size of a contract.

The contract (*address*) can be an ENS name or an address.

#### OPTIONS

##### Query Options

`-B` *block*\
`--block` *block*\
    The block height you want to query at.

    Can be a block number, or any of the tags: `earliest`, `finalized`, `safe`, `latest` or `pending`.

##### RPC Options

<RpcUrlOption />

<CommonOptions />

#### EXAMPLES

1. Get the runtime bytecode size of the WETH contract.

```sh
cast codesize 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2
```

#### SEE ALSO

[cast](/cast/reference/overview), [cast code](/cast/reference/cast-code.mdx)


import CommonOptions from "./common-options.mdx";

### cast completions

#### NAME

cast-completions - Generate shell completions script

#### SYNOPSIS

`cast completions` *shell*

#### DESCRIPTION

Generates a shell completions script for the given shell.

Supported shells are:

* bash
* elvish
* fish
* powershell
* zsh

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Generate shell completions script for zsh:
   ```sh
   cast completions zsh > $HOME/.oh-my-zsh/completions/_cast
   ```

#### SEE ALSO

[cast](/cast/reference/overview)


import RpcUrlOption from "../../reference/common/rpc-url-option.mdx";
import CommonOptions from "./common-options.mdx";

### cast compute-address

#### NAME

cast-compute-address - Compute the contract address from a given nonce and deployer address.

#### SYNOPSIS

`cast compute-address` \[*options*] *address*

#### DESCRIPTION

Compute the contract address from a given nonce and deployer address.

#### OPTIONS

##### Compute Options

`--nonce` *nonce*\
    The nonce of the account. Defaults to the latest nonce, fetched from the RPC.

##### RPC Options

<RpcUrlOption />

<CommonOptions />

#### SEE ALSO

[cast](/cast/reference/overview), [cast proof](/cast/reference/cast-proof.mdx), [cast create2](/cast/reference/cast-create2.mdx)


import CommonOptions from "./common-options.mdx";

### cast concat-hex

#### NAME

cast-concat-hex - Concatenate hex strings.

#### SYNOPSIS

`cast concat-hex` *data...*

#### DESCRIPTION

Concatenate hex strings.

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Concatenate hex strings:
   ```sh
   cast concat-hex 0xa 0xb 0xc
   ```

#### SEE ALSO

[cast](/cast/reference/overview)


import CommonOptions from "./common-options.mdx";

### cast create2

#### NAME

cast-create2 - Generate a deterministic contract address using CREATE2

#### SYNOPSIS

`cast create2` \[*options*]

#### DESCRIPTION

Generate a deterministic contract address using CREATE2

#### OPTIONS

`--starts-with` *hex*
    Prefix for the contract address.

`--ends-with` *hex*
    Suffix for the contract address

`--matching` *hex*
    Sequence that the address has to match

`--case-sensitive`
    Case sensitive matching

`--deployer` *address*
    Address of the contract deployer \[default: `0x4e59b44847b379578588920ca78fbf26c0b4956c`]

`--init-code` *hex*
    Init code of the contract to be deployed

`--init-code-hash` *hash*
    Init code hash of the contract to be deployed

`--jobs` *jobs*
    Number of threads to use. Defaults to and caps at the number of logical cores

`--caller` *address*
    Address of the caller. Used for the first 20 bytes of the salt

<CommonOptions />

#### EXAMPLES

1. Generate a contract address that starts with `dead`:
   ```sh
   cast create2 --starts-with dead
   ```
2. Generate a contract address that ends with `beef`:
   ```sh
   cast create2 --ends-with beef
   ```
3. A more complex example:
   ```sh
   cast create2 --starts-with dead --case-sensitive --deployer 0x0000000000FFe8B47B3e2130213B802212439497 --init-code-hash 0x0c591f26891d6443cf08c5be3584c1e6ae10a4c2f07c5c53218741e9755fb9cd
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast compute-address](/cast/reference/cast-compute-address.mdx)


import CommonOptions from "./common-options.mdx";

### cast decode-abi

#### NAME

cast-decode-abi - Decode ABI-encoded input or output data.

#### SYNOPSIS

`cast decode-abi` \[*options*] *sig* *calldata*

#### DESCRIPTION

Decode ABI-encoded input or output data.

By default, the command will decode output data. To decode input data, pass `--input` or use [`cast decode-calldata`](/cast/reference/cast-decode-calldata.mdx).

The signature (*sig*) is a fragment in the form `<function name>(<types...>)(<types...>)`.

#### OPTIONS

##### Decoder Options

`-i`\
`--input`\
    Decode input data.

<CommonOptions />

#### EXAMPLES

1. Decode output data for a `balanceOf` call:

   ```sh
   cast decode-abi "balanceOf(address)(uint256)" \
     0x000000000000000000000000000000000000000000000000000000000000000a
   ```

2. Decode input data for a `transfer` call:
   ```sh
   cast decode-abi --input "transfer(address,uint256)" \
     0xa9059cbb000000000000000000000000e78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0000000000000000000000000000000000000000000000000008a8e4b1a3d8000
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast decode-calldata](/cast/reference/cast-decode-calldata.mdx)


import CommonOptions from "./common-options.mdx";

### cast decode-calldata

#### NAME

cast-decode-calldata - Decode ABI-encoded input data.

#### SYNOPSIS

`cast decode-calldata` \[*options*] *sig* *calldata*

#### DESCRIPTION

Decode ABI-encoded input data.

The signature (*sig*) is a fragment in the form `<function name>(<types...>)`.

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Decode input data for a `transfer` call:
   ```sh
   cast decode-calldata "transfer(address,uint256)" \
     0xa9059cbb000000000000000000000000e78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0000000000000000000000000000000000000000000000000008a8e4b1a3d8000
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast decode-abi](/cast/reference/cast-decode-abi.mdx)


import SigDescription from "./sig-description.mdx";
import TxValueOption from "../../reference/common/tx-value-option.mdx";
import RpcOptions from "../../reference/common/rpc-options.mdx";
import EtherscanOptions from "../../reference/common/etherscan-options.mdx";
import CommonOptions from "./common-options.mdx";

### cast estimate

#### NAME

cast-estimate - Estimate the gas cost of a transaction.

#### SYNOPSIS

`cast estimate` \[*options*] *to* *sig* \[*args...*]

#### DESCRIPTION

Estimate the gas cost of a transaction.

The destination (*to*) can be an ENS name or an address.

<SigDescription />

#### OPTIONS

##### Transaction Options

<TxValueOption />

<RpcOptions />

<EtherscanOptions />

<CommonOptions />

#### EXAMPLES

1. Estimate the gas cost of calling `deposit()` on the WETH contract:
   ```sh
   cast estimate 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 \
     --value 0.1ether "deposit()"
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast send](/cast/reference/cast-send.mdx), [cast publish](/cast/reference/cast-publish.mdx), [cast receipt](/cast/reference/cast-receipt.mdx)


import EtherscanOptions from "../../reference/common/etherscan-options.mdx";
import CommonOptions from "./common-options.mdx";

### cast etherscan-source

#### NAME

cast-etherscan-source - Get the source code of a contract from Etherscan.

#### SYNOPSIS

`cast etherscan-source` \[*options*] *address*

#### DESCRIPTION

Get the source code of a contract from Etherscan.

The destination (*to*) can be an ENS name or an address.

#### OPTIONS

##### Output Options

`-d` *directory*\
    The output directory to expand the source tree into.
    If not provided, the source will be outputted to stdout.

`-f`\
`--flatten`\
    Whether to flatten the source code.

<EtherscanOptions />

<CommonOptions />

#### EXAMPLES

1. Get the source code of the WETH contract:

   ```sh
   cast etherscan-source 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2
   ```

2. Expand the source code of the WETH contract into a directory named `weth`
   ```sh
   cast etherscan-source -d weth 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2
   ```

#### SEE ALSO

[cast](/cast/reference/overview)


import RpcUrlOption from "../../reference/common/rpc-url-option.mdx";
import CommonOptions from "./common-options.mdx";

### cast find-block

#### NAME

cast-find-block - Get the block number closest to the provided timestamp.

#### SYNOPSIS

`cast find-block` \[*options*] *timestamp*

#### DESCRIPTION

Get the block number closest to the provided timestamp.

#### OPTIONS

##### RPC Options

<RpcUrlOption />

<CommonOptions />

#### EXAMPLES

1. Get the block number closest to New Years 2021
   ```sh
   cast find-block 1609459200
   ```

#### SEE ALSO

[cast](/cast/reference/overview)


import CommonOptions from "./common-options.mdx";

### cast format-bytes32-string

#### NAME

cast-format-bytes32-string - Formats a string into bytes32 encoding.

#### SYNOPSIS

`cast format-bytes32-string` \[*options*] *string*

#### DESCRIPTION

Formats a string into bytes32 encoding.

Note that this command is for formatting a [Solidity string literal](https://docs.soliditylang.org/en/v0.8.16/types.html#string-literals-and-types) into `bytes32` only. If you're looking to pad a byte string, use [to-bytes32](/cast/reference/cast-to-bytes32.mdx) instead.

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Turn string "hello" into bytes32 hex:
   ```sh
   cast format-bytes32-string "hello"
   ```

#### SEE ALSO

[cast](/cast/reference/overview)


import CommonOptions from "./common-options.mdx";

### cast from-bin

#### NAME

cast-from-bin - Convert binary data into hex data.

#### SYNOPSIS

`cast from-bin` \[*options*]

#### DESCRIPTION

Convert binary data into hex data.

The input is taken from stdin.

#### OPTIONS

<CommonOptions />

#### SEE ALSO

[cast](/cast/reference/overview)


import CommonOptions from "./common-options.mdx";

### cast from-fixed-point

#### NAME

cast-from-fixed-point - Convert a fixed point number into an integer.

#### SYNOPSIS

`cast from-fixed-point` \[*options*] *decimals* *value*

#### DESCRIPTION

Convert a fixed point number into an integer.

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Convert 10.55 to an integer:
   ```sh
   cast from-fixed-point 2 10.55
   ```

#### SEE ALSO

[cast](/cast/reference/overview)


import CommonOptions from "./common-options.mdx";

### cast from-rlp

#### NAME

cast-from-rlp - Decodes RLP-encoded data.

#### SYNOPSIS

`cast from-rlp` *data*

#### DESCRIPTION

Decodes RLP-encoded data.

The *data* is a hexadecimal string with optional 0x prefix.

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Decode RLP data:

   ```sh
   cast from-rlp 0xc481f181f2

   cast from-rlp c481f181f2
   ```


import CommonOptions from "./common-options.mdx";

### cast from-utf8

#### NAME

cast-from-utf8 - Convert UTF8 text to hex.

#### SYNOPSIS

`cast from-utf8` \[*options*] *text*

#### DESCRIPTION

Convert UTF8 text to hex.

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Convert UTF8 text to hex:
   ```sh
   cast from-utf8 "hello"
   ```

#### SEE ALSO

[cast](/cast/reference/overview)


import CommonOptions from "./common-options.mdx";

### cast from-wei

#### NAME

cast-from-wei - Convert wei into an ETH amount.

#### SYNOPSIS

`cast from-wei` \[*options*] *value* \[*unit*]

#### DESCRIPTION

Convert wei into an ETH amount.

Consider using [`cast to-unit`](/cast/reference/cast-to-unit.mdx).

#### OPTIONS

<CommonOptions />

#### SEE ALSO

[cast](/cast/reference/overview), [cast calldata](/cast/reference/cast-to-unit.mdx)


import RpcUrlOption from "../../reference/common/rpc-url-option.mdx";
import CommonOptions from "./common-options.mdx";

### cast gas-price

#### NAME

cast-gas-price - Get the current gas price.

#### SYNOPSIS

`cast gas-price` \[*options*]

#### DESCRIPTION

Get the current gas price.

#### OPTIONS

##### RPC Options

<RpcUrlOption />

<CommonOptions />

#### EXAMPLES

1. Get the current gas price:
   ```sh
   cast gas-price
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast basefee](/cast/reference/cast-basefee.mdx)


### cast help

#### NAME

cast-help - Get help for a Cast command

#### SYNOPSIS

`cast help` \[*subcommand*]

#### DESCRIPTION

Prints a help message for the given command.

#### EXAMPLES

1. Get help for a command:

   ```sh
   cast help call
   ```

2. Help is also available with the `--help` flag:
   ```sh
   cast call --help
   ```

#### SEE ALSO

[cast](/cast/reference/overview)


import CommonOptions from "./common-options.mdx";

### cast index

#### NAME

cast-index - Compute the storage slot location for an entry in a mapping.

#### SYNOPSIS

`cast index` *key\_type* *key* *slot*

#### DESCRIPTION

Compute the storage slot location for an entry in a mapping.

Use `cast storage` to get the value.

#### OPTIONS

<CommonOptions />

#### EXAMPLES

```solidity
// World.sol

mapping (address => uint256) public mapping1;
mapping (string => string) public mapping2;
```

1. Compute the storage slot of an entry (`hello`) in a mapping of type `mapping(string => string)`, located at slot 1:
   ```sh
   >> cast index string "hello" 1
   0x3556fc8e3c702d4479a1ab7928dd05d87508462a12f53307b5407c969223d1f8
   >> cast storage [address] 0x3556fc8e3c702d4479a1ab7928dd05d87508462a12f53307b5407c969223d1f8
   world
   ```

#### SEE ALSO

[cast](/cast/reference/overview)


import EtherscanOptions from "../../reference/common/etherscan-options.mdx";
import CommonOptions from "./common-options.mdx";

### cast interface

#### NAME

cast-interface - Generate a Solidity interface from a given ABI.

#### SYNOPSIS

`cast interface` \[*options*] *address\_or\_path*

#### DESCRIPTION

Generates a Solidity interface from a given ABI.

The argument (*address\_or\_path*) can either be the path to a file containing an ABI, or an address.

If an address is provided, then the interface is generated from the ABI of the account, which is fetched from Etherscan.

> ℹ️ **Note**
>
> This command does not currently support ABI encoder v2.

#### OPTIONS

##### Interface Options

`-n` *name*\
`--name` *name*\
    The name to use for the generated interface. The default name is `Interface`.

`-o` *path*\
    The path to the output file. If not specified, the interface will be output to stdout.

`-p` *version*\
`--pragma` *version*\
    The Solidity pragma version to use in the interface. Default: `^0.8.10`.

`-j`\
`--json`\
    Output the contract's JSON ABI.

<EtherscanOptions />

<CommonOptions />

#### EXAMPLES

1. Generate an interface from a file:

   ```sh
   cast interface ./path/to/abi.json
   ```

2. Generate an interface using Etherscan:

   ```sh
   cast interface -o IWETH.sol 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2
   ```

3. Generate and name an interface from a file:

   ```sh
   cast interface -n LilENS ./path/to/abi.json
   ```

4. Fetch the JSON ABI of a contract on Etherscan:
   ```sh
   cast interface -o IWETH.sol -j 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast proof](/cast/reference/cast-proof.mdx)


import CommonOptions from "./common-options.mdx";

### cast keccak

#### NAME

cast-keccak - Hash arbitrary data using keccak-256.

#### SYNOPSIS

`cast keccak` \[*options*] *data*

#### DESCRIPTION

Hash arbitrary data using keccak-256.

#### OPTIONS

<CommonOptions />

#### SEE ALSO

[cast](/cast/reference/overview)


import WalletOptions from "../../reference/common/wallet-options.mdx";
import RpcOptions from "../../reference/common/rpc-options.mdx";
import EtherscanOptions from "../../reference/common/etherscan-options.mdx";

### cast logs

#### NAME

cast logs - Get logs by signature or topic.

#### SYNOPSIS

`cast logs` \[*options*] *sig\_or\_topic* \[*topics\_or\_args...*]

#### DESCRIPTION

Get logs by signature or topic.

The (*sig\_or\_topic*) may either be the event signature or its hashed topic (located at topics\[0]).

If using a signature, remaining arguments must be in their ordinary form. If using a topic, the arguments must be as they themselves appear as topics.

#### OPTIONS

#### Query Options

`--from-block` *from\_block*
    The block height to start query at.

    Can also be the tags: `earliest`, `finalized`, `safe`, `latest`, or `pending`.

`--to-block` *to\_block*
    The block height to stop query at.

    Can also be the tags: `earliest`, `finalized`, `safe`, `latest`, or `pending`.

`--address` *address*
    The contract address to filter on

<WalletOptions />

<RpcOptions />

<EtherscanOptions />

#### EXAMPLES

1. Get logs using a signature:
   ```sh
   cast logs --from-block 15537393 --to-block latest 'Transfer (address indexed from, address indexed to, uint256 value)' --address 0x2e8ABfE042886E4938201101A63730D04F160A82
   ```
2. Get logs using a topic:
   ```sh
   cast logs --from-block 15537393 --to-block latest 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef --address 0x0000000000000000000000002e8abfe042886e4938201101a63730d04f160a82
   ```

#### SEE ALSO

[cast](/cast/reference/overview)


import RpcUrlOption from "../../reference/common/rpc-url-option.mdx";
import CommonOptions from "./common-options.mdx";

### cast lookup-address

#### NAME

cast-lookup-address - Perform an ENS reverse lookup.

#### SYNOPSIS

`cast lookup-address` \[*options*] *who*

#### DESCRIPTION

Perform an ENS reverse lookup.

If `--verify` is passed, then a normal lookup is performed after the reverse lookup to verify that the address is correct.

#### OPTIONS

##### Lookup Options

`-v`\
`--verify`\
    Perform a normal lookup to verify that the address is correct.

##### RPC Options

<RpcUrlOption />

<CommonOptions />

#### EXAMPLES

1. Get the ENS name for an address.

   ```sh
   cast lookup-address $ADDRESS
   ```

2. Perform both a reverse and a normal lookup:
   ```sh
   cast lookup-address --verify $ADDRESS
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast resolve-name](/cast/reference/cast-resolve-name.mdx)


import CommonOptions from "./common-options.mdx";

### cast max-int

#### NAME

cast-max-int - Get the maximum i256 value.

#### SYNOPSIS

`cast max-int`

#### DESCRIPTION

Get the maximum i256 value.

#### OPTIONS

<CommonOptions />

#### SEE ALSO

[cast](/cast/reference/overview), [cast min-int](/cast/reference/cast-min-int.mdx), [cast max-uint](/cast/reference/cast-max-uint.mdx)


import CommonOptions from "./common-options.mdx";

### cast max-uint

#### NAME

cast-max-uint - Get the maximum uint256 value.

#### SYNOPSIS

`cast max-uint`

#### DESCRIPTION

Get the maximum uint256 value.

#### OPTIONS

<CommonOptions />

#### SEE ALSO

[cast](/cast/reference/overview), [cast max-int](/cast/reference/cast-max-int.mdx)


import CommonOptions from "./common-options.mdx";

### cast min-int

#### NAME

cast-min-int - Get the minimum i256 value.

#### SYNOPSIS

`cast min-int`

#### DESCRIPTION

Get the minimum i256 value.

#### OPTIONS

<CommonOptions />

#### SEE ALSO

[cast](/cast/reference/overview), [cast max-int](/cast/reference/cast-max-int.mdx)


import SigDescription from "./sig-description.mdx";
import TransactionOptions from "../../reference/common/transaction-options.mdx";
import WalletOptionsRaw from "../../reference/common/wallet-options-raw.mdx";
import WalletOptionsKeystore from "../../reference/common/wallet-options-keystore.mdx";
import WalletOptionsHardware from "../../reference/common/wallet-options-hardware.mdx";
import RpcOptions from "../../reference/common/rpc-options.mdx";
import EtherscanOptions from "../../reference/common/etherscan-options.mdx";
import CommonOptions from "./common-options.mdx";

### cast mktx

#### NAME

cast-mktx - Build and sign a transaction.

#### SYNOPSIS

`cast mktx` \[*options*] *to* \[*sig*] \[*args...*]

#### DESCRIPTION

Build and sign a transaction, without publishing it.

The destination (*to*) can be an ENS name or an address.

<SigDescription />

#### OPTIONS

<TransactionOptions />

`--create` *code* \[*sig* *args...*]\
    Deploy a contract by specifying raw bytecode, in place of specifying a *to* address.

<WalletOptionsRaw />

<WalletOptionsKeystore />

<WalletOptionsHardware />

<RpcOptions />

<EtherscanOptions />

<CommonOptions />

#### EXAMPLES

1. Sign a transaction that sends some ether to Vitalik using your Ledger:

   ```sh
   cast mktx --ledger vitalik.eth --value 0.1ether
   ```

2. Sign a transaction that calls `deposit(address token, uint256 amount)` on a contract:

   ```sh
   cast mktx --ledger 0x... "deposit(address,uint256)" 0x... 1
   ```

3. Sign a transaction that calls a function that expects a `struct`:

   ```solidity
   contract Test {
       struct MyStruct {
           address addr;
           uint256 amount;
       }
       function myfunction(MyStruct memory t) public pure {}
   }
   ```

   Structs are encoded as tuples (see [struct encoding](/misc/struct-encoding))

   ```sh
   cast mktx 0x... "myfunction((address,uint256))" "(0x...,1)"
   ```

4. Sign a transaction with hex data in the `input` field of the transaction object:
   ```sh
   cast mktx 0x... 0x68656c6c6f20776f726c64
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast publish](/cast/reference/cast-publish.mdx), [cast send](/cast/reference/cast-send.mdx), [struct encoding](/misc/struct-encoding)


import CommonOptions from "./common-options.mdx";

### cast namehash

#### NAME

cast-namehash - Calculate the ENS namehash of a name.

#### SYNOPSIS

`cast namehash` \[*options*] *name*

#### DESCRIPTION

Calculate the ENS namehash of a name.

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Calculate the namehash of an ENS name.
   ```sh
   cast namehash vitalik.eth
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast lookup-address](/cast/reference/cast-lookup-address.mdx), [cast resolve-name](/cast/reference/cast-resolve-name.mdx)


import RpcUrlOption from "../../reference/common/rpc-url-option.mdx";
import CommonOptions from "./common-options.mdx";

### cast nonce

#### NAME

cast-nonce - Get the nonce for an account.

#### SYNOPSIS

`cast nonce` \[*options*] *who*

#### DESCRIPTION

Get the nonce of an account.

The argument *who* can be an ENS name or an address.

#### OPTIONS

##### Query Options

`-B` *block*\
`--block` *block*\
    The block height you want to query at.

    Can be a block number, or any of the tags: `earliest`, `finalized`, `safe`, `latest` or `pending`.

##### RPC Options

<RpcUrlOption />

<CommonOptions />

#### EXAMPLES

1. Get the nonce of beer.eth
   ```sh
   cast nonce beer.eth
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast balance](/cast/reference/cast-balance.mdx)


import CommonOptions from "./common-options.mdx";

### cast parse-bytes32-address

#### NAME

cast-parse-bytes32-address - Parses a checksummed address from bytes32 encoding.

#### SYNOPSIS

`cast parse-bytes32-address` \[*options*] *bytes*

#### DESCRIPTION

Parses a checksummed address from its bytes32 encoding representation.

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Parse the bytes32 encoding of the WETH9 contract address to its address representation:
   ```sh
   cast parse-bytes32-address 0x000000000000000000000000C02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2
   ```

#### SEE ALSO

[cast](/cast/reference/overview)


import CommonOptions from "./common-options.mdx";

### cast parse-bytes32-string

#### NAME

cast-parse-bytes32-string - Parses a string from bytes32 encoding.

#### SYNOPSIS

`cast parse-bytes32-string` \[*options*] *bytes*

#### DESCRIPTION

Parses a [Solidity string literal](https://docs.soliditylang.org/en/v0.8.16/types.html#string-literals-and-types) from its bytes32 encoding representation mostly by interpreting bytes as ASCII characters. This command undos the encoding in [--format-bytes32-string](/cast/reference/cast-format-bytes32-string.mdx).

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Parse bytes32 string encoding of "hello" back to the string representation:
   ```sh
   cast parse-bytes32-string "0x68656c6c6f000000000000000000000000000000000000000000000000000000"
   ```

#### SEE ALSO

[cast](/cast/reference/overview)


import CommonOptions from "./common-options.mdx";

### cast pretty-calldata

#### NAME

cast-pretty-calldata - Pretty print calldata.

#### SYNOPSIS

`cast pretty-calldata` \[*options*] *calldata*

#### DESCRIPTION

Pretty print calldata.

Tries to decode the calldata using [Openchain Signatures](https://openchain.xyz/signatures) unless `--offline` is passed.

#### OPTIONS

##### 4byte Options

`-o`\
`--offline`\
    Skip the [https://openchain.xyz/signatures](https://openchain.xyz/signatures) lookup.

<CommonOptions />

#### EXAMPLES

1. Decode calldata for a `transfer` call:
   ```sh
   cast pretty-calldata 0xa9059cbb000000000000000000000000e78388b4ce79068e89bf8aa7f218ef6b9ab0e9d00000000000000000000000000000000000000000000000000174b37380cea000
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast 4byte-calldata](/cast/reference/cast-4byte-calldata.mdx)


import RpcUrlOption from "../../reference/common/rpc-url-option.mdx";
import DisplayOptions from "../../reference/common/display-options.mdx";
import CommonOptions from "./common-options.mdx";

### cast proof

#### NAME

cast-proof - Generate a storage proof for a given storage slot.

#### SYNOPSIS

`cast proof` \[*options*] *address* \[*slots...*]

#### DESCRIPTION

Generate a storage proof for a given storage slot.

The address (*address*) can be an ENS name or an address.

The displayed output is a JSON object with the following keys:

* `accountProof`: Proof for the account itself
* `address`: The address of the account
* `balance`: The balance of the account
* `codeHash`: A hash of the account's code
* `nonce`: The nonce of the account
* `storageHash`: A hash of the account's storage
* `storageProof`: An array of storage proofs, one for each requested slot
* `storageProof.key`: The slot
* `storageProof.proof`: The proof for the slot
* `storageProof.value`: The value of the slot

#### OPTIONS

##### Query Options

`-B` *block*\
`--block` *block*\
    The block height you want to query at.

    Can be a block number, or any of the tags: `earliest`, `finalized`, `safe`, `latest` or `pending`.

##### RPC Options

<RpcUrlOption />

<DisplayOptions />

<CommonOptions />

#### EXAMPLES

1. Get the proof for storage slot 0 on the WETH contract:
   ```sh
   cast proof 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 0
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast storage](/cast/reference/cast-storage.mdx)


import RpcOptions from "../../reference/common/rpc-options.mdx";
import CommonOptions from "./common-options.mdx";

### cast publish

#### NAME

cast-publish - Publish a raw transaction to the network.

#### SYNOPSIS

`cast publish` \[*options*] *tx*

#### DESCRIPTION

Publish a raw pre-signed transaction to the network.

#### OPTIONS

##### Publish Options

`--async`\
`--cast-async`\
    Do not wait for a transaction receipt.\
    Environment: `CAST_ASYNC`

<RpcOptions />

<CommonOptions />

#### EXAMPLES

1. Publish a pre-signed transaction:

   ```sh
   cast publish --rpc-url $RPC $TX
   ```

2. Publish a pre-signed transaction with flashbots.
   ```sh
   cast publish --flashbots $TX
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast call](/cast/reference/cast-call.mdx), [cast send](/cast/reference/cast-send.mdx), [cast receipt](/cast/reference/cast-receipt.mdx), [cast mktx](/cast/reference/cast-mktx.mdx)


import RpcUrlOption from "../../reference/common/rpc-url-option.mdx";
import DisplayOptions from "../../reference/common/display-options.mdx";
import CommonOptions from "./common-options.mdx";

### cast receipt

#### NAME

cast-receipt - Get the transaction receipt for a transaction.

#### SYNOPSIS

`cast receipt` \[*options*] *tx\_hash* \[*field*]

#### DESCRIPTION

Get the transaction receipt for a transaction.

If *field* is specified, then only the given field of the receipt is displayed.

#### OPTIONS

##### Receipt Options

`--async`\
`--cast-async`\
    Do not wait for the transaction receipt if it does not exist yet.\
    Environment: `CAST_ASYNC`

`-c` *confirmations*\
`--confirmations` *confirmations*\
    Wait a number of confirmations before exiting. Default: `1`.

##### RPC Options

<RpcUrlOption />

<DisplayOptions />

<CommonOptions />

#### EXAMPLES

1. Get a transaction receipt:
   ```sh
   cast receipt $TX_HASH
   ```


import RpcUrlOption from "../../reference/common/rpc-url-option.mdx";
import CommonOptions from "./common-options.mdx";

### cast resolve-name

#### NAME

cast-resolve-name - Perform an ENS lookup.

#### SYNOPSIS

`cast resolve-name` \[*options*] *who*

#### DESCRIPTION

Perform an ENS lookup.

If `--verify` is passed, then a reverse lookup is performed after the normal lookup to verify that the name is correct.

#### OPTIONS

##### Lookup Options

`-v`\
`--verify`\
    Perform a reverse lookup to verify that the name is correct.

##### RPC Options

<RpcUrlOption />

<CommonOptions />

#### EXAMPLES

1. Get the address for an ENS name.

   ```sh
   cast resolve-name vitalik.eth
   ```

2. Perform both a normal and a reverse lookup:
   ```sh
   cast resolve-name --verify vitalik.eth
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast lookup-address](/cast/reference/cast-lookup-address.mdx)


### cast rpc

#### NAME

cast-rpc - Perform a raw JSON-RPC request

#### SYNOPSIS

`cast rpc` \[*options*] *METHOD* \[*PARAMS...*]

#### DESCRIPTION

Perform a simple JSON-RPC POST request for the given method and with the params

#### OPTIONS

##### Query Options

`-r` *url*\
`--rpc-url` *url*\
    The URL of the provider

`-w`\
`--raw`\
    Pass the "params" as is
     If --raw is passed the first PARAM will be taken as the value of "params". If no params are given, stdin will be used. For example:
     rpc eth\_getBlockByNumber '\["0x123", false]' --raw
     => `{"method": "eth_getBlockByNumber", "params": ["0x123", false] ... }`

#### EXAMPLES

1. Get latest `eth_getBlockByNumber` on localhost:

   ```sh
   cast rpc eth_getBlockByNumber "latest" "false"
   ```

2. Get `eth_getTransactionByHash` on localhost:

   ```sh
   cast rpc eth_getTransactionByHash 0x2642e960d3150244e298d52b5b0f024782253e6d0b2c9a01dd4858f7b4665a3f
   ```

3. Get latest `eth_getBlockByNumber` on etherum mainnet:

   ```sh
   cast rpc --rpc-url https://mainnet.infura.io/v3/ eth_getBlockByNumber "latest" "false"
   ```


import RpcUrlOption from "../../reference/common/rpc-url-option.mdx";
import CommonOptions from "./common-options.mdx";

### cast run

#### NAME

cast-run - Runs a published transaction in a local environment and prints the trace.

#### SYNOPSIS

`cast run` \[*options*] `--rpc-url` *url* *tx\_hash*

#### DESCRIPTION

Runs a published transaction in a local environment and prints the trace.

By default, all transactions in the block prior to the transaction you want to replay are also replayed.
If you want a quicker result, you can use `--quick`, however, results may differ from the live execution.

You can also open the transaction in a debugger by passing `--debug`.

#### OPTIONS

##### Run Options

`--label` *label*\
    Labels an address in the trace.\
    The format is `<address>:<label>`. Can be passed multiple times.

`-q`\
`--quick`\
    Executes the transaction only with the state from the previous block.\
    May result in different results than the live execution!

`-v`\
`--verbose`\
    Addresses are fully displayed instead of being truncated.

`-d`\
`--debug`\
    Open the script in the [debugger][debugger].

##### RPC Options

<RpcUrlOption />

<CommonOptions />

#### EXAMPLES

1. Replay a transaction (a simple transfer):

   ```sh
   cast run 0xd15e0237413d7b824b784e1bbc3926e52f4726e5e5af30418803b8b327b4f8ca
   ```

2. Replay a transaction, applied on top of the state of the previous block:

   ```sh
   cast run --quick \
     0xd15e0237413d7b824b784e1bbc3926e52f4726e5e5af30418803b8b327b4f8ca
   ```

3. Replay a transaction with address labels:

   ```sh
   cast run \
     --label 0xc564ee9f21ed8a2d8e7e76c085740d5e4c5fafbe:sender \
     --label 0x40950267d12e979ad42974be5ac9a7e452f9505e:recipient \
     --label 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2:weth \
     0xd15e0237413d7b824b784e1bbc3926e52f4726e5e5af30418803b8b327b4f8ca
   ```

4. Replay a transaction in the debugger:
   ```sh
   cast run --debug \
     0xd15e0237413d7b824b784e1bbc3926e52f4726e5e5af30418803b8b327b4f8ca
   ```

#### SEE ALSO

[cast](/cast/reference/overview)

[debugger]: /forge/debugger.mdx


import CommonOptions from "./common-options.mdx";

### cast selectors

#### NAME

cast-selectors - Extracts function selectors and arguments from bytecode

#### SYNOPSIS

`cast selectors` \[*options*] *bytecode*

#### DESCRIPTION

Extracts function selectors and arguments from bytecode using the [EVMole library](https://github.com/cdump/evmole)

#### OPTIONS

`-r`\
`--resolve`\
    Resolve the function signatures for the extracted selectors using [https://openchain.xyz](https://openchain.xyz)

<CommonOptions />

#### EXAMPLES

1. Get WETH's contract function signatures & arguments:
   ```sh
   cast selectors $(cast code 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2)
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast 4byte](/cast/reference/cast-4byte.mdx)


import SigDescription from "./sig-description.mdx";
import TransactionOptions from "../../reference/common/transaction-options.mdx";
import WalletOptions from "../../reference/common/wallet-options.mdx";
import RpcOptions from "../../reference/common/rpc-options.mdx";
import EtherscanOptions from "../../reference/common/etherscan-options.mdx";
import DisplayOptions from "../../reference/common/display-options.mdx";
import CommonOptions from "./common-options.mdx";

### cast send

#### NAME

cast-send - Sign and publish a transaction.

#### SYNOPSIS

`cast send` \[*options*] *to* \[*sig*] \[*args...*]

#### DESCRIPTION

Sign and publish a transaction.

The destination (*to*) can be an ENS name or an address.

<SigDescription />

#### OPTIONS

<TransactionOptions />

`--resend`\
    Reuse the latest nonce of the sending account.

`--create` *code* \[*sig* *args...*]\
    Deploy a contract by specifying raw bytecode, in place of specifying a *to* address.

`--auth` *auth*\
    EIP-7702 authorization list.

    Can be either a hex-encoded signed authorization or an address.

`--access-list` *access\_list*\
    EIP-2930 access list.

    Accepts either a JSON-encoded access list or an empty value to create the access list via an RPC call to `eth_createAccessList`. To retrieve only the access list portion, use the `cast access-list` command.

##### Receipt Options

`--async`\
`--cast-async`\
    Do not wait for the transaction receipt if it does not exist yet.\
    Environment: `CAST_ASYNC`

`-c` *confirmations*\
`--confirmations` *confirmations*\
    Wait a number of confirmations before exiting. Default: `1`.

<WalletOptions />

`--unlocked`\
    Send via `eth_sendTransaction` using the `--from` argument or `$ETH_FROM` as sender.

<RpcOptions />

<EtherscanOptions />

<DisplayOptions />

<CommonOptions />

#### EXAMPLES

1. Send some ether to Vitalik using your Ledger:

   ```sh
   cast send --ledger vitalik.eth --value 0.1ether
   ```

2. Call `deposit(address token, uint256 amount)` on a contract:

   ```sh
   cast send --ledger 0x... "deposit(address,uint256)" 0x... 1
   ```

3. Call a function that expects a `struct`:

   ```solidity
   contract Test {
       struct MyStruct {
           address addr;
           uint256 amount;
       }
       function myfunction(MyStruct memory t) public pure {}
   }
   ```

   Structs are encoded as tuples (see [struct encoding](/misc/struct-encoding))

   ```sh
   cast send 0x... "myfunction((address,uint256))" "(0x...,1)"
   ```

4. Send a transaction with hex data in the `input` field of the transaction object:

   ```sh
   cast send 0x... 0x68656c6c6f20776f726c64
   ```

5. Sign an EIP-7702 authorization and attach it to a transaction from a different sender:

   ```sh
   cast send $(cast az) --private-key <sender-pk> --auth $(cast wallet sign-auth <address> --private-key <delegator-pk>)
   ```

6. Send an EIP-7702 transaction delegating the sender to `<address>`:
   ```sh
   cast send $(cast az) --auth <address>
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast call](/cast/reference/cast-call.mdx), [cast publish](/cast/reference/cast-publish.mdx), [cast receipt](/cast/reference/cast-receipt.mdx), [cast mktx](/cast/reference/cast-mktx.mdx), [struct encoding](/misc/struct-encoding)


import BaseOptions from "../../reference/common/base-options.mdx";
import CommonOptions from "./common-options.mdx";

### cast shl

#### NAME

cast-shl - Perform a left shifting operation.

#### SYNOPSIS

`cast shl` \[*options*] *value* *shift*

#### DESCRIPTION

Perform a left shifting operation.

#### OPTIONS

<BaseOptions />

<CommonOptions />

#### EXAMPLES

1. Perform a 3 position left bit shift of the number 61
   ```sh
   cast shl --base-in 10 61 3
   ```

> Note: The --base-in parameter is not enforced but will be needed if the input is ambiguous.

#### SEE ALSO

[cast](/cast/reference/overview), [cast shr](/cast/reference/cast-shr.mdx)


import BaseOptions from "../../reference/common/base-options.mdx";
import CommonOptions from "./common-options.mdx";

### cast shr

#### NAME

cast-shr - Perform a right shifting operation.

#### SYNOPSIS

`cast shr` \[*options*] *value* *shift*

#### DESCRIPTION

Perform a right shifting operation.

#### OPTIONS

<BaseOptions />

<CommonOptions />

#### EXAMPLES

1. Perform a single right bit shift of 0x12
   ```sh
   cast shr --base-in 16 0x12 1
   ```

> Note: The --base-in parameter is not enforced but will be needed if the input is ambiguous.

#### SEE ALSO

[cast](/cast/reference/overview), [cast shl](/cast/reference/cast-shl.mdx)


import CommonOptions from "./common-options.mdx";

### cast sig-event

#### NAME

cast-sig-event - Generate event signatures from event string.

#### SYNOPSIS

`cast sig-event` \[*options*] *event\_string*

#### DESCRIPTION

Generate event signatures from event string.

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Get the hash for the log `Transfer(address indexed from, address indexed to, uint256 amount)`:
   ```sh
   cast sig-event "Transfer(address indexed from, address indexed to, uint256 amount)"
   ```

#### SEE ALSO

[cast](/cast/reference/overview)


import CommonOptions from "./common-options.mdx";

### cast sig

#### NAME

cast-sig - Get the selector for a function.

#### SYNOPSIS

`cast sig` \[*options*] *sig*

#### DESCRIPTION

Get the selector for a function.

The signature (*sig*) is a fragment in the form `<function name>(<types...>)`.

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Get the selector for the function `transfer(address,uint256)`:

   ```sh
   cast sig "transfer(address,uint256)"
   ```

2. Get the selector for a function that expects a `struct`:

   ```solidity
   contract Test {
       struct MyStruct {
           address addr;
           uint256 amount;
       }
       function myfunction(MyStruct memory t) public pure {}
   }
   ```

   Structs are encoded as tuples (see [struct encoding](/misc/struct-encoding)).

   ```sh
   cast sig "myfunction((address,uint256))"
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [struct encoding](/misc/struct-encoding)


import RpcUrlOption from "../../reference/common/rpc-url-option.mdx";
import CommonOptions from "./common-options.mdx";

### cast storage

#### NAME

cast-storage - Get the raw value of a contract's storage slot or its full storage layout.

#### SYNOPSIS

`cast storage` \[*options*] *address* *slot*

#### DESCRIPTION

Get the raw value of a contract's storage slot. (Slot locations greater than 18446744073709551615 (u64::MAX) should be given as hex. Use `cast index` to compute mapping slots.)

Omit the slot number to get the full storage layout (requires contract to be verified on Etherscan with a Solidity version > 0.6.5 or you must be in a Forge project with a local contract matching the deployed bytecode).

The address (*address*) can be an ENS name or an address.

#### OPTIONS

##### Query Options

`-B` *block*
`--block` *block*
    The block height you want to query at.

    Can be a block number, or any of the tags: `earliest`, `finalized`, `safe`, `latest` or `pending`.

##### RPC Options

<RpcUrlOption />

<CommonOptions />

#### EXAMPLES

1. Get the value of slot 0 on the WETH contract.

   ```sh
   cast storage 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 0
   ```

2. Get the full storage layout of the Milady contract.
   ```sh
   cast storage 0x5Af0D9827E0c53E4799BB226655A1de152A425a5
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast proof](/cast/reference/cast-proof.mdx)


import CommonOptions from "./common-options.mdx";

### cast to-ascii

#### NAME

cast-to-ascii - Convert hex data to an ASCII string.

#### SYNOPSIS

`cast to-ascii` \[*options*] *text*

#### DESCRIPTION

Convert hex data to an ASCII string.

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Convert hex data to an ASCII string:
   ```sh
   cast to-ascii "0x68656c6c6f"
   ```

#### SEE ALSO

[cast](/cast/reference/overview)


import CommonOptions from "./common-options.mdx";

### cast to-base

#### NAME

cast-to-base - Convert a number of one base to another.

#### SYNOPSIS

`cast to-base` \[*options*] *value* *base*

#### DESCRIPTION

Convert a number of one base to another.

#### OPTIONS

##### Base Options

`--base-in` *base*
    The base of the input number. Available options:

    10, d, dec, decimal

    16, h, hex, hexadecimal

<CommonOptions />

#### EXAMPLES

1. Convert the decimal number 64 to hexadecimal

   ```sh
   cast to-base 64 hex
   ```

2. Convert the hexadecimal number 100 to binary
   ```sh
   cast to-base 0x100 2
   ```

> Note: The --base-in parameter is not enforced but will be needed if the input is ambiguous.

#### SEE ALSO

[cast](/cast/reference/overview)


import CommonOptions from "./common-options.mdx";

### cast to-bytes32

#### NAME

cast-to-bytes32 - Right-pads hex data to 32 bytes.

#### SYNOPSIS

`cast to-bytes32` \[*options*] *bytes*

#### DESCRIPTION

Right-pads hex data to 32 bytes.

Note that this command is for padding a byte string only. If you're looking to format a [Solidity string literal](https://docs.soliditylang.org/en/v0.8.16/types.html#string-literals-and-types) into `bytes32`, use [format-bytes32-string](/cast/reference/cast-format-bytes32-string.mdx) instead.

#### OPTIONS

<CommonOptions />

#### SEE ALSO

[cast](/cast/reference/overview)


import CommonOptions from "./common-options.mdx";

### cast to-check-sum-address

#### NAME

cast-to-check-sum-address - Convert an address to a checksummed format ([EIP-55][eip55]).

#### SYNOPSIS

`cast to-check-sum-address` *address*

#### DESCRIPTION

Convert an address to a checksummed format ([EIP-55][eip55]).

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Convert an address to its checksummed format:
   ```sh
   cast to-check-sum-address 0xDf99A0839818B3f120EBAC9B73f82B617Dc6A555
   ```

#### SEE ALSO

[cast](/cast/reference/overview)

[eip55]: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md


import CommonOptions from "./common-options.mdx";

### cast to-dec

#### NAME

cast-to-dec - Converts a number of one base to decimal

#### SYNOPSIS

`cast to-dec` \[*options*] *value*

#### DESCRIPTION

Converts a number of one base to decimal

#### OPTIONS

`--base-in` *base\_in*
    The input base.

<CommonOptions />

#### EXAMPLES

1. Convert ff in hexadecimal to decimal
   ```sh
   cast to-dec ff
   ```

#### SEE ALSO

[cast](/cast/reference/overview)


import CommonOptions from "./common-options.mdx";

### cast to-fixed-point

#### NAME

cast-to-fixed-point - Convert an integer into a fixed point number.

#### SYNOPSIS

`cast to-fixed-point` \[*options*] *decimals* *value*

#### DESCRIPTION

Convert an integer into a fixed point number.

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Convert 250 to a fixed point number with 2 decimals:
   ```sh
   cast to-fixed-point 2 250
   ```

#### SEE ALSO

[cast](/cast/reference/overview)


import CommonOptions from "./common-options.mdx";

### cast to-hex

#### NAME

cast-to-hex - Converts a number of one base to another

#### SYNOPSIS

`cast to-hex` \[*options*] *value*

#### DESCRIPTION

Converts a number of one base to another

#### OPTIONS

`--base-in` *base\_in*
    The input base.

<CommonOptions />

#### SEE ALSO

[cast](/cast/reference/overview)


import CommonOptions from "./common-options.mdx";

### cast to-hexdata

#### NAME

cast-to-hexdata - Normalize the input to lowercase, 0x-prefixed hex.

#### SYNOPSIS

`cast to-hexdata` \[*options*] *input*

#### DESCRIPTION

Normalize the input to lowercase, 0x-prefixed hex.

The input data (*input*) can either be:

* Mixed case hex with or without the 0x prefix.
* 0x prefixed hex that should be concatenated, separated by `:`.
* An absolute path to a file containing hex.
* A `@tag`, where the tag is defined in an environment variable.

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Add 0x prefix:

   ```sh
   cast to-hexdata deadbeef
   ```

2. Concatenate hex values:

   ```sh
   cast to-hexdata "deadbeef:0xbeef"
   ```

3. Normalize hex value in `MY_VAR`:
   ```sh
   cast to-hexdata "@MY_VAR"
   ```

#### SEE ALSO

[cast](/cast/reference/overview)


import CommonOptions from "./common-options.mdx";

### cast to-int256

#### NAME

cast-to-int256 - Convert a number to a hex-encoded int256.

#### SYNOPSIS

`cast to-int256` \[*options*] *value*

#### DESCRIPTION

Convert a number to a hex-encoded int256.

#### OPTIONS

<CommonOptions />

#### SEE ALSO

[cast](/cast/reference/overview)


import CommonOptions from "./common-options.mdx";

### cast to-rlp

#### NAME

cast-to-rlp - Encodes hex data to RLP.

#### SYNOPSIS

`cast to-rlp` *array*

#### DESCRIPTION

RLP encodes a hex string or a JSON array of hex strings.

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Encoding RLP data:

   ```sh
   cast to-rlp '["0xaa","0xbb","cc"]'

   cast to-rlp f0a9
   ```


import CommonOptions from "./common-options.mdx";

### cast to-uint256

#### NAME

cast-to-uint256 - Convert a number to a hex-encoded uint256.

#### SYNOPSIS

`cast to-uint256` \[*options*] *value*

#### DESCRIPTION

Convert a number to a hex-encoded uint256.

#### OPTIONS

<CommonOptions />

#### SEE ALSO

[cast](/cast/reference/overview)


import CommonOptions from "./common-options.mdx";

### cast to-unit

#### NAME

cast-to-unit - Convert an eth amount to another unit.

#### SYNOPSIS

`cast to-unit` \[*options*] *value* \[*unit*]

#### DESCRIPTION

Convert an eth amount to another unit.

The value to convert (*value*) can be a quantity of eth (in wei), or a number with a unit attached to it.

Valid units are:

* `ether`
* `gwei`
* `wei`

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Convert 1000 wei to gwei

   ```sh
   cast to-unit 1000 gwei
   ```

2. Convert 1 eth to gwei
   ```sh
   cast to-unit 1ether gwei
   ```

#### SEE ALSO

[cast](/cast/reference/overview)


import CommonOptions from "./common-options.mdx";

### cast to-wei

#### NAME

cast-to-wei - Convert an eth amount to wei.

#### SYNOPSIS

`cast to-wei` \[*options*] *value* \[*unit*]

#### DESCRIPTION

Convert an eth amount to wei.

Consider using [`cast to-unit`](/cast/reference/cast-to-unit.mdx).

#### OPTIONS

<CommonOptions />

#### SEE ALSO

[cast](/cast/reference/overview), [cast calldata](/cast/reference/cast-to-unit.mdx)


import RpcUrlOption from "../../reference/common/rpc-url-option.mdx";
import DisplayOptions from "../../reference/common/display-options.mdx";
import CommonOptions from "./common-options.mdx";

### cast tx

#### NAME

cast-tx - Get information about a transaction.

#### SYNOPSIS

`cast tx` \[*options*] *tx\_hash* \[*field*]

#### DESCRIPTION

Get information about a transaction.

If *field* is specified, then only the given field of the transaction is displayed.

#### OPTIONS

##### RPC Options

<RpcUrlOption />

<DisplayOptions />

<CommonOptions />

#### EXAMPLES

1. Get information about a transaction:

   ```sh
   cast tx $TX_HASH
   ```

2. Get the sender of a transaction:
   ```sh
   cast tx $TX_HASH from
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast receipt](/cast/reference/cast-receipt.mdx)


import CommonOptions from "./common-options.mdx";

### cast upload-signature

#### NAME

cast-upload-signature

#### SYNOPSIS

`cast upload-signature` \[*signatures...*]

#### DESCRIPTION

Upload the given signatures to [https://openchain.xyz/signatures](https://openchain.xyz/signatures).

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Upload signatures
   ```sh
   cast upload-signature 'function approve(address,uint256)' \
   'transfer(uint256)' 'event Transfer(uint256,address)'
   ```


import CommonOptions from "./common-options.mdx";
import WalletOptionsRaw from "../../reference/common/wallet-options-raw.mdx";
import WalletOptionsKeystore from "../../reference/common/wallet-options-keystore.mdx";
import WalletOptionsHardware from "../../reference/common/wallet-options-hardware.mdx";

### cast wallet address

#### NAME

cast-wallet-address - Convert a private key to an address.

#### SYNOPSIS

`cast wallet address` \[*options*]

#### DESCRIPTION

Convert a private key to an address.

#### OPTIONS

##### Keystore Options

<WalletOptionsRaw />

<WalletOptionsKeystore />

<WalletOptionsHardware />

<CommonOptions />

#### EXAMPLES

1. Get the address of the keypair in `keystore.json`:
   ```sh
   cast wallet address --keystore keystore.json
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast wallet](/cast/reference/cast-wallet.mdx)


import WalletOptionsRaw from "../../reference/common/wallet-options-raw.mdx";
import CommonOptions from "./common-options.mdx";

### cast wallet import

#### NAME

cast-wallet-import - Import a private key into an encrypted keystore

#### SYNOPSIS

`cast wallet import` \[*options*] *account\_name*

#### DESCRIPTION

Import a private key into an encrypted keystore.

If no *keystore-dir* is specified, it will be saved in the default `~/.foundry/keystores`, so it can be accessed through the `--account` option in methods like `forge script`, `cast send` or any other that requires a private key.

#### OPTIONS

##### Directory Options

`-k`\
`--keystore-dir`

    The path to store the encrypted keystore.\
    Defaults to `~/.foundry/keystores`.

<WalletOptionsRaw />

<CommonOptions />

#### EXAMPLES

1. Create a keystore from a private key:

   ```sh
   cast wallet import BOB --interactive
   ```

2. Create a keystore from a mnemonic:

   ```sh
   cast wallet import ALICE --mnemonic "test test test test test test test test test test test test"
   ```

3. Create a keystore from a mnemonic with a specific mnemonic index:
   ```sh
   cast wallet import ALICE --mnemonic "test test test test test test test test test test test test" --mnemonic-index 1
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast wallet](/cast/reference/cast-wallet.mdx)


import CommonOptions from "./common-options.mdx";

### cast wallet list

#### NAME

cast-wallet-list - List all the accounts in the keystore default directory.

#### SYNOPSIS

`cast wallet list`

#### DESCRIPTION

List all the accounts in the keystore default directory `~/.foundry/keystores`.

#### OPTIONS

<CommonOptions />

#### SEE ALSO

[cast](/cast/reference/overview), [cast wallet](/cast/reference/cast-wallet.mdx)


### cast new-mnemonic

#### NAME

cast-wallet-new-mnemonic - Creates a new mnemonic with a set number of words.

#### SYNOPSIS

`cast wallet new-mnemonic` \[*options*]

#### DESCRIPTION

Generates a random BIP39 mnemonic phrase.

#### OPTIONS

##### New Mnemonic Options

`-w`
`--words`
    The amount of words for the mnemonic. Defaults to 12.

`-a`
`--accounts`
    The number of accounts to display, which are derived from the mnemonic. Defaults to 1.

#### EXAMPLES

1. Create a new mnemonic with 24 words.
   ```sh
   cast wallet new-mnemonic --words 24
   ```

```text
Successfully generated a new mnemonic.
Phrase:
decrease where seek crop segment want icon medal sleep social blast provide virus grief pledge soccer stereo trick dry dirt rotate explain into nominee

Accounts:
- Account 0:
Address:     0x34644D4eC92ae1832877cE22AD9bA4b00c7397c8
Private key: 0x832a3784d0a130c8a0ce3cc6dfc336a41ca7801a117eac7a3bfaace52e4d239c
```

#### SEE ALSO

[cast](/cast/reference/overview)


import CommonOptions from "./common-options.mdx";

### cast wallet new

#### NAME

cast-wallet-new - Create a new random keypair.

#### SYNOPSIS

`cast wallet new` \[*options*] \[*path*]

#### DESCRIPTION

Create a new random keypair.

If *path* is specified, then the new keypair will be written to a JSON keystore encrypted with a password.
(*path* should be an existing directory.)

#### OPTIONS

##### Keystore Options

`-p`\
`--password`\
    Triggers a hidden password prompt for the JSON keystore.\
    **Deprecated: prompting for a hidden password is now the default.**

`--unsafe-password` *password*\
    Password for the JSON keystore in cleartext.

    This is **unsafe** to use and we recommend using `--password` instead.\
    Environment: `CAST_PASSWORD`

<CommonOptions />

#### EXAMPLES

1. Create a new keypair without saving it to a keystore:

   ```sh
   cast wallet new
   ```

2. Create a new keypair and save it in the `keystore` directory:
   ```sh
   cast wallet new keystore
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast wallet](/cast/reference/cast-wallet.mdx)


import WalletOptionsRaw from "../../reference/common/wallet-options-raw.mdx";
import WalletOptionsKeystore from "../../reference/common/wallet-options-keystore.mdx";
import WalletOptionsHardware from "../../reference/common/wallet-options-hardware.mdx";
import CommonOptions from "./common-options.mdx";

### cast wallet sign-auth

#### NAME

cast-wallet-sign-auth - Sign an EIP-7702 authorization.

#### SYNOPSIS

`cast wallet sign-auth` *address*

#### DESCRIPTION

Sign an [EIP-7702](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-7702.md) authorization for an address.

Note that `sign-auth` uses the current nonce as it is not aware of whether you are going to broadcast the authorization from the same or a different sender.

If you are sending the transaction from the same address you will need to either pass the next nonce using the `--nonce` flag or alternatively use `cast send <to> --auth <address>` to sign and send directly.

#### OPTIONS

<WalletOptionsRaw />

<WalletOptionsKeystore />

<WalletOptionsHardware />

<CommonOptions />

#### EXAMPLES

1. Sign an EIP-7702 authorization using a keystore:

   ```sh
   cast wallet sign-auth 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 --keystore keystore.json --interactive
   ```

2. Sign an EIP-7702 authorization using a raw private key:
   ```sh
   cast wallet sign-auth 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 --private-key $PRIV_KEY
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast wallet](/cast/reference/cast-wallet.mdx)


import WalletOptionsRaw from "../../reference/common/wallet-options-raw.mdx";
import WalletOptionsKeystore from "../../reference/common/wallet-options-keystore.mdx";
import WalletOptionsHardware from "../../reference/common/wallet-options-hardware.mdx";
import CommonOptions from "./common-options.mdx";

### cast wallet sign

#### NAME

cast-wallet-sign - Sign a message.

#### SYNOPSIS

`cast wallet sign` \[*options*] *message*

#### DESCRIPTION

Sign a message suitable for [`eth_sign`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sign). Note that signing prefixes the message with the Ethereum Signed Message header [in accordance with EIP-191](https://eips.ethereum.org/EIPS/eip-191) unless `--no-hash` is provided.

#### OPTIONS

<WalletOptionsRaw />

<WalletOptionsKeystore />

<WalletOptionsHardware />

<CommonOptions />

#### EXAMPLES

1. Sign a message using a keystore:

   ```sh
   cast wallet sign --keystore keystore.json --interactive "hello"
   ```

2. Sign a message using a raw private key:
   ```sh
   cast wallet sign --private-key $PRIV_KEY "hello"
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast wallet](/cast/reference/cast-wallet.mdx)


import CommonOptions from "./common-options.mdx";

### cast wallet vanity

#### NAME

cast-wallet-vanity - Generate a vanity address.

#### SYNOPSIS

`cast wallet vanity` \[*options*]

#### DESCRIPTION

Generate a vanity address.

If `--nonce` is specified, then the command will try to generate a vanity contract address. The `--save-path` option allows specifying a custom file path to save the generated wallet details.

#### OPTIONS

##### Keystore Options

`--starts-with` *hex*\
    Prefix for the vanity address.

`--ends-with` *hex*\
    Suffix for the vanity address.

`--nonce` *nonce*\
    Generate a vanity contract address created by the generated keypair with the specified nonce.

`--save-path` *path*\
    Path to save the generated vanity wallet. If provided, the wallet details will be saved in a JSON file at this location.

<CommonOptions />

#### EXAMPLES

1. Create a new keypair that starts with `dead`:

   ```sh
   cast wallet vanity --starts-with dead
   ```

2. Create a new keypair ends with `beef`:

   ```sh
   cast wallet vanity --ends-with beef
   ```

3. Create a new keypair that starts with `dead` and save the details to a specific path:
   ```sh
   cast wallet vanity --starts-with dead --save-path /path/to/save
   ```

#### SEE ALSO

[cast](/cast/reference/overview), [cast wallet](/cast/reference/cast-wallet.mdx)


import CommonOptions from "./common-options.mdx";

### cast wallet verify

#### NAME

cast-wallet-verify - Verify the signature of a message.

#### SYNOPSIS

`cast wallet verify` \[*options*] `--address` *address* *message* *signature*

#### DESCRIPTION

Verify the signature of a message.

#### OPTIONS

##### Signature Options

`-a` *address*\
`--address` *address*\
    The address of the message signer.

<CommonOptions />

#### SEE ALSO

[cast](/cast/reference/overview), [cast wallet](/cast/reference/cast-wallet.mdx)


import CommonOptions from "./common-options.mdx";

### cast wallet

#### NAME

cast-wallet - Wallet management utilities.

#### SYNOPSIS

`cast wallet` \[*options*] *command* \[*args*]\
`cast wallet` \[*options*] `--version`\
`cast wallet` \[*options*] `--help`

#### DESCRIPTION

This program is a set of tools to use, create and manage wallets.

#### COMMANDS

[cast wallet new](/cast/reference/cast-wallet-new.mdx)\
    Create a new random keypair.

[cast wallet address](/cast/reference/cast-wallet-address.mdx)\
    Convert a private key to an address.

[cast wallet sign](/cast/reference/cast-wallet-sign.mdx)\
    Sign a message.

[cast wallet vanity](/cast/reference/cast-wallet-vanity.mdx)\
    Generate a vanity address.

[cast wallet verify](/cast/reference/cast-wallet-verify.mdx)\
    Verify the signature of a message.

[cast wallet import](/cast/reference/cast-wallet-import.mdx)\
    Import a private key into an encrypted keystore.

[cast wallet list](/cast/reference/cast-wallet-list.mdx)\
    List all the accounts in the keystore default directory.

#### OPTIONS

##### Special Options

`-V`\
`--version`\
    Print version info and exit.

<CommonOptions />


### Chain Commands

* [cast chain-id](/cast/reference/cast-chain-id.mdx)
* [cast chain](/cast/reference/cast-chain.mdx)
* [cast client](/cast/reference/cast-client.mdx)


##### Common Options

`-h`\
`--help`\
    Prints help information.


### Conversion Commands

* [cast format-bytes32-string](/cast/reference/cast-format-bytes32-string.mdx)
* [cast from-bin](/cast/reference/cast-from-bin.mdx)
* [cast from-fixed-point](/cast/reference/cast-from-fixed-point.mdx)
* [cast from-rlp](/cast/reference/cast-from-rlp.mdx)
* [cast from-utf8](/cast/reference/cast-from-utf8.mdx)
* [cast from-wei](/cast/reference/cast-from-wei.mdx)
* [cast parse-bytes32-address](/cast/reference/cast-parse-bytes32-address.mdx)
* [cast parse-bytes32-string](/cast/reference/cast-parse-bytes32-string.mdx)
* [cast to-ascii](/cast/reference/cast-to-ascii.mdx)
* [cast to-base](/cast/reference/cast-to-base.mdx)
* [cast to-bytes32](/cast/reference/cast-to-bytes32.mdx)
* [cast to-dec](/cast/reference/cast-to-dec.mdx)
* [cast to-fixed-point](/cast/reference/cast-to-fixed-point.mdx)
* [cast to-hex](/cast/reference/cast-to-hex.mdx)
* [cast to-hexdata](/cast/reference/cast-to-hexdata.mdx)
* [cast to-int256](/cast/reference/cast-to-int256.mdx)
* [cast to-rlp](/cast/reference/cast-to-rlp.mdx)
* [cast to-uint256](/cast/reference/cast-to-uint256.mdx)
* [cast to-unit](/cast/reference/cast-to-unit.mdx)
* [cast to-wei](/cast/reference/cast-to-wei.mdx)
* [cast shl](/cast/reference/cast-shl.mdx)
* [cast shr](/cast/reference/cast-shr.mdx)


### ENS Commands

* [cast lookup-address](/cast/reference/cast-lookup-address.mdx)
* [cast resolve-name](/cast/reference/cast-resolve-name.mdx)
* [cast namehash](/cast/reference/cast-namehash.mdx)


### Etherscan Commands

* [cast etherscan-source](/cast/reference/cast-etherscan-source.mdx)


### General Commands

* [cast](/cast/reference/overview)
* [cast help](/cast/reference/cast-help.mdx)
* [cast completions](/cast/reference/cast-completions.mdx)


import CommonOptions from "./common-options.mdx";

### cast

#### NAME

cast - Perform Ethereum RPC calls from the comfort of your command line.

#### SYNOPSIS

`cast` \[*options*] *command* \[*args*]
`cast` \[*options*] `--version`
`cast` \[*options*] `--help`

#### DESCRIPTION

This program is a set of tools to interact with Ethereum and perform conversions.

#### COMMANDS

##### General Commands

[cast help](/cast/reference/cast-help.mdx)
    Display help information about Cast.

[cast completions](/cast/reference/cast-completions.mdx)
    Generate shell autocompletions for Cast.

##### Chain Commands

[cast chain-id](/cast/reference/cast-chain-id.mdx)
    Get the Ethereum chain ID.

[cast chain](/cast/reference/cast-chain.mdx)
    Get the symbolic name of the current chain.

[cast client](/cast/reference/cast-client.mdx)
    Get the current client version.

##### Transaction Commands

[cast publish](/cast/reference/cast-publish.mdx)
    Publish a raw transaction to the network.

[cast receipt](/cast/reference/cast-receipt.mdx)
    Get the transaction receipt for a transaction.

[cast send](/cast/reference/cast-send.mdx)
    Sign and publish a transaction.

[cast call](/cast/reference/cast-call.mdx)
    Perform a call on an account without publishing a transaction.

[cast rpc](/cast/reference/cast-rpc.mdx)
     Perform a raw JSON-RPC request \[aliases: rp]

[cast tx](/cast/reference/cast-tx.mdx)
    Get information about a transaction.

[cast run](/cast/reference/cast-run.mdx)
    Runs a published transaction in a local environment and prints the trace.

[cast estimate](/cast/reference/cast-estimate.mdx)
    Estimate the gas cost of a transaction.

[cast access-list](/cast/reference/cast-access-list.mdx)
    Create an access list for a transaction.

[cast logs](/cast/reference/cast-logs.mdx)
    Get logs by signature or topic

##### Block Commands

[cast find-block](/cast/reference/cast-find-block.mdx)
    Get the block number closest to the provided timestamp.

[cast gas-price](/cast/reference/cast-gas-price.mdx)
    Get the current gas price.

[cast block-number](/cast/reference/cast-block-number.mdx)
    Get the latest block number.

[cast basefee](/cast/reference/cast-basefee.mdx)
    Get the basefee of a block.

[cast block](/cast/reference/cast-block.mdx)
    Get information about a block.

[cast age](/cast/reference/cast-age.mdx)
    Get the timestamp of a block.

##### Account Commands

[cast balance](/cast/reference/cast-balance.mdx)
    Get the balance of an account in wei.

[cast storage](/cast/reference/cast-storage.mdx)
    Get the raw value of a contract's storage slot.

[cast proof](/cast/reference/cast-proof.mdx)
    Generate a storage proof for a given storage slot.

[cast nonce](/cast/reference/cast-nonce.mdx)
    Get the nonce for an account.

[cast code](/cast/reference/cast-code.mdx)
    Get the bytecode of a contract.

[cast codesize](/cast/reference/cast-codesize.mdx)
    Get the runtime bytecode size of a contract.

##### ENS Commands

[cast lookup-address](/cast/reference/cast-lookup-address.mdx)
    Perform an ENS reverse lookup.

[cast resolve-name](/cast/reference/cast-resolve-name.mdx)
    Perform an ENS lookup.

[cast namehash](/cast/reference/cast-namehash.mdx)
    Calculate the ENS namehash of a name.

##### Etherscan Commands

[cast etherscan-source](/cast/reference/cast-etherscan-source.mdx)
    Get the source code of a contract from Etherscan.

##### ABI Commands

[cast abi-encode](/cast/reference/cast-abi-encode.mdx)
    ABI encode the given function arguments, excluding the selector.

[cast 4byte](/cast/reference/cast-4byte.mdx)
    Get the function signatures for the given selector from [Openchain Signatures](https://openchain.xyz/signatures).

[cast 4byte-calldata](/cast/reference/cast-4byte-calldata.mdx)
    Decode ABI-encoded calldata using [Openchain Signatures](https://openchain.xyz/signatures).

[cast 4byte-event](/cast/reference/cast-4byte-event.mdx)
    Get the event signature for a given topic 0 from [Openchain Signatures](https://openchain.xyz/signatures).

[cast calldata](/cast/reference/cast-calldata.mdx)
    ABI-encode a function with arguments.

[cast decode-abi](/cast/reference/cast-decode-abi.mdx)
    Decode ABI-encoded input or output data.

[cast decode-calldata](/cast/reference/cast-decode-calldata.mdx)
    Decode ABI-encoded input data.

[cast pretty-calldata](/cast/reference/cast-pretty-calldata.mdx)
    Pretty print calldata.

[cast selectors](/cast/reference/cast-selectors.mdx)
    Extracts function selectors and arguments from bytecode

[cast upload-signature](/cast/reference/cast-upload-signature.mdx)
    Upload the given signatures to [https://openchain.xyz/signatures](https://openchain.xyz/signatures).

##### Conversion Commands

[cast format-bytes32-string](/cast/reference/cast-format-bytes32-string.mdx)
    Formats a string into bytes32 encoding.

[cast from-bin](/cast/reference/cast-from-bin.mdx)
    Convert binary data into hex data.

[cast from-fixed-point](/cast/reference/cast-from-fixed-point.mdx)
    Convert a fixed point number into an integer.

[cast from-utf8](/cast/reference/cast-from-utf8.mdx)
    Convert UTF8 to hex.

[cast from-wei](/cast/reference/cast-from-wei.mdx)
    Convert wei into an ETH amount

[cast parse-bytes32-address](/cast/reference/cast-parse-bytes32-address.mdx)
    Parses a checksummed address from bytes32 encoding.

[cast parse-bytes32-string](/cast/reference/cast-parse-bytes32-string.mdx)
    Parses a string from bytes32 encoding.

[cast to-ascii](/cast/reference/cast-to-ascii.mdx)
    Convert hex data to an ASCII string.

[cast to-base](/cast/reference/cast-to-base.mdx)
    Convert a number of one base to another.

[cast to-bytes32](/cast/reference/cast-to-bytes32.mdx)
    Right-pads hex data to 32 bytes.

[cast to-dec](/cast/reference/cast-to-dec.mdx)
    Converts a number of one base to decimal

[cast to-fixed-point](/cast/reference/cast-to-fixed-point.mdx)
    Convert an integer into a fixed point number.

[cast to-hex](/cast/reference/cast-to-hex.mdx)
    Converts a number of one base to another

[cast to-hexdata](/cast/reference/cast-to-hexdata.mdx)
    Normalize the input to lowercase, 0x-prefixed hex.

[cast to-int256](/cast/reference/cast-to-int256.mdx)
    Convert a number to a hex-encoded int256.

[cast to-rlp](/cast/reference/cast-to-rlp.mdx)
    RLP encodes hex data, or an array of hex data

[cast to-uint256](/cast/reference/cast-to-uint256.mdx)
    Convert a number to a hex-encoded uint256.

[cast to-unit](/cast/reference/cast-to-unit.mdx)
    Convert an ETH amount into another unit (ether, gwei, wei).

[cast to-wei](/cast/reference/cast-to-wei.mdx)
    Convert an ETH amount to wei.

[cast shl](/cast/reference/cast-shl.mdx)
    Perform a left shifting operation.

[cast shr](/cast/reference/cast-shr.mdx)
    Perform a right shifting operation.

##### Utility Commands

[cast address-zero](/cast/reference/cast-address-zero.mdx)
    Prints the zero address.

[cast sig](/cast/reference/cast-sig.mdx)
    Get the selector for a function.

[cast sig-event](/cast/reference/cast-sig-event.mdx)
    Generate event signatures from event string.

[cast keccak](/cast/reference/cast-keccak.mdx)
    Hash arbitrary data using keccak-256.

[cast compute-address](/cast/reference/cast-compute-address.mdx)
    Compute the contract address from a given nonce and deployer address.

[cast create2](/cast/reference/cast-create2.mdx)
     Generate a deterministic contract address using CREATE2

[cast interface](/cast/reference/cast-interface.mdx)
    Generate a Solidity interface from a given ABI.

[cast index](/cast/reference/cast-index.mdx)
    Compute the storage slot for an entry in a mapping.

[cast concat-hex](/cast/reference/cast-concat-hex.mdx)
    Concatenate hex strings.

[cast max-int](/cast/reference/cast-max-int.mdx)
    Get the maximum i256 value.

[cast min-int](/cast/reference/cast-min-int.mdx)
    Get the minimum i256 value.

[cast max-uint](/cast/reference/cast-max-uint.mdx)
    Get the maximum u256 value.

[cast to-check-sum-address](/cast/reference/cast-to-check-sum-address.mdx)
    Convert an address to a checksummed format (EIP-55).

##### Wallet Commands

[cast wallet](/cast/reference/cast-wallet.mdx)
    Wallet management utilities.

[cast wallet new](/cast/reference/cast-wallet-new.mdx)
    Create a new random keypair.

[cast wallet address](/cast/reference/cast-wallet-address.mdx)
    Convert a private key to an address.

[cast wallet sign](/cast/reference/cast-wallet-sign.mdx)
    Sign a message.

[cast wallet vanity](/cast/reference/cast-wallet-vanity.mdx)
    Generate a vanity address.

[cast wallet verify](/cast/reference/cast-wallet-verify.mdx)
    Verify the signature of a message.

#### OPTIONS

##### Special Options

`-V`
`--version`
    Print version info and exit.

<CommonOptions />

#### EXAMPLES

1. Call a function on a contract:

   ```sh
   cast call 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 \
     "balanceOf(address)(uint256)" 0x...
   ```

2. Decode raw calldata:

   ```sh
   cast decode-calldata "transfer(address,uint256)" \
     0xa9059cbb000000000000000000000000e78388b4ce79068e89bf8aa7f218ef6b9ab0e9d0000000000000000000000000000000000000000000000000008a8e4b1a3d8000
   ```

3. Encode calldata:
   ```sh
   cast calldata "someFunc(address,uint256)" 0x... 1
   ```

#### BUGS

See [https://github.com/foundry-rs/foundry/issues](https://github.com/foundry-rs/foundry/issues) for issues.


The signature (*sig*) can be:

* A fragment: `someFunction(uint256,bytes32)`
* A selector and encoded calldata: `0xcdba2fd40000000000000000000000000000000000000000000000000000000000007a69`
* Only the function name: in this case Cast will try to fetch the function signature from Etherscan


### Transaction Commands

* [cast publish](/cast/reference/cast-publish.mdx)
* [cast receipt](/cast/reference/cast-receipt.mdx)
* [cast send](/cast/reference/cast-send.mdx)
* [cast mktx](/cast/reference/cast-mktx.mdx)
* [cast call](/cast/reference/cast-call.mdx)
* [cast rpc](/cast/reference/cast-rpc.mdx)
* [cast tx](/cast/reference/cast-tx.mdx)
* [cast run](/cast/reference/cast-run.mdx)
* [cast estimate](/cast/reference/cast-estimate.mdx)
* [cast access-list](/cast/reference/cast-access-list.mdx)
* [cast logs](/cast/reference/cast-logs.mdx)


### Utility Commands

* [cast address-zero](/cast/reference/cast-address-zero.mdx)
* [cast sig](/cast/reference/cast-sig.mdx)
* [cast sig-event](/cast/reference/cast-sig-event.mdx)
* [cast keccak](/cast/reference/cast-keccak.mdx)
* [cast compute-address](/cast/reference/cast-compute-address.mdx)
* [cast create2](/cast/reference/cast-create2.mdx)
* [cast interface](/cast/reference/cast-interface.mdx)
* [cast index](/cast/reference/cast-index.mdx)
* [cast concat-hex](/cast/reference/cast-concat-hex.mdx)
* [cast max-int](/cast/reference/cast-max-int.mdx)
* [cast min-int](/cast/reference/cast-min-int.mdx)
* [cast max-uint](/cast/reference/cast-max-uint.mdx)
* [cast to-check-sum-address](/cast/reference/cast-to-check-sum-address.mdx)


### Wallet Commands

* [cast wallet](/cast/reference/cast-wallet.mdx)
* [cast wallet address](/cast/reference/cast-wallet-address.mdx)
* [cast wallet new](/cast/reference/cast-wallet-new.mdx)
* [cast wallet sign](/cast/reference/cast-wallet-sign.mdx)
* [cast wallet vanity](/cast/reference/cast-wallet-vanity.mdx)
* [cast wallet verify](/cast/reference/cast-wallet-verify.mdx)
* [cast wallet import](/cast/reference/cast-wallet-import.mdx)
* [cast wallet sign-auth](/cast/reference/cast-wallet-sign-auth.mdx)


### Config Reference

* [Overview](/config/reference/overview.mdx)
* [Project](/config/reference/project.mdx)
* [Solidity Compiler](/config/reference/solidity-compiler.mdx)
* [Testing](/config/reference/testing.mdx)
* [In-line test configuration](/config/reference/inline-test-config.mdx)
* [Formatter](/config/reference/formatter.mdx)
* [Linter](/config/reference/linter.mdx)
* [Documentation Generator](/config/reference/doc-generator.mdx)
* [Etherscan](/config/reference/etherscan.mdx)


### Default foundry configuration

```toml
[profile.default]
# The source directory
src = 'src'
# The test directory
test = 'test'
# The script directory
script = 'script'
# The artifact directory
out = 'out'
# A list of paths to look for libraries in
libs = ['lib']
# A list of remappings
remappings = []
# Whether to autodetect remappings by scanning the `libs` folders recursively
auto_detect_remappings = true
# A list of deployed libraries to link against
libraries = []
# Whether to cache builds or not
cache = true
# The cache directory if enabled
cache_path = 'cache'
# Where the broadcast logs are stored
broadcast = 'broadcast'
# additional solc allow paths
allow_paths = []
# additional solc include paths
include_paths = []
# Whether to ignore the cache
force = false
# The EVM version by hardfork name
evm_version = 'london'
# A list of contracts to output gas reports for
gas_reports = ['*']
# A list of contracts to ignore for gas reports
gas_reports_ignore = []
# Override the Solidity version (this overrides `auto_detect_solc`)
#solc_version = '0.8.10'
# Whether or not Forge should auto-detect the solc version to use
auto_detect_solc = true
# Disables downloading missing solc versions
offline = false
# Enables or disables the optimizer
optimizer = false
# The number of optimizer runs
optimizer_runs = 200
# The verbosity of tests
verbosity = 0
# A list of ignored solc error codes
ignored_error_codes = [1878, 5574]
# Whether contract build warnings will cause compilation to fail
deny_warnings = false
# Configures the permissions of cheat codes that touch the file system
fs_permissions = []
# Whether to emit additional build info files
build_info = false
# Whether or not to enable `vm.ffi`
ffi = false
# The address of `msg.sender` in tests
sender = '0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38'
# The address of `tx.origin` in tests
tx_origin = '0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38'
# The initial balance of the test contract
initial_balance = '0xffffffffffffffffffffffff'
# The chain ID we are on in tests
chain_id = 31337
# The `block.number` value during EVM execution
block_number = 1
# The gas limit in tests
gas_limit = 9223372036854775807
# The gas price in tests (in wei)
gas_price = 0
# The block basefee in tests (in wei)
block_base_fee_per_gas = 0
# The address of `block.coinbase` in tests
block_coinbase = '0x0000000000000000000000000000000000000000'
# The block timestamp in tests
block_timestamp = 1
# The block difficulty in tests
block_difficulty = 0
# The memory limit of the EVM (32 MB by default)
memory_limit = 33554432
# Extra output to include in the contract's artifact.
extra_output = []
# Extra output to write to separate files.
extra_output_files = []
# Print the names of the compiled contracts
names = false
# Print the sizes of the compiled contracts
sizes = false
# Whether or not to use the Yul intermediate representation compilation pipeline
via_ir = false
# Enables or disables RPC caching when forking
no_storage_caching = false
# Use the given hash method for the metadata hash that is appended
# to the bytecode.
# The metadata hash can be removed from the bytecode by setting "none"
bytecode_hash = "ipfs"
# How to treat revert (and require) reason strings
revert_strings = "default"
# If enabled, the Solidity compiler is instructed to generate bytecode
# only for the required contracts. This can reduce compile time
# for `forge test`, but is experimental.
sparse_mode = false
# Contains alias -> URL|Env pairs for RPC endpoints that can be accessed during testing
rpc_endpoints = { optimism = "https://optimism.alchemyapi.io/v2/...", mainnet = "${RPC_MAINNET}" }
# The Solc instance to use if any.
# This takes precedence over `auto_detect_solc`, if a version is set then this overrides auto-detection.
#solc = None
# Switch optimizer components on or off in detail
#optimizer_details = None
# Model checker settings.
#model_checker = None,
# Url of the rpc server that should be used for any rpc calls
#eth_rpc_url = None
# Etherscan API key
#etherscan_api_key = None
# Only run test functions matching the specified regex pattern
#match_test = None
# Only run test functions that do not match the specified regex pattern
#no_match_test = None
# Only run tests in contracts matching the specified regex pattern
#match_contract = None
# Only run tests in contracts that do not match the specified regex pattern
#no_match_contract = None
# Only run tests in source files matching the specified glob pattern
#match_path = None
# Only run tests in source files that do not match the specified glob pattern
#no_match_path = None
# Only show coverage for files that do not match the specified regex pattern.
#no_match_coverage = None
# Number of threads to use. Not set or zero specifies the number of logical cores.
#threads = 0
# Whether to show test execution progress
#show_progress = false
# Pins the block number for the state fork
#fork_block_number = None
# The block gas limit
#block_gas_limit = None
# The path to the `build-info` directory that contains the build info json files
#build_info_path = None
# Whether to allow `expectRevert` for internal functions.
allow_internal_expect_revert = false
# Use the create 2 factory in all cases including tests and non-broadcasting scripts.
always_use_create_2_factory = false
# The CREATE2 deployer address to use.
create2_deployer = "0x4e59b44847b379578588920ca78fbf26c0b4956c"
# CREATE2 salt to use for the library deployment in scripts.
create2_library_salt = "0x0000000000000000000000000000000000000000000000000000000000000000"

[fmt]
# Maximum line length where formatter will try to wrap the line
line_length = 120
# Number of spaces per indentation level
tab_width = 4
# Print spaces between brackets
bracket_spacing = false
# Style of uint/int256 types
int_types = "long"
# If function parameters are multiline then always put the function attributes on separate lines
func_attrs_with_params_multiline = true
# Style of quotation marks
quote_style = "double"
# Style of underscores in number literals
number_underscore = "preserve"

[fuzz]
# The number of fuzz runs for fuzz tests
runs = 256
# The maximum number of test case rejections allowed by proptest, to be
# encountered during usage of `vm.assume` cheatcode. This will be used
# to set the `max_global_rejects` value in proptest test runner config.
# `max_local_rejects` option isn't exposed here since we're not using
# `prop_filter`.
max_test_rejects = 65536
# The weight of the dictionary
dictionary_weight = 40
# The flag indicating whether to include values from storage
include_storage = true
# The flag indicating whether to include push bytes values
include_push_bytes = true
# Number of runs to include in the gas report.
gas_report_samples = 256
# Path where fuzz failures are recorded and replayed.
# failure_persist_dir = /path/to/persist/dir
# Name of the file to record fuzz failures, defaults to `failures`.
# failure_persist_file = "failures"
# Show `console.log` in fuzz test.
show_logs = false

[invariant]
# The number of runs that must execute for each invariant test group
runs = 256
# The number of calls executed to attempt to break invariants in one run
depth = 15
# Fails the invariant fuzzing if a revert occurs
fail_on_revert = false
# Allows overriding an unsafe external call when running invariant tests. eg. reentrancy checks
call_override = false
# The weight of the dictionary
dictionary_weight = 80
# The flag indicating whether to include values from storage
include_storage = true
# The flag indicating whether to include push bytes values
include_push_bytes = true
# The maximum number of attempts to shrink the sequence.
shrink_run_limit = 5000
# The maximum number of rejects via `vm.assume` which can be encountered during a single
# invariant run.
max_assume_rejects = 65536
# Number of runs to include in the gas report.
gas_report_samples = 256
# Path where invariant failures are recorded and replayed.
# failure_persist_dir = /path/to/persist/dir
# Whether to collect and display fuzzed selectors metrics.
show_metrics = false
```


### Documentation Generator

Configuration related to the behavior of the Forge documentation generator. These keys are set in `[doc]` section.

##### `out`

* Type: string
* Default: `docs`
* Environment: `FOUNDRY_DOC_OUT`

An output path for generated documentation.

##### `title`

* Type: string
* Environment: `FOUNDRY_DOC_TITLE`

Title for the generated documentation.

##### `book`

* Type: string
* Default: `./book.toml`
* Environment: `FOUNDRY_DOC_BOOK`

Path to user provided `book.toml`. It will be merged with default settings during doc generation.

##### `repository`

* Type: string
* Environment: `FOUNDRY_DOC_REPOSITORY`

The git repository URL. Used to provide links to git source files.
If missing, `forge` will attempt to look up the current origin url and use its value.

##### `ignore`

* Type: array of strings (patterns)
* Default: `[]`
* Environment: `FOUNDRY_DOC_IGNORE`

List of files to ignore when generating documentation. This is a comma separated list of glob patterns.


### Etherscan

Configuration related to Etherscan, such as API keys. This configuration is used in various places by Forge.

The `[etherscan]` section is a mapping of keys to Etherscan configuration tables.

With Etherscan API V2, only Etherscan keys are valid, which can be used to access all similar explorers (e.g. BscScan / BaseScan / Polygonscan).

```toml
[etherscan]
mainnet = { key = "${ETHERSCAN_API_KEY}" }
mainnet2 = { key = "ABCDEFG", chain = "mainnet" }
optimism = { key = "1234567" }
unknown_chain = { key = "ABCDEFG", url = "<etherscan api url for this chain>" }
```


### Formatter

Configuration related to the behavior of the Forge formatter. Each of these keys live under the `[fmt]` section.

#### `single_line_statement_blocks`

> This allows configuring the style of statement blocks independently of the line length.

The `single_line_statement_blocks` configuration option in Foundry controls whether statement blocks (code blocks enclosed in `{ }`) will be formatted to a single line or multiple lines.

It has three possible values:

* `"single"` - Statement blocks will be formatted to a single line if possible.
* `"multi"` - Statement blocks will always be formatted to multiple lines.
* `"preserve"` - Keep the existing single/multi line formatting of statement blocks.

For example, with `"single"`:

```solidity
if (true) { return true; }
```

With `"multi"`:

```solidity
if (true) {
  return true;
}
```

And with `"preserve"`, it will keep the original formatting of the code.

#### `multiline_func_header`

> This allows configuring the formatting of long function headers.

* Type: string
* Default: `attributes_first`
* Environment: `FOUNDRY_FMT_MULTILINE_FUNC_HEADER` or `DAPP_FMT_MULTILINE_FUNC_HEADER`

The `multiline_func_header` configuration option in Foundry controls how function headers (the line containing the function name, parameters, return values etc.) are formatted when they exceed the max line length.

Style of multiline function header in case it doesn't fit in one line. Valid possible values:

* `"attributes_first"` - (default)  Write function attributes multiline first
* `"params_first"` - Break the function header into multiple lines, with each parameter on its own line. The function name stays on the first line.
* `"all"` - If function parameters or attributes are multiline, multiline everything

Style of multiline function header in case it doesn't fit in one line. Valid values are:

For example, with `"params_first"`:

```solidity
function myFunction(
    uint256 param1, 
    uint256 param2,
    uint256 param3
) public returns (uint256) {
  // ...
}

```

And with `"all"`:

```solidity
function myFunction(
    uint256 param1,
    uint256 param2, 
    uint256 param3
) 
    public 
    returns (uint256) 
{
  // ...  
}
```

#### `sort_imports`

> helps organize imports and makes it easier to find specific imports quickly.

The `sort_imports` configuration option in Foundry controls whether import statements are sorted alphabetically within their import groups.

From the code snippets provided:

* In `fmt.rs`, `sort_imports` is a configuration option that can be set to `true` or `false`.
* In `formatter.rs`, the `sort_imports()` method is called to sort import statements alphabetically if `sort_imports` is enabled.
* It finds import groups separated by blank lines in the source code.
* Then sorts the import statements within each group alphabetically.

So in summary, enabling `sort_imports` will reorder solidity import statements alphabetically within their section groups, while preserving the relative ordering of the groups.

#### `contract_new_lines`

> Controls the addition of blank lines before and after contract definitions.

The `contract_new_lines` configuration option in Foundry controls whether empty lines are added before and after contract definitions.

When enabled (`contract_new_lines = true`):

* An empty line will be added before the start of a contract definition.
* An empty line will also be added after the end of a contract definition.

For example, with `contract_new_lines` enabled:

```solidity
// Empty line before contract contract MyContract { // ... } // Empty line after contract
```

This helps visually separate contract definitions and improve readability.

When disabled (`contract_new_lines = false`), empty lines will not be added around contracts.

So in summary, the `contract_new_lines` option controls the addition of blank lines before and after contract definitions.

#### `override_spacing`

The `override_spacing` configuration option in Foundry controls whether a space is printed between the `override` keyword and the parent contracts when overriding a function or modifier.

When `override_spacing` is enabled:

* A space will be added after the `override` keyword.

For example:

```solidity
contract Child is Parent {
  function foo() override (Parent) public { }
}
```

When disabled, there will be no space between `override` and the parent contracts:

```solidity
contract Child is Parent {
  function foo() override(Parent) public { } 
}
```

Enables configuring the styling of override declarations.

* `override_spacing = true` - Print a space after `override`
* `override_spacing = false` - No space after `override`

#### `line_length`

* Type: number
* Default: 120
* Environment: `FOUNDRY_FMT_LINE_LENGTH` or `DAPP_FMT_LINE_LENGTH`

Maximum line length where formatter will try to wrap the line.

#### `tab_width`

* Type: number
* Default: 4
* Environment: `FOUNDRY_FMT_TAB_WIDTH` or `DAPP_FMT_TAB_WIDTH`

Number of spaces per indentation level.

#### `bracket_spacing`

* Type: bool
* Default: false
* Environment: `FOUNDRY_FMT_BRACKET_SPACING` or `DAPP_FMT_BRACKET_SPACING`

Whether or not to print spaces between brackets.

#### `int_types`

* Type: string
* Default: `long`
* Environment: `FOUNDRY_FMT_INT_TYPES` or `DAPP_FMT_INT_TYPES`

Style of uint/int256 types. Valid values are:

* `long` (default): Use the explicit `uint256` or `int256`
* `short`: Use the implicit `uint` or `int`
* `preserve`: Use the type defined in the source code

#### `quote_style`

* Type: string
* Default: `double`
* Environment: `FOUNDRY_FMT_QUOTE_STYLE` or `DAPP_FMT_QUOTE_STYLE`

Defines the quotation mark style. Valid values are:

* `double` (default): Use double quotes where possible (`"`)
* `single`: Use single quotes where possible (`'`)
* `preserve`: Use quotation mark defined in the source code

#### `number_underscore`

* Type: string
* Default: `preserve`
* Environment: `FOUNDRY_FMT_NUMBER_UNDERSCORE` or `DAPP_FMT_NUMBER_UNDERSCORE`

Style of underscores in number literals. Valid values are:

* `preserve` (default): Use the underscores defined in the source code
* `thousands`: Add an underscore every thousand, if greater than 9999. i.e. `1000` is formatted as `1000` and `10000` as `10_000`
* `remove`: Remove all underscores

#### `hex_underscore`

* Type: string
* Default: `remove`
* Environment: `FOUNDRY_FMT_HEX_UNDERSCORE` or `DAPP_FMT_HEX_UNDERSCORE`

Style of underscores in bytes literals. Valid values are:

* `preserve`: Use the underscores defined in the source code
* `remove` (default): Remove all underscores
* `bytes`: Add underscore as separator between byte boundaries. i.e. `hex"deadbeef"` is formatted as `hex"de_ad_be_ef"`

#### `wrap_comments`

* Type: bool
* Default: false
* Environment: `FOUNDRY_FMT_WRAP_COMMENTS` or `DAPP_FMT_WRAP_COMMENTS`

Whether or not to wrap comments on `line_length` reached.

#### `ignore`

* Type: array of strings (patterns)
* Default: `[]`
* Environment: `FOUNDRY_FMT_IGNORE` or `DAPP_FMT_IGNORE`

List of files to ignore when formatting. This is a comma separated list of glob patterns.


### In-line test configuration

Foundry users are enabled to specify overall test configurations, using a combination of ENV variables and config statements in the `foundry.toml`. Checkout the [`Testing reference`][Testing Reference] for a detailed description.

Despite this may work in the general case, some tests may need finer control over their configuration. For such reason Forge provides a way to specify per-test configs for invariant and fuzz testing scenarios.

Users can in-line test config statements directly in Solidity comments. This would affect the behavior of the `forge test` command for a specific test instance, as illustrated in the example below.

```solidity
contract MyTest is Test {
  /// forge-config: default.fuzz.runs = 100
  /// forge-config: ci.fuzz.runs = 500
  /// forge-config: default.fuzz.show-logs = true
  function test_SimpleFuzzTest(uint256 x) public {
    // --- snip ---
  }
}
```

What we are asking here is to run our fuzzer `100` and `500` times for the `default` and `ci` profiles respectively. The interesting fact is that this would override any fuzz `runs` setup existing at a global level. All other configs would be inherited from the global context, making this acting as a fallback for all possible configurations.

#### Block comments

In-line test configurations can also be expressed in block comments, as illustrated in the example.

```solidity
contract MyTest is Test {
  /**
   * forge-config: default.fuzz.runs = 1024
   * forge-config: default.fuzz.max-test-rejects = 500
   * forge-config: default.fuzz.show-logs = true
   */
  function test_SimpleFuzzTest(uint256 x) public {
    // --- snip ---
  }
}
```

#### In-line fuzz configs

Users can specify the configs described in the table. Each statement must have a prefix of the form `forge-config: ${PROFILE}.fuzz.`

| Parameter          | Type    | Description                                                                                                                          |
| ------------------ | ------- | ------------------------------------------------------------------------------------------------------------------------------------ |
| `runs`             | integer | The amount of fuzz runs to perform for this specific test case. [`Reference`][testing].                                              |
| `max-test-rejects` | integer | The maximum number of combined inputs that may be rejected before the test as a whole aborts. [`Reference`][Max test rejects].       |
| `show-logs`        | boolean | The flag indicates whether to display console logs in fuzz tests or not. Works when `verbosity >= 2`. [`Reference`][Fuzz show logs]. |

Fuzz config example

```solidity
contract MyFuzzTest is Test {
  /// forge-config: default.fuzz.runs = 100
  /// forge-config: default.fuzz.max-test-rejects = 2
  /// forge-config: default.fuzz.show-logs = true
  function test_InlineConfig(uint256 x) public {
    // --- snip ---
  }
}
```

#### In-line invariant configs

Users can specify the configs described in the table. Each statement must have a prefix of the form `forge-config: ${PROFILE}.invariant.`

| Parameter        | Type    | Description                                                                                            |
| ---------------- | ------- | ------------------------------------------------------------------------------------------------------ |
| `runs`           | integer | The amount of invariant runs to perform for this specific test case. [`Reference`][Invariant runs].    |
| `depth`          | integer | The number of calls executed to attempt to break invariant in one run. [`Reference`][Invariant depth]. |
| `fail-on-revert` | boolean | Fails the invariant fuzzing if a revert occurs. [`Reference`][Fail on revert].                         |
| `call-override`  | boolean | Overrides unsafe external calls when running invariant test. [`Reference`][Invariant call override].   |

Invariant config example

```solidity
contract MyInvariantTest is Test {
  /// forge-config: default.invariant.runs = 100
  /// forge-config: default.invariant.depth = 2
  /// forge-config: default.invariant.fail-on-revert = false
  /// forge-config: default.invariant.call-override = true
  function invariant_InlineConfig() public {
    // --- snip ---
  }
}
```

[Testing Reference]: ./testing.md

[testing]: ./testing.md#runs

[Max test rejects]: ./testing.md#max_test_rejects

[Fuzz show logs]: ./testing.md#show_logs

[Invariant runs]: ./testing.md#runs-1

[Invariant depth]: ./testing.md#depth

[Fail on revert]: ./testing.md#fail_on_revert

[Invariant call override]: ./testing.md#call_override


### Linter Configuration

Configuration related to the behavior of the linter. These keys are set in the `[lint]` section.

##### `severity`

* Type: array of strings
* Default: all severities enabled (`high`, `med`, `low`, `info`, `gas`)
* Environment: `FOUNDRY_LINT_SEVERITY`

Specifies which lints to run based on severity. If omitted, all severities are checked.

##### `exclude_lints`

* Type: array of strings
* Default: `[]`
* Environment: `FOUNDRY_LINT_EXCLUDE_LINTS`

List of lint IDs to exclude from checking (e.g., `"mixed-case-function"`).

##### `ignore`

* Type: array of strings (patterns)
* Default: `[]`
* Environment: `FOUNDRY_LINT_IGNORE`

List of files or patterns to ignore when running the linter. This is a comma-separated list of glob patterns.

### Inline Configuration

The linter also offers the ability to disable lints for specific sections of code using inline comment directives.
This is useful when you need to suppress false positives or have valid reasons for code that would otherwise trigger a lint warning.

To disable lints using inline config, your comment must follow this format:

```
/// forge-lint: <directive>(<lint-ids>)
```

Where:

* `<directive>` is one of the directives from the table below
* `<lint-ids>` is a comma-separated list of lint identifiers, or `all` to disable all lints

#### Supported Inline Directives

| Directive                       | Description                                                                        | Scope                              |
| ------------------------------- | ---------------------------------------------------------------------------------- | ---------------------------------- |
| `disable-next-item`             | Disables lints for the next code item (contract, function, variable, struct, etc.) | Next item regardless of line count |
| `disable-line`                  | Disables lints for the current line                                                | Current line only                  |
| `disable-next-line`             | Disables lints for the next line                                                   | Next line only                     |
| `disable-start` / `disable-end` | Disables lints for all code between the start and end comments                     | Block of code between directives   |

#### Best Practices

1. **Be Specific**: Always specify which lint(s) you're disabling rather than using `all`.
2. **Add Comments**: Explain why you're disabling the lint to help future maintainers.
3. **Minimize Scope**: Use the most targeted directive possible (e.g., `disable-line` instead of `disable-start/end`).


### Config Overview

Foundry's configuration system allows you to configure its tools.

#### Profiles

Configuration can be arbitrarily namespaced into profiles. The default profile is named `default`, and all other profiles inherit values from this profile. Profiles are defined in the `profile` map.

To add a profile named `local`, you would add:

```toml
[profile.local]
```

You can select the profile to use by setting the `FOUNDRY_PROFILE` environment variable.

#### Global configuration

You can create a `foundry.toml` file in `~/.foundry` folder to configure Foundry globally.

#### Environment variables

Configuration can be overridden with `FOUNDRY_` and `DAPP_` prefixed environment variables.

Exceptions are:

* `FOUNDRY_FFI`, `DAPP_FFI`, `DAPP_TEST_FFI`
* `FOUNDRY_PROFILE`
* `FOUNDRY_REMAPPINGS`, `DAPP_REMAPPINGS`
* `FOUNDRY_LIBRARIES`, `DAPP_LIBRARIES`
* `FOUNDRY_FS_PERMISSIONS`, `DAPP_FS_PERMISSIONS`, `DAPP_TEST_FS_PERMISSIONS`
* `DAPP_TEST_CACHE`
* `DAPP_TEST_FUZZ_RUNS`
* `DAPP_TEST_FUZZ_DEPTH`

#### Configuration format

Configuration files are written in the [TOML format](https://toml.io), with simple key-value pairs inside of sections.

This page describes each configuration key in detail. To see the default values, either refer to the specific key in this document, or see the [default config](/config/reference/default-config).

#### Configuration keys

This section documents all configuration keys. All configuration keys must live under a profile, such as `default`.


### Project

Configuration related to the project in general.

##### `src`

* Type: string
* Default: src
* Environment: `FOUNDRY_SRC` or `DAPP_SRC`

The path to the contract sources relative to the root of the project.

##### `test`

* Type: string
* Default: test
* Environment: `FOUNDRY_TEST` or `DAPP_TEST`

The path to the test contract sources relative to the root of the project.

##### `script`

* Type: string
* Default: script
* Environment: `FOUNDRY_SCRIPT` or `DAPP_SCRIPT`

The path to the script contract sources relative to the root of the project.

##### `out`

* Type: string
* Default: out
* Environment: `FOUNDRY_OUT` or `DAPP_OUT`

The path to put contract artifacts in, relative to the root of the project.

##### `libs`

* Type: array of strings (paths)
* Default: lib
* Environment: `FOUNDRY_LIBS` or `DAPP_LIBS`

An array of paths that contain libraries, relative to the root of the project.

##### `cache`

* Type: boolean
* Default: true
* Environment: `FOUNDRY_CACHE` or `DAPP_CACHE`

Whether or not to enable caching. If enabled, the result of compiling sources, tests, and dependencies, are cached in `cache`.

##### `cache_path`

* Type: string
* Default: cache
* Environment: `FOUNDRY_CACHE_PATH` or `DAPP_CACHE_PATH`

The path to the cache, relative to the root of the project.

##### `broadcast`

* Type: string
* Default: broadcast

The path to the broadcast transaction logs, relative to the root of the project.

##### `force`

* Type: boolean
* Default: false
* Environment: `FOUNDRY_FORCE` or `DAPP_FORCE`

Whether or not to perform a clean build, discarding the cache.


### Solidity compiler

Configuration related to the behavior of the Solidity compiler.

**Sections**

* [General](#general)
* [Optimizer](#optimizer)
* [Model Checker](#model-checker)
* [Compilation Restrictions](#compilation-restrictions)

#### General

Configuration related to the behavior of the Solidity compiler.

##### `remappings`

* Type: array of strings (remappings)
* Default: none
* Environment: `FOUNDRY_REMAPPINGS` or `DAPP_REMAPPINGS`

An array of remappings in the following format: `<name>=<target>`.

A remapping *remaps* Solidity imports to different directories. For example, the following remapping

```
@openzeppelin/=node_modules/@openzeppelin/openzeppelin-contracts/
```

with an import like

```solidity
import {Context} from "@openzeppelin/contracts/utils/Context.sol";
```

becomes

```solidity
import {Context} from "node_modules/@openzeppelin/openzeppelin-contracts/contracts/utils/Context.sol";
```

##### `auto_detect_remappings`

* Type: boolean
* Default: true
* Environment: `FOUNDRY_AUTO_DETECT_REMAPPINGS` or `DAPP_AUTO_DETECT_REMAPPINGS`

If enabled, Foundry will automatically try auto-detect remappings by scanning the `libs` folder(s).

If set to `false`, only the remappings in `foundry.toml` and `remappings.txt` are used.

##### `allow_paths`

* Type: array of strings (paths)
* Default: none
* Environment: `FOUNDRY_ALLOW_PATHS` or `DAPP_ALLOW_PATHS`

Tells solc to allow reading source files from additional directories. This is mainly relevant for complex workspaces managed by `pnpm` or similar.

See also [solc allowed-paths](https://docs.soliditylang.org/en/latest/path-resolution.html#allowed-paths)

##### `include_paths`

* Type: array of strings (paths)
* Default: none
* Environment: `FOUNDRY_INCLUDE_PATHS` or `DAPP_INCLUDE_PATHS`

Make an additional source directory available to the default import callback. Use this option if you want to import contracts whose location is not fixed in relation to your main source tree, e.g. third-party libraries installed using a package manager. Can be used multiple times. Can only be used if base path has a non-empty value.

See also [solc path resolution](https://docs.soliditylang.org/en/latest/path-resolution.html)

##### `libraries`

* Type: array of strings (libraries)
* Default: none
* Environment: `FOUNDRY_LIBRARIES` or `DAPP_LIBRARIES`

An array of libraries to link against in the following format: `<file>:<lib>:<address>`, for example: `src/MyLibrary.sol:MyLibrary:0xfD88CeE74f7D78697775aBDAE53f9Da1559728E4`.

##### `solc_version`

* Type: string (semver)
* Default: none
* Environment: `FOUNDRY_SOLC_VERSION` or `DAPP_SOLC_VERSION`

If specified, overrides the auto-detection system (more below) and uses a single Solidity compiler version for the project.

Only strict versions are supported (i.e. `0.8.11` is valid, but `^0.8.0` is not).

##### `auto_detect_solc`

* Type: boolean
* Default: true
* Environment: `FOUNDRY_AUTO_DETECT_SOLC` or `DAPP_AUTO_DETECT_SOLC`

If enabled, Foundry will automatically try to resolve appropriate Solidity compiler versions to compile your project.

This key is ignored if `solc_version` is set.

##### `offline`

* Type: boolean
* Default: false
* Environment: `FOUNDRY_OFFLINE` or `DAPP_OFFLINE`

If enabled, Foundry will not attempt to download any missing solc versions.

If both `offline` and `auto-detect-solc` are set to `true`, the required version(s) of solc will be auto detected but any missing versions will *not* be installed.

##### `ignored_warnings_from`

* Type: array of strings (file paths)
* Default: none
* Environment: `FOUNDRY_IGNORED_WARNINGS_FROM` OR `DAPP_IGNORED_WARNINGS_FROM`

An array of file paths from which warnings should be ignored during the compulation process. This is useful when you have a specific
directories of files that produce known warnings and you wish to suppress these warnings without affecting others.

Each entry in the array should be a path to a directory or a specific file. For Example:

`ignored_warnings_from = ["path/to/warnings/file1.sol", "path/to/warnings/file2.sol"]`

This configuration will cause the compiler to ignore any warnings that originate from the specified paths.

##### `ignored_error_codes`

* Type: array of integers/strings
* Default: none for source, SPDX license identifiers and contract size for tests
* Environment: `FOUNDRY_IGNORED_ERROR_CODES` or `DAPP_IGNORED_ERROR_CODES`

An array of Solidity compiler error codes to ignore during build, such as warnings.

Valid values are:

* `license`: 1878
* `code-size`: 5574
* `func-mutability`: 2018
* `unused-var`: 2072
* `unused-param`: 5667
* `unused-return`: 9302
* `virtual-interfaces`: 5815
* `missing-receive-ether`: 3628
* `shadowing`: 2519
* `same-varname`: 8760
* `unnamed-return`: 6321
* `unreachable`: 5740
* `pragma-solidity`: 3420
* `constructor-visibility`: 2462
* `init-code-size`: 3860
* `transient-storage`: 2394
* `too-many-warnings`: 4591

##### `deny_warnings`

* Type: boolean
* Default: false
* Environment: `FOUNDRY_DENY_WARNINGS` or `DAPP_DENY_WARNINGS`

If enabled, Foundry will treat Solidity compiler warnings as errors, stopping artifacts from being written to disk.

##### `evm_version`

* Type: string
* Default: prague
* Environment: `FOUNDRY_EVM_VERSION` or `DAPP_EVM_VERSION`

The EVM version to use during tests. The value **must** be an EVM hardfork name, such as `london`, `paris`, `shanghai`, `cancun`, `prague`, etc.

If you are relying on a specific EVM version for compatibility reasons you are recommended to pin to it in `foundry.toml`:

```toml
evm_version = "paris"
```

##### `revert_strings`

* Type: string
* Default: default
* Environment: `FOUNDRY_REVERT_STRINGS` or `DAPP_REVERT_STRINGS`

Possible values are:

* `default` does not inject compiler-generated revert strings and keeps user-supplied ones.
* `strip` removes all revert strings (if possible, i.e. if literals are used) keeping side-effects.
* `debug` injects strings for compiler-generated internal reverts, implemented for ABI encoders V1 and V2 for now.
* `verboseDebug` even appends further information to user-supplied revert strings (not yet implemented).

##### `extra_output_files`

* Type: array of strings
* Default: none
* Environment: N/A

Extra output from the Solidity compiler that should be written to files in the artifacts directory.

Valid values are:

* `metadata`: Written as a `metadata.json` file in the artifacts directory
* `ir`: Written as a `.ir` file in the artifacts directory
* `irOptimized`: Written as a `.iropt` file in the artifacts directory
* `ewasm`: Written as a `.ewasm` file in the artifacts directory
* `evm.assembly`: Written as a `.asm` file in the artifacts directory

##### `extra_output`

* Type: array of strings
* Default: see below
* Environment: N/A

Extra output to include in the contract's artifact.

The following values are always set, since they're required by Forge:

```toml
extra_output = [
  "abi",
  "evm.bytecode",
  "evm.deployedBytecode",
  "evm.methodIdentifiers",
]
```

For a list of valid values, see the [Solidity docs](https://docs.soliditylang.org/en/latest/using-the-compiler.html#input-description) (search for: *The available output types are as follows*).

##### `bytecode_hash`

* Type: string
* Default: ipfs
* Environment: `FOUNDRY_BYTECODE_HASH` or `DAPP_BYTECODE_HASH`

Determines the hash method for the metadata hash that is appended to the bytecode.

Valid values are:

* ipfs (default)
* bzzr1
* none

##### `sparse_mode`

* Type: boolean
* Default: false
* Environment: `FOUNDRY_SPARSE_MODE` or `DAPP_SPARSE_MODE`

Enables [sparse mode](/forge/reference/forge-build#sparse-mode-experimental) for builds.

#### Optimizer

Configuration related to the Solidity optimizer.

##### `optimizer`

* Type: boolean
* Default: false
* Environment: `FOUNDRY_OPTIMIZER` or `DAPP_OPTIMIZER`

Whether or not to enable the Solidity optimizer.

> ℹ️ **Note**
> Solidity optimizer is automatically enabled if `optimizer_runs` is set to a value greater than 0.

##### `optimizer_runs`

* Type: integer
* Default: 200
* Environment: `FOUNDRY_OPTIMIZER_RUNS` or `DAPP_OPTIMIZER_RUNS`

The number of runs specifies roughly how often each opcode of the deployed code will be executed across the life-time of the contract. This means it is a trade-off parameter between code size (deploy cost) and code execution cost (cost after deployment). A `optimizer_runs` parameter of `1` will produce short but expensive code. In contrast, a larger `optimizer_runs` parameter will produce longer but more gas efficient code. The maximum value of the parameter is `2**32-1`.

A common misconception is that this parameter specifies the number of iterations of the optimizer. This is not true: The optimizer will always run as many times as it can still improve the code.

##### `via_ir`

* Type: boolean
* Default: false
* Environment: `FOUNDRY_VIA_IR` or `DAPP_VIA_IR`

If set to true, changes compilation pipeline to go through the new IR optimizer.

##### `use_literal_content`

* Type: boolean
* Default: false

If set to true, changes compilation to only use literal content and not URLs.

##### `[optimizer_details]`

The optimizer details section is used to tweak how the Solidity optimizer behaves. There are several configurable values in this section (each of them are booleans):

* `peephole`
* `inliner`
* `jumpdestRemover`
* `orderLiterals`
* `deduplicate`
* `cse`
* `constantOptimizer`
* `yul`

Refer to the Solidity [compiler input description](https://docs.soliditylang.org/en/latest/using-the-compiler.html#compiler-input-and-output-json-description) for the default values.

##### `[optimizer_details.yul_details]`

The Yul details subsection of the optimizer details section is used to tweak how the new IR optimizer behaves. There are two configuration values:

* `stack_allocation`: Tries to improve the allocation of stack slots by freeing them up earlier.
* `optimizer_steps`: Selects the optimizer steps to be applied.

Refer to the Solidity [compiler input description](https://docs.soliditylang.org/en/latest/using-the-compiler.html#compiler-input-and-output-json-description) for the default values.

> ℹ️ **Note**
> If you encounter compiler errors when using `via_ir`, explicitly enable the legacy `optimizer` and leave `optimizer_steps` as an empty string

#### Model checker

The Solidity model checker is a built-in opt-in module that is available in Solidity compilers for OSX and Linux. Learn more about the model checker in the [Solidity compiler documentation](https://docs.soliditylang.org/en/latest/smtchecker.html#tutorial)

> ℹ️ **Note**
> The model checker requires `z3` version 4.8.8 or 4.8.14 on Linux.

The model checker settings are configured in the `[model_checker]` section of the configuration.

The model checker will run when `forge build` is invoked, and any findings will show up as warnings.

These are the recommended settings when using the model checker:

```toml
[profile.default.model_checker]
contracts = {'/path/to/project/src/Contract.sol' = ['Contract']}
engine = 'chc'
timeout = 10000
targets = ['assert']
```

Setting which contract should be verified is extremely important, otherwise all available contracts will be verified which may take a long time.

The recommended engine is `chc`, but `bmc` and `all` (which runs both) are also accepted.

It is also important to set a proper timeout (given in milliseconds), since the default time given to the underlying solver may not be enough.

If no verification targets are given, only assertions will be checked.

##### `[model_checker]`

The following keys are available in the model checker section.

###### `model_checker.contracts`

* Type: table
* Default: all
* Environment: N/A

Specifies what contracts the model checker will analyze.

The key of the table is the path to a source file, and the value is an array of contract names to check.

For example:

```toml
[profile.default.model_checker]
contracts = { "src/MyContracts.sol" = ["ContractA", "ContractB"] }
```

###### `model_checker.div_mod_with_slacks`

* Type: boolean
* Default: false
* Environment: N/A

Sets how division and modulo operations should be encoded.

Refer to the [Solidity documentation](https://docs.soliditylang.org/en/latest/smtchecker.html#division-and-modulo-with-slack-variables) for more information.

###### `model_checker.engine`

* Type: string (see below)
* Default: all
* Environment: N/A

Specifies the model checker engine to run. Valid values are:

* `chc`: The constrained horn clauses engine
* `bmc`: The bounded model checker engine
* `all`: Runs both engines

Refer to the [Solidity documentation](https://docs.soliditylang.org/en/latest/smtchecker.html#model-checking-engines) for more information on the engines.

###### `model_checker.invariants`

* Type: array of strings
* Default: N/A
* Environment: N/A

Sets the model checker invariants. Valid values are:

* `contract`: Contract Invariants
* `reentrancy`: Reentrancy Properties

Refer to the [Solidity documentation](https://docs.soliditylang.org/en/latest/smtchecker.html#reported-inferred-inductive-invariants) for more information on the invariants.

###### `model_checker.show_unproved`

* Type: boolean
* Default: false
* Environment: N/A

Whether or not to output all unproved targets.

Refer to the [Solidity documentation](https://docs.soliditylang.org/en/latest/smtchecker.html#unproved-targets) for more information.

###### `model_checker.solvers`

* Type: array of strings
* Default: N/A
* Environment: N/A

Sets the model checker solvers. Valid values are:

* `cvc4`
* `eld`: introduced in v0.8.18
* `smtlib2`
* `z3`

Refer to the [Solidity documentation](https://docs.soliditylang.org/en/latest/smtchecker.html#smt-and-horn-solvers) for more information.

###### `model_checker.timeout`

* Type: number (milliseconds)
* Default: N/A
* Environment: N/A

Sets the timeout for the underlying model checker engines (in milliseconds).

###### `model_checker.targets`

* Type: array of strings
* Default: assert
* Environment: N/A

Sets the model checker targets. Valid values are:

* `assert`: Assertions
* `underflow`: Arithmetic underflow
* `overflow`: Arithmetic overflow
* `divByZero`: Division by zero
* `constantCondition`: Trivial conditions and unreachable code
* `popEmptyArray`: Popping an empty array
* `outOfBounds`: Out of bounds array/fixed bytes index access
* `default`: All of the above (note: not the default for Forge)

#### Compilation Restrictions

Compilation restrictions allows configuration of how individual files or directories within projects are compiled.

> For a complex configuration of compiler profiles and compiler restrictions please refer to Uniswap [contracts monorepo](https://github.com/Uniswap/contracts/blob/4d80a9cfed9b920b83a394b168a95319606a0b73/foundry.toml#L27-L72).

For example, with configuration below, `Counter.sol` contract under `src` is compiled with `via-ir` option enabled while all other contracts (including tests) are compiled with the default profile.

```toml
# add via_ir profile
additional_compiler_profiles = [ { name = "via-ir", via_ir = true } ]

# enforce compiling tests without via_ir and only some heavy contract with via_ir
# note: it will only work if tests are using vm.deployCode to deploy contract
compilation_restrictions = [
    { paths = "test/**", via_ir = false },
    { paths = "src/Counter.sol", via_ir = true },
]
```

We can configure how individual files or directories are compiled by specifying the `compilation_restrictions` configuration (which applies to sources importing the restricted file as well).\
Once we have a set of restrictions we need to construct settings objects to satisfy them. This is done by adding `additional_compiler_profiles`, which is a mapping from profile name to settings overrides.

In the example above, we added a single profile named `via-ir` which uses default compilation settings but enables `via_ir` option, making it possible to compile the `Counter.sol` contract with `via_ir`, while all other contracts (including tests) with the default profile.\
When choosing compiler profile, first profile (starting with default one) satisfying restrictions of the source file and all of its imports will be used.

> If the same source file is compiled with several profiles, then an artifact is generated for each profile - if `Counter` is compiled with default and `v1` profile, `Counter.json` and `Counter.v1.json` artifacts are created.

##### Additional compiler settings:

`[additional_compiler_profiles]`

* Type: array of additional compiler profiles

Configures a mapping from profile name to settings overrides.

For example, an additional `via-ir` compiler profile that changes compilation pipeline to go through the new IR optimizer can be defined as:

```toml
additional_compiler_profiles = [ { name = "via-ir", via_ir = true } ]
```

There are several configurable values for a compiler profile:

* `name`
* `via_ir`
* `evm_version`
* `optimizer`
* `optimizer_runs`
* `bytecode_hash`

##### `additional_compiler_profile.name`

* Type: string

Additional compiler profile name.

##### `additional_compiler_profile.via_ir`

* Type: boolean
* Default: false

Additional compiler profile [via\_ir](#via_ir) setting.

##### `additional_compiler_profile.evm_version`

* Type: string
* Default: prague

Additional compiler profile [evm\_version](#evm_version) setting.

##### `additional_compiler_profile.optimizer`

* Type: boolean
* Default: false

Additional compiler profile [optimizer](#optimizer) setting.

##### `additional_compiler_profile.optimizer_runs`

* Type: integer
* Default: 200

Additional compiler profile [optimizer\_runs](#optimizer_runs) setting.

##### `additional_compiler_profile.bytecode_hash`

* Type: string
* Default: ipfs

Additional compiler profile [bytecode\_hash](#bytecode_hash) setting.

##### Compilation restrictions settings:

##### `[compilation_restrictions]`

* Type: array of compilation restrictions settings

##### `compilation_restriction.paths`

* Type: regex

Only applies compilation restrictions on files matching given paths.

For example:

* `src/contracts/Counter.sol` - apply restrictions for specific contract
* `src/contracts/{Counter,CounterFactory}.sol` - apply restrictions for multiple contracts, by name
* `src/v1/**` or `src/v3/**/libraries/**` - apply restrictions for all contracts in matching source path

There are several configurable values for an compilation restriction:

* `version`
* `via_ir`
* `bytecode_hash`
* `optimizer_runs`
* `min_optimizer_runs`
* `max_optimizer_runs`
* `evm_version`
* `min_evm_version`
* `max_evm_version`

##### `compilation_restriction.version`

* Type: string (semver)

Restrict compilation for specific [solc\_version](#solc_version).

##### `compilation_restriction.via_ir`

* Type: boolean

Restrict compilation for specific [via\_ir](#via_ir) setting.

##### `compilation_restriction.bytecode_hash`

* Type: string

Restrict compilation matching provided bytecode hash method.

##### `compilation_restriction.optimizer_runs`

* Type: integer

Restrict compilation for specific [optimizer\_runs](#optimizer_runs) setting. Conflicts with `min_optimizer_runs` and `max_optimizer_runs` settings.

##### `compilation_restriction.min_optimizer_runs`

* Type: integer

Restrict compilation for min of [optimizer\_runs](#optimizer_runs) setting. Conflicts with `optimizer_runs` setting, requires `max_optimizer_runs` setting.

##### `compilation_restriction.max_optimizer_runs`

* Type: integer

Restrict compilation for max of [optimizer\_runs](#optimizer_runs) setting. Conflicts with `optimizer_runs` setting, requires `min_optimizer_runs` setting.

##### `compilation_restriction.evm_version`

* Type: string

Restrict compilation for specific [evm\_version](#evm_version) setting. Conflicts with `min_evm_version` and `max_evm_version` settings.

##### `compilation_restriction.min_evm_version`

* Type: string

Restrict compilation for a min version of [evm\_version](#evm_version) setting. Conflicts with `evm_version` setting, requires `max_evm_version` setting.

##### `compilation_restriction.max_evm_version`

* Type: string

Restrict compilation for a max version of [evm\_version](#evm_version) setting. Conflicts with `evm_version` setting, requires `min_evm_version` setting.


### Testing

Configuration related to the behavior of `forge test`.

**Sections**

* [General](#general)
* [Fuzz](#fuzz)
* [Invariant](#invariant)

#### General

##### `verbosity`

* Type: integer
* Default: 0
* Environment: `FOUNDRY_VERBOSITY` or `DAPP_VERBOSITY`

The verbosity level to use during tests.

* **Level 2 (`-vv`)**: Logs emitted during tests are also displayed.
* **Level 3 (`-vvv`)**: Stack traces for failing tests are also displayed.
* **Level 4 (`-vvvv`)**: Stack traces for all tests are displayed, and setup traces for failing tests are displayed.
* **Level 5 (`-vvvvv`)**: Stack traces and setup traces are always displayed.

##### `ffi`

* Type: boolean
* Default: false
* Environment: `FOUNDRY_FFI` or `DAPP_FFI`

Whether or not to enable the `ffi` cheatcode.

**Warning:** Enabling this cheatcode has security implications for your project, as it allows tests to execute arbitrary programs on your computer.

##### `sender`

* Type: string (address)
* Default: 0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38
* Environment: `FOUNDRY_SENDER` or `DAPP_SENDER`

The value of `msg.sender` in tests.

##### `tx_origin`

* Type: string (address)
* Default: 0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38
* Environment: `FOUNDRY_TX_ORIGIN` or `DAPP_TX_ORIGIN`

The value of `tx.origin` in tests.

##### `initial_balance`

* Type: string (hexadecimal)
* Default: 0xffffffffffffffffffffffff
* Environment: `FOUNDRY_INITIAL_BALANCE` or `DAPP_INITIAL_BALANCE`

The initial balance of the test contracts in wei, written in hexadecimal.

##### `block_number`

* Type: integer
* Default: 1
* Environment: `FOUNDRY_BLOCK_NUMBER` or `DAPP_BLOCK_NUMBER`

The value of `block.number` in tests.

##### `chain_id`

* Type: integer
* Default: 31337
* Environment: `FOUNDRY_CHAIN_ID` or `DAPP_CHAIN_ID`

The value of the `chainid` opcode in tests.

##### `gas_limit`

* Type: integer or string
* Default: 9223372036854775807
* Environment: `FOUNDRY_GAS_LIMIT` or `DAPP_GAS_LIMIT`

The gas limit for each test case.

> ℹ️ **Note**
>
> Due to a limitation in a dependency of Forge, you **cannot raise the gas limit** beyond the default without changing the value to a string.
>
> In order to use higher gas limits use a string:

```toml
gas_limit = "18446744073709551615" # u64::MAX
```

##### `gas_price`

* Type: integer
* Default: 0
* Environment: `FOUNDRY_GAS_PRICE` or `DAPP_GAS_PRICE`

The price of gas (in wei) in tests.

##### `block_base_fee_per_gas`

* Type: integer
* Default: 0
* Environment: `FOUNDRY_BLOCK_BASE_FEE_PER_GAS` or `DAPP_BLOCK_BASE_FEE_PER_GAS`

The base fee per gas (in wei) in tests.

##### `block_coinbase`

* Type: string (address)
* Default: 0x0000000000000000000000000000000000000000
* Environment: `FOUNDRY_BLOCK_COINBASE` or `DAPP_BLOCK_COINBASE`

The value of `block.coinbase` in tests.

##### `block_timestamp`

* Type: integer
* Default: 1
* Environment: `FOUNDRY_BLOCK_TIMESTAMP` or `DAPP_BLOCK_TIMESTAMP`

The value of `block.timestamp` in tests.

##### `block_difficulty`

* Type: integer
* Default: 0
* Environment: `FOUNDRY_BLOCK_DIFFICULTY` or `DAPP_BLOCK_DIFFICULTY`

The value of `block.difficulty` in tests.

##### `gas_reports`

* Type: array of strings (contract names)
* Default: \["\*"]
* Environment: `FOUNDRY_GAS_REPORTS` or `DAPP_GAS_REPORTS`

The contracts to print gas reports for.

##### `no_storage_caching`

* Type: boolean
* Default: false
* Environment: `FOUNDRY_NO_STORAGE_CACHING` or `DAPP_NO_STORAGE_CACHING`

If set to `true`, then block data from RPC endpoints in tests will not be cached. Otherwise, the data is cached to `$HOME/.foundry/cache/<chain id>/<block number>`.

##### `[rpc_storage_caching]`

The `[rpc_storage_caching]` block determines what RPC endpoints are cached.

###### `rpc_storage_caching.chains`

* Type: string or array of strings (chain names)
* Default: all
* Environment: N/A

Determines what chains are cached. By default, all chains are cached.

Valid values are:

* "all"
* A list of chain names, e.g. `["optimism", "mainnet"]`

###### `rpc_storage_caching.endpoints`

* Type: string or array of regex patterns (to match URLs)
* Default: remote
* Environment: N/A

Determines what RPC endpoints are cached. By default, only remote endpoints are cached.

Valid values are:

* all
* remote (default)
* A list of regex patterns, e.g. `["localhost"]`

##### `eth_rpc_url`

* Type: string
* Default: none
* Environment: `FOUNDRY_ETH_RPC_URL` or `DAPP_ETH_RPC_URL`

The url of the rpc server that should be used for any rpc calls.

##### `etherscan_api_key`

* Type: string
* Default: none
* Environment: `FOUNDRY_ETHERSCAN_API_KEY` or `DAPP_ETHERSCAN_API_KEY`

The etherscan API key for RPC calls.

##### `match-test`

* Type: regex
* Default: none
* Environment: `FOUNDRY_MATCH_TEST` or `DAPP_MATCH_TEST`

Only run test methods matching regex.
Equivalent to `forge test --match-test <TEST_PATTERN>`

##### `no-match-test`

* Type: regex
* Default: none
* Environment: `FOUNDRY_NO_MATCH_TEST` or `DAPP_NO_MATCH_TEST`

Only run test methods not matching regex.
Equivalent to `forge test --no-match-test <TEST_PATTERN_INVERSE>`

##### `match-contract`

* Type: regex
* Default: none
* Environment: `FOUNDRY_MATCH_CONTRACT` or `DAPP_MATCH_CONTRACT`

Only run test methods in contracts matching regex.
Equivalent to `forge test --match-contract <CONTRACT_PATTERN>`

##### `no-match-contract`

* Type: regex
* Default: none
* Environment: `FOUNDRY_NO_MATCH_CONTRACT` or `DAPP_NO_MATCH_CONTRACT`

Only run test methods in contracts not matching regex.
Equivalent to `forge test --no-match-contract <CONTRACT_PATTERN_INVERSE>`

##### `match-path`

* Type: regex
* Default: none
* Environment: `FOUNDRY_MATCH_PATH` or `DAPP_MATCH_PATH`

Only runs test methods on files matching the path.
Equivalent to `forge test --match-path <PATH_PATTERN>`

##### `no-match-path`

* Type: regex
* Default: none
* Environment: `FOUNDRY_NO_MATCH_PATH` or `DAPP_NO_MATCH_PATH`

Only runs test methods on files not matching the path.
Equivalent to `forge test --no-match-path <PATH_PATTERN_INVERSE>`

##### `threads`

* Type: integer
* Default: none
* Environment: `FOUNDRY_THREADS`

Number of threads to use.
Not set or zero specifies the number of logical cores.

##### `show_progress`

* Type: boolean
* Default: false
* Environment: `FOUNDRY_SHOW_PROGRESS`

Whether to show test execution progress.

##### `block_gas_limit`

* Type: integer
* Default: none
* Environment: `FOUNDRY_BLOCK_GAS_LIMIT` or `DAPP_BLOCK_GAS_LIMIT`

The block.gaslimit value during EVM execution.

##### `memory_limit`

* Type: integer
* Default: 33554432
* Environment: `FOUNDRY_MEMORY_LIMIT` or `DAPP_MEMORY_LIMIT`

The memory limit of the EVM in bytes.

##### `names`

* Type: boolean
* Default: false
* Environment: `FOUNDRY_NAMES` or `DAPP_NAMES`

Print compiled contract names.

##### `sizes`

* Type: boolean
* Default: false
* Environment: `FOUNDRY_SIZES` or `DAPP_SIZES`

Print compiled contract sizes.

##### `rpc_endpoints`

* Type: table of RPC endpoints
* Default: none
* Environment: none

This section lives outside of profiles and defines a table of RPC endpoints, where the key specifies the RPC endpoints's name and the value is the RPC endpoint itself.

The value can either be a valid RPC endpoint or a reference to an environment variable (wrapped with in `${}`).

These RPC endpoints can be used in tests and Solidity scripts (see [`vm.rpc`](/reference/cheatcodes/rpc)).

The following example defines an endpoint named `optimism` and an endpoint named `mainnet` that references an environment variable `RPC_MAINNET`:

```toml
[rpc_endpoints]
optimism = "https://optimism.alchemyapi.io/v2/..."
mainnet = "${RPC_MAINNET}"
```

##### `prompt_timeout`

* Type: integer
* Default: 120
* Environment: `FOUNDRY_PROMPT_TIMEOUT`

The number of seconds to wait before `vm.prompt` reverts with a timeout.

#### Fuzz

Configuration values for `[fuzz]` section.

##### `runs`

* Type: integer
* Default: 256
* Environment: `FOUNDRY_FUZZ_RUNS` or `DAPP_FUZZ_RUNS`

The amount of fuzz runs to perform for each fuzz test case. Higher values gives more confidence in results at the cost of testing speed.

##### `max_test_rejects`

* Type: integer
* Default: 65536
* Environment: `FOUNDRY_FUZZ_MAX_TEST_REJECTS`

The maximum number of combined inputs that may be rejected before the test as a whole aborts.
"Global" filters apply to the whole test case. If the test case is rejected, the whole thing is regenerated.

##### `seed`

* Type: string (hexadecimal)
* Default: none
* Environment: `FOUNDRY_FUZZ_SEED`

Optional seed for the fuzzing RNG algorithm.

##### `dictionary_weight`

* Type: integer (between 0 and 100)
* Default: 40
* Environment: `FOUNDRY_FUZZ_DICTIONARY_WEIGHT`

The weight of the dictionary. A higher dictionary weight will bias the fuzz inputs towards "interesting" values, e.g. boundary values like `type(uint256).max` or contract addresses from your environment.

##### `include_storage`

* Type: boolean
* Default: true
* Environment: `FOUNDRY_FUZZ_INCLUDE_STORAGE`

The flag indicating whether to include values from storage.

##### `include_push_bytes`

* Type: boolean
* Default: true
* Environment: `FOUNDRY_FUZZ_INCLUDE_PUSH_BYTES`

The flag indicating whether to include push bytes values.

##### `gas_report_samples`

* Type: integer
* Default: 256
* Environment: `FOUNDRY_FUZZ_GAS_REPORT_SAMPLES`

Number of runs to use for generating gas report.

##### `failure_persist_dir`

* Type: string (path)
* Default: `./cache/fuzz`
* Environment: `FOUNDRY_FUZZ_FAILURE_PERSIST_DIR`

Path where fuzz failures are recorded and replayed.

##### `failure_persist_file`

* Type: string
* Default: `failures`
* Environment: `FOUNDRY_FUZZ_FAILURE_PERSIST_FILE`

Name of the file to record fuzz failures.

##### `show_logs`

* Type: boolean
* Default: false
* Environment: `FOUNDRY_FUZZ_SHOW_LOGS`

The flag indicates whether to display console logs in fuzz tests or not. Note that in order to enable displaying console logs, you'll need to set `show_logs = true` and then use `forge test -vv` or set `verbosity >= 2`.

#### Invariant

Configuration values for `[invariant]` section.

> ℹ️ **Note**
>
> Configuration for `[invariant]` section has the fallback logic
> for common config entries (`runs`, `seed`, `dictionary_weight` etc).
>
> * If the entries are not set in either section, then the defaults will be used.
> * If the entries are set in the `[fuzz]` section, but are not set in the `[invariant]`
>   section, these values will automatically be set to the values specified in
>   the `[fuzz]` section.
> * For any profile other than `default`:
>   * If at least one entry is set in the `[invariant]` (same as
>     `[profile.default.invariant]`) section, then the values from
>     `[invariant]` section will be used, including defaults.
>   * If no entry is set in the `[invariant]` section, but there are
>     entries in the `[fuzz]` (same as `[profile.default.fuzz]`) section,
>     then the values from the `[fuzz]` section will be used.
>   * If it's none of the cases described above, then the defaults
>     will be used.

##### `runs`

* Type: integer
* Default: 256
* Environment: `FOUNDRY_INVARIANT_RUNS`

The number of runs that must execute for each invariant test group. See also [fuzz.runs](#runs)

##### `depth`

* Type: integer
* Default: 500
* Environment: `FOUNDRY_INVARIANT_DEPTH`

The number of calls executed to attempt to break invariants in one run.

##### `fail_on_revert`

* Type: boolean
* Default: false
* Environment: `FOUNDRY_INVARIANT_FAIL_ON_REVERT`

Fails the invariant fuzzing if a revert occurs.

##### `call_override`

* Type: boolean
* Default: false
* Environment: `FOUNDRY_INVARIANT_CALL_OVERRIDE`

Overrides unsafe external calls when running invariant tests, useful for e.g. performing reentrancy checks.

##### `dictionary_weight`

* Type: integer (between 0 and 100)
* Default: 80
* Environment: `FOUNDRY_INVARIANT_DICTIONARY_WEIGHT`

The weight of the dictionary. See also [fuzz.dictionary\_weight](#dictionary_weight)

##### `include_storage`

* Type: boolean
* Default: true
* Environment: `FOUNDRY_FUZZ_INCLUDE_STORAGE`

The flag indicating whether to include values from storage. See also [fuzz.include\_storage](#include_storage)

##### `include_push_bytes`

* Type: boolean
* Default: true
* Environment: `FOUNDRY_FUZZ_INCLUDE_PUSH_BYTES`

The flag indicating whether to include push bytes values. See also [fuzz.include\_push\_bytes](#include_push_bytes)

##### `shrink_run_limit`

* Type: integer
* Default: 5000
* Environment: `FOUNDRY_INVARIANT_SHRINK_RUN_LIMIT`

The maximum number of attempts to shrink a failed the sequence. Shrink process is disabled if set to 0.

##### `max_assume_rejects`

* Type: integer
* Default: 65536
* Environment: `FOUNDRY_INVARIANT_MAX_ASSUME_REJECTS`

The maximum number of rejects via `vm.assume` which can be encountered during a single invariant run.

##### `gas_report_samples`

* Type: integer
* Default: 256
* Environment: `FOUNDRY_INVARIANT_GAS_REPORT_SAMPLES`

Number of runs to use for generating gas report.

##### `failure_persist_dir`

* Type: string (path)
* Default: `./cache/invariant`
* Environment: `FOUNDRY_INVARIANT_FAILURE_PERSIST_DIR`

Path where invariant failures are recorded and replayed.

##### `show_metrics`

* Type: boolean
* Default: false
* Environment: `FOUNDRY_INVARIANT_SHOW_METRICS`

The flag indicating whether to collect and display fuzzed selectors metrics in test report.


### Differential Testing

Forge can be used for differential testing and differential fuzzing. You can even test against non-EVM executables using the `ffi` [cheatcode](/reference/cheatcodes/ffi).

#### Background

[Differential testing](https://en.wikipedia.org/wiki/Differential_testing) cross references multiple implementations of the same function by comparing each one's output. Imagine we have a function specification `F(X)`, and two implementations of that specification: `f1(X)` and `f2(X)`. We expect `f1(x) == f2(x)` for all x that exist in an appropriate input space. If `f1(x) != f2(x)`, we know that at least one function is incorrectly implementing `F(X)`. This process of testing for equality and identifying discrepancies is the core of differential testing.

Differential fuzzing is an extension of differential testing. Differential fuzzing programmatically generates many values of `x` to find discrepancies and edge cases that manually chosen inputs might not reveal.

> Note: the `==` operator in this case can be a custom definition of equality. For example, if testing floating point implementations, you might use approximate equality with a certain tolerance.

Some real life uses of this type of testing include:

* Comparing upgraded implementations to their predecessors
* Testing code against known reference implementations
* Confirming compatibility with third party tools and dependencies

Below are some examples of how Forge is used for differential testing.

#### Primer: The `ffi` cheatcode

[`ffi`](/reference/cheatcodes/ffi) allows you to execute an arbitrary shell command and capture the output. Here's a mock example:

```solidity
import {Test} from "forge-std/Test.sol";

contract TestContract is Test {

    function testMyFFI () public {
        string[] memory cmds = new string[](2);
        cmds[0] = "cat";
        cmds[1] = "address.txt"; // assume contains abi-encoded address.
        bytes memory result = vm.ffi(cmds);
        address loadedAddress = abi.decode(result, (address));
        // Do something with the address
        // ...
    }
}
```

An address has previously been written to `address.txt`, and we read it in using the FFI cheatcode. This data can now be used throughout your test contract.

#### Example: Differential Testing Merkle Tree Implementations

[Merkle Trees](https://en.wikipedia.org/wiki/Merkle_tree) are a cryptographic commitment scheme frequently used in blockchain applications. Their popularity has led to a number of different implementations of Merkle Tree generators, provers, and verifiers. Merkle roots and proofs are often generated using a language like JavaScript or Python, while proof verification usually occurs on-chain in Solidity.

[Murky](https://github.com/dmfxyz/murky) is a complete implementation of Merkle roots, proofs, and verification in Solidity. Its test suite includes differential tests against OpenZeppelin's Merkle proof library, as well as root generation tests against a reference JavaScript implementation. These tests are powered by Foundry's fuzzing and `ffi` capabilities.

##### Differential fuzzing against a reference TypeScript implementation

Using the `ffi` cheatcode, Murky tests its own Merkle root implementation against a TypeScript implementation using data provided by Forge's fuzzer:

```solidity
function testMerkleRootMatchesJSImplementationFuzzed(bytes32[] memory leaves) public {
    vm.assume(leaves.length > 1);
    bytes memory packed = abi.encodePacked(leaves);
    string[] memory runJsInputs = new string[](8);

    // Build ffi command string
    runJsInputs[0] = 'npm';
    runJsInputs[1] = '--prefix';
    runJsInputs[2] = 'differential_testing/scripts/';
    runJsInputs[3] = '--silent';
    runJsInputs[4] = 'run';
    runJsInputs[5] = 'generate-root-cli';
    runJsInputs[6] = leaves.length.toString();
    runJsInputs[7] = packed.toHexString();

    // Run command and capture output
    bytes memory jsResult = vm.ffi(runJsInputs);
    bytes32 jsGeneratedRoot = abi.decode(jsResult, (bytes32));

    // Calculate root using Murky
    bytes32 murkyGeneratedRoot = m.getRoot(leaves);
    assertEq(murkyGeneratedRoot, jsGeneratedRoot);
}
```

> Note: see [`Strings2.sol`](https://github.com/dmfxyz/murky/blob/main/differential_testing/test/utils/Strings2.sol) in the Murky Repo for the library that enables `(bytes memory).toHexString()`

Forge runs `npm --prefix differential_testing/scripts/ --silent run generate-root-cli {numLeaves} {hexEncodedLeaves}`. This calculates the Merkle root for the input data using the reference JavaScript implementation. The script prints the root to stdout, and that printout is captured as `bytes` in the return value of `vm.ffi()`.

The test then calculates the root using the Solidity implementation.

Finally, the test asserts that the both roots are exactly equal. If they are not equal, the test fails.

##### Differential fuzzing against OpenZeppelin's Merkle Proof Library

You may want to use differential testing against another Solidity implementation. In that case, `ffi` is not needed. Instead, the reference implementation is imported directly into the test.

```solidity
import {MerkleProof} from "openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol";
//...
function testCompatibilityOpenZeppelinProver(bytes32[] memory _data, uint256 node) public {
    vm.assume(_data.length > 1);
    vm.assume(node < _data.length);
    bytes32 root = m.getRoot(_data);
    bytes32[] memory proof = m.getProof(_data, node);
    bytes32 valueToProve = _data[node];
    bool murkyVerified = m.verifyProof(root, proof, valueToProve);
    bool ozVerified = MerkleProof.verify(proof, root, valueToProve);
    assertTrue(murkyVerified == ozVerified);
}
```

##### Differential testing against a known edge case

Differential tests are not always fuzzed -- they are also useful for testing known edge cases. In the case of the Murky codebase, the initial implementation of the `log2ceil` function did not work for certain arrays whose lengths were close to a power of 2 (like 129). As a safety check, a test is always run against an array of this length and compared to the TypeScript implementation. You can see the full test [here](https://github.com/dmfxyz/murky/blob/main/differential_testing/test/DifferentialTests.t.sol#L21).

##### Standardized Testing against reference data

FFI is also useful for injecting reproducible, standardized data into the testing environment. In the Murky library, it is used as follows:

```solidity
bytes32[100] data;
uint256[8] leaves = [4, 8, 15, 16, 23, 42, 69, 88];

function setUp() public {
    string[] memory inputs = new string[](2);
    inputs[0] = "cat";
    inputs[1] = "src/test/standard_data/StandardInput.txt";
    bytes memory result =  vm.ffi(inputs);
    data = abi.decode(result, (bytes32[100]));
    m = new Merkle();
}

function testMerkleGenerateProofStandard() public view {
    bytes32[] memory _data = _getData();
    for (uint i = 0; i < leaves.length; ++i) {
        m.getProof(_data, leaves[i]);
    }
}
```

`src/test/standard_data/StandardInput.txt` is a text file that contains an encoded `bytes32[100]` array. It's generated outside of the test and can be used in any language's Web3 SDK. It looks something like:

```bash
0xf910ccaa307836354233316666386231414464306335333243453944383735313..423532
```

The standardized testing contract reads in the file using `ffi`. It decodes the data into an array and then, in this example, generates proofs for 8 different leaves. Because the data is constant and standard, we can meaningfully measure gas and performance improvements using this test.

> Of course, one could just hardcode the array into the test! But that makes it much harder to do consistent testing across contracts, implementations, etc.

#### Example: Differential Testing Gradual Dutch Auctions

The reference implementation for Paradigm's [Gradual Dutch Auction](https://www.paradigm.xyz/2022/04/gda) mechanism contains a number of differential, fuzzed tests. It is an excellent repository to further explore differential testing using `ffi`.

* Differential tests for [Discrete GDAs](https://github.com/FrankieIsLost/gradual-dutch-auction/blob/master/src/test/DiscreteGDA.t.sol#L78)
* Differential tests for [Continuous GDAs](https://github.com/FrankieIsLost/gradual-dutch-auction/blob/master/src/test/ContinuousGDA.t.sol#L89)
* Reference [Python implementation](https://github.com/FrankieIsLost/gradual-dutch-auction/blob/master/analysis/compute_price.py)

#### Reference Repositories

* [Gradual Dutch Auctions](https://github.com/FrankieIsLost/gradual-dutch-auction)
* [Murky](https://www.github.com/dmfxyz/murky)
* [Solidity Fuzzing Template](https://github.com/patrickd-/solidity-fuzzing-boilerplate)

If you have another repository that would serve as a reference, please contribute it!


### Fuzz Testing

Forge supports property based testing.

Property-based testing is a way of testing general behaviors as opposed to isolated scenarios.

Let's examine what that means by writing a unit test, finding the general property we are testing for, and converting it to a property-based test instead:

```solidity
// [!include ~/snippets/projects/fuzz_testing/test/Safe.t.sol.1:all]
```

Running the test, we see it passes:

```bash
// [!include ~/snippets/output/fuzz_testing/forge-test-no-fuzz:all]
```

This unit test *does test* that we can withdraw ether from our safe. However, who is to say that it works for all amounts, not just 1 ether?

The general property here is: given a safe balance, when we withdraw, we should get whatever is in the safe.

Forge will run any test that takes at least one parameter as a property-based test, so let's rewrite:

```solidity
// [!include ~/snippets/projects/fuzz_testing/test/Safe.t.sol.2:contract_prelude]
    // ...

// [!include ~/snippets/projects/fuzz_testing/test/Safe.t.sol.2:test]
}
```

If we run the test now, we can see that Forge runs the property-based test, but it fails for high values of `amount`:

```sh
forge test
// [!include ~/snippets/output/fuzz_testing/forge-test-fail-fuzz:output]
```

The default amount of ether that the test contract is given is `2**96 wei` (as in DappTools), so we have to restrict the type of amount to `uint96` to make sure we don't try to send more than we have:

```solidity
// [!include ~/snippets/projects/fuzz_testing/test/Safe.t.sol.3:signature]
```

And now it passes:

```sh
// [!include ~/snippets/output/fuzz_testing/forge-test-success-fuzz:all]
```

You may want to exclude certain cases using the [`assume`](/reference/cheatcodes/assume) cheatcode. In those cases, fuzzer will discard the inputs and start a new fuzz run:

```solidity
function testFuzz_Withdraw(uint96 amount) public {
    vm.assume(amount > 0.1 ether);
    // snip
}
```

There are different ways to run property-based tests, notably parametric testing and fuzzing. Forge only supports fuzzing.

#### Interpreting results

You might have noticed that fuzz tests are summarized a bit differently compared to unit tests:

* "runs" refers to the amount of scenarios the fuzzer tested. By default, the fuzzer will generate 256 scenarios, but this and other test execution parameters can be setup by the user. Fuzzer configuration details are provided [`here`](#configuring-fuzz-test-execution).
* "μ" (Greek letter mu) is the mean gas used across all fuzz runs
* "\~" (tilde) is the median gas used across all fuzz runs

#### Configuring fuzz test execution

Fuzz tests execution is governed by parameters that can be controlled by users via Forge configuration primitives. Configs can be applied globally or on a per-test basis. For details on this topic please refer to
📚 [`Global config`](/config/reference/overview) and 📚 [`In-line config`](/config/reference/inline-test-config).

##### Fuzz test fixtures

Fuzz test fixtures can be defined when you want to make sure a certain set of values is used as inputs for fuzzed parameters.
These fixtures can be declared in tests as:

* storage arrays prefixed with `fixture` and followed by param name to be fuzzed. For example, fixtures to be used when fuzzing parameter `amount` of type `uint32` can be defined as

```solidity
uint32[] public fixtureAmount = [1, 5, 555];
```

* functions named with `fixture` prefix, followed by param name to be fuzzed. Function should return an (fixed size or dynamic) array of values to be used for fuzzing. For example, fixtures to be used when fuzzing parameter named `owner` of type `address` can be defined in a function with signature

```solidity
function fixtureOwner() public returns (address[] memory)
```

If the type of value provided as a fixture is not the same type as the named parameter to be fuzzed then it is rejected and an error is raised.

An example where fixture could be used is to reproduce the `DSChief` vulnerability. Consider the 2 functions

```solidity
    function etch(address yay) public returns (bytes32 slate) {
        bytes32 hash = keccak256(abi.encodePacked(yay));

        slates[hash] = yay;

        return hash;
    }

    function voteSlate(bytes32 slate) public {
        uint weight = deposits[msg.sender];
        subWeight(weight, votes[msg.sender]);
        votes[msg.sender] = slate;
        addWeight(weight, votes[msg.sender]);
    }
```

where the vulnerability can be reproduced by calling `voteSlate` before `etch`, with `slate` value being a hash of `yay` address.
To make sure fuzzer includes in the same run a `slate` value derived from a `yay` address, following fixtures can be defined:

```solidity
    address[] public fixtureYay = [
        makeAddr("yay1"),
        makeAddr("yay2"),
        makeAddr("yay3")
    ];

    bytes32[] public fixtureSlate = [
        keccak256(abi.encodePacked(makeAddr("yay1"))),
        keccak256(abi.encodePacked(makeAddr("yay2"))),
        keccak256(abi.encodePacked(makeAddr("yay3")))
    ];
```

Following image shows how fuzzer generates values with and without fixtures being declared:

![Fuzzer](/fuzzer.png)


## Invariant Testing

### Overview

Invariant testing allows for a set of invariant expressions to be tested against randomized sequences of pre-defined function calls from pre-defined contracts. After each function call is performed, all defined invariants are asserted.

Invariant testing is a powerful tool to expose incorrect logic in protocols. Due to the fact that function call sequences are randomized and have fuzzed inputs, invariant testing can expose false assumptions and incorrect logic in edge cases and highly complex protocol states.

Invariant testing campaigns have two dimensions, `runs` and `depth`:

* `runs`: Number of times that a sequence of function calls is generated and run.
* `depth`: Number of function calls made in a given `run`. Invariants are asserted after each function call is made. If a function call reverts, the `depth` counter still increments.

For long invariant campaigns a `timeout` (in seconds) can be set, ensuring test ends after specified time elapsed.

> ℹ️ **Note**
>
> When implementing invariant tests is important to be aware that for each `invariant_*` function a different EVM executor is created, therefore invariants are not asserted against same EVM state. This means that if `invariant_A()` and `invariant_B()` functions are defined then `invariant_B()` won't be asserted against EVM state of `invariant_A()` (and the other way around).
>
> If you want to assert all invariants at the same time then they can be grouped and run on multiple jobs. For example, assert all invariants using two jobs can be implemented as:
>
> ```Solidity
> function invariant_job1() public {
>    assertInvariants();
> }
>
> function invariant_job2() public {
>    assertInvariants();
> }
>
> function assertInvariants() internal {
>    assertEq(val1, val2);
>    assertEq(val3, val4);
> }
> ```

These and other invariant configuration aspects are explained [`here`](#configuring-invariant-test-execution).

Similar to how standard tests are run in Foundry by prefixing a function name with `test`, invariant tests are denoted by prefixing the function name with `invariant` (e.g., `function invariant_A()`).

`afterInvariant()` function is called at the end of each invariant run (if declared), allowing post campaign processing. This function can be used for logging campaign metrics (e.g. how many times a selector was called) and post fuzz campaign testing (e.g. close out all positions and assert all funds are able to exit the system).

#### Configuring invariant test execution

Invariant tests execution is governed by parameters that can be controlled by users via Forge configuration primitives. Configs can be applied globally or on a per-test basis. For details on this topic please refer to
📚 [`Global config`](/config/reference/overview) and 📚 [`In-line config`](/config/reference/inline-test-config).

### Defining Invariants

Invariants are conditions expressions that should always hold true over the course of a fuzzing campaign. A good invariant testing suite should have as many invariants as possible, and can have different testing suites for different protocol states.

Examples of invariants are:

* *"The xy=k formula always holds"* for Uniswap
* *"The sum of all user balances is equal to the total supply"* for an ERC-20 token.

There are different ways to assert invariants, as outlined in the table below:

<table>
  <tr><th>Type</th><th>Explanation</th><th>Example</th></tr>

  <tr>
    <td>Direct assertions</td>
    <td>Query a protocol smart contract and assert values are as expected.</td>

    <td>
      ```solidity
      assertGe(
          token.totalAssets(),
          token.totalSupply()
      )
      ```
    </td>
  </tr>

  <tr>
    <td>Ghost variable assertions</td>
    <td>Query a protocol smart contract and compare it against a value that has been persisted in the test environment (ghost variable).</td>

    <td>
      ```solidity
      assertEq(
          token.totalSupply(),
          sumBalanceOf
      )
      ```
    </td>
  </tr>

  <tr>
    <td>Deoptimizing (Naive implementation assertions)</td>
    <td>Query a protocol smart contract and compare it against a naive and typically highly gas-inefficient implementation of the same desired logic.</td>

    <td>
      ```solidity
      assertEq(
          pool.outstandingInterest(),
          test.naiveInterest()
      )
      ```
    </td>
  </tr>
</table>

#### Conditional Invariants

Invariants must hold over the course of a given fuzzing campaign, but that doesn't mean they must hold true in every situation. There is the possibility for certain invariants to be introduced/removed in a given scenario (e.g., during a liquidation).

It is not recommended to introduce conditional logic into invariant assertions because they have the possibility of introducing false positives because of an incorrect code path. For example:

```solidity
function invariant_example() external {
    if (protocolCondition) return;

    assertEq(val1, val2);
}
```

In this situation, if `protocolCondition == true`, the invariant is not asserted at all. Sometimes this can be desired behavior, but it can cause issues if the `protocolCondition` is true for the whole fuzzing campaign unexpectedly, or there is a logic error in the condition itself. For this reason its better to try and define an alternative invariant for that condition as well, for example:

```solidity
function invariant_example() external {
    if (protocolCondition) {
        assertLe(val1, val2);
        return;
    };

    assertEq(val1, val2);
}
```

Another approach to handle different invariants across protocol states is to utilize dedicated invariant testing contracts for different scenarios. These scenarios can be bootstrapped using the `setUp` function, but it is more powerful to leverage *invariant targets* to govern the fuzzer to behave in a way that will only yield certain results (e.g., avoid liquidations).

### Invariant Targets

**Target Contracts**: The set of contracts that will be called over the course of a given invariant test fuzzing campaign. This set of contracts defaults to all contracts that were deployed in the `setUp` function, but can be customized to allow for more advanced invariant testing.

**Target Senders**: The invariant test fuzzer picks values for `msg.sender` at random when performing fuzz campaigns to simulate multiple actors in a system by default. If desired, the set of senders can be customized in the `setUp` function.

**Target Interfaces**: The set of addresses and their project identifiers that are not deployed during `setUp` but fuzzed in a forked environment (E.g. `[(0x1, ["IERC20"]), (0x2, ("IOwnable"))]`). This enables targeting of delegate proxies and contracts deployed with `create` or `create2`.

**Target Selectors**: The set of function selectors that are used by the fuzzer for invariant testing. These can be used to use a subset of functions within a given target contract.

**Target Artifacts**: The desired ABI to be used for a given contract. These can be used for proxy contract configurations.

**Target Artifact Selectors**: The desired subset of function selectors to be used within a given ABI to be used for a given contract. These can be used for proxy contract configurations.

Priorities for the invariant fuzzer in the cases of target clashes are:

`targetInterfaces | targetSelectors > excludeSelectors | targetArtifactSelectors > excludeContracts | excludeArtifacts > targetContracts | targetArtifacts`

#### Function Call Probability Distribution

Functions from these contracts will be called at random (with a uniformly distributed probability) with fuzzed inputs.

For example:

```text
targetContract1:
├─ function1: 20%
└─ function2: 20%

targetContract2:
├─ function1: 20%
├─ function2: 20%
└─ function3: 20%
```

This is something to be mindful of when designing target contracts, as target contracts with less functions will have each function called more often due to this probability distribution.

> ℹ️ **Note**
>
> A good practice is to set `show_metrics = true` in order to get a breakdown of all handler function calls and which functions are reverting/getting discarded (through `vm.assume` cheatcode).

#### Invariant Test Helper Functions

Invariant test helper functions are included in [`forge-std`](https://github.com/foundry-rs/forge-std/blob/master/src/StdInvariant.sol) to allow for configurable invariant test setup. The helper functions are outlined below:

| Function                                                                           | Description                                                                                                                                                                                                                                                                                                                                                  |
| ---------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| `excludeContract(address newExcludedContract_)`                                    | Adds a given address to the `_excludedContracts` array. This set of contracts is explicitly excluded from the target contracts.                                                                                                                                                                                                                              |
| `excludeSelector(FuzzSelector memory newExcludedSelector_)`                        | Adds a given `FuzzSelector` to the `_excludedSelectors` array. This set of `FuzzSelector`s is explicitly excluded from the target contract selectors.                                                                                                                                                                                                        |
| `excludeSender(address newExcludedSender_)`                                        | Adds a given address to the `_excludedSenders` array. This set of addresses is explicitly excluded from the target senders.                                                                                                                                                                                                                                  |
| `excludeArtifact(string memory newExcludedArtifact_)`                              | Adds a given string to the `_excludedArtifacts` array. This set of strings is explicitly excluded from the target artifacts.                                                                                                                                                                                                                                 |
| `targetArtifact(string memory newTargetedArtifact_)`                               | Adds a given string to the `_targetedArtifacts` array. This set of strings is used for the target artifacts.                                                                                                                                                                                                                                                 |
| `targetArtifactSelector(FuzzArtifactSelector memory newTargetedArtifactSelector_)` | Adds a given `FuzzArtifactSelector` to the `_targetedArtifactSelectors` array. This set of `FuzzArtifactSelector`s is used for the target artifact selectors.                                                                                                                                                                                                |
| `targetContract(address newTargetedContract_)`                                     | Adds a given address to the `_targetedContracts` array. This set of addresses is used for the target contracts. This array overwrites the set of contracts that was deployed during the `setUp`.                                                                                                                                                             |
| `targetSelector(FuzzSelector memory newTargetedSelector_)`                         | Adds a given `FuzzSelector` to the `_targetedSelectors` array. This set of `FuzzSelector`s is used for the target contract selectors.                                                                                                                                                                                                                        |
| `targetSender(address newTargetedSender_)`                                         | Adds a given address to the `_targetedSenders` array. This set of addresses is used for the target senders.                                                                                                                                                                                                                                                  |
| `targetInterface(FuzzInterface memory newTargetedInterface_)`                      | Adds a given `FuzzInterface` to the `_targetedInterfaces` array. This set of `FuzzInterface` extends the contracts and selectors to fuzz and enables targeting of addresses that are not deployed during `setUp` such as when fuzzing in a forked environment. Also enables targeting of delegate proxies and contracts deployed with `create` or `create2`. |

#### Target Contract Setup

Target contracts can be set up using the following three methods:

1. Contracts that are manually added to the `targetContracts` array are added to the set of target contracts.
2. Contracts that are deployed in the `setUp` function are automatically added to the set of target contracts (only works if no contracts have been manually added using option 1).
3. Contracts that are deployed in the `setUp` can be **removed** from the target contracts if they are added to the `excludeContracts` array.

### Open Testing

The default configuration for target contracts is set to all contracts that are deployed during the setup. For smaller modules and more arithmetic contracts, this works well. For example:

```solidity
contract ExampleContract1 {

    uint256 public val1;
    uint256 public val2;
    uint256 public val3;

    function addToA(uint256 amount) external {
        val1 += amount;
        val3 += amount;
    }

    function addToB(uint256 amount) external {
        val2 += amount;
        val3 += amount;
    }

}
```

This contract could be deployed and tested using the default target contract pattern:

```solidity
contract InvariantExample1 is Test {

    ExampleContract1 foo;

    function setUp() external {
        foo = new ExampleContract1();
    }

    function invariant_A() external {
        assertEq(foo.val1() + foo.val2(), foo.val3());
    }

    function invariant_B() external {
        assertGe(foo.val1() + foo.val2(), foo.val3());
    }

}
```

This setup will call `foo.addToA()` and `foo.addToB()` with a 50%-50% probability distribution with fuzzed inputs. Inevitably, the inputs will start to cause overflows and the function calls will start reverting. Since the default configuration in invariant testing is `fail_on_revert = false`, this will not cause the tests to fail. The invariants will hold throughout the rest of the fuzzing campaign and the result is that the test will pass. The output will look something like this:

```text
[PASS] invariant_A() (runs: 50, calls: 10000, reverts: 5533)
[PASS] invariant_B() (runs: 50, calls: 10000, reverts: 5533)
```

### Handler-Based Testing

For more complex and integrated protocols, more sophisticated target contract usage is required to achieve the desired results. To illustrate how Handlers can be leveraged, the following contract will be used (an ERC-4626 based contract that accepts deposits of another ERC-20 token):

```solidity
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

interface IERC20Like {

    function balanceOf(address owner_) external view returns (uint256 balance_);

    function transferFrom(
        address owner_,
        address recipient_,
        uint256 amount_
    ) external returns (bool success_);

}

contract Basic4626Deposit {

    /**********************************************************************************************/
    /*** Storage                                                                                ***/
    /**********************************************************************************************/

    address public immutable asset;

    string public name;
    string public symbol;

    uint8 public immutable decimals;

    uint256 public totalSupply;

    mapping(address => uint256) public balanceOf;

    /**********************************************************************************************/
    /*** Constructor                                                                            ***/
    /**********************************************************************************************/

    constructor(address asset_, string memory name_, string memory symbol_, uint8 decimals_) {
        asset    = asset_;
        name     = name_;
        symbol   = symbol_;
        decimals = decimals_;
    }

    /**********************************************************************************************/
    /*** External Functions                                                                     ***/
    /**********************************************************************************************/

    function deposit(uint256 assets_, address receiver_) external returns (uint256 shares_) {
        shares_ = convertToShares(assets_);

        require(receiver_ != address(0), "ZERO_RECEIVER");
        require(shares_   != uint256(0), "ZERO_SHARES");
        require(assets_   != uint256(0), "ZERO_ASSETS");

        totalSupply += shares_;

        // Cannot overflow because totalSupply would first overflow in the statement above.
        unchecked { balanceOf[receiver_] += shares_; }

        require(
            IERC20Like(asset).transferFrom(msg.sender, address(this), assets_),
            "TRANSFER_FROM"
        );
    }

    function transfer(address recipient_, uint256 amount_) external returns (bool success_) {
        balanceOf[msg.sender] -= amount_;

        // Cannot overflow because minting prevents overflow of totalSupply,
        // and sum of user balances == totalSupply.
        unchecked { balanceOf[recipient_] += amount_; }

        return true;
    }

    /**********************************************************************************************/
    /*** Public View Functions                                                                  ***/
    /**********************************************************************************************/

    function convertToShares(uint256 assets_) public view returns (uint256 shares_) {
        uint256 supply_ = totalSupply;  // Cache to stack.

        shares_ = supply_ == 0 ? assets_ : (assets_ * supply_) / totalAssets();
    }

    function totalAssets() public view returns (uint256 assets_) {
        assets_ = IERC20Like(asset).balanceOf(address(this));
    }

}

```

#### Handler Functions

This contract's `deposit` function requires that the caller has a non-zero balance of the ERC-20 `asset`. In the Open invariant testing approach, `deposit()` and `transfer()` would be called with a 50-50% distribution, but they would revert on every call. This would cause the invariant tests to "pass", but in reality no state was manipulated in the desired contract at all. This is where target contracts can be leveraged. When a contract requires some additional logic in order to function properly, it can be added in a dedicated contract called a `Handler`.

```solidity
function deposit(uint256 assets) public virtual {
    asset.mint(address(this), assets);

    asset.approve(address(token), assets);

    uint256 shares = token.deposit(assets, address(this));
}
```

This contract will provide the necessary setup before a function call is made in order to ensure it is successful.

Building on this concept, Handlers can be used to develop more sophisticated invariant tests. With Open invariant testing, the tests run as shown in the diagram below, with random sequences of function calls being made to the protocol contracts directly with fuzzed parameters. This will cause reverts for more complex systems as outlined above.

![Blank diagram](https://user-images.githubusercontent.com/44272939/214752968-5f0e7653-d52e-43e6-b453-cac935f5d97d.svg)

By manually adding all Handler contracts to the `targetContracts` array, all function calls made to protocol contracts can be made in a way that is governed by the Handler to ensure successful calls. This is outlined in the diagram below.

![Invariant Diagrams - Page 2](https://user-images.githubusercontent.com/44272939/216420091-8a5c2bcc-d586-458f-be1e-a9ea0ef5961f.svg)

With this layer between the fuzzer and the protocol, more powerful testing can be achieved.

#### Handler Ghost Variables

Within Handlers, "ghost variables" can be tracked across multiple function calls to add additional information for invariant tests. A good example of this is summing all of the `shares` that each LP owns after depositing into the ERC-4626 token as shown above, and using that in the invariant (`totalSupply == sumBalanceOf`).

```solidity
function deposit(uint256 assets) public virtual {
    asset.mint(address(this), assets);

    asset.approve(address(token), assets);

    uint256 shares = token.deposit(assets, address(this));

    sumBalanceOf += shares;
}
```

#### Function-Level Assertions

Another benefit is the ability to perform assertions on function calls as they are happening. An example is asserting the ERC-20 balance of the LP has decremented by `assets` during the `deposit` function call, as well as their LP token balance incrementing by `shares`. In this way, handler functions are similar to fuzz tests because they can take in fuzzed inputs, perform state changes, and assert before/after state.

```solidity
function deposit(uint256 assets) public virtual {
    asset.mint(address(this), assets);

    asset.approve(address(token), assets);

    uint256 beforeBalance = asset.balanceOf(address(this));

    uint256 shares = token.deposit(assets, address(this));

    assertEq(asset.balanceOf(address(this)), beforeBalance - assets);

    sumBalanceOf += shares;
}
```

#### Bounded/Unbounded Functions

In addition, with Handlers, input parameters can be bounded to reasonable expected values such that `fail_on_revert` in `foundry.toml` can be set to `true`. This can be accomplished using the `bound()` helper function from `forge-std`. This ensures that every function call that is being made by the fuzzer must be successful against the protocol in order to get tests to pass. This is very useful for visibility and confidence that the protocol is being tested in the desired way.

```solidity
function deposit(uint256 assets) external {
    assets = bound(assets, 0, 1e30);

    asset.mint(address(this), assets);

    asset.approve(address(token), assets);

    uint256 beforeBalance = asset.balanceOf(address(this));

    uint256 shares = token.deposit(assets, address(this));

    assertEq(asset.balanceOf(address(this)), beforeBalance - assets);

    sumBalanceOf += shares;
}
```

This can also be accomplished by inheriting non-bounded functions from dedicated "unbounded" Handler contracts that can be used for `fail_on_revert = false` testing. This type of testing is also useful since it can expose issues in assumptions made with `bound` function usage.

```solidity
// Unbounded
function deposit(uint256 assets) public virtual {
    asset.mint(address(this), assets);

    asset.approve(address(token), assets);

    uint256 beforeBalance = asset.balanceOf(address(this));

    uint256 shares = token.deposit(assets, address(this));

    assertEq(asset.balanceOf(address(this)), beforeBalance - assets);

    sumBalanceOf += shares;
}
```

```solidity
// Bounded
function deposit(uint256 assets) external {
    assets = bound(assets, 0, 1e30);

    super.deposit(assets);
}
```

#### Actor Management

In the function calls above, it can be seen that `address(this)` is the sole depositor in the ERC-4626 contract, which is not a realistic representation of its intended use. By leveraging the `prank` cheatcodes in `forge-std`, each Handler can manage a set of actors and use them to perform the same function call from different `msg.sender` addresses. This can be accomplished using the following modifier:

```solidity
address[] public actors;

address internal currentActor;

modifier useActor(uint256 actorIndexSeed) {
    currentActor = actors[bound(actorIndexSeed, 0, actors.length - 1)];
    vm.startPrank(currentActor);
    _;
    vm.stopPrank();
}
```

Using multiple actors allows for more granular ghost variable usage as well. This is demonstrated in the functions below:

```solidity
// Unbounded
function deposit(
    uint256 assets,
    uint256 actorIndexSeed
) public virtual useActor(actorIndexSeed) {
    asset.mint(currentActor, assets);

    asset.approve(address(token), assets);

    uint256 beforeBalance = asset.balanceOf(address(this));

    uint256 shares = token.deposit(assets, address(this));

    assertEq(asset.balanceOf(address(this)), beforeBalance - assets);

    sumBalanceOf += shares;

    sumDeposits[currentActor] += assets
}
```

```solidity
// Bounded
function deposit(uint256 assets, uint256 actorIndexSeed) external {
    assets = bound(assets, 0, 1e30);

    super.deposit(assets, actorIndexSeed);
}
```


### Advanced Testing

Forge comes with a number of advanced testing methods:

* [Table Testing](/forge/advanced-testing/table-testing)
* [Fuzz Testing](/forge/advanced-testing/fuzz-testing)
* [Invariant Testing](/forge/advanced-testing/invariant-testing)
* [Differential Testing](/forge/advanced-testing/differential-ffi-testing)

In the future, Forge will also support these:

* [Symbolic Execution](#)
* [Mutation Testing](#)

Each chapter dives into what problem the testing methods solve, and how to apply them to your own project.


### Table Testing

Foundry v1.3.0 comes with support for table testing, which enables the definition of a dataset (the "table") and the execution of a test function for each entry in that dataset. This approach helps ensure that certain combinations of inputs and conditions are tested.

##### Test definition

In forge, table tests are functions named with `table` prefix that accepts datasets as one or multiple arguments:

```solidity
function tableSumsTest(TestCase memory testCaseSum) public
```

```solidity
function tableSumsTest(TestCase memory testCaseSum, bool enable) public
```

The datasets are defined as forge fixtures which can be:

* storage arrays prefixed with `fixture` prefix and followed by dataset name
* functions named with `fixture` prefix, followed by dataset name. Function should return an (fixed size or dynamic) array of values.

##### Examples

* Single dataset. In following example, `tableSumsTest` test will be executed twice, with inputs from `fixtureSums` dataset: once with `TestCase(1, 2, 3)` and once with `TestCase(4, 5, 9)`.

```solidity
struct TestCase {
    uint256 a;
    uint256 b;
    uint256 expected;
}
    
function fixtureSums() public returns (TestCase[] memory) {
    TestCase[] memory entries = new TestCase[](2);
    entries[0] = TestCase(1, 2, 3);
    entries[1] = TestCase(4, 5, 9);
    return entries;
}

function tableSumsTest(TestCase memory sums) public pure {
    require(sums.a + sums.b == sums.expected, "wrong sum");
}
```

* Multiple datasets. `tableSwapTest` test will be executed twice, by using values at the same position from `fixtureWallet` and `fixtureSwap` datasets.

```solidity
struct Wallet {
    address owner;
    uint256 amount;
}

struct Swap {
    bool swap;
    uint256 amount;
}
    
Wallet[] public fixtureWallet;
Swap[] public fixtureSwap;

function setUp() public {
    // first table test input
    fixtureWallet.push(Wallet(address(11), 11));
    fixtureSwap.push(Swap(true, 11));

    // second table test input
    fixtureWallet.push(Wallet(address(12), 12));        
    fixtureSwap.push(Swap(false, 12));
}

function tableSwapTest(Wallet memory wallet, Swap memory swap) public pure {
    require(
        (wallet.owner == address(11) && swap.swap) || (wallet.owner == address(12) && !swap.swap), "not allowed"
    );
}
```


### Gas Function Snapshots

Forge can generate gas snapshots for all your test functions. This can
be useful to get a general feel for how much gas your contract will consume,
or to compare gas usage before and after various optimizations.

To generate the gas snapshot, run [`forge snapshot`](/forge/reference/forge-snapshot).

This will generate a file called `.gas-snapshot` by default with all your
tests and their respective gas usage.

```
forge snapshot
cat .gas-snapshot

ERC20Test:testApprove() (gas: 31162)
ERC20Test:testBurn() (gas: 59875)
ERC20Test:testRevertTransferFromInsufficientAllowance() (gas: 81034)
ERC20Test:testRevertTransferFromInsufficientBalance() (gas: 81662)
ERC20Test:testRevertTransferInsufficientBalance() (gas: 52882)
ERC20Test:testInfiniteApproveTransferFrom() (gas: 90167)
ERC20Test:testMetadata() (gas: 14606)
ERC20Test:testMint() (gas: 53830)
ERC20Test:testTransfer() (gas: 60473)
ERC20Test:testTransferFrom() (gas: 84152)
```

#### Filtering

If you would like to specify a different output file, run `forge snapshot --snap <FILE_NAME>`.

You can also sort the results by gas usage. Use the `--asc` option to sort the results in
ascending order and `--desc` to sort the results in descending order.

Finally, you can also specify a min/max gas threshold for all your tests.
To only include results above a threshold, you can use the `--min <VALUE>` option.
In the same way, to only include results under a threshold,
you can use the `--max <VALUE>` option.

Keep in mind that the changes will be made in the snapshot file, and not in the snapshot being
displayed on your screen.

You can also use it in combination with the filters for `forge test`, such as `forge snapshot --match-path contracts/test/ERC721.t.sol` to generate a gas snapshot relevant to this test contract.

#### Comparing gas usage

If you would like to compare the current snapshot file with your
latest changes, you can use the `--diff` or `--check` options.

`--diff` will compare against the snapshot and display changes from the snapshot.

It can also optionally take a file name (`--diff <FILE_NAME>`), with the default
being `.gas-snapshot`.

For example:

```
forge snapshot --diff .gas-snapshot2

Running 10 tests for src/test/ERC20.t.sol:ERC20Test
[PASS] testApprove() (gas: 31162)
[PASS] testBurn() (gas: 59875)
[PASS] testRevertTransferFromInsufficientAllowance() (gas: 81034)
[PASS] testRevertTransferFromInsufficientBalance() (gas: 81662)
[PASS] testRevertTransferInsufficientBalance() (gas: 52882)
[PASS] testInfiniteApproveTransferFrom() (gas: 90167)
[PASS] testMetadata() (gas: 14606)
[PASS] testMint() (gas: 53830)
[PASS] testTransfer() (gas: 60473)
[PASS] testTransferFrom() (gas: 84152)
Test result: ok. 10 passed; 0 failed; finished in 2.86ms
testBurn() (gas: 0 (0.000%))
testRevertTransferFromInsufficientAllowance() (gas: 0 (0.000%))
testRevertTransferFromInsufficientBalance() (gas: 0 (0.000%))
testRevertTransferInsufficientBalance() (gas: 0 (0.000%))
testInfiniteApproveTransferFrom() (gas: 0 (0.000%))
testMetadata() (gas: 0 (0.000%))
testMint() (gas: 0 (0.000%))
testTransfer() (gas: 0 (0.000%))
testTransferFrom() (gas: 0 (0.000%))
testApprove() (gas: -8 (-0.000%))
Overall gas change: -8 (-0.000%)
```

`--check` will compare a snapshot with an existing snapshot file and display all the
differences, if any. You can change the file to compare against by providing a different file name: `--check <FILE_NAME>`.

For example:

```
forge snapshot --check .gas-snapshot2

Running 10 tests for src/test/ERC20.t.sol:ERC20Test
[PASS] testApprove() (gas: 31162)
[PASS] testBurn() (gas: 59875)
[PASS] testRevertTransferFromInsufficientAllowance() (gas: 81034)
[PASS] testRevertTransferFromInsufficientBalance() (gas: 81662)
[PASS] testRevertTransferInsufficientBalance() (gas: 52882)
[PASS] testInfiniteApproveTransferFrom() (gas: 90167)
[PASS] testMetadata() (gas: 14606)
[PASS] testMint() (gas: 53830)
[PASS] testTransfer() (gas: 60473)
[PASS] testTransferFrom() (gas: 84152)
Test result: ok. 10 passed; 0 failed; finished in 2.47ms
Diff in "ERC20Test::testApprove()": consumed "(gas: 31162)" gas, expected "(gas: 31170)" gas
```


### Gas Reports

Forge can produce gas reports for your contracts. You can configure which contracts output gas reports via the `gas_reports` field in `foundry.toml`.

To produce reports for specific contracts:

```toml
gas_reports = ["MyContract", "MyContractFactory"]
```

To produce reports for all contracts:

```toml
gas_reports = ["*"]
```

To generate gas reports, run `forge test --gas-report`.

You can also use it in combination with other subcommands, such as `forge test --match-test testBurn --gas-report`, to generate only a gas report relevant to this test.

Example output:

```
╭───────────────────────┬─────────────────┬────────┬────────┬────────┬─────────╮
│ MockERC1155 contract  ┆                 ┆        ┆        ┆        ┆         │
╞═══════════════════════╪═════════════════╪════════╪════════╪════════╪═════════╡
│ Deployment Cost       ┆ Deployment Size ┆        ┆        ┆        ┆         │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ 1082720               ┆ 5440            ┆        ┆        ┆        ┆         │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ Function Name         ┆ min             ┆ avg    ┆ median ┆ max    ┆ # calls │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ balanceOf             ┆ 596             ┆ 596    ┆ 596    ┆ 596    ┆ 44      │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ balanceOfBatch        ┆ 2363            ┆ 4005   ┆ 4005   ┆ 5647   ┆ 2       │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ batchBurn             ┆ 2126            ┆ 5560   ┆ 2584   ┆ 11970  ┆ 3       │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ batchMint             ┆ 2444            ┆ 135299 ┆ 125081 ┆ 438531 ┆ 18      │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ burn                  ┆ 814             ┆ 2117   ┆ 2117   ┆ 3421   ┆ 2       │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ isApprovedForAll      ┆ 749             ┆ 749    ┆ 749    ┆ 749    ┆ 1       │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ mint                  ┆ 26039           ┆ 31943  ┆ 27685  ┆ 118859 ┆ 22      │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ safeBatchTransferFrom ┆ 2561            ┆ 137750 ┆ 126910 ┆ 461304 ┆ 8       │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ safeTransferFrom      ┆ 1335            ┆ 34505  ┆ 28103  ┆ 139557 ┆ 9       │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ setApprovalForAll     ┆ 24485           ┆ 24485  ┆ 24485  ┆ 24485  ┆ 12      │
╰───────────────────────┴─────────────────┴────────┴────────┴────────┴─────────╯

╭───────────────────────┬─────────────────┬────────┬────────┬────────┬─────────╮
│ Example contract      ┆                 ┆        ┆        ┆        ┆         │
╞═══════════════════════╪═════════════════╪════════╪════════╪════════╪═════════╡
│ Deployment Cost       ┆ Deployment Size ┆        ┆        ┆        ┆         │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ 1082720               ┆ 5440            ┆        ┆        ┆        ┆         │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ Function Name         ┆ min             ┆ avg    ┆ median ┆ max    ┆ # calls │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ foo                   ┆ 596             ┆ 596    ┆ 596    ┆ 596    ┆ 44      │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ bar                   ┆ 2363            ┆ 4005   ┆ 4005   ┆ 5647   ┆ 2       │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ baz                   ┆ 2126            ┆ 5560   ┆ 2584   ┆ 11970  ┆ 3       │
╰───────────────────────┴─────────────────┴────────┴────────┴────────┴─────────╯
```

You can also ignore contracts via the `gas_reports_ignore` field in `foundry.toml`:

```toml
gas_reports_ignore = ["Example"]
```

This would change the output to:

```
╭───────────────────────┬─────────────────┬────────┬────────┬────────┬─────────╮
│ MockERC1155 contract  ┆                 ┆        ┆        ┆        ┆         │
╞═══════════════════════╪═════════════════╪════════╪════════╪════════╪═════════╡
│ Deployment Cost       ┆ Deployment Size ┆        ┆        ┆        ┆         │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ 1082720               ┆ 5440            ┆        ┆        ┆        ┆         │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ Function Name         ┆ min             ┆ avg    ┆ median ┆ max    ┆ # calls │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ balanceOf             ┆ 596             ┆ 596    ┆ 596    ┆ 596    ┆ 44      │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ balanceOfBatch        ┆ 2363            ┆ 4005   ┆ 4005   ┆ 5647   ┆ 2       │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ batchBurn             ┆ 2126            ┆ 5560   ┆ 2584   ┆ 11970  ┆ 3       │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ batchMint             ┆ 2444            ┆ 135299 ┆ 125081 ┆ 438531 ┆ 18      │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ burn                  ┆ 814             ┆ 2117   ┆ 2117   ┆ 3421   ┆ 2       │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ isApprovedForAll      ┆ 749             ┆ 749    ┆ 749    ┆ 749    ┆ 1       │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ mint                  ┆ 26039           ┆ 31943  ┆ 27685  ┆ 118859 ┆ 22      │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ safeBatchTransferFrom ┆ 2561            ┆ 137750 ┆ 126910 ┆ 461304 ┆ 8       │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ safeTransferFrom      ┆ 1335            ┆ 34505  ┆ 28103  ┆ 139557 ┆ 9       │
├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤
│ setApprovalForAll     ┆ 24485           ┆ 24485  ┆ 24485  ┆ 24485  ┆ 12      │
╰───────────────────────┴─────────────────┴────────┴────────┴────────┴─────────╯
```


import GasSnapshots from "../../reference/cheatcodes/gas-snapshots.mdx";

## Gas Section Snapshots

Forge can capture gas snapshots over arbitrary sections inside of your test functions. This can be useful to get a granular measurement of how much gas your logic is consuming as both external calls and internal gas usage are measured.

Instead of running a command like `forge snapshot` or `forge test --gas-report`, you use the `snapshotGas` [cheatcodes](/reference/cheatcodes/gas-snapshots) in your tests to capture gas usage as follows:

<GasSnapshots />


### Gas Tracking

Forge can help you estimate how much gas your contract will consume.

Currently, Forge ships with three different tools for this job:

* [**Gas reports**](/forge/gas-tracking/gas-reports): Gas reports give you an overview of how much Forge thinks the
  individual functions in your contracts will consume in gas.
* [**Gas function snapshots**](/forge/gas-tracking/gas-function-snapshots): Gas function snapshots give you an overview of how much
  each test function consumes in gas.
* [**Gas section snapshots**](/forge/gas-tracking/gas-section-snapshots): Gas section snapshots give you the ability to capture gas usage over arbitrary sections inside of test functions.
  This also tracks internal gas usage. You can access this by using the `snapshotGas*` cheatcodes inside your tests.

Gas reports, gas function snapshots and gas section snapshots differ in some ways:

* Gas reports use tracing to figure out gas costs for individual contract calls.\
  This gives more granular insight, at the cost of speed.
* Gas function snapshots have more built-in tools, such as diffs and exporting the results to a file.
  Snapshots are not as granular as gas reports, but they are faster to generate.
* Gas section snapshots provides the most granular way to capture gas usage. Every captured gas snapshot is written to a file in a `snapshots` directory.
  By default these snapshots are grouped by the contract name of the test.


### Cheatcodes

Most of the time, simply testing your smart contracts outputs isn't enough. To manipulate the state of the blockchain, as well as test for specific reverts and events, Foundry is shipped with a set of cheatcodes.

Cheatcodes allow you to change the block number, your identity, and more. They are invoked by calling specific functions on a specially designated address: `0x7109709ECfa91a80626fF3989D68f67F5b1DD12D`.

You can access cheatcodes easily via the `vm` instance available in Forge Standard Library's `Test` contract. Forge Standard Library is explained in greater detail in the following [section](/forge/tests/forge-std).

Let's write a test for a smart contract that is only callable by its owner.

```solidity
// [!include ~/snippets/projects/cheatcodes/test/OwnerUpOnly.t.sol:prelude]

// [!include ~/snippets/projects/cheatcodes/test/OwnerUpOnly.t.sol:contract]

// [!include ~/snippets/projects/cheatcodes/test/OwnerUpOnly.t.sol:contract_prelude]

// [!include ~/snippets/projects/cheatcodes/test/OwnerUpOnly.t.sol:simple_test]
}
```

If we run `forge test` now, we will see that the test passes, since `OwnerUpOnlyTest` is the owner of `OwnerUpOnly`.

```sh
forge test
// [!include ~/snippets/output/cheatcodes/forge-test-simple:output}]
```

Let's make sure that someone who is definitely not the owner can't increment the count, by using the `expectRevert` cheatcode:

```solidity
// [!include ~/snippets/projects/cheatcodes/test/OwnerUpOnly.t.sol:contract_prelude]

    // ...

// [!include ~/snippets/projects/cheatcodes/test/OwnerUpOnly.t.sol:test_expectrevert]
}
```

If we run `forge test` one last time, we see that the test still passes, but this time we are sure that it will always fail if we revert for any other reason.

```bash
forge test
// [!include ~/snippets/output/cheatcodes/forge-test-cheatcodes-expectrevert:output]
```

Another cheatcode that is perhaps not so intuitive is the `expectEmit` function. Before looking at `expectEmit`, we need to understand what an event is.

Events are inheritable members of contracts. When you emit an event, the arguments are stored on the blockchain. The `indexed` attribute can be added to a maximum of three parameters of an event to form a data structure known as a "topic." Topics allow users to search for events on the blockchain.

```solidity
// [!include ~/snippets/projects/cheatcodes/test/EmitContract.t.sol:all]
```

When we call `vm.expectEmit(true, true, false, true);`, we want to check the 1st and 2nd `indexed` topic for the next event.

The expected `Transfer` event in `test_ExpectEmit()` means we are expecting that `from` is `address(this)`, and `to` is `address(1337)`. This is compared against the event emitted from `emitter.t()`.

In other words, we are checking that the first topic from `emitter.t()` is equal to `address(this)`. The 3rd argument in `expectEmit` is set to `false` because there is no need to check the third topic in the `Transfer` event, since there are only two. It does not matter even if we set to `true`.

The 4th argument in `expectEmit` is set to `true`, which means that we want to check "non-indexed topics", also known as data.

For example, we want the data from the expected event in `test_ExpectEmit` - which is `amount` - to equal to the data in the actual emitted event. In other words, we are asserting that `amount` emitted by `emitter.t()` is equal to `1337`. If the fourth argument in `expectEmit` was set to `false`, we would not check `amount`.

In other words, `test_ExpectEmit_DoNotCheckData` is a valid test case, even though the amounts differ, since we do not check the data.

<br />

:::info
See the [Cheatcodes Reference](/reference/cheatcodes/overview) for a complete overview of all the available cheatcodes.
:::


### Forge Standard Library Overview

Forge Standard Library (Forge Std for short) is a collection of helpful contracts that make writing tests easier, faster, and more user-friendly.

Using Forge Std is the preferred way of writing tests with Foundry.

It provides all the essential functionality you need to get started writing tests:

* `Vm.sol`: Up-to-date cheatcodes interface
* `console.sol` and `console2.sol`: Hardhat-style logging functionality
* `Script.sol`: Basic utilities for [scripting with Solidity](/guides/scripting-with-solidity)
* `Test.sol`: A superset of DSTest containing standard libraries, a cheatcodes instance (`vm`), and Hardhat console

Simply import `Test.sol` and inherit from `Test` in your test contract:

```solidity
import {Test} from "forge-std/Test.sol";

contract ContractTest is Test { ...
```

Now, you can:

```solidity
// Access Hevm via the `vm` instance
vm.startPrank(alice);

// Assert and log using Dappsys Test
assertEq(dai.balanceOf(alice), 10000e18);

// Log with the Hardhat `console` (`console2`)
console.log(alice.balance);

// Use anything from the Forge Std std-libraries
deal(address(dai), alice, 10000e18);
```

To import the `Vm` interface or the `console` library individually:

```solidity
import {Vm} from "forge-std/Vm.sol";
```

```solidity
import {console} from "forge-std/console.sol";
```

**Note:** `console2.sol` contains patches to `console.sol` that allows Forge to decode traces for calls to the console, but it is not compatible with Hardhat.

```solidity
import {console2} from "forge-std/console2.sol";
```

#### Standard libraries

Forge Std currently consists of six standard libraries.

##### Std Logs

Std Logs expand upon the logging events from the [`DSTest`](/reference/ds-test#logging) library.

##### Std Assertions

Std Assertions expand upon the assertion functions from the [`DSTest`](/reference/ds-test#asserting) library.

##### Std Cheats

Std Cheats are wrappers around Forge cheatcodes that make them safer to use and improve the DX.

You can access Std Cheats by simply calling them inside your test contract, as you would any other internal function:

```solidity
// set up a prank as Alice with 100 ETH balance
hoax(alice, 100 ether);
```

##### Std Errors

Std Errors provide wrappers around common internal Solidity errors and reverts.

Std Errors are most useful in combination with the [`expectRevert`](/reference/cheatcodes/expect-revert) cheatcode, as you do not need to remember the internal Solidity panic codes yourself. Note that you have to access them through `stdError`, as this is a library.

```solidity
// expect an arithmetic error on the next call (e.g. underflow)
vm.expectRevert(stdError.arithmeticError);
```

##### Std Storage

Std Storage makes manipulating contract storage easy. It can find and write to the storage slot(s) associated with a particular variable.

The `Test` contract already provides a `StdStorage` instance `stdstore` through which you can access any std-storage functionality. Note that you must add `using stdStorage for StdStorage` in your test contract first.

```solidity
// find the variable `score` in the contract `game`
// and change its value to 10
stdstore
    .target(address(game))
    .sig(game.score.selector)
    .checked_write(10);
```

##### Std Math

Std Math is a library with useful mathematical functions that are not provided in Solidity.

Note that you have to access them through `stdMath`, as this is a library.

```solidity
// get the absolute value of -10
uint256 ten = stdMath.abs(-10)
```

<br />

:::info
See the [Forge Standard Library Reference](/reference/forge-std/overview) for a complete overview of Forge Standard Library.
:::


### Fork Testing

Forge supports testing in a forked environment with two different approaches:

* [**Forking Mode**](#forking-mode) — use a single fork for all your tests via the `forge test --fork-url` flag
* [**Forking Cheatcodes**](#forking-cheatcodes) — create, select, and manage multiple forks directly in Solidity test code via [forking cheatcodes](/reference/cheatcodes/forking)

Which approach to use? Forking mode affords running an entire test suite against a specific forked environment, while forking cheatcodes provide more flexibility and expressiveness to work with multiple forks in your tests. Your particular use case and testing strategy will help inform which approach to use.

#### Forking Mode

To run all tests in a forked environment, such as a forked Ethereum mainnet, pass an RPC URL via the `--fork-url` flag:

```bash
forge test --fork-url <your_rpc_url>
```

The following values are changed to reflect those of the chain at the moment of forking:

* [`block_number`](/config/reference/testing#block_number)
* [`chain_id`](/config/reference/testing#chain_id)
* [`gas_limit`](/config/reference/testing#gas_limit)
* [`gas_price`](/config/reference/testing#gas_price)
* [`block_base_fee_per_gas`](/config/reference/testing#block_base_fee_per_gas)
* [`block_coinbase`](/config/reference/testing#block_coinbase)
* [`block_timestamp`](/config/reference/testing#block_timestamp)
* [`block_difficulty`](/config/reference/testing#block_difficulty)

It is possible to specify a block from which to fork with `--fork-block-number`:

```bash
forge test --fork-url <your_rpc_url> --fork-block-number 1
```

Forking is especially useful when you need to interact with existing contracts. You may choose to do integration testing this way, as if you were on an actual network.

##### Caching

If both `--fork-url` and `--fork-block-number` are specified, then data for that block is cached for future test runs.

The data is cached in `~/.foundry/cache/rpc/<chain name>/<block number>`. To clear the cache, simply remove the directory or run [`forge clean`](/forge/reference/forge-clean) (removes all build artifacts and cache directories).

It is also possible to ignore the cache entirely by passing `--no-storage-caching`, or with `foundry.toml` by configuring [`no_storage_caching`](/config/reference/testing#no_storage_caching) and [`rpc_storage_caching`](/config/reference/testing#rpc_storage_caching).

##### Improved traces

Forge supports identifying contracts in a forked environment with Etherscan.

To use this feature, pass the Etherscan API key via the `--etherscan-api-key` flag:

```bash
forge test --fork-url <your_rpc_url> --etherscan-api-key <your_etherscan_api_key>
```

Alternatively, you can set the `ETHERSCAN_API_KEY` environment variable.

#### Forking Cheatcodes

Forking cheatcodes allow you to enter forking mode programmatically in your Solidity test code. Instead of configuring forking mode via `forge` CLI arguments, these cheatcodes allow you to use forking mode on a test-by-test basis and work with multiple forks in your tests. Each fork is identified via its own unique `uint256` identifier.

##### Usage

Important to keep in mind that *all* test functions are isolated, meaning each test function is executed with a *copy* of the state *after* `setUp` and is executed in its own stand-alone EVM.

Therefore forks created during `setUp` are available in tests. The code example below uses [`createFork`](/reference/cheatcodes/create-fork) to create two forks, but does *not* select one initially. Each fork is identified with a unique identifier (`uint256 forkId`), which is assigned when it is first created.

Enabling a specific fork is done via passing that `forkId` to [`selectFork`](/reference/cheatcodes/select-fork).

[`createSelectFork`](/reference/cheatcodes/create-select-fork) is a one-liner for `createFork` plus `selectFork`.

There can only be one fork active at a time, and the identifier for the currently active fork can be retrieved via [`activeFork`](/reference/cheatcodes/active-fork).

Similar to [`roll`](/reference/cheatcodes/roll), you can set `block.number` of a fork with [`rollFork`](/reference/cheatcodes/roll-fork).

To understand what happens when a fork is selected, it is important to know how the forking mode works in general:

Each fork is a standalone EVM, i.e. all forks use completely independent storage. The only exception is the state of the `msg.sender` and the test contract itself, which are persistent across fork swaps.
In other words all changes that are made while fork `A` is active (`selectFork(A)`) are only recorded in fork `A`'s storage and are not available if another fork is selected. However, changes recorded in the test contract itself (variables) are still available because the test contract is a *persistent* account.

The `selectFork` cheatcode sets the *remote* section with the fork's data source, however the *local* memory remains persistent across fork swaps. This also means `selectFork` can be called at all times with any fork, to set the *remote* data source. However, it is important to keep in mind the above rules for `read/write` access always apply, meaning *writes* are persistent across fork swaps.

##### Examples

##### Create and Select Forks

```solidity
contract ForkTest is Test {
    // the identifiers of the forks
    uint256 mainnetFork;
    uint256 optimismFork;

    //Access variables from .env file via vm.envString("varname")
    //Replace ALCHEMY_KEY by your alchemy key or Etherscan key, change RPC url if need
    //inside your .env file e.g:
    //MAINNET_RPC_URL = 'https://eth-mainnet.g.alchemy.com/v2/ALCHEMY_KEY'
    //string MAINNET_RPC_URL = vm.envString("MAINNET_RPC_URL");
    //string OPTIMISM_RPC_URL = vm.envString("OPTIMISM_RPC_URL");

    // create two _different_ forks during setup
    function setUp() public {
        mainnetFork = vm.createFork(MAINNET_RPC_URL);
        optimismFork = vm.createFork(OPTIMISM_RPC_URL);
    }

    // demonstrate fork ids are unique
    function testForkIdDiffer() public {
        assert(mainnetFork != optimismFork);
    }

    // select a specific fork
    function testCanSelectFork() public {
        // select the fork
        vm.selectFork(mainnetFork);
        assertEq(vm.activeFork(), mainnetFork);

        // from here on data is fetched from the `mainnetFork` if the EVM requests it and written to the storage of `mainnetFork`
    }

    // manage multiple forks in the same test
    function testCanSwitchForks() public {
        vm.selectFork(mainnetFork);
        assertEq(vm.activeFork(), mainnetFork);

        vm.selectFork(optimismFork);
        assertEq(vm.activeFork(), optimismFork);
    }

    // forks can be created at all times
    function testCanCreateAndSelectForkInOneStep() public {
        // creates a new fork and also selects it
        uint256 anotherFork = vm.createSelectFork(MAINNET_RPC_URL);
        assertEq(vm.activeFork(), anotherFork);
    }

    // set `block.number` of a fork
    function testCanSetForkBlockNumber() public {
        vm.selectFork(mainnetFork);
        vm.rollFork(1_337_000);

        assertEq(block.number, 1_337_000);
    }
}
```

##### Separated and persistent storage

As mentioned each fork is essentially an independent EVM with separated storage.

Only the accounts of `msg.sender` and the test contract (`ForkTest`) are persistent when forks are selected. But any account can be turned into a persistent account: [`makePersistent`](/reference/cheatcodes/make-persistent).

An account that is *persistent* is unique, i.e. it exists on all forks

```solidity
contract ForkTest is Test {
    // the identifiers of the forks
    uint256 mainnetFork;
    uint256 optimismFork;

    //Access variables from .env file via vm.envString("varname")
    //Replace ALCHEMY_KEY by your alchemy key or Etherscan key, change RPC url if need
    //inside your .env file e.g:
    //MAINNET_RPC_URL = 'https://eth-mainnet.g.alchemy.com/v2/ALCHEMY_KEY'
    //string MAINNET_RPC_URL = vm.envString("MAINNET_RPC_URL");
    //string OPTIMISM_RPC_URL = vm.envString("OPTIMISM_RPC_URL");

    // create two _different_ forks during setup
    function setUp() public {
        mainnetFork = vm.createFork(MAINNET_RPC_URL);
        optimismFork = vm.createFork(OPTIMISM_RPC_URL);
    }

    // creates a new contract while a fork is active
    function testCreateContract() public {
        vm.selectFork(mainnetFork);
        assertEq(vm.activeFork(), mainnetFork);

        // the new contract is written to `mainnetFork`'s storage
        SimpleStorageContract simple = new SimpleStorageContract();

        // and can be used as normal
        simple.set(100);
        assertEq(simple.value(), 100);

        // after switching to another contract we still know `address(simple)` but the contract only lives in `mainnetFork`
        vm.selectFork(optimismFork);

        /* this call will therefore revert because `simple` now points to a contract that does not exist on the active fork
        * it will produce following revert message:
        *
        * "Contract 0xCe71065D4017F316EC606Fe4422e11eB2c47c246 does not exist on active fork with id `1`
        *       But exists on non active forks: `[0]`"
        */
        simple.value();
    }

     // creates a new _persistent_ contract while a fork is active
     function testCreatePersistentContract() public {
        vm.selectFork(mainnetFork);
        SimpleStorageContract simple = new SimpleStorageContract();
        simple.set(100);
        assertEq(simple.value(), 100);

        // mark the contract as persistent so it is also available when other forks are active
        vm.makePersistent(address(simple));
        assert(vm.isPersistent(address(simple)));

        vm.selectFork(optimismFork);
        assert(vm.isPersistent(address(simple)));

        // This will succeed because the contract is now also available on the `optimismFork`
        assertEq(simple.value(), 100);
     }
}

contract SimpleStorageContract {
    uint256 public value;

    function set(uint256 _value) public {
        value = _value;
    }
}
```

For more details and examples, see the [forking cheatcodes](/reference/cheatcodes/forking) reference.

#### EVM version

Proper configuration is needed to execute forked tests with chains using different EVM versions:

* if same EVM version applies for all forked chains used, then it can be globally configured in `foundry.toml` file

```toml
evm_version = "prague"
```

* if different EVM versions are used, specific EVM test version can be set using inline configuration

```solidity
/// forge-config: default.evm_version = "shanghai"
```


### Tests

Forge can run your tests with the [`forge test`](/forge/reference/forge-test) command. All tests are written in Solidity.

Forge will look for the tests anywhere in your source directory. Any contract with a function that starts with `test` is considered to be a test. Usually, tests will be placed in `test/` by convention and end with `.t.sol`.

Here's an example of running `forge test` in a freshly created project, that only has the default test:

```sh
// [!include ~/snippets/output/hello_foundry/forge-test:all]
```

You can also run specific tests by passing a filter:

```sh
// [!include ~/snippets/output/test_filters/forge-test-match-contract-and-test:all]
```

This will run the tests in the `ComplicatedContractTest` test contract with `testDeposit` in the name.
Inverse versions of these flags also exist (`--no-match-contract` and `--no-match-test`).

You can run tests in filenames that match a glob pattern with `--match-path`.

```sh
// [!include ~/snippets/output/test_filters/forge-test-match-path:all]
```

The inverse of the `--match-path` flag is `--no-match-path`.

#### Logs and traces

The default behavior for `forge test` is to only display a summary of passing and failing tests. You can control this behavior by increasing the verbosity (using the `-v` flag). Each level of verbosity adds more information:

* **Level 2 (`-vv`)**: Logs emitted during tests are also displayed. That includes assertion errors from tests, showing information such as expected vs actual.
* **Level 3 (`-vvv`)**: Stack traces for failing tests are also displayed.
* **Level 4 (`-vvvv`)**: Stack traces for all tests are displayed, and setup traces for failing tests are displayed.
* **Level 5 (`-vvvvv`)**: Stack traces and setup traces are always displayed.

#### Watch mode

Forge can re-run your tests when you make changes to your files using `forge test --watch`.

By default, only changed test files are re-run. If you want to re-run all tests on a change, you can use `forge test --watch --run-all`.


### Replaying Failures

Forge supports incrementally replaying last test run failures by persisting them on the disk.

#### Rerun failures

The `--rerun` option can be used to omit successful tests and replay recorded failures only:

```bash
forge test --rerun
```

The failed tests are written in `~/.foundry/cache/test-failures` file. This file is updated each time `forge test` is performed, so it reflects failures from the last run.

#### Fuzz tests failures

Forge saves all fuzz tests counterexamples and replays them before new test campaigns are started (This is done in order to ensure there is no regression introduced).
Fuzz tests failures encountered in several runs are by default persisted in `~/.foundry/cache/fuzz/failures` file. The file content is not replaced by subsequent test runs, but new records are added to existing entries.

The default file used to persist and rerun fuzz test failures from can be changed in foundry.toml:

```toml
[fuzz]
failure_persist_file="/tests/failures.txt"
```

or by using inline config

```solidity
/// forge-config: default.fuzz.failure-persist-file = /tests/failures.txt
```

#### Invariant tests failures

Failures from invariant tests are saved and replayed before new test campaigns are started, similar with fuzz tests. The difference is that the failed sequences are persisted in individual files, with specific `~/.foundry/cache/invariant/failures/{TEST_SUITE_NAME}/{INVARIANT_NAME}` default path. Content of this file is replaced only when a different counterexample is found.

The default directory to persist invariant test failures can be changed in foundry.toml:

```toml
[invariant]
failure_persist_dir="/tests/dir"
```

or by using inline config

```Solidity
/// forge-config: default.invariant.failure-persist-dir = /tests/dir
```

#### Remove persisted failures

To ignore saved failures and start a clean test campaign, simply remove the persisted files or run [`forge clean`](/forge/reference/forge-clean) (removes all build artifacts and cache directories).


### Understanding Traces

Forge can produce traces either for failing tests (`-vvv`) or all tests (`-vvvv`).

Traces follow the same general format:

```
  [<Gas Usage>] <Contract>::<Function>(<Parameters>)
    ├─ [<Gas Usage>] <Contract>::<Function>(<Parameters>)
    │   └─ ← <Return Value>
    └─ ← <Return Value>
```

Each trace can have many more subtraces, each denoting a call to a contract and a return value.

If your terminal supports color, the traces will also come with a variety of colors:

* **Green**: For calls that do not revert
* **Red**: For reverting calls
* **Blue**: For calls to cheat codes
* **Cyan**: For emitted logs
* **Yellow**: For contract deployments

The gas usage (marked in square brackets) is for the entirety of the function call. You may notice, however, that sometimes the gas usage of one trace does not exactly match the gas usage of all its subtraces:

```
  [24661] OwnerUpOnlyTest::testIncrementAsOwner()
    ├─ [2262] OwnerUpOnly::count()
    │   └─ ← 0
    ├─ [20398] OwnerUpOnly::increment()
    │   └─ ← ()
    ├─ [262] OwnerUpOnly::count()
    │   └─ ← 1
    └─ ← ()
```

The gas unaccounted for is due to some extra operations happening between calls, such as arithmetic and store reads/writes.

Forge will try to decode as many signatures and values as possible, but sometimes this is not possible. In these cases, the traces will appear like so:

```
  [<Gas Usage>] <Address>::<Calldata>
    └─ ← <Return Data>
```

Some traces might be harder to grasp at first glance. These include:

* The `OOG` shorthand stands for "Out Of Gas".
* The acronym `EOF` stands for "Ethereum Object Format", which introduces an extensible and versioned container format for EVM bytecode. For more information, read [here](https://evmobjectformat.org/).
* `NotActivated` means the feature or opcode is not activated. Some versions of the EVM only support certain opcodes. You may need to use a more recent version using the `--evm_version` flag. For example, the `PUSH0` opcode is only available since the [Shanghai](https://www.evm.codes/?fork=shanghai) hardfork.
* `InvalidFEOpcode` means that an undefined bytecode value has been encountered during execution. The EVM catches the unknown bytecode and returns the `INVALID` opcode instead, of value `0xFE`. You can find out more [here](https://www.evm.codes/#fe).

For a deeper insight into the various traces, you can explore the [revm source code](https://github.com/bluealloy/revm/blob/main/crates/interpreter/src/instruction_result.rs).


### Writing Tests

Tests are written in Solidity. If the test function reverts, the test fails, otherwise it passes.

Let's go over the most common way of writing tests, using the [Forge Standard Library](https://github.com/foundry-rs/forge-std)'s `Test` contract, which is the preferred way of writing tests with Forge.

In this section, we'll go over the basics using the functions from the Forge Std's `Test` contract, which is itself a superset of [DSTest](https://github.com/dapphub/ds-test). You will learn how to use more advanced stuff from the Forge Standard Library [soon](/forge/tests/forge-std).

DSTest provides basic logging and assertion functionality. To get access to the functions, import `forge-std/Test.sol` and inherit from `Test` in your test contract:

```solidity
// [!include ~/snippets/projects/writing_tests/test/Basic.t.sol:import]
```

Let's examine a basic test:

```solidity
// [!include ~/snippets/projects/writing_tests/test/Basic.t.sol:all]
```

Forge uses the following keywords in tests:

* `setUp`: An optional function invoked before each test case is run.

```solidity
// [!include ~/snippets/projects/writing_tests/test/Basic.t.sol:setUp]
```

* `test`: Functions prefixed with `test` are run as a test case.

```solidity
// [!include ~/snippets/projects/writing_tests/test/Basic.t.sol:testNumberIs42]
```

A good practice is to use the pattern `test_Revert[If|When]_Condition` in combination with the [`expectRevert`](/reference/cheatcodes/expect-revert) cheatcode (cheatcodes are explained in greater detail in the following [section](/forge/tests/cheatcodes)). Also, other testing practices can be found in the [Guides section](/guides/best-practices/writing-tests).

> **Note**: To use `stdError` constants (like `arithmeticError` in the example below), make sure to import `StdError.sol`:
>
> ```solidity
> import {stdError} from "forge-std/StdError.sol";
> ```

In this way you know exactly what reverted and with which error:

```solidity
// [!include ~/snippets/projects/writing_tests/test/Basic2.t.sol:testCannotSubtract43]
```

<br />

Tests are deployed to `0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84`. If you deploy a contract within your test, then
`0xb4c...7e84` will be its deployer. If the contract deployed within a test gives special permissions to its deployer,
such as `Ownable.sol`'s `onlyOwner` modifier, then the test contract `0xb4c...7e84` will have those permissions.

> ⚠️ **Note**
>
> Test functions must have either `external` or `public` visibility. Functions declared as `internal` or
> `private` won't be picked up by Forge, even if they are prefixed with `test`.

#### Before test setups

Unit and fuzz tests are stateless and are executed as single transactions, meaning that the state modified by a test won't be available for a different one (instead, they'll use the same state created by `setUp` call).
It is possible to simulate multiple transactions in a single test, with a dependency tree, by implementing the `beforeTestSetup` function.

* `beforeTestSetup`: Optional function that configures a set of transactions to be executed before test.

```solidity
function beforeTestSetup(
    bytes4 testSelector
) public returns (bytes[] memory beforeTestCalldata)
```

where

* `bytes4 testSelector` is the selector of the test for which transactions are applied
* `bytes[] memory beforeTestCalldata` is an array of arbitrary calldata applied before test execution

> 💡 **Tip**
>
> This setup can be used for chaining tests or for scenarios when a test needs certain transactions committed before test run (e.g. when using `selfdestruct`).
> The test fails if any of the configured transaction reverts.

For example, in contract below, `testC` is configured to use state modified by `testA` and `setB(uint256)` functions:

```solidity
contract ContractTest is Test {
    uint256 a;
    uint256 b;

    function beforeTestSetup(
        bytes4 testSelector
    ) public pure returns (bytes[] memory beforeTestCalldata) {
        if (testSelector == this.testC.selector) {
            beforeTestCalldata = new bytes[](2);
            beforeTestCalldata[0] = abi.encodePacked(this.testA.selector);
            beforeTestCalldata[1] = abi.encodeWithSignature("setB(uint256)", 1);
        }
    }

    function testA() public {
        require(a == 0);
        a += 1;
    }

    function setB(uint256 value) public {
        b = value;
    }

    function testC() public {
        assertEq(a, 1);
        assertEq(b, 1);
    }
}
```

#### Shared setups

It is possible to use shared setups by creating helper abstract contracts and inheriting them in your test contracts:

```solidity
abstract contract HelperContract {
    address constant IMPORTANT_ADDRESS = 0x543d...;
    SomeContract someContract;
    constructor() {...}
}

contract MyContractTest is Test, HelperContract {
    function setUp() public {
        someContract = new SomeContract(0, IMPORTANT_ADDRESS);
        ...
    }
}

contract MyOtherContractTest is Test, HelperContract {
    function setUp() public {
        someContract = new SomeContract(1000, IMPORTANT_ADDRESS);
        ...
    }
}
```

<br />

:::tip
Use the [`getCode`](/reference/cheatcodes/get-code) cheatcode to deploy contracts with incompatible Solidity versions.
:::


### forge Commands

* [General Commands](/forge/reference/general-commands.mdx)
* [Project Commands](/forge/reference/project-commands.mdx)
* [Build Commands](/forge/reference/build-commands.mdx)
* [Test Commands](/forge/reference/test-commands.mdx)
* [Deploy Commands](/forge/reference/deploy-commands.mdx)
* [Utility Commands](/forge/reference/utility-commands.mdx)


### Build Commands

* [forge build](/forge/reference/forge-build.mdx)
* [forge clean](/forge/reference/forge-clean.mdx)
* [forge inspect](/forge/reference/forge-inspect.mdx)


##### Common Options

`-h`\
`--help`\
    Prints help information.


##### Compiler Options

`--optimize`\
    Activate the Solidity optimizer.

`--optimizer-runs` *runs*\
    The number of optimizer runs.

`--via-ir`\
    Use the Yul intermediate representation compilation pipeline.

`--revert-strings`\
    How to treat revert and require reason strings.

`--use` *solc\_version*\
    Specify the solc version, or a path to a local solc, to build with.

    Valid values are in the format `x.y.z`, `solc:x.y.z` or `path/to/solc`.

`--offline`\
    Do not access the network. Missing solc versions will not be installed.

`--no-auto-detect`\
    Do not auto-detect solc.

`--ignored-error-codes` *error\_codes*\
    Ignore solc warnings by error code. The parameter is a comma-separated list of error codes.

`--extra-output` *selector*\
    Extra output to include in the contract's artifact.

    Example keys: `abi`, `storageLayout`, `evm.assembly`, `ewasm`, `ir`, `ir-optimized`, `metadata`.

    For a full description, see the [Solidity docs][output-desc].

`--extra-output-files` *selector*\
    Extra output to write to separate files.

    Example keys: `abi`, `storageLayout`, `evm.assembly`, `ewasm`, `ir`, `ir-optimized`, `metadata`.

    For a full description, see the [Solidity docs][output-desc].

`--evm-version` *version*\
    The target EVM version.

[output-desc]: https://docs.soliditylang.org/en/latest/using-the-compiler.html#compiler-api


import CompilerOptions from "./compiler-options.mdx";
import ProjectOptions from "./project-options.mdx";

##### Cache Options

`--force`\
    Clear the cache and artifacts folder and recompile.

##### Linker Options

`--libraries` *libraries*\
    Set pre-linked libraries.

    The parameter must be in the format `<remapped path to lib>:<library name>:<address>`, e.g. `src/Contract.sol:Library:0x...`.

    Can also be set in your configuration file as `libraries = ["<path>:<lib name>:<address>"]`.

<CompilerOptions />

<ProjectOptions />

`-o` *path*\
`--out` *path*\
    The project's artifacts directory.

`--silent`\
    Suppress all output.


### Deploy Commands

* [forge create](/forge/reference/forge-create.mdx)
* [forge verify-contract](/forge/reference/forge-verify-contract.mdx)
* [forge verify-check](/forge/reference/forge-verify-check.mdx)
* [forge flatten](/forge/reference/forge-flatten.mdx)


##### EVM Options

`-f` *url*\
`--rpc-url` *url*\
`--fork-url` *url*\
    Fetch state over a remote endpoint instead of starting from an empty state.

    In most cases, `--rpc-url` is preferred for specifying network connections, including custom chains.

    If you want to fetch state from a specific block number, see
`--fork-block-number`.

`--fork-block-number` *block*\
    Fetch state from a specific block number over a remote endpoint. See `--fork-url`.

`--fork-retry-backoff <BACKOFF>`\
     Initial retry backoff on encountering errors.

`--no-storage-caching`\
    Explicitly disables the use of RPC caching.

    All storage slots are read entirely from the endpoint. See `--fork-url`.

`-v`\
`--verbosity`\
    Verbosity of the EVM.

    Pass multiple times to increase the verbosity (e.g. `-v`, `-vv`, `-vvv`).

    Verbosity levels:\
    - 2: Print logs for all tests\
    - 3: Print execution traces for failing tests\
    - 4: Print execution traces for all tests, and setup traces for failing tests\
    - 5: Print execution and setup traces for all tests

`--sender` *address*\
    The address which will be executing tests

`--initial-balance` *balance*\
    The initial balance of deployed contracts

`--ffi`\
    Enables the [FFI cheatcode][ffi-cheatcode]

[ffi-cheatcode]: ../../cheatcodes/ffi.md


##### Executor Options

`--base-fee <FEE>`\
`--block-base-fee-per-gas <FEE>`\
    The base fee in a block (in wei).

`--block-coinbase` *address*\
    The coinbase of the block.

`--block-difficulty` *difficulty*\
    The block difficulty.

`--block-gas-limit` *gas\_limit*\
    The block gas limit.

`--block-number` *block*\
    The block number.

`--block-timestamp` *timestamp*\
    The timestamp of the block (in seconds).

`--chain-id` *chain\_id*\
    The chain ID.

`--gas-limit` *gas\_limit*\
    The block gas limit.

`--gas-price` *gas\_price*\
    The gas price (in wei).

`--tx-origin` *address*\
    The transaction origin.


import CommonOptions from "./common-options.mdx";
import CoreBuildOptions from "./core-build-options.mdx";

### forge bind

#### NAME

forge-bind - Generate Rust bindings for smart contracts.

#### SYNOPSIS

`forge bind` \[*options*]

#### DESCRIPTION

Generates Rust bindings for smart contracts using [alloy](https://github.com/alloy-rs/alloy).

The bindings are generated from the project's artifacts, which by default is `./out/`.
If you want to generate bindings for artifacts in a different directory, pass `--bindings-path <PATH>`.

There are three output options:

* Generate bindings in a crate (default)
* Generate bindings in a module by passing `--module`
* Generate bindings in a single file by passing `--single-file`

By default, the command will check that existing bindings are correct and exit accordingly.
You can overwrite the existing bindings by passing `--overwrite`.

#### OPTIONS

##### Project Options

`-b` *path*\
`--bindings-path` *path*\
    The project's root path. By default, this is the root directory of the current git repository, or the current working directory.

`--crate-name` *name*\
    The name of the Rust crate to generate, if you are generating a crate (default).\
    This should be a valid crates.io crate name.

    Default: foundry-contracts

`--crate-version` *semver*\
    The version of the Rust crate to generate, if you are generating a crate (default).\
    This should be a standard semver version string.

    Default: 0.0.1

`--module`\
    Generate the bindings as a module instead of a crate.

`--single-file`\
    Generate bindings as a single file.

`--overwrite`\
    Overwrite existing generated bindings. By default, the command will check that the bindings are correct, and then exit.\
    If `--overwrite` is passed, it will instead delete and overwrite the bindings.

`--root` *path*\
    The project's root path. By default, this is the root directory of the current git repository, or the current working directory.

`--skip-cargo-toml`\
    Skip Cargo.toml consistency checks.\
    This allows you to manage the [alloy](https://github.com/alloy-rs/alloy) version without giving up on consistency checks.\
    An example would be if you use additional features of alloy and get a version mismatch.

`--skip-build`\
    Skips running forge build before generating binding.\
    This allows you to skip the default `forge build` step that's executed first and instead generate bindings using the already existing artifacts.

`--skip-extra-derives`\
    Don't add any additional derives to generated bindings.

`--alloy-version` *version*\
    Specify the `alloy` version on Crates.

`--alloy-rev` *rev*\
    Specify the `alloy` revision on GitHub.

`--select-all`\
    By default all contracts ending with `Test` or `Script` are excluded. This will explicitly generate bindings for all contracts. Conflicts with `--select` and `--skip`.

`--select` *regex+*\
    Create bindings only for contracts whose names match the specified filter(s). Conflicts with `--skip`.

`--skip` *regex+*\
    Create bindings only for contracts whose names do not match the specified filter(s). Conflicts with `--select`.

<CommonOptions />

<CoreBuildOptions />

#### SEE ALSO

[forge](/forge/reference/overview)


import CoreBuildOptions from "./core-build-options.mdx";
import WatchOptions from "./watch-options.mdx";
import CommonOptions from "./common-options.mdx";

### forge build

#### NAME

forge-build - Build the project's smart contracts.

#### SYNOPSIS

`forge build` or `forge b` \[*options*]

#### DESCRIPTION

Build the project's smart contracts.

The command will try to detect the latest version that can compile your project by looking at the
version requirements of all your contracts and dependencies.

You can override this behaviour by passing `--no-auto-detect`. Alternatively, you can pass `--use <SOLC_VERSION>`.

If the command detects that the Solidity compiler version it is using to build is not installed,
it will download it and install it in `~/.svm`. You can disable this behavior by passing `--offline`.

The build is incremental, and the build cache is saved in `cache/` in the project root by default. If you
want to clear the cache, pass `--force`, and if you want to change the cache directory, pass `--cache-path <PATH>`.

It is possible to choose sources to build by specifying multiple path options (can be paths to source directories or files).

##### Build Modes

There are three build modes:

* Just compilation (default): Builds the project and saves the contract artifacts in `out/` (or the path specified by `--out <PATH>`).
* Size mode (`--sizes`): Builds the project, displays the size of non-test contracts and exits with code 1 if any of them are above the size limit.
* Name mode (`--names`): Builds the project, displays the names of the contracts and exits.

##### The Optimizer

You can enable the optimizer by passing `--optimize`, and you can adjust the number of optimizer runs by passing `--optimizer-runs <RUNS>`.

You can also opt-in to the Solidity IR compilation pipeline by passing `--via-ir`. Read more about the IR pipeline in the \[Solidity docs]\[ir-pipeline].

By default, the optimizer is enabled and runs for 200 cycles.

##### Conditional Optimizer Usage

Many projects use the solc optimizer, either through the standard compilation pipeline or the IR pipeline. But in some cases, the optimizer can significantly slow down compilation speeds.

A config file for a project using the optimizer may look like this for regular compilation:

```toml
[profile.default]
solc-version = "0.8.17"
optimizer = true
optimizer-runs = 10_000_000
```

Or like this for `via-ir`:

```toml
[profile.default]
solc-version = "0.8.17"
via_ir = true
```

To reduce compilation speeds during development and testing, one approach is to have a `lite` profile that has the optimizer off and use this for development/testing cycle. The updated config file for regular compilation may look like this:

```toml
[profile.default]
solc-version = "0.8.17"
optimizer = true
optimizer-runs = 10_000_000

[profile.lite]
optimizer = false
```

Or like this for `via-ir`:

```toml
[profile.default]
solc-version = "0.8.17"
via_ir = true

[profile.lite.optimizer_details.yulDetails]
optimizerSteps = ''
```

When setup like this, `forge build` (or `forge test` / `forge script`) still uses the standard profile, so by default a `forge script` invocation will deploy your contracts with the production setting. Running `FOUNDRY_PROFILE=lite forge build` (and again, same for the test and script commands) will use the lite profile to reduce compilation times.

> There are additional optimizer details you can configure, see the [Additional Optimizer Settings](#additional-optimizer-settings) section below for more info.

##### Artifacts

You can add extra output from the Solidity compiler to your artifacts by passing `--extra-output <SELECTOR>`.

The selector is a path in the Solidity compiler output, which you can read more about in the \[Solidity docs]\[output-desc].

You can also write some of the compiler output to separate files by passing `--extra-output-files <SELECTOR>`.

Valid selectors for `--extra-output-files` are:

* `metadata`: Written as a `metadata.json` file in the artifacts directory
* `ir`: Written as a `.ir` file in the artifacts directory
* `irOptimized`: Written as a `.iropt` file in the artifacts directory
* `ewasm`: Written as a `.ewasm` file in the artifacts directory
* `evm.assembly`: Written as a `.asm` file in the artifacts directory

##### Watch Mode

The command can be run in watch mode by passing `--watch [PATH...]`, which will rebuild every time a
watched file or directory is changed. The source directory is watched by default.

##### Sparse Mode (experimental)

Sparse mode only compiles files that match certain criteria.

By default, this filter applies to files that have not been changed since the last build, but for commands that
take file filters (e.g. [forge test](/forge/reference/forge-test.mdx)), sparse mode will only recompile files that match the filter.

Sparse mode is opt-in until the feature is stabilized. To opt-in to sparse mode and try it out, set \[`sparse_mode`]\[sparse-mode]
in your configuration file.

##### Additional Optimizer Settings

The optimizer can be fine-tuned with additional settings. Simply set the `optimizer_details` table in your configuration file. For example:

```toml
[profile.default.optimizer_details]
constantOptimizer = true
yul = true

[profile.default.optimizer_details.yulDetails]
stackAllocation = true
optimizerSteps = 'dhfoDgvulfnTUtnIf'
```

See the [compiler input description documentation](https://docs.soliditylang.org/en/latest/using-the-compiler.html#compiler-input-and-output-json-description)
for more information on available settings (specifically `settings.optimizer.details`).

##### Revert Strings

You can control how revert strings are generated by the compiler. By default, only user supplied revert strings are included in the bytecode, but there are other options:

* `strip`: Removes all revert strings (if possible, i.e. if literals are used) keeping side-effects.
* `debug`: Injects strings for compiler-generated internal reverts, implemented for ABI encoders V1 and V2 for now.
* `verboseDebug`: Appends further information to user-supplied revert strings (not yet implemented).

##### Additional Model Checker settings

[Solidity's built-in model checker](https://docs.soliditylang.org/en/latest/smtchecker.html#tutorial) is an opt-in module that can be enabled via the `ModelChecker` object.

See [Compiler Input Description `settings.modelChecker`](https://docs.soliditylang.org/en/latest/using-the-compiler.html#compiler-input-and-output-json-description) and [the model checker's options](https://docs.soliditylang.org/en/latest/smtchecker.html#smtchecker-options-and-tuning).

The module is available in `solc` release binaries for OSX and Linux. The latter requires the z3 library version \[4.8.8, 4.8.14] to be installed in the system (SO version 4.8).

Similarly to the optimizer settings above, the `model_checker` settings must be prefixed with the profile they correspond to: `[profile.default.model_checker]` belongs to the `[profile.default]`.

```toml
## foundry.toml
[profile.default.model_checker]
contracts = { '/path/to/project/src/Contract.sol' = [ 'Contract' ] }
engine = 'chc'
timeout = 10000
targets = [ 'assert' ]
```

The fields above are recommended when using the model checker.
Setting which contract should be verified is extremely important, otherwise all available contracts will be verified which can consume a lot of time.
The recommended engine is `chc`, but `bmc` and `all` (runs both) are also accepted.
It is also important to set a proper timeout (given in milliseconds), since the default time given to the underlying solvers may not be enough.
If no verification targets are given, only assertions will be checked.

The model checker will run when `forge build` is invoked, and will show findings as warnings if any.

#### OPTIONS

##### Build Options

`--names`
    Print compiled contract names.

`--sizes`
    Print compiled non-test contract sizes, exiting with code 1 if any of them are above the size limit.

`--skip`
    Skip compilation of non-essential contract directories like test or script (usage `--skip test`).

`[PATHS]...`    Build source files from specified paths.

<CoreBuildOptions />

<WatchOptions />

<CommonOptions />

#### EXAMPLES

1. Build the project:

   ```sh
   forge build
   ```

2. Build the project with solc 0.6.0:

   ```sh
   forge build --use solc:0.6.0
   ```

3. Build the project with additional artifact output:

   ```sh
   forge build --extra-output evm.assembly
   ```

4. Build the project in watch mode:

   ```sh
   forge build --watch
   ```

5. Build source files from `test/invariant` directory and `test/RegressionTest.sol`:
   ```sh
   forge build test/invariant test/RegressionTest.sol
   ```

#### SEE ALSO

[forge](/forge/reference/overview), [forge clean](/forge/reference/forge-clean.mdx), [forge inspect](/forge/reference/forge-inspect.mdx), [sparse-mode](/config/reference/solidity-compiler.mdx#sparse_mode), [ir-pipeline](https://docs.soliditylang.org/en/latest/ir-breaking-changes.html), [output-desc](https://docs.soliditylang.org/en/latest/using-the-compiler.html#compiler-api)


import CommonOptions from "./common-options.mdx";

### `forge cache clean`

#### NAME

forge-cache-clean - Cleans cached data from `~/.foundry`.

#### SYNOPSIS

`forge cache clean` \[*options*] \[*--*] \[*chains..*]

#### DESCRIPTION

Removes files in the `~/.foundry/cache` folder which is used to cache Etherscan verification status and block data.

#### OPTIONS

`-b`\
`--blocks`\
    One or more block numbers separated by comma with no spaces

`--etherscan`
    A boolean flag that specifies to only remove the block explorer portion of the cache

<CommonOptions />

#### EXAMPLES

1. Remove the entire cache (also, `forge cache clean` is an alias for this)

   ```sh
   forge cache clean all
   ```

2. Remove the entire block explorer cache

   ```sh
   forge cache clean all --etherscan
   ```

3. Remove cache data for a specific chain, by name

   ```sh
   forge cache clean rinkeby
   ```

4. Remove cache data for a specific block number on a specific chain. Does not work if `chain` is `all`

   ```sh
   forge cache clean rinkeby -b 150000
   ```

5. Remove block explorer cache data for a specific chain. Does not work if `--blocks` are specified.

   ```sh
   forge cache clean rinkeby --etherscan
   ```

6. Specify multiple chains

   ```sh
   forge cache clean rinkeby mainnet
   ```

7. Specify multiple blocks
   ```sh
   forge cache clean rinkeby --blocks 530000,9000000,9200000
   ```

#### SEE ALSO

[forge](/forge/reference/overview), [forge cache](/forge/reference/forge-cache.mdx)


import CommonOptions from "./common-options.mdx";

### `forge cache ls`

#### NAME

forge-cache-ls - Shows cached data from `~/.foundry`.

#### SYNOPSIS

`forge cache ls` \[*chains..*]

#### DESCRIPTION

Lists what is in the `~/.foundry/cache` folder currently.

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Show the entire cache (also, `forge cache ls` is an alias for this)

   ```sh
   forge cache ls all
   ```

2. Show cache data for a specific chain, by name
   ```sh
   forge cache ls rinkeby
   ```

3. Specify multiple chains
   ```sh
   forge cache ls rinkeby mainnet
   ```

#### SEE ALSO

[forge](/forge/reference/overview), [forge cache](/forge/reference/forge-cache.mdx)


import CommonOptions from "./common-options.mdx";

### `forge cache`

#### NAME

forge-cache - Manage the Foundry cache.

#### SYNOPSIS

`forge cache` \[*options*] *command* \[*args*]\
`forge cache` \[*options*] `--version`\
`forge cache` \[*options*] `--help`

#### DESCRIPTION

This program is a set of tools to manage the Foundry cache.

#### COMMANDS

[forge cache clean](/forge/reference/forge-cache-clean.mdx)\
    Cleans cached data from `~/.foundry`.

[forge cache ls](/forge/reference/forge-cache-ls.mdx)\
    Shows cached data from `~/.foundry`.

#### OPTIONS

##### Special Options

`-V`\
`--version`\
    Print version info and exit.

<CommonOptions />


import CommonOptions from "./common-options.mdx";

### forge clean

#### NAME

forge-clean - Remove the build artifacts and cache directories.

#### SYNOPSIS

`forge clean` \[*options*]

#### DESCRIPTION

Remove the build artifacts and cache directories.

#### OPTIONS

##### Clean Options

`--root` *path*\
    The project's root path. Defaults to the current working directory.

<CommonOptions />

#### EXAMPLES

1. Clean artifacts and cache in a project:
   ```sh
   forge clean
   ```

#### SEE ALSO

[forge](/forge/reference/overview)


import CommonOptions from "./common-options.mdx";

### forge clone

#### NAME

forge-clone - Clone an on-chain verified contract as a Forge project.

#### SYNOPSIS

`forge clone` \[*options*] *address* \[*root*]

#### DESCRIPTION

Creates a new Forge project by cloning the source code of an on-chain verified contract in the directory *root* (by default the current working directory).

By default, `forge clone` clones contracts from Ethereum mainnet (via Etherscan), but it is also possible to clone from other EVM-compatible blockchains that foundry supports, e.g., BNB Smart Chain (BSC), by specifying chain ID: `--chain <ChainID>`.

An Etherscan API key is required and can be passed via `--etherscan-api-key <API_KEY>`.

Just as `forge init`, `forge clone` will by default initialize a new git repository and install some submodules.

If you do not want this behavior, pass `--no-git`.

#### OPTIONS

##### Clone Options

`-c` *chain\_id*\
`--chain` *chain\_id*\
    Specify the name or EIP-155 ID of the chain to clone contract from.

`-e` *api\_key*\
`--etherscan-api-key` *api\_key*\
    Specify the API key of Etherscan (or equivalent).

`--no-remappings-txt`\
    Put remappings inside the `foundry.toml` configuration file, instead of generating a separate `remappings.txt` file.

##### VCS Options

`--commit`\
    Create an initial commit.

`--no-git`\
    Do not create a git repository.

##### Display Options

`-q`\
`--quiet`\
    Do not print any messages.

<CommonOptions />

#### EXAMPLES

1. Clone UniswapV3Pool contract from Ethereum mainnet:

   ```sh
   forge clone 0x8f8EF111B67C04Eb1641f5ff19EE54Cda062f163 UniswapV3Pool --etherscan-api-key YourApiKeyToken
   ```

2. Clone a contract, but do not create a git repository:

   ```sh
   forge clone --no-git 0x8f8EF111B67C04Eb1641f5ff19EE54Cda062f163 UniswapV3Pool --etherscan-api-key YourApiKeyToken
   ```

3. Clone a contract from BNB Smart Chain (BSC):
   ```sh
   forge clone --chain bsc 0x7862D9B4bE2156B15d54F41ee4EDE2d5b0b455e4 UniswapV3Pool --etherscan-api-key YourApiKeyToken
   ```

#### Metadata

The cloned Forge project comes with an additional `.clone.meta` metadata file in the root directory.
`clone.meta` is a compact JSON data file that contains the information of the on-chain contract instance.
The metadata includes:

* `path`: The path to the source file that contains the declaration of contract deployed on chain.
* `targetContract`: The name of the on-chain contract in the source file.
* `address`: The address of the contract deployed on chain.
* `chainId`: EIP-155 ID of the chain where the contract is deployed.
* `creationTransaction`: The hash of the transaction that deployed the contract.
* `deployer`: The account address who is the sender of the `creationTransaction`.
* `constructorArguments`: The constructor arguments that is used when deploying the contract.
* `storageLayout`: The storage layout of the on-chain contract (if the corresponding contract compiler version supports exporting storage layout).

#### SEE ALSO

[forge](/forge/reference/overview)


import CommonOptions from "./common-options.mdx";

### forge completions

#### NAME

forge-completions - Generate shell completions script

#### SYNOPSIS

`forge completions` *shell*

#### DESCRIPTION

Generates a shell completions script for the given shell.

Supported shells are:

* bash
* elvish
* fish
* powershell
* zsh

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Generate shell completions script for zsh:
   ```sh
   forge completions zsh > $HOME/.oh-my-zsh/completions/_forge
   ```

#### SEE ALSO

[forge](/forge/reference/overview)


import CommonOptions from "./common-options.mdx";

### forge config

#### NAME

forge-config - Display the current config.

#### SYNOPSIS

`forge config` \[*options*]

#### DESCRIPTION

Display the current config.

This command can be used to create a new basic `foundry.toml` or to see
what values are currently set, taking environment variables and the global
configuration file into account.

The command supports almost all flags of the other commands in Forge to allow
overriding values in the displayed configuration.

#### OPTIONS

##### Config Options

`--basic`\
    Prints a basic configuration file.

`--fix`\
    Attempts to fix any configuration warnings.

<CommonOptions />

#### EXAMPLES

1. Create a new basic config:

   ```sh
   forge config > foundry.toml
   ```

2. Enable FFI in `foundry.toml`:
   ```sh
   forge config --ffi > foundry.toml
   ```

#### SEE ALSO

[forge](/forge/reference/overview)


import CommonOptions from "./common-options.mdx";

### forge coverage

#### NAME

forge-coverage - Displays which parts of your code are covered by tests.

#### SYNOPSIS

`forge coverage` \[*options*]

#### DESCRIPTION

Displays which parts of your code are covered by tests.

> **Warning** ⚠️
>
> The `derive function end line` feature introduced in `lcov` 2.0 version (and enabled by default) is not supported, therefore `lcov` and `genhtml` should be run with `--rc derive_function_end_line=0` option in order to generate coverage report.

#### Options

##### Report Options

`--report` allows you to specify the report type to use for coverage. This flag can be used multiple times.

It has three different options and is set to `summary` by default.

`summary`\
    Outputs a chart showing what percentage of your code is covered by tests.

`lcov`\
    Creates a lcov.info file containing your coverage data in the root of your project's directory.

`debug`\
    Outputs lines describing the location of uncovered code.

<CommonOptions />

##### Optimization Option

`--ir-minimum` allows you to run the coverage with `via-ir` enabled for the ["minimum amount of optimization"](https://github.com/ethereum/solidity/issues/12533#issuecomment-1013073350) necessary.

##### Contract Exclusion

`--no-match-coverage "(script|Foo|Bar)"` allows you to exclude paths and contracts from the coverage report.

#### EXAMPLES

1. View summarized coverage:

   ```sh
   forge coverage
   ```

2. Create lcov file with coverage data:

   ```sh
   forge coverage --report lcov
   ```

3. Output uncovered code locations:

   ```sh
   forge coverage --report debug
   ```

4. Coverage report without including `script` directory:
   ```sh
   forge coverage --no-match-coverage script
   ```

#### SEE ALSO

[forge](/forge/reference/overview), [forge test](/forge/reference/forge-test.mdx)


import VerifierOptions from "../../reference/common/verifier-options.mdx";
import TransactionOptions from "../../reference/common/transaction-options.mdx";
import WalletOptions from "../../reference/common/wallet-options.mdx";
import RpcOptions from "../../reference/common/rpc-options.mdx";
import EtherscanOptions from "../../reference/common/etherscan-options.mdx";
import CoreBuildOptions from "./core-build-options.mdx";
import DisplayOptions from "../../reference/common/display-options.mdx";
import CommonOptions from "./common-options.mdx";

### forge create

#### NAME

forge-create - Deploy a smart contract.

#### SYNOPSIS

`forge create` *contract* \[*options*]

#### DESCRIPTION

Deploy a smart contract.

The path to the contract must be specified first, in the format `<path>:<contract>`, e.g. `src/Contract.sol:Contract`.

You can specify constructor arguments with `--constructor-args`. Alternatively, you can specify a file
containing space-separated constructor arguments with `--constructor-args-path`.

Dynamic linking is not supported: you should predeploy your libraries and manually specify their addresses (see `--libraries`).

> ℹ️ **Note**
>
> The `--constructor-args` flag must be positioned last in the command, since it takes multiple values.

#### OPTIONS

##### Build Options

`--constructor-args` *args...*\
    The constructor arguments.

`--constructor-args-path` *file*\
    The path to a file containing the constructor arguments.

`--verify`\
    Verify contract after creation. Runs `forge verify-contract` with the appropriate parameters.

<VerifierOptions />

`--unlocked`\
    Send via `eth_sendTransaction` using the `--from` argument or `$ETH_FROM` as sender.

<TransactionOptions />

<WalletOptions />

<RpcOptions />

<EtherscanOptions />

<CoreBuildOptions />

<DisplayOptions />

<CommonOptions />

#### EXAMPLES

1. Deploy a contract with no constructor arguments:

   ```sh
   forge create src/Contract.sol:ContractWithNoConstructor
   ```

2. Deploy a contract with two constructor arguments:
   ```sh
   forge create src/Contract.sol:MyToken --constructor-args "My Token" "MT"
   ```

#### SEE ALSO

[forge](/forge/reference/overview), [forge build](/forge/reference/forge-build.mdx), [forge verify-contract](/forge/reference/forge-verify-contract.mdx)

[eip1559]: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md


import CommonOptions from "./common-options.mdx";

### forge doc

#### NAME

forge-doc - Generate documentation for Solidity source files.

#### SYNOPSIS

`forge doc` \[*options*]

#### DESCRIPTION

Generates and builds an mdbook from Solidity source files.

#### OPTIONS

`--root` *path*\
    The project's root path. By default, this is the root directory of the current git repository, or the current working directory.

`--out` *path*
    The output path for the generated mdbook. By default, it is the `docs/` in project root.

`--build`
    Build the `mdbook` from generated files.

`--serve`
    Serve the documentation locally.

`--hostname` *hostname*
    Hostname for serving documentation. Requires `--serve`.

`--port` *port*
    Port for serving documentation. Requires `--serve`.

<CommonOptions />

#### EXAMPLES

1. Generate documentation.
   ```sh
   forge doc
   ```
2. Generate and build documentation with specified output directory.
   ```sh
   forge doc --build --out ./documentation
   ```
3. Generate and serve documentation locally on port 4000.
   ```sh
   forge doc --serve --port 4000
   ```

#### SEE ALSO

[Doc config](/config/reference/doc-generator.mdx)

[forge](/forge/reference/overview)


import ProjectOptions from "./project-options.mdx";
import CommonOptions from "./common-options.mdx";

### forge flatten

#### NAME

forge-flatten - Flatten a source file and all of its imports into one file.

#### SYNOPSIS

`forge flatten` \[*options*] *file*

#### DESCRIPTION

Flatten a source file and all of its imports into one file.

If `--output <FILE>` is not set, then the flattened contract will be output to stdout.

#### OPTIONS

##### Flatten Options

`-o` *file*\
`--output` *file*\
    The path to output the flattened contract. If not specified, the flattened contract will be output to stdout.

<ProjectOptions />

<CommonOptions />

#### EXAMPLES

1. Flatten `src/Contract.sol`:

   ```sh
   forge flatten src/Contract.sol
   ```

2. Flatten `src/Contract.sol` and write the result to `src/Contract.flattened.sol`:
   ```sh
   forge flatten --output src/Contract.flattened.sol src/Contract.sol
   ```

#### SEE ALSO

[forge](/forge/reference/overview), [forge verify-contract](/forge/reference/forge-verify-contract.mdx)


import CommonOptions from "./common-options.mdx";

### forge geiger

#### NAME

forge-geiger - Detects usage of unsafe cheat codes in a foundry project and its dependencies.

#### SYNOPSIS

`forge geiger` \[*options*] \[*path*]

#### DESCRIPTION

Detects usage of unsafe cheat codes in a foundry project and its dependencies.

#### OPTIONS

`--root` *path*\
    The project's root path. By default, this is the root directory of the current git repository, or the current working directory.

`--check`\
    Run in 'check' mode. Exits with 0 if no unsafe cheat codes were found. Exits with 1 if unsafe cheat codes are detected.

`--full`\
    Print a full report of all files even if no unsafe functions are found.

<CommonOptions />

#### SEE ALSO

[forge](/forge/reference/overview)


### forge help

#### NAME

forge-help - Get help for a Forge command

#### SYNOPSIS

`forge help` \[*subcommand*]

#### DESCRIPTION

Prints a help message for the given command.

#### EXAMPLES

1. Get help for a command:

   ```sh
   forge help build
   ```

2. Help is also available with the `--help` flag:
   ```sh
   forge build --help
   ```

#### SEE ALSO

[forge](/forge/reference/overview)


import CommonOptions from "./common-options.mdx";

### forge init

#### NAME

forge-init - Create a new Forge project.

#### SYNOPSIS

`forge init` \[*options*] \[*root*]

#### DESCRIPTION

Create a new Forge project in the directory *root* (by default the current working directory).

The default template creates the following project layout:

```bash
// [!include ~/snippets/output/hello_foundry/tree-with-files:output]
```

However, it is possible to create a project from another using `--template`.

By default, `forge init` will also initialize a new git repository and install some submodules.

If you do not want this behavior, pass `--no-git`.

#### OPTIONS

##### Init Options

`--force`\
    Create the project even if the specified root directory is not empty.

`-t` *template*\
`--template` *template*\
    The template to start from.

`--vscode`\
    Create a `.vscode/settings.json` file with Solidity settings, and generate a `remappings.txt` file.

`--offline`\
    Do not install dependencies from the network.

##### VCS Options

`--commit`\
    Create an initial commit.

`--no-git`\
    Do not create a git repository.

##### Display Options

`-q`\
`--quiet`\
    Do not print any messages.

<CommonOptions />

#### EXAMPLES

1. Create a new project:

   ```sh
   forge init hello_foundry
   ```

2. Create a new project, but do not create a git repository:

   ```sh
   forge init --no-git hello_foundry
   ```

3. Forcibly create a new project in a non-empty directory:
   ```sh
   forge init --force
   ```

#### SEE ALSO

[forge](/forge/reference/overview)


import CoreBuildOptions from "./core-build-options.mdx";
import CommonOptions from "./common-options.mdx";

### forge inspect

#### NAME

forge-inspect - Get specialized information about a smart contract

#### SYNOPSIS

`forge inspect` \[*options*] *contract\_name* *field*

#### DESCRIPTION

Get specialized information about a smart contract.

The field to inspect (*field*) can be any of:

* `abi`
* `b`/`bytes`/`bytecode`
* `deployedBytecode`/`deployed_bytecode`/`deployed-bytecode`/`deployedbytecode`/`deployed`
* `assembly`/`asm`
* `asmOptimized`/`assemblyOptimized`/`assemblyoptimized`/`assembly_optimized`/`asmopt`/`assembly-optimized`/`asmo`/`asm-optimized`/`asmoptimized`/`asm_optimized`
* `methods`/`methodidentifiers`/`methodIdentifiers`/`method_identifiers`/`method-identifiers`/`mi`
* `gasEstimates`/`gas`/`gas_estimates`/`gas-estimates`/`gasestimates`
* `storageLayout`/`storage_layout`/`storage-layout`/`storagelayout`/`storage`
* `devdoc`/`dev-doc`/`devDoc`
* `ir`
* `ir-optimized`/`irOptimized`/`iroptimized`/`iro`/`iropt`
* `metadata`/`meta`
* `userdoc`/`userDoc`/`user-doc`
* `ewasm`/`e-wasm`
* `errors`
* `events`

#### OPTIONS

`--json`\
    Format output as JSON.

<CoreBuildOptions />

<CommonOptions />

#### EXAMPLES

1. Inspect the bytecode of a contract:

   ```sh
   forge inspect MyContract bytecode
   ```

2. Inspect the storage layout of a contract:

   ```sh
   forge inspect MyContract storage
   ```

3. Inspect the abi of a contract in JSON format:
   ```sh
   forge inspect --json MyContract abi
   ```

#### SEE ALSO

[forge](/forge/reference/overview), [forge build](/forge/reference/forge-build.mdx)


import CommonOptions from "./common-options.mdx";

### forge install

#### NAME

forge-install - Install one or more dependencies.

#### SYNOPSIS

`forge install` \[*options*] \[*deps...*]

#### DESCRIPTION

Install one or more dependencies.

Dependencies are installed as git submodules. If you do not want this behavior, pass `--no-git`.

If no arguments are provided, then existing dependencies are installed.

Dependencies can be a raw URL (`https://foo.com/dep`), an SSH URL (`git@github.com:owner/repo`), or the path to a GitHub repository (`owner/repo`).
Additionally, a ref can be added to the dependency path to install a specific version of a dependency.

A ref can be:

* A branch: `owner/repo@master`
* A tag: `owner/repo@v1.2.3`
* A commit: `owner/repo@8e8128`

The ref defaults to `master`.

You can also choose the name of the folder the dependency will be in. By default, the folder name is the name of
the repository. If you want to change the name of the folder, prepend `<folder>=` to the dependency.

#### OPTIONS

##### Project Options

`--root` *path*\
    The project's root path. By default, this is the root directory of the current git repository, or the current working directory.

##### VCS Options

`--commit`\
    Create a commit after installing the dependencies.

`--no-git`\
    Install without adding the dependency as a submodule.

##### Display Options

`-q`\
`--quiet`\
    Do not print any messages.

<CommonOptions />

#### EXAMPLES

1. Install a dependency:

   ```sh
   forge install transmissions11/solmate
   ```

2. Install a specific version of a dependency:

   ```sh
   forge install transmissions11/solmate@v7
   ```

3. Install multiple dependencies:

   ```sh
   forge install transmissions11/solmate@v7 OpenZeppelin/openzeppelin-contracts
   ```

4. Install a dependency without creating a submodule:

   ```sh
   forge install --no-git transmissions11/solmate
   ```

5. Install a dependency in a specific folder:
   ```sh
   forge install soulmate=transmissions11/solmate
   ```

#### SEE ALSO

[forge](/forge/reference/overview), [forge update](/forge/reference/forge-update.mdx), [forge remove](/forge/reference/forge-remove.mdx)


### forge lint

#### NAME

forge-lint – Lint Solidity source files.

#### SYNOPSIS

`forge lint` \[*options*] \[*path*]...

#### DESCRIPTION

Analyzes Solidity source files for style, correctness, and best practices by running a configurable set of lints. Supports filtering by lint severity and specific lint identifiers. Can output results in a JSON format compatible with `rustc`.

#### OPTIONS

`[PATH]...`
    Paths to the Solidity files or directories to be checked. Overrides the `ignore` project config. If omitted, all source files in the project are linted.

`--root` *path*
    The project's root path. By default, this is the root directory of the current git repository, or the current working directory.

`--severity` *severity*...
    Specifies which lints to run based on severity. Overrides the `severity` project config.
    Supported values: `high`, `med`, `low`, `info`, `gas`.

`--only-lint` *lint\_id*...
    Specifies which lints to run by their ID (e.g., `incorrect-shift`). Overrides the `exclude_lints` project config.

`--json`
    Activates the linter's JSON formatter (rustc-compatible).

#### EXAMPLES

1. Lint all Solidity files in the project:

   ```sh
   forge lint
   ```

2. Lint only files in a specific directory:

   ```sh
   forge lint src/contracts/
   ```

3. Lint with only `high` and `gas` severity lints:

   ```sh
   forge lint --severity high --severity gas
   ```

4. Lint with specific lint ID and output as JSON:
   ```sh
   forge lint --only-lint incorrect-shift --json
   ```

#### SUPPORTED LINTS

This section details the lints supported by `forge lint`. Each lint includes an ID, a description of the issue it checks for, its severity, and examples of incorrect and correct code.

##### High Severity

##### `incorrect-shift`

Warns against shift operations where the operands might be in an unconventional or potentially erroneous order, specifically when a literal is shifted by a non-literal.

In Solidity, bitwise shift operations (`<<` for left shift, `>>` for right shift) take the value to be shifted as the left operand and the number of bits to shift as the right operand.

This lint rule uses a heuristic to flag potentially incorrect shift oferations. To do so, it identifies expressions where literal is shifted by a variable, which can often be an indication of a logical error where the operands were intended to be reversed. If that was indeed intended, it is recommended to replace literals by constants. Alternatively, the lint rule can be disabled.

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract IncorrectShift {
    uint64 const LARGE_NUM = 1 ether;
    uint256 foo = 100;

    function correct() public view returns (uint256) {
        // Shifting 'foo' by a literal '2'.
        return foo << 2;

        // Shifting a const 'LARGE_NUM' by a variable 'foo'.
        return LARGE_NUM << foo;
    }

    function incorrect() public view returns (uint256) {
        // Shifting a literal '2' by a variable 'foo'. This is likely an error.
        return 2 << foo;
    }
}
```

To disable this lint for your project, you can add its ID to the `exclude_lints` array within the `[lint]` section of the `foundry.toml` configuration file:

```toml
[lint]
# ... rest of lint config ...
exclude_lints = ["incorrect-shift"]
```

Alternatively, you can also disable this individual occurrence using [inline configuration](/config/reference/linter#inline-configuration).

##### `unchecked-call`

Warns when low-level calls (`.call()`, `.delegatecall()`, `.staticcall()`) do not check the success return value.

Low-level calls in Solidity return a tuple `(bool success, bytes memory data)`. Not checking the `success` value can lead to silent failures where the called function reverts but execution continues, potentially resulting in unexpected behavior or security vulnerabilities.

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract UncheckedCall {
    function correct() public {
        (bool success, ) = address(target).call("");
        require(success, "Call failed");

        // Or using if statement
        (bool ok, bytes memory data) = address(target).call(abi.encodeWithSignature("foo()"));
        if (!ok) revert("Call failed");
    }

    function incorrect() public {
        // Unchecked call - success value is ignored
        address(target).call("");

        // Unchecked call - only data is used
        (, bytes memory data) = address(target).call("");
    }
}
```

To disable this lint for your project, you can add its ID to the `exclude_lints` array within the `[lint]` section of the `foundry.toml` configuration file:

```toml
[lint]
# ... rest of lint config ...
exclude_lints = ["unchecked-call"]
```

Alternatively, you can also disable this individual occurrence using [inline configuration](/config/reference/linter#inline-configuration).

##### `erc20-unchecked-transfer`

Warns when ERC20 `transfer` or `transferFrom` calls do not check the return value.

While the ERC20 standard specifies that these functions should return a boolean indicating success, not all implementations follow this pattern correctly. Some tokens revert on failure, while others return false. Not checking the return value can lead to situations where a transfer fails silently, causing loss of funds or incorrect contract state.

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ERC20UncheckedTransfer {
    IERC20 public token;

    function correct() public {
        // Check return value with require
        require(token.transfer(recipient, amount), "Transfer failed");

        // Or capture and check explicitly
        bool success = token.transferFrom(sender, recipient, amount);
        if (!success) revert("Transfer failed");
    }

    function incorrect() public {
        // Unchecked transfer - return value ignored
        token.transfer(recipient, amount);

        // Unchecked transferFrom - return value ignored
        token.transferFrom(sender, recipient, amount);
    }
}
```

To disable this lint for your project, you can add its ID to the `exclude_lints` array within the `[lint]` section of the `foundry.toml` configuration file:

```toml
[lint]
# ... rest of lint config ...
exclude_lints = ["erc20-unchecked-transfer"]
```

Note that this lint could fire false positives, as it only checks the function name, but it doesn't ensure that the called address is an ERC20 contract. Because of that, you may have to disable individual occurrences using [inline configuration](/config/reference/linter#inline-configuration).

##### Medium Severity

##### divide-before-multiply

Warns against performing division before multiplication within the same expression, especially with integer arithmetic.

In Solidity, integer division truncates (rounds down towards zero).
Performing division before multiplication can lead to a loss of precision that might be unintended and could have been avoided by reordering operations.
For example, `(a / b) * c` might result in `0` if `a < b`, even if `(a * c) / b` would have yielded a non-zero result.

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract DivideBeforeMultiply {
    function correct() public pure returns (uint256) {
        return (1 * 3) / 2; // Results in 1.
    }

    function incorrect() public pure returns (uint256) {
        return (1 / 2) * 3; // Results in 0.
    }
}
```

To disable this lint for your project, you can add its ID to the `exclude_lints` array within the `[lint]` section of the `foundry.toml` configuration file:

```toml
[lint]
# ... rest of lint config ...
exclude_lints = ["divide-before-multiply"]
```

Alternatively, you can also disable this individual occurrence using [inline configuration](/config/reference/linter#inline-configuration).

##### Informational / Style Guide

##### `pascal-case-struct`

Ensures that struct names adhere to `PascalCase` (e.g., `MyStruct`) convention. This is a common styling guideline in Solidity to improve code readability and maintain consistency.

Useful resources: [Solidity Style Guide - Struct Names](https://docs.soliditylang.org/en/latest/style-guide.html#struct-names)

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract PascalCaseStruct {
    // Correct
    struct MyStruct {
        uint256 data;
    }

    // Incorrect
    struct my_struct {
        uint256 data;
    }
    struct myStruct {
        uint256 data;
    }
}
```

To disable this lint for your project, you can add its ID to the `exclude_lints` array within the `[lint]` section of the `foundry.toml` configuration file:

```toml
[lint]
# ... rest of lint config ...
exclude_lints = ["pascal-case-struct"]
```

Alternatively, you can also disable this individual occurrence using [inline configuration](/config/reference/linter#inline-configuration).

##### `mixed-case-function`

Ensures that function names adhere to `mixedCase` (e.g., `myFunction`) convention. This helps in differentiate functions from other identifiers like structs or events and is a standard practice.

Useful resources: [Solidity Style Guide - Function Names](https://docs.soliditylang.org/en/latest/style-guide.html#function-names)

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MixedCaseFunction {
    // Correct
    function myFunction() public pure returns (uint256) {
        return 1;
    }

    // Incorrect
    function MyFunction() public pure returns (uint256) {
        return 1;
    }
    function my_function() public pure returns (uint256) {
        return 1;
    }
}
```

To disable this lint for your project, you can add its ID to the `exclude_lints` array within the `[lint]` section of the `foundry.toml` configuration file:

```toml
[lint]
# ... rest of lint config ...
exclude_lints = ["mixed-case-function"]
```

Alternatively, you can also disable this individual occurrence using [inline configuration](/config/reference/linter#inline-configuration).

##### `mixed-case-variable`

Ensures that mutable variable names (local variables and state variables that are not `constant` or `immutable`) adhere to `mixedCase` (e.g., `myVariable`) convention. This aligns with the general Solidity style for variable naming.

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MixedCaseVariable {
    // Correct
    uint256 stateVariable;

    function correct() public {
        uint256 localVariable = 10;
    }

    // Incorrect
    uint256 state_variable;

    function incorrect() public {
        uint256 local_variable = 20;
    }
}
```

To disable this lint for your project, you can add its ID to the `exclude_lints` array within the `[lint]` section of the `foundry.toml` configuration file:

```toml
[lint]
# ... rest of lint config ...
exclude_lints = ["mixed-case-variable"]
```

Alternatively, you can also disable this individual occurrence using [inline configuration](/config/reference/linter#inline-configuration).

##### `screaming-snake-case-const`

Ensures that `constant` variable names adhere to `SCREAMING_SNAKE_CASE` (e.g., `MY_CONSTANT`). This is the standard convention for constants in Solidity, making them easily identifiable.

Useful resources: [Solidity Style Guide - Constants](https://docs.soliditylang.org/en/latest/style-guide.html#constants)

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ScreamingSnakeCaseConstant {
    // Correct
    uint256 constant MY_CONSTANT = 1;

    // Incorrect
    uint256 constant myConstant = 2;
    uint256 constant my_constant = 3;
}
```

To disable this lint for your project, you can add its ID to the `exclude_lints` array within the `[lint]` section of the `foundry.toml` configuration file:

```toml
[lint]
# ... rest of lint config ...
exclude_lints = ["screaming-snake-case-constant"]
```

Alternatively, you can also disable this individual occurrence using [inline configuration](/config/reference/linter#inline-configuration).

##### `screaming-snake-case-immutable`

Ensures that `immutable` variable names adhere to `SCREAMING_SNAKE_CASE` (e.g., `MY_IMMUTABLE_VAR`). Similar to constants, this convention helps in distinguish immutable variables and maintaining consistency.

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ScreamingSnakeCaseImmutable {
    // Correct
    uint256 immutable MY_IMMUTABLE_VAR;

    // Incorrect
    uint256 immutable myImmutableVar;
    address immutable my_immutable_var;
}
```

To disable this lint for your project, you can add its ID to the `exclude_lints` array within the `[lint]` section of the `foundry.toml` configuration file:

```toml
[lint]
# ... rest of lint config ...
exclude_lints = ["screaming-snake-case-immutable"]
```

Alternatively, you can also disable this individual occurrence using [inline configuration](/config/reference/linter#inline-configuration).

##### Gas Optimizations

##### `asm-keccak256`

Recommends using inline assembly for `keccak256` hashing when possible. The Solidity global function `keccak256()` involves memory allocation and copying which can be less gas-efficient than a direct inline assembly implementation that operates on memory directly, especially for hashing small, fixed-size data.

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract HashOptimization {
    // Correct
    function correct(uint256 a, uint256 b) public pure returns (bytes32 hashedVal) {
        assembly {
            mstore(0x00, a)
            mstore(0x20, b)
            let hashedVal := keccak256(0x00, 0x40)
        }
    }

    // Incorrect
    function incorrect(uint256 a, uint256 b) public pure returns (bytes32) {
        return keccak256(abi.encodePacked(a, b));
    }
}
```

To disable this lint for your project, you can add its ID to the `exclude_lints` array within the `[lint]` section of the `foundry.toml` configuration file:

```toml
[lint]
# ... rest of lint config ...
exclude_lints = ["asm-keccak256"]
```

Alternatively, you can also disable this individual occurrence using [inline configuration](/config/reference/linter#inline-configuration).

#### SEE ALSO

[Lint config](/config/reference/linter)


import CommonOptions from "./common-options.mdx";

### forge remappings

#### NAME

forge-remappings - Get the automatically inferred remappings for the project.

#### SYNOPSIS

`forge remappings` \[*options*]

#### DESCRIPTION

Get the automatically inferred remappings for the project.

#### OPTIONS

##### Project Options

`--root` *path*\
    The project's root path. By default, this is the root directory of the current git repository, or the current working directory.

`--lib-path` *path*\
    The path to the library folder.

<CommonOptions />

#### EXAMPLES

1. Create a `remappings.txt` file from the inferred remappings:
   ```sh
   forge remappings > remappings.txt
   ```

#### SEE ALSO

[forge](/forge/reference/overview)


import CommonOptions from "./common-options.mdx";

### forge remove

#### NAME

forge-remove - Remove one or multiple dependencies.

#### SYNOPSIS

`forge remove` \[*options*] \[*deps...*]

#### DESCRIPTION

Remove one or multiple dependencies.

Dependencies can be a raw URL (`https://foo.com/dep`), the path to a GitHub repository (`owner/repo`) or the path to the dependency in the project tree.

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Remove a dependency by path:

   ```sh
   forge remove lib/solmate
   ```

2. Remove a dependency by GitHub repository name:
   ```sh
   forge remove dapphub/solmate
   ```

#### SEE ALSO

[forge](/forge/reference/overview), [forge install](/forge/reference/forge-install.mdx), [forge update](/forge/reference/forge-update.mdx)


import EtherscanOptions from "../../reference/common/etherscan-options.mdx";
import VerifierOptions from "../../reference/common/verifier-options.mdx";
import RetryOptions from "../../reference/common/retry-options.mdx";
import CoreBuildOptions from "./core-build-options.mdx";
import WatchOptions from "./watch-options.mdx";
import MultiWalletOptions from "../../reference/common/multi-wallet-options.mdx";
import EvmOptions from "./evm-options.mdx";
import ExecutorOptions from "./executor-options.mdx";
import CommonOptions from "./common-options.mdx";

### forge script

#### NAME

forge-script - Run a smart contract as a script, building transactions that can be sent onchain.

#### SYNOPSIS

`forge script` \[*options*] *path* \[*args...*]

#### DESCRIPTION

Run a smart contract as a script, building transactions that can be sent onchain.

Scripts can be used to apply state transitions on live contracts, or deploy and initialize a complex set of smart contracts using Solidity.

#### OPTIONS

`--broadcast`\
    Broadcasts the transactions.

`--debug`\
    Open the script in the [debugger][debugger]. Takes precedence over broadcast.

`-g`\
`--gas-estimate-multiplier` *multiplier*\
    Relative percentage by which to multiply all gas estimates. (i.e. set to 200 to double them)
    Default: 130

`--json`\
    Output results in JSON format.\
    Note: The output is under development and prone to change.

`--legacy`\
    Use legacy transactions instead of EIP1559 ones. This is auto-enabled for common networks without EIP1559.

`--resume`\
    Resumes submitting transactions that failed or timed-out previously.

`-s`\
`--sig` *signature*\
    The signature of the function you want to call in the contract, or raw calldata.\
    Default: `run()`

`--skip-simulation`\
    Skips on-chain simulation.

`--skip`\
    Skip compilation of non-essential contract directories like test or script (usage `--skip test`).

`--non-interactive`\
    Remove interactive prompts which appear if the contract is near the [EIP-170](https://eips.ethereum.org/EIPS/eip-170) size limit.

`--slow`\
    Makes sure a transaction is sent, only after its previous one has been confirmed and succeeded.

`--target-contract` *contract\_name*\
    The name of the contract you want to run.

`--priority-gas-price`\
    Sets the priority gas price for EIP1559 transactions. Useful for when gas prices are volatile and you want to get your transaction included.

`--with-gas-price` *price*\
    Sets the gas price for **broadcasted** legacy transactions, or the max fee for broadcasted EIP1559 transactions.\
    Note: To set the gas price in the execution environment of the script use `--gas-price` instead (see below).

<EtherscanOptions />

##### Verification Options

`--verify`\
    If it finds a matching broadcast log, it tries to verify every contract found in the receipts.

<VerifierOptions />

<RetryOptions />

<CoreBuildOptions />

##### Build Options

`--names`\
    Print compiled contract names.

`--sizes`\
    Print compiled non-test contract sizes, exiting with code 1 if any of them are above the size limit.

<WatchOptions />

<MultiWalletOptions />

<EvmOptions />

<ExecutorOptions />

<CommonOptions />

#### EXAMPLES

1. Run `BroadcastTest` as a script, broadcasting generated transactions on-chain

   ```sh
   forge script ./test/Broadcast.t.sol --tc BroadcastTest --sig "deploy()" \
       -vvv --fork-url $SEPOLIA_RPC_URL
   ```

2. Deploy a contract on Polygon [see the `Scripting with Solidity` guide for an example script](/guides/scripting-with-solidity). *The verifier url is different for every network.*

   ```sh
   forge script script/NFT.s.sol:MyScript --chain-id 137 --rpc-url $RPC_URL \
       --etherscan-api-key $POLYGONSCAN_API_KEY --verifier-url https://api.polygonscan.com/api \
       --broadcast --verify -vvvv
   ```

3. Resume a failed script. Using the above as an example, remove `--broadcast` add `--resume`

   ```sh
   forge script script/NFT.s.sol:MyScript --chain-id 137 --rpc-url $RPC_URL \
       --etherscan-api-key $POLYGONSCAN_API_KEY --verifier-url https://api.polygonscan.com/api \
       --verify -vvvv --resume
   ```

4. Verify contracts that were just deployed with a script
   ```sh
   forge script script/NFT.s.sol --rpc-url $RPC_URL --verify --resume
   ```

[debugger]: ../../forge/debugger.md


import TestOptions from "./test-options.mdx";
import EvmOptions from "./evm-options.mdx";
import ExecutorOptions from "./executor-options.mdx";
import CoreBuildOptions from "./core-build-options.mdx";
import DisplayOptions from "../../reference/common/display-options.mdx";
import CommonOptions from "./common-options.mdx";

### forge snapshot

#### NAME

forge-snapshot - Create a snapshot of each test's gas usage.

#### SYNOPSIS

`forge snapshot` \[*options*]

#### DESCRIPTION

Create a snapshot of each test's gas usage.

The results are written to a file named `.gas-snapshot`. You can change the name of the file
by passing `--snap <PATH>`.

Fuzz tests are included by default in the snapshot. They use a static seed to achieve deterministic results.

Snapshots can be compared with `--diff` and `--check`. The first flag will output a diff, and the second
will output a diff *and* exit with code 1 if the snapshots do not match.

#### OPTIONS

##### Snapshot Options

`--asc`\
Sort results by gas used (ascending).

`--desc`\
    Sort results by gas used (descending).

`--min` *min\_gas*\
    Only include tests that used more gas that the given amount.

`--max` *max\_gas*\
    Only include tests that used less gas that the given amount.

`--tolerance` *threshold*\
    Tolerates gas deviations up to the specified percentage (0-100).

`--diff` *path*\
    Output a diff against a pre-existing snapshot.

    By default the comparison is done with `.gas-snapshot`.

`--check` *path*\
    Compare against a pre-existing snapshot, exiting with code 1 if they do not match.

    Outputs a diff if the snapshots do not match.

    By default the comparison is done with `.gas-snapshot`.

`--snap` *path*\
    Output file for the snapshot. Default: `.gas-snapshot`.

<TestOptions />

<EvmOptions />

<ExecutorOptions />

<CoreBuildOptions />

<DisplayOptions />

<CommonOptions />

#### EXAMPLES

1. Create a snapshot:

   ```sh
   forge snapshot
   ```

2. Generate a diff:

   ```sh
   forge snapshot --diff
   ```

3. Check that the snapshots match:
   ```sh
   forge snapshot --check
   ```

#### SEE ALSO

[forge](/forge/reference/overview), [forge test](/forge/reference/forge-test.mdx)


import TestOptions from "./test-options.mdx";
import EvmOptions from "./evm-options.mdx";
import ExecutorOptions from "./executor-options.mdx";
import CoreBuildOptions from "./core-build-options.mdx";
import WatchOptions from "./watch-options.mdx";
import DisplayOptions from "../../reference/common/display-options.mdx";
import CommonOptions from "./common-options.mdx";

### forge test

#### NAME

forge-test - Run the project's tests.

#### SYNOPSIS

`forge test` \[*options*]

#### DESCRIPTION

Run the project's tests.

##### Forking

It is possible to run the tests in a forked environment by passing `--fork-url <URL>`.

When the tests are running in a forked environment, you can access all the state of the forked chain as you would
if you had deployed the contracts. [Cheatcodes][cheatcodes] are still available.

You can also specify a block number to fork from by passing `--fork-block-number <BLOCK>`. When forking from a
specific block, the chain data is cached to `~/.foundry/cache`. If you do not want to cache the chain data,
pass `--no-storage-caching`.

Traces that cannot be decoded by local contracts when running in a forked environment (e.g. calls to
contracts that live on mainnet, like tokens) can optionally be decoded using Etherscan. To use Etherscan
for trace decoding, set `ETHERSCAN_API_KEY` or pass `--etherscan-api-key <KEY>`.

##### Debugging

It is possible to run a test in an interactive debugger. To start the debugger, pass `--debug <TEST>`.

If multiple tests match the specified pattern, you must use other test filters in order to reduce
the matching number of tests to exactly 1.

If the test is a unit test, it is immediately opened in the debugger.

If the test is a fuzz test, the fuzz test is run and the debugger is opened on the first failing scenario.
If there are no failing scenarios for the fuzz test, the debugger is opened on the last scenario.

More information on the debugger can be found in the [debugger chapter][debugger].

##### Gas reports

You can generate a gas report by passing `--gas-report`.

More information on gas reports can be found in the [gas reports chapter][gas-reports].

##### List

It is possible to list the tests without running them.
You can pass `--json` to make it easier for outside extensions to parse structured content.

#### OPTIONS

<TestOptions />

<EvmOptions />

<ExecutorOptions />

<CoreBuildOptions />

<WatchOptions />

<DisplayOptions />

`--list`\
    List tests instead of running them.

<CommonOptions />

#### EXAMPLES

1. Run the tests:

   ```sh
   forge test
   ```

2. Open a test in the debugger:

   ```sh
   forge test --debug testSomething
   ```

3. Generate a gas report:

   ```sh
   forge test --gas-report
   ```

4. Only run tests in `test/Contract.t.sol` in the `BigTest` contract that start with `testRevert`:

   ```sh
   forge test --match-path test/Contract.t.sol --match-contract BigTest \
     --match-test "testRevert*"
   ```

5. List tests in desired format
   ```sh
   forge test --list
   forge test --list --json
   forge test --list --json --match-test "testRevert*" | tail -n 1 | json_pp
   ```

#### SEE ALSO

[forge](/forge/reference/overview), [forge build](/forge/reference/forge-build.mdx), [forge snapshot](/forge/reference/forge-snapshot.mdx),

[debugger]: /forge/debugger

[cheatcodes]: /reference/cheatcodes

[gas-reports]: /forge/gas-tracking/gas-reports


import ProjectOptions from "./project-options.mdx";
import CommonOptions from "./common-options.mdx";

### forge tree

#### NAME

forge-tree - Display a tree visualization of the project's dependency graph.

#### SYNOPSIS

`forge tree` \[*options*]

#### DESCRIPTION

Display a visualization of the project's dependency graph.

```
// [!include ~/snippets/output/forge_tree/forge-tree:all]
```

#### OPTIONS

##### Flatten Options

`--charset` *charset*\
    Character set to use in output: utf8, ascii. Default: utf8

`--no-dedupe`\
    Do not de-duplicate (repeats all shared dependencies)

<ProjectOptions />

<CommonOptions />

#### SEE ALSO

[forge](/forge/reference/overview)


import CommonOptions from "./common-options.mdx";

### forge update

#### NAME

forge-update - Update one or more dependencies.

#### SYNOPSIS

`forge update` \[*options*] \[*dep*]

#### DESCRIPTION

Update one or more dependencies.

The argument *dep* is a path to the dependency you want to update.
Forge will update to the latest version on the ref you specified for the dependency when you ran [`forge install`](/forge/reference/forge-install.mdx).

If no argument is provided, then all dependencies are updated.

#### Lockfile

Post [foundry#9522](https://github.com/foundry-rs/foundry/pull/9522), every `install`, `update` or `remove` syncs the lockfile (`foundry.lock`) which has been introduced to ensure that git submodules stay pinned to the tag/revision that the user specified while installing the dependency.

Without the lockfile submodules pinned to a tag/revision get silently updated to the master/main branch of the dependency. See [foundry#7225](https://github.com/foundry-rs/foundry/issues/7225)

If you wish to update your dependencies tag/rev you can do so using:

```sh
# Update the tag of the dependency
forge update owner/dependency-name@new-tag
forge update owner/dependency-name@tag=some-tag

# Update the revision of the dependency
forge update owner/dependency-name@01234abc
forge update owner/dependency-name@rev=01234abc
```

#### OPTIONS

<CommonOptions />

#### EXAMPLES

1. Update a dependency:

   ```sh
   forge update lib/solmate
   ```

2. Update all dependencies:

   ```sh
   # Note: Dependencies pinned to tags/revs in `foundry.lock` will not be updated.
   # They must be overwritten explicitly.
   forge update
   ```

3. Update the tag/rev of a dependency:

   ```sh
   # Update the tag of the dependency
   forge update owner/dependency-name@new-tag
   forge update owner/dependency-name@tag=some-tag

   # Update the revision of the dependency
   forge update owner/dependency-name@01234abc
   forge update owner/dependency-name@rev=01234abc
   ```

#### SEE ALSO

[forge](/forge/reference/overview), [forge install](/forge/reference/forge-install.mdx), [forge remove](/forge/reference/forge-remove.mdx)


import ProjectOptions from "./project-options.mdx";
import CommonOptions from "./common-options.mdx";

### forge upload-selectors

#### NAME

forge-upload-selectors - Uploads abi of given contract to [https://openchain.xyz/signatures](https://openchain.xyz/signatures) function selector database.

#### SYNOPSIS

`forge upload-selectors` \[*options*] *contract*

#### DESCRIPTION

Uploads abi of given contract to [https://openchain.xyz/signatures](https://openchain.xyz/signatures) function selector database.

#### OPTIONS

<ProjectOptions />

<CommonOptions />

#### EXAMPLES

1. Upload ABI to selector database
   ```sh
   forge upload-selectors LinearVestingVault
   ```


import VerifierOptions from "../../reference/common/verifier-options.mdx";
import RetryOptions from "../../reference/common/retry-options.mdx";
import CommonOptions from "./common-options.mdx";

### forge verify-check

#### NAME

forge-verify-check - Check verification status on a chosen verification provider.

#### SYNOPSIS

`forge verify-check` \[*options*] *id* \[*etherscan\_key*]

The *id* is the verification identifier. For Etherscan & Bloxroute - it is the submission GUID, for Sourcify - it's the contract address.

#### DESCRIPTION

Check verification status on a chosen verification provider.

For Etherscan, you must provide an Etherscan API key, either by passing it as an argument or setting `ETHERSCAN_API_KEY`

#### OPTIONS

##### Verify Contract Options

<VerifierOptions />

`--chain-id` *chain\_id*\
    The chain ID the contract is deployed to (either a number or a chain name).\
    Default: mainnet

<RetryOptions />

<CommonOptions />

#### SEE ALSO

[forge](/forge/reference/overview), [forge create](/forge/reference/forge-create.mdx), [forge verify-contract](/forge/reference/forge-verify-contract.mdx)


import VerifierOptions from "../../reference/common/verifier-options.mdx";
import RetryOptions from "../../reference/common/retry-options.mdx";
import ProjectOptions from "./project-options.mdx";
import CommonOptions from "./common-options.mdx";

### forge verify-contract

#### NAME

forge-verify-contract - Verify smart contracts on a chosen verification provider.

#### SYNOPSIS

`forge verify-contract` \[*options*] *address* *contract*

#### DESCRIPTION

Verifies a smart contract on a chosen verification provider.

You must provide:

* The contract address
* The contract name or the path to the contract (read below)

In case of Etherscan and similar explorers verification (including BscScan/BaseScan/Polygonscan), you must also provide:

* Your [Etherscan API key](https://docs.etherscan.io/etherscan-v2), either by passing it as an argument or setting `ETHERSCAN_API_KEY`
* Legacy keys from specific explorers (eg BscScan/BaseScan/Polygonscan) are no longer suported and will throw an Invalid API key error

To find the exact compiler version, run `~/.svm/x.y.z/solc-x.y.z --version` and search for the 8 hex digits in the version string [here](https://etherscan.io/solcversions).

The path to the contract is in the format `<path>:<contract>`, e.g. `src/Contract.sol:Contract`.

By default, smart contracts are verified in a multi-file fashion. If you want to flatten the contract before verifying, pass `--flatten`.

This command will try to compile the source code of the flattened contract if `--flatten` is passed before verifying. If you do not want that, pass `--force`.

You can specify **ABI-encoded** constructor arguments with `--constructor-args`. Alternatively,
you can specify a file containing **space-separated** constructor arguments with `--constructor-args-path`.
(Note that [cache](/config/reference/project) must be enabled in the config for the latter to work.)

#### OPTIONS

##### Verify Contract Options

<VerifierOptions />

`--skip-is-verified-check`
    Send the verification request even if the contract is already verified.

`--compiler-version` *version*\
    The compiler version used to build the smart contract.

    To find the exact compiler version, run `~/.svm/x.y.z/solc-x.y.z --version` where `x` and
`y` are major and minor version numbers respectively, then search for the 8 hex digits in the version string [here](https://etherscan.io/solcversions).

`--num-of-optimizations` *num*\
`--optimizer-runs` *num*\
    The number of optimization runs used to build the smart contract.

`--constructor-args` *args*\
    The ABI-encoded constructor arguments. Conflicts with `--constructor-args-path`.

`--constructor-args-path` *file*\
    The path to a file containing the constructor arguments. Conflicts with `--constructor-args`.

`--chain-id` *chain*\
`--chain` *chain*\
    The ID or name of the chain the contract is deployed to.\
    Default: mainnet

`--flatten`\
    Flag indicating whether to flatten the source code before verifying.

    If this flag is not provided, the JSON standard input will be used instead.

`-f`\
`--force`\
    Do not compile the flattened smart contract before verifying.

<RetryOptions />

`--show-standard-json-input`\
    Command outputs JSON suitable for saving to a file and uploading to block explorers for verification.

`--watch`\
    Wait for verification result after submission.\
    Automatically runs `forge verify-check` until the verification either fails or succeeds.

`--via-ir`
    Set `viaIR` to true.
    If you compiled using `--via-ir` when deploying, pass it here too in order to prevent a bytecode mismatch.

<ProjectOptions />

<CommonOptions />

#### EXAMPLES

1. Verify a contract on Etherscan
   ```sh
   forge verify-contract --watch --chain sepolia 0x324eca20b358b18e48f2611f7452560ce3b3c1bb src/GmWorld.sol:GmWorld --verifier etherscan --etherscan-api-key YourApiKeyToken

   ```

2. Deploy and verify a contract on Etherscan
   ```sh
    forge create --broadcast --rpc-url https://rpc.sepolia.ethpandaops.io --private-key YourPrivateKey src/GmWorld.sol:GmWorld --verify --verifier etherscan --etherscan-api-key YourApiKeyToken

   ```

3. Verify a contract on a custom Sourcify instance

   ```sh
   forge verify-contract --verifier sourcify \
     --verifier-url http://localhost:5000 <address> SomeContract
   ```

4. Verify a flattened contract built with solc v0.8.11+commit.d7f03943:

   ```sh
   forge verify-contract --flatten --watch --compiler-version "v0.8.11+commit.d7f03943" \
     --constructor-args $(cast abi-encode "constructor(string,string,uint256,uint256)" "ForgeUSD" "FUSD" 18 1000000000000000000000) \
     <address> MyToken
   ```

5. Verify a flattened contract by specifying constructor arguments in a file:
   ```sh
   forge verify-contract --flatten --watch --compiler-version "v0.8.11+commit.d7f03943" \
     --constructor-args-path constructor-args.txt <address> src/Token.sol:MyToken
   ```
   where `constructor-args.txt` contains the following content:
   ```text
   ForgeUSD FUSD 18 1000000000000000000000
   ```

6. Verify a contract with Blockscout right after deployment (make sure you add "/api?" to the end of the Blockscout homepage explorer URL):

   ```sh
   forge create --rpc-url <rpc_https_endpoint> --private-key $devTestnetPrivateKey src/Contract.sol:SimpleStorage --verify --verifier blockscout --verifier-url <blockscout_homepage_explorer_url>/api?
   ```

7. verify a contract with Oklink
   ```sh
   forge verify-contract 0x8CDDE82cFB4555D6ca21B5b28F97630265DA94c4 Counter --verifier oklink --verifier-url https://www.oklink.com/api/v5/explorer/contract/verify-source-code-plugin/XLAYER  --api-key $OKLINK_API_KEY
   ```

8. verify a contract with Oklink while deploying
   ```sh
   forge create Counter --rpc-url <rpc_https_endpoint> --verify --verifier oklink --verifier-url https://www.oklink.com/api/v5/explorer/contract/verify-source-code-plugin/XLAYER --etherscan-api-key $OKLINK_API_KEY --private-key $PRIVATE_KEY --legacy
   ```

#### SEE ALSO

[forge](/forge/reference/overview), [forge create](/forge/reference/forge-create.mdx), [forge flatten](/forge/reference/forge-flatten.mdx), [forge verify-check](/forge/reference/forge-verify-check.mdx)


### General Commands

* [forge](/forge/reference/overview)
* [forge help](/forge/reference/forge-help.mdx)
* [forge completions](/forge/reference/forge-completions.mdx)


import CommonOptions from "./common-options.mdx";

### forge

#### NAME

forge - Build, test, fuzz, debug and deploy Solidity contracts.

#### SYNOPSIS

`forge` \[*options*] *command* \[*args*]\
`forge` \[*options*] `--version`\
`forge` \[*options*] `--help`

#### DESCRIPTION

This program is a set of tools to build, test, fuzz, debug and deploy Solidity smart contracts.

#### COMMANDS

##### General Commands

[forge help](/forge/reference/forge-help.mdx)\
    Display help information about Forge.

[forge completions](/forge/reference/forge-completions.mdx)\
    Generate shell autocompletions for Forge.

##### Project Commands

[forge init](/forge/reference/forge-init.mdx)\
    Create a new Forge project.

[forge clone](/forge/reference/forge-clone.mdx)\
    Clone a on-chain verified contract as a Forge project.

[forge install](/forge/reference/forge-install.mdx)\
    Install one or multiple dependencies.

[forge update](/forge/reference/forge-update.mdx)\
    Update one or multiple dependencies.

[forge remove](/forge/reference/forge-remove.mdx)\
    Remove one or multiple dependencies.

[forge config](/forge/reference/forge-config.mdx)\
    Display the current config.

[forge remappings](/forge/reference/forge-remappings.mdx)\
    Get the automatically inferred remappings for this project.

[forge tree](/forge/reference/forge-tree.mdx)\
    Display a tree visualization of the project's dependency graph.

[forge geiger](/forge/reference/forge-geiger.mdx)
    Detects usage of unsafe cheat codes in a foundry project and its dependencies.

##### Build Commands

[forge build](/forge/reference/forge-build.mdx)\
    Build the project's smart contracts.

[forge clean](/forge/reference/forge-clean.mdx)\
    Remove the build artifacts and cache directories.

[forge inspect](/forge/reference/forge-inspect.mdx)\
    Get specialized information about a smart contract.

##### Test Commands

[forge test](/forge/reference/forge-test.mdx)\
    Run the project's tests.

[forge snapshot](/forge/reference/forge-snapshot.mdx)\
    Create a snapshot of each test's gas usage.

[forge coverage](/forge/reference/forge-coverage.mdx)\
    Generate coverage reports.

##### Deploy Commands

[forge create](/forge/reference/forge-create.mdx)\
    Deploy a smart contract.

[forge verify-contract](/forge/reference/forge-verify-contract.mdx)\
    Verify smart contracts on Etherscan.

[forge verify-check](/forge/reference/forge-verify-check.mdx)\
    Check verification status on Etherscan.

[forge flatten](/forge/reference/forge-flatten.mdx)\
    Flatten a source file and all of its imports into one file.

##### Utility Commands

[forge bind](/forge/reference/forge-bind.mdx)\
    Generate Rust bindings for smart contracts.

[forge cache](/forge/reference/forge-cache.mdx)\
    Manage the Foundry cache.

[forge cache clean](/forge/reference/forge-cache-clean.mdx)\
    Cleans cached data from `~/.foundry`.

[forge cache ls](/forge/reference/forge-cache-ls.mdx)\
    Shows cached data from `~/.foundry`.

[forge script](/forge/reference/forge-script.mdx)\
    Run a smart contract as a script, building transactions that can be sent onchain.

[forge upload-selectors](/forge/reference/forge-upload-selectors.mdx)\
    Uploads abi of given contract to [https://openchain.xyz/signatures](https://openchain.xyz/signatures) function selector database.

[forge doc](/forge/reference/forge-doc.mdx)\
    Generate documentation for Solidity source files.

#### OPTIONS

##### Special Options

`-V`\
`--version`\
    Print version info and exit.

<CommonOptions />

#### FILES

`~/.foundry/`\
    Default location for Foundry's "home" directory where it stores various files.

`~/.foundry/bin/`\
    Binaries installed using `foundryup` will be located here.

`~/.foundry/cache/`\
    Forge's cache directory, where it stores cached block data and more.

`~/.foundry/foundry.toml`\
    The global [Foundry config](/config/reference/overview.mdx).

`~/.svm`\
    The location of the Forge-managed solc binaries.

#### EXAMPLES

1. Create a new Forge project:

   ```sh
   forge init hello_foundry
   ```

2. Build a project:

   ```sh
   forge build
   ```

3. Run a project's tests:
   ```sh
   forge test
   ```

#### BUGS

See [https://github.com/foundry-rs/foundry/issues](https://github.com/foundry-rs/foundry/issues) for issues.


### Project Commands

* [forge init](/forge/reference/forge-init.mdx)
* [forge clone](/forge/reference/forge-clone.mdx)
* [forge install](/forge/reference/forge-install.mdx)
* [forge update](/forge/reference/forge-update.mdx)
* [forge remove](/forge/reference/forge-remove.mdx)
* [forge config](/forge/reference/forge-config.mdx)
* [forge remappings](/forge/reference/forge-remappings.mdx)
* [forge tree](/forge/reference/forge-tree.mdx)
* [forge geiger](/forge/reference/forge-geiger.mdx)


##### Project Options

`--build-info`\
    Generate build info files.

`--build-info-path` *path*\
    Output path to directory that build info files will be written to.

`--root` *path*\
    The project's root path. By default, this is the root directory of the current git repository, or the current working directory.

`-C` *path*\
`--contracts` *path*\
    The contracts source directory.\
    Environment: `DAPP_SRC`

`--lib-paths` *path*\
    The path to the library folder.

`-R` *remappings*\
`--remappings` *remappings*\
    The project's remappings.

    The parameter is a comma-separated list of remappings in the format `<source>=<dest>`.

`--cache-path` *path*\
    The path to the compiler cache.

`--config-path` *file*\
    Path to the config file.

`--hh`\
`--hardhat`\
    This is a convenience flag, and is the same as passing `--contracts contracts --lib-paths node-modules`.


### Test Commands

* [forge test](/forge/reference/forge-test.mdx)
* [forge snapshot](/forge/reference/forge-snapshot.mdx)
* [forge coverage](/forge/reference/forge-coverage.mdx)


##### Test Options

`-m` *regex*\
`--match` *regex*\
    Only run test functions matching the specified regex pattern.\
    **Deprecated: See `--match-test`.**

`--match-test` *regex*\
    Only run test functions matching the specified regex pattern.

`--no-match-test` *regex*\
    Only run test functions that do not match the specified regex pattern.

`--match-contract` *regex*\
    Only run tests in contracts matching the specified regex pattern.

`--no-match-contract` *regex*\
    Only run tests in contracts that do not match the specified regex pattern.

`--match-path` *glob*\
    Only run tests in source files matching the specified glob pattern.

`--no-match-path` *glob*\
    Only run tests in source files that do not match the specified glob pattern.

`--debug` *regex*\
    Run a test in the debugger.

    The argument passed to this flag is the name of the test function you want to run, and it works the same as `--match-test`.

    If more than one test matches your specified criteria, you must add additional filters until only one test is found (see `--match-contract` and `--match-path`).

    The matching test will be opened in the debugger regardless of the outcome of the test.

    If the matching test is a fuzz test, then it will open the debugger on the first failure case. If the fuzz test does not fail, it will open the debugger on the last fuzz case.

`--gas-report`\
    Print a gas report.

`--allow-failure`\
    Exit with code 0 even if a test fails.

`--fail-fast`\
    Stop running tests after the first failure.

`--etherscan-api-key` *key*\
    Etherscan API key. If set, traces are decoded using Etherscan if `--fork-url` is also set.\
    Environment: `ETHERSCAN_API_KEY`


### Utility Commands

* [forge bind](/forge/reference/forge-bind.mdx)
* [forge cache](/forge/reference/forge-cache.mdx)
* [forge cache clean](/forge/reference/forge-cache-clean.mdx)
* [forge cache ls](/forge/reference/forge-cache-ls.mdx)
* [forge script](/forge/reference/forge-script.mdx)
* [forge upload-selectors](/forge/reference/forge-upload-selectors.mdx)
* [forge doc](/forge/reference/forge-doc.mdx)


##### Watch Options

`-w` \[*path...*]\
`--watch` \[*path...*]\
    Watch specific file(s) or folder(s).

    By default, the project's source directory is watched.

`-d` *delay*\
`--delay` *delay*\
    File update debounce delay.

    During the delay, incoming change events are accumulated and only once the delay has passed, is an action taken.\
    Note that this does not mean a command will be started: if `--no-restart` is given and a command is already running, the outcome of the action will be to do nothing.

    Defaults to 50ms. Parses as decimal seconds by default, but using an integer with the `ms` suffix may be more convenient.

    When using `--poll` mode, you'll want a larger duration, or risk overloading disk I/O.

`--no-restart`\
    Do not restart the command while it's running.

`--run-all`\
    Explicitly re-run the command on all files when a change is made.


### Commenting

1. For public or external methods and variables, use [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) comments.

* `forge doc` will parse these to autogenerate documentation.
* Etherscan will display them in the contract UI.

2. For simple NatSpec comments, consider just documenting params in the docstring, such as ``/// @notice Returns the sum of `x` and `y`.``, instead of using `@param` tags.

3. For complex NatSpec comments, consider using a tool like [PlantUML](https://plantuml.com/ascii-art) to generate ASCII art diagrams to help explain complex aspects of the codebase.

4. Any markdown in your comments will carry over properly when generating docs with `forge doc`, so structure comments with markdown when useful.

   * Good: ``/// @notice Returns the sum of `x` and `y`.``
   * Bad: `/// @notice Returns the sum of x and y.`


### Key Management

Script execution requires a private key to send transactions. This key controls all funds in the account, so it must be protected carefully. There are a few options for securely broadcasting transactions through a script:

#### Using Hardware Wallet

Hardware wallets such as Ledger and Trezor store seed phrases in a secure enclave. Forge can send a raw transaction to the wallet, and the wallet will sign the transaction. The signed transaction is returned to forge and broadcaster. This way, private keys never leave the hardware wallet, making this a very secure approach. To use a hardware wallet with scripts, see the `--ledger` and `--trezor` [flags](/forge/reference/forge-script).

#### Using Private Keys

With this approach you expose a private key on your machine, making it riskier than the above option. Therefore the suggested way to directly use a private key is to generate a new wallet for executing the script, and only send that wallet enough funds to run the script. Then, stop using the key after the script is complete. This way, if the key is compromised, only the funds on this throwaway key are lost, as opposed to losing everything in your wallet.

1. It's very important that your scripts or contracts don't rely on `msg.sender` since the sender will not be an account that's meant to be used again. For example, if a deploy script configures a contract owner, ensure the owner a constructor argument and not set to `msg.sender`.

2. To use this approach, you can either store the private key in an environment variable and use cheat codes to read it in, or use the `--private-key` flag to directly provide the key.

#### Using a keystore

This can be thought of as a middle ground between the above two approaches. With [`cast wallet import`](/cast/reference/cast-wallet-import) you import a private key and encrypt it with a password. This still temporarily exposes your private key on your machine, but it becomes encrypted and you'll provide the password to decrypt it to run a script.

Additional security precautions when using scripts:

1. Use a separate wallet for testing and development, instead of using your main wallet with real funds. Diversifying minimizes the risk of losing funds if your development wallet is compromised.
2. If you accidentally push a private key or seed phrase to GitHub, or expose it online via other means—even momentarily—treat it as compromised. Act immediately to transfer your funds to a safer destination.
3. When in doubt about whether a wallet contains real funds or not, assume it does. Always be certain about a wallet's balances and status when using it for development purposes. Use [blockscan](https://blockscan.com/) to easily check many chains to see where the address has been used.
4. Remember that adding an account in wallets like Metamask generates a new private key. However, that private key is derived from the same mnemonic as the other accounts generated in that wallet. Therefore, never expose the mnemonic as it may compromise all of your accounts.

*This was section was inspired by [The Pledge](https://github.com/smartcontractkit/full-blockchain-solidity-course-js/discussions/5) from [Patrick Collins](https://twitter.com/PatrickAlphaC).*


### Security Practices

Thanks to [@samsczun](https://twitter.com/samczsun)'s [How Do You Even Write Secure Code Anyways](https://www.youtube.com/watch?v=Wm3t8Fuiy1E) talk for the tips in this section and the following section.

* Don't optimize for coverage, optimize for well thought-out tests.
* Write positive and negative unit tests.
  * Write *positive* unit tests for things that the code should handle. Validate *all* state that changes from these tests.
  * Write *negative* unit tests for things that the code should *not* handle. It's helpful to follow up (as an adjacent test) with the positive test and make the change that it needs to pass.
  * Each code path should have its own unit test.
* Write integration tests to test entire features.
* Write fork tests to verify the correct behavior with existing deployed contract.

#### Taint Analysis

When testing, you should prioritize functions that an attacker can affect, that means functions that accept some kind of user input. These are called *sources*.

Consider that input data as *tainted* until it has been checked by the code, at which point it's considered *clean*.

A *sink* is a part of the code where some important operation is happening. For example, in MakerDAO that would be `vat.sol`.

You should *ensure* that no *tainted* data ever reaches a *sink*. That means that all data that find themselves in the sink, should, at some point, have been checked by you. So, you need to define what the data *should* be and then make sure your checks *ensure* that the data will be how you expect it to be.

Write more secure code and better tests using these as references to learn from:

* [transmissions11/solcurity](https://github.com/transmissions11/solcurity)
* [nascentxyz/simple-security-toolkit](https://github.com/nascentxyz/simple-security-toolkit)


### General Contract Guidance

#### Named Imports

Always use named import syntax, don't import full files. This restricts what is being imported to just the named items, not everything in the file. Importing full files can result in solc complaining about duplicate definitions and slither erroring, especially as repos grow and have more dependencies with overlapping names.

* Good: `import {MyContract} from "src/MyContract.sol"` to only import `MyContract`.
* Bad: `import "src/MyContract.sol"` imports everything in `MyContract.sol`. (Importing `forge-std/Test` or `Script` can be an exception here, so you get the console library, etc).

#### Absolute vs Relative Imports

Note the tradeoffs between absolute and relative paths for imports (where absolute paths are relative to the repo root, e.g. `"src/interfaces/IERC20.sol"`), and choose the best approach for your project:

* Absolute paths make it easier to see where files are from and reduce churn when moving files around.
* Relative paths make it more likely your editor can provide features like linting and autocomplete, since editors/extensions may not understand your remappings.

#### Copying Libraries from Dependencies

If copying a library from a dependency (instead of importing it), use the `ignore = []` option in the config file to avoid formatting that file. This makes diffing it against the original simpler for reviewers and auditors.

#### Formatting

Similarly, feel free to use the `// forgefmt: disable-*` comment directives to ignore lines/sections of code that look better with manual formatting. Supported values for `*` are:

* `disable-line`
* `disable-next-line`
* `disable-next-item`
* `disable-start`
* `disable-end`

#### Write Secure Code

Additional best practices from [samsczun](https://twitter.com/samczsun)'s [How Do You Even Write Secure Code Anyways](https://www.youtube.com/watch?v=Wm3t8Fuiy1E) talk:

* Use descriptive variable names.
* Limit the number of active variables.
* No redundant logic.
* Early exit as much as possible to reduce mental load when seeing the code.
* Related code should be placed near each other.
* Delete unused code.


### Scripting Practices

#### Use `run` as the default function

Stick with `run` as the default function name for clarity.

#### Assign correct function visibility

Any methods that are not intended to be called directly in the script should be `internal` or `private`. Generally the only public method should be `run`, as it's easier to read/understand when each script file just does one thing.

#### Naming script files

Consider prefixing scripts with a number based on the order they're intended to be run over the protocol's lifecycle. For example, `01_Deploy.s.sol`, `02_TransferOwnership.s.sol`. This makes things more self-documenting. This may not always apply depending on your project.

#### Test your scripts

* Unit test them like you would test normal contracts, by writing tests that assert on the state changes made from running the script.
* Write your deploy script and scaffold tests by running that script. Then, run all tests against the state resulting from your production deployment script. This is a great way to gain confidence in a deploy script.
* Within your script itself, use `require` statements (or the `if (condition) revert()` pattern if you prefer) to stop execution of your script if something is wrong. For example, `require(computedAddress == deployedAddress, "address mismatch")`. Using the `assertEq` helpers instead will not stop execution.

#### Audit Broadcast Transactions

**Carefully audit which transactions are broadcast**. Transactions not broadcast are still executed in the context of a test, so missing broadcasts or extra broadcasts are easy sources of error in the previous step.

#### Avoid getting frontrun

**Watch out for frontrunning**. Forge simulates your script, generates transaction data from the simulation results, then broadcasts the transactions. Make sure your script is robust against chain-state changing between the simulation and broadcast. A sample script vulnerable to this is below:

```solidity
// Pseudo-code, may not compile.
contract VulnerableScript is Script {
   function run() public {
      vm.startBroadcast();

      // Transaction 1: Deploy a new Gnosis Safe with CREATE.
      // Because we're using CREATE instead of CREATE2, the address of the new
      // Safe is a function of the nonce of the gnosisSafeProxyFactory.
      address mySafe = gnosisSafeProxyFactory.createProxy(singleton, data);

      // Transaction 2: Send tokens to the new Safe.
      // We know the address of mySafe is a function of the nonce of the
      // gnosisSafeProxyFactory. If someone else deploys a Gnosis Safe between
      // the simulation and broadcast, the address of mySafe will be different,
      // and this script will send 1000 DAI to the other person's Safe. In this
      // case, we can protect ourselves from this by using CREATE2 instead of
      // CREATE, but every situation may have different solutions.
      dai.transfer(mySafe, 1000e18);

      vm.stopBroadcast();
   }
}
```

#### Reading JSON files

For scripts that read from JSON input files, put the input files in `script/input/<chainID>/<description>.json`. Then have `run(string memory input)` (or take multiple string inputs if you need to read from multiple files) as the script's signature, and use the below method to read the JSON file.

```solidity
function readInput(string memory input) internal returns (string memory) {
  string memory inputDir = string.concat(vm.projectRoot(), "/script/input/");
  string memory chainDir = string.concat(vm.toString(block.chainid), "/");
  string memory file = string.concat(input, ".json");
  return vm.readFile(string.concat(inputDir, chainDir, file));
}
```


### Tests

***

#### General Test Guidance

##### Naming test files

For testing `MyContract.sol`, the test file should be `MyContract.t.sol`. For testing `MyScript.s.sol`, the test file should be `MyScript.t.sol`.

* If the contract is big and you want to split it over multiple files, group them logically like `MyContract.owner.t.sol`, `MyContract.deposits.t.sol`, etc.

##### No assertions in `setUp`

Never make assertions in the `setUp` function, instead use a dedicated test like `test_SetUpState()` if you need to ensure your `setUp` function does what you expected. More info on why in [foundry-rs/foundry#1291](https://github.com/foundry-rs/foundry/issues/1291)

##### Organizing and Naming tests

For unit tests, there are two major ways to organize the tests:

1. Treat contracts as describe blocks:

   * `contract Add` holds all unit tests for the `add` method of `MyContract`.
   * `contract Supply` holds all tests for the `supply` method.
   * `contract Constructor` hold all tests for the constructor.
   * A benefit of this approach is that smaller contracts should compile faster than large ones, so this approach of many small contracts should save time as test suites get large.

2. Have a Test contract per contract-under-test, with as many utilities and fixtures as you want:

   * `contract MyContractTest` holds all unit tests for `MyContract`.
   * `function test_add_AddsTwoNumbers()` lives within `MyContractTest` to test the `add` method.
   * `function test_supply_UsersCanSupplyTokens()` also lives within `MyContractTest` to test the `supply` method.
   * A benefit of this approach is that test output is grouped by contract-under-test, which makes it easier to quickly see where failures are.

3. Some general guidance for all kinds tests:

   * Test contracts/functions should be written in the same order as the original functions in the contract-under-test.
   * All unit tests that test the same function should live serially in the test file.
   * Test contracts can inherit from any helper contracts you want. For example `contract MyContractTest` tests `MyContract`, but may inherit from forge-std's `Test`, as well as e.g. your own `TestUtilities` helper contract.

4. Integration tests should live in the same `test` directory, with a clear naming convention. These may be in dedicated files, or they may live next to related unit tests in existing test files.

5. Be consistent with test naming, as it's helpful for filtering tests (e.g. for gas reports you might want to filter out revert tests). When combining naming conventions, keep them alphabetical. Below is a sample of valid names. A comprehensive list of valid and invalid examples can be found [here](https://github.com/ScopeLift/scopelint/blob/1857e3940bfe92ac5a136827374f4b27ff083971/src/check/validators/test_names.rs#L106-L143).

   * `test_Description` for standard tests.
   * `testFuzz_Description` for fuzz tests.
   * `test_Revert[If|When]_Condition` for tests expecting a revert.
   * `testFork_Description` for tests that fork from a network.
   * `testForkFuzz_Revert[If|When]_Condition` for a fuzz test that forks and expects a revert.

6. Name your constants and immutables using `ALL_CAPS_WITH_UNDERSCORES`, to make it easier to distinguish them from variables and functions.

7. When using assertions like `assertEq`, consider leveraging the last string param to make it easier to identify failures. These can be kept brief, or even just be numbers—they basically serve as a replacement for showing line numbers of the revert, e.g. `assertEq(x, y, "1")` or `assertEq(x, y, "sum1")`. *(Note: [foundry-rs/foundry#2328](https://github.com/foundry-rs/foundry/issues/2328) tracks integrating this natively).*

8. When testing events, prefer setting all `expectEmit` arguments to `true`, i.e. `vm.expectEmit(true, true, true, true)` or `vm.expectEmit()`. Benefits:

   * This ensures you test everything in your event.
   * If you add a topic (i.e. a new indexed parameter), it's now tested by default.
   * Even if you only have 1 topic, the extra `true` arguments don't hurt.

9. Remember to write invariant tests! For the assertion string, use a verbose english description of the invariant: `assertEq(x + y, z, "Invariant violated: the sum of x and y must always equal z")`.

#### Fork Tests

##### Use fork tests liberally

Don't feel like you need to give forks tests special treatment, and use them liberally:

* Mocks are *required* in closed-source web2 development—you have to mock API responses because the code for that API isn't open source so you cannot just run it locally. But for blockchains that's not true: any code you're interacting with that's already deployed can be locally executed and even modified for free. So why introduce the risk of a wrong mock if you don't need to?
* A common reason to avoid fork tests and prefer mocks is that fork tests are slow. But this is not always true. By pinning to a block number, forge caches RPC responses so only the first run is slower, and subsequent runs are significantly faster. See [this benchmark](https://github.com/mds1/convex-shutdown-simulation/), where it took forge 7 minutes for the first run with a remote RPC, but only half a second once data was cached. [Alchemy](https://alchemy.com), [Infura](https://infura.io) and [Tenderly](https://tenderly.co) offer free archive data, so pinning to a block shouldn't be problematic.
* Note that the [foundry-toolchain](https://github.com/foundry-rs/foundry-toolchain) GitHub Action will cache RPC responses in CI by default, and it will also update the cache when you update your fork tests.

##### Minimize RPC requests

Be careful with fuzz tests on a fork to avoid burning through RPC requests with non-deterministic fuzzing. If the input to your fork fuzz test is some parameter which is used in an RPC call to fetch data (e.g. querying the token balance of an address), each run of a fuzz test uses at least 1 RPC request, so you'll quickly hit rate limits or usage limits. Solutions to consider:

* Replace multiple RPC calls with a single [multicall](https://github.com/mds1/multicall).
* Specify a fuzz/invariant [seed](/config/reference/testing#seed): this makes sure each `forge test` invocation uses the same fuzz inputs. RPC results are cached locally, so you'll only query the node the first time.
* In CI, consider setting the fuzz seed using a [computed environment variable](https://github.com/sablier-labs/v2-core/blob/d1157b49ed4bceeff0c4e437c9f723e88c134d3a/.github/workflows/ci.yml#L252-L254) so it changes every day or every week. This gives flexibility on the tradeoff between increasing randomness to find more bugs vs. using a seed to reduce RPC requests.
* Structure your tests so the data you are fuzzing over is computed locally by your contract, and not data that is used in an RPC call (may or may not be feasible based on what you're doing).
* Lastly, you can of course always run a local node or bump your RPC plan.

##### Configure fork urls in `foundry.toml` and use cheatcodes

1. When writing fork tests, do not use the `--fork-url` flag. Instead, prefer the following approach for its improved flexibility:

   * Define `[rpc_endpoints]` in the `foundry.toml` config file and use the [forking cheatcodes](/forge/tests/fork-testing#forking-cheatcodes).
   * Access the RPC URL endpoint in your test with forge-std's `stdChains.ChainName.rpcUrl`. See the list of supported chains and expected config file aliases [here](https://github.com/foundry-rs/forge-std/blob/ff4bf7db008d096ea5a657f2c20516182252a3ed/src/StdCheats.sol#L255-L271).
   * Always pin to a block so tests are deterministic and RPC responses are cached.
   * More info on this fork test approach can be found [here](https://twitter.com/msolomon44/status/1564742781129502722) (this predates `StdChains` so that aspect is a bit out of date).

#### Test Harnesses

##### Internal Functions

To test `internal` functions, write a harness contract that inherits from the contract under test (CuT). Harness contracts that inherit from the CuT expose the `internal` functions as `external` ones.

Each `internal` function that is tested should be exposed via an external one with a name that follows the pattern `exposed_<function_name>`. For example:

```solidity
// file: src/MyContract.sol
contract MyContract {
  function myInternalMethod() internal returns (uint) {
    return 42;
  }
}

// file: test/MyContract.t.sol
import {MyContract} from "src/MyContract.sol";

contract MyContractHarness is MyContract {
  // Deploy this contract then call this method to test `myInternalMethod`.
  function exposed_myInternalMethod() external returns (uint) {
    return myInternalMethod();
  }
}
```

##### Private Functions

Unfortunately there is currently no good way to unit test `private` methods since they cannot be accessed by any other contracts. Options include:

* Converting `private` functions to `internal`.
* Copy/pasting the logic into your test contract and writing a script that runs in CI check to ensure both functions are identical.

##### Workaround Functions

Harnesses can also be used to expose functionality or information otherwise unavailable in the original smart contract. The most straightforward example is when we want to test the length of a public array. The functions should follow the pattern: `workaround_<function_name>`, such as `workaround_queueLength()`.

Another use case for this is tracking data that you would not track in production to help test invariants. For example, you might store a list of all token holders to simplify validation of the invariant "sum of all balances must equal total supply". These are often known as "ghost variables". You can learn more about this in [Rikard Hjort](https://twitter.com/rikardhjort)'s [Formal Methods for the Working DeFi Dev](https://youtu.be/ETlNhV9jYJw) talk.


### Clone a Verified Contract

To clone an on-chain verified contract as a Forge project, use [`forge clone`](/forge/reference/forge-clone), say [WETH9](https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2) on Ethereum mainnet:

```sh
// [!include ~/snippets/clone_contract/forge-clone:command]
```

This creates a new directory `WETH9`, configures it as a foundry project and clones all the source code of the contract into it. This also initializes a new `git` repository.

```sh
// [!include ~/snippets/clone_contract/forge-clone:output]
```

The cloned Forge project comes with an additional `.clone.meta` metadata file besides those ordinary files that a normal Forge project has.

Let's see what the `.clone.meta` file looks like:

```sh
// [!include ~/snippets/clone_contract/clone-meta:output]
```

`clone.meta` is a compact JSON data file that contains the information of the on-chain contract instance, e.g., contract address, constructor arguments, etc. More details of the metadata can be found in the [reference](/forge/reference/forge-clone).


### Creating a New Project

To start a new project with Foundry, use [`forge init`](/forge/reference/forge-init):

```sh
// [!include ~/snippets/output/hello_foundry/forge-init:command]
```

This creates a new directory `hello_foundry` from the default template. This also initializes a new `git` repository.

If you want to create a new project using a different template, you would pass the `--template` flag, like so:

```sh
forge init --template https://github.com/foundry-rs/forge-template hello_template
```

For now, let's check what the default template looks like:

```sh
cd hello_foundry
```

```sh
// [!include ~/snippets/output/hello_foundry/tree:all]
```

The default template comes with one dependency installed: Forge Standard Library. This is the preferred testing library used for Foundry projects. Additionally, the template also comes with an empty starter contract and a simple test.

Let's build the project:

```sh
// [!include ~/snippets/output/hello_foundry/forge-build:all]
```

And run the tests:

```sh
// [!include ~/snippets/output/hello_foundry/forge-test:all]
```

You'll notice that two new directories have popped up: `out` and `cache`.

The `out` directory contains your contract artifact, such as the ABI, while the `cache` is used by `forge` to only recompile what is necessary.


### Dependencies

Forge manages dependencies using [git submodules](https://git-scm.com/book/en/v2/Git-Tools-Submodules) by default, which means that it works with any GitHub repository that contains smart contracts.

#### Adding a dependency

To add a dependency, run [`forge install`](/forge/reference/forge-update):

```sh
// [!include ~/snippets/output/hello_foundry/forge-install:all]
```

This pulls the `solady` library, stages the `.gitmodules` file in git and makes a commit with the message `Installed solady`.

If we now check the `lib` folder:

```sh
// [!include ~/snippets/output/hello_foundry/tree:all]
```

We can see that Forge installed `solady`!

By default, `forge install` installs the latest master branch version. If you want to install a specific tag or commit, you can do it like so:

```sh
forge install vectorized/solady@v0.1.3
```

#### Remapping dependencies

Forge can remap dependencies to make them easier to import. Forge will automatically try to deduce some remappings for you:

```sh
// [!include ~/snippets/output/hello_foundry/forge-remappings:all]
```

These remappings mean:

* To import from `forge-std` we would write: `import "forge-std/Contract.sol";`
* To import from `solady` we would write: `import "solady/Contract.sol";`

You can customize these remappings by creating a `remappings.txt` file in the root of your project.

Let's create a remapping called `solady-utils` that points to the `utils` folder in the `solady` repository!

```sh
@solady-utils/=lib/solady/src/utils/
```

You can also set remappings in `foundry.toml`.

```toml
remappings = [
    "@solady-utils/=lib/solady/src/utils/",
]
```

Now we can import any of the contracts in `src/utils` of the `solady` repository like so:

```solidity
import {LibString} from "@solady-utils/LibString.sol";
```

#### Remapping conflicts

In some cases, you may encounter dependency conflicts when two or more git submodules include different dependencies with the same namespace. For example, suppose you have installed both `org/lib_1` and `org/lib_2`, and they each reference their own versions of `@openzeppelin`. In such scenarios, `forge remappings` generates a single remapping entry for the namespace, which will point to only one of the two `@openzeppelin` libraries.

```sh
forge remappings
@openzeppelin/=lib/lib_1/node_modules/@openzeppelin/
```

This situation can lead to import issues, causing `forge build` to fail or introduce unexpected behavior into your contracts. To resolve this, you can add remapping contexts to your `remappings.txt` file. This instructs the compiler to use different remappings in distinct compilation contexts, resolving the conflict. For example, to address the conflict between `lib_1` and `lib_2`, you would update your remappings.txt as follows:

```sh
lib/lib_1/:@openzeppelin/=lib/lib_1/node_modules/@openzeppelin/
lib/lib_2/:@openzeppelin/=lib/lib_2/node_modules/@openzeppelin/
```

This approach ensures that each dependency is mapped to the appropriate library version, avoiding potential issues. For more information about remapping, please see the [Solidity Lang Docs](https://docs.soliditylang.org/en/latest/path-resolution.html#import-remapping).

#### Updating dependencies

You can update a specific dependency to the latest commit on the version you have specified using [`forge update <dep>`](/forge/reference/forge-update). For example, if we wanted to pull the latest commit from our previously installed master-version of `solady`, we would run:

```sh
forge update lib/solady
```

Alternatively, you can do this for all dependencies at once by just running `forge update`.

#### Removing dependencies

You can remove dependencies using [`forge remove <deps>...`](/forge/reference/forge-remove), where `<deps>` is either the full path to the dependency or just the name. For example, to remove `solady` both of these commands are equivalent:

```sh
forge remove solady
# ... is equivalent to ...
forge remove lib/solady
```

#### Hardhat compatibility

Forge also supports Hardhat-style projects where dependencies are npm packages (stored in `node_modules`) and contracts are stored in `contracts` as opposed to `src`.

To enable Hardhat compatibility mode pass the `--hh` flag.


### Project Layout

Forge is flexible on how you structure your project. By default, the structure is:

```sh
// [!include ~/snippets/output/hello_foundry/tree-with-files:output]
```

* You can configure Foundry's behavior using `foundry.toml`.
* Remappings are specified in `remappings.txt`.
* The default directory for contracts is `src/`.
* The default directory for tests is `test/`, where any contract with a function that starts with `test` is considered to be a test.
* Dependencies are stored as git submodules in `lib/`.

You can configure where Forge looks for both dependencies and contracts using the `--lib-paths` and `--contracts` flags respectively. Alternatively you can configure it in `foundry.toml`.

Combined with remappings, this gives you the flexibility needed to support the project structure of other toolchains such as Hardhat and Truffle.

For automatic Hardhat support you can also pass the `--hh` flag, which sets the following flags: `--lib-paths node_modules --contracts contracts`.


### Soldeer as a Package Manager

As explained [here](./dependencies), Foundry has been using git submodules to handle dependencies up until now.

The need for a native package manager started to emerge as projects became more complex.

A new approach has been in the making, [soldeer.xyz](https://soldeer.xyz), which is a Solidity native dependency manager built in Rust and open sourced (check the repository [https://github.com/mario-eth/soldeer](https://github.com/mario-eth/soldeer)).

##### If you want to see the full commands and usage of Soldeer, you can visit the [USAGE.md](https://github.com/mario-eth/soldeer/blob/main/USAGE.md).

#### Initialize a new project

If you're using Soldeer for the first time in a new Foundry project, you can use the `init` command to install a fresh instance of Soldeer, complete with the necessary configurations and the latest version of `forge-std`.

```bash
forge soldeer init
```

#### Adding a Dependency

##### Add a Dependency Stored in the Central Repository

To add a dependency, you can visit [soldeer.xyz](https://soldeer.xyz) and search for the dependency you want to add (e.g., openzeppelin 5.0.2).

![image](https://i.postimg.cc/Hm6R8MTs/Unknown-413.png)

Then just run the forge command:

```bash
forge soldeer install @openzeppelin-contracts~5.0.2
```

This will download the dependency from the central repository and install it into a `dependencies` directory.

Soldeer can manage two types of dependency configuration: using `soldeer.toml` or embedded in the `foundry.toml`. In order to work with Foundry, you have to define the `[dependencies]` config in the `foundry.toml`. This will tell the `soldeer CLI` to define the installed dependencies there.
E.g.

```toml
# Full reference https://github.com/foundry-rs/foundry/tree/master/crates/config

[profile.default]
auto_detect_solc = false
bytecode_hash = "none"
fuzz = { runs = 1_000 }
libs = ["dependencies"] # <= This is important to be added
gas_reports = ["*"]

[dependencies] # <= Dependencies will be added under this config
"@openzeppelin-contracts" = { version = "5.0.2" }
"@uniswap-universal-router" = { version = "1.6.0" }
"@prb-math" = { version = "4.0.2" }
forge-std = { version = "1.8.1" }
```

##### Add a Dependency Stored at a Specific Link

If the central repository does not have a certain dependency, you can install it by providing a zip archive link.

E.g.

```bash
forge soldeer install @custom-dependency~1.0.0 --url https://my-website.com/custom-dependency-1-0-0.zip
```

The above command will try to download the dependency from the provided link and install it as a normal dependency. For this, you will see in the config an additional field called `path`.

E.g.

```toml
[dependencies]
"@custom-dependency" = { version = "1.0.0", path = "https://my-website.com/custom-dependency-1-0-0.zip" }
```

##### Add a Dependency Stored in GIT

If you choose to use Git as a source for your dependencies — though we generally discourage this, since Git isn't designed to be a dependency manager — you can provide the Git repository link as an additional argument. Soldeer will then automatically handle the installation using a Git subprocess.
For example:

```bash
forge soldeer install forge-std~1.9.2 --git https://github.com/foundry-rs/forge-std.git
```

If you want to use a specific revision, branch, or tag, you can do so by appending the following arguments to the command: `--rev/--tag/--branch`

e.g.

```bash
forge soldeer install forge-std~1.9.2 --git https://github.com/foundry-rs/forge-std.git --rev 4695fac44b2934aaa6d7150e2eaf0256fdc566a7
```

Some git examples:

Some examples:

```bash
forge soldeer install test-project~v1 --git git@github.com:test/test.git
forge soldeer install test-project~v1 --git git@gitlab.com:test/test.git
```

```bash
forge soldeer install test-project~v1 --git https://github.com/test/test.git
forge soldeer install test-project~v1 --git https://gitlab.com/test/test.git
```

```bash
forge soldeer install test-project~v1 --git git@github.com:test/test.git --rev 345e611cd84bfb4e62c583fa1886c1928bc1a464
forge soldeer install test-project~v1 --git git@github.com:test/test.git --branch dev
forge soldeer install test-project~v1 --git git@github.com:test/test.git --tag v1
```

#### Updating Dependencies

Because Soldeer specifies the dependencies in a config file (foundry or soldeer toml), sharing a dependency configuration within the team is much easier.

For example, having this Foundry config file in a git repository, one can pull the repository and then run `forge soldeer update`. This command will automatically install all the dependencies specified under the `[dependencies]` tag.

```toml
# Full reference https://github.com/foundry-rs/foundry/tree/master/crates/config

[profile.default]
auto_detect_solc = false
bytecode_hash = "none"
fuzz = { runs = 1_000 }
libs = ["dependencies"] # <= This is important to be added
gas_reports = ["*"]

[dependencies] # <= Dependencies will be added under this config
"@openzeppelin-contracts" = { version = "5.0.2" }
"@uniswap-universal-router" = { version = "1.6.0" }
"@prb-math" = { version = "4.0.2" }
forge-std = { version = "1.8.1" }
```

#### Removing Dependencies

You can use `forge soldeer uninstall DEPENDENCY`.

Example: `forge soldeer uninstall @openzeppelin-contracts`. This will action will remove:

* the config entry
* the `dependencies` artifacts
* the `soldeer.lock` entry
* the `remappings` entry (txt or config remapping)

Additionally you can manually remove a dependency by just removing the artifacts: dependency files, config entry, remappings entry.

#### Remappings

The remappings are now fully configurable, the config TOML file (foundry.toml) accepts a
`[soldeer]` field with the following options

```toml
[soldeer]
# whether soldeer manages remappings
remappings_generate = true

# whether soldeer re-generates all remappings when installing, updating or uninstalling deps
remappings_regenerate = false

# whether to suffix the remapping with the version: `name-a.b.c`
remappings_version = true

# a prefix to add to the remappings ("@" would give `@name`)
remappings_prefix = ""

# where to store the remappings ("txt" for `remappings.txt` or "config" for `foundry.toml`)
# ignored when `soldeer.toml` is used as config (uses `remappings.txt`)
remappings_location = "txt"
```

#### Installing dependencies of dependencies aka sub-dependencies

Whenever you install a dependency, that dependency might have other dependencies that need to be installed as well. Currently, you can handle this by either specifying the `recursive_deps` field as a configuration entry in the config file or by passing the `--recursive-deps` argument when running the install or update command. This will ensure that all necessary sub-dependencies are automatically pulled in.
e.g.

```toml
[soldeer]
recursive_deps = true
```

#### Pushing a New Version to the Central Repository

Soldeer acts like npmjs/crates.io, encouraging all developers to publish their projects to the central repository.

To do that, you have to go to [soldeer.xyz](https://soldeer.xyz), create an account, verify it, then

![image](https://i.postimg.cc/G3VDpN2S/s1.png)

Just add a new project

![image](https://i.postimg.cc/rsBRYd3L/s2.png)

After the project is created, you can go into your project source and:

* Create a `.soldeerignore` file that acts as a `.gitignore` to exclude files that aren't needed. The `.gitignore` file is also respected.
* Run `forge soldeer login` to log into your account.
* Run `forge soldeer push my-project~1.0.0` in your terminal in the directory that you want to push to the central repository associated with the project `my-project` at version `1.0.0`.

If you want to push a specific directory and not the current directory your terminal is in, you can use `forge soldeer push my-project~1.0.0 /path/to/directory`.

**Warning** ⚠️

You are at risk to push sensitive files to the central repository that then can be seen by everyone. Make sure to exclude sensitive files in the `.soldeerignore` file.
Furthermore, we've implemented a warning that it will be triggered if you try to push a project that contains any `.dot` files/directories.
If you want to skip this warning, you can just use

```bash
forge soldeer push my-project~1.0.0 --skip-warnings
```

##### Dry-run

In case you want to simulate what would happen if you push a version, you can use the `--dry-run` flag. This will create a zip file that you can inspect before pushing it to the central repository.

```bash
forge soldeer push my-project~1.0.0 --dry-run
```

##### Login Data

By default, Soldeer saves the login token in the `~/.soldeer/.soldeer_login` file, which is used to push files to the central repository. If you prefer to save the token in a different location, you can set the environment variable `SOLDEER_LOGIN_FILE`.

> **Warning** ⚠️
>
> * Once a project is created, it cannot be deleted.
> * Once a version is pushed, it cannot be deleted.
> * You cannot push the same version twice.
> * The project name in the command that you run in the terminal must match the project name that you created on the Soldeer website.
> * We encourage everyone to use version pinning when importing them into the contracts, this will help with securing your code by knowing exactly what version of a dependency you are using. Furthermore, it will help security researchers in their work.
> * Make sure you delete this zip file before pushing the version if you run dry-run.
>   e.g. instead of using
>   `import '@openzeppelin-contracts/token/ERC20.sol'` you should do
>   `import '@openzeppelin-contracts-5.0.2/token/ERC20.sol'`

#### What happens if a certain package is not present in the central repository?

* If a certain package is not present in the central repository, you can open an issue in the [Soldeer Repository](https://github.com/mario-eth/soldeer/issues) and the team will look into adding it.
* If you have a package that you want to use and it is not present in the central repository, you can push it to the central repository by following the steps above.

### Remappings Caveats

If you use other dependency managers, such as git submodules or npm, ensure you don't duplicate dependencies between
soldeer and the other manager.

Remappings targeting dependencies installed without Soldeer are not modified or removed when using Soldeer commands,
unless the `--regenerate-remappings` flag is specified or the `remappings_regenerate = true` option is set.

### Dependencies Maintenance

The vision for Soldeer is that major projects such as OpenZeppelin, Solady, Uniswap would start publishing their own
packages to the Soldeer registry so that the community can easily include them and get timely updates.

Until this happens, the Soldeer maintenance team (currently m4rio.eth) will push the most popular dependencies to the
repository by relying on their npmjs or GitHub versions. We are using
[an open-source crawler tool](https://github.com/mario-eth/soldeer-crawler) to crawl and push the dependencies under the
`soldeer` organization.

For those who want an extra layer of security, the `soldeer.lock` file saves a `SHA-256` hash for each downloaded
ZIP file and the corresponding unzipped folder (see `soldeer_core::utils::hash_folder` to see how it gets generated).
These can be compared with the official releases to ensure the files were not manipulated.

**For Project Maintainers**
If you want to move your project from the Soldeer organization and take care of pushing the versions to Soldeer
yourself, please open an issue on GitHub or contact m4rio.eth on [X (formerly Twitter)](https://twitter.com/m4rio_eth).


##### Base Options

`--base-in` *base*
    The base of the input number. Available options:

    10, d, dec, decimal

    16, h, hex, hexadecimal

`--base-out` *base*
    The desired base of the output. Available options:

    2, b, bin, binary

    8, o, oct, octal

    10, d, dec, decimal

    16, h, hex, hexadecimal


##### Display Options

`-j`\
`--json`\
     Print the deployment information as JSON.


##### Etherscan Options

`--chain` *chain\_name*\
    The Etherscan chain.

`--etherscan-api-key` *key*\
    Etherscan API key, or the key of an [Etherscan configuration table](/config/reference/etherscan#etherscan).\
    Environment: `ETHERSCAN_API_KEY`


##### Wallet Options - Hardware Wallet

`-t`\
`--trezor`\
    Use a Trezor hardware wallet.

`-l`\
`--ledger`\
    Use a Ledger hardware wallet.

`--hd-paths` *paths*\
    The derivation paths to use with hardware wallets.


##### Wallet Options - Keystore

`--keystores` *paths*\
    Use the keystores in the given folders or files.\
    Environment: `ETH_KEYSTORE`

`--account` *account-name*\
    Use a keystore from the default keystores folder (\~/.foundry/keystores) by its filename.\
    Environment: `ETH_KEYSTORE_ACCOUNT`

`--password` *passwords*\
    The keystore passwords. Used with `--keystore`.


##### Wallet Options - Raw

`-i`
`--interactives` *num*\
    Open an interactive prompt to enter your private key. Takes a value for the number of keys to enter.\
    Default: 0

`--mnemonic-indexes` *indexes*\
    Use the private key from the given mnemonic index. Used with --mnemonic-path.\
    Default: 0

`--mnemonic-paths` *paths*\
    Use the mnemonic file at the specified path(s).

`--private-key` *raw\_private\_key*\
    Use the provided private key.

`--private-keys` *raw\_private\_keys*\
    Use the provided private keys.


##### Wallet Options - Remote

`-a` *addresses*
`--froms` *addresses*
    Sign the transaction with the specified accounts on the RPC.
    Environment: `ETH_FROM`


import MultiWalletOptionsRaw from "./multi-wallet-options-raw.mdx";
import MultiWalletOptionsKeystore from "./multi-wallet-options-keystore.mdx";
import MultiWalletOptionsHardware from "./multi-wallet-options-hardware.mdx";
import MultiWalletOptionsRemote from "./multi-wallet-options-remote.mdx";

<MultiWalletOptionsRaw />

<MultiWalletOptionsKeystore />

<MultiWalletOptionsHardware />

<MultiWalletOptionsRemote />


`--delay` *delay*\
    Optional timeout to apply in between attempts in seconds. Defaults to 3.

`--retries` *retries*\
    Number of attempts for retrying. Defaults to 15.


import RpcUrlOption from "./rpc-url-option.mdx";

##### RPC Options

<RpcUrlOption />

`--flashbots`\
    Use the Flashbots RPC URL: [https://rpc.flashbots.net](https://rpc.flashbots.net).


`--rpc-url` *url*\
    The RPC endpoint. Accepts a URL or an existing alias in the \[rpc\_endpoints] table, like `mainnet`.
    Environment: `ETH_RPC_URL`


import TxValueOption from "./tx-value-option.mdx";

##### Transaction Options

`--gas-limit` *gas\_limit*\
    Gas limit for the transaction.

`--gas-price` *price*\
    Gas price for the transaction, or max fee per gas for EIP1559 transactions.

`--priority-gas-price` *price*\
    Max priority fee per gas for EIP1559 transactions.

<TxValueOption />

`--nonce` *nonce*\
    Nonce for the transaction.

`--legacy`\
    Send a legacy transaction instead of an [EIP1559][eip1559] transaction.

    This is automatically enabled for common networks without EIP1559.

[eip1559]: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md


`--value` *value*\
    Ether to send in the transaction.

    Either specified as an integer (wei), or as a string with a unit, for example:\
    - `1ether`\
    - `10gwei`\
    - `0.01ether`


`--verifier` *name*\
    The verification provider. Available options: `etherscan`, `sourcify` & `blockscout`. Default: `etherscan`. Note: make sure you add "/api?" to the end of the Blockscout homepage explorer URL.

`--verifier-url` *url*\
    The optional verifier url for submitting the verification request.\
    Environment: `VERIFIER_URL`


##### Wallet Options - Hardware Wallet

`-t`\
`--trezor`\
    Use a Trezor hardware wallet.

`-l`\
`--ledger`\
    Use a Ledger hardware wallet.


##### Wallet Options - Keystore

`--keystore` *path*\
    Use the keystore in the given folder or file.\
    Environment: `ETH_KEYSTORE`

`--account` *account-name*\
    Use a keystore from the default keystores folder (\~/.foundry/keystores) by its filename.\
    Environment: `ETH_KEYSTORE_ACCOUNT`

`--interactive`

`--password` *password*\
    The keystore password. Used with `--keystore`.
    Environment: `ETH_PASSWORD`


##### WALLET OPTIONS - RAW:

`-i`\
`--interactive <NUM>`\
     Open an interactive prompt to enter your private key. Takes a value for the number of keys to enter.\
     Defaults to `0`.

`--mnemonic-derivation-path <PATHS>`\
     The wallet derivation path. Works with both `--mnemonic-path` and hardware wallets.

`--mnemonic-indexes <INDEXES>`\
     Use the private key from the given mnemonic index. Used with --mnemonic-paths.\
     Defaults to `0`.

`--mnemonic-passphrase <PASSPHRASE>`\
     Use a BIP39 passphrases for the mnemonic.

`--mnemonic <PATHS>`\
     Use the mnemonic phrases or mnemonic files at the specified paths.

`--private-key <RAW_PRIVATE_KEY>`\
     Use the provided private key.

`--private-keys <RAW_PRIVATE_KEYS>`\
     Use the provided private keys.


##### Wallet Options - Remote

`-f` *address*\
`--from` *address*\
    Sign the transaction with the specified account on the RPC.\
    Environment: `ETH_FROM`


import WalletOptionsRaw from "./wallet-options-raw.mdx";
import WalletOptionsKeystore from "./wallet-options-keystore.mdx";
import WalletOptionsHardware from "./wallet-options-hardware.mdx";
import WalletOptionsRemote from "./wallet-options-remote.mdx";

<WalletOptionsRaw />

<WalletOptionsKeystore />

<WalletOptionsHardware />

<WalletOptionsRemote />


### `accesses`

#### Signature

```solidity
function accesses(
  address
)
external
returns (
  bytes32[] memory reads,
  bytes32[] memory writes
);
```

#### Description

Gets all storage slots that have been read (`reads`) or written to (`writes`) on an address.

Note that [`record`](/reference/cheatcodes/record.mdx) must be called first.

> ℹ️ **Note**
>
> Every write also counts as an additional read.

#### Examples

```solidity
/// contract NumsContract {
///     uint256 public num1 = 100; // slot 0
///     uint256 public num2 = 200; // slot 1
/// }

vm.record();
numsContract.num2();
(bytes32[] memory reads, bytes32[] memory writes) = vm.accesses(
  address(numsContract)
);
emit log_uint(uint256(reads[0])); // 1
```


### `activeFork`

#### Signature

```solidity
function activeFork() external returns (uint256);
```

#### Description

Returns the identifier for the currently active fork. Reverts if no fork is currently active.

#### Examples

Get the currently active fork id:

```solidity
uint256 mainnetForkId = vm.createFork(MAINNET_RPC_URL);
uint256 optimismForkId = vm.createFork(OPTIMISM_RPC_URL);

assert(mainnetForkId != optimismForkId);

vm.selectFork(mainnetForkId);
assertEq(vm.activeFork(), mainnetForkId);

vm.selectFork(optimismForkId);
assertEq(vm.activeFork(), optimismForkId);
```

#### SEE ALSO

* [createFork](/reference/cheatcodes/create-fork.mdx)
* [selectFork](/reference/cheatcodes/select-fork.mdx)


### `addr`

#### Signature

```solidity
function addr(uint256 privateKey) external returns (address);
```

#### Description

Computes the address for a given private key.

#### Examples

```solidity
address alice = vm.addr(1);
emit log_address(alice); // 0x7e5f4552091a69125d5dfcb7b8c2659029395bdf
```


### `allowCheatcodes`

#### Signature

```solidity
function allowCheatcodes(address) external;
```

#### Description

In forking mode, explicitly grant the given address cheatcode access.

By default, the test contract, and its deployer are allowed to access cheatcodes. In addition to that, cheat code
access is granted if the contract was deployed by an address that already has cheatcode access.
This will prevent cheatcode access from accounts already deployed on the forked network.

> ℹ️ **Note**
>
> This is only useful for more complex test setups in forking mode.


### Assertions

* [`expectRevert`](/reference/cheatcodes/expect-revert.mdx)
* [`expectEmit`](/reference/cheatcodes/expect-emit.mdx)
* [`expectCall`](/reference/cheatcodes/expect-call.mdx)


### `assumeNoRevert`

#### Signature

```solidity
function assumeNoRevert() external;
```

#### Description

The fuzzer will discard the current fuzz inputs and start a new fuzz run if next call reverted.

The test may fail if you hit the max number of rejects.

You can configure the rejection thresholds by setting \[`fuzz.max_test_rejects`]\[max-test-rejects] in your `foundry.toml` file.

#### Examples

For a function that requires an amount in certain range:

```solidity
function doSomething(uint256 amount) public {
    require(amount > 100 ether && amount < 1_000 ether);
}
```

reverts are discarded, resulting in test pass (or fail if max number of rejects hit):

```solidity
function testSomething(uint256 amount) public {
    vm.assumeNoRevert();
    target.doSomething(amount);
    // [PASS]
}
```


### `assume`

#### Signature

```solidity
function assume(bool) external;
```

#### Description

If the boolean expression evaluates to false, the fuzzer will discard the current fuzz inputs and start a new fuzz run.

The `assume` cheatcode should mainly be used for very narrow checks.
Broad checks will slow down tests as it will take a while to find valid values, and the test may fail if you hit the max number of rejects.

You can configure the rejection thresholds by setting [`fuzz.max_test_rejects`][max-test-rejects] in your `foundry.toml` file.

For broad checks, such as ensuring a `uint256` falls within a certain range, you can bound your input with the modulo operator or Forge Standard's [`bound`][forge-std-bound] method.

More information on filtering via `assume` can be found [here][filtering-guide].

#### Examples

```solidity
// Good example of using assume
function testSomething(uint256 a) public {
    vm.assume(a != 1);
    require(a != 1);
    // [PASS]
}
```

```solidity
// In this case assume is not a great fit, so you should bound inputs manually
function testSomethingElse(uint256 a) public {
    a = bound(a, 100, 1e36);
    require(a >= 100 && a <= 1e36);
    // [PASS]
}
```

#### SEE ALSO

Forge Standard Library

[`bound`](/reference/forge-std/bound.mdx)

[max-test-rejects]: ../config/reference/testing.md#max_test_rejects

[forge-std-bound]: ../reference/forge-std/bound.md

[filtering-guide]: https://altsysrq.github.io/proptest-book/proptest/tutorial/filtering.html#filtering


### `breakpoint`

#### Signature

```solidity
function breakpoint(string) external;
function breakpoint(string, bool) external;
```

#### Description

Places a breakpoint to jump to in the debugger view.

Calling `vm.breakpoint('<char>, true)` is equivalent to `vm.breakpoint('<char>)`, but calling `vm.breakpoint('<char>, false)` will erase the breakpoint at `'<char>`.

If the char is overwritten, only the last one that was visited in the execution steps is considered.

#### Examples

```solidity
function testBreakpoint() public {
    vm.breakpoint("a");
}
```

Opening up the debugger in a test environment and pressing `'a` will then place the debugger step at the place where the breakpoint cheatcode was called.

![breakpoint a](/breakpoint.png)

#### SEE ALSO

[debugger](/forge/debugger)


### `broadcast`

#### Signature

```solidity
function broadcast() external;
```

```solidity
function broadcast(address who) external;
```

```solidity
function broadcast(uint256 privateKey) external;
```

#### Description

Using the address that calls the test contract or the address / private key provided
as the sender, has the next call (at this call depth only and excluding cheatcode calls) create a
transaction that can later be signed and sent onchain.

#### Examples

```solidity
function deploy() public {
    vm.broadcast(ACCOUNT_A);
    Test test = new Test();

    // this won't generate tx to sign
    uint256 b = test.t(4);

    // this will
    vm.broadcast(ACCOUNT_B);
    test.t(2);

    // this also will, using a private key from your environment variables
    vm.broadcast(vm.envUint("PRIVATE_KEY"));
    test.t(3);
}
```

#### SEE ALSO

* [startBroadcast](/reference/cheatcodes/start-broadcast.mdx)
* [stopBroadcast](/reference/cheatcodes/stop-broadcast.mdx)


### `chainId`

#### Signature

```solidity
function chainId(uint256) external;
```

#### Description

Sets `block.chainid`.

#### Examples

```solidity
vm.chainId(31337);
emit log_uint(block.chainid); // 31337
```


### `clearMockedCalls`

#### Signature

```solidity
function clearMockedCalls() external;
```

#### Description

Clears all [mocked calls](/reference/cheatcodes/mock-call.mdx).


### `coinbase`

#### Signature

```solidity
function coinbase(address) external;
```

#### Description

Sets `block.coinbase`.

#### Examples

```solidity
emit log_address(block.coinbase); // 0x0000000000000000000000000000000000000000
vm.coinbase(0xEA674fdDe714fd979de3EdF0F56AA9716B898ec8);
emit log_address(block.coinbase); // 0xea674fdde714fd979de3edf0f56aa9716b898ec8
```


### `copyStorage`

#### Signature

```solidity
function copyStorage(address from, address to) external;
```

#### Description

Utility cheatcode to copy storage of `from` contract to another `to` contract.
Cheatcode is not allowed if the target address has arbitrary storage set.

#### Examples

Given a contract

```solidity
contract Counter {
    uint256 public count;

    function setCount(uint256 x) public {
        count = x;
    }
}
```

using `copyStorage` cheatcode copies the storage set on an instance to another address:

```solidity
function testCopyStorage() public {
    Counter original = new Counter();
    original.setCount(1000);
    Counter copy = new Counter();
    copy.setCount(1);
    // Check initial count on copy.
    assertEq(copy.count(), 1);

    vm.copyStorage(address(original), address(copy));
    // Value is copied from first contract to copy.
    assertEq(copy.count(), 1000);
}
```


### `createFork`

#### Signature

```solidity
// Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork
function createFork(string calldata urlOrAlias) external returns (uint256)
```

```solidity
// Creates a new fork with the given endpoint and block and returns the identifier of the fork
function createFork(string calldata urlOrAlias, uint256 block) external returns (uint256);
```

```solidity
// Creates a new fork with the given endpoint and at the block the given transaction was mined in, and replays all transaction mined in the block before the transaction
function createFork(string calldata urlOrAlias, bytes32 transaction) external returns (uint256);
```

#### Description

Creates a new fork from the given endpoint and returns the identifier of the fork. If a block number is passed as an argument, the fork will begin on that block, otherwise it will begin on the *latest* block.

If a transaction hash is provided, it will roll the fork to the block the transaction was mined in and replays all previously executed transactions.

#### Examples

Create a new mainnet fork with the latest block number:

```solidity
uint256 forkId = vm.createFork(MAINNET_RPC_URL);
vm.selectFork(forkId);

assertEq(block.number, 15_171_037); // as of time of writing, 2022-07-19 04:55:27 UTC
```

Create a new mainnet fork with a given block number:

```solidity
uint256 forkId = vm.createFork(MAINNET_RPC_URL, 1_337_000);
vm.selectFork(forkId);

assertEq(block.number, 1_337_000);
```

#### SEE ALSO

* [activeFork](/reference/cheatcodes/active-fork.mdx)
* [selectFork](/reference/cheatcodes/select-fork.mdx)
* [createSelectFork](/reference/cheatcodes/create-select-fork.mdx)


### `createSelectFork`

#### Signature

```solidity
function createSelectFork(string calldata urlOrAlias) external returns (uint256);
```

```solidity
function createSelectFork(string calldata urlOrAlias, uint256 block) external returns (uint256);
```

```solidity
function createSelectFork(string calldata urlOrAlias, bytes32 transaction) external returns (uint256);
```

#### Description

Creates *and* selects a new fork from the given endpoint and returns the identifier of the fork. If a block number is passed as an argument, the fork will begin on that block, otherwise it will begin on the *latest* block.

If a transaction hash is provided, it will roll the fork to the block the transaction was mined in and replays all previously executed transactions.

#### Examples

Create and select a new mainnet fork with the latest block number:

```solidity
uint256 forkId = vm.createSelectFork(MAINNET_RPC_URL);

assertEq(block.number, 15_171_037); // as of time of writing, 2022-07-19 04:55:27 UTC
```

Create and select a new mainnet fork with a given block number:

```solidity
uint256 forkId = vm.createSelectFork(MAINNET_RPC_URL, 1_337_000);

assertEq(block.number, 1_337_000);
```

#### SEE ALSO

* [createFork](/reference/cheatcodes/create-fork.mdx)
* [selectFork](/reference/cheatcodes/select-fork.mdx)


### `createWallet`

#### Signature

```solidity
  struct Wallet {
      address addr;
      uint256 publicKeyX;
      uint256 publicKeyY;
      uint256 privateKey;
  }
```

```solidity
  function createWallet(string calldata) external returns (Wallet memory);
```

```solidity
  function createWallet(uint256) external returns (Wallet memory);
```

```solidity
  function createWallet(uint256, string calldata) external returns (Wallet memory);
```

#### Description

Creates a new Wallet struct when given a parameter to derive the private key from.

#### Tips

[`sign()`](/reference/cheatcodes/sign.mdx) and [`getNonce()`](/reference/cheatcodes/get-nonce.mdx) both have supported function overloads for the Wallet struct as well.

#### Examples

##### `uint256`

```solidity
Vm.Wallet memory wallet = vm.createWallet(uint256(keccak256(bytes("1"))));

emit log_uint(wallet.privateKey); // uint256(keccak256(bytes("1")))

emit log_address(wallet.addr); // vm.addr(wallet.privateKey)

emit log_address(
    address(
        uint160(
            uint256(
                keccak256(abi.encode(wallet.publicKeyX, wallet.publicKeyY))
            )
        )
    )
); // wallet.addr

emit log_string(vm.getLabel(wallet.addr)); // ""
```

##### `string`

```solidity
Vm.Wallet memory wallet = vm.createWallet("bob's wallet");

emit log_uint(wallet.privateKey); // uint256(keccak256(bytes("bob's wallet")))

emit log_address(wallet.addr); // vm.addr(wallet.privateKey)

emit log_address(
    address(
        uint160(
            uint256(
                keccak256(abi.encode(wallet.publicKeyX, wallet.publicKeyY))
            )
        )
    )
); // wallet.addr

emit log_string(vm.getLabel(wallet.addr)); // "bob's wallet"
```

##### `uint256` and `string`

```solidity
Vm.Wallet memory wallet = vm.createWallet(uint256(keccak256(bytes("1"))), "bob's wallet");

emit log_uint(wallet.privateKey); // uint256(keccak256(bytes("1")))

emit log_address(wallet.addr); // vm.addr(wallet.privateKey)

emit log_address(
    address(
        uint160(
            uint256(
                keccak256(abi.encode(wallet.publicKeyX, wallet.publicKeyY))
            )
        )
    )
); // wallet.addr

emit log_string(vm.getLabel(wallet.addr)); // "bob's wallet"
```


### `deal`

#### Signature

```solidity
function deal(address who, uint256 newBalance) external;
```

#### Description

Sets the balance of an address `who` to `newBalance`.

If the alternative signature of `deal` is used (defined in `StdCheats.sol`), then we can additionally specify ERC20 token address, as well as an option to update `totalSupply`.

#### Examples

```solidity
address alice = makeAddr("alice");
emit log_address(alice);
vm.deal(alice, 1 ether);
log_uint256(alice.balance); // 1000000000000000000
```

```solidity
address alice = makeAddr("alice");
emit log_address(alice);
deal(address(DAI), alice, 1 ether); // import StdUtils.sol first
log_uint256(address(DAI).balanceOf(alice)); // 1000000000000000000
```

#### SEE ALSO

Forge Standard Library

[`deal`](/reference/forge-std/deal.mdx), [`hoax`](/reference/forge-std/hoax.mdx), [`startHoax`](/reference/forge-std/startHoax.mdx)


### `deriveKey`

#### Signature

```solidity
function deriveKey(
  string calldata mnemonic,
  uint32 index
) external returns (uint256);
```

```solidity
function deriveKey(
  string calldata mnemonic,
  string calldata path,
  uint32 index
) external returns (uint256);
```

#### Description

Derive a private key from a given mnemonic or mnemonic file path.

The first signature derives at the derivation path `m/44'/60'/0'/0/{index}`.
The second signature allows you to specify the derivation path as the second parameter.

#### Examples

Derive the private key from the test mnemonic at path `m/44'/60'/0'/0/0`:

```solidity
string memory mnemonic = "test test test test test test test test test test test junk";
uint256 privateKey = vm.deriveKey(mnemonic, 0);
```

Derive the private key from the test mnemonic at path `m/44'/60'/0'/1/0`:

```solidity
string memory mnemonic = "test test test test test test test test test test test junk";
uint256 privateKey = vm.deriveKey(mnemonic, "m/44'/60'/0'/1/", 0);
```

#### SEE ALSO

* [rememberKey](/reference/cheatcodes/remember-key.mdx)

Forge Standard Library:

* [deriveRememberKey](/reference/forge-std/derive-remember-key.mdx)


### `difficulty`

#### Signature

```solidity
function difficulty(uint256) external;
```

#### Description

Sets `block.difficulty`.

If used with a post-merge EVM version (Paris and onwards), it will revert. In that case, use [`vm.prevrandao`][prevrandao] instead.

#### Examples

```solidity
vm.difficulty(25);
emit log_uint(block.difficulty); // 25
```

[prevrandao]: ./prevrandao.md


### `envAddress`

#### Signature

```solidity
function envAddress(string calldata key) external returns (address value);
```

```solidity
function envAddress(string calldata key, string calldata delimiter) external returns (address[] memory values);
```

#### Description

Read an environment variable as `address` or `address[]`.

#### Tips

* For arrays, you can specify the delimiter used to separate the values with the `delimiter` parameter.

#### Examples

##### Single Value

With environment variable `ADDRESS_VALUE=0x7109709ECfa91a80626fF3989D68f67F5b1DD12D`,

```solidity
string memory key = "ADDRESS_VALUE";
address expected = 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D;
address output = vm.envAddress(key);
assert(output == expected);
```

##### Array

With environment variable `ADDRESS_VALUES=0x7109709ECfa91a80626fF3989D68f67F5b1DD12D,0x0000000000000000000000000000000000000000`,

```solidity
string memory key = "ADDRESS_VALUES";
string memory delimiter = ",";
address[2] memory expected = [
    0x7109709ECfa91a80626fF3989D68f67F5b1DD12D,
    0x0000000000000000000000000000000000000000
];
address[] memory output = vm.envAddress(key, delimiter);
assert(keccak256(abi.encodePacked((output))) == keccak256(abi.encodePacked((expected))));
```


### `envBool`

#### Signature

```solidity
function envBool(string calldata key) external returns (bool value);
```

```solidity
function envBool(string calldata key, string calldata delimiter) external returns (bool[] memory values);
```

#### Description

Read an environment variable as `bool` or `bool[]`.

#### Tips

* For `true`, use either "true" or "True" for the environment variable value.
* For `false`, use either "false" or "False" for the environment variable value.
* For arrays, you can specify the delimiter used to separate the values with the `delimiter` parameter.

#### Examples

##### Single Value

With environment variable `BOOL_VALUE=true`,

```solidity
string memory key = "BOOL_VALUE";
bool expected = true;
bool output = cheats.envBool(key);
assert(output == expected);
```

##### Array

With environment variable `BOOL_VALUES=true,false,True,False`,

```solidity
string memory key = "BOOL_VALUES";
string memory delimiter = ",";
bool[4] memory expected = [true, false, true, false];
bool[] memory output = cheats.envBool(key, delimiter);
assert(keccak256(abi.encodePacked((output))) == keccak256(abi.encodePacked((expected))));
```


### `envBytes`

#### Signature

```solidity
function envBytes(bytes calldata key) external returns (bytes value);
```

```solidity
function envBytes(bytes calldata key, bytes calldata delimiter) external returns (bytes[] memory values);
```

#### Description

Read an environment variable as `bytes` or `bytes[]`.

#### Tips

* For arrays, you can specify the delimiter used to separate the values with the `delimiter` parameter.

#### Examples

##### Single Value

With environment variable `BYTES_VALUE=0x7109709ECfa91a80626fF3989D68f67F5b1DD12D`;

```solidity
bytes memory key = "BYTES_VALUE";
bytes expected = hex"7109709ECfa91a80626fF3989D68f67F5b1DD12D";
bytes output = cheats.envBytes(key);
assertEq(output, expected);
```

##### Array

With environment variable `BYTES_VALUE=0x7109709ECfa91a80626fF3989D68f67F5b1DD12D,0x00`;

```solidity
bytes memory key = "BYTES_VALUES";
bytes memory delimiter = ",";
bytes[] memory expected = new bytes[](2);
expected[0] = hex"7109709ECfa91a80626fF3989D68f67F5b1DD12D";
expected[1] = hex"00";
bytes[] memory output = cheats.envBytes(key, delimiter);
for (uint i = 0; i < expected.length; ++i) {
    assert(keccak256(abi.encodePacked((output[i]))) == keccak256(abi.encodePacked((expected[i]))));
}
```


### `envBytes32`

#### Signature

```solidity
function envBytes32(string calldata key) external returns (bytes32 value);
```

```solidity
function envBytes32(string calldata key, string calldata delimiter) external returns (bytes32[] memory values);
```

#### Description

Read an environment variable as `bytes32` or `address[]`.

#### Tips

* For arrays, you can specify the delimiter used to separate the values with the `delimiter` parameter.

#### Examples

##### Single Value

With environment variable `BYTES32_VALUE=0x00`,

```solidity
string memory key = "BYTES32_VALUE";
bytes32 expected = bytes32(0x0000000000000000000000000000000000000000000000000000000000000000);
bytes32 output = vm.envBytes32(key);
assert(output == expected);
```

##### Array

With environment variable `BYTES32_VALUES=0x7109709ECfa91a80626fF3989D68f67F5b1DD12D,0x00`,

```solidity
string memory key = "BYTES32_VALUES";
string memory delimiter = ",";
bytes32[2] memory expected = [
    bytes32(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D000000000000000000000000),
    bytes32(0x0000000000000000000000000000000000000000000000000000000000000000)
];
bytes32[] memory output = vm.envBytes32(key, delimiter);
assert(keccak256(abi.encodePacked((output))) == keccak256(abi.encodePacked((expected))));
```


### `envInt`

#### Signature

```solidity
function envInt(string calldata key) external returns (int256 value);
```

```solidity
function envInt(string calldata key, string calldata delimiter) external returns (int256[] memory values);
```

#### Description

Read an environment variable as `int256` or `int256[]`.

#### Tips

* If the value starts with `0x`, `-0x` or `+0x`, it will be interpreted as a hex value, otherwise,
  it will be treated as a decimal number.
* For arrays, you can specify the delimiter used to separate the values with the `delimiter` parameter.

#### Examples

##### Single Value

With environment variable `INT_VALUE=-57896044618658097711785492504343953926634992332820282019728792003956564819968`,

```solidity
string memory key = "INT_VALUE";
int256 expected = type(int256).min;
int256 output = cheats.envInt(key);
assert(output == expected);
```

##### Array

With environment variable `INT_VALUES=-0x8000000000000000000000000000000000000000000000000000000000000000,+0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF`,

```solidity
string memory key = "INT_VALUES";
string memory delimiter = ",";
int256[2] memory expected = [type(int256).min, type(int256).max];
int256[] memory output = cheats.envInt(key, delimiter);
assert(keccak256(abi.encodePacked((output))) == keccak256(abi.encodePacked((expected))));
```


### `envOr`

#### Signature

```solidity
function envOr(string calldata key, bool defaultValue) external returns (bool value);
function envOr(string calldata key, uint256 defaultValue) external returns (uint256 value);
function envOr(string calldata key, int256 defaultValue) external returns (int256 value);
function envOr(string calldata key, address defaultValue) external returns (address value);
function envOr(string calldata key, bytes32 defaultValue) external returns (bytes32 value);
function envOr(string calldata key, string calldata defaultValue) external returns (string memory value);
function envOr(string calldata key, bytes calldata defaultValue) external returns (bytes memory value);
```

```solidity
function envOr(string calldata key, string calldata delimiter, bool[] calldata defaultValue) external returns (bool[] memory value);
function envOr(string calldata key, string calldata delimiter, uint256[] calldata defaultValue) external returns (uint256[] memory value);
function envOr(string calldata key, string calldata delimiter, int256[] calldata defaultValue) external returns (int256[] memory value);
function envOr(string calldata key, string calldata delimiter, address[] calldata defaultValue) external returns (address[] memory value);
function envOr(string calldata key, string calldata delimiter, bytes32[] calldata defaultValue) external returns (bytes32[] memory value);
function envOr(string calldata key, string calldata delimiter, string[] calldata defaultValue) external returns (string[] memory value);
function envOr(string calldata key, string calldata delimiter, bytes[] calldata defaultValue) external returns (bytes[] memory value);
```

#### Description

A non-failing way to read an environment variable of any type: if the requested environment key does not exist, `envOr()` will return a default value instead of reverting (works with arrays too).

The returned type is determined by the type of `defaultValue` parameter passed.

#### Tips

* Use `envOr(key, defaultValue)` to read a single value
* Use `envOr(key, delimiter, defaultValue[])` to read an array with delimiter
* The parsing of the environment variable will be done according to the type of `defaultValue` (e.g. if the default value type is `uint` - the environment variable will be also parsed as `uint`)
* Use explicit casting for literals to specify type of default variable: `uint(69)` will return an `uint` but `int(69)` will return an `int`
* Same with: `string("")` and `bytes("")` - these will return `string` and `bytes` accordingly
* Use dynamic arrays (`bool[]`) instead of fixed-size arrays (`bool[4]`) when providing default values (only dynamic arrays are supported)

#### Examples

##### Single Value

If the environment variable `FORK` is not set, you can specify it to be `false` by default:

```solidity
bool fork = vm.envOr("FORK", false);
```

or

```solidity
address owner;

function setUp() {
  owner = vm.envOr("OWNER", address(this));
}
```

##### Array

If the environment variable `BAD_TOKENS` is not set, you can specify the default to be an empty array:

```solidity
address[] badTokens;

function envBadTokens() public {
  badTokens = vm.envOr("BAD_TOKENS", ",", badTokens);
}
```

or

```solidity
function envBadTokens() public {
  address[] memory defaultBadTokens = new address[](0);
  address[] memory badTokens = vm.envOr("BAD_TOKENS", ",", defaultBadTokens);
}
```


### `envString`

#### Signature

```solidity
function envString(string calldata key) external returns (string value);
```

```solidity
function envString(string calldata key, string calldata delimiter) external returns (string[] memory values);
```

#### Description

Read an environment variable as `string` or `string[]`. In case the environment variable is not defined, Forge will fail
with the following error message:

> \[FAIL. Reason: Failed to get environment variable `FOO` as type `string`: environment variable not found]

#### Tips

* You can put your environment variables in a `.env` file. Forge will automatically load them when running `forge test`.
* For arrays, you can specify the delimiter used to separate the values with the `delimiter` parameter.
* Choose a delimiter that doesn't appear in the string values, so that they can be correctly separated.

#### Examples

##### Single Value

With environment variable `STRING_VALUE=hello, world!`,

```solidity
string memory key = "STRING_VALUE";
string memory expected = "hello, world!";
string memory output = vm.envString(key);
assertEq(output, expected);
```

##### Array

With environment variable `STRING_VALUES=hello, world!|0x7109709ECfa91a80626fF3989D68f67F5b1DD12D`;

```solidity
string memory key = "STRING_VALUES";
string memory delimiter = "|";
string[2] memory expected = [
    "hello, world!",
    "0x7109709ECfa91a80626fF3989D68f67F5b1DD12D"
];
string[] memory output = vm.envString(key, delimiter);
for (uint i = 0; i < expected.length; ++i) {
    assert(keccak256(abi.encodePacked((output[i]))) == keccak256(abi.encodePacked((expected[i]))));
}
```


### `envUint`

#### Signature

```solidity
function envUint(string calldata key) external returns (uint256 value);
```

```solidity
function envUint(string calldata key, string calldata delimiter) external returns (uint256[] memory values);
```

#### Description

Read an environment variable as `uint256` or `uint256[]`.

#### Tips

* If the value starts with `0x`, it will be interpreted as a hex value, otherwise, it will be
  treated as a decimal number.
* For arrays, you can specify the delimiter used to separate the values with the `delimiter` parameter.

#### Examples

##### Single Value

With environment variable `UINT_VALUE=115792089237316195423570985008687907853269984665640564039457584007913129639935`,

```solidity
string memory key = "UINT_VALUE";
uint256 expected = type(uint256).max;
uint256 output = cheats.envUint(key);
assert(output == expected);
```

##### Array

With environment variable `UINT_VALUES=0,0x0000000000000000000000000000000000000000000000000000000000000000`,

```solidity
string memory key = "UINT_VALUES";
string memory delimiter = ",";
uint256[2] memory expected = [type(uint256).min, type(uint256).min];
uint256[] memory output = cheats.envUint(key, delimiter);
assert(keccak256(abi.encodePacked((output))) == keccak256(abi.encodePacked((expected))));
```


### Environment

* [`warp`](/reference/cheatcodes/warp.mdx)
* [`roll`](/reference/cheatcodes/roll.mdx)
* [`fee`](/reference/cheatcodes/fee.mdx)
* [`difficulty`](/reference/cheatcodes/difficulty.mdx)
* [`prevrandao`](/reference/cheatcodes/prevrandao.mdx)
* [`chainId`](/reference/cheatcodes/chain-id.mdx)
* [`store`](/reference/cheatcodes/store.mdx)
* [`load`](/reference/cheatcodes/load.mdx)
* [`etch`](/reference/cheatcodes/etch.mdx)
* [`deal`](/reference/cheatcodes/deal.mdx)
* [`prank`](/reference/cheatcodes/prank.mdx)
* [`startPrank`](/reference/cheatcodes/start-prank.mdx)
* [`stopPrank`](/reference/cheatcodes/stop-prank.mdx)
* [`readCallers`](/reference/cheatcodes/read-callers.mdx)
* [`record`](/reference/cheatcodes/record.mdx)
* [`accesses`](/reference/cheatcodes/accesses.mdx)
* [`recordLogs`](/reference/cheatcodes/record-logs.mdx)
* [`getRecordedLogs`](/reference/cheatcodes/get-recorded-logs.mdx)
* [`setNonce`](/reference/cheatcodes/set-nonce.mdx)
* [`getNonce`](/reference/cheatcodes/get-nonce.mdx)
* [`mockCall`](/reference/cheatcodes/mock-call.mdx)
* [`mockCalls`](/reference/cheatcodes/mock-calls.mdx)
* [`mockCallRevert`](/reference/cheatcodes/mock-call-revert.mdx)
* [`mockFunction`](/reference/cheatcodes/mock-function.mdx)
* [`clearMockedCalls`](/reference/cheatcodes/clear-mocked-calls.mdx)
* [`coinbase`](/reference/cheatcodes/coinbase.mdx)
* [`broadcast`](/reference/cheatcodes/broadcast.mdx)
* [`startBroadcast`](/reference/cheatcodes/start-broadcast.mdx)
* [`stopBroadcast`](/reference/cheatcodes/stop-broadcast.mdx)
* [`pauseGasMetering`](/reference/cheatcodes/pause-gas-metering.mdx)
* [`resetGasMetering`](/reference/cheatcodes/reset-gas-metering.mdx)
* [`resumeGasMetering`](/reference/cheatcodes/resume-gas-metering.mdx)
* [`txGasPrice`](/reference/cheatcodes/tx-gas-price.mdx)
* [`startStateDiffRecording`](/reference/cheatcodes/start-state-diff-recording.mdx)
* [`stopAndReturnStateDiff`](/reference/cheatcodes/stop-and-return-state-diff.mdx)
* [`isContext`](/reference/cheatcodes/is-context.mdx)


### `etch`

#### Signature

```solidity
function etch(address who, bytes calldata code) external;
```

#### Description

Sets the bytecode of an address `who` to `code`.

#### Examples

```solidity
bytes memory code = address(awesomeContract).code;
address targetAddr = makeAddr("target");
vm.etch(targetAddr, code);
log_bytes(address(targetAddr).code); // 0x6080604052348015610010...
```

##### Using `vm.etch` for enabling custom precompiles

Some chains, like Blast or Arbitrum, run with custom precompiles. Foundry is operating on vanilla EVM and is not aware of those. If you are encountering reverts due to not available precompile, you can use `vm.etch` cheatcode to inject mock of the missing precompile to the address it is expected to appear at.

```solidity
// [!include ~/snippets/projects/cheatcodes/test/BlastMock.t.sol::all]
```

<div class="warning">
  Injecting mocks of precompiles might be tricky as such mocks will not fully emulate the actual precompile behavior on-chain.

  Mock in the case above will not cause the actual yield to be accrued if any yield mode is configured.
</div>

#### SEE ALSO

Forge Standard Library

* [`deployCode`](/reference/forge-std/deployCode.mdx)
* [`deployCodeTo`](/reference/forge-std/deployCodeTo.mdx)


### `expectCall`

```solidity
function expectCall(address callee, bytes calldata data) external;
```

```solidity
function expectCall(address callee, bytes calldata data, uint64 count) external;
```

```solidity
function expectCall(
    address callee,
    uint256 value,
    bytes calldata data
) external;
```

```solidity
function expectCall(
    address callee,
    uint256 value,
    bytes calldata data,
    uint64 count
) external;
```

#### Description

Expects a call to a specified address `callee`, where the call data either strictly or loosely matches `data`. The cheatcode can be called in two ways:

* If no `count` parameter is specified, the call will be expected to be made at least the amount of times the cheatcode was called. For the same calldata, you cannot call the cheatcode with no `count` and then pass in a `count` parameter.
* If `count` is specified, the call will be expected to be made strictly `count` times. For the same calldata, the `count` value cannot be overwritten with another cheatcode call, nor it can be increment by calling the cheatcode without a `count` parameter.

`count` can also be set to 0 to assert that a call is not made.

When a call is made to `callee` the call data is first checked to see if it matches in its entirety with `data`. If not, the call data is checked to see if there is a partial match, with the match starting at the first byte of the call data.

**Using the second signature** we can also check if the call was made with the expected `msg.value`.

If the test terminates without the call being made, the test fails.

> ℹ️ **Internal calls**
>
> This cheatcode does not currently work on internal calls. See issue [#432](https://github.com/foundry-rs/foundry/issues/432).

#### Examples

Expect that `transfer` is called on a token `MyToken` one time:

```solidity
address alice = makeAddr("alice");
emit log_address(alice);
vm.expectCall(
  address(token), abi.encodeCall(token.transfer, (alice, 10))
);
token.transfer(alice, 10);
// [PASS]
```

Expect that `transfer` is called on a token `MyToken` *at least* two times:

```solidity
address alice = makeAddr("alice");
emit log_address(alice);
vm.expectCall(
  address(token), abi.encodeCall(token.transfer, (alice, 10))
);
vm.expectCall(
  address(token), abi.encodeCall(token.transfer, (alice, 10))
);
token.transfer(alice, 10);
token.transfer(alice, 10);
token.transfer(alice, 10);
// [PASS]
```

Expect that `transfer` is not called on a token `MyToken`:

```solidity
address alice = makeAddr("alice");
emit log_address(alice);
vm.expectCall(
  address(token), abi.encodeCall(token.transfer, (alice, 10)), 0
);
token.transferFrom(alice, address(0), 10);
// [PASS]
```

Expect that `transfer` with any calldata is called on a token `MyToken` 2 times:

```solidity
address alice = makeAddr("alice");
emit log_address(alice);
vm.expectCall(
  address(token), abi.encodeWithSelector(token.transfer.selector), 2
);
token.transfer(alice, 10);
token.transfer(alice, 10);
// [PASS]
```

Expect that `pay` is called on a `Contract` with a specific `msg.value` and `calldata`:

```solidity
Contract target = new Contract();
vm.expectCall(
            address(target),
            1,
            abi.encodeWithSelector(target.pay.selector, 2)
        );
target.pay{value: 1}(2);
// [PASS]
```

Expect that `pay` is called on a `Contract` with a specific `msg.value` and `calldata` 3 times:

```solidity
Contract target = new Contract();
vm.expectCall(
            address(target),
            1,
            abi.encodeWithSelector(target.pay.selector, 2),
            3
        );
target.pay{value: 1}(2);
target.pay{value: 1}(2);
target.pay{value: 1}(2);
// [PASS]
```


### `expectEmit`

#### Signature

```solidity
function expectEmit() external;
```

```solidity
function expectEmit(
    bool checkTopic1,
    bool checkTopic2,
    bool checkTopic3,
    bool checkData
) external;
```

```solidity
function expectEmit(address emitter) external;
```

```solidity
function expectEmit(
    bool checkTopic1,
    bool checkTopic2,
    bool checkTopic3,
    bool checkData,
    address emitter
) external;
```

#### Description

Asserts that a specific log is emitted during the next call.

1. Call the cheat code, specifying whether we should check the first, second or third topic, and the log data (`expectEmit()` checks them all). Topic 0 is always checked.
2. Emit the event we are supposed to see during the next call.
3. Perform the call.

You can perform steps 1 and 2 multiple times to match a *sequence* of events in the next call.

If the event is not available in the current scope (e.g. if we are using an interface, or an external smart contract), we can define the event ourselves with an identical event signature.

There are 2 varieties of `expectEmit`:

* **Without checking the emitter address**: Asserts the topics match **without** checking the emitting address.
* **With `address`**: Asserts the topics match and that the emitting address matches.

> ℹ️ **Matching sequences**
>
> In functions that emit a lot of events, it's possible to "skip" events and only match a specific sequence,
> but this sequence must always be in order. As an example, let's say a
> function emits events: `A, B, C, D, E, F, F, G`.
>
> `expectEmit` will be able to match ranges with and without skipping events in between:
>
> * `[A, B, C]` is valid.
> * `[B, D, F]` is valid.
> * `[G]` or any other single event combination is valid.
> * `[B, A]` or similar out-of-order combinations are **invalid** (events must be in order).
> * `[C, F, F]` is valid.
> * `[F, F, C]` is **invalid** (out of order).

#### Examples

This does not check the emitting address.

```solidity
event Transfer(address indexed from, address indexed to, uint256 amount);

function testERC20EmitsTransfer() public {
    vm.expectEmit();

    // We emit the event we expect to see.
    emit MyToken.Transfer(address(this), address(1), 10);

    // We perform the call.
    myToken.transfer(address(1), 10);
}
```

This does check the emitting address.

```solidity
event Transfer(address indexed from, address indexed to, uint256 amount);

function testERC20EmitsTransfer() public {
    // We check that the token is the event emitter by passing the address.
    vm.expectEmit(address(myToken));
    emit MyToken.Transfer(address(this), address(1), 10);

    // We perform the call.
    myToken.transfer(address(1), 10);
}
```

We can also assert that multiple events are emitted in a single call.

```solidity
function testERC20EmitsBatchTransfer() public {
    // We declare multiple expected transfer events
    for (uint256 i = 0; i < users.length; i++) {
        // Here we use the longer signature for demonstration purposes. This call checks
        // topic0 (always checked), topic1 (true), topic2 (true), NOT topic3 (false), and data (true).
        vm.expectEmit(true, true, false, true);
        emit Transfer(address(this), users[i], 10);
    }

    // We also expect a custom `BatchTransfer(uint256 numberOfTransfers)` event.
    vm.expectEmit(false, false, false, true);
    emit BatchTransfer(users.length);

    // We perform the call.
    myToken.batchTransfer(users, 10);
}
```

This example fails, as the expected event is not emitted on the next call.

```solidity
event Transfer(address indexed from, address indexed to, uint256 amount);

function testERC20EmitsTransfer() public {
    // We check that the token is the event emitter by passing the address as the fifth argument.
    vm.expectEmit(true, true, false, true, address(myToken));
    emit MyToken.Transfer(address(this), address(1), 10);

    // We perform an unrelated call that won't emit the intended event,
    // making the cheatcode fail.
    myToken.approve(address(this), 1e18);
    // We perform the call, but it will have no effect as the cheatcode has already failed.
    myToken.transfer(address(1), 10);
}
```


### `expectRevert`

#### Signature

```solidity
function expectRevert() external;
```

```solidity
function expectRevert(bytes4 revertData) external;
```

```solidity
function expectRevert(bytes4 revertData, address reverter) external;
```

```solidity
function expectRevert(bytes4 revertData, uint64 count) external;
```

```solidity
function expectRevert(bytes4 revertData, address reverter, uint64 count) external;
```

```solidity
function expectRevert(bytes calldata revertData) external;
```

```solidity
function expectRevert(bytes calldata revertData, address reverter) external;
```

```solidity
function expectRevert(bytes calldata revertData, uint64 count) external;
```

```solidity
function expectRevert(bytes calldata revertData, address reverter, uint64 count) external;
```

```solidity
function expectRevert(address reverter) external;
```

```solidity
function expectRevert(uint64 count) external;
```

```solidity
function expectRevert(address reverter, uint64 count) external;
```

```solidity
function expectPartialRevert(bytes4 revertData) external;
```

```solidity
function expectPartialRevert(bytes4 revertData, address reverter) external;
```

#### Error

> ❌ **Error**
>
> If you see the following error:
>
> `[FAIL: call didn't revert at a lower depth than cheatcode call depth]`
>
> Carefully read the next sections!

To understand why you are getting this error you first have to understand what `call depth` means.

You can think of call depth in a similar way to function scoping. When you are entering an **external** call the call depth is increased by `1`.
When you exit the external call the call depth is decreased by `1`. If you have nested calls it looks as follows:

```
0 → Contract A (calls B) → 1 → Contract B (calls C) → 2 → Contract C (returns) → 1 → Contract B (returns) → 0
```

**Internal** functions on the other hand do **NOT** increase the call depth. It is not actually making *calls* but rather *jumping* to the target location.

When testing **internal** functions with `vm.expectRevert` at the same call depth **ONLY** the **FIRST** `vm.expectRevert` is executed.

The following example shows where the footgun occurs. There are two `vm.expectRevert`'s that exist at the same call depth hence only the **FIRST** one is executed and the test returns a **SUCCESS**. This is likely different behavior from what you may assume.

```solidity
// DO NOT IMPLEMENT AS FOLLOWS! THIS IS AN INCORRECT USE.
function testMultipleReverts() public {
    vm.expectRevert();
    revert();

    vm.expectRevert();
    console2.log("Does not revert");
}
```

#### Description

If the **next call** does not revert with the expected data `message`, then `expectRevert` will.

> ⚠️ **Usage**
>
> By default, `expectRevert*` cheatcodes work only for calls with greater depth than test depth (see [#3437](https://github.com/foundry-rs/foundry/issues/3437) foundry issue).
> Expecting reverts at the same depth as test depth can be enabled by setting `allow_internal_expect_revert` to `true` as follows:
>
> Selectively by using an inline configuration entry where it is **DEEMED SAFE**:
>
> Add `/// forge-config: default.allow_internal_expect_revert = true` above the test function.
>
> Or globally, this is discouraged:
>
> Add `allow_internal_expect_revert = true` to `foundry.toml`.

As long as you are not using `vm.expectRevert` on multiple internal functions in a single test function body it is generally considered safe.

You are recommended to apply this rule in a similar manner one would when tagging assembly blocks as `memory-safe`.

> **Note**
>
> For a call like `stable.donate(sUSD.balanceOf(user))`, the next call expected to revert is `sUSD.balanceOf(user)` and not `stable.donate()`.

After calling `expectRevert`, calls to other cheatcodes before the reverting call are ignored.

This means, for example, we can call [`prank`](/reference/cheatcodes/prank.mdx) immediately before the reverting call.

There are several signatures for `expectRevert`:

* **Without parameters**: Asserts that the next call reverts, regardless of the message.
* **With `bytes4` message**: Asserts that the next call reverts with the specified 4 bytes and exact match of revert data.
* **With `bytes` message**: Asserts that the next call reverts with the specified bytes.
* **With `address` reverter**: Asserts that the next call is reverted by the specified address.
* **With `uint64` count**: Expects an exact number of reverts from the upcoming calls. If set to 0, it can be used to assert that a revert is not made.

and two signatures for `expectPartialRevert`:

* **`bytes4` message**: Asserts that the next call reverts and the specified 4 bytes match the first 4 bytes of revert data.
* **`bytes4` message and reverter `address`**: Asserts that the next call is reverted by specified address and the specified 4 bytes match the first 4 bytes of revert data.

> ℹ️ **Note:**
>
> Custom errors can have arguments that sometimes are difficult to calculate in a testing environment or they may be unrelated to the test at hand (e.g. a value computed in the internal function of a third-party contract). In such cases, `expectPartialRevert` can be used to ignore arguments and match only on the selector of custom error. For example, testing a function that reverts with `WrongNumber(uint256 number)` custom error:
>
> ```solidity
> function count() public {
>     revert WrongNumber(0);
> }
> ```
>
> should pass when using `expectPartialRevert`:
>
> ```solidity
> vm.expectPartialRevert(Counter.WrongNumber.selector);
> counter.count();
> ```
>
> but fails if exact match expected:
>
> ```solidity
> vm.expectRevert(Counter.WrongNumber.selector);
> counter.count();
> ```

> ⚠️ **Gotcha: Usage with low-level calls**
>
> Normally, a call that succeeds returns a status of `true` (along with any return data) and a call that reverts returns `false`.
>
> The Solidity compiler will insert checks that ensures that the call succeeded, and revert if it did not.
>
> On low level calls, the `expectRevert` cheatcode works by making the `status` boolean returned by the low level call correspond to whether the `expectRevert` succeeded or not, NOT whether or not the low-level call succeeds. Therefore, `status` being false corresponds to the cheatcode failing.
>
> Apart from this, `expectRevert` also mangles return data on low level calls, and is not usable.
>
> See the following example. For clarity, `status` has been renamed to `revertsAsExpected`:
>
> ```solidity
> function testLowLevelCallRevert() public {
>     vm.expectRevert(bytes("error message"));
>     (bool revertsAsExpected, ) = address(myContract).call(myCalldata);
>     assertTrue(revertsAsExpected, "expectRevert: call did not revert");
> }
> ```

#### Examples

To use `expectRevert` with a `string`, pass it as a string literal.

```solidity
vm.expectRevert("error message");
```

To use `expectRevert` with a custom [error type][error-type] without parameters, use its selector.

```solidity
vm.expectRevert(CustomError.selector);
```

To use `expectRevert` with a custom [error type][error-type] with parameters, ABI encode the error type.

```solidity
vm.expectRevert(
    abi.encodeWithSelector(CustomError.selector, 1, 2)
);
```

If you need to assert that a function reverts *without* a message, you can do so with `expectRevert(bytes(""))`.

```solidity
function testExpectRevertNoReason() public {
    Reverter reverter = new Reverter();
    vm.expectRevert(bytes(""));
    reverter.revertWithoutReason();
}
```

Message-less reverts happen when there is an EVM error, such as when the transaction consumes more than the block's gas limit.

If you need to assert that a function reverts a four character message, e.g. `AAAA`, you can do so with:

```solidity
function testFourLetterMessage() public {
    vm.expectRevert(bytes("AAAA"));
}
```

If used `expectRevert("AAAA")`, the compiler would throw an error because it wouldn't know which overload to use.

Finally, you can also have multiple `expectRevert()` checks in a single test.

```solidity
function testMultipleExpectReverts() public {
    vm.expectRevert("INVALID_AMOUNT");
    vault.send(user, 0);

    vm.expectRevert("INVALID_ADDRESS");
    vault.send(address(0), 200);
}
```

To use `expectPartialRevert` with a custom [error type][error-type], use its selector.

```solidity
vm.expectPartialRevert(CustomError.selector);
```

#### SEE ALSO

Forge Standard Library

[Std Errors](/reference/forge-std/std-errors.mdx)

[error-type]: https://docs.soliditylang.org/en/v0.8.11/contracts.html#errors


### External

* [`ffi`](/reference/cheatcodes/ffi.mdx)
* [`prompt`](/reference/cheatcodes/prompt.mdx)
* [`projectRoot`](/reference/cheatcodes/project-root.mdx)
* [`getCode`](/reference/cheatcodes/get-code.mdx)
* [`getDeployedCode`](/reference/cheatcodes/get-deployed-code.mdx)
* [`sleep`](/reference/cheatcodes/sleep.mdx)
* [`unixTime`](/reference/cheatcodes/unix-time.mdx)
* [`setEnv`](/reference/cheatcodes/set-env.mdx)
* [`envOr`](/reference/cheatcodes/env-or.mdx)
* [`envBool`](/reference/cheatcodes/env-bool.mdx)
* [`envUint`](/reference/cheatcodes/env-uint.mdx)
* [`envInt`](/reference/cheatcodes/env-int.mdx)
* [`envAddress`](/reference/cheatcodes/env-address.mdx)
* [`envBytes32`](/reference/cheatcodes/env-bytes32.mdx)
* [`envString`](/reference/cheatcodes/env-string.mdx)
* [`envBytes`](/reference/cheatcodes/env-bytes.mdx)
* [`parseJson`](/reference/cheatcodes/parse-json.mdx)
* [`fs`](/reference/cheatcodes/fs.mdx)


### `fee`

#### Signature

```solidity
function fee(uint256) external;
```

#### Description

Sets `block.basefee`.

#### Examples

```solidity
vm.fee(25 gwei);
emit log_uint(block.basefee); // 25000000000
```


### `ffi`

#### Signature

```solidity
function ffi(string[] calldata) external returns (bytes memory);
```

#### Description

Calls an arbitrary command if [`ffi`](/config/reference/testing#ffi) is enabled.

It is generally advised to use this cheat code as a last resort, and to not enable it by default, as anyone who can change the tests of a project will be able to execute arbitrary commands on devices that run the tests.

#### Tips

* By default the `ffi` cheatcode assumes the output of the command is a hex encoded value (e.g. a hex string of an ABI encoded value). If hex decoding fails, it will return the output as UTF8 bytes that you can cast to a string.
* Make sure that the output does not include a `\n` newline character. (e.g in Rust use `print!` vs `println!`)
* Remember that the script will be executed from the top-level directory of your project, not inside `test`
* Make sure that the inputs array does not have empty elements. They will be handled as inputs by the script, instead of space
* Use the cheatcode `toString` to easily convert arbitrary data to strings, so that you can pass them as command-line arguments
* On Windows some commands like `npm` or `npx` fail to execute with `program not found` error message. To avoid such make sure the command contains file extension as well, like `npm.cmd` or `npx.cmd`. These commands can be configured and read as environment variables, so tests doesn't need to be changed when running on different operating systems.

#### Examples

ABI encoded output

```solidity
string[] memory inputs = new string[](3);
inputs[0] = "echo";
inputs[1] = "-n";
// ABI encoded "gm", as a hex string
inputs[2] = "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002676d000000000000000000000000000000000000000000000000000000000000";

bytes memory res = vm.ffi(inputs);
string memory output = abi.decode(res, (string));
assertEq(output, "gm");
```

UTF8 string output

```solidity
string[] memory inputs = new string[](3);
inputs[0] = "echo";
inputs[1] = "-n";
inputs[2] = "gm";

bytes memory res = vm.ffi(inputs);
assertEq(string(res), "gm");
```


### Forking

* [`createFork`](/reference/cheatcodes/create-fork.mdx)
* [`selectFork`](/reference/cheatcodes/select-fork.mdx)
* [`createSelectFork`](/reference/cheatcodes/create-select-fork.mdx)
* [`activeFork`](/reference/cheatcodes/active-fork.mdx)
* [`rollFork`](/reference/cheatcodes/roll-fork.mdx)
* [`makePersistent`](/reference/cheatcodes/make-persistent.mdx)
* [`revokePersistent`](/reference/cheatcodes/revoke-persistent.mdx)
* [`isPersistent`](/reference/cheatcodes/is-persistent.mdx)
* [`allowCheatcodes`](/reference/cheatcodes/allow-cheatcodes.mdx)
* [`transact`](/reference/cheatcodes/transact.mdx)


### File cheat codes

#### Signature

```solidity
// Reads the entire content of file to string, (path) => (data)
function readFile(string calldata) external returns (string memory);
/// Reads the entire content of file as binary. `path` is relative to the project root.
function readFileBinary(string calldata path) external view returns (bytes memory data);
/// Reads the directory at the given path recursively, up to `maxDepth`.
/// `maxDepth` defaults to 1, meaning only the direct children of the given directory will be returned.
/// Follows symbolic links if `followLinks` is true.
function readDir(string calldata path) external view returns (DirEntry[] memory entries);
// Reads next line of file to string, (path) => (line)
function readLine(string calldata) external returns (string memory);
/// Reads a symbolic link, returning the path that the link points to.
/// This cheatcode will revert in the following situations, but is not limited to just these cases:
/// - `path` is not a symbolic link.
/// - `path` does not exist.
function readLink(string calldata linkPath) external view returns (string memory targetPath);
// Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does.
// (path, data) => ()
function writeFile(string calldata, string calldata) external;
// Writes line to file, creating a file if it does not exist.
// (path, data) => ()
function writeLine(string calldata, string calldata) external;
// Closes file for reading, resetting the offset and allowing to read it from beginning with readLine.
// (path) => ()
function closeFile(string calldata) external;
// Removes file. This cheatcode will revert in the following situations, but is not limited to just these cases:
// - Path points to a directory.
// - The file doesn't exist.
// - The user lacks permissions to remove the file.
// (path) => ()
function removeFile(string calldata) external;
// Returns true if the given path points to an existing entity, else returns false
// (path) => (bool)
function exists(string calldata) external returns (bool);
// Returns true if the path exists on disk and is pointing at a regular file, else returns false
// (path) => (bool)
function isFile(string calldata) external returns (bool);
// Returns true if the path exists on disk and is pointing at a directory, else returns false
// (path) => (bool)
function isDir(string calldata) external returns (bool);
```

#### Description

These cheatcodes provided by [forge-std](https://github.com/foundry-rs/forge-std) can be used for filesystem manipulation operations.

By default, filesystem access is disallowed and requires the `fs_permissions` setting in `foundry.toml`:

```toml
# Configures permissions for cheatcodes that touch the filesystem like `vm.writeFile`
# `access` restricts how the `path` can be accessed via cheatcodes
#    `read-write` | `true`   => `read` + `write` access allowed (`vm.readFile` + `vm.writeFile`)
#    `none`| `false` => no access
#    `read` => only read access (`vm.readFile`)
#    `write` => only write access (`vm.writeFile`)
# The `allowed_paths` further lists the paths that are considered, e.g. `./` represents the project root directory
# By default _no_ fs access permission is granted, and _no_ paths are allowed
# following example enables read access for the project dir _only_:
#       `fs_permissions = [{ access = "read", path = "./"}]`
fs_permissions = [] # default: all file cheat codes are disabled
```

#### Examples

Append a line to a file, this will create the file if it does not exist yet

This requires read access to the file / project root

```toml
fs_permissions = [{ access = "read", path = "./"}]
```

```solidity
string memory path = "output.txt";

string memory line1 = "first line";
vm.writeLine(path, line1);

string memory line2 = "second line";
vm.writeLine(path, line2);
```

Write to and read from a file

This requires read-write access to file / project root:

```toml
fs_permissions = [{ access = "read-write", path = "./"}]
```

```solidity
string memory path = "file.txt";
string memory data = "hello world";
vm.writeFile(path, data);

assertEq(vm.readFile(path), data);
```

Remove a file

This requires write access to file / project root:

```toml
fs_permissions = [{ access = "write", path = "./"}]
```

```solidity
string memory path = "file.txt";
vm.removeFile(path);

assertFalse(vm.exists(validPath));
```

Verify that a filesystem path is valid

```solidity
// Verify that path 'foo/files/bar.txt' exists
string memory validPath = "foo/files/bar.txt";
assertTrue(vm.exists(validPath));
```

Verify that a filesystem path points to a file or directory

```solidity
// Verify that path 'foo/file/bar.txt' points to a file
string memory validFilePath = "foo/files/bar.txt";
assertTrue(vm.isFile(validFilePath));

// Verify that 'foo/file' points to a directory
string memory validDirPath = "foo/files";
assertTrue(vm.isDir(validDirPath));
```


### Fuzzer

* [`assume`](/reference/cheatcodes/assume.mdx)
* [`assumeNoRevert`](/reference/cheatcodes/assume-no-revert.mdx)


### `snapshotGas` cheatcodes

#### Signature

```solidity
/// Start a snapshot capture of the current gas usage by name.
/// The group name is derived from the contract name.
function startSnapshotGas(string calldata name) external;

/// Start a snapshot capture of the current gas usage by name in a group.
function startSnapshotGas(string calldata group, string calldata name) external;

/// Stop the snapshot capture of the current gas by latest snapshot name, capturing the gas used since the start.
function stopSnapshotGas() external returns (uint256 gasUsed);

/// Stop the snapshot capture of the current gas usage by name, capturing the gas used since the start.
/// The group name is derived from the contract name.
function stopSnapshotGas(string calldata name) external returns (uint256 gasUsed);

/// Stop the snapshot capture of the current gas usage by name in a group, capturing the gas used since the start.
function stopSnapshotGas(string calldata group, string calldata name) external returns (uint256 gasUsed);

/// Snapshot capture an arbitrary numerical value by name.
/// The group name is derived from the contract name.
function snapshotValue(string calldata name, uint256 value) external;

/// Snapshot capture an arbitrary numerical value by name in a group.
function snapshotValue(string calldata group, string calldata name, uint256 value) external;

/// Snapshot capture the gas usage of the last call by name from the callee perspective.
function snapshotGasLastCall(string calldata name) external returns (uint256 gasUsed);

/// Snapshot capture the gas usage of the last call by name in a group from the callee perspective.
function snapshotGasLastCall(string calldata group, string calldata name) external returns (uint256 gasUsed);
```

#### Description

`snapshotGas*` cheatcodes allow you to capture gas usage in your tests. This can be useful to track how much gas your logic is consuming. You can capture the gas usage of the last call by name, capture an arbitrary numerical value by name, or start and stop a snapshot capture of the current gas usage by name.

In order to strictly compare gas usage across test runs you can set one of the following:

* Set the `FORGE_SNAPSHOT_CHECK=true` environment variable
* Set `gas_snapshot_check = true` in `foundry.toml`
* Pass `--gas-snapshot-check=true`

By default this is **not enabled** and passing `--gas-snapshot-check=false` will override all others.

This will compare the gas usage of your tests against the last snapshot and fail if the gas usage has changed.

It is intended that the `snapshots` directory created when using the `snapshotGas*` cheatcodes is checked into version control. This allows you to track changes in gas usage over time and compare gas usage during code reviews.

To disable the emitting of gas snapshots you can set one of the following:

* Set the `FORGE_SNAPSHOT_EMIT=false` environment variable.
* Set `gas_snapshot_emit = false` in `foundry.toml`.
* Pass `--gas-snapshot-emit=false`

By default this is **enabled** and gas snapshots are written to disk.

> ℹ️ **Isolated tests**
>
> These cheatcodes are not accurate if not using isolated test mode.
>
> You can enable isolation mode by passing the `--isolate` flag or
> tag the test function with the following inline configuration:
>
> `/// forge-config: default.isolate = true`

#### Examples

Capturing the gas usage of a section of code that calls an external contract:

```solidity
contract SnapshotGasTest is Test {
    Flare public flare;

    function setUp() public {
        flare = new Flare();
    }

    function testSnapshotGas() public {
        vm.startSnapshotGas("externalA");
        flare.run(256);
        uint256 gasUsed = vm.stopSnapshotGas();
    }
}
```

Capturing the gas usage of multiple sections of code that modify the internal state:

```solidity
contract SnapshotGasTest is Test {
    uint256 public slot0;

    /// Writes to `snapshots/SnapshotGasTest.json` group with name `internalA`, `internalB`, and `internalC`.
    function testSnapshotGas() public {
        vm.startSnapshotGas("internalA");
        slot0 = 1;
        vm.stopSnapshotGas();

        vm.startSnapshotGas("internalB");
        slot0 = 2;
        vm.stopSnapshotGas();

        vm.startSnapshotGas("internalC");
        slot0 = 0;
        vm.stopSnapshotGas();
    }
}
```

Capturing the gas usage of a section of code that modifies both the internal state and calls an external contract:

```solidity
contract SnapshotGasTest is Test {
    uint256 public slot0;
    Flare public flare;

    function setUp() public {
        flare = new Flare();
    }

    /// Writes to `snapshots/SnapshotGasTest.json` group with name `combinedA`.
    function testSnapshotGas() public {
        vm.startSnapshotGas("combinedA");
        flare.run(256);
        slot0 = 1;
        vm.stopSnapshotGas();
    }
}
```

Capturing an arbitrary numerical value (such as the bytecode size of a contract):

```solidity
contract SnapshotGasTest is Test {
    uint256 public slot0;

    /// Writes to `snapshots/SnapshotGasTest.json` group with name `valueA`, `valueB`, and `valueC`.
    function testSnapshotValue() public {
        uint256 a = 123;
        uint256 b = 456;
        uint256 c = 789;

        vm.snapshotValue("valueA", a);
        vm.snapshotValue("valueB", b);
        vm.snapshotValue("valueC", c);
    }
}
```

Capturing the gas usage of the last call from the callee perspective:

```solidity
contract SnapshotGasTest is Test {
    Flare public flare;

    function setUp() public {
        flare = new Flare();
    }

    /// Writes to `snapshots/SnapshotGasTest.json` group with name `lastCallA`.
    function testSnapshotGasLastCall() public {
        flare.run(1);
        vm.snapshotGasLastCall("lastCallA");
    }
}
```

For each of the above examples you can also use the `group` variant of the cheatcodes to group the snapshots together in a custom group.

```solidity
contract SnapshotGasTest is Test {
    uint256 public slot0;

    /// Writes to `snapshots/CustomGroup.json` group with name `internalA`, `internalB`, and `internalC`.
    function testSnapshotGas() public {
        vm.startSnapshotGas("CustomGroup", "internalA");
        slot0 = 1;
        vm.stopSnapshotGas();

        vm.startSnapshotGas("CustomGroup", "internalB");
        slot0 = 2;
        vm.stopSnapshotGas();

        vm.startSnapshotGas("CustomGroup", "internalC");
        slot0 = 0;
        vm.stopSnapshotGas();
    }
}
```


### `getBlockNumber`

#### Signature

```solidity
function getBlockNumber() external view returns (uint256 height);
```

#### Description

Gets the current `block.number`. This is useful in cases where `vm.roll` along with `--via-ir` compilation is used, as `block.number` is assumed to be a constant during a transaction. This means that on every forge test, multiple calls to `block.number` would get optimized to just returning a constant value, instead of actually accessing the current `block.number`. `vm.getBlockNumber()` avoids this optimization and returns the current `block.number`.

#### Examples

```solidity
uint256 height = vm.getBlockNumber();
assertEq(height, uint256(block.number));
vm.roll(10);
assertEq(vm.getBlockNumber(), 10);
```


### `getBlockTimestamp`

#### Signature

```solidity
function getBlockTimestamp() external view returns (uint256 timestamp);
```

#### Description

Gets the current `block.timestamp`. This is useful in cases where `vm.warp` along with `--via-ir` compilation is used, as `block.timestamp` is assumed to be a constant during a transaction. This means that in every forge test, multiple calls to `block.timestamp` would get optimized to just returning a constant value, instead of actually accessing the current `block.timestamp`. `vm.getBlockTimestamp()` avoids this optimization and returns the current `block.timestamp`.

#### Examples

```solidity
assertEq(vm.getBlockTimestamp(), 1, "timestamp should be 1");
vm.warp(10);
assertEq(vm.getBlockTimestamp(), 10, "warp failed");
```


### `getCode`

#### Signature

```solidity
function getCode(string calldata) external returns (bytes memory);
```

#### Description

Returns the **creation** bytecode for a contract in the project given the path to the contract.

The calldata parameter can either be in the form `ContractFile.sol` (if the filename and contract name are the same), `ContractFile.sol:ContractName`, or the path to an artifact, relative to the root of your project.

> ℹ️ **Note**
>
> `getCode` requires read permission for the output directory, see [file cheatcodes](/reference/cheatcodes/fs.mdx).
>
> To grant read access set `fs_permissions = [{ access = "read", path = "./out"}]` in your `foundry.toml`.

#### Examples

```solidity
MyContract myContract = new MyContract(arg1, arg2);

// Let's do the same thing with `getCode`
bytes memory args = abi.encode(arg1, arg2);
bytes memory bytecode = abi.encodePacked(vm.getCode("MyContract.sol:MyContract"), args);
address anotherAddress;
assembly {
    anotherAddress := create(0, add(bytecode, 0x20), mload(bytecode))
}

assertEq0(address(myContract).code, anotherAddress.code); // [PASS]
```

Deploy a contract to an arbitrary address by combining `getCode` and [`etch`](/reference/cheatcodes/etch.mdx)

```solidity
// Deploy
bytes memory args = abi.encode(arg1, arg2);
bytes memory bytecode = abi.encodePacked(vm.getCode("MyContract.sol:MyContract"), args);
address deployed;
assembly {
    deployed := create(0, add(bytecode, 0x20), mload(bytecode))
}

// Set the bytecode of an arbitrary address
vm.etch(targetAddr, deployed.code);
```

#### Supported formats

You can fetch artifacts by either contract path or contract name. Fetching artifacts for a specific version is also supported. If not provided, cheatcode will default to the version of a test being executed or the only version artifact was compiled with.

```solidity
vm.getCode("MyContract.sol:MyContract");
vm.getCode("MyContract");
vm.getCode("MyContract.sol:0.8.18");
vm.getCode("MyContract:0.8.18");
```

#### SEE ALSO

[`getDeployedCode`](/reference/cheatcodes/get-deployed-code.mdx)
[`etch`](/reference/cheatcodes/etch.mdx)

Forge Standard Library

[`deployCode`](/reference/forge-std/deployCode.mdx)
[`deployCodeTo`](/reference/forge-std/deployCodeTo.mdx)

[forge-std]: ../reference/forge-std


### `getDeployedCode`

#### Signature

```solidity
function getDeployedCode(string calldata) external returns (bytes memory);
```

#### Description

This cheatcode works similar to [`getCode`](/reference/cheatcodes/get-code.mdx) but only returns the **deployed** bytecode (aka runtime
bytecode) for a contract in the project given the path to the contract.

The main use case for this cheat code is as a shortcut to deploy stateless contracts to arbitrary addresses.

The calldata parameter can either be in the form `ContractFile.sol` (if the filename and contract name are the same)
, `ContractFile.sol:ContractName`, or the path to an artifact, relative to the root of your project.

> ℹ️ **Note**
>
> `getDeployedCode` requires read permission for the output directory, see [file cheatcodes](/reference/cheatcodes/fs.mdx).
>
> To grant read access set `fs_permissions = [{ access = "read", path = "./out"}]` in your `foundry.toml`.

#### Examples

Deploy a stateless contract at an arbitrary address using `getDeployedCode` and [`etch`](/reference/cheatcodes/etch.mdx).

```solidity
// A stateless contract that we want deployed at a specific address
contract Override {
    event Payload(address sender, address target, bytes data);

    function emitPayload(
        address target, bytes calldata message
    ) external payable returns (uint256) {
        emit Payload(msg.sender, target, message);
        return 0;
    }
}

// get the **deployedBytecode**
bytes memory code = vm.getDeployedCode("Override.sol:Override");

// set the code of an arbitrary address
address overrideAddress = address(64);
vm.etch(overrideAddress, code);
assertEq(overrideAddress.code, code);
```

#### Supported formats

You can fetch artifacts by either contract path or contract name. Fetching artifacts for a specific version is also supported. If not provided, cheatcode will default to the version of a test being executed or the only version artifact was compiled with.

```solidity
vm.getDeployedCode("MyContract.sol:MyContract");
vm.getDeployedCode("MyContract");
vm.getDeployedCode("MyContract.sol:0.8.18");
vm.getDeployedCode("MyContract:0.8.18");
```

#### SEE ALSO

Forge Standard Library

[`getCode`](/reference/cheatcodes/get-code.mdx)
[`etch`](/reference/cheatcodes/etch.mdx)

[forge-std]: ../reference/forge-std


### `getLabel`

#### Signature

```solidity
function getLabel(address) external returns (string memory);
```

#### Description

Retrieves the label for an address if it was previously labeled. If not, it returns the address prefixed with `unlabeled:`.


### `getNonce`

#### Signature

```solidity
function getNonce(address account) external returns (uint64);
```

```solidity
function getNonce(Wallet memory wallet) external returns (uint64);
```

#### Description

Gets the nonce of the given account or [Wallet](/reference/cheatcodes/create-wallet.mdx).

#### Examples

##### `address`

```solidity
uint256 nonce = vm.getNonce(address(100));
emit log_uint(nonce); // 0
```

##### `Wallet`

```solidity
Wallet memory alice = vm.createWallet("alice");
uint256 nonce = vm.getNonce(alice);
emit log_uint(nonce); // 0
```


### `getRecordedLogs`

#### Signature

```solidity
struct Log {
  bytes32[] topics;
  bytes data;
  address emitter;
}

function getRecordedLogs()
external
returns (
  Log[] memory
);
```

#### Description

Gets the emitted events recorded by [`recordLogs`](/reference/cheatcodes/record-logs.mdx).

This function will consume the recorded logs when called.

#### Examples

```solidity
/// event LogTopic1(
///   uint256 indexed topic1,
///   bytes data
/// );

/// event LogTopic12(
///   uint256 indexed topic1,
///   uint256 indexed topic2,
///   bytes data
/// );

/// bytes memory testData0 = "Some data";
/// bytes memory testData1 = "Other data";


// Start the recorder
vm.recordLogs();

emit LogTopic1(10, testData0);
emit LogTopic12(20, 30, testData1);

// Notice that your entries are <Interface>.Log[]
// as opposed to <instance>.Log[]
Vm.Log[] memory entries = vm.getRecordedLogs();

assertEq(entries.length, 2);

// Recall that topics[0] is the event signature
assertEq(entries[0].topics.length, 2);
assertEq(entries[0].topics[0], keccak256("LogTopic1(uint256,bytes)"));
assertEq(entries[0].topics[1], bytes32(uint256(10)));
// assertEq won't compare bytes variables. Try with strings instead.
assertEq(abi.decode(entries[0].data, (string)), string(testData0));

assertEq(entries[1].topics.length, 3);
assertEq(entries[1].topics[0], keccak256("LogTopic12(uint256,uint256,bytes)"));
assertEq(entries[1].topics[1], bytes32(uint256(20)));
assertEq(entries[1].topics[2], bytes32(uint256(30)));
assertEq(abi.decode(entries[1].data, (string)), string(testData1));

// Emit another event
emit LogTopic1(40, testData0);

// Your last read consumed the recorded logs,
// you will only get the latest emitted even after that call
entries = vm.getRecordedLogs();

assertEq(entries.length, 1);

assertEq(entries[0].topics.length, 2);
assertEq(entries[0].topics[0], keccak256("LogTopic1(uint256,bytes)"));
assertEq(entries[0].topics[1], bytes32(uint256(40)));
assertEq(abi.decode(entries[0].data, (string)), string(testData0));

```


### `isContext`

#### Signature

```solidity
enum ForgeContext {
    // Test group execution context (test, coverage or snapshot).
    TestGroup,
    // `forge test` execution context.
    Test,
    // `forge coverage` execution context.
    Coverage,
    // `forge snapshot` execution context.
    Snapshot,
    // Script group execution context (dry run, broadcast or resume).
    ScriptGroup,
    // `forge script` execution context.
    ScriptDryRun,
    // `forge script --broadcast` execution context.
    ScriptBroadcast,
    // `forge script --resume` execution context.
    ScriptResume,
    // Unknown `forge` execution context.
    Unknown
}

function isContext(ForgeContext context) external view returns (bool result);
```

#### Description

Checks the current `forge` execution context.

#### Examples

```solidity
import {VmSafe} from "forge-std/Vm.sol";

if (vm.isContext(VmSafe.ForgeContext.ScriptDryRun)) {
    // execute specific script dry run logic
}

if (vm.isContext(VmSafe.ForgeContext.ScriptBroadcast)) {
    // execute specific script broadcast logic
}

if (vm.isContext(VmSafe.ForgeContext.ScriptResume)) {
    // execute specific script resume logic
}
```


### `isPersistent`

#### Signature

```solidity
function isPersistent(address) external returns (bool);
```

#### Description

Returns whether an account is marked as persistent ([`makePersistent`](/reference/cheatcodes/make-persistent.mdx)).

#### Examples

Check default status of `msg.sender` and the current test account

```solidity
// By default the `sender` and the test contract itself are persistent
assert(cheats.isPersistent(msg.sender));
assert(cheats.isPersistent(address(this)));
```

#### SEE ALSO

* [makePersistent](/reference/cheatcodes/make-persistent.mdx)
* [revokePersistent](/reference/cheatcodes/revoke-persistent.mdx)


### `keyExistsJson`

#### Signature

```solidity
// Check if a key exists in a JSON string.
vm.keyExistsJson(string memory json, string memory key) returns (bool)
```

#### Description

Checks if a key exists in a JSON string.

#### Examples

```solidity
string memory path = "./path/to/jsonfile.json";
string memory json = vm.readFile(path);
bool exists = vm.keyExistsJson(json, ".key");
assertTrue(exists);
```


### `keyExistsToml`

#### Signature

```solidity
// Check if a key exists in a TOML table.
vm.keyExistsToml(string memory toml, string memory key) returns (bool)
```

#### Description

Checks if a key exists in a TOML table.

#### Examples

```solidity
string memory path = "./path/to/tomlfile.toml";
string memory toml = vm.readFile(path);
bool exists = vm.keyExistsToml(toml, ".key");
assertTrue(exists);
```


### `keyExists`

#### Status

`keyExists` is being deprecated in favor of `keyExistsJson`. It will be removed in future versions.

#### Signature

```solidity
// Check if a key exists in a JSON string.
vm.keyExists(string memory json, string memory key) returns (bool)
```

#### Description

Checks if a key exists in a JSON string.

#### Examples

```solidity
string memory path = "./path/to/jsonfile.json";
string memory json = vm.readFile(path);
bool exists = vm.keyExists(json, ".key");
assertTrue(exists);
```


### `label`

#### Signature

```solidity
function label(address addr, string calldata label) external;
```

#### Description

Sets a label `label` for `addr` in test traces.

If an address is labelled, the label will show up in test traces instead of the address.


### `load`

#### Signature

```solidity
function load(address account, bytes32 slot) external returns (bytes32);
```

#### Description

Loads the value from storage slot `slot` on account `account`.

#### Examples

```solidity
/// contract LeetContract {
///     uint256 private leet = 1337; // slot 0
/// }

bytes32 leet = vm.load(address(leetContract), bytes32(uint256(0)));
emit log_uint(uint256(leet)); // 1337
```

#### SEE ALSO

Forge Standard Library

[Std Storage](/reference/forge-std/std-storage.mdx)


### `makePersistent`

#### Signature

```solidity
function makePersistent(address account) external;
function makePersistent(address account0, address account1) external;
function makePersistent(address account0, address account1, address account2) external;
function makePersistent(address[] calldata accounts) external;
```

#### Description

Each fork ([`createFork`](/reference/cheatcodes/create-fork.mdx)) has its own independent storage, which is also replaced when another fork is selected ([`selectFork`](/reference/cheatcodes/select-fork.mdx)).
By default, only the test contract account and the caller are persistent across forks, which means that changes to the state of the test contract (variables) are preserved when different forks are selected. This way data can be shared by storing it in the contract's variables.

However, with this cheatcode, it is possible to mark the specified accounts as persistent, which means that their state is available regardless of which fork is currently active.

#### Examples

Mark a new contract as persistent

```solidity
contract SimpleStorageContract {
    string public value;

    function set(uint256 _value) public {
        value = _value;
    }
}

function testMarkPersistent() public {
    // by default the `sender` and the contract itself are persistent
    assert(cheats.isPersistent(msg.sender));
    assert(cheats.isPersistent(address(this)));

    // select a specific fork
    cheats.selectFork(mainnetFork);

    // create a new contract that's stored in the `mainnetFork` storage
    SimpleStorageContract simple = new SimpleStorageContract();

    // `simple` is not marked as persistent
    assert(!cheats.isPersistent(address(simple)));

    // contract can be used
    uint256 expectedValue = 99;
    simple.set(expectedValue);
    assertEq(simple.value(), expectedValue);

    // mark as persistent
    cheats.makePersistent(address(simple));

    // select a different fork
    cheats.selectFork(optimismFork);

    // ensure contract is still persistent
    assert(cheats.isPersistent(address(simple)));

    // value is set as expected
    assertEq(simple.value(), expectedValue);
}
```

#### SEE ALSO

* [isPersistent](/reference/cheatcodes/is-persistent.mdx)
* [revokePersistent](/reference/cheatcodes/revoke-persistent.mdx)
* [createFork](/reference/cheatcodes/create-fork.mdx)
* [selectFork](/reference/cheatcodes/select-fork.mdx)


### `mockCallRevert`

#### Signature

```solidity
function mockCallRevert(address where, bytes calldata data, bytes calldata retdata) external;
```

```solidity
function mockCallRevert(
    address where,
    uint256 value,
    bytes calldata data,
    bytes calldata retdata
) external;
```

#### Description

Reverts all calls to an address `where` if the call data either strictly or loosely matches `data` and returns `retdata`.

`retdata` can be a raw return message or a custom error.

When a call is made to `where` the call data is first checked to see if it matches in its entirety with `data`.
If not, the call data is checked to see if there is a partial match, with the match starting at the first byte of the call data.

If a match is found, then the call is reverted and `retdata` is returned.

**Using the second signature** we can mock the calls with a specific `msg.value`. `Calldata` match takes precedence over `msg.value` in case of ambiguity.

Reverted mock calls are in effect until [`clearMockedCalls`](/reference/cheatcodes/clear-mocked-calls.mdx) is called.

> ℹ️ **Internal calls**
>
> This cheatcode does not currently work on internal calls. See issue [#432](https://github.com/foundry-rs/foundry/issues/432).

#### Examples

Reverting an exact call with a raw error message:

```solidity
function testMockCallRevert() public {
    vm.mockCallRevert(
        address(0),
        abi.encodeWithSelector(MyToken.balanceOf.selector, address(1)),
        "REVERT_MESSAGE"
    );
    vm.expectRevert("REVERT_MESSAGE");
    IERC20(address(0)).balanceOf(address(1));
}
```

Reverting a call with a custom error:

```solidity
function testMockCallRevertWithCustomError() public {
    bytes memory customError = abi.encodeWithSelector(TestError.selector, "ERROR_MESSAGE");
    vm.mockCallRevert(
        address(0),
        abi.encodeWithSelector(MyToken.balanceOf.selector, address(1)),
        customError
    );
    vm.expectRevert(customError);
    IERC20(address(0)).balanceOf(address(1));
}
```

Mocking a call with a given `msg.value`:

```solidity
function testMockCallRevertWithValue() public {
    assertEq(example.pay{value: 10}(1), 1);
    assertEq(example.pay{value: 1}(2), 2);
    vm.mockCallRevert(
        address(example),
        10,
        abi.encodeWithSelector(example.pay.selector),
        "ERROR_MESSAGE"
    );
    assertEq(example.pay{value: 1}(2), 2);
    vm.expectRevert("ERROR_MESSAGE");
    assertEq(example.pay{value: 10}(1), 99);
}
```


### `mockCall`

#### Signature

```solidity
function mockCall(address where, bytes calldata data, bytes calldata retdata) external;
```

```solidity
function mockCall(
    address where,
    uint256 value,
    bytes calldata data,
    bytes calldata retdata
) external;
```

#### Description

Mocks all calls to an address `where` if the call data either strictly or loosely matches `data` and returns `retdata`.

When a call is made to `where` the call data is first checked to see if it matches in its entirety with `data`.
If not, the call data is checked to see if there is a partial match, with the match starting at the first byte of the call data.

If a match is found, then `retdata` is returned from the call.

**Using the second signature** we can mock the calls with a specific `msg.value`. `Calldata` match takes precedence over `msg.value` in case of ambiguity.

Mocked calls are in effect until [`clearMockedCalls`](/reference/cheatcodes/clear-mocked-calls.mdx) is called.

> ℹ️ **Note**
>
> Calls to mocked addresses may revert if there is no code on the address.
> This is because Solidity inserts an `extcodesize` check before some contract calls.
>
> To circumvent this, use the [`etch`](/reference/cheatcodes/etch.mdx) cheatcode if the mocked address has no code.

> ℹ️ **Internal calls**
>
> This cheatcode does not currently work on internal calls. See issue [#432](https://github.com/foundry-rs/foundry/issues/432).

#### Examples

Mocking an exact call:

```solidity
function testMockCall() public {
    vm.mockCall(
        address(0),
        abi.encodeWithSelector(MyToken.balanceOf.selector, address(1)),
        abi.encode(10)
    );
    assertEq(IERC20(address(0)).balanceOf(address(1)), 10);
}
```

Mocking an entire function:

```solidity
function testMockCall() public {
    vm.mockCall(
        address(0),
        abi.encodeWithSelector(MyToken.balanceOf.selector),
        abi.encode(10)
    );
    assertEq(IERC20(address(0)).balanceOf(address(1)), 10);
    assertEq(IERC20(address(0)).balanceOf(address(2)), 10);
}
```

Mocking a call with a given `msg.value`:

```solidity
function testMockCall() public {
    assertEq(example.pay{value: 10}(1), 1);
    assertEq(example.pay{value: 1}(2), 2);
    vm.mockCall(
        address(example),
        10,
        abi.encodeWithSelector(example.pay.selector),
        abi.encode(99)
    );
    assertEq(example.pay{value: 10}(1), 99);
    assertEq(example.pay{value: 1}(2), 2);
}
```

Mocking a public variable:

```solidity
contract Example {
    uint256 public number = 10;
}

contract ExampleTest is Test {
    Example public example;

    function setUp() public {
        example = new Example();
    }

    function testMockPublicVariable() public {
        assertEq(example.number(), 10);
        vm.mockCall(
            address(example),
            abi.encodeWithSelector(bytes4(keccak256("number()"))),
            abi.encode(5)
        );
        assertEq(example.number(), 5);
    }
}
```


### `mockCalls`

#### Signature

```solidity
function mockCalls(address where, bytes calldata data, bytes[] calldata retdata) external;
```

```solidity
function mockCalls(
    address where,
    uint256 value,
    bytes calldata data,
    bytes[] calldata retdata
) external;
```

#### Description

Mocks all calls to an address `where` if the call data either strictly or loosely
matches `data` and returns different data for each call based on the `retdata`
array values.

See [`mockCall`](/reference/cheatcodes/mock-call.mdx) for more information on mocking calls and
matching precedence.

> ℹ️ **Note**
>
> Any invocation of the mocked call beyond the number of elements in `retdata`
> will receive the last `retdata` element in response. `clearMockedCalls` can be
> called to clear the mock

#### Examples

Mocking multiple `balanceOf(address)` calls:

```solidity
function testMockCall() public {
    bytes[] memory mocks = new bytes[](2);
    mocks[0] = abi.encode(2 ether);
    mocks[1] = abi.encode(1 ether);

    vm.mockCalls(
        address(0),
        abi.encodeWithSelector(IERC20.balanceOf.selector, address(1)),
        mocks
    );

    assertEq(IERC20(address(0)).balanceOf(address(1)), 2 ether);
    assertEq(IERC20(address(0)).balanceOf(address(1)), 1 ether);
}
```

Mocking multiple calls with `msg.value`:

```solidity
function testMockCallsWithMsgValue() public {
    bytes[] memory mocks = new bytes[](2);
    mocks[0] = abi.encode(2 ether);
    mocks[1] = abi.encode(1 ether);

    vm.mockCalls(
        address(0),
        1 ether,
        abi.encodeWithSelector(DexPool.swapETHForToken.selector),
        mocks
    );

    uint tokenAmount1 = DexPool(address(0)).swapETHForToken{value: 1 ether}();
    uint tokenAmount2 = DexPool(address(0)).swapETHForToken{value: 1 ether}();

    assertEq(tokenAmount1, 2 ether);
    assertEq(tokenAmount2, 1 ether);
}
```


### `mockFunction`

#### Signature

```solidity
function mockFunction(address callee, address target, bytes calldata data) external;
```

#### Description

Executes calls to an address `callee` with bytecode of address `target` if the call data either strictly or loosely matches `data`.

When a call is made to `callee` the call data is first checked to see if it matches in its entirety with `data`.
If not, the call data is checked to see if there is a partial match on function selector.

If a match is found, then call is executed using the bytecode of `target` address.

> ℹ️ **Isolated tests**
>
> This cheatcode does not currently work if using isolated test mode.

#### Examples

For two contracts (with same storage layout):

```solidity
contract Counter {
    uint256 public a;

    function count(uint256 x) public {
        a = 321 + x;
    }
}

contract ModelCounter {
    uint256 public a;

    function count(uint256 x) public {
        a = 123 + x;
    }
}
```

Mocking an exact call to `count` function:

```solidity
function testMockFunction() public {
    vm.mockFunction(
        address(counter),
        address(model),
        abi.encodeWithSelector(Counter.count.selector, 456)
    );
    counter.count(456);
    assertEq(counter.a(), 123 + 456);
    counter.count(567);
    assertEq(counter.a(), 321 + 567);
}
```

Mocking all calls to `count` function:

```solidity
function testMockCall() public {
    vm.mockFunction(
        address(counter),
        address(model),
        abi.encodeWithSelector(Counter.count.selector)
    );
    counter.count(678);
    assertEq(counter.a(), 123 + 678);
    counter.count(789);
    assertEq(counter.a(), 123 + 789);
}
```


### Cheatcodes Reference

Cheatcodes give you powerful assertions, the ability to alter the state of the EVM, mock data, and more.

Cheatcodes are made available through use of the cheatcode address (`0x7109709ECfa91a80626fF3989D68f67F5b1DD12D`).

> ℹ️ **Note**
>
> If you encounter errors for this address when using fuzzed addresses in your tests, you may wish to
> exclude it from your fuzz tests by using the following line:
>
> ```solidity
> vm.assume(address_ != 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);
> ```

You can also access cheatcodes easily via `vm` available in Forge Standard Library's [`Test`](/reference/forge-std/overview) contract.

#### Forge Standard Library Cheatcodes

Forge Std implements wrappers around cheatcodes, which combine multiple standard cheatcodes to improve development experience. These are not technically cheatcodes, but rather compositions of Forge's cheatcodes.

You can view the list of Forge Standard Library's cheatcode wrappers [in the references section](/reference/forge-std/std-cheats.mdx). You can reference the [Forge Std source code](https://github.com/foundry-rs/forge-std/blob/master/src/Test.sol) to learn more about how the wrappers work under the hood.

#### Cheatcode Types

Below are some subsections for the different Forge cheatcodes.

* [Environment](/reference/cheatcodes/environment.mdx): Cheatcodes that alter the state of the EVM.
* [Assertions](/reference/cheatcodes/assertions.mdx): Cheatcodes that are powerful assertions
* [Fuzzer](/reference/cheatcodes/fuzzer.mdx): Cheatcodes that configure the fuzzer
* [External](/reference/cheatcodes/external.mdx): Cheatcodes that interact with external state (files, commands, ...)
* [Signing](/reference/cheatcodes/signing.mdx): Cheatcodes for signing
* [Utilities](/reference/cheatcodes/utilities.mdx): Smaller utility cheatcodes
* [Forking](/reference/cheatcodes/forking.mdx): Forking mode cheatcodes
* [State snapshots](/reference/cheatcodes/state-snapshots.mdx): State snapshot cheatcodes
* [RPC](/reference/cheatcodes/rpc.mdx): RPC related cheatcodes
* [File](/reference/cheatcodes/fs.mdx): Cheatcodes for working with files

#### Add a new cheatcode

If you need a new feature, consider [contributing to the Foundry's codebase](https://github.com/foundry-rs/foundry) to add the cheatcode.

#### Cheatcodes Interface

This is a Solidity interface for all of the cheatcodes present in Forge.

```solidity
// [!include ~/snippets/output/vm/Vm.sol:3]
```


### `parseAddress`

#### Signature

```solidity
function parseAddress(string calldata stringifiedValue) external pure returns (address parsedValue);
```

#### Description

Parses the value of `string` into `address`

#### Examples

```solidity
string memory addressAsString = "0x0000000000000000000000000000000000000000";
address stringToAddress = vm.parseAddress(addressAsString); // 0x0000000000000000000000000000000000000000
```


### `parseBool`

#### Signature

```solidity
function parseBool(string calldata stringifiedValue) external pure returns (bool parsedValue);
```

#### Description

Parses the value of `string` into `bool`

#### Examples

```solidity
string memory boolAsString = "false";
bool stringToBool = vm.parseBool(boolAsString); // false
```


### `parseBytes`

#### Signature

```solidity
function parseBytes(string calldata stringifiedValue) external pure returns (bytes memory parsedValue);
```

#### Description

Parses the value of `string` into `bytes`

#### Examples

```solidity
string memory bytesAsString = "0x00000000000000000000000000000000";
bytes memory stringToBytes = vm.parseBytes(bytesAsString); // 0x00000000000000000000000000000000

```


### `parseBytes32`

#### Signature

```solidity
function parseBytes32(string calldata stringifiedValue) external pure returns (bytes32 parsedValue);
```

#### Description

Parses the value of `string` into `bytes32`

#### Examples

```solidity
string memory bytes32AsString = "0x0000000000000000000000000000000000000000000000000000000000000000";
bytes32 stringToBytes32 = vm.parseBytes32(bytes32AsString); // 0x0000000000000000000000000000000000000000000000000000000000000000
```


### `parseInt`

#### Signature

```solidity
function parseInt(string calldata stringifiedValue) external pure returns (int256 parsedValue);
```

#### Description

Parses the value of `string` into `int256`

#### Examples

```solidity
string memory intAsString = "-12345";
int256 stringToInt = vm.parseInt(intAsString); // -12345
```


### `parseJsonKeys`

#### Signature

```solidity
// Get list of keys present in a JSON string
function parseJsonKeys(string calldata json, string calldata key) external pure returns (string[] memory keys);
```

#### Description

Gets list of keys present in a JSON string

#### Examples

```solidity
string memory json = '{"key": {"a": 1, "b": 2}}';
string[] memory keys = vm.parseJsonKeys(json, ".key"); // ["a", "b"]
```

```solidity
string memory json = '{"key": "something"}';
string[] memory keys = vm.parseJsonKeys(json, "$"); // ["key"]
```

```solidity
string memory json = '{"root_key": [{"a": 1, "b": 2}]}';
string[] memory keys = vm.parseJsonKeys(json, ".root_key[0]"); // ["a", "b"]
```


### `parseJson`

#### Signature

```solidity
// Return the value(s) that correspond to 'key'
vm.parseJson(string memory json, string memory key)
// Return the entire JSON file
vm.parseJson(string memory json);
```

#### Description

These cheatcodes are used to parse JSON files in the form of strings. Usually, it's coupled with `vm.readFile()` which returns an entire file in the form of a string.

You can use `stdJson` from `forge-std`, as a helper library for better UX.

The cheatcode accepts either a `key` to search for a specific value in the JSON, or no key to return the entire JSON. It returns the value as an abi-encoded `bytes` array. That means that you will have to `abi.decode()` to the appropriate type for it to function properly, else it will `revert`.

#### JSONpath Key

`parseJson` uses a syntax called JSONpath to form arbitrary keys for arbitrary JSON files. The same syntax (or rather a dialect) is used by the tool [`jq`](https://stedolan.github.io/jq/).

To read more about the syntax, you can visit the [README](https://crates.io/crates/jsonpath-rust) of the rust library that we use under the hood to implement the feature. That way you can be certain that you are using the correct dialect of jsonPath.

#### JSON Encoding Rules

We use the terms `number`, `string`, `object`, `array`, `boolean`, `null` as they are defined in the [JSON spec](https://www.w3schools.com/js/js_json_datatypes.asp).

**Encoding Rules**

* `null` is encoded as `bytes32(0)`
* Numbers >= 0 are encoded as `uint256`
* Negative numbers are encoded as `int256`
* Floating point numbers with decimal digitals are not allowed.
* Floating point numbers using the scientific notation can be `uint256` or `int256` depending on the value.
* A string that can be decoded into a type of `H160` and starts with `0x` is encoded as an `address`. In other words, if it can be decoded into an address, it's probably an address
* A string that starts with `0x` is encoded as `bytes32` if it has a length of `66` or else to `bytes`
* A string that is neither an `address`, a `bytes32` or `bytes`, is encoded as a `string`
* An array is encoded as a dynamic array of the type of its first element
* An object (`{}`) is encoded as a `tuple`

#### Type Coercion

As described above, `parseJson` needs to deduce the type of JSON value and that has some inherent limitations. For that reason, there is a sub-family of `parseJson*` cheatcodes that coerce the type of the returned value.

For example `vm.parseJsonUint(json, key)` will coerce the value to a `uint256`. That means that it can parse all the following values and return them as a `uint256`. That includes a number as type `number`, a stringified number as a `string` and of course it's hex representation.

```json
{
  "hexUint": "0x12C980",
  "stringUint": "115792089237316195423570985008687907853269984665640564039457584007913129639935",
  "numberUint": 115792089237316195423570985008687907853269984665640564039457584007913129639935
}
```

Similarly, there are cheatcodes for all types (including `bytes` and `bytes32`) and their arrays (`vm.parseJsonUintArray`).

#### Decoding JSON objects into Solidity structs

JSON objects are encoded as tuples, and can be decoded via tuples or structs. That means that you can define a `struct` in Solidity and it will decode the entire JSON object into that `struct`.

For example:

The following JSON:

```json
{
  "a": 43,
  "b": "sigma"
}
```

will be decoded into:

```solidity
struct Json {
    uint256 a;
    string b;
}
```

As the values are returned as an abi-encoded tuple, the exact name of the attributes of the struct don't need to match the names of the keys in the JSON. The above json file could also be decoded as:

```solidity
struct Json {
    uint256 apple;
    string pineapple;
}
```

What matters is the alphabetical order. As the JSON object is an unordered data structure but the tuple is an ordered one, we had to somehow give order to the JSON. The easiest way was to order the keys by alphabetical order. That means that in order to decode the JSON object correctly, you will need to define attributes of the struct with **types** that correspond to the values of the alphabetical order of the keys of the JSON.

* The struct is interpreted serially. That means that the tuple's first item will be decoded based on the first item of the struct definition (no alphabetical order).
* The JSON will parsed alphabetically, not serially.
* Note that this parsing uses Rust's BTreeMap crate under the hood, meaning that uppercase and lowercase strings are treated differently. Uppercase characters *precede* lowercase in this lexicographical ordering, ie "Zebra" would precede "apple".

Thus, the first (in alphabetical order) value of the JSON, will be abi-encoded and then tried to be abi-decoded, based on the type of the first attribute of the `struct`.

The above JSON would not be able to be decoded with the struct below:

```solidity
struct Json {
    uint256 b;
    uint256 a;
}
```

The reason is that it would try to decode the string `"sigma"` as a uint. To be exact, it would be decoded, but it would result to a wrong number, since it would interpret the bytes incorrectly.

Another example, given the following JSON:

```json
{
  "apples": [
    {
      "sweetness": 7,
      "sourness": 3,
      "color": "Red"
    },
    {
      "sweetness": 5,
      "sourness": 5,
      "color": "Green"
    },
    {
      "sweetness": 9,
      "sourness": 1,
      "color": "Yellow"
    }
  ],
  "name": "Fresh Fruit"
}
```

And Solidity structs defined as follows:

```solidity
struct Apple {
    string color;
    uint8 sourness;
    uint8 sweetness;
}

struct FruitStall {
    Apple[] apples;
    string name;
}
```

One would decode the JSON as follows:

```solidity
string memory root = vm.projectRoot();
string memory path = string.concat(root, "/src/test/fixtures/fruitstall.json");
string memory json = vm.readFile(path);
bytes memory data = vm.parseJson(json);
FruitStall memory fruitstall = abi.decode(data, (FruitStall));

// Logs: Welcome to Fresh Fruit
console2.log("Welcome to", fruitstall.name);

for (uint256 i = 0; i < fruitstall.apples.length; i++) {
    Apple memory apple = fruitstall.apples[i];

    // Logs:
    // Color: Red, Sourness: 3, Sweetness: 7
    // Color: Green, Sourness: 5, Sweetness: 5
    // Color: Yellow, Sourness: 1, Sweetness: 9
    console2.log(
        "Color: %s, Sourness: %d, Sweetness: %d",
        apple.color,
        apple.sourness,
        apple.sweetness
    );
}
```

#### Decoding JSON Objects, a tip

If your JSON object has `hex numbers`, they will be encoded as bytes. The way to decode them as `uint` for better UX, is to define two `struct`, one intermediary with the definition of these values as `bytes` and then a final `struct` that will be consumed by the user.

1. Decode the JSON into the intermediary `struct`
2. Convert the intermediary struct to the final one, by converting the `bytes` to `uint`. We have a helper function in `forge-std` to do this
3. Give the final `struct` to the user for consumption

#### How to use StdJson

1. Import the library `import {stdJson} from "forge-std/StdJson.sol";`
2. Define its usage with `string`: `using stdJson for string;`
3. If you want to parse simple values (numbers, address, etc.) use the helper functions
4. If you want to parse entire JSON objects:
   1. Define the `struct` in Solidity. Make sure to follow the alphabetical order -- it's hard to debug
   2. Use the `parseRaw()` helper function to return abi-encoded `bytes` and then decode them to your struct

```solidity
string memory root = vm.projectRoot();
string memory path = string.concat(root, "/src/test/fixtures/broadcast.log.json");
string memory json = vm.readFile(path);
bytes memory transactionDetails = json.parseRaw(".transactions[0].tx");
RawTx1559Detail memory rawTxDetail = abi.decode(transactionDetails, (RawTx1559Detail));
```

#### Forge script artifacts

We have gone ahead and created a handful of helper struct and functions to read the artifacts from broadcasting a forge script.

Currently, we only support artifacts produced by EIP1559-compatible chains and we **don't** support yet the parsing of the entire `broadcast.json` artifact. You will need to parse for individual values such as the `transactions`, the `receipts`, etc.

To read the transactions, it's as easy as doing:

```solidity
function testReadEIP1559Transactions() public {
    string memory root = vm.projectRoot();
    string memory path = string.concat(root, "/src/test/fixtures/broadcast.log.json");
    Tx1559[] memory transactions = readTx1559s(path);
}
```

and then you can access their various fields in these structs:

```solidity
struct Tx1559 {
    string[] arguments;
    address contractAddress;
    string contractName;
    string functionSig;
    bytes32 hash;
    Tx1559Detail txDetail;
    string opcode;
}

struct Tx1559Detail {
    AccessList[] accessList;
    bytes data;
    address from;
    uint256 gas;
    uint256 nonce;
    address to;
    uint256 txType;
    uint256 value;
}
```

#### Troubleshooting

##### Cannot read file

> FAIL. Reason: The path `<file-path>` is not allowed to be accessed for read operations

If you receive this error, make sure that you enable read permissions in `foundry.toml` using the [`fs_permissions` key](/reference/cheatcodes/fs.mdx)

#### References

* Helper Library: [stdJson.sol](https://github.com/foundry-rs/forge-std/blob/master/src/StdJson.sol)
* Usage examples: [stdCheats.t.sol](https://github.com/foundry-rs/forge-std/blob/ca8d6e00ea9cb035f6856ff732203c9a3c48b966/src/test/StdCheats.t.sol#L206)
* [File Cheatcodes](/reference/cheatcodes/fs.mdx): cheatcodes for working with files


### `parseTomlKeys`

#### Signature

```solidity
// Get list of keys present in a TOML string
function parseTomlKeys(string calldata toml, string calldata key) external pure returns (string[] memory keys);
```

#### Description

Gets list of keys present in a TOML string

#### Examples

```solidity
// [key]
// a = 1
// b = 2

string memory toml = '[key]\n a = 1\n b = 2';
string[] memory keys = vm.parseTomlKeys(toml, ".key"); // ["a", "b"]
```

```solidity
// key = "something"

string memory toml = 'key = \"something\"';
string[] memory keys = vm.parseTomlKeys(toml, "$"); // ["key"]
```

```solidity
// [[root_key]]
// a = 1
// b = 2

string memory toml = '[[root_key]]\n a = 1\n b = 2';
string[] memory keys = vm.parseTomlKeys(toml, ".root_key.0"); // ["a", "b"]
```


### `parseToml`

#### Signature

```solidity
// Return the value(s) that correspond to 'key'
vm.parseToml(string memory toml, string memory key)
// Return the entire TOML file
vm.parseToml(string memory toml);
```

#### Description

These cheatcodes are used to parse TOML files in the form of strings after converting to JSON. Usually, it's coupled with `vm.readFile()` which returns an entire file in the form of a string.

You can use `stdToml` from `forge-std`, as a helper library for better UX.

The cheatcode accepts either a `key` to search for a specific value in the TOML, or no key to return the entire TOML. It returns the value as an abi-encoded `bytes` array. That means that you will have to `abi.decode()` to the appropriate type for it to function properly, else it will `revert`.

#### JSONpath Key

`parseToml` uses a syntax called JSONpath to form arbitrary keys for arbitrary JSON files. The same syntax (or rather a dialect) is used by the tool [`jq`](https://stedolan.github.io/jq/).

To read more about the syntax, you can visit the [README](https://crates.io/crates/jsonpath-rust) of the rust library that we use under the hood to implement the feature. That way you can be certain that you are using the correct dialect of jsonPath.

#### Encoding Rules

We use the terms `string`, `integer`, `float`, `boolean`, `array`, `datetime`, `inline-table` as they are defined in the [TOML spec](https://www.w3schools.io/file/toml-datatypes/).

We use the terms `number`, `string`, `object`, `array`, `boolean`, `null` as they are defined in the [JSON spec](https://www.w3schools.com/js/js_json_datatypes.asp).

**TOML Encoding Rules**

* `float` is limited to 32 bits (i.e. `+1.5`). It is recommended to use strings to prevent precision loss
* `integer` is limited to 64 bits (i.e. `9223372036854775807`). It is recommended to use strings to encode large values
* Array values cannot have mixed types (i.e. `[256, "b"]`, only `[256, 512]` or `["a", "b"]`)
* `datetime` is encoded as a `string` upon conversion
* `float` is encoded as a `number` upon conversion
* `integer` is encoded as a `number` upon conversion
* `inline-table` (or `table`) is encoded as `object` upon conversion
* `null` is encoded as a `"null"` string

**JSON Encoding Rules**

* `null` is encoded as `bytes32(0)` or `""`
* Numbers >= 0 are encoded as `uint256`
* Negative numbers are encoded as `int256`
* Floating point numbers with decimal digits are not allowed
* Floating point numbers using the scientific notation can be `uint256` or `int256` depending on the value
* A string that can be decoded into a type of `H160` and starts with `0x` is encoded as an `address`. In other words, if it can be decoded into an address, it's probably an address
* A string that starts with `0x` is encoded as `bytes32` if it has a length of `66` or else to `bytes`
* A string that is neither an `address`, a `bytes32` or `bytes`, is encoded as a `string`
* An array is encoded as a dynamic array of the type of its first element
* An object (`{}`) is encoded as a `tuple`

#### Type Coercion

As described above, `parseToml` needs to deduce the type of TOML value and that has some inherent limitations. For that reason, there is a sub-family of `parseToml*` cheatcodes that coerce the type of the returned value.

For example `vm.parseTomlUint(toml, key)` will coerce the value to a `uint256`. That means that it can parse all the following values and return them as a `uint256`. That includes a number as type `number`, a stringified number as a `string` and of course it's hex representation.

```toml
hexUint = "0x12C980"
stringUint = "115792089237316195423570985008687907853269984665640564039457584007913129639935"
numberUint = 9223372036854775807 # TOML is limited to 64-bit integers
```

Similarly, there are cheatcodes for all types (including `bytes` and `bytes32`) and their arrays (`vm.parseTomlUintArray`).

#### Decoding TOML tables into Solidity structs

TOML tables are converted to JSON objects. JSON objects are encoded as tuples, and can be decoded via tuples or structs. That means that you can define a `struct` in Solidity and it will decode the entire JSON object into that `struct`.

For example:

The following TOML:

```toml
a = 43
b = "sigma"
```

will be converted into the following JSON:

```json
{
  "a": 43,
  "b": "sigma"
}
```

will be decoded into:

```solidity
struct Json {
    uint256 a;
    string b;
}
```

As the values are returned as an abi-encoded tuple, the exact name of the attributes of the struct don't need to match the names of the keys in the JSON. The above json file could also be decoded as:

```solidity
struct Json {
    uint256 apple;
    string pineapple;
}
```

What matters is the alphabetical order. As the JSON object is an unordered data structure but the tuple is an ordered one, we had to somehow give order to the JSON. The easiest way was to order the keys by alphabetical order. That means that in order to decode the JSON object correctly, you will need to define attributes of the struct with **types** that correspond to the values of the alphabetical order of the keys of the JSON.

* The struct is interpreted serially. That means that the tuple's first item will be decoded based on the first item of the struct definition (no alphabetical order).
* The JSON will parsed alphabetically, not serially.
* Note that this parsing uses Rust's BTreeMap crate under the hood, meaning that uppercase and lowercase strings are treated differently. Uppercase characters *precede* lowercase in this lexicographical ordering, ie "Zebra" would precede "apple".

Thus, the first (in alphabetical order) value of the JSON, will be abi-encoded and then tried to be abi-decoded, based on the type of the first attribute of the `struct`.

The above TOML would not be able to be decoded with the struct below:

```solidity
struct Json {
    uint256 b;
    uint256 a;
}
```

The reason is that it would try to decode the string `"sigma"` as a uint. To be exact, it would be decoded, but it would result to a wrong number, since it would interpret the bytes incorrectly.

Another example, given the following TOML:

```toml
name = "Fresh Fruit"

[[apples]]
sweetness = 7
sourness = 3
color = "Red"

[[apples]]
sweetness = 5
sourness = 5
color = "Green"

[[apples]]
sweetness = 9
sourness = 1
color = "Yellow"
```

will be converted into the following JSON:

```json
{
  "apples": [
    {
      "sweetness": 7,
      "sourness": 3,
      "color": "Red"
    },
    {
      "sweetness": 5,
      "sourness": 5,
      "color": "Green"
    },
    {
      "sweetness": 9,
      "sourness": 1,
      "color": "Yellow"
    }
  ],
  "name": "Fresh Fruit"
}
```

And Solidity structs defined as follows:

```solidity
struct Apple {
    string color;
    uint8 sourness;
    uint8 sweetness;
}

struct FruitStall {
    Apple[] apples;
    string name;
}
```

One would decode the TOML as follows:

```solidity
string memory root = vm.projectRoot();
string memory path = string.concat(root, "/src/test/fixtures/fruitstall.toml");
string memory toml = vm.readFile(path);
bytes memory data = vm.parseToml(toml);
FruitStall memory fruitstall = abi.decode(data, (FruitStall));

// Logs: Welcome to Fresh Fruit
console2.log("Welcome to", fruitstall.name);

for (uint256 i = 0; i < fruitstall.apples.length; i++) {
    Apple memory apple = fruitstall.apples[i];

    // Logs:
    // Color: Red, Sourness: 3, Sweetness: 7
    // Color: Green, Sourness: 5, Sweetness: 5
    // Color: Yellow, Sourness: 1, Sweetness: 9
    console2.log(
        "Color: %s, Sourness: %d, Sweetness: %d",
        apple.color,
        apple.sourness,
        apple.sweetness
    );
}
```

#### How to use StdToml

1. Import the library `import {stdToml} from "forge-std/StdToml.sol";`
2. Define its usage with `string`: `using stdToml for string;`
3. If you want to parse simple values (numbers, address, etc.) use the helper functions
4. If you want to parse entire TOML tables:
   1. Define the `struct` in Solidity. Make sure to follow the alphabetical order -- it's hard to debug
   2. Use the `parseRaw()` helper function to return abi-encoded `bytes` and then decode them to your struct

```solidity
string memory root = vm.projectRoot();
string memory path = string.concat(root, "/src/test/fixtures/config.toml");
string memory toml = vm.readFile(path);
bytes memory data = toml.parseRaw(".");
Config memory config = abi.decode(data, (Config))
```

#### Troubleshooting

##### Cannot read file

> FAIL. Reason: The path `<file-path>` is not allowed to be accessed for read operations

If you receive this error, make sure that you enable read permissions in `foundry.toml` using the [`fs_permissions` key](/reference/cheatcodes/fs.mdx)

#### References

* Helper Library: [stdToml.sol](https://github.com/foundry-rs/forge-std/blob/master/src/StdToml.sol)
* [File Cheatcodes](/reference/cheatcodes/fs.mdx): cheatcodes for working with files


### `parseUint`

#### Signature

```solidity
function parseUint(string calldata stringifiedValue) external pure returns (uint256 parsedValue);
```

#### Description

Parses the value of `string` into `uint256`

#### Examples

```solidity
string memory uintAsString = "12345";
uint256 stringToUint = vm.parseUint(uintAsString); // 12345
```


### `pauseGasMetering`

#### Signature

```solidity
function pauseGasMetering() external;
```

#### Description

Pauses gas metering (i.e. `gasleft()` does not decrease as operations are executed).

This can be useful for getting a better sense of gas costs, by turning off gas metering for unnecessary code, as well as long-running scripts that would otherwise run out of gas.

> ℹ️ **Note**
>
> `pauseGasMetering` *turns off DoS protections* that come from metering gas usage.
>
> Exposing a service that assumes a particular instance of the EVM will complete due to gas usage no longer is true, and a timeout should be enabled in that case.


### `prank`

#### Signature

```solidity
function prank(address msgSender) external;
```

```solidity
function prank(address msgSender, bool delegateCall) external;
```

```solidity
function prank(address msgSender, address txOrigin) external;
```

```solidity
function prank(address msgSender, address txOrigin, bool delegateCall) external;
```

#### Description

* `prank(address msgSender)`: sets `msg.sender` to the specified address **for the next call**. "The next call" includes static calls as well, but not delegate calls or calls to the cheat code address.
* `prank(address msgSender, address txOrigin)`: sets `msg.sender` and the `tx.origin` addresses **for the next call**.
* `prank(address msgSender, bool delegateCall)`: if `delegateCall` value is `true` then sets `msg.sender` to the specified address **for the next delegate call**.
* `prank(address msgSender, address txOrigin, bool delegateCall)`: if `delegateCall` value is `true` then sets `msg.sender` and the `tx.origin` addresses **for the next delegate call**.

> ℹ️ **Note**
>
> The delegate calls cannot be pranked from an EOA.

#### Examples

```solidity
/// function withdraw() public {
///     require(msg.sender == owner);

vm.prank(owner);
myContract.withdraw(); // [PASS]
```

#### SEE ALSO

Forge Standard Library

[`hoax`](/reference/forge-std/hoax.mdx)


### `prevrandao`

#### Signature

```solidity
function prevrandao(bytes32) external;
```

#### Description

Sets `block.prevrandao`.

If used with an EVM version previous to the Paris hard fork, it will revert. In that case, use [`vm.difficulty`][prevrandao] instead.

#### Examples

```solidity
vm.prevrandao(bytes32(uint256(42)));
emit log_uint(block.prevrandao); // 42
```

[prevrandao]: ./difficulty.md


### `projectRoot`

#### Signature

```solidity
function projectRoot() external returns (string memory);
```

#### Description

Returns the root directory of the current Foundry project.


### `prompt`

#### Signature

```solidity
function prompt(string calldata promptText) external returns (string memory input);
function promptSecret(string calldata promptText) external returns (string memory input);
function promptSecretUint(string calldata promptText) external returns (uint256);
```

#### Description

Display an interactive prompt to the user for inserting arbitrary data.

`vm.prompt` displays an interactive input, while `vm.promptSecret` & `vm.promptSecretUint` display a
hidden input, used for passwords and other secret information that should not
leak to the terminal.

> ℹ️ **Note**
>
> This cheatcode is meant to be used in scripts ― not tests. It is also advised to
> follow the best practices below for testing scripts that use `vm.prompt` and
> handling timeouts, since scripts might otherwise hang or revert. This cheatcode
> reverts when running in a non-interactive shell.

#### Configuration

In order to prevent unwanted hangups, `vm.prompt` has a timeout configuration.

In your `foundry.toml`:

```toml
prompt_timeout = 120
```

Default value is `120` and values are in seconds.

#### Best practices

##### Testing scripts that use `vm.prompt`

When testing scripts containing `vm.prompt` it is recommended to use the
following pattern:

```solidity
contract Script {
    function run() public {
        uint256 myUint = vm.parseUint(vm.prompt("enter uint"));
        run(myUint);
    }

    function run(uint256 myUint) public {
        // actual logic
    }
}
```

That way, we are keeping the UX gain (don't have to provide `--sig` argument
when running the script), but tests can set any value to `myUint` and not just
a hardcoded default.

##### Handling timeouts

When a user fails to provide an input before the timeout expires, the
`vm.prompt` cheatcode reverts. If you'd like, timeouts can be handled by using
`try/catch`:

```solidity
string memory input;

try vm.prompt("Username") returns (string memory res) {
    input = res;
}
catch (bytes memory) {
    input = "Anonymous";
}
```

#### Examples

##### Choose RPC endpoint

Provide an option to choose the RPC/chain to run on.

In your `foundry.toml` file:

```toml
[rpc_endpoints]
mainnet = "https://eth.llamarpc.com"
polygon = "https://polygon.llamarpc.com"
```

In your script:

```solidity
string memory rpcEndpoint = vm.prompt("RPC endpoint");
vm.createSelectFork(rpcEndpoint);
```

##### Parse user input into native types

We can use the string parsing cheatcodes to parse the responses from users:

```solidity
uint privateKey = vm.promptSecretUint("Private key");
address to = vm.parseAddress(vm.prompt("Send to"));
uint amount = vm.parseUint(vm.prompt("Amount (wei)"));
vm.broadcast(privateKey);
payable(to).transfer(amount);
```


### `readCallers`

#### Signature

```solidity
enum CallerMode {
    None,
    Broadcast,
    RecurrentBroadcast,
    Prank,
    RecurrentPrank
}

function readCallers()
external
returns (CallerMode callerMode, address msgSender, address txOrigin);
```

#### Description

Reads the current `CallerMode`, `msg.sender`, and `tx.origin`.

The `CallerMode` enum indicates if there is an active caller modification and the type.

* If there is an active prank:

  * `callerMode` will be equal to:
    * `CallerMode.Prank` if the prank has been set with [`prank`](/reference/cheatcodes/prank.mdx).
    * `CallerMode.RecurrentPrank` if the prank has been set with [`startPrank`](/reference/cheatcodes/start-prank.mdx).

* If there is an active broadcast:

  * `callerMode` will be equal to:
    * `CallerMode.Broadcast` if the broadcast has been set with [`broadcast`](/reference/cheatcodes/broadcast.mdx).
    * `CallerMode.RecurrentBroadcast` if the broadcast has been set with [`startBroadcast`](/reference/cheatcodes/start-broadcast.mdx).

* If no caller modification is active:
  * `callerMode` will be equal to `CallerMode.None`.

#### Examples

```solidity
CallerMode callerMode;
address msgSender;
address txOrigin;

// Example 1
(callerMode, msgSender, txOrigin) = vm.readCallers();
assertEq(callerMode, CallerMode.None);
assertEq(msgSender, defaultSenderAddress);
assertEq(txOrigin, defaultOriginAddress);

// Example 2
vm.prank(senderPrankAddress);
(callerMode, msgSender, txOrigin) = vm.readCallers();
assertEq(callerMode, CallerMode.Prank);
assertEq(msgSender, senderPrankAddress);
assertEq(txOrigin, defaultOriginAddress);

// Example 3
vm.prank(senderPrankAddress, originPrankAddress);
(callerMode, msgSender, txOrigin) = vm.readCallers();
assertEq(callerMode, CallerMode.Prank);
assertEq(msgSender, senderPrankAddress);
assertEq(txOrigin, originPrankAddress);

// Example 4
vm.broadcast(broadcastAddress);
(callerMode, msgSender, txOrigin) = vm.readCallers();
assertEq(callerMode, CallerMode.Broadcast);
assertEq(msgSender, broadcastAddress);
assertEq(txOrigin, broadcastAddress);
```

#### SEE ALSO

* [prank](/reference/cheatcodes/prank.mdx)
* [startPrank](/reference/cheatcodes/start-prank.mdx)
* [broadcast](/reference/cheatcodes/broadcast.mdx)
* [startBroadcast](/reference/cheatcodes/start-broadcast.mdx)


### `recordLogs`

#### Signature

```solidity
function recordLogs() external;
```

#### Description

Tells the VM to start recording all the emitted events. To access them, use [`getRecordedLogs`](/reference/cheatcodes/get-recorded-logs.mdx).

#### Examples

```solidity
/// event LogCompleted(
///   uint256 indexed topic1,
///   bytes data
/// );

vm.recordLogs();

emit LogCompleted(10, "operation completed");

Vm.Log[] memory entries = vm.getRecordedLogs();

assertEq(entries.length, 1);
assertEq(entries[0].topics[0], keccak256("LogCompleted(uint256,bytes)"));
assertEq(entries[0].topics[1], bytes32(uint256(10)));
assertEq(abi.decode(entries[0].data, (string)), "operation completed");
```


### `record`

#### Signature

```solidity
function record() external;
```

#### Description

Tell the VM to start recording all storage reads and writes. To access the reads and writes, use [`accesses`](/reference/cheatcodes/accesses.mdx).

> ℹ️ **Note**
>
> Every write also counts as an additional read.

#### Examples

```solidity
/// contract NumsContract {
///     uint256 public num1 = 100; // slot 0
///     uint256 public num2 = 200; // slot 1
/// }

vm.record();
numsContract.num2();
(bytes32[] memory reads, bytes32[] memory writes) = vm.accesses(
  address(numsContract)
);
emit log_uint(uint256(reads[0])); // 1
```

#### SEE ALSO

Forge Standard Library

[Std Storage](/reference/forge-std/startHoax.mdx)


### `rememberKey`

#### Signature

```solidity
function rememberKey(uint256 privateKey) external returns (address);
```

#### Description

Stores a private key in forge's local wallet and returns the corresponding address which can later be used for [broadcasting](/reference/cheatcodes/broadcast.mdx).

#### Examples

Derive the private key from the test mnemonic at path `m/44'/60'/0'/0/0`, remember it in forge's wallet and use it to start broadcasting transactions:

```solidity
string memory mnemonic = "test test test test test test test test test test test junk";
uint256 privateKey = vm.deriveKey(mnemonic, 0);
address deployer = vm.rememberKey(privateKey);

vm.startBroadcast(deployer);
...
vm.stopBroadcast();
```

Load a private key from the `PRIVATE_KEY` environment variable and use it to start broadcasting transactions:

```solidity
address deployer = vm.rememberKey(vm.envUint("PRIVATE_KEY"));

vm.startBroadcast(deployer);
...
vm.stopBroadcast();
```

#### SEE ALSO

* [deriveKey](/reference/cheatcodes/derive-key.mdx)

Forge Standard Library:

* [deriveRememberKey](/reference/forge-std/derive-remember-key.mdx)


### `resetGasMetering`

#### Signature

```solidity
function resetGasMetering() external;
```

#### Description

Resets gas metering to the gas limit of current execution frame (i.e. `gasleft()` will be restored to initial value).


### `resumeGasMetering`

#### Signature

```solidity
function resumeGasMetering() external;
```

#### Description

Resumes gas metering (i.e. `gasleft()` will decrease as operations are executed). Gas usage will resume at the same amount at which it was paused.


### `revokePersistent`

#### Signature

```solidity
function revokePersistent(address) external;
function revokePersistent(address[] calldata) external;
```

#### Description

The counterpart of [`makePersistent`](/reference/cheatcodes/make-persistent.mdx), that makes the given contract not persistent across fork swaps

#### Examples

Revoke a persistent status of a contract

```solidity
contract SimpleStorageContract {
    string public value;

    function set(uint256 _value) public {
        value = _value;
    }
}

function testRevokePersistent() public {
    // select a specific fork
    cheats.selectFork(mainnetFork);

    // create a new contract that's stored in the `mainnetFork` storage
    SimpleStorageContract simple = new SimpleStorageContract();

    // `simple` is not marked as persistent
    assert(!cheats.isPersistent(address(simple)));

    // make it persistent
    cheats.makePersistent(address(simple));

    // ensure it is persistent
    assert(cheats.isPersistent(address(simple)));

    // revoke it
    cheats.revokePersistent(address(simple));

    // contract no longer persistent
    assert(!cheats.isPersistent(address(simple)));
}
```

#### SEE ALSO

* [isPersistent](/reference/cheatcodes/is-persistent.mdx)
* [revokePersistent](/reference/cheatcodes/revoke-persistent.mdx)
* [createFork](/reference/cheatcodes/create-fork.mdx)
* [selectFork](/reference/cheatcodes/select-fork.mdx)


### `rollFork`

#### Signature

```solidity
// roll the _active_ fork to the given block
function rollFork(uint256 blockNumber) external;
```

```solidity
// roll the _active_ fork to the block in which the transaction was mined it and replays all previously executed transactions
function rollFork(bytes32 transaction) external;
```

```solidity
// Same as `rollFork(uint256 blockNumber)` but uses the fork corresponding to the `forkId`
function rollFork(uint256 forkId, uint256 blockNumber) external;
```

```solidity
// Same as `rollFork(bytes32 transaction)` but uses the fork corresponding to the `forkId`
function rollFork(uint256 forkId, bytes32 transaction) external;
```

#### Description

Sets `block.number`. If a fork identifier is passed as an argument, it will update that fork, otherwise it will update the currently active fork.

If a transaction hash is provided, it will roll the fork to the block the transaction was mined in and replays all previously executed transactions.

#### Examples

Set `block.number` for the currently active fork:

```solidity
uint256 forkId = vm.createFork(MAINNET_RPC_URL);
vm.selectFork(forkId);

assertEq(block.number, 15_171_037); // as of time of writing, 2022-07-19 04:55:27 UTC

vm.rollFork(15_171_057);

assertEq(block.number, 15_171_057);
```

Set `block.number` for the fork identified by the passed `forkId` argument:

```solidity
uint256 optimismForkId = vm.createFork(OPTIMISM_RPC_URL);

vm.rollFork(optimismForkId, 1_337_000);

vm.selectFork(optimismForkId);

assertEq(block.number, 1_337_000);
```

#### SEE ALSO

* [roll](/reference/cheatcodes/roll.mdx)
* [createFork](/reference/cheatcodes/create-fork.mdx)
* [selectFork](/reference/cheatcodes/select-fork.mdx)
* [activeFork](/reference/cheatcodes/active-fork.mdx)


### `roll`

#### Signature

```solidity
function roll(uint256) external;
```

#### Description

Sets `block.number`.

#### Examples

```solidity
vm.roll(100);
emit log_uint(block.number); // 100
```

#### SEE ALSO

* [rollFork](/reference/cheatcodes/roll-fork.mdx)


### RPC related cheatcodes

#### Signature

```solidity
// Returns the URL for a configured alias
function rpcUrl(string calldata alias) external returns (string memory);
// Returns all configured (alias, URL) pairs
function rpcUrls() external returns(string[2][] memory);
/// Performs an Ethereum JSON-RPC request to the current fork URL.
function rpc(string calldata method, string calldata params) external returns (bytes memory data);
```

#### Description

Provides cheatcodes to access all RPC endpoints configured in the `rpc_endpoints` object of the `foundry.toml`, and the ability to make `rpc` calls using the configured fork URL.

#### Examples

The following `rpc_endpoints` in `foundry.toml` registers two RPC aliases:

* `optimism` references the URL directly
* `mainnet` references the `RPC_MAINNET` environment value that is expected to contain the actual URL

*Env variables need to be wrapped in `${}`*

```toml
# --snip--
[rpc_endpoints]
optimism = "https://optimism.alchemyapi.io/v2/..."
mainnet = "${RPC_MAINNET}"
```

```solidity
string memory url = vm.rpcUrl("optimism");
assertEq(url, "https://optimism.alchemyapi.io/v2/...");
```

If a ENV var is missing, `rpcUrl()` will revert:

```solidity
vm.expectRevert("Failed to resolve env var `${RPC_MAINNET}` in `RPC_MAINNET`: environment variable not found");
string memory url = vm.rpcUrl("mainnet");
```

Retrieve all available alias -> URL pairs

```solidity
string[2][] memory allUrls = vm.rpcUrls();
assertEq(allUrls.length, 2);

string[2] memory val = allUrls[0];
assertEq(val[0], "optimism");

string[2] memory env = allUrls[1];
assertEq(env[0], "mainnet");
```

Make an RPC call to `eth_getBalance`

```solidity
// balance at block <https://etherscan.io/block/18332681>
bytes memory result = vm.rpc("eth_getBalance", "[\"0x8D97689C9818892B700e27F316cc3E41e17fBeb9\", \"0x117BC09\"]")
assertEq(hex"10b7c11bcb51e6", result);
```

#### SEE ALSO

Forge Config

[Config Reference](/config/reference/testing#rpc_endpoints)


### `selectFork`

#### Signature

```solidity
function selectFork(uint256 forkId) external;
```

#### Description

Takes a fork identifier created by `createFork` and sets the corresponding forked state as active.

#### Examples

Select a previously created fork:

```solidity
uint256 forkId = vm.createFork(MAINNET_RPC_URL);

vm.selectFork(forkId);

assertEq(vm.activeFork(), forkId);
```

#### SEE ALSO

* [createFork](/reference/cheatcodes/create-fork.mdx)
* [activeFork](/reference/cheatcodes/active-fork.mdx)


### `serializeJson`

#### Signature

```solidity
function serializeJson(string calldata objectKey, string calldata value)
    external
    returns (string memory json);

function serializeBool(string calldata objectKey, string calldata valueKey, bool value)
    external
    returns (string memory json);

function serializeUint(string calldata objectKey, string calldata valueKey, uint256 value)
    external
    returns (string memory json);

function serializeInt(string calldata objectKey, string calldata valueKey, int256 value)
    external
    returns (string memory json);

function serializeAddress(string calldata objectKey, string calldata valueKey, address value)
    external
    returns (string memory json);

function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32 value)
    external
    returns (string memory json);

function serializeString(string calldata objectKey, string calldata valueKey, string calldata value)
    external
    returns (string memory json);

function serializeBytes(string calldata objectKey, string calldata valueKey, bytes calldata value)
    external
    returns (string memory json);

function serializeBool(string calldata objectKey, string calldata valueKey, bool[] calldata values)
    external
    returns (string memory json);

function serializeUint(string calldata objectKey, string calldata valueKey, uint256[] calldata values)
    external
    returns (string memory json);

function serializeInt(string calldata objectKey, string calldata valueKey, int256[] calldata values)
    external
    returns (string memory json);

function serializeAddress(string calldata objectKey, string calldata valueKey, address[] calldata values)
    external
    returns (string memory json);

function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32[] calldata values)
    external
    returns (string memory json);

function serializeString(string calldata objectKey, string calldata valueKey, string[] calldata values)
    external
    returns (string memory json);

function serializeBytes(string calldata objectKey, string calldata valueKey, bytes[] calldata values)
    external
    returns (string memory json);
```

#### Description

Serializes values as a stringified JSON object.

#### How it works

The idea is that the user serializes the values of the JSON file and finally writes that object to a file. The user needs to pass:

* A key for the *object* to which the value should be serialized to. This enables the user to serialize multiple objects in parallel
* A key for the *value* which will be its key in the JSON file
* The value to be serialized

An exception to this is the `serializeJson` function, which only receives an `objectKey` and a json string `value`. This allows the user to serialize an existing json object and directly assign it to the provided `objectKey`. If the `objectKey` is already in use, the whole serialized json is overwritten.

The keys do not need to be of some specific form. They are of type `string` to enable for intuitive human interpretation. Semantically, they are not important other than to be used as keys.

The cheatcodes return the JSON object that is being serialized **up to that point**. That way the user can serialize inner JSON objects and then serialize them in bigger JSON objects, enabling the user to create arbitrary JSON objects.

Finally, the user writes the JSON object to a JSON file by using [writeJson](/reference/cheatcodes/write-json.mdx).
Alternatively, the user can write the JSON object to TOML file by using [writeToml](/reference/cheatcodes/write-toml.mdx).

**Remember:** The file path needs to be in the allowed paths. Read more in [File cheatcodes](/reference/cheatcodes/fs.mdx).

#### Example

Let's assume we want to write the following JSON to a file:

`{ "boolean": true, "number": 342, "object": { "title": "finally json serialization" } }`

```solidity
string memory obj1 = "some key";
vm.serializeBool(obj1, "boolean", true);
vm.serializeUint(obj1, "number", uint256(342));

string memory obj2 = "some other key";
string memory output = vm.serializeString(obj2, "title", "finally json serialization");

// IMPORTANT: This works because `serializeString` first tries to interpret `output` as
//   a stringified JSON object. If the parsing fails, then it treats it as a normal
//   string instead.
//   For instance, an `output` equal to '{ "ok": "asd" }' will produce an object, but
//   an output equal to '"ok": "asd" }' will just produce a normal string.
string memory finalJson = vm.serializeString(obj1, "object", output);

vm.writeJson(finalJson, "./output/example.json");
```

#### SEE ALSO

* [writeJson](/reference/cheatcodes/write-json.mdx)


### `setArbitraryStorage`

#### Signature

```solidity
function setArbitraryStorage(address target) external;
```

#### Description

Utility cheatcode to make the storage of the given address fully symbolic.
Any subsequent `SLOAD` to target storage reads an arbitrary value which is memorized and returned if the same slot is loaded again.
If the storage slot is explicitly written (before or after first load), then the written value is returned.

#### Examples

For a contract with following storage layout:

```solidity
contract Counter {
    address[] public owners;

    function getOwner(uint256 pos) public view returns (address) {
        return owners[pos];
    }

    function setOwner(uint256 pos, address owner) public {
        owners[pos] = owner;
    }
}
```

using `setArbitraryStorage` cheatcode ensures that arbitrary values are returned:

```solidity
contract ArbitraryStorageTest is Test {
    function testArbitraryStorage() public {
        Counter counter = new Counter();
        vm.setArbitraryStorage(address(counter));
        // Next call would fail with array out of bounds without arbitrary storage
        address owner = counter.getOwner(55);
        // Subsequent calls to same slot returns same value
        assertEq(counter.getOwner(55), owner);
        // The new value is returned if explicitly written
        counter.setOwner(55, address(111));
        assertEq(counter.getOwner(55), address(111));
    }
}
```


### `setEnv`

#### Signature

```solidity
function setEnv(string calldata key, string calldata value) external;
```

#### Description

Set an environment variable `key=value`.

> ℹ️ **Note**
>
> Environment variables set by a process are only accessible by itself and its child
> processes. Thus, calling `setEnv` will only modify environment variables of the currently running
> `forge` process, and won't affect the shell (`forge`'s parent process), i.e., the they won't persist
> after the `forge` process exit.

#### Tips

* The environment variable key can't be empty.
* The environment variable key can't contain the equal sign `=` or the NUL character `\0`.
* The environment variable value can't contain the NUL character `\0`.

#### Examples

```solidity
string memory key = "hello";
string memory val = "world";
cheats.setEnv(key, val);
```


### `setNonce`

#### Signature

```solidity
function setNonce(address account, uint64 nonce) external;
```

#### Description

Sets the nonce of the given account.

The new nonce must be higher than the current nonce of the account.

#### Examples

```solidity
vm.setNonce(address(100), 1234);
```


### `signDelegation`

#### Signature

```solidity
/// Holds a signed EIP-7702 authorization for an authority account to delegate to an implementation.
struct SignedDelegation {
    // The y-parity of the recovered secp256k1 signature (0 or 1).
    uint8 v;
    // First 32 bytes of the signature.
    bytes32 r;
    // Second 32 bytes of the signature.
    bytes32 s;
    // The current nonce of the authority account at signing time.
    // Used to ensure signature can't be replayed after account nonce changes.
    uint64 nonce;
    // Address of the contract implementation that will be delegated to.
    // Gets encoded into delegation code: 0xef0100 || implementation.
    address implementation;
}
```

```solidity
/// Sign an EIP-7702 authorization for delegation.
function signDelegation(address implementation, uint256 privateKey)
    external
    returns (SignedDelegation memory signedDelegation);
```

```solidity
/// Designate the next call as an EIP-7702 transaction.
function attachDelegation(SignedDelegation calldata signedDelegation) external;
```

```solidity
/// Sign an EIP-7702 authorization and designate the next call as an EIP-7702 transaction.
function signAndAttachDelegation(address implementation, uint256 privateKey)
    external
    returns (SignedDelegation memory signedDelegation);
```

#### Description

Signs an [EIP-7702](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-7702.md) authorization for delegation.

To use the cheatcodes you need to set your `evm_version` to at least the `prague` hardfork in your `foundry.toml`.

```toml
evm_version = "prague"
```

EIP-7702 sets the account code of an Externally Owned Account (EOA) through a delegation transaction, enabling EOAs to behave like smart contracts.

The `signDelegation` cheatcode generates a signed authorization for an implementation contract to be delegated to, ensuring that only authorized implementations can execute transactions on behalf of the authority account. The signature includes the authority account's nonce to prevent replay attacks.

The `attachDelegation` cheatcode designates the next transaction as an EIP-7702 delegation by attaching the signed authorization.

The `signAndAttachDelegation` function combines both signing and attaching into a single step, simplifying the delegation process.

#### Examples

Let's first define a `SimpleDelegateContract` and a dummy `ERC20` to be used:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract SimpleDelegateContract {
    event Executed(address indexed to, uint256 value, bytes data);

    struct Call {
        bytes data;
        address to;
        uint256 value;
    }

    function execute(Call[] memory calls) external payable {
        for (uint256 i = 0; i < calls.length; i++) {
            Call memory call = calls[i];
            (bool success, bytes memory result) = call.to.call{value: call.value}(call.data);
            require(success, string(result));
            emit Executed(call.to, call.value, call.data);
        }
    }

    receive() external payable {}
}

contract ERC20 {
    address public minter;
    mapping(address => uint256) private _balances;

    constructor(address _minter) {
        minter = _minter;
    }

    function mint(uint256 amount, address to) public {
        _mint(to, amount);
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function _mint(address account, uint256 amount) internal {
        require(msg.sender == minter, "ERC20: msg.sender is not minter");
        require(account != address(0), "ERC20: mint to the zero address");
        unchecked {
            _balances[account] += amount;
        }
    }
}
```

Next, to use the cheatcodes with `forge test`:

```solidity
contract SignDelegationTest is Test {
    // Alice's address and private key (EOA with no initial contract code).
    address payable ALICE_ADDRESS = payable(0x70997970C51812dc3A010C7d01b50e0d17dc79C8);
    uint256 constant ALICE_PK = 0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d;

    // Bob's address and private key (Bob will execute transactions on Alice's behalf).
    address constant BOB_ADDRESS = 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC;
    uint256 constant BOB_PK = 0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a;

    // The contract that Alice will delegate execution to.
    SimpleDelegateContract public implementation;

    // ERC-20 token contract for minting test tokens.
    ERC20 public token;

    function setUp() public {
        // Deploy the delegation contract (Alice will delegate calls to this contract).
        implementation = new SimpleDelegateContract();

        // Deploy an ERC-20 token contract where Alice is the minter.
        token = new ERC20(ALICE_ADDRESS);
    }

    function testSignDelegationAndThenAttachDelegation() public {
        // Construct a single transaction call: Mint 100 tokens to Bob.
        SimpleDelegateContract.Call[] memory calls = new SimpleDelegateContract.Call[](1);
        bytes memory data = abi.encodeCall(ERC20.mint, (100, BOB_ADDRESS));
        calls[0] = SimpleDelegateContract.Call({to: address(token), data: data, value: 0});

        // Alice signs a delegation allowing `implementation` to execute transactions on her behalf.
        Vm.SignedDelegation memory signedDelegation = vm.signDelegation(address(implementation), ALICE_PK);

        // Bob attaches the signed delegation from Alice and broadcasts it.
        vm.broadcast(BOB_PK);
        vm.attachDelegation(signedDelegation);

        // Verify that Alice's account now behaves as a smart contract.
        bytes memory code = address(ALICE_ADDRESS).code;
        require(code.length > 0, "no code written to Alice");

        // As Bob, execute the transaction via Alice's assigned contract.
        SimpleDelegateContract(ALICE_ADDRESS).execute(calls);

        // Verify Bob successfully received 100 tokens.
        assertEq(token.balanceOf(BOB_ADDRESS), 100);
    }

    function testSignAndAttachDelegation() public {
        // Construct a single transaction call: Mint 100 tokens to Bob.
        SimpleDelegateContract.Call[] memory calls = new SimpleDelegateContract.Call[](1);
        bytes memory data = abi.encodeCall(ERC20.mint, (100, BOB_ADDRESS));
        calls[0] = SimpleDelegateContract.Call({to: address(token), data: data, value: 0});

        // Alice signs and attaches the delegation in one step (eliminating the need for separate signing).
        vm.signAndAttachDelegation(address(implementation), ALICE_PK);

        // Verify that Alice's account now behaves as a smart contract.
        bytes memory code = address(ALICE_ADDRESS).code;
        require(code.length > 0, "no code written to Alice");

        // As Bob, execute the transaction via Alice's assigned contract.
        vm.broadcast(BOB_PK);
        SimpleDelegateContract(ALICE_ADDRESS).execute(calls);

        // Verify Bob successfully received 100 tokens.
        vm.assertEq(token.balanceOf(BOB_ADDRESS), 100);
    }
}
```

Or alternatively, let's use the cheatcodes in `forge script` against an `EIP-7702` compatible Anvil instance:

```sh
anvil --hardfork prague
```

Next, to use the cheatcodes in `forge script`:

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract SignDelegationScript is Script {
    // Alice's address and private key (EOA with no initial contract code).
    address payable ALICE_ADDRESS = payable(0x70997970C51812dc3A010C7d01b50e0d17dc79C8);
    uint256 constant ALICE_PK = 0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d;

    // Bob's address and private key (Bob will execute transactions on Alice's behalf).
    address constant BOB_ADDRESS = 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC;
    uint256 constant BOB_PK = 0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a;

    // Deployer's address and private key (used to deploy contracts).
    address private constant DEPLOYER_ADDRESS = 0xa0Ee7A142d267C1f36714E4a8F75612F20a79720;
    uint256 private constant DEPLOYER_PK = 0x2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6;

    // The contract that Alice will delegate execution to.
    SimpleDelegateContract public implementation;

    // ERC-20 token contract for minting test tokens.
    ERC20 public token;

    function run() external {
        // Step 1: Deploy delegation and ERC-20 contracts using the Deployer's key.
        vm.broadcast(DEPLOYER_PK);
        implementation = new SimpleDelegateContract();
        token = new ERC20(ALICE_ADDRESS);

        // Construct a single transaction call: Mint 100 tokens to Bob.
        SimpleDelegateContract.Call[] memory calls = new SimpleDelegateContract.Call[](1);
        bytes memory data = abi.encodeCall(ERC20.mint, (100, BOB_ADDRESS));
        calls[0] = SimpleDelegateContract.Call({to: address(token), data: data, value: 0});

        // Alice signs a delegation allowing `implementation` to execute transactions on her behalf.
        Vm.SignedDelegation memory signedDelegation = vm.signDelegation(address(implementation), ALICE_PK);

        // Bob attaches the signed delegation from Alice and broadcasts it.
        vm.broadcast(BOB_PK);
        vm.attachDelegation(signedDelegation);

        // As Bob, execute the transaction via Alice's assigned contract.
        SimpleDelegateContract(ALICE_ADDRESS).execute(calls);

        // Verify balance
        vm.assertEq(token.balanceOf(BOB_ADDRESS), 100);
    }
}
```

To run the script:

```sh
forge script script/SignDelegation.s.sol --rpc-url http://localhost:8545 --broadcast
```


### `sign`

#### Signature

```solidity
function sign(uint256 privateKey, bytes32 digest) external returns (uint8 v, bytes32 r, bytes32 s);
```

```solidity
function sign(Wallet memory wallet, bytes32 digest) external returns (uint8 v, bytes32 r, bytes32 s);
```

#### Description

Signs a digest `digest` with private key `privateKey` or [`Wallet`](/reference/cheatcodes/create-wallet), returning `(v, r, s)`.

This is useful for testing functions that take signed data and perform an `ecrecover` to verify the signer.

#### Examples

```solidity
(address alice, uint256 alicePk) = makeAddrAndKey("alice");
emit log_address(alice);
bytes32 hash = keccak256("Signed by Alice");
(uint8 v, bytes32 r, bytes32 s) = vm.sign(alicePk, hash);
address signer = ecrecover(hash, v, r, s);
assertEq(alice, signer); // [PASS]
```

This is useful for testing functions that require a signature:

```solidity
// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.17;

import { ECDSA } from "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";

contract SigningExample is Ownable {
    using ECDSA for bytes32;

    address public systemAddress;

    function setSystemAddress(address _address) external onlyOwner {
        systemAddress = _address;
    }

    function purchase(uint256 _amount, string calldata _nonce, bytes calldata _signature) external payable {
        require(isValidSignature(
            systemAddress,
            keccak256(abi.encodePacked(msg.sender, _amount, _nonce)),
            _signature
            ), "Invalid Signature"
        );

        // mint tokens
    }

    function isValidSignature(address _systemAddress, bytes32 hash, bytes memory signature) internal view returns (bool) {
        require(_systemAddress != address(0), "Missing System Address");

        bytes32 signedHash = hash.toEthSignedMessageHash();
        return signedHash.recover(signature) == _systemAddress;
    }

}

contract SigningExampleTest is Test {
    using ECDSA for bytes32;

    SigningExample public signingExample;

    uint256 internal userPrivateKey;
    uint256 internal signerPrivateKey;

    function setUp() public {
        signingExample = new SigningExample();

        userPrivateKey = 0xa11ce;
        signerPrivateKey = 0xabc123;

        address signer = vm.addr(signerPrivateKey);
        signingExample.setSystemAddress(signer);
    }

    function testPurchase() public {
        address user = vm.addr(userPrivateKey);
        address signer = vm.addr(signerPrivateKey);

        uint256 amount = 2;
        string memory nonce = 'QSfd8gQE4WYzO29';

        vm.startPrank(signer);
        bytes32 digest = keccak256(abi.encodePacked(user, amount, nonce)).toEthSignedMessageHash();
        (uint8 v, bytes32 r, bytes32 s) = vm.sign(signerPrivateKey, digest);
        bytes memory signature = abi.encodePacked(r, s, v); // note the order here is different from line above.
        vm.stopPrank();

        vm.startPrank(user);
        // Give the user some ETH, just for good measure
        vm.deal(user, 1 ether);

        signingExample.purchase(
            amount,
            nonce,
            signature
        );
        vm.stopPrank();
    }
}
```

##### `Wallet`

The Wallet overload is a simple wrapper that uses the wallet's private key to sign the digest

```solidity
Wallet memory alice = vm.createWallet("alice");
bytes32 hash = keccak256("Signed by Alice");
(uint8 v, bytes32 r, bytes32 s) = vm.sign(alice, hash);
address signer = ecrecover(hash, v, r, s);
assertEq(alice.addr, signer); // [PASS]
```


### Signing

* [`sign`](/reference/cheatcodes/sign.mdx)
* [`signDelegation`](/reference/cheatcodes/sign-delegation.mdx)


### `skip`

### Signature

```solidity
function skip(bool skip) external;
```

### Description

Marks a test as skipped, conditionally. It must be called at the top of the test to ensure it is skipped without any execution.

If `skip` is called with a false boolean, it will not skip the test.

Tests marked as skipped will appear with a `[SKIPPED]` label on the test runner and on the summary, to easily identify skipped tests.

#### Examples

```solidity

function testSkip() public {
    vm.skip(true);
    /// This revert will not be reached as this test will be skipped.
    revert("Should not reach this revert");
}

function testNotSkip() public {
    vm.skip(false);
    /// This revert will be reached as this test will not be skipped, and the test will fail.
    revert("Should reach this revert");
}
```


### `sleep`

#### Signature

```solidity
function sleep(uint256 milliseconds) external;
```

#### Description

Sleeps for a given amount of milliseconds.

#### Examples

```solidity
vm.sleep(10_000); // Halts execution for 10 seconds
```


### `startBroadcast`

#### Signature

```solidity
function startBroadcast() external;
```

```solidity
function startBroadcast(address who) external;
```

```solidity
function startBroadcast(uint256 privateKey) external;
```

#### Description

Using the address that calls the test contract or the address / private key provided
as the sender, has all subsequent calls (at this call depth only and excluding cheatcode calls) create
transactions that can later be signed and sent onchain.

#### Examples

```solidity
function t(uint256 a) public returns (uint256) {
    uint256 b = 0;
    emit log_string("here");
    return b;
}

function deployOther() public {
    vm.startBroadcast(ACCOUNT_A);
    Test test = new Test();

    // will trigger a transaction
    test.t(1);

    vm.stopBroadcast();

    // broadcast again, this time using a private key from your environment variables
    vm.startBroadcast(vm.envUint("PRIVATE_KEY"));
    test.t(3);
    vm.stopBroadcast();
}
```

#### SEE ALSO

* [broadcast](/reference/cheatcodes/broadcast.mdx)
* [stopBroadcast](/reference/cheatcodes/stop-broadcast.mdx)


### `startPrank`

#### Signature

```solidity
function startPrank(address msgSender) external;
```

```solidity
function startPrank(address msgSender, bool delegateCall) external;
```

```solidity
function startPrank(address msgSender, address txOrigin) external;
```

```solidity
function startPrank(address msgSender, address txOrigin, bool delegateCall) external;
```

#### Description

* `startPrank(address msgSender)`: sets `msg.sender` **for all subsequent calls** until [`stopPrank`](/reference/cheatcodes/stop-prank.mdx) is called.
* `startPrank(address msgSender, address txOrigin)`: sets `msg.sender` and `tx.origin` **for all subsequent calls** until [`stopPrank`](/reference/cheatcodes/stop-prank.mdx) is called.
* `startPrank(address msgSender, bool delegateCall)`: if `delegateCall` value is `true` then sets `msg.sender` **for all subsequent delegate calls** until [`stopPrank`](/reference/cheatcodes/stop-prank.mdx) is called.
* `startPrank(address msgSender, address txOrigin, bool delegateCall)`: if `delegateCall` value is `true` then sets `msg.sender` and `tx.origin` **for all subsequent delegate calls** until [`stopPrank`](/reference/cheatcodes/stop-prank.mdx) is called.

> ℹ️ **Note**
>
> The delegate calls cannot be pranked from an EOA.

#### Examples

* prank delegate call and record state diffs

```solidity
contract ImplementationTest {
    uint public num;
    address public sender;

    function setNum(uint _num) public {
        num = _num;
    }
}

contract ProxyTest {
    uint public num;
    address public sender;
}

contract FoundryIssue is Script {
    function run() public {
        ProxyTest proxy = new ProxyTest();
        ImplementationTest impl = new ImplementationTest();

        vm.label(address(proxy), 'proxy');
        vm.label(address(impl), 'Impl');

        uint num = 42;
        vm.startPrank(address(proxy), true);
        vm.startStateDiffRecording();
        (bool successTwo,) = address(impl).delegatecall(abi.encodeWithSignature('setNum(uint256)', num));

        VmSafe.AccountAccess[] memory accountAccesses = vm.stopAndReturnStateDiff();
        console.log('accountAccesses.kind', uint8(accountAccesses[0].kind));
        console.log('accountAccesses.accessor', vm.getLabel(accountAccesses[0].accessor));
        console.log('accountAccesses.account', vm.getLabel(accountAccesses[0].account));
        console.logBytes(accountAccesses[0].data);
    }
}
```

```bash
== Logs ==
  accountAccesses.kind 1
  accountAccesses.accessor proxy
  accountAccesses.account Impl
  0xcd16ecbf000000000000000000000000000000000000000000000000000000000000002a
```

#### SEE ALSO

Forge Standard Library

[`startHoax`](/reference/forge-std/startHoax.mdx), [`changePrank`](/reference/forge-std/change-prank.mdx)


### `startStateDiffRecording`

#### Signature

```solidity
function startStateDiffRecording()
```

#### Description

Records all state changes as part of CREATE, CALL or SELFDESTRUCT opcodes in order,
along with the context of the calls.
Refer to [`stopAndReturnStateDiff`](/reference/cheatcodes/stop-and-return-state-diff.mdx) for more details on how to access and interpret the recorded state changes.


### `snapshotState` cheatcodes

#### Signature

```solidity
/// Snapshot the current state of the evm.
/// Returns the ID of the snapshot that was created.
/// To revert a snapshot use `revertToState`.
function snapshotState() external returns (uint256 snapshotId);

/// Revert the state of the EVM to a previous snapshot
/// Takes the snapshot ID to revert to.
/// Returns `true` if the snapshot was successfully reverted.
/// Returns `false` if the snapshot does not exist.
/// **Note:** This does not automatically delete the snapshot. To delete the snapshot use `deleteStateSnapshot`.
function revertToState(uint256 snapshotId) external returns (bool success);

/// Revert the state of the EVM to a previous snapshot and automatically deletes the snapshots
/// Takes the snapshot ID to revert to.
/// Returns `true` if the snapshot was successfully reverted and deleted.
/// Returns `false` if the snapshot does not exist.
function revertToStateAndDelete(uint256 snapshotId) external returns (bool success);

/// Removes the snapshot with the given ID created by `snapshot`.
/// Takes the snapshot ID to delete.
/// Returns `true` if the snapshot was successfully deleted.
/// Returns `false` if the snapshot does not exist.
function deleteStateSnapshot(uint256 snapshotId) external returns (bool success);

/// Removes _all_ snapshots previously created by `snapshot`.
function deleteStateSnapshots() external;
```

#### Description

`snapshotState` takes a snapshot of the state of the blockchain and returns the identifier of the created snapshot.

`revertToState` reverts the state of the blockchain to the given state snapshot. This deletes the given snapshot, as well as any snapshots taken after (e.g.: reverting to id 2 will delete snapshots with ids 2, 3, 4, etc.).

#### Examples

```solidity
struct Storage {
    uint slot0;
    uint slot1;
}

contract SnapshotStateTest is Test {
    Storage store;
    uint256 timestamp;

    function setUp() public {
        store.slot0 = 10;
        store.slot1 = 20;
        vm.deal(address(this), 5 ether);            // balance = 5 ether
        timestamp = block.timestamp;
    }

    function testSnapshotState() public {
        uint256 snapshot = vm.snapshotState();      // saves the state

        // let's change the state
        store.slot0 = 300;
        store.slot1 = 400;
        vm.deal(address(this), 500 ether);
        vm.warp(12345);                             // block.timestamp = 12345

        assertEq(store.slot0, 300);
        assertEq(store.slot1, 400);
        assertEq(address(this).balance, 500 ether);
        assertEq(block.timestamp, 12345);

        vm.revertToState(snapshot);                 // restores the state

        assertEq(store.slot0, 10, "snapshot revert for slot 0 unsuccessful");
        assertEq(store.slot1, 20, "snapshot revert for slot 1 unsuccessful");
        assertEq(address(this).balance, 5 ether, "snapshot revert for balance unsuccessful");
        assertEq(block.timestamp, timestamp, "snapshot revert for timestamp unsuccessful");
    }
}
```


### `stopAndReturnStateDiff`

#### Signature

```solidity
enum AccountAccessKind {
    Call,
    DelegateCall,
    CallCode,
    StaticCall,
    Create,
    SelfDestruct,
    Resume,
    Balance,
    Extcodesize,
    Extcodehash,
    Extcodecopy
}

struct ChainInfo {
    uint256 forkId;
    uint256 chainId;
}

struct AccountAccess {
    ChainInfo chainInfo;
    AccountAccessKind kind;
    address account;
    address accessor;
    bool initialized;
    uint256 oldBalance;
    uint256 newBalance;
    bytes deployedCode;
    uint256 value;
    bytes data;
    bool reverted;
    StorageAccess[] storageAccesses;
    uint64 depth;
}

struct StorageAccess {
    address account;
    bytes32 slot;
    bool isWrite;
    bytes32 previousValue;
    bytes32 newValue;
    bool reverted;
}

function stopAndReturnStateDiff() external returns (AccountAccess[] memory accesses);
```

#### Description

Retrieves state changes recorded after a call to [`startStateDiffRecording`](/reference/cheatcodes/start-state-diff-recording.mdx). This function will consume the recorded state diffs when called and disable state diff recording. One may call `startStateDiffRecording` to resume recording.

There are two types of state change records; account accesses and storage accesses represented as `AccountAccess` and `StorageAccess`.

Account state changes (`AccountAccess`) are recorded at the start of a new EVM context; i.e. induced by the various CREATE, CALL and SELFDESTRUCT operations.
An `AccountAccess` record contain storage accesses, represented as `StorageAccess`, that occurred before it was preempted via sub-calls or create operations.

The ordering of `AccountAccess` records reflect the EVM execution order of their associated operations. An `AccountAccess` is created whenever an EVM context is created or resumed.
If a sub-context is created, a `Resume` `AccountAccess` is recorded to indicate that a previous `AccountAccess` that was pre-emptied has been resumed.

#### `AccountAccessKind`

The kind of account access that determines the `account` that was accessed. This is typically designated by the EVM operation that initiated the account's execution context.
If kind is `Call`, `DelegateCall`, `StaticCall` or `CallCode`, then the `account` is the callee.
If kind is Create, then the account is the newly created account.
If kind is SelfDestruct, then the account is the selfdestruct recipient.
If kind is a Resume, then account represents an execution context that had resumed.

* `Call` - The account was called
* `DelegateCall` - The account was called via delegate call
* `CallCode` - The account was called via callcode
* `StaticCall` - The account was called via staticcall
* `Create` - The account was created
* `SelfDestruct` - The account was selfdestructed
* `Resume` - Indicates that a previously pre-emptied account access was resumed
* `Balance` - The account's balance was read
* `Extcodesize` - The account's codesize was read
* `Extcodehash` - The account's codehash was read
* `Extcodecopy` - The account's code was copied

#### `AccountAccess`

* `chainInfo` - The chain and fork the accessed occurred.
* `kind` - The kind of account access. This determines how to interpret the `AccountAccess`
* `account` - The account that was accessed. It's the account created for `AccountAccessKind.Create`.
  In the case of an `AccountAccessKind.SelfDestruct`, it's the selfdestruct recipient.
  For all other types of `AccountAccessKind`, it's the account of the current EVM context.
* `accessor` - What accessed `account`. That is either the account creator, caller or the account being selfdestructed.
* `initialized` - If the account was initialized or empty prior to the access.
  An account is considered initialized if it has code, a
  non-zero nonce, or a non-zero balance.
* `oldBalance`: The previous balance of the accessed `account`.
* `newBalance` - The potential new balance of the accessed account.
  That is, all balance changes are recorded here, even if reverts occurred.
* `deployedCode` - Code of the `account` deployed in the case of `AccountAccessKind.Create`. This field is empty For all other account access kinds.
* `value` - The value passed along with the account access.
* `data` - Input data provided (i.e. `msg.data`) in the case of a `CREATE` or `CALL` type access.
* `reverted` - If this access reverted in either the current or parent context.
* `storageAccesses` - An ordered list of storage accesses made while the account access is non-preemptive.
* `depth` - Call depth traversed during the recording of state differences.

#### `StorageAccess`

The storage accesses made during an `AccountAccess`. `StorageAccess` cannot exist without an associated `AccountAccess`. This means that when state diffs begins on the given context, storage accesses made during that context are not recorded as the context (but not its sub-contexts) isn't recorded.

`StorageAccess` contains the following fields:

* `account` - A account whose storage was accessed
* `slot` - The slot that was accessed
* `isWrite` - If the access was a write
* `previousValue` - The value of the slot prior to this storage access
* `newValue` - The value of the slot after this storage access
* `reverted` - If this access was reverted

#### Resumed `AccountAccess`

This type of AccountAccess is generated when a sub-context returns to its parent context. It retains the same values as the original context, including `accessor`, `account`, `initialized`, `storageAccesses`, and `reverted`.
The following control flow table illustrate how Resume AccountAccesses are recorded.

| Step in Contract A's `alpha()` | Step in Contract B's `beta()` | AccountAccess Records State                                                              |
| ------------------------------ | ----------------------------- | ---------------------------------------------------------------------------------------- |
| Call A.alpha()                 |                               | \[A.call]                                                                                |
| Access state                   |                               | \[A.call\[A.access]]                                                                     |
| Call B.beta()                  | B.beta() begins               | \[A.call\[A.access], B.call]                                                             |
| (Execution Paused)             | Access state                  | \[A.call\[A.access], B.call\[B.access]]                                                  |
|                                | Return                        |                                                                                          |
| Resume execution               | (Return to A.alpha())         | \[A.call\[A.access], B.call\[B.access]]                                                  |
| Access state                   |                               | \[<br /> A.call\[A.access], <br /> B.call\[B.access], <br /> A.resume\[A.access']<br />] |

> ℹ️ **Note**
>
> A Resumed AccountAccess is created only if storage accesses occurred after a context was resumed.

#### Example: Recording storage state changes during a CREATE operation

```solidity
contract Contract {
    uint256 internal _reserved;
    uint256 public data;
    constructor(uint _data) payable { data = _data; }
}

vm.startStateDiffRecording();
Contract contract = new Contract{value: 1 ether}(100);
Vm.AccountAccess[] memory records = vm.stopAndReturnStateDiff();

assertEq(records.length, 1);
assertEq(records[0].kind, Vm.AccountAccessKind.Create);
assertEq(records[0].account, address(contract));
assertEq(records[0].accessor, address(this));
assertEq(records[0].initialized, true);
assertEq(records[0].oldBalance, 0);
assertEq(records[0].newBalance, 1 ether);
assertEq(records[0].deployedCode, address(contract).code);
assertEq(records[0].value, 1 ether);
assertEq(records[0].data, abi.encodePacked(type(Contract).creationCode, (uint(100))));
assertEq(records[0].reverted, false);

assertEq(records[0].storageAccesses.length, 1);
assertEq(records[0].storageAccesses[0].account, address(contract));
assertEq(records[0].storageAccesses[0].slot, bytes32(uint256(1)));
assertEq(records[0].storageAccesses[0].isWrite, true);
assertEq(records[0].storageAccesses[0].previousValue, bytes32(uint(0)));
assertEq(records[0].storageAccesses[0].newValue, bytes32(uint(100)));
assertEq(records[0].storageAccesses[0].reverted, false);
```

Note that there are no `Resume` account accesses in this example.

#### Example: Resumed Account Access

```solidity
contract Foo {
    Bar b;
    uint256 public val;
    constructor(Bar _b) { b = _b; }
    function run() external {
        val = val + 1;
        b.run();
        val = val + 1;
    }
}
contract Bar {
    function run() external {}
}

Bar bar = new Bar();
Foo foo = new Foo(bar);

vm.startStateDiffRecording();
foo.run();
Vm.AccountAccess[] memory records = vm.stopAndReturnStateDiff();

assertEq(records.length, 3);
Vm.AccountAccess memory fooCall = records[0];
assertEq(fooCall.kind, Vm.AccountAccessKind.Call);
assertEq(fooCall.account, address(foo));
assertEq(fooCall.accessor, address(this));
// foo.val increment
assertEq(fooCall.storageAccesses.length, 2);
assertEq(fooCall.storageAccesses[0].isWrite, false);
assertEq(fooCall.storageAccesses[1].isWrite, true);
assertEq(fooCall.storageAccesses[1].oldValue, bytes32(uint(0)));
assertEq(fooCall.storageAccesses[1].newValue, bytes32(uint(1)));

// bar.run CALL
Vm.AccountAccess memory barCall = records[1];
assertEq(barCall.kind, Vm.AccountAccessKind.Call);
assertEq(barCall.account, address(bar));
assertEq(barCall.accessor, address(foo));

// foo.run RESUME
Vm.AccountAccess memory fooResume = records[2];
assertEq(fooResume.kind, Vm.AccountAccessKind.Resume);
// foo.val increment
assertEq(fooResume.storageAccesses.length, 2);
assertEq(fooResume.storageAccesses[0].isWrite, false);
assertEq(fooResume.storageAccesses[1].isWrite, true);
assertEq(fooResume.storageAccesses[1].oldValue, bytes32(uint(1)));
assertEq(fooResume.storageAccesses[1].newValue, bytes32(uint(2)));
```


### `stopBroadcast`

#### Signature

```solidity
function stopBroadcast() external;
```

#### Description

Stops collecting transactions for later on-chain broadcasting.

#### Examples

```solidity
function deployNoArgs() public {
    // broadcast the next call
    cheats.broadcast();
    Test test1 = new Test();

    // broadcast all calls between this line and `stopBroadcast`
    cheats.startBroadcast();
    Test test2 = new Test();
    cheats.stopBroadcast();
}
```


### `stopPrank`

#### Signature

```solidity
function stopPrank() external;
```

#### Description

Stops an active prank started by [`startPrank`](/reference/cheatcodes/start-prank.mdx), resetting `msg.sender` and `tx.origin` to the values before `startPrank` was called.


### `store`

#### Signature

```solidity
function store(address account, bytes32 slot, bytes32 value) external;
```

#### Description

Stores the value `value` in storage slot `slot` on account `account`.

#### Examples

```solidity
/// contract LeetContract {
///     uint256 private leet = 1337; // slot 0
/// }

vm.store(address(leetContract), bytes32(uint256(0)), bytes32(uint256(31337)));
bytes32 leet = vm.load(address(leetContract), bytes32(uint256(0)));
emit log_uint(uint256(leet)); // 31337
```

#### SEE ALSO

Forge Standard Library

[Std Storage](/reference/forge-std/std-storage.mdx)


### `toString`

#### Signature

```solidity
function toString(address) external returns (string memory);
function toString(bool) external returns (string memory);
function toString(uint256) external returns (string memory);
function toString(int256) external returns (string memory);
function toString(bytes32) external returns (string memory);
function toString(bytes) external returns (string memory);
```

#### Description

Convert any type to its string version. Very useful for operations that demand strings, such as the cheatcode `ffi`.

Bytes are converted to a string of their hex representation with `0x` at the start, signifying that they are encoded in hex.

#### Examples

```solidity
uint256 number = 420;
string memory stringNumber = vm.toString(number);
vm.assertEq(stringNumber, "420");
```

```solidity
bytes memory testBytes = hex"7109709ECfa91a80626fF3989D68f67F5b1DD12D";
string memory stringBytes = cheats.toString(testBytes);
assertEq("0x7109709ecfa91a80626ff3989d68f67f5b1dd12d", stringBytes);
```

```solidity
address testAddress =  0x7109709ECfa91a80626fF3989D68f67F5b1DD12D;
string memory stringAddress = cheats.toString(testAddress);
assertEq("0x7109709ECfa91a80626fF3989D68f67F5b1DD12D", stringAddress);
```


### `transact`

#### Signature

```solidity
// Fetches the given transaction from the active fork and executes it on the current state
function transact(bytes32 txHash) external;
// Fetches the given transaction from the given fork and executes it on the current state
function transact(uint256 forkId, bytes32 txHash) external;
```

#### Description

In forking mode, fetches the Transaction from the provider and executes it on the current state

#### Examples

Enter forking mode and execute a transaction:

```solidity
// Enter forking mode at block: https://etherscan.io/block/15596646
uint256 fork = vm.createFork(MAINNET_RPC_URL, 15596646);
vm.selectFork(fork);

// a random transfer transaction in the block: https://etherscan.io/tx/0xaba74f25a17cf0d95d1c6d0085d6c83fb8c5e773ffd2573b99a953256f989c89
bytes32 tx = 0xaba74f25a17cf0d95d1c6d0085d6c83fb8c5e773ffd2573b99a953256f989c89;

address sender = address(0xa98218cdc4f63aCe91ddDdd24F7A580FD383865b);
address recipient = address(0x0C124046Fa7202f98E4e251B50488e34416Fc306);

assertEq(sender.balance, 5764124000000000);
assertEq(recipient.balance, 3936000000000000);

// transfer amount: 0.003936 Ether
uint256 transferAmount = 3936000000000000;

// expected balance changes once the transaction is executed
uint256 expectedRecipientBalance = recipient.balance + transferAmount;
uint256 expectedSenderBalance = sender.balance - transferAmount;

// execute the transaction
vm.transact(tx);

// recipient received transfer
assertEq(recipient.balance, expectedRecipientBalance);

// sender's balance decreased by transferAmount and gas
assert(sender.balance < expectedSenderBalance);

```

#### SEE ALSO

* [roll](/reference/cheatcodes/roll.mdx)
* [createFork](/reference/cheatcodes/create-fork.mdx)
* [selectFork](/reference/cheatcodes/select-fork.mdx)
* [activeFork](/reference/cheatcodes/active-fork.mdx)


### `txGasPrice`

#### Signature

```solidity
function txGasPrice(uint256) external;
```

```solidity
function txGasPrice(uint256 newGasPrice) external;
```

#### Description

Sets `tx.gasprice` **for the rest of the transaction**.

#### Examples

We can use this to get accurate gas usage for a transaction.

```solidity
function testCalculateGas() public {
    vm.txGasPrice(2);
    uint256 gasStart = gasleft();
    myContract.doStuff();
    uint256 gasEnd = gasleft();
    uint256 gasUsed = (gasStart - gasEnd) * tx.gasprice; // tx.gasprice is now 2
}
```


### `unixTime`

#### Signature

```solidity
function unixTime() external returns (uint milliseconds);
```

#### Description

Returns the time since unix epoch in milliseconds.

#### Examples

```solidity
uint start = vm.unixTime();
vm.sleep(10_000); // Halts execution for 10 seconds
uint end = vm.unixTime();
assertEq(end - start, 10_000);
```


### Utilities

* [`addr`](/reference/cheatcodes/addr.mdx)
* [`label`](/reference/cheatcodes/label.mdx)
* [`getLabel`](/reference/cheatcodes/get-label.mdx)
* [`deriveKey`](/reference/cheatcodes/derive-key.mdx)
* [`rememberKey`](/reference/cheatcodes/remember-key.mdx)
* [`toString`](/reference/cheatcodes/to-string.mdx)
* [`breakpoint`](/reference/cheatcodes/breakpoint.mdx)
* [`createWallet`](/reference/cheatcodes/create-wallet.mdx)
* [`copyStorage`](/reference/cheatcodes/copy-storage.mdx)
* [`setArbitraryStorage`](/reference/cheatcodes/set-arbitrary-storage.mdx)


### `warp`

#### Signature

```solidity
function warp(uint256) external;
```

#### Description

Sets `block.timestamp`.

#### Examples

```solidity
vm.warp(1641070800);
emit log_uint(block.timestamp); // 1641070800
```

#### SEE ALSO

Forge Standard Library

[`skip`](/reference/forge-std/skip.mdx), [`rewind`](/reference/forge-std/rewind.mdx)


### `writeJson`

#### Signature

```solidity
function writeJson(string calldata json, string calldata path) external;

function writeJson(string calldata json, string calldata path, string calldata valueKey) external;
```

#### Description

Writes a serialized JSON object to a file.

The argument `json` must be a JSON object in stringified form. For example:

```text
{ "boolean": true, "number": 342, "object": { "title": "finally json serialization" } }
```

This is usually built through [serializeJson](/reference/cheatcodes/serialize-json.mdx).

The argument `path` is the path of the JSON file to write to.

If no `valueKey` is provided, then the JSON object will be written to a new file. If the file already exists, it will be overwritten.

If a `valueKey` is provided, then the file must already exist and be a valid JSON file. The object in that file will be updated by replacing the value at the *JSON path* `valueKey` with the JSON object `json`.

This is useful to replace some values in a JSON file without having to first parse and then reserialize it. Note that the JSON path must indicate an existing key, so it's not possible to add new keys this way.

**Remember:** The file path `path` needs to be in the allowed paths. Read more in [File cheatcodes](/reference/cheatcodes/fs.mdx).

##### JSON Paths

Let's consider the following JSON object:

```json
{
  "boolean": true,
  "number": 342,
  "obj1": {
    "aNumber": 123,
    "obj2": {
      "aNumber": 123,
      "obj3": {
        "veryDeep": 13371337
      }
    }
  }
}
```

The root object is always assumed, so we can refer to one of its children by starting the path with a dot (`.`). For instance, `.boolean`, `.number`, and `.obj1`.
We can go as deep as we want: `.obj1.aNumber`, or `.obj1.obj2.aNumber`.
We can even search for a key in a subtree: `.obj1..veryDeep`, or just `..veryDeep` since there's no ambiguity.

See the examples to see this in action.

#### Examples

##### A simple example

```solidity
string memory jsonObj = '{ "boolean": true, "number": 342, "myObject": { "title": "finally json serialization" } }';
vm.writeJson(jsonObj, "./output/example.json");

// replaces the value of `myObject` with a new object
string memory newJsonObj = '{ "aNumber": 123, "aString": "asd" }';
vm.writeJson(newJsonObj, "./output/example.json", ".myObject");

// replaces the value of `aString` in the new object
vm.writeJson("my new string", "./output/example.json", ".myObject.aString");

// Here's example.json:
//
// {
//   "boolean": true,
//   "number": 342,
//   "myObject": {
//     "aNumber": 123,
//     "aString": "my new string"
//   }
// }
```

##### A more complex example

```solidity
string memory jsonObj = '{ "boolean": true, "number": 342, "obj1": { "foo": "bar" } }';
vm.writeJson(jsonObj, "./output/example2.json");

string memory jsonObj2 = '{ "aNumber": 123, "obj2": {} }';
vm.writeJson(jsonObj2, "./output/example2.json", ".obj1");

string memory jsonObj3 = '{ "aNumber": 123, "obj3": { "veryDeep": 3 } }';
vm.writeJson(jsonObj3, "./output/example2.json", ".obj1.obj2");

// Here's example2.json so far:
//
// {
//   "boolean": true,
//   "number": 342,
//   "obj1": {
//     "aNumber": 123,
//     "obj2": {
//       "aNumber": 123,
//       "obj3": {
//         "veryDeep": 3
//       }
//     }
//   }
// }

// Note that the JSON object is just the value 13371337 in this case.
vm.writeJson("13371337", "./output/example2.json", "..veryDeep");

// Here's the final example2.json:
//
// {
//   "boolean": true,
//   "number": 342,
//   "obj1": {
//     "aNumber": 123,
//     "obj2": {
//       "aNumber": 123,
//       "obj3": {
//         "veryDeep": 13371337
//       }
//     }
//   }
// }
```

#### SEE ALSO

* [serializeJson](/reference/cheatcodes/serialize-json.mdx)


### `writeToml`

#### Signature

```solidity
function writeToml(string calldata json, string calldata path) external;

function writeToml(string calldata json, string calldata path, string calldata valueKey) external;
```

#### Description

Writes a serialized JSON object to a TOML file after conversion.

The argument `json` must be a JSON object in stringified form. For example:

```text
{ "boolean": true, "number": 342, "object": { "title": "finally json serialization" } }
```

This is usually built through [serializeJson](/reference/cheatcodes/serialize-json.mdx).

The argument `path` is the path of the TOML file to write to.

If no `valueKey` is provided, then the TOML object will be written to a new file. If the file already exists, it will be overwritten.

If a `valueKey` is provided, then the file must already exist and be a valid TOML file. The object in that file will be updated by replacing the value at the *JSON path* `valueKey` with the JSON object `json` after TOML conversion.

This is useful to replace some values in a TOML file without having to first parse and then reserialize it. Note that the TOML path must indicate an existing key, so it's not possible to add new keys this way.

**Remember:** The file path `path` needs to be in the allowed paths. Read more in [File cheatcodes](/reference/cheatcodes/fs.mdx).

##### JSON Paths

Let's consider the following JSON object:

```json
{
  "boolean": true,
  "number": 342,
  "obj1": {
    "aNumber": 123,
    "obj2": {
      "aNumber": 123,
      "obj3": {
        "veryDeep": 13371337
      }
    }
  }
}
```

The root object is always assumed, so we can refer to one of its children by starting the path with a dot (`.`). For instance, `.boolean`, `.number`, and `.obj1`.
We can go as deep as we want: `.obj1.aNumber`, or `.obj1.obj2.aNumber`.
We can even search for a key in a subtree: `.obj1..veryDeep`, or just `..veryDeep` since there's no ambiguity.

See the examples to see this in action.

#### Examples

##### A simple example

```solidity
string memory jsonObj = '{ "boolean": true, "number": 342, "myObject": { "title": "finally json serialization" } }';
vm.writeToml(jsonObj, "./output/example.toml");

// replaces the value of `myObject` with a new object
string memory newJsonObj = '{ "aNumber": 123, "aString": "asd" }';
vm.writeToml(newJsonObj, "./output/example.toml", ".myObject");

// replaces the value of `aString` in the new object
vm.writeToml("my new string", "./output/example.toml", ".myObject.aString");

// Here's example.toml:
//
// boolean = true
// number = 342

// [myObject]
// aNumber = 123
// aString = "my new string"
```

##### A more complex example

```solidity
string memory jsonObj = '{ "boolean": true, "number": 342, "obj1": { "foo": "bar" } }';
vm.writeToml(jsonObj, "./output/example2.toml");

string memory jsonObj2 = '{ "aNumber": 123, "obj2": {} }';
vm.writeToml(jsonObj2, "./output/example2.toml", ".obj1");

string memory jsonObj3 = '{ "aNumber": 123, "obj3": { "veryDeep": 3 } }';
vm.writeToml(jsonObj3, "./output/example2.toml", ".obj1.obj2");

// Here's example2.toml so far:
//
// boolean = true
// number = 342
//
// [obj1]
// aNumber = 123
//
// [obj1.obj2]
// aNumber = 123
//
// [obj1.obj2.obj3]
// veryDeep = 3

// Note that the JSON object is just the value 13371337 in this case.
vm.writeToml("13371337", "./output/example2.toml", "..veryDeep");

// Here's the final example2.toml:
//
// boolean = true
// number = 342
//
// [obj1]
// aNumber = 123
//
// [obj1.obj2]
// aNumber = 123
//
// [obj1.obj2.obj3]
// veryDeep = 13371337
```

#### SEE ALSO

* [serializeJson](/reference/cheatcodes/serialize-json.mdx)


### `abs`

#### Signature

```solidity
function abs(int256 a) internal pure returns (uint256)
```

#### Description

Returns the absolute value of a number.

#### Example

```solidity
uint256 ten = stdMath.abs(-10);
```


### `arithmeticError`

#### Signature

```solidity
stdError.arithmeticError
```

#### Description

The internal Solidity error when an arithmetic operation fails, e.g. underflow and overflow.

#### Example

Assume we have a basic vault contract that can store some token (`wmdToken`):

```solidity
contract BasicVault {

    IERC20 public immutable wmdToken;   
    mapping(address => uint) public balances;

    event Deposited(address indexed from, uint amount);
    event Withdrawal(address indexed from, uint amount);

    constructor(IERC20 wmdToken_){
        wmdToken = wmdToken_;
    }

    function deposit(uint amount) external {    
        balances[msg.sender] += amount;
        bool success = wmdToken.transferFrom(msg.sender, address(this), amount);
        require(success, "Deposit failed!"); 
        emit Deposited(msg.sender, amount);
    }

    function withdraw(uint amount) external {      
        balances[msg.sender] -= amount;
        bool success = wmdToken.transfer(msg.sender, amount);
        require(success, "Withdrawal failed!");
        emit Withdrawal(msg.sender, amount);
    }
}
```

We have a test function to ensure that a user is unable to withdraw tokens in excess of his deposit, like so:

```solidity
function testUserCannotWithdrawExcessOfDeposit() public {
    vm.prank(user);
    vm.expectRevert(stdError.arithmeticError);
    vault.withdraw(userTokens + 100*10**18);
}
```

1. User has tokens of amount `userTokens` deposited in a Vault contract.
2. User attempts to withdraw tokens of amount in excess of his deposits.
3. This leads to an underflow error, resulting from: `balances[msg.sender] -= amount;` as it would evaluate into a negative value.

To catch the error "Arithmetic over/underflow", we insert `vm.expectRevert(stdError.arithmeticError)` just before the function call that is expected to result in an underflow.


### `assertApproxEqAbs`

#### Signature

```solidity
function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) internal;
```

```solidity
function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string memory err) internal;
```

```solidity
function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) internal;
```

```solidity
function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string memory err) internal;
```

#### Description

Asserts `left` is approximately equal to `right` with delta in absolute value.

Optionally includes an error message in the revert string.

#### Examples

```solidity
function testRevert() external {
    uint256 a = 100;
    uint256 b = 200;

    assertApproxEqAbs(a, b, 90);
}
```

```
[FAIL: assertion failed: 100 !~= 200 (max delta: 90, real delta: 100)] testRevert() (gas: 23884)
```

#### SEE ALSO

* [`assertApproxEqAbsDecimal`](/reference/forge-std/assertApproxEqAbsDecimal.mdx)
* [`assertApproxEqRel`](/reference/forge-std/assertApproxEqRel.mdx)


### `assertApproxEqAbsDecimal`

#### Signature

```solidity
function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals) internal;
```

```solidity
function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals, string memory err) internal;
```

```solidity
function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals) internal;
```

```solidity
function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals, string memory err) internal;
```

#### Description

Asserts `left` is approximately equal to `right` with delta in absolute value.

`left` and `right` are formatted with decimals in the revert string.

Optionally includes an error message in the revert string.

#### SEE ALSO

* [`assertApproxEqAbs`](/reference/forge-std/assertApproxEqAbs.mdx)


### `assertApproxEqRel`

#### Signature

```solidity
function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta) internal;
```

```solidity
function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta, string memory err) internal;
```

```solidity
function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) internal;
```

```solidity
function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta, string memory err) internal;
```

#### Description

Asserts `left` is approximately equal to `right` with delta in percentage, where `1e18` is 100%.

Optionally includes an error message in the revert string.

#### Examples

```solidity
function testRevert() external {
    uint256 a = 100;
    uint256 b = 200;
    assertApproxEqRel(a, b, 0.4e18);
}
```

```
[FAIL: assertion failed: 100 !~= 200 (max delta: 40.0000000000000000%, real delta: 50.0000000000000000%)] testRevert() (gas: 23884)
```

#### SEE ALSO

* [`assertApproxEqRelDecimal`](/reference/forge-std/assertApproxEqRelDecimal.mdx)
* [`assertApproxEqAbs`](/reference/forge-std/assertApproxEqAbs.mdx)


### `assertApproxEqRelDecimal`

#### Signature

```solidity
function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals) internal;
```

```solidity
function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals, string memory err) internal;
```

```solidity
function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals) internal;
```

```solidity
function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals, string memory err) internal;
```

#### Description

Asserts `left` is approximately equal to `right` with delta in percentage, where `1e18` is 100%.

`left` and `right` are formatted with decimals in the revert string.

Optionally includes an error message in the revert string.

#### SEE ALSO

* [`assertApproxEqRel`](/reference/forge-std/assertApproxEqRel.mdx)


### `assertEq`

#### Signature

##### `bool`

```solidity
function assertEq(bool left, bool right) internal;
```

```solidity
function assertEq(bool left, bool right, string memory err) internal;
```

##### `uint256`

```solidity
function assertEq(uint256 left, uint256 right) internal;
```

```solidity
function assertEq(uint256 left, uint256 right, string memory err) internal;
```

##### `int256`

```solidity
function assertEq(int256 left, int256 right) internal;
```

```solidity
function assertEq(int256 left, int256 right, string memory err) internal;
```

##### `address`

```solidity
function assertEq(address left, address right) internal;
```

```solidity
function assertEq(address left, address right, string memory err) internal;
```

##### `bytes32`

```solidity
function assertEq(bytes32 left, bytes32 right) internal;
```

```solidity
function assertEq(bytes32 left, bytes32 right, string memory err) internal;
```

##### `string`

```solidity
function assertEq(string memory left, string memory right) internal;
```

```solidity
function assertEq(string memory left, string memory right, string memory err) internal;
```

##### `bytes`

```solidity
function assertEq(bytes memory left, bytes memory right) internal;
```

```solidity
function assertEq(bytes memory left, bytes memory right, string memory err) internal;
```

##### `bool[]`

```solidity
function assertEq(bool[] memory left, bool[] memory right) internal;
```

```solidity
function assertEq(bool[] memory left, bool[] memory right, string memory err) internal;
```

##### `uint256[]`

```solidity
function assertEq(uint256[] memory left, uint256[] memory right) internal;
```

```solidity
function assertEq(uint256[] memory left, uint256[] memory right, string memory err) internal;
```

##### `int256[]`

```solidity
function assertEq(int256[] memory left, int256[] memory right) internal;
```

```solidity
function assertEq(int256[] memory left, int256[] memory right, string memory err) internal;
```

##### `address[]`

```solidity
function assertEq(address[] memory left, address[] memory right) internal;
```

```solidity
function assertEq(address[] memory left, address[] memory right, string memory err) internal;
```

##### `bytes32[]`

```solidity
function assertEq(bytes32[] memory left, bytes32[] memory right) internal;
```

```solidity
function assertEq(bytes32[] memory left, bytes32[] memory right, string memory err) internal;
```

##### `string[]`

```solidity
function assertEq(string[] memory left, string[] memory right) internal;
```

```solidity
function assertEq(string[] memory left, string[] memory right, string memory err) internal;
```

##### `bytes[]`

```solidity
function assertEq(bytes[] memory left, bytes[] memory right) internal;
```

```solidity
function assertEq(bytes[] memory left, bytes[] memory right, string memory err) internal;
```

##### Legacy

```solidity
// legacy helper for asserting two uints shorter than 256 bits: `assertEqUint(uint8(1), uint128(1));`
function assertEqUint(uint256 a, uint256 b) internal;
```

```solidity
function assertEq32(bytes32 left, bytes32 right) internal;
```

```solidity
function assertEq32(bytes32 left, bytes32 right, string memory err) internal;
```

#### Description

Asserts `left` is equal to `right`.

Optionally includes an error message in the revert string.

#### SEE ALSO

* [`assertEqDecimal`](/reference/forge-std/assertEqDecimal.mdx)
* [`assertNotEq`](/reference/forge-std/assertNotEq.mdx)


### `assertEqDecimal`

#### Signature

```solidity
function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) internal
```

```solidity
function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal;
```

```solidity
function assertEqDecimal(int256 left, int256 right, uint256 decimals) internal;
```

```solidity
function assertEqDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal;
```

#### Description

Asserts `left` is equal to `right`.

`left` and `right` are formatted with decimals in the revert string.

Optionally includes an error message in the revert string.

#### SEE ALSO

* [`assertEq`](/reference/forge-std/assertEq.mdx)


### `assertFalse`

#### Signature

```solidity
function assertFalse(bool data) internal;
```

```solidity
function assertFalse(bool data, string memory err) internal;
```

#### Description

Asserts `data` is false.

Optionally includes an error message in the revert string.

#### Examples

```solidity
bool failure = contract.fun();
assertFalse(failure);
```

#### SEE ALSO

* [`assertTrue`](/reference/forge-std/assertTrue.mdx)


### `assertGe`

#### Signature

```solidity
function assertGe(uint256 left, uint256 right) internal;
```

```solidity
function assertGe(uint256 left, uint256 right, string memory err) internal;
```

```solidity
function assertGe(int256 left, int256 right) internal;
```

```solidity
function assertGe(int256 left, int256 right, string memory err) internal;
```

#### Description

Asserts `left` is greater than or equal to `right`.

Optionally includes an error message in the revert string.

#### SEE ALSO

* [`assertGeDecimal`](/reference/forge-std/assertGeDecimal.mdx)
* [`assertGt`](/reference/forge-std/assertGt.mdx)


### `assertGeDecimal`

#### Signature

```solidity
function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) internal
```

```solidity
function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal;
```

```solidity
function assertGeDecimal(int256 left, int256 right, uint256 decimals) internal;
```

```solidity
function assertGeDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal;
```

#### Description

Asserts `left` is greater than or equal to `right`.

`left` and `right` are formatted with decimals in the revert string.

Optionally includes an error message in the revert string.

#### SEE ALSO

* [`assertGe`](/reference/forge-std/assertGe.mdx)


### `assertGt`

#### Signature

```solidity
function assertGt(uint256 left, uint256 right) internal;
```

```solidity
function assertGt(uint256 left, uint256 right, string memory err) internal;
```

```solidity
function assertGt(int256 left, int256 right) internal;
```

```solidity
function assertGt(int256 left, int256 right, string memory err) internal;
```

#### Description

Asserts `left` is strictly greater than `right`.

Optionally includes an error message in the revert string.

#### SEE ALSO

* [`assertGtDecimal`](/reference/forge-std/assertGtDecimal.mdx)
* [`assertGe`](/reference/forge-std/assertGe.mdx)


### `assertGtDecimal`

#### Signature

```solidity
function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) internal
```

```solidity
function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal;
```

```solidity
function assertGtDecimal(int256 left, int256 right, uint256 decimals) internal;
```

```solidity
function assertGtDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal;
```

#### Description

Asserts `left` is strictly greater than `right`.

`left` and `right` are formatted with decimals in the revert string.

Optionally includes an error message in the revert string.

#### SEE ALSO

* [`assertGt`](/reference/forge-std/assertGt.mdx)


### `assertLe`

#### Signature

```solidity
function assertLe(uint256 left, uint256 right) internal;
```

```solidity
function assertLe(uint256 left, uint256 right, string memory err) internal;
```

```solidity
function assertLe(int256 left, int256 right) internal;
```

```solidity
function assertLe(int256 left, int256 right, string memory err) internal;
```

#### Description

Asserts `left` is less than or equal to `right`.

Optionally includes an error message in the revert string.

#### SEE ALSO

* [`assertLeDecimal`](/reference/forge-std/assertLeDecimal.mdx)
* [`assertLt`](/reference/forge-std/assertLt.mdx)


### `assertLeDecimal`

#### Signature

```solidity
function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) internal
```

```solidity
function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal;
```

```solidity
function assertLeDecimal(int256 left, int256 right, uint256 decimals) internal;
```

```solidity
function assertLeDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal;
```

#### Description

Asserts `left` is less than or equal to `right`.

`left` and `right` are formatted with decimals in the revert string.

Optionally includes an error message in the revert string.

#### SEE ALSO

* [`assertLe`](/reference/forge-std/assertLe.mdx)


### `assertLt`

#### Signature

```solidity
function assertLt(uint256 left, uint256 right) internal;
```

```solidity
function assertLt(uint256 left, uint256 right, string memory err) internal;
```

```solidity
function assertLt(int256 left, int256 right) internal;
```

```solidity
function assertLt(int256 left, int256 right, string memory err) internal;
```

#### Description

Asserts `left` is strictly less than `right`.

Optionally includes an error message in the revert string.

#### SEE ALSO

* [`assertLtDecimal`](/reference/forge-std/assertLtDecimal.mdx)
* [`assertLe`](/reference/forge-std/assertLe.mdx)


### `assertLtDecimal`

#### Signature

```solidity
function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) internal
```

```solidity
function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal;
```

```solidity
function assertLtDecimal(int256 left, int256 right, uint256 decimals) internal;
```

```solidity
function assertLtDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal;
```

#### Description

Asserts `left` is strictly less than `right`.

`left` and `right` are formatted with decimals in the revert string.

Optionally includes an error message in the revert string.

#### SEE ALSO

* [`assertLt`](/reference/forge-std/assertLt.mdx)


### `assertNotEq`

#### Signature

##### `bool`

```solidity
function assertNotEq(bool left, bool right) internal;
```

```solidity
function assertNotEq(bool left, bool right, string memory err) internal;
```

##### `uint256`

```solidity
function assertNotEq(uint256 left, uint256 right) internal;
```

```solidity
function assertNotEq(uint256 left, uint256 right, string memory err) internal;
```

##### `int256`

```solidity
function assertNotEq(int256 left, int256 right) internal;
```

```solidity
function assertNotEq(int256 left, int256 right, string memory err) internal;
```

##### `address`

```solidity
function assertNotEq(address left, address right) internal;
```

```solidity
function assertNotEq(address left, address right, string memory err) internal;
```

##### `bytes32`

```solidity
function assertNotEq(bytes32 left, bytes32 right) internal;
```

```solidity
function assertNotEq(bytes32 left, bytes32 right, string memory err) internal;
```

##### `string`

```solidity
function assertNotEq(string memory left, string memory right) internal;
```

```solidity
function assertNotEq(string memory left, string memory right, string memory err) internal;
```

##### `bytes`

```solidity
function assertNotEq(bytes memory left, bytes memory right) internal;
```

```solidity
function assertNotEq(bytes memory left, bytes memory right, string memory err) internal;
```

##### `bool[]`

```solidity
function assertNotEq(bool[] memory left, bool[] memory right) internal;
```

```solidity
function assertNotEq(bool[] memory left, bool[] memory right, string memory err) internal;
```

##### `uint256[]`

```solidity
function assertNotEq(uint256[] memory left, uint256[] memory right) internal;
```

```solidity
function assertNotEq(uint256[] memory left, uint256[] memory right, string memory err) internal;
```

##### `int256[]`

```solidity
function assertNotEq(int256[] memory left, int256[] memory right) internal;
```

```solidity
function assertNotEq(int256[] memory left, int256[] memory right, string memory err) internal;
```

##### `address[]`

```solidity
function assertNotEq(address[] memory left, address[] memory right) internal;
```

```solidity
function assertNotEq(address[] memory left, address[] memory right, string memory err) internal;
```

##### `bytes32[]`

```solidity
function assertNotEq(bytes32[] memory left, bytes32[] memory right) internal;
```

```solidity
function assertNotEq(bytes32[] memory left, bytes32[] memory right, string memory err) internal;
```

##### `string[]`

```solidity
function assertNotEq(string[] memory left, string[] memory right) internal;
```

```solidity
function assertNotEq(string[] memory left, string[] memory right, string memory err) internal;
```

##### `bytes[]`

```solidity
function assertNotEq(bytes[] memory left, bytes[] memory right) internal;
```

```solidity
function assertNotEq(bytes[] memory left, bytes[] memory right, string memory err) internal;
```

##### Legacy

```solidity
function assertNotEq32(bytes32 left, bytes32 right) internal;
```

```solidity
function assertNotEq32(bytes32 left, bytes32 right, string memory err) internal;
```

#### Description

Asserts `left` is not equal to `right`.

Optionally includes an error message in the revert string.

#### SEE ALSO

* [`assertNotEqDecimal`](/reference/forge-std/assertNotEqDecimal.mdx)
* [`assertEq`](/reference/forge-std/assertEq.mdx)


### `assertNotEqDecimal`

#### Signature

```solidity
function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) internal
```

```solidity
function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal;
```

```solidity
function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) internal;
```

```solidity
function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal;
```

#### Description

Asserts `left` is not equal to `right`.

`left` and `right` are formatted with decimals in the revert string.

Optionally includes an error message in the revert string.

#### SEE ALSO

* [`assertNotEq`](/reference/forge-std/assertNotEq.mdx)


### `assertTrue`

#### Signature

```solidity
function assertTrue(bool data) internal;
```

```solidity
function assertTrue(bool data, string memory err) internal;
```

#### Description

Asserts `data` is true.

Optionally includes an error message in the revert string.

#### Examples

```solidity
bool success = contract.fun();
assertTrue(success);
```

#### SEE ALSO

* [`assertFalse`](/reference/forge-std/assertFalse.mdx)


### `assertionError`

#### Signature

```solidity
stdError.assertionError
```

#### Description

The internal Solidity error when an `assert` fails.


### `assumeNotPrecompile`

#### Signature

```solidity
function assumeNotPrecompile(address addr) public;
```

```solidity
function assumeNotPrecompile(address addr, uint256 chainid) public;
```

#### Description

Uses [`assume`](/reference/cheatcodes/assume.mdx) to filter precompile addresses from the fuzz tests.

Optionally, a `chainid` may be specified to filter known precompiles on the respective chain.

#### Registry

These are all the precompile addresses known to the `assumeNotPrecompile` functions.

| Chain ID      | Address                                      | Name                             |
| ------------- | -------------------------------------------- | -------------------------------- |
| ALL           | `0x01`                                       | ECRecover                        |
| ALL           | `0x02`                                       | SHA-256                          |
| ALL           | `0x03`                                       | RIPEMD-160                       |
| ALL           | `0x04`                                       | Identity                         |
| ALL           | `0x05`                                       | ModExp                           |
| ALL           | `0x06`                                       | ECAdd                            |
| ALL           | `0x07`                                       | ECMul                            |
| ALL           | `0x08`                                       | ECPairing                        |
| ALL           | `0x09`                                       | Blake2F                          |
| ALL           | `0x0a`                                       | PointEvaluation                  |
| 10, 420       | `0x4200000000000000000000000000000000000016` | L2ToL1MessagePasser              |
| 10, 420       | `0x4200000000000000000000000000000000000002` | DeployerWhitelist                |
| 10, 420       | `0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000` | LegacyERC20ETH                   |
| 10, 420       | `0x4200000000000000000000000000000000000006` | WETH9                            |
| 10, 420       | `0x4200000000000000000000000000000000000007` | L2CrossDomainMessenger           |
| 10, 420       | `0x4200000000000000000000000000000000000010` | L2StandardBridge                 |
| 10, 420       | `0x4200000000000000000000000000000000000011` | SequencerFeeVault                |
| 10, 420       | `0x4200000000000000000000000000000000000012` | OptimismMintableERC20Factory     |
| 10, 420       | `0x4200000000000000000000000000000000000013` | L1BlockNumber                    |
| 10, 420       | `0x420000000000000000000000000000000000000F` | GasPriceOracle                   |
| 10, 420       | `0x4200000000000000000000000000000000000015` | L1Block                          |
| 10, 420       | `0x4200000000000000000000000000000000000042` | GovernanceToken                  |
| 10, 420       | `0x4200000000000000000000000000000000000000` | LegacyMessagePasser              |
| 10, 420       | `0x4200000000000000000000000000000000000014` | L2ERC721Bridge                   |
| 10, 420       | `0x4200000000000000000000000000000000000017` | OptimismMintableERC721Factory    |
| 10, 420       | `0x4200000000000000000000000000000000000018` | ProxyAdmin                       |
| 42161, 421613 | `0x0000000000000000000000000000000000000064` | ArbSys                           |
| 42161, 421613 | `0x000000000000000000000000000000000000006E` | ArbRetryableTx                   |
| 42161, 421613 | `0x000000000000000000000000000000000000006C` | ArbGasInfo                       |
| 42161, 421613 | `0x0000000000000000000000000000000000000066` | ArbAddressTable                  |
| 42161, 421613 | `0x000000000000000000000000000000000000006F` | ArbStatistics                    |
| 42161, 421613 | `0x00000000000000000000000000000000000000C8` | NodeInterface                    |
| 42161, 421613 | `0x0000000000000000000000000000000000000067` | ArbBLS                           |
| 42161, 421613 | `0x0000000000000000000000000000000000000065` | ArbInfo                          |
| 42161, 421613 | `0x000000000000000000000000000000000000006D` | ArbAggregator                    |
| 42161, 421613 | `0x0000000000000000000000000000000000000068` | ArbFunctionTable                 |
| 433114, 43113 | `0x0200000000000000000000000000000000000000` | ContractDeployerAllowListAddress |
| 433114, 43113 | `0x0200000000000000000000000000000000000001` | ContractNativeMinterAddress      |
| 433114, 43113 | `0x0200000000000000000000000000000000000002` | TxAllowListAddress               |
| 433114, 43113 | `0x0200000000000000000000000000000000000003` | FeeConfigManagerAddress          |
| ALL           | `0x4e59b44847b379578588920cA78FbF26c0B4956C` | (Foundry) Create2Deployer        |
| ALL           | `0x7109709ECfa91a80626fF3989D68f67F5b1DD12D` | (Foundry) VM                     |
| ALL           | `0x000000000000000000636F6e736F6c652e6c6f67` | (Foundry) Console                |

#### Reserved Ranges

Some chains also include reserved ranges for precompile contracts.

| Chain ID      | Start                                        | Stop                                         |
| ------------- | -------------------------------------------- | -------------------------------------------- |
| ALL           | `0x00`                                       | `0xff`                                       |
| 433114, 43113 | `0x0100000000000000000000000000000000000000` | `0x01000000000000000000000000000000000000ff` |
| 433114, 43113 | `0x0200000000000000000000000000000000000000` | `0x02000000000000000000000000000000000000ff` |
| 433114, 43113 | `0x0300000000000000000000000000000000000000` | `0x03000000000000000000000000000000000000ff` |


### `assumePayable`

#### Signature

```solidity
function assumePayable(address addr) public;
```

#### Description

Uses [`assume`](/reference/cheatcodes/assume.mdx) to filter addresses that reject Ether transfers.

This makes an external call to the specified `addr` with a no calldata and checks `assume` against the success of the call.


### `bound`

#### Signature

```solidity
function bound(uint256 x, uint256 min, uint256 max) public returns (uint256 result);
```

#### Description

A mathematical function for wrapping inputs of fuzz tests into a certain range.

You can use it instead of the `assume` cheatcode to get better performance in some cases. Read more [here](/reference/cheatcodes/assume.mdx).

#### Examples

```solidity
input = bound(input, 99, 101);
```

Returns `99` for input `0`.

<br />

Returns `100` for input `1`.

<br />

Returns `101` for input `2`.

<br />

Returns `99` for input `3`.

<br />

And so on.


### `changePrank`

#### Status

`changePrank` is deprecated.

#### Signature

```solidity
function changePrank(address who) internal;
```

#### Description

Stops the active prank with `stopPrank` and passes address to `startPrank`.

Useful for starting a global prank in the `setUp` function and deactivating it in certain tests.


### `checked_write`

#### Signature

```solidity
function checked_write(StdStorage storage self, address who) internal;
```

```solidity
function checked_write(StdStorage storage self, uint256 amt) internal;
```

```solidity
function checked_write(StdStorage storage self, bool write) internal;
```

```solidity
function checked_write(StdStorage storage self, bytes32 set) internal;
```

```solidity
function checked_write_int(StdStorage storage self, int256 val) internal;
```

#### Description

Sets the data to be written to the storage slot(s).

Reverts with a message if unsuccessful.


### `computeCreateAddress`

#### Signature

```solidity
function computeCreateAddress(address deployer, uint256 nonce) internal pure returns (address)
```

#### Description

Compute the address a contract will be deployed at for a given deployer address and nonce. Useful to precalculate the address a contract **will** be deployed at.

#### Example

```solidity
address governanceAddress = computeCreateAddress(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266, 1);

// this contract requires a governance contract which hasn't been deployed yet
Contract contract = new Contract(governanceAddress);
// now we deploy it
Governance governance = new Governance(contract);

// assuming `contract` has a `governance()` accessor
assertEq(governanceAddress, address(governance)); // [PASS]
```


### Console Logging

* Similar to Hardhat's console functions.
* You can use it in calls and transactions. It also works with view and pure functions.
* It always works, regardless of the call or transaction failing or being successful.
* To use it you need import it:
  * `import {console} from "forge-std/console.sol";`
* You can call console.log with up to 4 parameters in any order of following types:
  * `uint`
  * `string`
  * `bool`
  * `address`
* There's also the single parameter API for the types above, and additionally bytes, bytes1... up to bytes32:
  * `console.logInt(int i)`
  * `console.logUint(uint i)`
  * `console.logString(string memory s)`
  * `console.logBool(bool b)`
  * `console.logAddress(address a)`
  * `console.logBytes(bytes memory b)`
  * `console.logBytes1(bytes1 b)`
  * `console.logBytes2(bytes2 b)`
  * ...
  * `console.logBytes32(bytes32 b)`
* console.log implements the same formatting options that can be found in Hardhat's console.log.
  * Example: `console.log("Changing owner from %s to %s", currentOwner, newOwner)`
* console.log is implemented in standard Solidity and it is compatible Anvil and Hardhat Networks.
* console.log calls can run in other networks, like mainnet, kovan, ropsten, etc. They do nothing in those networks, but do spend a minimal amount of gas.

#### `console.log(format[,...args])`

The `console.log()` method prints a formatted string using the first argument as a printf-like format string which can contain zero or more format specifiers. Each specifier is replaced with the converted value from the corresponding argument. Supported specifiers are:

* `%s`: String will be used to convert all values to a human-readable string. `uint256`, `int256` and `bytes` values are converted to their `0x` hex encoded values.
* `%d`: Number will be used to convert all values to a human-readable string. This is identical to `%s`.
* `%i`: Works the same way as `%d`.
* `%e`: The exponential representation of a number. For `uint256` and `int256` types.
* `%x`: The hexadecimal representation of a number. For `uint256` and `int256` types.
* `%o`: Object. A string representation of an object with generic JavaScript-styled object formatting. For solidity types, this basically surround the string representation of the value in single-quotes.
* `%%`: single percent sign ('%'). This does not consume an argument.
* Returns: `<string>` The formatted string

If a specifier does not have a corresponding argument, it is not replaced:

```solidity
console.log("%s:%s", "foo");
// Returns: "foo:%s"
```

Values that are not part of the format string are formatted using as a human-readable string representation.

If there are more arguments passed to the console.log() method than the number of specifiers, the extra arguments are concatenated to the returned string, separated by spaces:

```solidity
console.log("%s:%s", "foo", "bar", "baz");
// Returns: "foo:bar baz"
```

If only one argument is passed to console.log(), it is returned as it is without any formatting:

```solidity
console.log("%% %s");
// Returns: "%% %s"
```

The String format specifier (`%s`) should be used in most cases unless specific functionality is needed from other format specifiers.


### `deal`

#### Signature

```solidity
function deal(address to, uint256 give) public;
```

```solidity
function deal(address token, address to, uint256 give) public;
```

```solidity
function deal(address token, address to, uint256 give, bool adjust) public;
```

#### Description

A wrapper around the [`deal`](/reference/cheatcodes/deal.mdx) cheatcode that also works for most ERC-20 tokens.

If the alternative signature of `deal` is used, adjusts the token's total supply after setting the balance.

#### Examples

```solidity
deal(address(dai), alice, 10000e18);
assertEq(dai.balanceOf(alice), 10000e18);
```


### `delta`

#### Signature

```solidity
function delta(uint256 a, uint256 b) internal pure returns (uint256)
```

```solidity
function delta(int256 a, int256 b) internal pure returns (uint256)
```

#### Description

Returns the difference between two numbers in absolute value.

#### Example

```solidity
uint256 four = stdMath.delta(-1, 3);
```


### `deployCode`

#### Signature

```solidity
function deployCode(string memory what) public returns (address);
```

```solidity
function deployCode(string memory what, bytes memory args) public returns (address);
```

```solidity
function deployCode(string memory what, uint256 val) public returns (address);
```

```solidity
function deployCode(string memory what, bytes memory args, uint256 val) public returns (address);
```

#### Description

Deploys a contract by fetching the contract bytecode from the artifacts directory.

The calldata parameter can either be in the form `ContractFile.sol` (if the filename and contract name are the same), `ContractFile.sol:ContractName`, or the path to an artifact, relative to the root of your project.

Values can also be passed by using the `val` parameter. This is necessary if you need to send ETH on construction.

#### Examples

```solidity
address deployment = deployCode("MyContract.sol", abi.encode(arg1, arg2));
```

#### SEE ALSO

Forge Standard Library

* [`deployCodeTo`](/reference/forge-std/deployCodeTo.mdx)


### `deployCodeTo`

#### Signature

```solidity
function deployCodeTo(string memory what, address where) internal virtual;
```

```solidity
function deployCodeTo(string memory what, bytes memory args, address where) internal virtual;
```

```solidity
function deployCodeTo(string memory what, bytes memory args, uint256 value, address where) internal virtual;
```

#### Description

Pseudo-deploys a contract to an arbitrary address by fetching the contract bytecode from the artifacts directory. This can be used to recreate the production environment.

The calldata parameter can either be in the form `ContractFile.sol` (if the filename and contract name are the same), `ContractFile.sol:ContractName`, or the path to an artifact, relative to the root of your project.

Values can also be passed by using the `value` parameter. This is necessary if you need to send ETH on construction.

#### Examples

```solidity
deployCodeTo("MyContract.sol", abi.encode(arg1, arg2), arbitraryAddr);
```

#### SEE ALSO

Forge Standard Library

* [`deployCode`](/reference/forge-std/deployCode.mdx)


### `depth`

#### Signature

```solidity
function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage);
```

#### Description

Sets the position of the value in the `tuple` (e.g. inside a `struct`).

Default value: `uint256(0)`


### `deriveRememberKey`

#### Signature

```solidity
function deriveRememberKey(string memory mnemonic, uint32 index) internal returns (address who, uint256 privateKey)
```

#### Description

Derive a private key from a mnemonic and also store it in forge's local wallet. Returns the address and private key.

#### Example

Get a private key and address from the test mnemonic at path `m/44'/60'/0'/0/0`. Use them to sign some data and start broadcasting transactions:

```solidity
string memory mnemonic = "test test test test test test test test test test test junk";

(address deployer, uint256 privateKey) = deriveRememberKey(mnemonic, 0);

bytes32 hash = keccak256("Signed by deployer");
(uint8 v, bytes32 r, bytes32 s) = vm.sign(privateKey, hash);

vm.startBroadcast(deployer);
...
vm.stopBroadcast();
```

Get an address from the test mnemonic at path `m/44'/60'/0'/0/0` to start broadcasting transactions:

```solidity
string memory mnemonic = "test test test test test test test test test test test junk";

(address deployer, ) = deriveRememberKey(mnemonic, 0);

vm.startBroadcast(deployer);
...
vm.stopBroadcast();
```

#### SEE ALSO

Cheatcodes:

* [deriveKey](/reference/cheatcodes/derive-key.mdx)
* [rememberKey](/reference/cheatcodes/remember-key.mdx)


### `divisionError`

#### Signature

```solidity
stdError.divisionError
```

#### Description

The internal Solidity error when a division fails, e.g. division by zero.


### `enable_packed_slots`

#### Signature

```solidity
function enable_packed_slots(StdStorage storage self) internal returns (StdStorage storage);
```

#### Description

Enables the usage of packed storage slots

#### Examples

```solidity
// Write arbitrary balances even on gas-optimized contracts like AUSD
stdstore
    .enable_packed_slots()
    .target(_tokenAddress)
    .sig("balanceOf(address)")
    .with_key(_to)
    .checked_write(
        _amount
    );
```


### `encodeStorageError`

#### Signature

```solidity
stdError.encodeStorageError
```

#### Description

The internal Solidity error when trying to access data in storage that is corrupted. Data cannot be corrupted unless assembly had been used.


### `enumConversionError`

#### Signature

```solidity
stdError.enumConversionError
```

#### Description

The internal Solidity error when trying to convert a number to a variant of an enum, if the number is larger than the number of variants in the enum (counting from 0).


### `fail`

#### Signature

```solidity
function fail(string memory err) internal virtual;
```

#### Description

Fail a test with a message if a certain branch or execution point is hit.

#### Examples

```solidity
function test() external {
    for(uint256 place; place < 10; ++i){
        if(game.leaderboard(place) == address(this)) return;
    }
    fail("Not in the top 10.");
}
```


### `find`

#### Signature

```solidity
function find(StdStorage storage self) internal returns (uint256);
```

#### Description

Finds an arbitrary storage slot given [`target`](/reference/forge-std/target.mdx), [`sig`](/reference/forge-std/sig.mdx), [`with_key`](/reference/forge-std/with_key.mdx)(s), and [`depth`](/reference/forge-std/depth.mdx).

Reverts with a message if unsuccessful.


### `hoax`

#### Signature

```solidity
function hoax(address who) public;
```

```solidity
function hoax(address who, uint256 give) public;
```

```solidity
function hoax(address who, address origin) public;
```

```solidity
function hoax(address who, address origin, uint256 give) public;
```

#### Description

Sets up a [`prank`](/reference/cheatcodes/prank.mdx) from an address that has some ether.

If the balance is not specified, it will be set to 2^128 wei.


### `indexOOBError`

#### Signature

```solidity
stdError.indexOOBError
```

#### Description

The internal Solidity error when trying to access an element of an array that is out of bounds.

Will not work for empty arrays in external contracts. For those, use `expectRevert` without any arguments.


### `makeAddrAndKey`

#### Signature

```solidity
function makeAddrAndKey(string memory name) internal returns(address addr, uint256 privateKey);
```

#### Description

Creates an address and private key derived from the provided `name`.

A [`label`](/reference/cheatcodes/label.mdx) is created for the derived address with the provided `name` used as the label value.

#### Examples

```solidity
(address alice, uint256 key) = makeAddrAndKey("alice");
emit log_address(alice); // 0x328809bc894f92807417d2dad6b7c998c1afdac6
emit log_uint(key); // 70564938991660933374592024341600875602376452319261984317470407481576058979585
```


### `makeAddr`

#### Signature

```solidity
function makeAddr(string memory name) internal returns(address addr);
```

#### Description

Creates an address derived from the provided `name`.

A [`label`](/reference/cheatcodes/label.mdx) is created for the derived address with the provided `name` used as the label value.

#### Examples

```solidity
address alice = makeAddr("alice");
emit log_address(alice); // 0x328809bc894f92807417d2dad6b7c998c1afdac6
```


### `memOverflowError`

#### Signature

```solidity
stdError.memOverflowError
```

#### Description

The internal Solidity error when trying to allocate a dynamic memory array with more than 2^64-1 items.


### `noGasMetering`

#### Signature

```solidity
modifier noGasMetering();
```

#### Description

A function modifier that turns off gas metering for the life of the function.

Note, there is some gas associated with calling the cheatcode, so you will see some gas usage (albeit small) when using this modifier.

#### Examples

```solidity
function addInLoop() internal returns (uint256) {
    uint256 b;
    for (uint256 i; i < 10000; i++) {
        b + i;
    }
    return b;
}

function addInLoopNoGas() internal noGasMetering returns (uint256) {
    return addInLoop();
}

function testFunc() external {
  uint256 gas_start = gasleft();
  addInLoop();
  uint256 gas_used = gas_start - gasleft();

  uint256 gas_start_no_metering = gasleft();
  addInLoopNoGas();
  uint256 gas_used_no_metering = gas_start_no_metering - gasleft();

  emit log_named_uint("Gas Metering", gas_used);
  emit log_named_uint("No Gas Metering", gas_used_no_metering);
}
```

```
[PASS] testFunc() (gas: 1887191)
Logs:
  Gas Metering: 1880082
  No Gas Metering: 3024
```


### Forge Standard Library Reference

Forge Standard Library (Forge Std for short) is a collection of helpful contracts that make writing tests easier, faster, and more user-friendly.

Using Forge Std is the preferred way of writing tests with Foundry.

What's included:

* `Vm.sol`: Up-to-date [cheatcodes interface](/reference/cheatcodes/overview#cheatcodes-interface)

  ```solidity
  import {Vm} from "forge-std/Vm.sol";
  ```

* [`console.sol`](/reference/forge-std/console-log.mdx) and `console2.sol`: Hardhat-style logging functionality

  ```solidity
  import {console} from "forge-std/console.sol";
  ```

  **Note:** `console2.sol` contains patches to `console.sol` that allow Forge to decode traces for calls to the console, but it is not compatible with Hardhat.

  ```solidity
  import {console2} from "forge-std/console2.sol";
  ```

* `Script.sol`: Basic utilities for [Solidity scripting](/guides/scripting-with-solidity)

  ```solidity
  import {Script} from "forge-std/Script.sol";
  ```

* `Test.sol`: The complete Forge Std experience (more details [below](#forge-stds-test))

  ```solidity
  import {Test} from "forge-std/Test.sol";
  ```

#### Forge Std's `Test`

The `Test` contract in `Test.sol` provides all the essential functionality you need to get started writing tests.

Simply import `Test.sol` and inherit from `Test` in your test contract:

```solidity
import {Test} from "forge-std/Test.sol";

contract ContractTest is Test { ...
```

What's included:

* Std Libraries

  * [Std Logs](/reference/forge-std/std-logs.mdx): Expand upon the logging events from the DSTest library.
  * [Std Assertions](/reference/forge-std/std-assertions.mdx): Expand upon the assertion functions from the DSTest library.
  * [Std Cheats](/reference/forge-std/std-cheats.mdx): Wrappers around Forge cheatcodes for improved safety and DX.
  * [Std Errors](/reference/forge-std/std-errors.mdx): Wrappers around common internal Solidity errors and reverts.
  * [Std Storage](/reference/forge-std/std-storage.mdx): Utilities for storage manipulation.
  * [Std Math](/reference/forge-std/std-math.mdx): Useful mathematical functions.
  * [Script Utils](/reference/forge-std/script-utils.mdx): Utility functions which can be accessed in tests and scripts.
  * [Console Logging](/reference/forge-std/console-log.mdx): Console logging functions.

* A cheatcodes instance `vm`, from which you invoke Forge cheatcodes (see [Cheatcodes Reference](/reference/cheatcodes/overview))

  ```solidity
  vm.startPrank(alice);
  ```

* All Hardhat `console` functions for logging (see [Console Logging](/reference/forge-std/console-log.mdx))

  ```solidity
  console.log(alice.balance); // or `console2`
  ```

* All Dappsys Test functions for asserting and logging (see [Dappsys Test reference](/reference/ds-test.md))

  ```solidity
  assertEq(dai.balanceOf(alice), 10000e18);
  ```

* Utility functions also included in `Script.sol` (see [Script Utils](/reference/forge-std/script-utils.mdx))

  ```solidity
  // Compute the address a contract will be deployed at for a given deployer address and nonce
  address futureContract = computeCreateAddress(alice, 1);
  ```


### `percentDelta`

#### Signature

```solidity
function percentDelta(uint256 a, uint256 b) internal pure returns (uint256)
```

```solidity
function percentDelta(int256 a, int256 b) internal pure returns (uint256)
```

#### Description

Returns the difference between two numbers in percentage, where `1e18` is 100%.
More precisely, `percentDelta(a, b)` computes `abs((a-b) / b) * 1e18`.

#### Example

```solidity
uint256 percent150 = stdMath.percentDelta(uint256(125), 50);
uint256 percent60 = stdMath.percentDelta(uint256(50), 125);
```


### `popError`

#### Signature

```solidity
stdError.popError
```

#### Description

The internal Solidity error when trying to pop an element off of an empty array.


### `read`

#### Signature

```solidity
function read_bytes32(StdStorage storage self) internal returns (bytes32);
```

```solidity
function read_bool(StdStorage storage self) internal returns (bool);
```

```solidity
function read_address(StdStorage storage self) internal returns (address);
```

```solidity
function read_uint(StdStorage storage self) internal returns (uint256);
```

```solidity
function read_int(StdStorage storage self) internal returns (int256);
```

#### Description

Reads the value from the storage slot as `bytes32`, `bool`, `address`, `uint256`, or `int256`.

Reverts with a message if unsuccessful.


### `rewind`

#### Signature

```solidity
function rewind(uint256 time) public;
```

#### Description

Rewinds `block.timestamp` by the specified number of seconds.

#### Examples

```solidity
assertEq(block.timestamp, 3600);
rewind(3600);
assertEq(block.timestamp, 0);
```


### Script Utils

* [`computeCreateAddress`](/reference/forge-std/compute-create-address.mdx)
* [`deriveRememberKey`](/reference/forge-std/derive-remember-key.mdx)


### `sig`

#### Signature

```solidity
function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage);
```

```solidity
function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage);
```

#### Description

Sets the 4-byte selector of the function to static call.

Default value: `hex"00000000"`

#### Examples

```solidity
uint256 slot = stdstore
    .target(addr)
    .sig(addr.fun.selector)
    .with_key(1)
    .find();
```

```solidity
uint256 slot = stdstore
    .target(addr)
    .sig("fun(uint256)")
    .with_key(1)
    .find();
```


### `skip`

#### Signature

```solidity
function skip(uint256 time) public;
```

#### Description

Skips forward `block.timestamp` by the specified number of seconds.

#### Examples

```solidity
assertEq(block.timestamp, 0);
skip(3600);
assertEq(block.timestamp, 3600);
```


### `startHoax`

#### Signature

```solidity
function startHoax(address who) public;
```

```solidity
function startHoax(address who, uint256 give) public;
```

```solidity
function startHoax(address who, address origin) public;
```

```solidity
function startHoax(address who, address origin, uint256 give) public;
```

#### Description

Start a [perpetual `prank`](/reference/cheatcodes/start-prank.mdx) from an address that has some ether.

If the balance is not specified, it will be set to 2^128 wei.


### Std Assertions

* [`fail`](/reference/forge-std/fail.mdx)
* [`assertTrue`](/reference/forge-std/assertTrue.mdx)
* [`assertFalse`](/reference/forge-std/assertFalse.mdx)
* [`assertEq`](/reference/forge-std/assertEq.mdx)
* [`assertEqDecimal`](/reference/forge-std/assertEqDecimal.mdx)
* [`assertNotEq`](/reference/forge-std/assertNotEq.mdx)
* [`assertNotEqDecimal`](/reference/forge-std/assertNotEqDecimal.mdx)
* [`assertLt`](/reference/forge-std/assertLt.mdx)
* [`assertLtDecimal`](/reference/forge-std/assertLtDecimal.mdx)
* [`assertGt`](/reference/forge-std/assertGt.mdx)
* [`assertGtDecimal`](/reference/forge-std/assertGtDecimal.mdx)
* [`assertLe`](/reference/forge-std/assertLe.mdx)
* [`assertLeDecimal`](/reference/forge-std/assertLeDecimal.mdx)
* [`assertGe`](/reference/forge-std/assertGe.mdx)
* [`assertGeDecimal`](/reference/forge-std/assertGeDecimal.mdx)
* [`assertApproxEqAbs`](/reference/forge-std/assertApproxEqAbs.mdx)
* [`assertApproxEqAbsDecimal`](/reference/forge-std/assertApproxEqAbsDecimal.mdx)
* [`assertApproxEqRel`](/reference/forge-std/assertApproxEqRel.mdx)
* [`assertApproxEqRelDecimal`](/reference/forge-std/assertApproxEqRelDecimal.mdx)


### Std Cheats

* [`skip`](/reference/forge-std/skip.mdx)
* [`rewind`](/reference/forge-std/rewind.mdx)
* [`hoax`](/reference/forge-std/hoax.mdx)
* [`startHoax`](/reference/forge-std/startHoax.mdx)
* [`deal`](/reference/forge-std/deal.mdx)
* [`deployCode`](/reference/forge-std/deployCode.mdx)
* [`deployCodeTo`](/reference/forge-std/deployCodeTo.mdx)
* [`bound`](/reference/forge-std/bound.mdx)
* [`changePrank`](/reference/forge-std/change-prank.mdx)
* [`makeAddr`](/reference/forge-std/make-addr.mdx)
* [`makeAddrAndKey`](/reference/forge-std/make-addr-and-key.mdx)
* [`noGasMetering`](/reference/forge-std/noGasMetering.mdx)


### Std Errors

* [`assertionError`](/reference/forge-std/assertionError.mdx)
* [`arithmeticError`](/reference/forge-std/arithmeticError.mdx)
* [`divisionError`](/reference/forge-std/divisionError.mdx)
* [`enumConversionError`](/reference/forge-std/enumConversionError.mdx)
* [`encodeStorageError`](/reference/forge-std/encodeStorageError.mdx)
* [`popError`](/reference/forge-std/popError.mdx)
* [`indexOOBError`](/reference/forge-std/indexOOBError.mdx)
* [`memOverflowError`](/reference/forge-std/memOverflowError.mdx)
* [`zeroVarError`](/reference/forge-std/zeroVarError.mdx)


### Std Logs

Std Logs expand upon the logging events from the [`DSTest`](../ds-test.md#logging) library.

#### Events

```solidity
event log_array(uint256[] val);
event log_array(int256[] val);
event log_named_array(string key, uint256[] val);
event log_named_array(string key, int256[] val);
```

#### Usage

This section provides usage examples.

##### log\_array

```solidity
event log_array(<type>[] val);
```

Where `<type>` can be `int256`, `uint256`, `address`.

##### Example

```solidity
// Assuming storage
// uint256[] data = [10, 20, 30, 40, 50]; 

emit log_array(data);
```

##### log\_named\_array

```solidity
event log_named_array(string key, <type>[] val);
```

Where `<type>` can be `int256`, `uint256`, `address`.

##### Example

```solidity
// Assuming storage
// uint256[] data = [10, 20, 30, 40, 50]; 

emit log_named_array("Data", data);
```


### Std Math

* [`abs`](/reference/forge-std/abs.mdx)
* [`delta`](/reference/forge-std/delta.mdx)
* [`percentDelta`](/reference/forge-std/percentDelta.mdx)


### Std Storage

Std Storage is a library that makes manipulating storage easy.

To use Std Storage, import the following in your test contract:

```solidity
import {stdStorage, StdStorage} from "forge-std/Test.sol";
```

Add the following line in your test contract:

```solidity
using stdStorage for StdStorage;
```

Then, access Std Storage via the `stdstore` instance.

#### Functions

Query functions:

* [`target`](/reference/forge-std/target.mdx): Set the address of the target contract
* [`sig`](/reference/forge-std/sig.mdx): Set the 4-byte selector of the function to static call
* [`with_key`](/reference/forge-std/with_key.mdx): Pass an argument to the function (can be used multiple times)
* [`depth`](/reference/forge-std/depth.mdx): Set the position of the value in the `tuple` (e.g. inside a `struct`)
* [`enable_packed_slots`](/reference/forge-std/enable_packed_slots.mdx): Allow the use of packed storage slots

Terminator functions:

* [`find`](/reference/forge-std/find.mdx): Return the slot number
* [`checked_write`](/reference/forge-std/checked_write.mdx): Set the data to be written to the storage slot(s)
* [`read_<type>`](/reference/forge-std/read.mdx): Read the value from the storage slot as `<type>`

#### Simple Example

`playerToCharacter` tracks info about players' characters.

```solidity
// MetaRPG.sol

struct Character {
    string name;
    uint256 level;
}

mapping (address => Character) public playerToCharacter;
```

Let's say we want to set the level of our character to 120.

```solidity
// MetaRPG.t.sol

stdstore
    .target(address(metaRpg))
    .sig("playerToCharacter(address)")
    .with_key(address(this))
    .depth(1)
    .checked_write(120);
```

#### Packed-Slot Example

`balanceOf()` returns the balance of a user in a gas-optimized ERC20 implementation.
`enable_packed_slots()` also works with [ERC7201 Namespaced Storage Slots](https://eips.ethereum.org/EIPS/eip-7201), proxy patterns, and packed slots as shown in the example below:

````solidity
// AgoraDollar.sol
contract AgoraDollar {
    /// @notice The Erc20AccountData struct
    /// @param isFrozen A boolean to indicate if the account is frozen
    /// @param balance A uint248 to store the balance of the account
    struct Erc20AccountData {
        bool isFrozen;
        uint248 balance;
    }

    /// @notice The Erc20CoreStorage struct
    /// @param accountData A mapping of address to Erc20AccountData to store account data
    /// @custom:storage-location erc7201:AgoraDollarErc1967Proxy.Erc20CoreStorage
    struct Erc20CoreStorage {
        /// @dev _account The account whose data we are accessing
        /// @dev _accountData The account data for the account
        mapping(address _account => Erc20AccountData _accountData) accountData;
    }

    /// @notice The ```ERC20_CORE_STORAGE_SLOT_``` is the storage slot for the Erc20CoreStorage struct
    /// @dev keccak256(abi.encode(uint256(keccak256("AgoraDollarErc1967Proxy.Erc20CoreStorage")) - 1)) & ~bytes32(uint256(0xff))
    bytes32 internal constant ERC20_CORE_STORAGE_SLOT_ =
        0x455730fed596673e69db1907be2e521374ba893f1a04cc5f5dd931616cd6b700;

    /// @notice The ```getPointerToErc20CoreStorage``` function returns a pointer to the Erc20CoreStorage struct
    /// @return $ A pointer to the Erc20CoreStorage struct
    function getPointerToErc20CoreStorage() internal pure returns (Erc20CoreStorage storage $) {
        /// @solidity memory-safe-assembly
        assembly {
            $.slot := ERC20_CORE_STORAGE_SLOT_
        }
    }

    /// @notice The ```balanceOf``` function returns the token balance of a given account
    /// @param _account The account to check the balance of
    /// @return The balance of the account
    function balanceOf(address _account) external view returns (uint256) {
        return getPointerToErc20CoreStorage().accountData[_account].balance;
    }
}
````

Let's say we want a function to set the balance of an address to some amount on the AUSD contract.

```solidity
// TestAgoraDollar.t.sol

function seedUserWithAusd(address _to, uint248 _amount) internal {
    stdstore
        .enable_packed_slots()
        .target(address(Constants.Mainnet.AUSD_ERC20)) //0x00000000eFE302BEAA2b3e6e1b18d08D69a9012a
        .sig("balanceOf(address)")
        .with_key(_to)
        .checked_write(_amount);
}
```

#### Known issues

* Slot(s) may not be found if the `tuple` contains types shorter than 32 bytes


### `target`

#### Signature

```solidity
function target(StdStorage storage self, address _target) internal returns (StdStorage storage);
```

#### Description

Sets the address of the contract.

Default value: `address(0)`


### `with_key`

#### Signature

```solidity
function with_key(StdStorage storage self, address who) internal returns (StdStorage storage);
```

```solidity
function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage);
```

```solidity
function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage);
```

#### Description

Passes an argument to the function.

Can be used multiple times to pass multiple arguments. The order matters.

#### Examples

```solidity
uint256 slot = stdstore
    .target(addr)
    .sig("fun(uint256,address)")
    .with_key(1)
    .with_key(address(this))
    .find();
```


### `zeroVarError`

#### Signature

```solidity
stdError.zeroVarError
```

#### Description

The internal Solidity error when trying to call a function via a function pointer that has not been initialized.

