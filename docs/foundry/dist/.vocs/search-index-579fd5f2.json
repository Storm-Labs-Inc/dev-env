{"documentCount":1407,"nextId":1407,"documentIds":{"0":"docs/pages/anvil/overview.md#anvil","1":"docs/pages/anvil/overview.md#getting-started","2":"docs/pages/anvil/overview.md#notes","3":"docs/pages/anvil/overview.md#eip-7702-and-default-accounts","4":"docs/pages/anvil/reference.md#anvil","5":"docs/pages/anvil/reference.md#name","6":"docs/pages/anvil/reference.md#synopsis","7":"docs/pages/anvil/reference.md#description","8":"docs/pages/anvil/reference.md#mining-modes","9":"docs/pages/anvil/reference.md#supported-transport-layers","10":"docs/pages/anvil/reference.md#default-create2-deployer","11":"docs/pages/anvil/reference.md#supported-rpc-methods","12":"docs/pages/anvil/reference.md#standard-methods","13":"docs/pages/anvil/reference.md#custom-methods","14":"docs/pages/anvil/reference.md#special-methods","15":"docs/pages/anvil/reference.md#otterscan-methods","16":"docs/pages/anvil/reference.md#options","17":"docs/pages/anvil/reference.md#general-options","18":"docs/pages/anvil/reference.md#evm-options","19":"docs/pages/anvil/reference.md#executor-environment-config","20":"docs/pages/anvil/reference.md#server-options","21":"docs/pages/anvil/reference.md#examples","22":"docs/pages/anvil/reference.md#shell-completions","23":"docs/pages/anvil/reference.md#examples-1","24":"docs/pages/anvil/reference.md#usage-within-docker","25":"docs/pages/anvil/reference.md#using-genesisjson","26":"docs/pages/chisel/overview.md#chisel","27":"docs/pages/chisel/overview.md#getting-started","28":"docs/pages/chisel/reference.md#chisel","29":"docs/pages/chisel/reference.md#name","30":"docs/pages/chisel/reference.md#synopsis","31":"docs/pages/chisel/reference.md#subcommands-bin","32":"docs/pages/chisel/reference.md#flags","33":"docs/pages/chisel/reference.md#description","34":"docs/pages/chisel/reference.md#usage","35":"docs/pages/chisel/reference.md#available-commands","36":"docs/pages/forge/debugger.md#debugger","37":"docs/pages/forge/debugger.md#debugger-layout","38":"docs/pages/forge/debugger.md#navigating","39":"docs/pages/forge/debugger.md#general","40":"docs/pages/forge/debugger.md#navigating-calls","41":"docs/pages/forge/debugger.md#navigating-memory","42":"docs/pages/forge/debugger.md#navigating-the-stack","43":"docs/pages/forge/deploying.md#deploying","44":"docs/pages/forge/deploying.md#multi-chain-deployments","45":"docs/pages/forge/deploying.md#verifying-a-pre-existing-contract","46":"docs/pages/forge/deploying.md#troubleshooting","47":"docs/pages/forge/deploying.md#missing-hex-prefix-0x-for-hex-string","48":"docs/pages/forge/deploying.md#eip-1559-not-activated","49":"docs/pages/forge/deploying.md#failed-to-parse-tokens","50":"docs/pages/forge/deploying.md#signature-error","51":"docs/pages/forge/deploying.md#compiler-version-commit-for-verify","52":"docs/pages/forge/deploying.md#invalid-api-key","53":"docs/pages/forge/deploying.md#known-issues","54":"docs/pages/forge/deploying.md#verifying-contracts-with-ambiguous-import-paths","55":"docs/pages/forge/overview.md#forge-overview","56":"docs/pages/forge/overview.md#getting-started","57":"docs/pages/guides/deterministic-deployments-using-create2.md#deterministic-deployments-using-create2","58":"docs/pages/guides/deterministic-deployments-using-create2.md#getting-started","59":"docs/pages/guides/deterministic-deployments-using-create2.md#configuring-your-foundrytoml","60":"docs/pages/guides/deterministic-deployments-using-create2.md#solc-version","61":"docs/pages/guides/deterministic-deployments-using-create2.md#evm-version","62":"docs/pages/guides/deterministic-deployments-using-create2.md#metadata-and-bytecode","63":"docs/pages/guides/deterministic-deployments-using-create2.md#optimizer","64":"docs/pages/guides/deterministic-deployments-using-create2.md#create2-factory","65":"docs/pages/guides/deterministic-deployments-using-create2.md#deploying-the-contract","66":"docs/pages/guides/deterministic-deployments-using-create2.md#additional-resources","67":"docs/pages/guides/eip712.md#implementing-and-testing-eip-712-signatures","68":"docs/pages/guides/eip712.md#eip-712-commands","69":"docs/pages/guides/eip712.md#forge-eip712","70":"docs/pages/guides/eip712.md#forge-bind-json","71":"docs/pages/guides/eip712.md#eip-712-cheatcodes","72":"docs/pages/guides/eip712.md#vmeip712hashtype","73":"docs/pages/guides/eip712.md#vmeip712hashstruct","74":"docs/pages/guides/eip712.md#vmeip712hashtypeddata","75":"docs/pages/guides/eip712.md#testing-uniswaps-permithash-library","76":"docs/pages/guides/eip712.md#setting-up-the-test-environment","77":"docs/pages/guides/eip712.md#validating-typhash","78":"docs/pages/guides/eip712.md#validating-structhash","79":"docs/pages/guides/forking-mainnet-with-cast-anvil.md#forking-mainnet-with-cast-and-anvil","80":"docs/pages/guides/forking-mainnet-with-cast-anvil.md#getting-started","81":"docs/pages/guides/forking-mainnet-with-cast-anvil.md#transferring-dai","82":"docs/pages/guides/foundry-in-docker.md#running-foundry-inside-of-docker","83":"docs/pages/guides/foundry-in-docker.md#installation-and-setup","84":"docs/pages/guides/foundry-in-docker.md#a-tour-around-the-foundry-docker-image","85":"docs/pages/guides/foundry-in-docker.md#creating-a-build-and-test-image","86":"docs/pages/guides/foundry-in-docker.md#creating-a-deployer-image","87":"docs/pages/guides/foundry-in-docker.md#why-is-this-useful","88":"docs/pages/guides/foundry-in-docker.md#using-docker-compose-to-launch-anvil","89":"docs/pages/guides/scripting-with-solidity.md#scripting-with-solidity","90":"docs/pages/guides/scripting-with-solidity.md#overview","91":"docs/pages/guides/scripting-with-solidity.md#getting-started","92":"docs/pages/guides/scripting-with-solidity.md#deploying-our-contract","93":"docs/pages/guides/scripting-with-solidity.md#configuring-foundrytoml","94":"docs/pages/guides/scripting-with-solidity.md#writing-the-script","95":"docs/pages/guides/scripting-with-solidity.md#deploying-to-a-testnet","96":"docs/pages/guides/scripting-with-solidity.md#deploying-to-a-local-anvil-instance","97":"docs/pages/guides/video-tutorials.mdx#foundry-tutorial-videos","98":"docs/pages/config/continuous-integration.md#continuous-integration","99":"docs/pages/config/continuous-integration.md#github-actions","100":"docs/pages/config/continuous-integration.md#travis-ci","101":"docs/pages/config/continuous-integration.md#gitlab-ci","102":"docs/pages/config/dynamic-test-linking.md#dynamic-test-linking","103":"docs/pages/config/hardhat.md#integrating-with-hardhat","104":"docs/pages/config/hardhat.md#why-does-this-not-work-out-of-the-box","105":"docs/pages/config/hardhat.md#just-show-me-the-example-repo","106":"docs/pages/config/hardhat.md#adding-hardhat-to-a-foundry-project","107":"docs/pages/config/hardhat.md#adding-foundry-to-a-hardhat-project","108":"docs/pages/config/overview.md#configuring-your-foundrytoml","109":"docs/pages/config/overview.md#standalone-sections","110":"docs/pages/config/shell-autocompletion.md#shell-autocompletion","111":"docs/pages/config/shell-autocompletion.md#zsh","112":"docs/pages/config/shell-autocompletion.md#fish","113":"docs/pages/config/shell-autocompletion.md#bash","114":"docs/pages/config/static-analyzers.md#static-analyzers","115":"docs/pages/config/static-analyzers.md#slither","116":"docs/pages/config/static-analyzers.md#aderyn","117":"docs/pages/config/static-analyzers.md#mythril","118":"docs/pages/config/vscode.md#integrating-with-vscode","119":"docs/pages/config/vscode.md#1-remappings","120":"docs/pages/config/vscode.md#2-dependencies","121":"docs/pages/config/vscode.md#3-formatter","122":"docs/pages/config/vscode.md#4-solc-version","123":"docs/pages/config/vscode.md#example-of-using-openzeppelin-contracts-and-non-standard-project-layout","124":"docs/pages/config/vyper.md#vyper-support","125":"docs/pages/config/vyper.md#1-compilation","126":"docs/pages/config/vyper.md#vyper-libraries-via-forge-install","127":"docs/pages/config/vyper.md#vyper-libraries-via-pip","128":"docs/pages/config/vyper.md#2-solidity-tests","129":"docs/pages/config/vyper.md#3-deploying","130":"docs/pages/config/vyper.md#4-vyper-scripts","131":"docs/pages/config/vyper.md#5-limitations","132":"docs/pages/cast/overview.md#cast","133":"docs/pages/cast/overview.md#getting-started","134":"docs/pages/introduction/getting-started.mdx#getting-started","135":"docs/pages/introduction/getting-started.mdx#forge","136":"docs/pages/introduction/getting-started.mdx#initialize-a-new-project","137":"docs/pages/introduction/getting-started.mdx#build-and-test-contracts","138":"docs/pages/introduction/getting-started.mdx#deploy-contracts","139":"docs/pages/introduction/getting-started.mdx#anvil","140":"docs/pages/introduction/getting-started.mdx#start-a-local-development-node","141":"docs/pages/introduction/getting-started.mdx#fork-mainnet-state","142":"docs/pages/introduction/getting-started.mdx#cast","143":"docs/pages/introduction/getting-started.mdx#read-contract-data","144":"docs/pages/introduction/getting-started.mdx#send-transactions","145":"docs/pages/introduction/getting-started.mdx#interact-with-json-rpc","146":"docs/pages/introduction/getting-started.mdx#chisel","147":"docs/pages/introduction/getting-started.mdx#start-the-repl","148":"docs/pages/introduction/getting-started.mdx#interactive-solidity-development","149":"docs/pages/introduction/installation.md#installation","150":"docs/pages/introduction/installation.md#precompiled-binaries","151":"docs/pages/introduction/installation.md#using-foundryup","152":"docs/pages/introduction/installation.md#verify-integrity-and-provenance-of-binaries","153":"docs/pages/introduction/installation.md#building-from-source","154":"docs/pages/introduction/installation.md#prerequisites","155":"docs/pages/introduction/installation.md#building","156":"docs/pages/introduction/installation.md#ci-installation-with-github-actions","157":"docs/pages/introduction/installation.md#using-foundry-with-docker","158":"docs/pages/introduction/installation.md#uninstalling","159":"docs/pages/introduction/overview.md#foundry-overview","160":"docs/pages/introduction/overview.md#navigating-the-documentation","161":"docs/pages/introduction/overview.md#getting-started","162":"docs/pages/introduction/overview.md#guides","163":"docs/pages/introduction/overview.md#project-setup","164":"docs/pages/introduction/overview.md#forge","165":"docs/pages/introduction/overview.md#cast","166":"docs/pages/introduction/overview.md#anvil","167":"docs/pages/introduction/overview.md#chisel","168":"docs/pages/introduction/overview.md#configuration","169":"docs/pages/introduction/overview.md#contributing","170":"docs/pages/introduction/overview.md#reference","171":"docs/pages/introduction/prompting.mdx#prompting","172":"docs/pages/introduction/prompting.mdx#build-smart-contracts-using-a-prompt","173":"docs/pages/introduction/prompting.mdx#example-usage","174":"docs/pages/misc/README.md#miscellaneous","175":"docs/pages/misc/faq.md#faq","176":"docs/pages/misc/faq.md#i-cant-build-from-source","177":"docs/pages/misc/faq.md#libusb-error-when-running-forgecast","178":"docs/pages/misc/faq.md#out-of-date-glibc","179":"docs/pages/misc/faq.md#help-i-cant-see-my-logs","180":"docs/pages/misc/faq.md#my-tests-are-failing-and-i-dont-know-why","181":"docs/pages/misc/faq.md#how-do-i-use-consolelog","182":"docs/pages/misc/faq.md#how-do-i-run-specific-tests","183":"docs/pages/misc/faq.md#how-do-i-use-a-specific-solidity-compiler","184":"docs/pages/misc/faq.md#how-do-i-fork-from-a-live-network","185":"docs/pages/misc/faq.md#how-do-i-add-my-own-assertions","186":"docs/pages/misc/faq.md#how-do-i-use-forge-offline","187":"docs/pages/misc/faq.md#im-getting-solc-errors","188":"docs/pages/misc/faq.md#forge-fails-in-javascript-monorepos-pnpm","189":"docs/pages/misc/faq.md#im-getting-permission-denied-os-error-13","190":"docs/pages/misc/faq.md#connection-refused-when-running-forge-build","191":"docs/pages/misc/faq.md#im-getting-notactivated-evmerror-notactivated-error-in-my-tests","192":"docs/pages/misc/struct-encoding.md#struct-encoding","193":"docs/pages/misc/v1.0-migration.md#foundry-v10-migration-guide","194":"docs/pages/misc/v1.0-migration.md#solc-optimizer-disabled-by-default","195":"docs/pages/misc/v1.0-migration.md#expect-revert-cheatcode-disabled-on-internal-calls-by-default","196":"docs/pages/misc/v1.0-migration.md#removed-support-for-testfail-tests","197":"docs/pages/misc/v1.0-migration.md#removed-support-for-legacy-consolesol-signatures","198":"docs/pages/misc/v1.0-migration.md#conflicting-remappings-are-ignored","199":"docs/pages/misc/v1.0-migration.md#artifacts-not-persisted-on-forge-coverage","200":"docs/pages/misc/v1.0-migration.md#other","201":"docs/pages/reference/README.md#references","202":"docs/pages/reference/ds-test.md#dstest-reference","203":"docs/pages/reference/ds-test.md#logging","204":"docs/pages/reference/ds-test.md#logging-events","205":"docs/pages/reference/ds-test.md#log","206":"docs/pages/reference/ds-test.md#example","207":"docs/pages/reference/ds-test.md#logs","208":"docs/pages/reference/ds-test.md#example-1","209":"docs/pages/reference/ds-test.md#log_type","210":"docs/pages/reference/ds-test.md#example-2","211":"docs/pages/reference/ds-test.md#log_named_type","212":"docs/pages/reference/ds-test.md#example-3","213":"docs/pages/reference/ds-test.md#log_named_decimal_type","214":"docs/pages/reference/ds-test.md#example-4","215":"docs/pages/reference/ds-test.md#asserting","216":"docs/pages/reference/ds-test.md#assertion-functions","217":"docs/pages/reference/ds-test.md#asserttrue","218":"docs/pages/reference/ds-test.md#example-5","219":"docs/pages/reference/ds-test.md#asserteq","220":"docs/pages/reference/ds-test.md#example-6","221":"docs/pages/reference/ds-test.md#asserteqdecimal","222":"docs/pages/reference/ds-test.md#example-7","223":"docs/pages/reference/ds-test.md#asserteq32","224":"docs/pages/reference/ds-test.md#example-8","225":"docs/pages/reference/ds-test.md#asserteq0","226":"docs/pages/reference/ds-test.md#example-9","227":"docs/pages/reference/ds-test.md#assertgt","228":"docs/pages/reference/ds-test.md#example-10","229":"docs/pages/reference/ds-test.md#assertgtdecimal","230":"docs/pages/reference/ds-test.md#example-11","231":"docs/pages/reference/ds-test.md#assertge","232":"docs/pages/reference/ds-test.md#example-12","233":"docs/pages/reference/ds-test.md#assertgedecimal","234":"docs/pages/reference/ds-test.md#example-13","235":"docs/pages/reference/ds-test.md#assertlt","236":"docs/pages/reference/ds-test.md#example-14","237":"docs/pages/reference/ds-test.md#assertltdecimal","238":"docs/pages/reference/ds-test.md#example-15","239":"docs/pages/reference/ds-test.md#assertle","240":"docs/pages/reference/ds-test.md#example-16","241":"docs/pages/reference/ds-test.md#assertledecimal","242":"docs/pages/reference/ds-test.md#example-17","243":"docs/pages/reference/ds-test.md#assertapproxeqabs","244":"docs/pages/reference/ds-test.md#example-18","245":"docs/pages/reference/ds-test.md#assertapproxeqrel","246":"docs/pages/reference/ds-test.md#example-19","247":"docs/pages/forge/advanced-testing/differential-ffi-testing.md#differential-testing","248":"docs/pages/forge/advanced-testing/differential-ffi-testing.md#background","249":"docs/pages/forge/advanced-testing/differential-ffi-testing.md#primer-the-ffi-cheatcode","250":"docs/pages/forge/advanced-testing/differential-ffi-testing.md#example-differential-testing-merkle-tree-implementations","251":"docs/pages/forge/advanced-testing/differential-ffi-testing.md#differential-fuzzing-against-a-reference-typescript-implementation","252":"docs/pages/forge/advanced-testing/differential-ffi-testing.md#differential-fuzzing-against-openzeppelins-merkle-proof-library","253":"docs/pages/forge/advanced-testing/differential-ffi-testing.md#differential-testing-against-a-known-edge-case","254":"docs/pages/forge/advanced-testing/differential-ffi-testing.md#standardized-testing-against-reference-data","255":"docs/pages/forge/advanced-testing/differential-ffi-testing.md#example-differential-testing-gradual-dutch-auctions","256":"docs/pages/forge/advanced-testing/differential-ffi-testing.md#reference-repositories","257":"docs/pages/forge/advanced-testing/fuzz-testing.md#fuzz-testing","258":"docs/pages/forge/advanced-testing/fuzz-testing.md#interpreting-results","259":"docs/pages/forge/advanced-testing/fuzz-testing.md#configuring-fuzz-test-execution","260":"docs/pages/forge/advanced-testing/fuzz-testing.md#fuzz-test-fixtures","261":"docs/pages/forge/advanced-testing/invariant-testing.md#invariant-testing","262":"docs/pages/forge/advanced-testing/invariant-testing.md#overview","263":"docs/pages/forge/advanced-testing/invariant-testing.md#configuring-invariant-test-execution","264":"docs/pages/forge/advanced-testing/invariant-testing.md#defining-invariants","265":"docs/pages/forge/advanced-testing/invariant-testing.md#conditional-invariants","266":"docs/pages/forge/advanced-testing/invariant-testing.md#invariant-targets","267":"docs/pages/forge/advanced-testing/invariant-testing.md#function-call-probability-distribution","268":"docs/pages/forge/advanced-testing/invariant-testing.md#invariant-test-helper-functions","269":"docs/pages/forge/advanced-testing/invariant-testing.md#target-contract-setup","270":"docs/pages/forge/advanced-testing/invariant-testing.md#open-testing","271":"docs/pages/forge/advanced-testing/invariant-testing.md#handler-based-testing","272":"docs/pages/forge/advanced-testing/invariant-testing.md#handler-functions","273":"docs/pages/forge/advanced-testing/invariant-testing.md#handler-ghost-variables","274":"docs/pages/forge/advanced-testing/invariant-testing.md#function-level-assertions","275":"docs/pages/forge/advanced-testing/invariant-testing.md#boundedunbounded-functions","276":"docs/pages/forge/advanced-testing/invariant-testing.md#actor-management","277":"docs/pages/forge/advanced-testing/overview.md#advanced-testing","278":"docs/pages/forge/advanced-testing/table-testing.md#table-testing","279":"docs/pages/forge/advanced-testing/table-testing.md#test-definition","280":"docs/pages/forge/advanced-testing/table-testing.md#examples","281":"docs/pages/forge/gas-tracking/gas-function-snapshots.md#gas-function-snapshots","282":"docs/pages/forge/gas-tracking/gas-function-snapshots.md#filtering","283":"docs/pages/forge/gas-tracking/gas-function-snapshots.md#comparing-gas-usage","284":"docs/pages/forge/gas-tracking/gas-reports.md#gas-reports","285":"docs/pages/forge/gas-tracking/overview.md#gas-tracking","286":"docs/pages/forge/reference/README.mdx#forge-commands","287":"docs/pages/forge/reference/build-commands.mdx#build-commands","288":"docs/pages/forge/reference/common-options.mdx#common-options","289":"docs/pages/forge/reference/compiler-options.mdx#compiler-options","290":"docs/pages/forge/reference/deploy-commands.mdx#deploy-commands","291":"docs/pages/forge/reference/evm-options.mdx#evm-options","292":"docs/pages/forge/reference/executor-options.mdx#executor-options","293":"docs/pages/forge/reference/forge-help.mdx#forge-help","294":"docs/pages/forge/reference/forge-help.mdx#name","295":"docs/pages/forge/reference/forge-help.mdx#synopsis","296":"docs/pages/forge/reference/forge-help.mdx#description","297":"docs/pages/forge/reference/forge-help.mdx#examples","298":"docs/pages/forge/reference/forge-help.mdx#see-also","299":"docs/pages/forge/reference/forge-lint.mdx#forge-lint","300":"docs/pages/forge/reference/forge-lint.mdx#name","301":"docs/pages/forge/reference/forge-lint.mdx#synopsis","302":"docs/pages/forge/reference/forge-lint.mdx#description","303":"docs/pages/forge/reference/forge-lint.mdx#options","304":"docs/pages/forge/reference/forge-lint.mdx#examples","305":"docs/pages/forge/reference/forge-lint.mdx#supported-lints","306":"docs/pages/forge/reference/forge-lint.mdx#high-severity","307":"docs/pages/forge/reference/forge-lint.mdx#incorrect-shift","308":"docs/pages/forge/reference/forge-lint.mdx#unchecked-call","309":"docs/pages/forge/reference/forge-lint.mdx#erc20-unchecked-transfer","310":"docs/pages/forge/reference/forge-lint.mdx#medium-severity","311":"docs/pages/forge/reference/forge-lint.mdx#divide-before-multiply","312":"docs/pages/forge/reference/forge-lint.mdx#informational--style-guide","313":"docs/pages/forge/reference/forge-lint.mdx#pascal-case-struct","314":"docs/pages/forge/reference/forge-lint.mdx#mixed-case-function","315":"docs/pages/forge/reference/forge-lint.mdx#mixed-case-variable","316":"docs/pages/forge/reference/forge-lint.mdx#screaming-snake-case-const","317":"docs/pages/forge/reference/forge-lint.mdx#screaming-snake-case-immutable","318":"docs/pages/forge/reference/forge-lint.mdx#gas-optimizations","319":"docs/pages/forge/reference/forge-lint.mdx#asm-keccak256","320":"docs/pages/forge/reference/forge-lint.mdx#see-also","321":"docs/pages/forge/reference/general-commands.mdx#general-commands","322":"docs/pages/forge/reference/project-commands.mdx#project-commands","323":"docs/pages/forge/reference/project-options.mdx#project-options","324":"docs/pages/forge/reference/test-commands.mdx#test-commands","325":"docs/pages/forge/reference/test-options.mdx#test-options","326":"docs/pages/forge/reference/utility-commands.mdx#utility-commands","327":"docs/pages/forge/reference/watch-options.mdx#watch-options","328":"docs/pages/forge/tests/cheatcodes.md#cheatcodes","329":"docs/pages/forge/tests/forge-std.md#forge-standard-library-overview","330":"docs/pages/forge/tests/forge-std.md#standard-libraries","331":"docs/pages/forge/tests/forge-std.md#std-logs","332":"docs/pages/forge/tests/forge-std.md#std-assertions","333":"docs/pages/forge/tests/forge-std.md#std-cheats","334":"docs/pages/forge/tests/forge-std.md#std-errors","335":"docs/pages/forge/tests/forge-std.md#std-storage","336":"docs/pages/forge/tests/forge-std.md#std-math","337":"docs/pages/forge/tests/fork-testing.md#fork-testing","338":"docs/pages/forge/tests/fork-testing.md#forking-mode","339":"docs/pages/forge/tests/fork-testing.md#caching","340":"docs/pages/forge/tests/fork-testing.md#improved-traces","341":"docs/pages/forge/tests/fork-testing.md#forking-cheatcodes","342":"docs/pages/forge/tests/fork-testing.md#usage","343":"docs/pages/forge/tests/fork-testing.md#examples","344":"docs/pages/forge/tests/fork-testing.md#create-and-select-forks","345":"docs/pages/forge/tests/fork-testing.md#separated-and-persistent-storage","346":"docs/pages/forge/tests/fork-testing.md#evm-version","347":"docs/pages/forge/tests/overview.md#tests","348":"docs/pages/forge/tests/overview.md#logs-and-traces","349":"docs/pages/forge/tests/overview.md#watch-mode","350":"docs/pages/forge/tests/replay-testing.md#replaying-failures","351":"docs/pages/forge/tests/replay-testing.md#rerun-failures","352":"docs/pages/forge/tests/replay-testing.md#fuzz-tests-failures","353":"docs/pages/forge/tests/replay-testing.md#invariant-tests-failures","354":"docs/pages/forge/tests/replay-testing.md#remove-persisted-failures","355":"docs/pages/forge/tests/traces.md#understanding-traces","356":"docs/pages/forge/tests/writing-tests.md#writing-tests","357":"docs/pages/forge/tests/writing-tests.md#before-test-setups","358":"docs/pages/forge/tests/writing-tests.md#shared-setups","359":"docs/pages/guides/best-practices/commenting.md#commenting","360":"docs/pages/guides/best-practices/key-management.md#key-management","361":"docs/pages/guides/best-practices/key-management.md#using-hardware-wallet","362":"docs/pages/guides/best-practices/key-management.md#using-private-keys","363":"docs/pages/guides/best-practices/key-management.md#using-a-keystore","364":"docs/pages/guides/best-practices/security.md#security-practices","365":"docs/pages/guides/best-practices/security.md#taint-analysis","366":"docs/pages/guides/best-practices/writing-contracts.md#general-contract-guidance","367":"docs/pages/guides/best-practices/writing-contracts.md#named-imports","368":"docs/pages/guides/best-practices/writing-contracts.md#absolute-vs-relative-imports","369":"docs/pages/guides/best-practices/writing-contracts.md#copying-libraries-from-dependencies","370":"docs/pages/guides/best-practices/writing-contracts.md#formatting","371":"docs/pages/guides/best-practices/writing-contracts.md#write-secure-code","372":"docs/pages/guides/best-practices/writing-scripts.md#scripting-practices","373":"docs/pages/guides/best-practices/writing-scripts.md#use-run-as-the-default-function","374":"docs/pages/guides/best-practices/writing-scripts.md#assign-correct-function-visibility","375":"docs/pages/guides/best-practices/writing-scripts.md#naming-script-files","376":"docs/pages/guides/best-practices/writing-scripts.md#test-your-scripts","377":"docs/pages/guides/best-practices/writing-scripts.md#audit-broadcast-transactions","378":"docs/pages/guides/best-practices/writing-scripts.md#avoid-getting-frontrun","379":"docs/pages/guides/best-practices/writing-scripts.md#reading-json-files","380":"docs/pages/guides/best-practices/writing-tests.md#tests","381":"docs/pages/guides/best-practices/writing-tests.md#general-test-guidance","382":"docs/pages/guides/best-practices/writing-tests.md#naming-test-files","383":"docs/pages/guides/best-practices/writing-tests.md#no-assertions-in-setup","384":"docs/pages/guides/best-practices/writing-tests.md#organizing-and-naming-tests","385":"docs/pages/guides/best-practices/writing-tests.md#fork-tests","386":"docs/pages/guides/best-practices/writing-tests.md#use-fork-tests-liberally","387":"docs/pages/guides/best-practices/writing-tests.md#minimize-rpc-requests","388":"docs/pages/guides/best-practices/writing-tests.md#configure-fork-urls-in-foundrytoml-and-use-cheatcodes","389":"docs/pages/guides/best-practices/writing-tests.md#test-harnesses","390":"docs/pages/guides/best-practices/writing-tests.md#internal-functions","391":"docs/pages/guides/best-practices/writing-tests.md#private-functions","392":"docs/pages/guides/best-practices/writing-tests.md#workaround-functions","393":"docs/pages/guides/project-setup/clone-a-verified-contract.mdx#clone-a-verified-contract","394":"docs/pages/guides/project-setup/creating-a-new-project.md#creating-a-new-project","395":"docs/pages/guides/project-setup/dependencies.md#dependencies","396":"docs/pages/guides/project-setup/dependencies.md#adding-a-dependency","397":"docs/pages/guides/project-setup/dependencies.md#remapping-dependencies","398":"docs/pages/guides/project-setup/dependencies.md#remapping-conflicts","399":"docs/pages/guides/project-setup/dependencies.md#updating-dependencies","400":"docs/pages/guides/project-setup/dependencies.md#removing-dependencies","401":"docs/pages/guides/project-setup/dependencies.md#hardhat-compatibility","402":"docs/pages/guides/project-setup/project-layout.md#project-layout","403":"docs/pages/guides/project-setup/soldeer.md#soldeer-as-a-package-manager","404":"docs/pages/guides/project-setup/soldeer.md#if-you-want-to-see-the-full-commands-and-usage-of-soldeer-you-can-visit-the-usagemd","405":"docs/pages/guides/project-setup/soldeer.md#initialize-a-new-project","406":"docs/pages/guides/project-setup/soldeer.md#adding-a-dependency","407":"docs/pages/guides/project-setup/soldeer.md#add-a-dependency-stored-in-the-central-repository","408":"docs/pages/guides/project-setup/soldeer.md#add-a-dependency-stored-at-a-specific-link","409":"docs/pages/guides/project-setup/soldeer.md#add-a-dependency-stored-in-git","410":"docs/pages/guides/project-setup/soldeer.md#updating-dependencies","411":"docs/pages/guides/project-setup/soldeer.md#removing-dependencies","412":"docs/pages/guides/project-setup/soldeer.md#remappings","413":"docs/pages/guides/project-setup/soldeer.md#installing-dependencies-of-dependencies-aka-sub-dependencies","414":"docs/pages/guides/project-setup/soldeer.md#pushing-a-new-version-to-the-central-repository","415":"docs/pages/guides/project-setup/soldeer.md#dry-run","416":"docs/pages/guides/project-setup/soldeer.md#login-data","417":"docs/pages/guides/project-setup/soldeer.md#what-happens-if-a-certain-package-is-not-present-in-the-central-repository","418":"docs/pages/guides/project-setup/soldeer.md#remappings-caveats","419":"docs/pages/guides/project-setup/soldeer.md#dependencies-maintenance","420":"docs/pages/config/reference/README.mdx#config-reference","421":"docs/pages/config/reference/default-config.mdx#default-foundry-configuration","422":"docs/pages/config/reference/doc-generator.mdx#documentation-generator","423":"docs/pages/config/reference/doc-generator.mdx#out","424":"docs/pages/config/reference/doc-generator.mdx#title","425":"docs/pages/config/reference/doc-generator.mdx#book","426":"docs/pages/config/reference/doc-generator.mdx#repository","427":"docs/pages/config/reference/doc-generator.mdx#ignore","428":"docs/pages/config/reference/etherscan.mdx#etherscan","429":"docs/pages/config/reference/formatter.mdx#formatter","430":"docs/pages/config/reference/formatter.mdx#single_line_statement_blocks","431":"docs/pages/config/reference/formatter.mdx#multiline_func_header","432":"docs/pages/config/reference/formatter.mdx#sort_imports","433":"docs/pages/config/reference/formatter.mdx#contract_new_lines","434":"docs/pages/config/reference/formatter.mdx#override_spacing","435":"docs/pages/config/reference/formatter.mdx#line_length","436":"docs/pages/config/reference/formatter.mdx#tab_width","437":"docs/pages/config/reference/formatter.mdx#bracket_spacing","438":"docs/pages/config/reference/formatter.mdx#int_types","439":"docs/pages/config/reference/formatter.mdx#quote_style","440":"docs/pages/config/reference/formatter.mdx#number_underscore","441":"docs/pages/config/reference/formatter.mdx#hex_underscore","442":"docs/pages/config/reference/formatter.mdx#wrap_comments","443":"docs/pages/config/reference/formatter.mdx#ignore","444":"docs/pages/config/reference/inline-test-config.mdx#in-line-test-configuration","445":"docs/pages/config/reference/inline-test-config.mdx#block-comments","446":"docs/pages/config/reference/inline-test-config.mdx#in-line-fuzz-configs","447":"docs/pages/config/reference/inline-test-config.mdx#in-line-invariant-configs","448":"docs/pages/config/reference/linter.mdx#linter-configuration","449":"docs/pages/config/reference/linter.mdx#severity","450":"docs/pages/config/reference/linter.mdx#exclude_lints","451":"docs/pages/config/reference/linter.mdx#ignore","452":"docs/pages/config/reference/linter.mdx#inline-configuration","453":"docs/pages/config/reference/linter.mdx#supported-inline-directives","454":"docs/pages/config/reference/linter.mdx#best-practices","455":"docs/pages/config/reference/overview.mdx#config-overview","456":"docs/pages/config/reference/overview.mdx#profiles","457":"docs/pages/config/reference/overview.mdx#global-configuration","458":"docs/pages/config/reference/overview.mdx#environment-variables","459":"docs/pages/config/reference/overview.mdx#configuration-format","460":"docs/pages/config/reference/overview.mdx#configuration-keys","461":"docs/pages/config/reference/project.mdx#project","462":"docs/pages/config/reference/project.mdx#src","463":"docs/pages/config/reference/project.mdx#test","464":"docs/pages/config/reference/project.mdx#script","465":"docs/pages/config/reference/project.mdx#out","466":"docs/pages/config/reference/project.mdx#libs","467":"docs/pages/config/reference/project.mdx#cache","468":"docs/pages/config/reference/project.mdx#cache_path","469":"docs/pages/config/reference/project.mdx#broadcast","470":"docs/pages/config/reference/project.mdx#force","471":"docs/pages/config/reference/solidity-compiler.mdx#solidity-compiler","472":"docs/pages/config/reference/solidity-compiler.mdx#general","473":"docs/pages/config/reference/solidity-compiler.mdx#remappings","474":"docs/pages/config/reference/solidity-compiler.mdx#auto_detect_remappings","475":"docs/pages/config/reference/solidity-compiler.mdx#allow_paths","476":"docs/pages/config/reference/solidity-compiler.mdx#include_paths","477":"docs/pages/config/reference/solidity-compiler.mdx#libraries","478":"docs/pages/config/reference/solidity-compiler.mdx#solc_version","479":"docs/pages/config/reference/solidity-compiler.mdx#auto_detect_solc","480":"docs/pages/config/reference/solidity-compiler.mdx#offline","481":"docs/pages/config/reference/solidity-compiler.mdx#ignored_warnings_from","482":"docs/pages/config/reference/solidity-compiler.mdx#ignored_error_codes","483":"docs/pages/config/reference/solidity-compiler.mdx#deny_warnings","484":"docs/pages/config/reference/solidity-compiler.mdx#evm_version","485":"docs/pages/config/reference/solidity-compiler.mdx#revert_strings","486":"docs/pages/config/reference/solidity-compiler.mdx#extra_output_files","487":"docs/pages/config/reference/solidity-compiler.mdx#extra_output","488":"docs/pages/config/reference/solidity-compiler.mdx#bytecode_hash","489":"docs/pages/config/reference/solidity-compiler.mdx#sparse_mode","490":"docs/pages/config/reference/solidity-compiler.mdx#optimizer","491":"docs/pages/config/reference/solidity-compiler.mdx#optimizer-1","492":"docs/pages/config/reference/solidity-compiler.mdx#optimizer_runs","493":"docs/pages/config/reference/solidity-compiler.mdx#via_ir","494":"docs/pages/config/reference/solidity-compiler.mdx#use_literal_content","495":"docs/pages/config/reference/solidity-compiler.mdx#optimizer_details","496":"docs/pages/config/reference/solidity-compiler.mdx#optimizer_detailsyul_details","497":"docs/pages/config/reference/solidity-compiler.mdx#model-checker","498":"docs/pages/config/reference/solidity-compiler.mdx#model_checker","499":"docs/pages/config/reference/solidity-compiler.mdx#model_checkercontracts","500":"docs/pages/config/reference/solidity-compiler.mdx#model_checkerdiv_mod_with_slacks","501":"docs/pages/config/reference/solidity-compiler.mdx#model_checkerengine","502":"docs/pages/config/reference/solidity-compiler.mdx#model_checkerinvariants","503":"docs/pages/config/reference/solidity-compiler.mdx#model_checkershow_unproved","504":"docs/pages/config/reference/solidity-compiler.mdx#model_checkersolvers","505":"docs/pages/config/reference/solidity-compiler.mdx#model_checkertimeout","506":"docs/pages/config/reference/solidity-compiler.mdx#model_checkertargets","507":"docs/pages/config/reference/solidity-compiler.mdx#compilation-restrictions","508":"docs/pages/config/reference/solidity-compiler.mdx#additional-compiler-settings","509":"docs/pages/config/reference/solidity-compiler.mdx#additional_compiler_profilename","510":"docs/pages/config/reference/solidity-compiler.mdx#additional_compiler_profilevia_ir","511":"docs/pages/config/reference/solidity-compiler.mdx#additional_compiler_profileevm_version","512":"docs/pages/config/reference/solidity-compiler.mdx#additional_compiler_profileoptimizer","513":"docs/pages/config/reference/solidity-compiler.mdx#additional_compiler_profileoptimizer_runs","514":"docs/pages/config/reference/solidity-compiler.mdx#additional_compiler_profilebytecode_hash","515":"docs/pages/config/reference/solidity-compiler.mdx#compilation-restrictions-settings","516":"docs/pages/config/reference/solidity-compiler.mdx#compilation_restrictions","517":"docs/pages/config/reference/solidity-compiler.mdx#compilation_restrictionpaths","518":"docs/pages/config/reference/solidity-compiler.mdx#compilation_restrictionversion","519":"docs/pages/config/reference/solidity-compiler.mdx#compilation_restrictionvia_ir","520":"docs/pages/config/reference/solidity-compiler.mdx#compilation_restrictionbytecode_hash","521":"docs/pages/config/reference/solidity-compiler.mdx#compilation_restrictionoptimizer_runs","522":"docs/pages/config/reference/solidity-compiler.mdx#compilation_restrictionmin_optimizer_runs","523":"docs/pages/config/reference/solidity-compiler.mdx#compilation_restrictionmax_optimizer_runs","524":"docs/pages/config/reference/solidity-compiler.mdx#compilation_restrictionevm_version","525":"docs/pages/config/reference/solidity-compiler.mdx#compilation_restrictionmin_evm_version","526":"docs/pages/config/reference/solidity-compiler.mdx#compilation_restrictionmax_evm_version","527":"docs/pages/config/reference/testing.mdx#testing","528":"docs/pages/config/reference/testing.mdx#general","529":"docs/pages/config/reference/testing.mdx#verbosity","530":"docs/pages/config/reference/testing.mdx#ffi","531":"docs/pages/config/reference/testing.mdx#sender","532":"docs/pages/config/reference/testing.mdx#tx_origin","533":"docs/pages/config/reference/testing.mdx#initial_balance","534":"docs/pages/config/reference/testing.mdx#block_number","535":"docs/pages/config/reference/testing.mdx#chain_id","536":"docs/pages/config/reference/testing.mdx#gas_limit","537":"docs/pages/config/reference/testing.mdx#gas_price","538":"docs/pages/config/reference/testing.mdx#block_base_fee_per_gas","539":"docs/pages/config/reference/testing.mdx#block_coinbase","540":"docs/pages/config/reference/testing.mdx#block_timestamp","541":"docs/pages/config/reference/testing.mdx#block_difficulty","542":"docs/pages/config/reference/testing.mdx#gas_reports","543":"docs/pages/config/reference/testing.mdx#no_storage_caching","544":"docs/pages/config/reference/testing.mdx#rpc_storage_caching","545":"docs/pages/config/reference/testing.mdx#rpc_storage_cachingchains","546":"docs/pages/config/reference/testing.mdx#rpc_storage_cachingendpoints","547":"docs/pages/config/reference/testing.mdx#eth_rpc_url","548":"docs/pages/config/reference/testing.mdx#etherscan_api_key","549":"docs/pages/config/reference/testing.mdx#match-test","550":"docs/pages/config/reference/testing.mdx#no-match-test","551":"docs/pages/config/reference/testing.mdx#match-contract","552":"docs/pages/config/reference/testing.mdx#no-match-contract","553":"docs/pages/config/reference/testing.mdx#match-path","554":"docs/pages/config/reference/testing.mdx#no-match-path","555":"docs/pages/config/reference/testing.mdx#threads","556":"docs/pages/config/reference/testing.mdx#show_progress","557":"docs/pages/config/reference/testing.mdx#block_gas_limit","558":"docs/pages/config/reference/testing.mdx#memory_limit","559":"docs/pages/config/reference/testing.mdx#names","560":"docs/pages/config/reference/testing.mdx#sizes","561":"docs/pages/config/reference/testing.mdx#rpc_endpoints","562":"docs/pages/config/reference/testing.mdx#prompt_timeout","563":"docs/pages/config/reference/testing.mdx#fuzz","564":"docs/pages/config/reference/testing.mdx#runs","565":"docs/pages/config/reference/testing.mdx#max_test_rejects","566":"docs/pages/config/reference/testing.mdx#seed","567":"docs/pages/config/reference/testing.mdx#dictionary_weight","568":"docs/pages/config/reference/testing.mdx#include_storage","569":"docs/pages/config/reference/testing.mdx#include_push_bytes","570":"docs/pages/config/reference/testing.mdx#gas_report_samples","571":"docs/pages/config/reference/testing.mdx#failure_persist_dir","572":"docs/pages/config/reference/testing.mdx#failure_persist_file","573":"docs/pages/config/reference/testing.mdx#show_logs","574":"docs/pages/config/reference/testing.mdx#invariant","575":"docs/pages/config/reference/testing.mdx#runs-1","576":"docs/pages/config/reference/testing.mdx#depth","577":"docs/pages/config/reference/testing.mdx#fail_on_revert","578":"docs/pages/config/reference/testing.mdx#call_override","579":"docs/pages/config/reference/testing.mdx#dictionary_weight-1","580":"docs/pages/config/reference/testing.mdx#include_storage-1","581":"docs/pages/config/reference/testing.mdx#include_push_bytes-1","582":"docs/pages/config/reference/testing.mdx#shrink_run_limit","583":"docs/pages/config/reference/testing.mdx#max_assume_rejects","584":"docs/pages/config/reference/testing.mdx#gas_report_samples-1","585":"docs/pages/config/reference/testing.mdx#failure_persist_dir-1","586":"docs/pages/config/reference/testing.mdx#show_metrics","587":"docs/pages/cast/reference/abi-commands.mdx#abi-commands","588":"docs/pages/cast/reference/account-commands.mdx#account-commands","589":"docs/pages/cast/reference/block-commands.mdx#block-commands","590":"docs/pages/cast/reference/cast-help.mdx#cast-help","591":"docs/pages/cast/reference/cast-help.mdx#name","592":"docs/pages/cast/reference/cast-help.mdx#synopsis","593":"docs/pages/cast/reference/cast-help.mdx#description","594":"docs/pages/cast/reference/cast-help.mdx#examples","595":"docs/pages/cast/reference/cast-help.mdx#see-also","596":"docs/pages/cast/reference/cast-rpc.mdx#cast-rpc","597":"docs/pages/cast/reference/cast-rpc.mdx#name","598":"docs/pages/cast/reference/cast-rpc.mdx#synopsis","599":"docs/pages/cast/reference/cast-rpc.mdx#description","600":"docs/pages/cast/reference/cast-rpc.mdx#options","601":"docs/pages/cast/reference/cast-rpc.mdx#query-options","602":"docs/pages/cast/reference/cast-rpc.mdx#examples","603":"docs/pages/cast/reference/cast-wallet-new-mnemonic.mdx#cast-new-mnemonic","604":"docs/pages/cast/reference/cast-wallet-new-mnemonic.mdx#name","605":"docs/pages/cast/reference/cast-wallet-new-mnemonic.mdx#synopsis","606":"docs/pages/cast/reference/cast-wallet-new-mnemonic.mdx#description","607":"docs/pages/cast/reference/cast-wallet-new-mnemonic.mdx#options","608":"docs/pages/cast/reference/cast-wallet-new-mnemonic.mdx#new-mnemonic-options","609":"docs/pages/cast/reference/cast-wallet-new-mnemonic.mdx#examples","610":"docs/pages/cast/reference/cast-wallet-new-mnemonic.mdx#see-also","611":"docs/pages/cast/reference/chain-commands.mdx#chain-commands","612":"docs/pages/cast/reference/common-options.mdx#common-options","613":"docs/pages/cast/reference/conversion-commands.mdx#conversion-commands","614":"docs/pages/cast/reference/ens-commands.mdx#ens-commands","615":"docs/pages/cast/reference/etherscan-commands.mdx#etherscan-commands","616":"docs/pages/cast/reference/general-commands.mdx#general-commands","617":"docs/pages/cast/reference/transaction-commands.mdx#transaction-commands","618":"docs/pages/cast/reference/utility-commands.mdx#utility-commands","619":"docs/pages/cast/reference/wallet-commands.mdx#wallet-commands","620":"docs/pages/reference/common/base-options.mdx#base-options","621":"docs/pages/reference/common/display-options.mdx#display-options","622":"docs/pages/reference/common/etherscan-options.mdx#etherscan-options","623":"docs/pages/reference/common/multi-wallet-options-hardware.mdx#wallet-options---hardware-wallet","624":"docs/pages/reference/common/multi-wallet-options-keystore.mdx#wallet-options---keystore","625":"docs/pages/reference/common/multi-wallet-options-raw.mdx#wallet-options---raw","626":"docs/pages/reference/common/multi-wallet-options-remote.mdx#wallet-options---remote","627":"docs/pages/reference/common/wallet-options-hardware.mdx#wallet-options---hardware-wallet","628":"docs/pages/reference/common/wallet-options-keystore.mdx#wallet-options---keystore","629":"docs/pages/reference/common/wallet-options-raw.mdx#wallet-options---raw","630":"docs/pages/reference/common/wallet-options-remote.mdx#wallet-options---remote","631":"docs/pages/reference/cheatcodes/accesses.mdx#accesses","632":"docs/pages/reference/cheatcodes/accesses.mdx#signature","633":"docs/pages/reference/cheatcodes/accesses.mdx#description","634":"docs/pages/reference/cheatcodes/accesses.mdx#examples","635":"docs/pages/reference/cheatcodes/active-fork.mdx#activefork","636":"docs/pages/reference/cheatcodes/active-fork.mdx#signature","637":"docs/pages/reference/cheatcodes/active-fork.mdx#description","638":"docs/pages/reference/cheatcodes/active-fork.mdx#examples","639":"docs/pages/reference/cheatcodes/active-fork.mdx#see-also","640":"docs/pages/reference/cheatcodes/addr.mdx#addr","641":"docs/pages/reference/cheatcodes/addr.mdx#signature","642":"docs/pages/reference/cheatcodes/addr.mdx#description","643":"docs/pages/reference/cheatcodes/addr.mdx#examples","644":"docs/pages/reference/cheatcodes/allow-cheatcodes.mdx#allowcheatcodes","645":"docs/pages/reference/cheatcodes/allow-cheatcodes.mdx#signature","646":"docs/pages/reference/cheatcodes/allow-cheatcodes.mdx#description","647":"docs/pages/reference/cheatcodes/assertions.mdx#assertions","648":"docs/pages/reference/cheatcodes/assume-no-revert.mdx#assumenorevert","649":"docs/pages/reference/cheatcodes/assume-no-revert.mdx#signature","650":"docs/pages/reference/cheatcodes/assume-no-revert.mdx#description","651":"docs/pages/reference/cheatcodes/assume-no-revert.mdx#examples","652":"docs/pages/reference/cheatcodes/assume.mdx#assume","653":"docs/pages/reference/cheatcodes/assume.mdx#signature","654":"docs/pages/reference/cheatcodes/assume.mdx#description","655":"docs/pages/reference/cheatcodes/assume.mdx#examples","656":"docs/pages/reference/cheatcodes/assume.mdx#see-also","657":"docs/pages/reference/cheatcodes/breakpoint.mdx#breakpoint","658":"docs/pages/reference/cheatcodes/breakpoint.mdx#signature","659":"docs/pages/reference/cheatcodes/breakpoint.mdx#description","660":"docs/pages/reference/cheatcodes/breakpoint.mdx#examples","661":"docs/pages/reference/cheatcodes/breakpoint.mdx#see-also","662":"docs/pages/reference/cheatcodes/broadcast.mdx#broadcast","663":"docs/pages/reference/cheatcodes/broadcast.mdx#signature","664":"docs/pages/reference/cheatcodes/broadcast.mdx#description","665":"docs/pages/reference/cheatcodes/broadcast.mdx#examples","666":"docs/pages/reference/cheatcodes/broadcast.mdx#see-also","667":"docs/pages/reference/cheatcodes/chain-id.mdx#chainid","668":"docs/pages/reference/cheatcodes/chain-id.mdx#signature","669":"docs/pages/reference/cheatcodes/chain-id.mdx#description","670":"docs/pages/reference/cheatcodes/chain-id.mdx#examples","671":"docs/pages/reference/cheatcodes/clear-mocked-calls.mdx#clearmockedcalls","672":"docs/pages/reference/cheatcodes/clear-mocked-calls.mdx#signature","673":"docs/pages/reference/cheatcodes/clear-mocked-calls.mdx#description","674":"docs/pages/reference/cheatcodes/coinbase.mdx#coinbase","675":"docs/pages/reference/cheatcodes/coinbase.mdx#signature","676":"docs/pages/reference/cheatcodes/coinbase.mdx#description","677":"docs/pages/reference/cheatcodes/coinbase.mdx#examples","678":"docs/pages/reference/cheatcodes/copy-storage.mdx#copystorage","679":"docs/pages/reference/cheatcodes/copy-storage.mdx#signature","680":"docs/pages/reference/cheatcodes/copy-storage.mdx#description","681":"docs/pages/reference/cheatcodes/copy-storage.mdx#examples","682":"docs/pages/reference/cheatcodes/create-fork.mdx#createfork","683":"docs/pages/reference/cheatcodes/create-fork.mdx#signature","684":"docs/pages/reference/cheatcodes/create-fork.mdx#description","685":"docs/pages/reference/cheatcodes/create-fork.mdx#examples","686":"docs/pages/reference/cheatcodes/create-fork.mdx#see-also","687":"docs/pages/reference/cheatcodes/create-select-fork.mdx#createselectfork","688":"docs/pages/reference/cheatcodes/create-select-fork.mdx#signature","689":"docs/pages/reference/cheatcodes/create-select-fork.mdx#description","690":"docs/pages/reference/cheatcodes/create-select-fork.mdx#examples","691":"docs/pages/reference/cheatcodes/create-select-fork.mdx#see-also","692":"docs/pages/reference/cheatcodes/create-wallet.mdx#createwallet","693":"docs/pages/reference/cheatcodes/create-wallet.mdx#signature","694":"docs/pages/reference/cheatcodes/create-wallet.mdx#description","695":"docs/pages/reference/cheatcodes/create-wallet.mdx#tips","696":"docs/pages/reference/cheatcodes/create-wallet.mdx#examples","697":"docs/pages/reference/cheatcodes/create-wallet.mdx#uint256","698":"docs/pages/reference/cheatcodes/create-wallet.mdx#string","699":"docs/pages/reference/cheatcodes/create-wallet.mdx#uint256-and-string","700":"docs/pages/reference/cheatcodes/deal.mdx#deal","701":"docs/pages/reference/cheatcodes/deal.mdx#signature","702":"docs/pages/reference/cheatcodes/deal.mdx#description","703":"docs/pages/reference/cheatcodes/deal.mdx#examples","704":"docs/pages/reference/cheatcodes/deal.mdx#see-also","705":"docs/pages/reference/cheatcodes/derive-key.mdx#derivekey","706":"docs/pages/reference/cheatcodes/derive-key.mdx#signature","707":"docs/pages/reference/cheatcodes/derive-key.mdx#description","708":"docs/pages/reference/cheatcodes/derive-key.mdx#examples","709":"docs/pages/reference/cheatcodes/derive-key.mdx#see-also","710":"docs/pages/reference/cheatcodes/difficulty.mdx#difficulty","711":"docs/pages/reference/cheatcodes/difficulty.mdx#signature","712":"docs/pages/reference/cheatcodes/difficulty.mdx#description","713":"docs/pages/reference/cheatcodes/difficulty.mdx#examples","714":"docs/pages/reference/cheatcodes/env-address.mdx#envaddress","715":"docs/pages/reference/cheatcodes/env-address.mdx#signature","716":"docs/pages/reference/cheatcodes/env-address.mdx#description","717":"docs/pages/reference/cheatcodes/env-address.mdx#tips","718":"docs/pages/reference/cheatcodes/env-address.mdx#examples","719":"docs/pages/reference/cheatcodes/env-address.mdx#single-value","720":"docs/pages/reference/cheatcodes/env-address.mdx#array","721":"docs/pages/reference/cheatcodes/env-bool.mdx#envbool","722":"docs/pages/reference/cheatcodes/env-bool.mdx#signature","723":"docs/pages/reference/cheatcodes/env-bool.mdx#description","724":"docs/pages/reference/cheatcodes/env-bool.mdx#tips","725":"docs/pages/reference/cheatcodes/env-bool.mdx#examples","726":"docs/pages/reference/cheatcodes/env-bool.mdx#single-value","727":"docs/pages/reference/cheatcodes/env-bool.mdx#array","728":"docs/pages/reference/cheatcodes/env-bytes.mdx#envbytes","729":"docs/pages/reference/cheatcodes/env-bytes.mdx#signature","730":"docs/pages/reference/cheatcodes/env-bytes.mdx#description","731":"docs/pages/reference/cheatcodes/env-bytes.mdx#tips","732":"docs/pages/reference/cheatcodes/env-bytes.mdx#examples","733":"docs/pages/reference/cheatcodes/env-bytes.mdx#single-value","734":"docs/pages/reference/cheatcodes/env-bytes.mdx#array","735":"docs/pages/reference/cheatcodes/env-bytes32.mdx#envbytes32","736":"docs/pages/reference/cheatcodes/env-bytes32.mdx#signature","737":"docs/pages/reference/cheatcodes/env-bytes32.mdx#description","738":"docs/pages/reference/cheatcodes/env-bytes32.mdx#tips","739":"docs/pages/reference/cheatcodes/env-bytes32.mdx#examples","740":"docs/pages/reference/cheatcodes/env-bytes32.mdx#single-value","741":"docs/pages/reference/cheatcodes/env-bytes32.mdx#array","742":"docs/pages/reference/cheatcodes/env-int.mdx#envint","743":"docs/pages/reference/cheatcodes/env-int.mdx#signature","744":"docs/pages/reference/cheatcodes/env-int.mdx#description","745":"docs/pages/reference/cheatcodes/env-int.mdx#tips","746":"docs/pages/reference/cheatcodes/env-int.mdx#examples","747":"docs/pages/reference/cheatcodes/env-int.mdx#single-value","748":"docs/pages/reference/cheatcodes/env-int.mdx#array","749":"docs/pages/reference/cheatcodes/env-or.mdx#envor","750":"docs/pages/reference/cheatcodes/env-or.mdx#signature","751":"docs/pages/reference/cheatcodes/env-or.mdx#description","752":"docs/pages/reference/cheatcodes/env-or.mdx#tips","753":"docs/pages/reference/cheatcodes/env-or.mdx#examples","754":"docs/pages/reference/cheatcodes/env-or.mdx#single-value","755":"docs/pages/reference/cheatcodes/env-or.mdx#array","756":"docs/pages/reference/cheatcodes/env-string.mdx#envstring","757":"docs/pages/reference/cheatcodes/env-string.mdx#signature","758":"docs/pages/reference/cheatcodes/env-string.mdx#description","759":"docs/pages/reference/cheatcodes/env-string.mdx#tips","760":"docs/pages/reference/cheatcodes/env-string.mdx#examples","761":"docs/pages/reference/cheatcodes/env-string.mdx#single-value","762":"docs/pages/reference/cheatcodes/env-string.mdx#array","763":"docs/pages/reference/cheatcodes/env-uint.mdx#envuint","764":"docs/pages/reference/cheatcodes/env-uint.mdx#signature","765":"docs/pages/reference/cheatcodes/env-uint.mdx#description","766":"docs/pages/reference/cheatcodes/env-uint.mdx#tips","767":"docs/pages/reference/cheatcodes/env-uint.mdx#examples","768":"docs/pages/reference/cheatcodes/env-uint.mdx#single-value","769":"docs/pages/reference/cheatcodes/env-uint.mdx#array","770":"docs/pages/reference/cheatcodes/environment.mdx#environment","771":"docs/pages/reference/cheatcodes/etch.mdx#etch","772":"docs/pages/reference/cheatcodes/etch.mdx#signature","773":"docs/pages/reference/cheatcodes/etch.mdx#description","774":"docs/pages/reference/cheatcodes/etch.mdx#examples","775":"docs/pages/reference/cheatcodes/etch.mdx#using-vmetch-for-enabling-custom-precompiles","776":"docs/pages/reference/cheatcodes/etch.mdx#see-also","777":"docs/pages/reference/cheatcodes/expect-call.mdx#expectcall","778":"docs/pages/reference/cheatcodes/expect-call.mdx#description","779":"docs/pages/reference/cheatcodes/expect-call.mdx#examples","780":"docs/pages/reference/cheatcodes/expect-emit.mdx#expectemit","781":"docs/pages/reference/cheatcodes/expect-emit.mdx#signature","782":"docs/pages/reference/cheatcodes/expect-emit.mdx#description","783":"docs/pages/reference/cheatcodes/expect-emit.mdx#examples","784":"docs/pages/reference/cheatcodes/expect-revert.mdx#expectrevert","785":"docs/pages/reference/cheatcodes/expect-revert.mdx#signature","786":"docs/pages/reference/cheatcodes/expect-revert.mdx#error","787":"docs/pages/reference/cheatcodes/expect-revert.mdx#description","788":"docs/pages/reference/cheatcodes/expect-revert.mdx#examples","789":"docs/pages/reference/cheatcodes/expect-revert.mdx#see-also","790":"docs/pages/reference/cheatcodes/external.mdx#external","791":"docs/pages/reference/cheatcodes/fee.mdx#fee","792":"docs/pages/reference/cheatcodes/fee.mdx#signature","793":"docs/pages/reference/cheatcodes/fee.mdx#description","794":"docs/pages/reference/cheatcodes/fee.mdx#examples","795":"docs/pages/reference/cheatcodes/ffi.mdx#ffi","796":"docs/pages/reference/cheatcodes/ffi.mdx#signature","797":"docs/pages/reference/cheatcodes/ffi.mdx#description","798":"docs/pages/reference/cheatcodes/ffi.mdx#tips","799":"docs/pages/reference/cheatcodes/ffi.mdx#examples","800":"docs/pages/reference/cheatcodes/forking.mdx#forking","801":"docs/pages/reference/cheatcodes/fs.mdx#file-cheat-codes","802":"docs/pages/reference/cheatcodes/fs.mdx#signature","803":"docs/pages/reference/cheatcodes/fs.mdx#description","804":"docs/pages/reference/cheatcodes/fs.mdx#examples","805":"docs/pages/reference/cheatcodes/fuzzer.mdx#fuzzer","806":"docs/pages/reference/cheatcodes/gas-snapshots.mdx#snapshotgas-cheatcodes","807":"docs/pages/reference/cheatcodes/gas-snapshots.mdx#signature","808":"docs/pages/reference/cheatcodes/gas-snapshots.mdx#description","809":"docs/pages/reference/cheatcodes/gas-snapshots.mdx#examples","810":"docs/pages/reference/cheatcodes/get-block-number.mdx#getblocknumber","811":"docs/pages/reference/cheatcodes/get-block-number.mdx#signature","812":"docs/pages/reference/cheatcodes/get-block-number.mdx#description","813":"docs/pages/reference/cheatcodes/get-block-number.mdx#examples","814":"docs/pages/reference/cheatcodes/get-block-timestamp.mdx#getblocktimestamp","815":"docs/pages/reference/cheatcodes/get-block-timestamp.mdx#signature","816":"docs/pages/reference/cheatcodes/get-block-timestamp.mdx#description","817":"docs/pages/reference/cheatcodes/get-block-timestamp.mdx#examples","818":"docs/pages/reference/cheatcodes/get-code.mdx#getcode","819":"docs/pages/reference/cheatcodes/get-code.mdx#signature","820":"docs/pages/reference/cheatcodes/get-code.mdx#description","821":"docs/pages/reference/cheatcodes/get-code.mdx#examples","822":"docs/pages/reference/cheatcodes/get-code.mdx#supported-formats","823":"docs/pages/reference/cheatcodes/get-code.mdx#see-also","824":"docs/pages/reference/cheatcodes/get-deployed-code.mdx#getdeployedcode","825":"docs/pages/reference/cheatcodes/get-deployed-code.mdx#signature","826":"docs/pages/reference/cheatcodes/get-deployed-code.mdx#description","827":"docs/pages/reference/cheatcodes/get-deployed-code.mdx#examples","828":"docs/pages/reference/cheatcodes/get-deployed-code.mdx#supported-formats","829":"docs/pages/reference/cheatcodes/get-deployed-code.mdx#see-also","830":"docs/pages/reference/cheatcodes/get-label.mdx#getlabel","831":"docs/pages/reference/cheatcodes/get-label.mdx#signature","832":"docs/pages/reference/cheatcodes/get-label.mdx#description","833":"docs/pages/reference/cheatcodes/get-nonce.mdx#getnonce","834":"docs/pages/reference/cheatcodes/get-nonce.mdx#signature","835":"docs/pages/reference/cheatcodes/get-nonce.mdx#description","836":"docs/pages/reference/cheatcodes/get-nonce.mdx#examples","837":"docs/pages/reference/cheatcodes/get-nonce.mdx#address","838":"docs/pages/reference/cheatcodes/get-nonce.mdx#wallet","839":"docs/pages/reference/cheatcodes/get-recorded-logs.mdx#getrecordedlogs","840":"docs/pages/reference/cheatcodes/get-recorded-logs.mdx#signature","841":"docs/pages/reference/cheatcodes/get-recorded-logs.mdx#description","842":"docs/pages/reference/cheatcodes/get-recorded-logs.mdx#examples","843":"docs/pages/reference/cheatcodes/is-context.mdx#iscontext","844":"docs/pages/reference/cheatcodes/is-context.mdx#signature","845":"docs/pages/reference/cheatcodes/is-context.mdx#description","846":"docs/pages/reference/cheatcodes/is-context.mdx#examples","847":"docs/pages/reference/cheatcodes/is-persistent.mdx#ispersistent","848":"docs/pages/reference/cheatcodes/is-persistent.mdx#signature","849":"docs/pages/reference/cheatcodes/is-persistent.mdx#description","850":"docs/pages/reference/cheatcodes/is-persistent.mdx#examples","851":"docs/pages/reference/cheatcodes/is-persistent.mdx#see-also","852":"docs/pages/reference/cheatcodes/key-exists-json.mdx#keyexistsjson","853":"docs/pages/reference/cheatcodes/key-exists-json.mdx#signature","854":"docs/pages/reference/cheatcodes/key-exists-json.mdx#description","855":"docs/pages/reference/cheatcodes/key-exists-json.mdx#examples","856":"docs/pages/reference/cheatcodes/key-exists-toml.mdx#keyexiststoml","857":"docs/pages/reference/cheatcodes/key-exists-toml.mdx#signature","858":"docs/pages/reference/cheatcodes/key-exists-toml.mdx#description","859":"docs/pages/reference/cheatcodes/key-exists-toml.mdx#examples","860":"docs/pages/reference/cheatcodes/key-exists.mdx#keyexists","861":"docs/pages/reference/cheatcodes/key-exists.mdx#status","862":"docs/pages/reference/cheatcodes/key-exists.mdx#signature","863":"docs/pages/reference/cheatcodes/key-exists.mdx#description","864":"docs/pages/reference/cheatcodes/key-exists.mdx#examples","865":"docs/pages/reference/cheatcodes/label.mdx#label","866":"docs/pages/reference/cheatcodes/label.mdx#signature","867":"docs/pages/reference/cheatcodes/label.mdx#description","868":"docs/pages/reference/cheatcodes/load.mdx#load","869":"docs/pages/reference/cheatcodes/load.mdx#signature","870":"docs/pages/reference/cheatcodes/load.mdx#description","871":"docs/pages/reference/cheatcodes/load.mdx#examples","872":"docs/pages/reference/cheatcodes/load.mdx#see-also","873":"docs/pages/reference/cheatcodes/make-persistent.mdx#makepersistent","874":"docs/pages/reference/cheatcodes/make-persistent.mdx#signature","875":"docs/pages/reference/cheatcodes/make-persistent.mdx#description","876":"docs/pages/reference/cheatcodes/make-persistent.mdx#examples","877":"docs/pages/reference/cheatcodes/make-persistent.mdx#see-also","878":"docs/pages/reference/cheatcodes/mock-call-revert.mdx#mockcallrevert","879":"docs/pages/reference/cheatcodes/mock-call-revert.mdx#signature","880":"docs/pages/reference/cheatcodes/mock-call-revert.mdx#description","881":"docs/pages/reference/cheatcodes/mock-call-revert.mdx#examples","882":"docs/pages/reference/cheatcodes/mock-call.mdx#mockcall","883":"docs/pages/reference/cheatcodes/mock-call.mdx#signature","884":"docs/pages/reference/cheatcodes/mock-call.mdx#description","885":"docs/pages/reference/cheatcodes/mock-call.mdx#examples","886":"docs/pages/reference/cheatcodes/mock-calls.mdx#mockcalls","887":"docs/pages/reference/cheatcodes/mock-calls.mdx#signature","888":"docs/pages/reference/cheatcodes/mock-calls.mdx#description","889":"docs/pages/reference/cheatcodes/mock-calls.mdx#examples","890":"docs/pages/reference/cheatcodes/mock-function.mdx#mockfunction","891":"docs/pages/reference/cheatcodes/mock-function.mdx#signature","892":"docs/pages/reference/cheatcodes/mock-function.mdx#description","893":"docs/pages/reference/cheatcodes/mock-function.mdx#examples","894":"docs/pages/reference/cheatcodes/overview.mdx#cheatcodes-reference","895":"docs/pages/reference/cheatcodes/overview.mdx#forge-standard-library-cheatcodes","896":"docs/pages/reference/cheatcodes/overview.mdx#cheatcode-types","897":"docs/pages/reference/cheatcodes/overview.mdx#add-a-new-cheatcode","898":"docs/pages/reference/cheatcodes/overview.mdx#cheatcodes-interface","899":"docs/pages/reference/cheatcodes/parse-address.mdx#parseaddress","900":"docs/pages/reference/cheatcodes/parse-address.mdx#signature","901":"docs/pages/reference/cheatcodes/parse-address.mdx#description","902":"docs/pages/reference/cheatcodes/parse-address.mdx#examples","903":"docs/pages/reference/cheatcodes/parse-bool.mdx#parsebool","904":"docs/pages/reference/cheatcodes/parse-bool.mdx#signature","905":"docs/pages/reference/cheatcodes/parse-bool.mdx#description","906":"docs/pages/reference/cheatcodes/parse-bool.mdx#examples","907":"docs/pages/reference/cheatcodes/parse-bytes.mdx#parsebytes","908":"docs/pages/reference/cheatcodes/parse-bytes.mdx#signature","909":"docs/pages/reference/cheatcodes/parse-bytes.mdx#description","910":"docs/pages/reference/cheatcodes/parse-bytes.mdx#examples","911":"docs/pages/reference/cheatcodes/parse-bytes32.mdx#parsebytes32","912":"docs/pages/reference/cheatcodes/parse-bytes32.mdx#signature","913":"docs/pages/reference/cheatcodes/parse-bytes32.mdx#description","914":"docs/pages/reference/cheatcodes/parse-bytes32.mdx#examples","915":"docs/pages/reference/cheatcodes/parse-int.mdx#parseint","916":"docs/pages/reference/cheatcodes/parse-int.mdx#signature","917":"docs/pages/reference/cheatcodes/parse-int.mdx#description","918":"docs/pages/reference/cheatcodes/parse-int.mdx#examples","919":"docs/pages/reference/cheatcodes/parse-json-keys.mdx#parsejsonkeys","920":"docs/pages/reference/cheatcodes/parse-json-keys.mdx#signature","921":"docs/pages/reference/cheatcodes/parse-json-keys.mdx#description","922":"docs/pages/reference/cheatcodes/parse-json-keys.mdx#examples","923":"docs/pages/reference/cheatcodes/parse-json.mdx#parsejson","924":"docs/pages/reference/cheatcodes/parse-json.mdx#signature","925":"docs/pages/reference/cheatcodes/parse-json.mdx#description","926":"docs/pages/reference/cheatcodes/parse-json.mdx#jsonpath-key","927":"docs/pages/reference/cheatcodes/parse-json.mdx#json-encoding-rules","928":"docs/pages/reference/cheatcodes/parse-json.mdx#type-coercion","929":"docs/pages/reference/cheatcodes/parse-json.mdx#decoding-json-objects-into-solidity-structs","930":"docs/pages/reference/cheatcodes/parse-json.mdx#decoding-json-objects-a-tip","931":"docs/pages/reference/cheatcodes/parse-json.mdx#how-to-use-stdjson","932":"docs/pages/reference/cheatcodes/parse-json.mdx#forge-script-artifacts","933":"docs/pages/reference/cheatcodes/parse-json.mdx#troubleshooting","934":"docs/pages/reference/cheatcodes/parse-json.mdx#cannot-read-file","935":"docs/pages/reference/cheatcodes/parse-json.mdx#references","936":"docs/pages/reference/cheatcodes/parse-toml-keys.mdx#parsetomlkeys","937":"docs/pages/reference/cheatcodes/parse-toml-keys.mdx#signature","938":"docs/pages/reference/cheatcodes/parse-toml-keys.mdx#description","939":"docs/pages/reference/cheatcodes/parse-toml-keys.mdx#examples","940":"docs/pages/reference/cheatcodes/parse-toml.mdx#parsetoml","941":"docs/pages/reference/cheatcodes/parse-toml.mdx#signature","942":"docs/pages/reference/cheatcodes/parse-toml.mdx#description","943":"docs/pages/reference/cheatcodes/parse-toml.mdx#jsonpath-key","944":"docs/pages/reference/cheatcodes/parse-toml.mdx#encoding-rules","945":"docs/pages/reference/cheatcodes/parse-toml.mdx#type-coercion","946":"docs/pages/reference/cheatcodes/parse-toml.mdx#decoding-toml-tables-into-solidity-structs","947":"docs/pages/reference/cheatcodes/parse-toml.mdx#how-to-use-stdtoml","948":"docs/pages/reference/cheatcodes/parse-toml.mdx#troubleshooting","949":"docs/pages/reference/cheatcodes/parse-toml.mdx#cannot-read-file","950":"docs/pages/reference/cheatcodes/parse-toml.mdx#references","951":"docs/pages/reference/cheatcodes/parse-uint.mdx#parseuint","952":"docs/pages/reference/cheatcodes/parse-uint.mdx#signature","953":"docs/pages/reference/cheatcodes/parse-uint.mdx#description","954":"docs/pages/reference/cheatcodes/parse-uint.mdx#examples","955":"docs/pages/reference/cheatcodes/pause-gas-metering.mdx#pausegasmetering","956":"docs/pages/reference/cheatcodes/pause-gas-metering.mdx#signature","957":"docs/pages/reference/cheatcodes/pause-gas-metering.mdx#description","958":"docs/pages/reference/cheatcodes/prank.mdx#prank","959":"docs/pages/reference/cheatcodes/prank.mdx#signature","960":"docs/pages/reference/cheatcodes/prank.mdx#description","961":"docs/pages/reference/cheatcodes/prank.mdx#examples","962":"docs/pages/reference/cheatcodes/prank.mdx#see-also","963":"docs/pages/reference/cheatcodes/prevrandao.mdx#prevrandao","964":"docs/pages/reference/cheatcodes/prevrandao.mdx#signature","965":"docs/pages/reference/cheatcodes/prevrandao.mdx#description","966":"docs/pages/reference/cheatcodes/prevrandao.mdx#examples","967":"docs/pages/reference/cheatcodes/project-root.mdx#projectroot","968":"docs/pages/reference/cheatcodes/project-root.mdx#signature","969":"docs/pages/reference/cheatcodes/project-root.mdx#description","970":"docs/pages/reference/cheatcodes/prompt.mdx#prompt","971":"docs/pages/reference/cheatcodes/prompt.mdx#signature","972":"docs/pages/reference/cheatcodes/prompt.mdx#description","973":"docs/pages/reference/cheatcodes/prompt.mdx#configuration","974":"docs/pages/reference/cheatcodes/prompt.mdx#best-practices","975":"docs/pages/reference/cheatcodes/prompt.mdx#testing-scripts-that-use-vmprompt","976":"docs/pages/reference/cheatcodes/prompt.mdx#handling-timeouts","977":"docs/pages/reference/cheatcodes/prompt.mdx#examples","978":"docs/pages/reference/cheatcodes/prompt.mdx#choose-rpc-endpoint","979":"docs/pages/reference/cheatcodes/prompt.mdx#parse-user-input-into-native-types","980":"docs/pages/reference/cheatcodes/read-callers.mdx#readcallers","981":"docs/pages/reference/cheatcodes/read-callers.mdx#signature","982":"docs/pages/reference/cheatcodes/read-callers.mdx#description","983":"docs/pages/reference/cheatcodes/read-callers.mdx#examples","984":"docs/pages/reference/cheatcodes/read-callers.mdx#see-also","985":"docs/pages/reference/cheatcodes/record-logs.mdx#recordlogs","986":"docs/pages/reference/cheatcodes/record-logs.mdx#signature","987":"docs/pages/reference/cheatcodes/record-logs.mdx#description","988":"docs/pages/reference/cheatcodes/record-logs.mdx#examples","989":"docs/pages/reference/cheatcodes/record.mdx#record","990":"docs/pages/reference/cheatcodes/record.mdx#signature","991":"docs/pages/reference/cheatcodes/record.mdx#description","992":"docs/pages/reference/cheatcodes/record.mdx#examples","993":"docs/pages/reference/cheatcodes/record.mdx#see-also","994":"docs/pages/reference/cheatcodes/remember-key.mdx#rememberkey","995":"docs/pages/reference/cheatcodes/remember-key.mdx#signature","996":"docs/pages/reference/cheatcodes/remember-key.mdx#description","997":"docs/pages/reference/cheatcodes/remember-key.mdx#examples","998":"docs/pages/reference/cheatcodes/remember-key.mdx#see-also","999":"docs/pages/reference/cheatcodes/reset-gas-metering.mdx#resetgasmetering","1000":"docs/pages/reference/cheatcodes/reset-gas-metering.mdx#signature","1001":"docs/pages/reference/cheatcodes/reset-gas-metering.mdx#description","1002":"docs/pages/reference/cheatcodes/resume-gas-metering.mdx#resumegasmetering","1003":"docs/pages/reference/cheatcodes/resume-gas-metering.mdx#signature","1004":"docs/pages/reference/cheatcodes/resume-gas-metering.mdx#description","1005":"docs/pages/reference/cheatcodes/revoke-persistent.mdx#revokepersistent","1006":"docs/pages/reference/cheatcodes/revoke-persistent.mdx#signature","1007":"docs/pages/reference/cheatcodes/revoke-persistent.mdx#description","1008":"docs/pages/reference/cheatcodes/revoke-persistent.mdx#examples","1009":"docs/pages/reference/cheatcodes/revoke-persistent.mdx#see-also","1010":"docs/pages/reference/cheatcodes/roll-fork.mdx#rollfork","1011":"docs/pages/reference/cheatcodes/roll-fork.mdx#signature","1012":"docs/pages/reference/cheatcodes/roll-fork.mdx#description","1013":"docs/pages/reference/cheatcodes/roll-fork.mdx#examples","1014":"docs/pages/reference/cheatcodes/roll-fork.mdx#see-also","1015":"docs/pages/reference/cheatcodes/roll.mdx#roll","1016":"docs/pages/reference/cheatcodes/roll.mdx#signature","1017":"docs/pages/reference/cheatcodes/roll.mdx#description","1018":"docs/pages/reference/cheatcodes/roll.mdx#examples","1019":"docs/pages/reference/cheatcodes/roll.mdx#see-also","1020":"docs/pages/reference/cheatcodes/rpc.mdx#rpc-related-cheatcodes","1021":"docs/pages/reference/cheatcodes/rpc.mdx#signature","1022":"docs/pages/reference/cheatcodes/rpc.mdx#description","1023":"docs/pages/reference/cheatcodes/rpc.mdx#examples","1024":"docs/pages/reference/cheatcodes/rpc.mdx#see-also","1025":"docs/pages/reference/cheatcodes/select-fork.mdx#selectfork","1026":"docs/pages/reference/cheatcodes/select-fork.mdx#signature","1027":"docs/pages/reference/cheatcodes/select-fork.mdx#description","1028":"docs/pages/reference/cheatcodes/select-fork.mdx#examples","1029":"docs/pages/reference/cheatcodes/select-fork.mdx#see-also","1030":"docs/pages/reference/cheatcodes/serialize-json.mdx#serializejson","1031":"docs/pages/reference/cheatcodes/serialize-json.mdx#signature","1032":"docs/pages/reference/cheatcodes/serialize-json.mdx#description","1033":"docs/pages/reference/cheatcodes/serialize-json.mdx#how-it-works","1034":"docs/pages/reference/cheatcodes/serialize-json.mdx#example","1035":"docs/pages/reference/cheatcodes/serialize-json.mdx#see-also","1036":"docs/pages/reference/cheatcodes/set-arbitrary-storage.mdx#setarbitrarystorage","1037":"docs/pages/reference/cheatcodes/set-arbitrary-storage.mdx#signature","1038":"docs/pages/reference/cheatcodes/set-arbitrary-storage.mdx#description","1039":"docs/pages/reference/cheatcodes/set-arbitrary-storage.mdx#examples","1040":"docs/pages/reference/cheatcodes/set-env.mdx#setenv","1041":"docs/pages/reference/cheatcodes/set-env.mdx#signature","1042":"docs/pages/reference/cheatcodes/set-env.mdx#description","1043":"docs/pages/reference/cheatcodes/set-env.mdx#tips","1044":"docs/pages/reference/cheatcodes/set-env.mdx#examples","1045":"docs/pages/reference/cheatcodes/set-nonce.mdx#setnonce","1046":"docs/pages/reference/cheatcodes/set-nonce.mdx#signature","1047":"docs/pages/reference/cheatcodes/set-nonce.mdx#description","1048":"docs/pages/reference/cheatcodes/set-nonce.mdx#examples","1049":"docs/pages/reference/cheatcodes/sign-delegation.mdx#signdelegation","1050":"docs/pages/reference/cheatcodes/sign-delegation.mdx#signature","1051":"docs/pages/reference/cheatcodes/sign-delegation.mdx#description","1052":"docs/pages/reference/cheatcodes/sign-delegation.mdx#examples","1053":"docs/pages/reference/cheatcodes/sign.mdx#sign","1054":"docs/pages/reference/cheatcodes/sign.mdx#signature","1055":"docs/pages/reference/cheatcodes/sign.mdx#description","1056":"docs/pages/reference/cheatcodes/sign.mdx#examples","1057":"docs/pages/reference/cheatcodes/sign.mdx#wallet","1058":"docs/pages/reference/cheatcodes/signing.mdx#signing","1059":"docs/pages/reference/cheatcodes/skip.mdx#skip","1060":"docs/pages/reference/cheatcodes/skip.mdx#signature","1061":"docs/pages/reference/cheatcodes/skip.mdx#description","1062":"docs/pages/reference/cheatcodes/skip.mdx#examples","1063":"docs/pages/reference/cheatcodes/sleep.mdx#sleep","1064":"docs/pages/reference/cheatcodes/sleep.mdx#signature","1065":"docs/pages/reference/cheatcodes/sleep.mdx#description","1066":"docs/pages/reference/cheatcodes/sleep.mdx#examples","1067":"docs/pages/reference/cheatcodes/start-broadcast.mdx#startbroadcast","1068":"docs/pages/reference/cheatcodes/start-broadcast.mdx#signature","1069":"docs/pages/reference/cheatcodes/start-broadcast.mdx#description","1070":"docs/pages/reference/cheatcodes/start-broadcast.mdx#examples","1071":"docs/pages/reference/cheatcodes/start-broadcast.mdx#see-also","1072":"docs/pages/reference/cheatcodes/start-prank.mdx#startprank","1073":"docs/pages/reference/cheatcodes/start-prank.mdx#signature","1074":"docs/pages/reference/cheatcodes/start-prank.mdx#description","1075":"docs/pages/reference/cheatcodes/start-prank.mdx#examples","1076":"docs/pages/reference/cheatcodes/start-prank.mdx#see-also","1077":"docs/pages/reference/cheatcodes/start-state-diff-recording.mdx#startstatediffrecording","1078":"docs/pages/reference/cheatcodes/start-state-diff-recording.mdx#signature","1079":"docs/pages/reference/cheatcodes/start-state-diff-recording.mdx#description","1080":"docs/pages/reference/cheatcodes/state-snapshots.mdx#snapshotstate-cheatcodes","1081":"docs/pages/reference/cheatcodes/state-snapshots.mdx#signature","1082":"docs/pages/reference/cheatcodes/state-snapshots.mdx#description","1083":"docs/pages/reference/cheatcodes/state-snapshots.mdx#examples","1084":"docs/pages/reference/cheatcodes/stop-and-return-state-diff.mdx#stopandreturnstatediff","1085":"docs/pages/reference/cheatcodes/stop-and-return-state-diff.mdx#signature","1086":"docs/pages/reference/cheatcodes/stop-and-return-state-diff.mdx#description","1087":"docs/pages/reference/cheatcodes/stop-and-return-state-diff.mdx#accountaccesskind","1088":"docs/pages/reference/cheatcodes/stop-and-return-state-diff.mdx#accountaccess","1089":"docs/pages/reference/cheatcodes/stop-and-return-state-diff.mdx#storageaccess","1090":"docs/pages/reference/cheatcodes/stop-and-return-state-diff.mdx#resumed-accountaccess","1091":"docs/pages/reference/cheatcodes/stop-and-return-state-diff.mdx#example-recording-storage-state-changes-during-a-create-operation","1092":"docs/pages/reference/cheatcodes/stop-and-return-state-diff.mdx#example-resumed-account-access","1093":"docs/pages/reference/cheatcodes/stop-broadcast.mdx#stopbroadcast","1094":"docs/pages/reference/cheatcodes/stop-broadcast.mdx#signature","1095":"docs/pages/reference/cheatcodes/stop-broadcast.mdx#description","1096":"docs/pages/reference/cheatcodes/stop-broadcast.mdx#examples","1097":"docs/pages/reference/cheatcodes/stop-prank.mdx#stopprank","1098":"docs/pages/reference/cheatcodes/stop-prank.mdx#signature","1099":"docs/pages/reference/cheatcodes/stop-prank.mdx#description","1100":"docs/pages/reference/cheatcodes/store.mdx#store","1101":"docs/pages/reference/cheatcodes/store.mdx#signature","1102":"docs/pages/reference/cheatcodes/store.mdx#description","1103":"docs/pages/reference/cheatcodes/store.mdx#examples","1104":"docs/pages/reference/cheatcodes/store.mdx#see-also","1105":"docs/pages/reference/cheatcodes/to-string.mdx#tostring","1106":"docs/pages/reference/cheatcodes/to-string.mdx#signature","1107":"docs/pages/reference/cheatcodes/to-string.mdx#description","1108":"docs/pages/reference/cheatcodes/to-string.mdx#examples","1109":"docs/pages/reference/cheatcodes/transact.mdx#transact","1110":"docs/pages/reference/cheatcodes/transact.mdx#signature","1111":"docs/pages/reference/cheatcodes/transact.mdx#description","1112":"docs/pages/reference/cheatcodes/transact.mdx#examples","1113":"docs/pages/reference/cheatcodes/transact.mdx#see-also","1114":"docs/pages/reference/cheatcodes/tx-gas-price.mdx#txgasprice","1115":"docs/pages/reference/cheatcodes/tx-gas-price.mdx#signature","1116":"docs/pages/reference/cheatcodes/tx-gas-price.mdx#description","1117":"docs/pages/reference/cheatcodes/tx-gas-price.mdx#examples","1118":"docs/pages/reference/cheatcodes/unix-time.mdx#unixtime","1119":"docs/pages/reference/cheatcodes/unix-time.mdx#signature","1120":"docs/pages/reference/cheatcodes/unix-time.mdx#description","1121":"docs/pages/reference/cheatcodes/unix-time.mdx#examples","1122":"docs/pages/reference/cheatcodes/utilities.mdx#utilities","1123":"docs/pages/reference/cheatcodes/warp.mdx#warp","1124":"docs/pages/reference/cheatcodes/warp.mdx#signature","1125":"docs/pages/reference/cheatcodes/warp.mdx#description","1126":"docs/pages/reference/cheatcodes/warp.mdx#examples","1127":"docs/pages/reference/cheatcodes/warp.mdx#see-also","1128":"docs/pages/reference/cheatcodes/write-json.mdx#writejson","1129":"docs/pages/reference/cheatcodes/write-json.mdx#signature","1130":"docs/pages/reference/cheatcodes/write-json.mdx#description","1131":"docs/pages/reference/cheatcodes/write-json.mdx#json-paths","1132":"docs/pages/reference/cheatcodes/write-json.mdx#examples","1133":"docs/pages/reference/cheatcodes/write-json.mdx#a-simple-example","1134":"docs/pages/reference/cheatcodes/write-json.mdx#a-more-complex-example","1135":"docs/pages/reference/cheatcodes/write-json.mdx#see-also","1136":"docs/pages/reference/cheatcodes/write-toml.mdx#writetoml","1137":"docs/pages/reference/cheatcodes/write-toml.mdx#signature","1138":"docs/pages/reference/cheatcodes/write-toml.mdx#description","1139":"docs/pages/reference/cheatcodes/write-toml.mdx#json-paths","1140":"docs/pages/reference/cheatcodes/write-toml.mdx#examples","1141":"docs/pages/reference/cheatcodes/write-toml.mdx#a-simple-example","1142":"docs/pages/reference/cheatcodes/write-toml.mdx#a-more-complex-example","1143":"docs/pages/reference/cheatcodes/write-toml.mdx#see-also","1144":"docs/pages/reference/forge-std/abs.mdx#abs","1145":"docs/pages/reference/forge-std/abs.mdx#signature","1146":"docs/pages/reference/forge-std/abs.mdx#description","1147":"docs/pages/reference/forge-std/abs.mdx#example","1148":"docs/pages/reference/forge-std/arithmeticError.mdx#arithmeticerror","1149":"docs/pages/reference/forge-std/arithmeticError.mdx#signature","1150":"docs/pages/reference/forge-std/arithmeticError.mdx#description","1151":"docs/pages/reference/forge-std/arithmeticError.mdx#example","1152":"docs/pages/reference/forge-std/assertApproxEqAbs.mdx#assertapproxeqabs","1153":"docs/pages/reference/forge-std/assertApproxEqAbs.mdx#signature","1154":"docs/pages/reference/forge-std/assertApproxEqAbs.mdx#description","1155":"docs/pages/reference/forge-std/assertApproxEqAbs.mdx#examples","1156":"docs/pages/reference/forge-std/assertApproxEqAbs.mdx#see-also","1157":"docs/pages/reference/forge-std/assertApproxEqAbsDecimal.mdx#assertapproxeqabsdecimal","1158":"docs/pages/reference/forge-std/assertApproxEqAbsDecimal.mdx#signature","1159":"docs/pages/reference/forge-std/assertApproxEqAbsDecimal.mdx#description","1160":"docs/pages/reference/forge-std/assertApproxEqAbsDecimal.mdx#see-also","1161":"docs/pages/reference/forge-std/assertApproxEqRel.mdx#assertapproxeqrel","1162":"docs/pages/reference/forge-std/assertApproxEqRel.mdx#signature","1163":"docs/pages/reference/forge-std/assertApproxEqRel.mdx#description","1164":"docs/pages/reference/forge-std/assertApproxEqRel.mdx#examples","1165":"docs/pages/reference/forge-std/assertApproxEqRel.mdx#see-also","1166":"docs/pages/reference/forge-std/assertApproxEqRelDecimal.mdx#assertapproxeqreldecimal","1167":"docs/pages/reference/forge-std/assertApproxEqRelDecimal.mdx#signature","1168":"docs/pages/reference/forge-std/assertApproxEqRelDecimal.mdx#description","1169":"docs/pages/reference/forge-std/assertApproxEqRelDecimal.mdx#see-also","1170":"docs/pages/reference/forge-std/assertEq.mdx#asserteq","1171":"docs/pages/reference/forge-std/assertEq.mdx#signature","1172":"docs/pages/reference/forge-std/assertEq.mdx#bool","1173":"docs/pages/reference/forge-std/assertEq.mdx#uint256","1174":"docs/pages/reference/forge-std/assertEq.mdx#int256","1175":"docs/pages/reference/forge-std/assertEq.mdx#address","1176":"docs/pages/reference/forge-std/assertEq.mdx#bytes32","1177":"docs/pages/reference/forge-std/assertEq.mdx#string","1178":"docs/pages/reference/forge-std/assertEq.mdx#bytes","1179":"docs/pages/reference/forge-std/assertEq.mdx#bool-1","1180":"docs/pages/reference/forge-std/assertEq.mdx#uint256-1","1181":"docs/pages/reference/forge-std/assertEq.mdx#int256-1","1182":"docs/pages/reference/forge-std/assertEq.mdx#address-1","1183":"docs/pages/reference/forge-std/assertEq.mdx#bytes32-1","1184":"docs/pages/reference/forge-std/assertEq.mdx#string-1","1185":"docs/pages/reference/forge-std/assertEq.mdx#bytes-1","1186":"docs/pages/reference/forge-std/assertEq.mdx#legacy","1187":"docs/pages/reference/forge-std/assertEq.mdx#description","1188":"docs/pages/reference/forge-std/assertEq.mdx#see-also","1189":"docs/pages/reference/forge-std/assertEqDecimal.mdx#asserteqdecimal","1190":"docs/pages/reference/forge-std/assertEqDecimal.mdx#signature","1191":"docs/pages/reference/forge-std/assertEqDecimal.mdx#description","1192":"docs/pages/reference/forge-std/assertEqDecimal.mdx#see-also","1193":"docs/pages/reference/forge-std/assertFalse.mdx#assertfalse","1194":"docs/pages/reference/forge-std/assertFalse.mdx#signature","1195":"docs/pages/reference/forge-std/assertFalse.mdx#description","1196":"docs/pages/reference/forge-std/assertFalse.mdx#examples","1197":"docs/pages/reference/forge-std/assertFalse.mdx#see-also","1198":"docs/pages/reference/forge-std/assertGe.mdx#assertge","1199":"docs/pages/reference/forge-std/assertGe.mdx#signature","1200":"docs/pages/reference/forge-std/assertGe.mdx#description","1201":"docs/pages/reference/forge-std/assertGe.mdx#see-also","1202":"docs/pages/reference/forge-std/assertGeDecimal.mdx#assertgedecimal","1203":"docs/pages/reference/forge-std/assertGeDecimal.mdx#signature","1204":"docs/pages/reference/forge-std/assertGeDecimal.mdx#description","1205":"docs/pages/reference/forge-std/assertGeDecimal.mdx#see-also","1206":"docs/pages/reference/forge-std/assertGt.mdx#assertgt","1207":"docs/pages/reference/forge-std/assertGt.mdx#signature","1208":"docs/pages/reference/forge-std/assertGt.mdx#description","1209":"docs/pages/reference/forge-std/assertGt.mdx#see-also","1210":"docs/pages/reference/forge-std/assertGtDecimal.mdx#assertgtdecimal","1211":"docs/pages/reference/forge-std/assertGtDecimal.mdx#signature","1212":"docs/pages/reference/forge-std/assertGtDecimal.mdx#description","1213":"docs/pages/reference/forge-std/assertGtDecimal.mdx#see-also","1214":"docs/pages/reference/forge-std/assertLe.mdx#assertle","1215":"docs/pages/reference/forge-std/assertLe.mdx#signature","1216":"docs/pages/reference/forge-std/assertLe.mdx#description","1217":"docs/pages/reference/forge-std/assertLe.mdx#see-also","1218":"docs/pages/reference/forge-std/assertLeDecimal.mdx#assertledecimal","1219":"docs/pages/reference/forge-std/assertLeDecimal.mdx#signature","1220":"docs/pages/reference/forge-std/assertLeDecimal.mdx#description","1221":"docs/pages/reference/forge-std/assertLeDecimal.mdx#see-also","1222":"docs/pages/reference/forge-std/assertLt.mdx#assertlt","1223":"docs/pages/reference/forge-std/assertLt.mdx#signature","1224":"docs/pages/reference/forge-std/assertLt.mdx#description","1225":"docs/pages/reference/forge-std/assertLt.mdx#see-also","1226":"docs/pages/reference/forge-std/assertLtDecimal.mdx#assertltdecimal","1227":"docs/pages/reference/forge-std/assertLtDecimal.mdx#signature","1228":"docs/pages/reference/forge-std/assertLtDecimal.mdx#description","1229":"docs/pages/reference/forge-std/assertLtDecimal.mdx#see-also","1230":"docs/pages/reference/forge-std/assertNotEq.mdx#assertnoteq","1231":"docs/pages/reference/forge-std/assertNotEq.mdx#signature","1232":"docs/pages/reference/forge-std/assertNotEq.mdx#bool","1233":"docs/pages/reference/forge-std/assertNotEq.mdx#uint256","1234":"docs/pages/reference/forge-std/assertNotEq.mdx#int256","1235":"docs/pages/reference/forge-std/assertNotEq.mdx#address","1236":"docs/pages/reference/forge-std/assertNotEq.mdx#bytes32","1237":"docs/pages/reference/forge-std/assertNotEq.mdx#string","1238":"docs/pages/reference/forge-std/assertNotEq.mdx#bytes","1239":"docs/pages/reference/forge-std/assertNotEq.mdx#bool-1","1240":"docs/pages/reference/forge-std/assertNotEq.mdx#uint256-1","1241":"docs/pages/reference/forge-std/assertNotEq.mdx#int256-1","1242":"docs/pages/reference/forge-std/assertNotEq.mdx#address-1","1243":"docs/pages/reference/forge-std/assertNotEq.mdx#bytes32-1","1244":"docs/pages/reference/forge-std/assertNotEq.mdx#string-1","1245":"docs/pages/reference/forge-std/assertNotEq.mdx#bytes-1","1246":"docs/pages/reference/forge-std/assertNotEq.mdx#legacy","1247":"docs/pages/reference/forge-std/assertNotEq.mdx#description","1248":"docs/pages/reference/forge-std/assertNotEq.mdx#see-also","1249":"docs/pages/reference/forge-std/assertNotEqDecimal.mdx#assertnoteqdecimal","1250":"docs/pages/reference/forge-std/assertNotEqDecimal.mdx#signature","1251":"docs/pages/reference/forge-std/assertNotEqDecimal.mdx#description","1252":"docs/pages/reference/forge-std/assertNotEqDecimal.mdx#see-also","1253":"docs/pages/reference/forge-std/assertTrue.mdx#asserttrue","1254":"docs/pages/reference/forge-std/assertTrue.mdx#signature","1255":"docs/pages/reference/forge-std/assertTrue.mdx#description","1256":"docs/pages/reference/forge-std/assertTrue.mdx#examples","1257":"docs/pages/reference/forge-std/assertTrue.mdx#see-also","1258":"docs/pages/reference/forge-std/assertionError.mdx#assertionerror","1259":"docs/pages/reference/forge-std/assertionError.mdx#signature","1260":"docs/pages/reference/forge-std/assertionError.mdx#description","1261":"docs/pages/reference/forge-std/assume-no-precompiles.mdx#assumenotprecompile","1262":"docs/pages/reference/forge-std/assume-no-precompiles.mdx#signature","1263":"docs/pages/reference/forge-std/assume-no-precompiles.mdx#description","1264":"docs/pages/reference/forge-std/assume-no-precompiles.mdx#registry","1265":"docs/pages/reference/forge-std/assume-no-precompiles.mdx#reserved-ranges","1266":"docs/pages/reference/forge-std/assume-payable.mdx#assumepayable","1267":"docs/pages/reference/forge-std/assume-payable.mdx#signature","1268":"docs/pages/reference/forge-std/assume-payable.mdx#description","1269":"docs/pages/reference/forge-std/bound.mdx#bound","1270":"docs/pages/reference/forge-std/bound.mdx#signature","1271":"docs/pages/reference/forge-std/bound.mdx#description","1272":"docs/pages/reference/forge-std/bound.mdx#examples","1273":"docs/pages/reference/forge-std/change-prank.mdx#changeprank","1274":"docs/pages/reference/forge-std/change-prank.mdx#status","1275":"docs/pages/reference/forge-std/change-prank.mdx#signature","1276":"docs/pages/reference/forge-std/change-prank.mdx#description","1277":"docs/pages/reference/forge-std/checked_write.mdx#checked_write","1278":"docs/pages/reference/forge-std/checked_write.mdx#signature","1279":"docs/pages/reference/forge-std/checked_write.mdx#description","1280":"docs/pages/reference/forge-std/compute-create-address.mdx#computecreateaddress","1281":"docs/pages/reference/forge-std/compute-create-address.mdx#signature","1282":"docs/pages/reference/forge-std/compute-create-address.mdx#description","1283":"docs/pages/reference/forge-std/compute-create-address.mdx#example","1284":"docs/pages/reference/forge-std/console-log.mdx#console-logging","1285":"docs/pages/reference/forge-std/console-log.mdx#consolelogformatargs","1286":"docs/pages/reference/forge-std/deal.mdx#deal","1287":"docs/pages/reference/forge-std/deal.mdx#signature","1288":"docs/pages/reference/forge-std/deal.mdx#description","1289":"docs/pages/reference/forge-std/deal.mdx#examples","1290":"docs/pages/reference/forge-std/delta.mdx#delta","1291":"docs/pages/reference/forge-std/delta.mdx#signature","1292":"docs/pages/reference/forge-std/delta.mdx#description","1293":"docs/pages/reference/forge-std/delta.mdx#example","1294":"docs/pages/reference/forge-std/deployCode.mdx#deploycode","1295":"docs/pages/reference/forge-std/deployCode.mdx#signature","1296":"docs/pages/reference/forge-std/deployCode.mdx#description","1297":"docs/pages/reference/forge-std/deployCode.mdx#examples","1298":"docs/pages/reference/forge-std/deployCode.mdx#see-also","1299":"docs/pages/reference/forge-std/deployCodeTo.mdx#deploycodeto","1300":"docs/pages/reference/forge-std/deployCodeTo.mdx#signature","1301":"docs/pages/reference/forge-std/deployCodeTo.mdx#description","1302":"docs/pages/reference/forge-std/deployCodeTo.mdx#examples","1303":"docs/pages/reference/forge-std/deployCodeTo.mdx#see-also","1304":"docs/pages/reference/forge-std/depth.mdx#depth","1305":"docs/pages/reference/forge-std/depth.mdx#signature","1306":"docs/pages/reference/forge-std/depth.mdx#description","1307":"docs/pages/reference/forge-std/derive-remember-key.mdx#deriverememberkey","1308":"docs/pages/reference/forge-std/derive-remember-key.mdx#signature","1309":"docs/pages/reference/forge-std/derive-remember-key.mdx#description","1310":"docs/pages/reference/forge-std/derive-remember-key.mdx#example","1311":"docs/pages/reference/forge-std/derive-remember-key.mdx#see-also","1312":"docs/pages/reference/forge-std/divisionError.mdx#divisionerror","1313":"docs/pages/reference/forge-std/divisionError.mdx#signature","1314":"docs/pages/reference/forge-std/divisionError.mdx#description","1315":"docs/pages/reference/forge-std/enable_packed_slots.mdx#enable_packed_slots","1316":"docs/pages/reference/forge-std/enable_packed_slots.mdx#signature","1317":"docs/pages/reference/forge-std/enable_packed_slots.mdx#description","1318":"docs/pages/reference/forge-std/enable_packed_slots.mdx#examples","1319":"docs/pages/reference/forge-std/encodeStorageError.mdx#encodestorageerror","1320":"docs/pages/reference/forge-std/encodeStorageError.mdx#signature","1321":"docs/pages/reference/forge-std/encodeStorageError.mdx#description","1322":"docs/pages/reference/forge-std/enumConversionError.mdx#enumconversionerror","1323":"docs/pages/reference/forge-std/enumConversionError.mdx#signature","1324":"docs/pages/reference/forge-std/enumConversionError.mdx#description","1325":"docs/pages/reference/forge-std/fail.mdx#fail","1326":"docs/pages/reference/forge-std/fail.mdx#signature","1327":"docs/pages/reference/forge-std/fail.mdx#description","1328":"docs/pages/reference/forge-std/fail.mdx#examples","1329":"docs/pages/reference/forge-std/find.mdx#find","1330":"docs/pages/reference/forge-std/find.mdx#signature","1331":"docs/pages/reference/forge-std/find.mdx#description","1332":"docs/pages/reference/forge-std/hoax.mdx#hoax","1333":"docs/pages/reference/forge-std/hoax.mdx#signature","1334":"docs/pages/reference/forge-std/hoax.mdx#description","1335":"docs/pages/reference/forge-std/indexOOBError.mdx#indexooberror","1336":"docs/pages/reference/forge-std/indexOOBError.mdx#signature","1337":"docs/pages/reference/forge-std/indexOOBError.mdx#description","1338":"docs/pages/reference/forge-std/make-addr-and-key.mdx#makeaddrandkey","1339":"docs/pages/reference/forge-std/make-addr-and-key.mdx#signature","1340":"docs/pages/reference/forge-std/make-addr-and-key.mdx#description","1341":"docs/pages/reference/forge-std/make-addr-and-key.mdx#examples","1342":"docs/pages/reference/forge-std/make-addr.mdx#makeaddr","1343":"docs/pages/reference/forge-std/make-addr.mdx#signature","1344":"docs/pages/reference/forge-std/make-addr.mdx#description","1345":"docs/pages/reference/forge-std/make-addr.mdx#examples","1346":"docs/pages/reference/forge-std/memOverflowError.mdx#memoverflowerror","1347":"docs/pages/reference/forge-std/memOverflowError.mdx#signature","1348":"docs/pages/reference/forge-std/memOverflowError.mdx#description","1349":"docs/pages/reference/forge-std/noGasMetering.mdx#nogasmetering","1350":"docs/pages/reference/forge-std/noGasMetering.mdx#signature","1351":"docs/pages/reference/forge-std/noGasMetering.mdx#description","1352":"docs/pages/reference/forge-std/noGasMetering.mdx#examples","1353":"docs/pages/reference/forge-std/overview.mdx#forge-standard-library-reference","1354":"docs/pages/reference/forge-std/overview.mdx#forge-stds-test","1355":"docs/pages/reference/forge-std/percentDelta.mdx#percentdelta","1356":"docs/pages/reference/forge-std/percentDelta.mdx#signature","1357":"docs/pages/reference/forge-std/percentDelta.mdx#description","1358":"docs/pages/reference/forge-std/percentDelta.mdx#example","1359":"docs/pages/reference/forge-std/popError.mdx#poperror","1360":"docs/pages/reference/forge-std/popError.mdx#signature","1361":"docs/pages/reference/forge-std/popError.mdx#description","1362":"docs/pages/reference/forge-std/read.mdx#read","1363":"docs/pages/reference/forge-std/read.mdx#signature","1364":"docs/pages/reference/forge-std/read.mdx#description","1365":"docs/pages/reference/forge-std/rewind.mdx#rewind","1366":"docs/pages/reference/forge-std/rewind.mdx#signature","1367":"docs/pages/reference/forge-std/rewind.mdx#description","1368":"docs/pages/reference/forge-std/rewind.mdx#examples","1369":"docs/pages/reference/forge-std/script-utils.mdx#script-utils","1370":"docs/pages/reference/forge-std/sig.mdx#sig","1371":"docs/pages/reference/forge-std/sig.mdx#signature","1372":"docs/pages/reference/forge-std/sig.mdx#description","1373":"docs/pages/reference/forge-std/sig.mdx#examples","1374":"docs/pages/reference/forge-std/skip.mdx#skip","1375":"docs/pages/reference/forge-std/skip.mdx#signature","1376":"docs/pages/reference/forge-std/skip.mdx#description","1377":"docs/pages/reference/forge-std/skip.mdx#examples","1378":"docs/pages/reference/forge-std/startHoax.mdx#starthoax","1379":"docs/pages/reference/forge-std/startHoax.mdx#signature","1380":"docs/pages/reference/forge-std/startHoax.mdx#description","1381":"docs/pages/reference/forge-std/std-assertions.mdx#std-assertions","1382":"docs/pages/reference/forge-std/std-cheats.mdx#std-cheats","1383":"docs/pages/reference/forge-std/std-errors.mdx#std-errors","1384":"docs/pages/reference/forge-std/std-logs.mdx#std-logs","1385":"docs/pages/reference/forge-std/std-logs.mdx#events","1386":"docs/pages/reference/forge-std/std-logs.mdx#usage","1387":"docs/pages/reference/forge-std/std-logs.mdx#log_array","1388":"docs/pages/reference/forge-std/std-logs.mdx#example","1389":"docs/pages/reference/forge-std/std-logs.mdx#log_named_array","1390":"docs/pages/reference/forge-std/std-logs.mdx#example-1","1391":"docs/pages/reference/forge-std/std-math.mdx#std-math","1392":"docs/pages/reference/forge-std/std-storage.mdx#std-storage","1393":"docs/pages/reference/forge-std/std-storage.mdx#functions","1394":"docs/pages/reference/forge-std/std-storage.mdx#simple-example","1395":"docs/pages/reference/forge-std/std-storage.mdx#packed-slot-example","1396":"docs/pages/reference/forge-std/std-storage.mdx#known-issues","1397":"docs/pages/reference/forge-std/target.mdx#target","1398":"docs/pages/reference/forge-std/target.mdx#signature","1399":"docs/pages/reference/forge-std/target.mdx#description","1400":"docs/pages/reference/forge-std/with_key.mdx#with_key","1401":"docs/pages/reference/forge-std/with_key.mdx#signature","1402":"docs/pages/reference/forge-std/with_key.mdx#description","1403":"docs/pages/reference/forge-std/with_key.mdx#examples","1404":"docs/pages/reference/forge-std/zeroVarError.mdx#zerovarerror","1405":"docs/pages/reference/forge-std/zeroVarError.mdx#signature","1406":"docs/pages/reference/forge-std/zeroVarError.mdx#description"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[1,1,28],"1":[2,2,128],"2":[1,1,1],"3":[5,2,65],"4":[1,1,1],"5":[1,2,24],"6":[1,2,3],"7":[1,2,50],"8":[2,3,108],"9":[3,3,28],"10":[3,3,22],"11":[3,3,1],"12":[2,6,88],"13":[2,6,149],"14":[2,6,143],"15":[2,6,98],"16":[1,2,1],"17":[2,3,138],"18":[2,3,125],"19":[3,3,38],"20":[2,3,49],"21":[1,2,32],"22":[2,2,18],"23":[1,4,12],"24":[3,2,42],"25":[3,5,140],"26":[1,1,46],"27":[2,2,90],"28":[1,1,1],"29":[1,2,14],"30":[1,2,3],"31":[3,3,49],"32":[1,3,12],"33":[1,2,55],"34":[1,2,136],"35":[2,3,310],"36":[1,1,62],"37":[2,2,95],"38":[1,2,1],"39":[1,2,8],"40":[2,2,57],"41":[2,2,15],"42":[3,2,21],"43":[1,1,150],"44":[3,1,93],"45":[5,1,213],"46":[1,6,1],"47":[7,7,10],"48":[4,7,32],"49":[4,7,10],"50":[2,7,8],"51":[5,7,67],"52":[3,7,26],"53":[2,6,1],"54":[6,8,45],"55":[2,1,35],"56":[2,3,122],"57":[4,1,94],"58":[2,1,51],"59":[4,1,43],"60":[2,5,20],"61":[2,5,29],"62":[3,5,156],"63":[1,5,13],"64":[2,5,60],"65":[3,1,97],"66":[2,1,10],"67":[6,1,106],"68":[3,1,16],"69":[2,4,32],"70":[3,4,36],"71":[3,1,11],"72":[2,7,46],"73":[2,7,32],"74":[2,7,36],"75":[6,4,64],"76":[5,10,95],"77":[2,4,97],"78":[2,4,131],"79":[6,1,37],"80":[2,1,37],"81":[2,1,83],"82":[5,1,79],"83":[3,6,114],"84":[7,6,148],"85":[7,6,162],"86":[5,6,125],"87":[5,6,127],"88":[6,6,63],"89":[3,1,52],"90":[1,1,118],"91":[2,1,27],"92":[3,1,89],"93":[3,4,72],"94":[3,4,220],"95":[4,4,237],"96":[6,4,130],"97":[3,1,45],"98":[2,1,1],"99":[2,3,42],"100":[2,3,38],"101":[2,1,36],"102":[3,1,186],"103":[3,1,27],"104":[10,4,62],"105":[7,4,20],"106":[6,4,142],"107":[6,4,92],"108":[4,1,83],"109":[2,5,48],"110":[2,1,14],"111":[1,3,42],"112":[1,3,12],"113":[1,3,14],"114":[2,1,1],"115":[1,3,156],"116":[1,3,35],"117":[1,3,144],"118":[3,1,30],"119":[2,4,32],"120":[2,4,29],"121":[2,4,37],"122":[3,4,35],"123":[11,4,41],"124":[2,1,8],"125":[2,3,31],"126":[5,5,49],"127":[4,5,60],"128":[3,3,67],"129":[2,3,50],"130":[3,3,61],"131":[2,3,57],"132":[1,1,59],"133":[2,2,116],"134":[2,1,84],"135":[1,3,14],"136":[4,4,10],"137":[4,4,24],"138":[2,4,81],"139":[1,3,22],"140":[5,4,8],"141":[3,4,58],"142":[1,3,31],"143":[3,4,28],"144":[2,4,22],"145":[4,4,27],"146":[1,3,24],"147":[3,4,4],"148":[3,4,38],"149":[1,1,14],"150":[2,2,18],"151":[2,2,95],"152":[6,4,68],"153":[3,2,1],"154":[1,5,57],"155":[1,5,56],"156":[5,2,19],"157":[4,2,67],"158":[1,2,64],"159":[2,1,29],"160":[3,1,1],"161":[2,4,17],"162":[1,4,79],"163":[2,4,18],"164":[1,4,18],"165":[1,4,21],"166":[1,4,17],"167":[1,4,14],"168":[1,4,53],"169":[1,4,13],"170":[1,4,59],"171":[1,1,65],"172":[6,1,900],"173":[2,1,81],"174":[1,1,3],"175":[1,1,28],"176":[8,2,15],"177":[6,2,36],"178":[4,2,39],"179":[9,2,50],"180":[12,2,46],"181":[7,2,36],"182":[7,2,23],"183":[9,2,74],"184":[9,2,49],"185":[8,2,68],"186":[7,2,18],"187":[6,2,90],"188":[7,2,107],"189":[10,2,60],"190":[6,2,74],"191":[11,2,32],"192":[2,1,132],"193":[5,1,61],"194":[5,6,66],"195":[9,6,97],"196":[5,6,69],"197":[7,6,62],"198":[4,6,72],"199":[6,6,50],"200":[1,6,52],"201":[1,1,14],"202":[2,1,37],"203":[1,3,34],"204":[2,3,12],"205":[1,5,4],"206":[1,6,5],"207":[1,5,4],"208":[1,6,7],"209":[5,5,15],"210":[1,9,10],"211":[6,5,18],"212":[1,10,13],"213":[7,5,17],"214":[1,11,15],"215":[1,3,74],"216":[2,3,12],"217":[1,5,10],"218":[1,6,7],"219":[1,5,20],"220":[1,6,10],"221":[1,5,19],"222":[1,6,11],"223":[1,5,11],"224":[1,6,6],"225":[1,5,11],"226":[1,6,12],"227":[1,5,18],"228":[1,6,10],"229":[1,5,19],"230":[1,6,11],"231":[1,5,21],"232":[1,6,10],"233":[1,5,22],"234":[1,6,11],"235":[1,5,18],"236":[1,6,10],"237":[1,5,19],"238":[1,6,11],"239":[1,5,21],"240":[1,6,10],"241":[1,5,22],"242":[1,6,11],"243":[1,5,26],"244":[1,6,12],"245":[1,5,28],"246":[1,6,32],"247":[2,1,21],"248":[1,3,120],"249":[4,3,77],"250":[6,3,72],"251":[7,7,119],"252":[9,7,63],"253":[7,7,58],"254":[5,7,131],"255":[6,3,36],"256":[2,3,22],"257":[2,1,225],"258":[2,3,60],"259":[4,3,39],"260":[3,7,132],"261":[2,1,1],"262":[1,2,173],"263":[4,3,39],"264":[2,2,100],"265":[2,4,126],"266":[2,2,113],"267":[4,3,74],"268":[4,3,104],"269":[3,3,39],"270":[2,2,101],"271":[3,2,125],"272":[2,4,128],"273":[3,4,60],"274":[3,4,69],"275":[3,4,103],"276":[2,4,103],"277":[2,1,40],"278":[2,1,37],"279":[2,3,51],"280":[1,3,81],"281":[3,1,67],"282":[1,4,84],"283":[3,4,104],"284":[2,1,123],"285":[2,1,106],"286":[2,1,8],"287":[2,1,5],"288":[2,1,5],"289":[2,1,97],"290":[2,1,7],"291":[2,1,102],"292":[2,1,29],"293":[2,1,1],"294":[1,3,8],"295":[1,3,4],"296":[1,3,9],"297":[1,3,15],"298":[2,3,2],"299":[2,1,1],"300":[1,3,7],"301":[1,3,5],"302":[1,3,33],"303":[1,3,69],"304":[1,3,29],"305":[2,3,28],"306":[2,5,1],"307":[2,7,132],"308":[2,7,110],"309":[3,7,136],"310":[2,5,1],"311":[3,7,108],"312":[3,5,1],"313":[3,8,84],"314":[3,8,92],"315":[3,8,86],"316":[4,8,86],"317":[4,8,80],"318":[2,5,1],"319":[2,7,99],"320":[2,3,3],"321":[2,1,4],"322":[2,1,11],"323":[2,1,68],"324":[2,1,5],"325":[2,1,108],"326":[2,1,10],"327":[2,1,100],"328":[1,1,282],"329":[4,1,115],"330":[2,5,9],"331":[2,6,11],"332":[2,6,11],"333":[2,6,47],"334":[2,6,54],"335":[2,6,60],"336":[2,6,44],"337":[2,1,64],"338":[2,3,83],"339":[1,5,58],"340":[2,5,38],"341":[2,3,43],"342":[1,5,158],"343":[1,5,1],"344":[4,6,114],"345":[4,6,170],"346":[2,3,45],"347":[1,1,149],"348":[3,2,65],"349":[2,2,29],"350":[2,1,15],"351":[2,3,39],"352":[3,3,67],"353":[3,3,68],"354":[3,3,25],"355":[2,1,215],"356":[2,1,187],"357":[3,3,122],"358":[2,3,48],"359":[1,1,74],"360":[2,1,32],"361":[3,3,50],"362":[3,3,98],"363":[3,3,141],"364":[2,1,75],"365":[2,3,99],"366":[3,1,1],"367":[2,4,70],"368":[4,4,57],"369":[4,4,33],"370":[1,4,31],"371":[3,4,51],"372":[2,1,1],"373":[6,3,11],"374":[4,3,37],"375":[3,3,42],"376":[3,3,73],"377":[3,3,27],"378":[3,3,106],"379":[3,3,56],"380":[1,1,1],"381":[3,2,1],"382":[3,5,33],"383":[4,5,31],"384":[4,5,255],"385":[2,2,1],"386":[4,3,129],"387":[3,3,128],"388":[9,3,77],"389":[2,2,1],"390":[2,4,60],"391":[2,4,47],"392":[2,4,96],"393":[4,1,178],"394":[4,1,160],"395":[1,1,21],"396":[3,2,86],"397":[2,2,69],"398":[2,2,114],"399":[2,2,48],"400":[2,2,31],"401":[2,2,30],"402":[2,1,107],"403":[5,1,54],"404":[14,6,1],"405":[4,6,35],"406":[3,6,1],"407":[8,8,110],"408":[7,8,59],"409":[6,8,82],"410":[2,6,94],"411":[2,6,34],"412":[1,6,65],"413":[5,6,54],"414":[8,6,110],"415":[2,13,37],"416":[2,13,109],"417":[14,6,36],"418":[2,1,46],"419":[2,1,123],"420":[2,1,15],"421":[3,1,457],"422":[2,1,17],"423":[1,3,15],"424":[1,3,12],"425":[1,3,24],"426":[1,3,32],"427":[1,3,25],"428":[1,1,61],"429":[1,1,16],"430":[4,2,54],"431":[3,2,85],"432":[2,2,73],"433":[3,2,54],"434":[2,2,52],"435":[2,2,22],"436":[2,2,18],"437":[2,2,19],"438":[2,2,34],"439":[2,2,33],"440":[2,2,50],"441":[2,2,48],"442":[2,2,21],"443":[1,2,26],"444":[4,1,124],"445":[2,5,39],"446":[4,5,80],"447":[4,5,72],"448":[2,1,15],"449":[1,3,30],"450":[2,3,24],"451":[1,3,27],"452":[2,1,61],"453":[3,3,33],"454":[2,3,40],"455":[2,1,12],"456":[1,3,42],"457":[2,3,15],"458":[2,3,25],"459":[2,3,35],"460":[2,3,16],"461":[1,1,8],"462":[1,2,20],"463":[1,2,20],"464":[1,2,20],"465":[1,2,22],"466":[1,2,22],"467":[1,2,29],"468":[2,2,19],"469":[1,2,15],"470":[1,2,20],"471":[2,1,16],"472":[1,3,9],"473":[1,4,48],"474":[3,4,38],"475":[2,4,38],"476":[2,4,68],"477":[1,4,32],"478":[2,4,45],"479":[3,4,35],"480":[1,4,39],"481":[3,4,69],"482":[3,4,82],"483":[2,4,28],"484":[2,4,49],"485":[2,4,56],"486":[3,4,41],"487":[2,4,53],"488":[2,4,28],"489":[2,4,16],"490":[1,3,7],"491":[1,4,30],"492":[2,4,80],"493":[2,4,23],"494":[3,4,18],"495":[3,4,38],"496":[4,4,62],"497":[2,3,108],"498":[3,5,11],"499":[3,6,43],"500":[6,6,25],"501":[3,6,37],"502":[3,6,31],"503":[4,6,23],"504":[3,6,33],"505":[3,6,17],"506":[3,6,50],"507":[2,3,137],"508":[4,5,49],"509":[4,7,7],"510":[5,7,11],"511":[5,7,11],"512":[4,7,10],"513":[5,7,11],"514":[5,7,11],"515":[4,5,1],"516":[3,5,7],"517":[3,7,51],"518":[3,7,10],"519":[4,7,10],"520":[4,7,10],"521":[4,7,16],"522":[5,7,15],"523":[5,7,15],"524":[4,7,16],"525":[5,7,16],"526":[5,7,16],"527":[1,1,13],"528":[1,2,1],"529":[1,3,39],"530":[1,3,35],"531":[1,3,18],"532":[2,3,19],"533":[2,3,22],"534":[2,3,18],"535":[2,3,19],"536":[2,3,48],"537":[2,3,18],"538":[5,3,22],"539":[2,3,19],"540":[2,3,18],"541":[2,3,18],"542":[2,3,22],"543":[3,3,39],"544":[4,3,12],"545":[4,6,29],"546":[4,6,33],"547":[3,3,25],"548":[3,3,18],"549":[2,3,23],"550":[3,3,27],"551":[2,3,26],"552":[3,3,30],"553":[2,3,27],"554":[3,3,31],"555":[1,3,22],"556":[2,3,15],"557":[3,3,19],"558":[2,3,19],"559":[1,3,14],"560":[1,3,14],"561":[2,3,65],"562":[2,3,22],"563":[1,2,6],"564":[1,3,34],"565":[3,3,38],"566":[1,3,17],"567":[2,3,42],"568":[2,3,19],"569":[3,3,20],"570":[3,3,20],"571":[3,3,20],"572":[3,3,18],"573":[2,3,45],"574":[1,2,62],"575":[1,3,24],"576":[1,3,21],"577":[3,3,19],"578":[2,3,25],"579":[2,3,22],"580":[2,3,22],"581":[3,3,23],"582":[3,3,29],"583":[3,3,28],"584":[3,3,20],"585":[3,3,20],"586":[2,3,24],"587":[2,1,12],"588":[2,1,9],"589":[2,1,9],"590":[2,1,1],"591":[1,3,8],"592":[1,3,4],"593":[1,3,9],"594":[1,3,15],"595":[2,3,2],"596":[2,1,1],"597":[1,3,9],"598":[1,3,6],"599":[1,3,15],"600":[1,3,1],"601":[2,4,39],"602":[1,3,20],"603":[3,1,1],"604":[1,4,12],"605":[1,4,6],"606":[1,4,7],"607":[1,4,1],"608":[3,5,21],"609":[1,4,45],"610":[2,4,2],"611":[2,1,5],"612":[2,1,5],"613":[2,1,25],"614":[2,1,7],"615":[2,1,4],"616":[2,1,4],"617":[2,1,14],"618":[2,1,20],"619":[2,1,10],"620":[2,1,29],"621":[2,1,9],"622":[2,1,18],"623":[3,1,19],"624":[3,1,31],"625":[3,1,39],"626":[3,1,15],"627":[3,1,11],"628":[3,1,31],"629":[4,1,58],"630":[3,1,15],"631":[1,1,1],"632":[1,2,10],"633":[1,2,30],"634":[1,2,25],"635":[1,1,1],"636":[1,2,6],"637":[1,2,12],"638":[1,2,21],"639":[2,2,3],"640":[1,1,1],"641":[1,2,8],"642":[1,2,9],"643":[1,2,10],"644":[1,1,1],"645":[1,2,5],"646":[1,2,52],"647":[1,1,4],"648":[1,1,1],"649":[1,2,4],"650":[1,2,39],"651":[1,2,41],"652":[1,1,1],"653":[1,2,5],"654":[1,2,90],"655":[1,2,35],"656":[2,2,5],"657":[1,1,1],"658":[1,2,6],"659":[1,2,36],"660":[1,2,27],"661":[2,2,2],"662":[1,1,1],"663":[1,2,8],"664":[1,2,33],"665":[1,2,40],"666":[2,2,3],"667":[1,1,1],"668":[1,2,5],"669":[1,2,4],"670":[1,2,9],"671":[1,1,1],"672":[1,2,4],"673":[1,2,5],"674":[1,1,1],"675":[1,2,5],"676":[1,2,4],"677":[1,2,10],"678":[1,1,1],"679":[1,2,7],"680":[1,2,21],"681":[1,2,40],"682":[1,1,1],"683":[1,2,31],"684":[1,2,41],"685":[1,2,39],"686":[2,2,4],"687":[1,1,1],"688":[1,2,12],"689":[1,2,42],"690":[1,2,40],"691":[2,2,3],"692":[1,1,1],"693":[1,2,16],"694":[1,2,15],"695":[1,2,15],"696":[1,2,1],"697":[1,3,26],"698":[1,3,28],"699":[3,3,29],"700":[1,1,1],"701":[1,2,8],"702":[1,2,32],"703":[1,2,21],"704":[2,2,7],"705":[1,1,1],"706":[1,2,12],"707":[1,2,31],"708":[1,2,25],"709":[2,2,6],"710":[1,1,1],"711":[1,2,5],"712":[1,2,25],"713":[1,2,8],"714":[1,1,1],"715":[1,2,13],"716":[1,2,8],"717":[1,2,14],"718":[1,2,1],"719":[2,3,20],"720":[1,3,26],"721":[1,1,1],"722":[1,2,13],"723":[1,2,8],"724":[1,2,26],"725":[1,2,1],"726":[2,3,20],"727":[1,3,28],"728":[1,1,1],"729":[1,2,12],"730":[1,2,8],"731":[1,2,14],"732":[1,2,1],"733":[2,3,19],"734":[1,3,36],"735":[1,1,1],"736":[1,2,13],"737":[1,2,9],"738":[1,2,14],"739":[1,2,1],"740":[2,3,20],"741":[1,3,27],"742":[1,1,1],"743":[1,2,13],"744":[1,2,8],"745":[1,2,31],"746":[1,2,1],"747":[2,3,22],"748":[1,3,29],"749":[1,1,1],"750":[1,2,18],"751":[1,2,40],"752":[1,2,63],"753":[1,2,1],"754":[2,3,31],"755":[1,3,33],"756":[1,1,1],"757":[1,2,12],"758":[1,2,29],"759":[1,2,44],"760":[1,2,1],"761":[2,3,19],"762":[1,3,35],"763":[1,1,1],"764":[1,2,13],"765":[1,2,8],"766":[1,2,29],"767":[1,2,1],"768":[2,3,21],"769":[1,3,27],"770":[1,1,37],"771":[1,1,1],"772":[1,2,9],"773":[1,2,10],"774":[1,2,15],"775":[7,3,133],"776":[2,2,6],"777":[1,1,13],"778":[1,2,96],"779":[1,2,48],"780":[1,1,1],"781":[1,2,11],"782":[1,2,131],"783":[1,2,111],"784":[1,1,1],"785":[1,2,13],"786":[1,2,134],"787":[1,2,240],"788":[1,2,101],"789":[2,2,6],"790":[1,1,19],"791":[1,1,1],"792":[1,2,5],"793":[1,2,4],"794":[1,2,11],"795":[1,1,1],"796":[1,2,9],"797":[1,2,44],"798":[1,2,124],"799":[1,2,29],"800":[1,1,11],"801":[3,1,1],"802":[1,4,124],"803":[1,4,86],"804":[1,4,69],"805":[1,1,3],"806":[2,1,1],"807":[1,3,45],"808":[1,3,125],"809":[1,3,105],"810":[1,1,1],"811":[1,2,8],"812":[1,2,52],"813":[1,2,11],"814":[1,1,1],"815":[1,2,8],"816":[1,2,51],"817":[1,2,12],"818":[1,1,1],"819":[1,2,9],"820":[1,2,58],"821":[1,2,52],"822":[2,2,44],"823":[2,2,8],"824":[1,1,1],"825":[1,2,9],"826":[1,2,81],"827":[1,2,52],"828":[2,2,44],"829":[2,2,6],"830":[1,1,1],"831":[1,2,8],"832":[1,2,18],"833":[1,1,1],"834":[1,2,11],"835":[1,2,9],"836":[1,2,1],"837":[1,3,12],"838":[1,3,15],"839":[1,1,1],"840":[1,2,14],"841":[1,2,15],"842":[1,2,83],"843":[1,1,1],"844":[1,2,40],"845":[1,2,7],"846":[1,2,24],"847":[1,1,1],"848":[1,2,7],"849":[1,2,10],"850":[1,2,23],"851":[2,2,3],"852":[1,1,1],"853":[1,2,15],"854":[1,2,9],"855":[1,2,16],"856":[1,1,1],"857":[1,2,16],"858":[1,2,9],"859":[1,2,16],"860":[1,1,1],"861":[1,2,15],"862":[1,2,15],"863":[1,2,9],"864":[1,2,16],"865":[1,1,1],"866":[1,2,8],"867":[1,2,20],"868":[1,1,1],"869":[1,2,9],"870":[1,2,9],"871":[1,2,18],"872":[2,2,6],"873":[1,1,1],"874":[1,2,11],"875":[1,2,65],"876":[1,2,61],"877":[2,2,5],"878":[1,1,1],"879":[1,2,12],"880":[1,2,84],"881":[1,2,47],"882":[1,1,1],"883":[1,2,12],"884":[1,2,100],"885":[1,2,48],"886":[1,1,1],"887":[1,2,12],"888":[1,2,55],"889":[1,2,35],"890":[1,1,1],"891":[1,2,10],"892":[1,2,54],"893":[1,2,43],"894":[2,1,65],"895":[4,3,46],"896":[2,3,43],"897":[4,3,17],"898":[2,3,22],"899":[1,1,1],"900":[1,2,11],"901":[1,2,8],"902":[1,2,11],"903":[1,1,1],"904":[1,2,11],"905":[1,2,8],"906":[1,2,11],"907":[1,1,1],"908":[1,2,12],"909":[1,2,8],"910":[1,2,11],"911":[1,1,1],"912":[1,2,11],"913":[1,2,8],"914":[1,2,11],"915":[1,1,1],"916":[1,2,11],"917":[1,2,8],"918":[1,2,11],"919":[1,1,1],"920":[1,2,19],"921":[1,2,10],"922":[1,2,19],"923":[1,1,1],"924":[1,2,18],"925":[1,2,71],"926":[2,2,51],"927":[3,2,81],"928":[2,2,72],"929":[6,2,193],"930":[5,2,58],"931":[4,2,80],"932":[3,2,103],"933":[1,2,1],"934":[3,3,34],"935":[1,2,16],"936":[1,1,1],"937":[1,2,19],"938":[1,2,10],"939":[1,2,20],"940":[1,1,1],"941":[1,2,18],"942":[1,2,74],"943":[2,2,51],"944":[2,2,117],"945":[2,2,78],"946":[6,2,197],"947":[4,2,75],"948":[1,2,1],"949":[3,3,34],"950":[1,2,12],"951":[1,1,1],"952":[1,2,11],"953":[1,2,8],"954":[1,2,11],"955":[1,1,1],"956":[1,2,4],"957":[1,2,69],"958":[1,1,1],"959":[1,2,9],"960":[1,2,46],"961":[1,2,13],"962":[2,2,5],"963":[1,1,1],"964":[1,2,5],"965":[1,2,26],"966":[1,2,10],"967":[1,1,1],"968":[1,2,7],"969":[1,2,9],"970":[1,1,1],"971":[1,2,13],"972":[1,2,65],"973":[1,2,26],"974":[2,2,1],"975":[6,4,58],"976":[2,4,39],"977":[1,2,1],"978":[3,3,34],"979":[6,3,32],"980":[1,1,1],"981":[1,2,16],"982":[1,2,41],"983":[1,2,25],"984":[2,2,5],"985":[1,1,1],"986":[1,2,4],"987":[1,2,15],"988":[1,2,31],"989":[1,1,1],"990":[1,2,4],"991":[1,2,26],"992":[1,2,25],"993":[2,2,6],"994":[1,1,1],"995":[1,2,8],"996":[1,2,23],"997":[1,2,48],"998":[2,2,6],"999":[1,1,1],"1000":[1,2,4],"1001":[1,2,19],"1002":[1,1,1],"1003":[1,2,4],"1004":[1,2,24],"1005":[1,1,1],"1006":[1,2,6],"1007":[1,2,15],"1008":[1,2,49],"1009":[2,2,5],"1010":[1,1,1],"1011":[1,2,35],"1012":[1,2,35],"1013":[1,2,44],"1014":[2,2,5],"1015":[1,1,1],"1016":[1,2,5],"1017":[1,2,4],"1018":[1,2,9],"1019":[2,2,2],"1020":[3,1,1],"1021":[1,4,33],"1022":[1,4,23],"1023":[1,4,94],"1024":[2,4,4],"1025":[1,1,1],"1026":[1,2,6],"1027":[1,2,16],"1028":[1,2,17],"1029":[2,2,3],"1030":[1,1,1],"1031":[1,2,26],"1032":[1,2,8],"1033":[3,2,110],"1034":[1,2,70],"1035":[2,2,2],"1036":[1,1,1],"1037":[1,2,6],"1038":[1,2,39],"1039":[1,2,60],"1040":[1,1,1],"1041":[1,2,8],"1042":[1,2,45],"1043":[1,2,20],"1044":[1,2,11],"1045":[1,1,1],"1046":[1,2,8],"1047":[1,2,14],"1048":[1,2,6],"1049":[1,1,1],"1050":[1,2,83],"1051":[1,2,90],"1052":[1,2,204],"1053":[1,1,1],"1054":[1,2,16],"1055":[1,2,32],"1056":[1,2,126],"1057":[1,3,40],"1058":[1,1,3],"1059":[1,1,1],"1060":[1,1,5],"1061":[1,1,41],"1062":[1,2,25],"1063":[1,1,1],"1064":[1,2,6],"1065":[1,2,8],"1066":[1,2,9],"1067":[1,1,1],"1068":[1,2,8],"1069":[1,2,33],"1070":[1,2,44],"1071":[2,2,3],"1072":[1,1,1],"1073":[1,2,9],"1074":[1,2,35],"1075":[1,2,59],"1076":[2,2,6],"1077":[1,1,1],"1078":[1,2,3],"1079":[1,2,32],"1080":[2,1,1],"1081":[1,3,59],"1082":[1,3,37],"1083":[1,3,52],"1084":[1,1,1],"1085":[1,2,49],"1086":[1,2,88],"1087":[1,2,64],"1088":[1,2,114],"1089":[1,2,58],"1090":[2,2,75],"1091":[9,2,61],"1092":[4,2,52],"1093":[1,1,1],"1094":[1,2,4],"1095":[1,2,9],"1096":[1,2,23],"1097":[1,1,1],"1098":[1,2,4],"1099":[1,2,20],"1100":[1,1,1],"1101":[1,2,9],"1102":[1,2,9],"1103":[1,2,20],"1104":[2,2,6],"1105":[1,1,1],"1106":[1,2,13],"1107":[1,2,36],"1108":[1,2,23],"1109":[1,1,1],"1110":[1,2,21],"1111":[1,2,15],"1112":[1,2,61],"1113":[2,2,5],"1114":[1,1,1],"1115":[1,2,6],"1116":[1,2,9],"1117":[1,2,31],"1118":[1,1,1],"1119":[1,2,7],"1120":[1,2,9],"1121":[1,2,15],"1122":[1,1,11],"1123":[1,1,1],"1124":[1,2,5],"1125":[1,2,4],"1126":[1,2,9],"1127":[2,2,6],"1128":[1,1,1],"1129":[1,2,9],"1130":[1,2,89],"1131":[2,3,66],"1132":[1,2,1],"1133":[3,3,39],"1134":[4,3,44],"1135":[2,2,2],"1136":[1,1,1],"1137":[1,2,9],"1138":[1,2,92],"1139":[2,3,66],"1140":[1,2,1],"1141":[3,3,40],"1142":[4,3,44],"1143":[2,2,2],"1144":[1,1,1],"1145":[1,2,9],"1146":[1,2,8],"1147":[1,2,7],"1148":[1,1,1],"1149":[1,2,3],"1150":[1,2,15],"1151":[1,2,103],"1152":[1,1,1],"1153":[1,2,12],"1154":[1,2,21],"1155":[1,2,21],"1156":[2,2,3],"1157":[1,1,1],"1158":[1,2,13],"1159":[1,2,25],"1160":[2,2,2],"1161":[1,1,1],"1162":[1,2,12],"1163":[1,2,23],"1164":[1,2,25],"1165":[2,2,3],"1166":[1,1,1],"1167":[1,2,13],"1168":[1,2,27],"1169":[2,2,2],"1170":[1,1,1],"1171":[1,2,1],"1172":[1,3,10],"1173":[1,3,10],"1174":[1,3,10],"1175":[1,3,10],"1176":[1,3,10],"1177":[1,3,9],"1178":[1,3,10],"1179":[2,3,10],"1180":[2,3,10],"1181":[2,3,10],"1182":[2,3,10],"1183":[2,3,10],"1184":[2,3,9],"1185":[2,3,10],"1186":[1,3,29],"1187":[1,2,16],"1188":[2,2,3],"1189":[1,1,1],"1190":[1,2,12],"1191":[1,2,21],"1192":[2,2,2],"1193":[1,1,1],"1194":[1,2,9],"1195":[1,2,14],"1196":[1,2,7],"1197":[2,2,2],"1198":[1,1,1],"1199":[1,2,11],"1200":[1,2,19],"1201":[2,2,3],"1202":[1,1,1],"1203":[1,2,12],"1204":[1,2,24],"1205":[2,2,2],"1206":[1,1,1],"1207":[1,2,11],"1208":[1,2,17],"1209":[2,2,3],"1210":[1,1,1],"1211":[1,2,12],"1212":[1,2,22],"1213":[2,2,2],"1214":[1,1,1],"1215":[1,2,11],"1216":[1,2,19],"1217":[2,2,3],"1218":[1,1,1],"1219":[1,2,12],"1220":[1,2,24],"1221":[2,2,2],"1222":[1,1,1],"1223":[1,2,11],"1224":[1,2,17],"1225":[2,2,3],"1226":[1,1,1],"1227":[1,2,12],"1228":[1,2,22],"1229":[2,2,2],"1230":[1,1,1],"1231":[1,2,1],"1232":[1,3,10],"1233":[1,3,10],"1234":[1,3,10],"1235":[1,3,10],"1236":[1,3,10],"1237":[1,3,9],"1238":[1,3,10],"1239":[2,3,10],"1240":[2,3,10],"1241":[2,3,10],"1242":[2,3,10],"1243":[2,3,10],"1244":[2,3,9],"1245":[2,3,10],"1246":[1,3,10],"1247":[1,2,17],"1248":[2,2,3],"1249":[1,1,1],"1250":[1,2,12],"1251":[1,2,22],"1252":[2,2,2],"1253":[1,1,1],"1254":[1,2,9],"1255":[1,2,14],"1256":[1,2,7],"1257":[2,2,2],"1258":[1,1,1],"1259":[1,2,3],"1260":[1,2,9],"1261":[1,1,1],"1262":[1,2,8],"1263":[1,2,22],"1264":[1,2,49],"1265":[2,2,15],"1266":[1,1,1],"1267":[1,2,6],"1268":[1,2,27],"1269":[1,1,1],"1270":[1,2,10],"1271":[1,2,32],"1272":[1,2,16],"1273":[1,1,1],"1274":[1,2,4],"1275":[1,2,6],"1276":[1,2,24],"1277":[2,1,1],"1278":[1,3,18],"1279":[1,3,16],"1280":[1,1,1],"1281":[1,2,10],"1282":[1,2,18],"1283":[1,2,34],"1284":[2,1,114],"1285":[5,3,128],"1286":[1,1,1],"1287":[1,2,11],"1288":[1,2,30],"1289":[1,2,8],"1290":[1,1,1],"1291":[1,2,10],"1292":[1,2,10],"1293":[1,2,8],"1294":[1,1,1],"1295":[1,2,13],"1296":[1,2,52],"1297":[1,2,12],"1298":[2,2,5],"1299":[1,1,1],"1300":[1,2,14],"1301":[1,2,59],"1302":[1,2,10],"1303":[2,2,5],"1304":[1,1,1],"1305":[1,2,9],"1306":[1,2,16],"1307":[1,1,1],"1308":[1,2,14],"1309":[1,2,20],"1310":[1,2,49],"1311":[2,2,4],"1312":[1,1,1],"1313":[1,2,3],"1314":[1,2,13],"1315":[3,1,1],"1316":[1,4,10],"1317":[1,4,8],"1318":[1,4,27],"1319":[1,1,1],"1320":[1,2,3],"1321":[1,2,23],"1322":[1,1,1],"1323":[1,2,3],"1324":[1,2,25],"1325":[1,1,1],"1326":[1,2,8],"1327":[1,2,14],"1328":[1,2,23],"1329":[1,1,1],"1330":[1,2,9],"1331":[1,2,19],"1332":[1,1,1],"1333":[1,2,9],"1334":[1,2,25],"1335":[1,1,1],"1336":[1,2,3],"1337":[1,2,33],"1338":[1,1,1],"1339":[1,2,12],"1340":[1,2,21],"1341":[1,2,13],"1342":[1,1,1],"1343":[1,2,10],"1344":[1,2,18],"1345":[1,2,9],"1346":[1,1,1],"1347":[1,2,3],"1348":[1,2,19],"1349":[1,1,1],"1350":[1,2,3],"1351":[1,2,31],"1352":[1,2,38],"1353":[4,1,73],"1354":[5,5,115],"1355":[1,1,1],"1356":[1,2,10],"1357":[1,2,20],"1358":[1,2,9],"1359":[1,1,1],"1360":[1,2,3],"1361":[1,2,15],"1362":[1,1,1],"1363":[1,2,15],"1364":[1,2,20],"1365":[1,1,1],"1366":[1,2,6],"1367":[1,2,10],"1368":[1,2,7],"1369":[2,1,3],"1370":[1,1,1],"1371":[1,2,11],"1372":[1,2,16],"1373":[1,2,15],"1374":[1,1,1],"1375":[1,2,6],"1376":[1,2,11],"1377":[1,2,7],"1378":[1,1,1],"1379":[1,2,9],"1380":[1,2,25],"1381":[2,1,20],"1382":[2,1,13],"1383":[2,1,10],"1384":[2,1,11],"1385":[1,3,10],"1386":[1,3,6],"1387":[2,4,14],"1388":[1,6,14],"1389":[3,4,17],"1390":[1,7,17],"1391":[2,1,4],"1392":[2,1,37],"1393":[1,3,60],"1394":[2,3,46],"1395":[3,3,127],"1396":[2,3,16],"1397":[1,1,1],"1398":[1,2,9],"1399":[1,2,9],"1400":[2,1,1],"1401":[1,3,14],"1402":[1,3,17],"1403":[1,3,16],"1404":[1,1,1],"1405":[1,2,3],"1406":[1,2,18]},"averageFieldLength":[1.8813077469793889,2.5977256574271506,32.67519545131487],"storedFields":{"0":{"href":"/anvil/overview#anvil","html":"\n<p>Anvil is a fast local Ethereum development node.</p>\n<p>Anvil is part of the Foundry suite and is installed alongside <code>forge</code>, <code>cast</code> and <code>chisel</code>. If you haven&#x27;t installed Foundry\r\nyet, see <a href=\"/introduction/installation\">Foundry installation</a>.</p>\n","isPage":true,"text":"\nAnvil is a fast local Ethereum development node.\nAnvil is part of the Foundry suite and is installed alongside forge, cast and chisel. If you haven&#x27;t installed Foundry\r\nyet, see Foundry installation.\n","title":"Anvil","titles":[null]},"1":{"href":"/anvil/overview#getting-started","html":"\n<p>To use Anvil, simply type <code>anvil</code>. To fork against a live Ethereum network run <code>anvil --fork-url &lt;RPC_URL&gt;</code>.</p>\n<p>Let&#x27;s fork Ethereum mainnet at the latest block:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">anvil</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --fork-url</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://reth-ethereum.ithaca.xyz/rpc</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">                             _</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">   _</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                            (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">|</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">      __</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> _</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">   _</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> __</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">   __</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">   __</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  _</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">  |</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">     /</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> _` </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">|</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> &#x27;_ \\  \\ \\ / / | | | |</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">    | (_| | | | | |  \\ V /  | | | |</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">     \\__,_| |_| |_|   \\_/   |_| |_|</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">    0.2.0 (c4fcf12 2024-12-12T00:23:45.094165202Z)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">    https://github.com/foundry-rs/foundry</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Available Accounts</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">==================</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">(0) 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 (10000.000000000000000000 ETH)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">(1) 0x70997970C51812dc3A010C7d01b50e0d17dc79C8 (10000.000000000000000000 ETH)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">(2) 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC (10000.000000000000000000 ETH)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">(3) 0x90F79bf6EB2c4f870365E785982E1f101E93b906 (10000.000000000000000000 ETH)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">(4) 0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65 (10000.000000000000000000 ETH)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">(5) 0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc (10000.000000000000000000 ETH)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">(6) 0x976EA74026E726554dB657fA54763abd0C3a0aa9 (10000.000000000000000000 ETH)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">(7) 0x14dC79964da2C08b23698B3D3cc7Ca32193d9955 (10000.000000000000000000 ETH)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">(8) 0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f (10000.000000000000000000 ETH)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">(9) 0xa0Ee7A142d267C1f36714E4a8F75612F20a79720 (10000.000000000000000000 ETH)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Private Keys</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">==================</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">(0) 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">(1) 0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">(2) 0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">(3) 0x7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">(4) 0x47e179ec197488593b187f80a00eb0da91f1b9d0b13f8733639f19c30a34926a</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">(5) 0x8b3a350cf5c34c9194ca85829a2df0ec3153be0318b5e2d3348e872092edffba</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">(6) 0x92db14e403b83dfe3df233f83dfa3a0d7096f21ca9b0d6d6b8d88b2b4ec1564e</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">(7) 0x4bbbf85ce3377467afe5d46f804f221813b2bb87f24d81f60f1fcdbf7cbf4356</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">(8) 0xdbda1821b80551c9d65939329250298aa3472ba22feea921c0cf5d620ea67b97</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">(9) 0x2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Wallet</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">==================</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Mnemonic:          test test test test test test test test test test test junk</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Derivation path:   m/44&#x27;/60&#x27;/0&#x27;/0/</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Fork</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">==================</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Endpoint:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">       https://eth.merkle.io</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Block</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> number:   </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">21387064</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Block</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> hash:     </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0x904aee789b82ac0412448bc2ea9bb3774d10c2dae4a0e5b7f6451ac2ecd0787a</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Chain</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ID:       </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Base</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Fee</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">==================</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">26049293674</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Gas</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Limit</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">==================</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">30000000</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Genesis</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Timestamp</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">==================</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">1734014216</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Listening</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> on 127.0.0.1:8545</span></span></code></pre>\n<br/>\n<aside data-callout=\"info\"><p>See the <a href=\"/anvil/reference\"><code>anvil</code> Reference</a> for in depth information on Anvil and its capabilities.</p></aside>\n","isPage":false,"text":"\nTo use Anvil, simply type anvil. To fork against a live Ethereum network run anvil --fork-url &lt;RPC_URL&gt;.\nLet&#x27;s fork Ethereum mainnet at the latest block:\nanvil --fork-url https://reth-ethereum.ithaca.xyz/rpc\n \n \n                             _   _\n                            (_) | |\n      __ _   _ __   __   __  _  | |\n     / _` | | &#x27;_ \\  \\ \\ / / | | | |\n    | (_| | | | | |  \\ V /  | | | |\n     \\__,_| |_| |_|   \\_/   |_| |_|\n \n    0.2.0 (c4fcf12 2024-12-12T00:23:45.094165202Z)\n    https://github.com/foundry-rs/foundry\n \nAvailable Accounts\n==================\n \n(0) 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 (10000.000000000000000000 ETH)\n(1) 0x70997970C51812dc3A010C7d01b50e0d17dc79C8 (10000.000000000000000000 ETH)\n(2) 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC (10000.000000000000000000 ETH)\n(3) 0x90F79bf6EB2c4f870365E785982E1f101E93b906 (10000.000000000000000000 ETH)\n(4) 0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65 (10000.000000000000000000 ETH)\n(5) 0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc (10000.000000000000000000 ETH)\n(6) 0x976EA74026E726554dB657fA54763abd0C3a0aa9 (10000.000000000000000000 ETH)\n(7) 0x14dC79964da2C08b23698B3D3cc7Ca32193d9955 (10000.000000000000000000 ETH)\n(8) 0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f (10000.000000000000000000 ETH)\n(9) 0xa0Ee7A142d267C1f36714E4a8F75612F20a79720 (10000.000000000000000000 ETH)\n \nPrivate Keys\n==================\n \n(0) 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\n(1) 0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d\n(2) 0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a\n(3) 0x7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6\n(4) 0x47e179ec197488593b187f80a00eb0da91f1b9d0b13f8733639f19c30a34926a\n(5) 0x8b3a350cf5c34c9194ca85829a2df0ec3153be0318b5e2d3348e872092edffba\n(6) 0x92db14e403b83dfe3df233f83dfa3a0d7096f21ca9b0d6d6b8d88b2b4ec1564e\n(7) 0x4bbbf85ce3377467afe5d46f804f221813b2bb87f24d81f60f1fcdbf7cbf4356\n(8) 0xdbda1821b80551c9d65939329250298aa3472ba22feea921c0cf5d620ea67b97\n(9) 0x2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6\n \nWallet\n==================\nMnemonic:          test test test test test test test test test test test junk\nDerivation path:   m/44&#x27;/60&#x27;/0&#x27;/0/\n \n \nFork\n==================\nEndpoint:       https://eth.merkle.io\nBlock number:   21387064\nBlock hash:     0x904aee789b82ac0412448bc2ea9bb3774d10c2dae4a0e5b7f6451ac2ecd0787a\nChain ID:       1\n \nBase Fee\n==================\n \n26049293674\n \nGas Limit\n==================\n \n30000000\n \nGenesis Timestamp\n==================\n \n1734014216\n \nListening on 127.0.0.1:8545\n\nSee the anvil Reference for in depth information on Anvil and its capabilities.\n","title":"Getting started","titles":[null,"Anvil"]},"2":{"href":"/anvil/overview#notes","html":"\n","isPage":false,"text":"\n","title":"Notes","titles":[null]},"3":{"href":"/anvil/overview#eip-7702-and-default-accounts","html":"\n<p>Since the advent of EIP-7702, Anvil&#x27;s default accounts have been delegated to drainers such as <a href=\"https://etherscan.io/address/0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266#authlist7702\">https://etherscan.io/address/0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266#authlist7702</a></p>\n<p>This can negatively impact developer experience when users are running Anvil in fork mode and are making RPC calls that involve one of the default anvil accounts. To avoid this issue, use a different mnemonic when starting Anvil:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">anvil</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --mnemonic</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;&lt;custom mnemonic&gt;&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --fork-url</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://reth-ethereum.ithaca.xyz/rpc</span></span></code></pre>","isPage":false,"text":"\nSince the advent of EIP-7702, Anvil&#x27;s default accounts have been delegated to drainers such as https://etherscan.io/address/0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266#authlist7702\nThis can negatively impact developer experience when users are running Anvil in fork mode and are making RPC calls that involve one of the default anvil accounts. To avoid this issue, use a different mnemonic when starting Anvil:\nanvil --mnemonic &quot;&lt;custom mnemonic&gt;&quot; --fork-url https://reth-ethereum.ithaca.xyz/rpc","title":"EIP-7702 and Default Accounts","titles":[null,"Notes"]},"4":{"href":"/anvil/reference#anvil","html":"\n","isPage":true,"text":"\n","title":"anvil","titles":[null]},"5":{"href":"/anvil/reference#name","html":"\n<p>anvil - Create a local testnet node for deploying and testing smart contracts. It can also be used to fork other EVM compatible networks.</p>\n","isPage":false,"text":"\nanvil - Create a local testnet node for deploying and testing smart contracts. It can also be used to fork other EVM compatible networks.\n","title":"NAME","titles":[null,"anvil"]},"6":{"href":"/anvil/reference#synopsis","html":"\n<p><code>anvil</code> [<em>options</em>]</p>\n","isPage":false,"text":"\nanvil [options]\n","title":"SYNOPSIS","titles":[null,"anvil"]},"7":{"href":"/anvil/reference#description","html":"\n<p>Create a local testnet node for deploying and testing smart contracts. It can also be used to fork other EVM compatible networks.</p>\n<p>This section covers an extensive list of information about Mining Modes, Supported Transport Layers, Supported RPC Methods, Anvil flags and their usages. You can run multiple flags at the same time.</p>\n","isPage":false,"text":"\nCreate a local testnet node for deploying and testing smart contracts. It can also be used to fork other EVM compatible networks.\nThis section covers an extensive list of information about Mining Modes, Supported Transport Layers, Supported RPC Methods, Anvil flags and their usages. You can run multiple flags at the same time.\n","title":"DESCRIPTION","titles":[null,"anvil"]},"8":{"href":"/anvil/reference#mining-modes","html":"\n<p>Mining modes refer to how frequent blocks are mined using Anvil. By default, it automatically generates a new block as soon as a transaction is submitted.</p>\n<p>You can change this setting to interval mining if you will, which means that a new block will be generated in a given period of time selected by the user. If you want to go for this type of mining, you can do it by adding the <code>--block-time &lt;block-time-in-seconds&gt;</code> flag, like in the following example.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Produces a new block every 10 seconds</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">anvil</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --block-time</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10</span></span></code></pre>\n<p>There&#x27;s also a third mining mode called never. In this case, it disables auto and interval mining, and mine on demand instead. You can do this by typing:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Enables never mining mode</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">anvil</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --no-mining</span></span></code></pre>\n<p>To speed up the finalization of blocks, you can use the <code>--slots-in-an-epoch</code> flag with a value of <code>1</code> for example. This will lead to the block at height <code>N-2</code> being finalized, where <code>N</code> is the latest block.</p>\n","isPage":false,"text":"\nMining modes refer to how frequent blocks are mined using Anvil. By default, it automatically generates a new block as soon as a transaction is submitted.\nYou can change this setting to interval mining if you will, which means that a new block will be generated in a given period of time selected by the user. If you want to go for this type of mining, you can do it by adding the --block-time &lt;block-time-in-seconds&gt; flag, like in the following example.\n# Produces a new block every 10 seconds\nanvil --block-time 10\nThere&#x27;s also a third mining mode called never. In this case, it disables auto and interval mining, and mine on demand instead. You can do this by typing:\n# Enables never mining mode\nanvil --no-mining\nTo speed up the finalization of blocks, you can use the --slots-in-an-epoch flag with a value of 1 for example. This will lead to the block at height N-2 being finalized, where N is the latest block.\n","title":"Mining Modes","titles":[null,"anvil","DESCRIPTION"]},"9":{"href":"/anvil/reference#supported-transport-layers","html":"\n<p>HTTP and Websocket connections are supported. The server listens on port 8545 by default, but it can be changed by running the following command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">anvil</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --port</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">POR</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">T</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span></code></pre>\n","isPage":false,"text":"\nHTTP and Websocket connections are supported. The server listens on port 8545 by default, but it can be changed by running the following command:\nanvil --port &lt;PORT&gt;\n","title":"Supported Transport Layers","titles":[null,"anvil","DESCRIPTION"]},"10":{"href":"/anvil/reference#default-create2-deployer","html":"\n<p>Anvil, when used without forking, includes the <a href=\"https://github.com/Arachnid/deterministic-deployment-proxy\">default CREATE2 deployer proxy</a> at the address <code>0x4e59b44847b379578588920ca78fbf26c0b4956c</code>.</p>\n<p>This allows you to test CREATE2 deployments locally without forking.</p>\n","isPage":false,"text":"\nAnvil, when used without forking, includes the default CREATE2 deployer proxy at the address 0x4e59b44847b379578588920ca78fbf26c0b4956c.\nThis allows you to test CREATE2 deployments locally without forking.\n","title":"Default CREATE2 Deployer","titles":[null,"anvil","DESCRIPTION"]},"11":{"href":"/anvil/reference#supported-rpc-methods","html":"\n","isPage":false,"text":"\n","title":"Supported RPC Methods","titles":[null,"anvil","DESCRIPTION"]},"12":{"href":"/anvil/reference#standard-methods","html":"\n<p>The standard methods are based on <a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/\">this</a> reference.</p>\n<ul>\n<li>\n<p><code>web3_clientVersion</code></p>\n</li>\n<li>\n<p><code>web3_sha3</code></p>\n</li>\n<li>\n<p><code>eth_chainId</code></p>\n</li>\n<li>\n<p><code>eth_networkId</code></p>\n</li>\n<li>\n<p><code>eth_gasPrice</code></p>\n</li>\n<li>\n<p><code>eth_accounts</code></p>\n</li>\n<li>\n<p><code>eth_blockNumber</code></p>\n</li>\n<li>\n<p><code>eth_getBalance</code></p>\n</li>\n<li>\n<p><code>eth_getStorageAt</code></p>\n</li>\n<li>\n<p><code>eth_getBlockByHash</code></p>\n</li>\n<li>\n<p><code>eth_getBlockByNumber</code></p>\n</li>\n<li>\n<p><code>eth_getTransactionCount</code></p>\n</li>\n<li>\n<p><code>eth_getBlockTransactionCountByHash</code></p>\n</li>\n<li>\n<p><code>eth_getBlockTransactionCountByNumber</code></p>\n</li>\n<li>\n<p><code>eth_getUncleCountByBlockHash</code></p>\n</li>\n<li>\n<p><code>eth_getUncleCountByBlockNumber</code></p>\n</li>\n<li>\n<p><code>eth_getCode</code></p>\n</li>\n<li>\n<p><code>eth_sign</code></p>\n</li>\n<li>\n<p><code>eth_signTypedData_v4</code></p>\n</li>\n<li>\n<p><code>eth_sendTransaction</code></p>\n</li>\n<li>\n<p><code>eth_sendRawTransaction</code></p>\n</li>\n<li>\n<p><code>eth_call</code></p>\n</li>\n<li>\n<p><code>eth_createAccessList</code></p>\n</li>\n<li>\n<p><code>eth_estimateGas</code></p>\n</li>\n<li>\n<p><code>eth_getTransactionByHash</code></p>\n</li>\n<li>\n<p><code>eth_getTransactionByBlockHashAndIndex</code></p>\n</li>\n<li>\n<p><code>eth_getTransactionByBlockNumberAndIndex</code></p>\n</li>\n<li>\n<p><code>eth_getTransactionReceipt</code></p>\n</li>\n<li>\n<p><code>eth_getUncleByBlockHashAndIndex</code></p>\n</li>\n<li>\n<p><code>eth_getUncleByBlockNumberAndIndex</code></p>\n</li>\n<li>\n<p><code>eth_getLogs</code></p>\n</li>\n<li>\n<p><code>eth_newFilter</code></p>\n</li>\n<li>\n<p><code>eth_getFilterChanges</code></p>\n</li>\n<li>\n<p><code>eth_newBlockFilter</code></p>\n</li>\n<li>\n<p><code>eth_newPendingTransactionFilter</code></p>\n</li>\n<li>\n<p><code>eth_getFilterLogs</code></p>\n</li>\n<li>\n<p><code>eth_uninstallFilter</code></p>\n</li>\n<li>\n<p><code>eth_getWork</code></p>\n</li>\n<li>\n<p><code>eth_subscribe</code></p>\n</li>\n<li>\n<p><code>eth_unsubscribe</code></p>\n</li>\n<li>\n<p><code>eth_syncing</code></p>\n</li>\n<li>\n<p><code>eth_submitWork</code></p>\n</li>\n<li>\n<p><code>eth_submitHashrate</code></p>\n</li>\n<li>\n<p><code>eth_feeHistory</code></p>\n</li>\n<li>\n<p><code>eth_getProof</code></p>\n</li>\n<li>\n<p><code>debug_traceTransaction</code>\nUse <code>anvil --steps-tracing</code> to get <code>structLogs</code></p>\n</li>\n<li>\n<p><code>debug_traceCall</code>\nNote that non-standard traces are not yet supported. This means you can&#x27;t pass any arguments to the <code>trace</code> parameter.</p>\n</li>\n<li>\n<p><code>trace_transaction</code></p>\n</li>\n<li>\n<p><code>trace_block</code></p>\n</li>\n</ul>\n","isPage":false,"text":"\nThe standard methods are based on this reference.\n\n\nweb3_clientVersion\n\n\nweb3_sha3\n\n\neth_chainId\n\n\neth_networkId\n\n\neth_gasPrice\n\n\neth_accounts\n\n\neth_blockNumber\n\n\neth_getBalance\n\n\neth_getStorageAt\n\n\neth_getBlockByHash\n\n\neth_getBlockByNumber\n\n\neth_getTransactionCount\n\n\neth_getBlockTransactionCountByHash\n\n\neth_getBlockTransactionCountByNumber\n\n\neth_getUncleCountByBlockHash\n\n\neth_getUncleCountByBlockNumber\n\n\neth_getCode\n\n\neth_sign\n\n\neth_signTypedData_v4\n\n\neth_sendTransaction\n\n\neth_sendRawTransaction\n\n\neth_call\n\n\neth_createAccessList\n\n\neth_estimateGas\n\n\neth_getTransactionByHash\n\n\neth_getTransactionByBlockHashAndIndex\n\n\neth_getTransactionByBlockNumberAndIndex\n\n\neth_getTransactionReceipt\n\n\neth_getUncleByBlockHashAndIndex\n\n\neth_getUncleByBlockNumberAndIndex\n\n\neth_getLogs\n\n\neth_newFilter\n\n\neth_getFilterChanges\n\n\neth_newBlockFilter\n\n\neth_newPendingTransactionFilter\n\n\neth_getFilterLogs\n\n\neth_uninstallFilter\n\n\neth_getWork\n\n\neth_subscribe\n\n\neth_unsubscribe\n\n\neth_syncing\n\n\neth_submitWork\n\n\neth_submitHashrate\n\n\neth_feeHistory\n\n\neth_getProof\n\n\ndebug_traceTransaction\nUse anvil --steps-tracing to get structLogs\n\n\ndebug_traceCall\nNote that non-standard traces are not yet supported. This means you can&#x27;t pass any arguments to the trace parameter.\n\n\ntrace_transaction\n\n\ntrace_block\n\n\n","title":"Standard Methods","titles":[null,"anvil","DESCRIPTION","Supported RPC Methods"]},"13":{"href":"/anvil/reference#custom-methods","html":"\n<p>The <code>anvil_*</code> namespace is an alias for <code>hardhat</code>. For more info, refer to the <a href=\"https://hardhat.org/hardhat-network/reference#hardhat-network-methods\">Hardhat documentation</a>.</p>\n<p><code>anvil_impersonateAccount</code>\nSend transactions impersonating an externally owned account or contract.</p>\n<p><code>anvil_stopImpersonatingAccount</code>\nStops impersonating an account or contract if previously set with <code>anvil_impersonateAccount</code>.</p>\n<p><code>anvil_autoImpersonateAccount</code>\nAccepts <code>true</code> to enable auto impersonation of accounts, and <code>false</code> to disable it. When enabled, any transaction&#x27;s sender will be automatically impersonated. Same as <code>anvil_impersonateAccount</code>.</p>\n<p><code>anvil_getAutomine</code>\nReturns true if automatic mining is enabled, and false if it is not.</p>\n<p><code>anvil_mine</code>\nMines a series of blocks.</p>\n<p><code>anvil_dropTransaction</code>\nRemoves transactions from the pool.</p>\n<p><code>anvil_reset</code>\nReset the fork to a fresh forked state, and optionally update the fork config.</p>\n<p><code>anvil_setRpcUrl</code>\nSets the backend RPC URL.</p>\n<p><code>anvil_setBalance</code>\nModifies the balance of an account.</p>\n<p><code>anvil_setCode</code>\nSets the code of a contract.</p>\n<p><code>anvil_setNonce</code>\nSets the nonce of an address.</p>\n<p><code>anvil_setStorageAt</code>\nWrites a single slot of the account&#x27;s storage.</p>\n<p><code>anvil_setCoinbase</code>\nSets the coinbase address.</p>\n<p><code>anvil_setLoggingEnabled</code>\nEnable or disable logging.</p>\n<p><code>anvil_setMinGasPrice</code>\nSet the minimum gas price for the node.</p>\n<p><code>anvil_setNextBlockBaseFeePerGas</code>\nSets the base fee of the next block.</p>\n<p><code>anvil_setChainId</code>\nSets the chain ID of the current EVM instance.</p>\n<p><code>anvil_dumpState</code>\nReturns a hex string representing the complete state of the chain. Can be re-imported into a fresh/restarted instance of Anvil to reattain the same state.</p>\n<p><code>anvil_loadState</code>\nWhen given a hex string previously returned by <code>anvil_dumpState</code>, merges the contents into the current chain state. Will overwrite any colliding accounts/storage slots.</p>\n<p><code>anvil_nodeInfo</code>\nRetrieves the configuration params for the currently running Anvil node.</p>\n","isPage":false,"text":"\nThe anvil_* namespace is an alias for hardhat. For more info, refer to the Hardhat documentation.\nanvil_impersonateAccount\nSend transactions impersonating an externally owned account or contract.\nanvil_stopImpersonatingAccount\nStops impersonating an account or contract if previously set with anvil_impersonateAccount.\nanvil_autoImpersonateAccount\nAccepts true to enable auto impersonation of accounts, and false to disable it. When enabled, any transaction&#x27;s sender will be automatically impersonated. Same as anvil_impersonateAccount.\nanvil_getAutomine\nReturns true if automatic mining is enabled, and false if it is not.\nanvil_mine\nMines a series of blocks.\nanvil_dropTransaction\nRemoves transactions from the pool.\nanvil_reset\nReset the fork to a fresh forked state, and optionally update the fork config.\nanvil_setRpcUrl\nSets the backend RPC URL.\nanvil_setBalance\nModifies the balance of an account.\nanvil_setCode\nSets the code of a contract.\nanvil_setNonce\nSets the nonce of an address.\nanvil_setStorageAt\nWrites a single slot of the account&#x27;s storage.\nanvil_setCoinbase\nSets the coinbase address.\nanvil_setLoggingEnabled\nEnable or disable logging.\nanvil_setMinGasPrice\nSet the minimum gas price for the node.\nanvil_setNextBlockBaseFeePerGas\nSets the base fee of the next block.\nanvil_setChainId\nSets the chain ID of the current EVM instance.\nanvil_dumpState\nReturns a hex string representing the complete state of the chain. Can be re-imported into a fresh/restarted instance of Anvil to reattain the same state.\nanvil_loadState\nWhen given a hex string previously returned by anvil_dumpState, merges the contents into the current chain state. Will overwrite any colliding accounts/storage slots.\nanvil_nodeInfo\nRetrieves the configuration params for the currently running Anvil node.\n","title":"Custom Methods","titles":[null,"anvil","DESCRIPTION","Supported RPC Methods"]},"14":{"href":"/anvil/reference#special-methods","html":"\n<p>The special methods come from Ganache. You can take a look at the documentation <a href=\"https://github.com/trufflesuite/ganache-cli-archive/blob/master/README.md\">here</a>.</p>\n<p><code>evm_setAutomine</code>\nEnables or disables, based on the single boolean argument, the automatic mining of new blocks with each new transaction submitted to the network.</p>\n<p><code>evm_setIntervalMining</code>\nSets the mining behavior to interval with the given interval (seconds).</p>\n<p><code>evm_snapshot</code>\nSnapshot the state of the blockchain at the current block.</p>\n<p><code>evm_revert</code>\nRevert the state of the blockchain to a previous snapshot. Takes a single parameter, which is the snapshot id to revert to.</p>\n<p><code>evm_increaseTime</code>\nJump forward in time by the given amount of time, in seconds.</p>\n<p><code>evm_setNextBlockTimestamp</code>\nSimilar to <code>evm_increaseTime</code> but takes the exact timestamp that you want in the next block.</p>\n<p><code>anvil_setBlockTimestampInterval</code>\nSimilar to <code>evm_increaseTime</code> but sets a block timestamp <code>interval</code>. The timestamp of the next block will be computed as <code>lastBlock_timestamp + interval</code>.</p>\n<p><code>evm_setBlockGasLimit</code>\nSets the block gas limit for the following blocks.</p>\n<p><code>anvil_removeBlockTimestampInterval</code>\nRemoves an <code>anvil_setBlockTimestampInterval</code> if it exists.</p>\n<p><code>evm_mine</code>\nMine a single block.</p>\n<p><code>anvil_enableTraces</code>\nTurn on call traces for transactions that are returned to the user when they execute a transaction (instead of just txhash/receipt).</p>\n<p><code>eth_sendUnsignedTransaction</code>\nExecute a transaction regardless of signature status.</p>\n<p>For the next three methods, make sure to read <a href=\"https://geth.ethereum.org/docs/rpc/ns-txpool\">Geth&#x27;s documentation</a>.</p>\n<p><code>txpool_status</code>\nReturns the number of transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.</p>\n<p><code>txpool_inspect</code>\nReturns a summary of all the transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.</p>\n<p><code>txpool_content</code>\nReturns the details of all transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.</p>\n","isPage":false,"text":"\nThe special methods come from Ganache. You can take a look at the documentation here.\nevm_setAutomine\nEnables or disables, based on the single boolean argument, the automatic mining of new blocks with each new transaction submitted to the network.\nevm_setIntervalMining\nSets the mining behavior to interval with the given interval (seconds).\nevm_snapshot\nSnapshot the state of the blockchain at the current block.\nevm_revert\nRevert the state of the blockchain to a previous snapshot. Takes a single parameter, which is the snapshot id to revert to.\nevm_increaseTime\nJump forward in time by the given amount of time, in seconds.\nevm_setNextBlockTimestamp\nSimilar to evm_increaseTime but takes the exact timestamp that you want in the next block.\nanvil_setBlockTimestampInterval\nSimilar to evm_increaseTime but sets a block timestamp interval. The timestamp of the next block will be computed as lastBlock_timestamp + interval.\nevm_setBlockGasLimit\nSets the block gas limit for the following blocks.\nanvil_removeBlockTimestampInterval\nRemoves an anvil_setBlockTimestampInterval if it exists.\nevm_mine\nMine a single block.\nanvil_enableTraces\nTurn on call traces for transactions that are returned to the user when they execute a transaction (instead of just txhash/receipt).\neth_sendUnsignedTransaction\nExecute a transaction regardless of signature status.\nFor the next three methods, make sure to read Geth&#x27;s documentation.\ntxpool_status\nReturns the number of transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.\ntxpool_inspect\nReturns a summary of all the transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.\ntxpool_content\nReturns the details of all transactions currently pending for inclusion in the next block(s), as well as the ones that are being scheduled for future execution only.\n","title":"Special Methods","titles":[null,"anvil","DESCRIPTION","Supported RPC Methods"]},"15":{"href":"/anvil/reference#otterscan-methods","html":"\n<p>The <code>ots_*</code> namespace implements the <a href=\"https://docs.otterscan.io/api-docs/ots-api\">Otterscan specification</a>.</p>\n<p><code>ots_getApiLevel</code>\nUsed by Otterscan to check if it&#x27;s connecting to a compatible node and display a friendly message if it is not.</p>\n<p><code>ots_getInternalOperations</code>\nReturns the internal ETH transfers inside a transaction.</p>\n<p><code>ots_hasCode</code>\nCheck if a certain address contains a deployed code.</p>\n<p><code>ots_getTransactionError</code>\nExtract the transaction raw error output.</p>\n<p><code>ots_traceTransaction</code>\nExtract all variations of calls, contract creation and self-destructs and returns a call tree.</p>\n<p><code>ots_getBlockDetails</code>\nTailor-made and expanded version of eth_getBlock* for block details page in Otterscan.</p>\n<p><code>ots_getBlockTransactions</code>\nGet paginated transactions for a certain block, And removes some verbose fields such logs.</p>\n<p><code>ots_searchTransactionsBefore</code>\nGets paginated inbound/outbound transaction calls for a certain address, and before a given target block.</p>\n<p><code>ots_searchTransactionsAfter</code>\nGets paginated inbound/outbound transaction calls for a certain address, and after a given target block.</p>\n<p><code>ots_getTransactionBySenderAndNonce</code>\nGets the transaction hash for a certain sender address, given its nonce.</p>\n<p><code>ots_getContractCreator</code>\nGets the transaction hash and the address which created a contract.</p>\n","isPage":false,"text":"\nThe ots_* namespace implements the Otterscan specification.\nots_getApiLevel\nUsed by Otterscan to check if it&#x27;s connecting to a compatible node and display a friendly message if it is not.\nots_getInternalOperations\nReturns the internal ETH transfers inside a transaction.\nots_hasCode\nCheck if a certain address contains a deployed code.\nots_getTransactionError\nExtract the transaction raw error output.\nots_traceTransaction\nExtract all variations of calls, contract creation and self-destructs and returns a call tree.\nots_getBlockDetails\nTailor-made and expanded version of eth_getBlock* for block details page in Otterscan.\nots_getBlockTransactions\nGet paginated transactions for a certain block, And removes some verbose fields such logs.\nots_searchTransactionsBefore\nGets paginated inbound/outbound transaction calls for a certain address, and before a given target block.\nots_searchTransactionsAfter\nGets paginated inbound/outbound transaction calls for a certain address, and after a given target block.\nots_getTransactionBySenderAndNonce\nGets the transaction hash for a certain sender address, given its nonce.\nots_getContractCreator\nGets the transaction hash and the address which created a contract.\n","title":"Otterscan Methods","titles":[null,"anvil","DESCRIPTION","Supported RPC Methods"]},"16":{"href":"/anvil/reference#options","html":"\n","isPage":false,"text":"\n","title":"OPTIONS","titles":[null,"anvil"]},"17":{"href":"/anvil/reference#general-options","html":"\n<p><code>-a, --accounts &lt;ACCOUNTS&gt;</code>\n     Set the number of accounts. [default: 10]</p>\n<p><code>--auto-impersonate</code>\n     Enable autoImpersonate on startup.</p>\n<p><code>-b, --block-time &lt;block-time&gt;</code>\n     Block time in seconds for interval mining.</p>\n<p><code>--balance &lt;BALANCE&gt;</code>\n     Set the balance of the accounts. [default: 10000]</p>\n<p><code>--derivation-path &lt;DERIVATION_PATH&gt;</code>\n     Set the derivation path of the child key to be derived. [default: m/44&#x27;/60&#x27;/0&#x27;/0/]</p>\n<p><code>-h, --help</code>\n     Print help information.</p>\n<p><code>--hardfork &lt;HARDFORK&gt;</code>\n     Choose the EVM hardfork to use e.g. <code>prague</code>, <code>cancun</code>, <code>shanghai</code>, <code>paris</code>, <code>london</code>, etc... [default: latest]</p>\n<p><code>--init &lt;PATH&gt;</code>\n     Initialize the genesis block with the given <code>genesis.json</code> file.</p>\n<p><code>-m, --mnemonic &lt;MNEMONIC&gt;</code>\n     BIP39 mnemonic phrase used for generating accounts.</p>\n<p><code>--no-mining</code>\n     Disable auto and interval mining, and mine on demand instead.</p>\n<p><code>--order &lt;ORDER&gt;</code>\n     How transactions are sorted in the mempool. [default: fees]</p>\n<p><code>-p, --port &lt;PORT&gt;</code>\n     Port number to listen on. [default: 8545]</p>\n<p><code>--steps-tracing</code>\n     Enable steps tracing used for debug calls returning geth-style traces. [aliases: tracing]</p>\n<p><code>--ipc [&lt;PATH&gt;]</code>\n     Starts an IPC endpoint at the given <code>PATH</code> argument or the default path: unix: <code>tmp/anvil.ipc</code>, windows: <code>\\\\.\\pipe\\anvil.ipc</code>.</p>\n<p><code>--silent</code>\n     Don&#x27;t print anything on startup.</p>\n<p><code>--timestamp &lt;TIMESTAMP&gt;</code>\n     Set the timestamp of the genesis block.</p>\n<p><code>-V, --version</code>\n     Print version information.</p>\n<p><code>--disable-default-create2-deployer</code>\n     Disables deploying the default CREATE2 factory when running Anvil without forking.</p>\n","isPage":false,"text":"\n-a, --accounts &lt;ACCOUNTS&gt;\n     Set the number of accounts. [default: 10]\n--auto-impersonate\n     Enable autoImpersonate on startup.\n-b, --block-time &lt;block-time&gt;\n     Block time in seconds for interval mining.\n--balance &lt;BALANCE&gt;\n     Set the balance of the accounts. [default: 10000]\n--derivation-path &lt;DERIVATION_PATH&gt;\n     Set the derivation path of the child key to be derived. [default: m/44&#x27;/60&#x27;/0&#x27;/0/]\n-h, --help\n     Print help information.\n--hardfork &lt;HARDFORK&gt;\n     Choose the EVM hardfork to use e.g. prague, cancun, shanghai, paris, london, etc... [default: latest]\n--init &lt;PATH&gt;\n     Initialize the genesis block with the given genesis.json file.\n-m, --mnemonic &lt;MNEMONIC&gt;\n     BIP39 mnemonic phrase used for generating accounts.\n--no-mining\n     Disable auto and interval mining, and mine on demand instead.\n--order &lt;ORDER&gt;\n     How transactions are sorted in the mempool. [default: fees]\n-p, --port &lt;PORT&gt;\n     Port number to listen on. [default: 8545]\n--steps-tracing\n     Enable steps tracing used for debug calls returning geth-style traces. [aliases: tracing]\n--ipc [&lt;PATH&gt;]\n     Starts an IPC endpoint at the given PATH argument or the default path: unix: tmp/anvil.ipc, windows: \\\\.\\pipe\\anvil.ipc.\n--silent\n     Don&#x27;t print anything on startup.\n--timestamp &lt;TIMESTAMP&gt;\n     Set the timestamp of the genesis block.\n-V, --version\n     Print version information.\n--disable-default-create2-deployer\n     Disables deploying the default CREATE2 factory when running Anvil without forking.\n","title":"General Options","titles":[null,"anvil","OPTIONS"]},"18":{"href":"/anvil/reference#evm-options","html":"\n<p><code>-f, --fork-url &lt;URL&gt;</code>\n     Fetch state over a remote endpoint instead of starting from an empty state.</p>\n<p><code>--fork-block-number &lt;BLOCK&gt;</code>\n     Fetch state from a specific block number over a remote endpoint (Must pass <code>--fork-url</code> in the same command-line).</p>\n<p><code>--fork-chain-id &lt;CHAIN&gt;</code>\n     Specify chain id to skip fetching it from remote endpoint. This enables offline-start mode.\nYou still must pass both <code>--fork-url</code> and <code>--fork-block-number</code>, and already have your required state cached on disk, anything missing locally\nwould be fetched from the remote.</p>\n<p><code>--fork-retry-backoff &lt;BACKOFF&gt;</code>\n     Initial retry backoff on encountering errors.</p>\n<p><code>--fork-transaction-hash &lt;TRANSACTION&gt;</code>\n     Fetch state from a specific transaction hash over a remote endpoint (Must pass <code>--fork-url</code> in the same command-line).</p>\n<p><code>--retries &lt;retries&gt;</code>\n     Number of retry requests for spurious networks (timed out requests). [default: 5]</p>\n<p><code>--timeout &lt;timeout&gt;</code>\n     Timeout in ms for requests sent to remote JSON-RPC server in forking mode. [default: 45000]</p>\n<p><code>--compute-units-per-second &lt;CUPS&gt;</code>\n     Sets the number of assumed available compute units per second for this provider. [default: 330]</p>\n<p><code>--no-rate-limit</code>\n     Disables rate limiting for this node&#x27;s provider. Will always override <code>--compute-units-per-second</code> if present. [default: false]</p>\n<p><code>--no-storage-caching</code>\n     Disables RPC caching; all storage slots are read from the endpoint. This flag overrides the project&#x27;s configuration file (Must pass --fork-url in the same command-line).</p>\n","isPage":false,"text":"\n-f, --fork-url &lt;URL&gt;\n     Fetch state over a remote endpoint instead of starting from an empty state.\n--fork-block-number &lt;BLOCK&gt;\n     Fetch state from a specific block number over a remote endpoint (Must pass --fork-url in the same command-line).\n--fork-chain-id &lt;CHAIN&gt;\n     Specify chain id to skip fetching it from remote endpoint. This enables offline-start mode.\nYou still must pass both --fork-url and --fork-block-number, and already have your required state cached on disk, anything missing locally\nwould be fetched from the remote.\n--fork-retry-backoff &lt;BACKOFF&gt;\n     Initial retry backoff on encountering errors.\n--fork-transaction-hash &lt;TRANSACTION&gt;\n     Fetch state from a specific transaction hash over a remote endpoint (Must pass --fork-url in the same command-line).\n--retries &lt;retries&gt;\n     Number of retry requests for spurious networks (timed out requests). [default: 5]\n--timeout &lt;timeout&gt;\n     Timeout in ms for requests sent to remote JSON-RPC server in forking mode. [default: 45000]\n--compute-units-per-second &lt;CUPS&gt;\n     Sets the number of assumed available compute units per second for this provider. [default: 330]\n--no-rate-limit\n     Disables rate limiting for this node&#x27;s provider. Will always override --compute-units-per-second if present. [default: false]\n--no-storage-caching\n     Disables RPC caching; all storage slots are read from the endpoint. This flag overrides the project&#x27;s configuration file (Must pass --fork-url in the same command-line).\n","title":"EVM Options","titles":[null,"anvil","OPTIONS"]},"19":{"href":"/anvil/reference#executor-environment-config","html":"\n<p><code>--base-fee &lt;FEE&gt;</code>\n<code>--block-base-fee-per-gas &lt;FEE&gt;</code>\n     The base fee in a block.</p>\n<p><code>--chain-id &lt;CHAIN_ID&gt;</code>\n     The chain ID. [default: 31337]</p>\n<p><code>--code-size-limit &lt;CODE_SIZE&gt;</code>\n     EIP-170: Contract code size limit in bytes. Useful to increase for tests. [default: 0x6000 (~25kb)]</p>\n<p><code>--gas-limit &lt;GAS_LIMIT&gt;</code>\n     The block gas limit.</p>\n<p><code>--gas-price &lt;GAS_PRICE&gt;</code>\n     The gas price.</p>\n","isPage":false,"text":"\n--base-fee &lt;FEE&gt;\n--block-base-fee-per-gas &lt;FEE&gt;\n     The base fee in a block.\n--chain-id &lt;CHAIN_ID&gt;\n     The chain ID. [default: 31337]\n--code-size-limit &lt;CODE_SIZE&gt;\n     EIP-170: Contract code size limit in bytes. Useful to increase for tests. [default: 0x6000 (~25kb)]\n--gas-limit &lt;GAS_LIMIT&gt;\n     The block gas limit.\n--gas-price &lt;GAS_PRICE&gt;\n     The gas price.\n","title":"Executor Environment Config","titles":[null,"anvil","OPTIONS"]},"20":{"href":"/anvil/reference#server-options","html":"\n<p><code>--allow-origin &lt;allow-origin&gt;</code>\n     Set the CORS <code>allow_origin</code>. [default: *]</p>\n<p><code>--no-cors</code>\n     Disable CORS.</p>\n<p><code>--host &lt;HOST&gt;</code>\n     The IP address the server will listen on.</p>\n<p><code>--config-out &lt;OUT_FILE&gt;</code>\n     Writes output of <code>anvil</code> as json to user-specified file.</p>\n<p><code>--prune-history</code>\n     Don&#x27;t keep full chain history.</p>\n<p><code>--no-request-size-limit</code>\n     Disable the request size limit. Default is 2MB</p>\n","isPage":false,"text":"\n--allow-origin &lt;allow-origin&gt;\n     Set the CORS allow_origin. [default: *]\n--no-cors\n     Disable CORS.\n--host &lt;HOST&gt;\n     The IP address the server will listen on.\n--config-out &lt;OUT_FILE&gt;\n     Writes output of anvil as json to user-specified file.\n--prune-history\n     Don&#x27;t keep full chain history.\n--no-request-size-limit\n     Disable the request size limit. Default is 2MB\n","title":"Server Options","titles":[null,"anvil","OPTIONS"]},"21":{"href":"/anvil/reference#examples","html":"\n<ol>\n<li>Set the number of accounts to 15 and their balance to 300 ETH</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">anvil</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --accounts</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 15</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --balance</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 300</span></span></code></pre>\n<ol start=\"2\">\n<li>Choose the address which will execute the tests</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">anvil</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --sender</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0xC8479C45EE87E0B437c09d3b8FE8ED14ccDa825E</span></span></code></pre>\n<ol start=\"3\">\n<li>Change how transactions are sorted in the mempool to FIFO</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">anvil</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --order</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fifo</span></span></code></pre>\n","isPage":false,"text":"\n\nSet the number of accounts to 15 and their balance to 300 ETH\n\nanvil --accounts 15 --balance 300\n\nChoose the address which will execute the tests\n\nanvil --sender 0xC8479C45EE87E0B437c09d3b8FE8ED14ccDa825E\n\nChange how transactions are sorted in the mempool to FIFO\n\nanvil --order fifo\n","title":"EXAMPLES","titles":[null,"anvil"]},"22":{"href":"/anvil/reference#shell-completions","html":"\n<p><code>anvil completions</code> <em>shell</em></p>\n<p>Generates a shell completions script for the given shell.</p>\n<p>Supported shells are:</p>\n<ul>\n<li>bash</li>\n<li>elvish</li>\n<li>fish</li>\n<li>powershell</li>\n<li>zsh</li>\n</ul>\n","isPage":false,"text":"\nanvil completions shell\nGenerates a shell completions script for the given shell.\nSupported shells are:\n\nbash\nelvish\nfish\npowershell\nzsh\n\n","title":"Shell Completions","titles":[null,"anvil"]},"23":{"href":"/anvil/reference#examples-1","html":"\n<ol>\n<li>Generate shell completions script for zsh:\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">anvil</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> completions</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> zsh</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.oh-my-zsh/completions/_anvil</span></span></code></pre>\n</li>\n</ol>\n","isPage":false,"text":"\n\nGenerate shell completions script for zsh:\nanvil completions zsh &gt; $HOME/.oh-my-zsh/completions/_anvil\n\n\n","title":"EXAMPLES","titles":[null,"anvil","Shell Completions"]},"24":{"href":"/anvil/reference#usage-within-docker","html":"\n<p>In order to run anvil as a service in Github Actions with the <a href=\"/guides/foundry-in-docker\">Docker container</a>, where passing arguments to the entrypoint command is not possible, use the <code>ANVIL_IP_ADDR</code> environment variable to set the host&#x27;s IP. <code>ANVIL_IP_ADDR=0.0.0.0</code> is equivalent to providing the <code>--host &lt;ip&gt;</code> option.</p>\n","isPage":false,"text":"\nIn order to run anvil as a service in Github Actions with the Docker container, where passing arguments to the entrypoint command is not possible, use the ANVIL_IP_ADDR environment variable to set the host&#x27;s IP. ANVIL_IP_ADDR=0.0.0.0 is equivalent to providing the --host &lt;ip&gt; option.\n","title":"Usage within Docker","titles":[null,"anvil"]},"25":{"href":"/anvil/reference#using-genesisjson","html":"\n<p>The <code>genesis.json</code> file in Anvil serves a similar purpose as in Geth, defining the network&#x27;s initial state, consensus rules, and preallocated accounts to ensure all nodes start consistently and maintain network integrity. All values, including balance, gas limit and such, are to be defined as hexadecimals.</p>\n<ul>\n<li><code>chainId</code>: Identifier for the blockchain, unique to each network.</li>\n<li><code>nonce</code>: A counter used in hashing algorithms to ensure data integrity.</li>\n<li><code>timestamp</code>: The creation time of the genesis block in Unix time.</li>\n<li><code>extraData</code>: Additional data that can be included by the creator of the genesis block.</li>\n<li><code>gasLimit</code>: The maximum amount of gas that can be used in the block.</li>\n<li><code>difficulty</code>: A measure of how difficult it is to mine a new block.</li>\n<li><code>mixHash</code>: A unique identifier proving a sufficient amount of computation for the block.</li>\n<li><code>coinbase</code>: The Ethereum address of the miner who mined this block.</li>\n<li><code>stateRoot</code>: The root of the state trie, reflecting the final state after all transactions.</li>\n<li><code>alloc</code>: Allows pre-allocating Ether to a set of addresses with predefined balances.</li>\n<li><code>number</code>: The block number, with the genesis block being 0.</li>\n<li><code>gasUsed</code>: The total gas used in the block.</li>\n<li><code>parentHash</code>: The hash of the parent block, all zeros for the genesis block since there is no parent.</li>\n</ul>\n<p>A sample for simulating mainnet via genesis can be found <a href=\"https://github.com/paradigmxyz/reth/blob/8f3e4a15738d8174d41f4aede5570ecead141a77/crates/primitives/res/genesis/mainnet.json\">here</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;chainId&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x2323&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;nonce&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x42&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;timestamp&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;extraData&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;gasLimit&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x1388&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;difficulty&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x400000000&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;mixHash&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;coinbase&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x0000000000000000000000000000000000000000&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;stateRoot&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;alloc&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;000d836201318ec6899a67540690382780743280&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;balance&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xad78ebc5ac6200000&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;number&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;gasUsed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;parentHash&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nThe genesis.json file in Anvil serves a similar purpose as in Geth, defining the network&#x27;s initial state, consensus rules, and preallocated accounts to ensure all nodes start consistently and maintain network integrity. All values, including balance, gas limit and such, are to be defined as hexadecimals.\n\nchainId: Identifier for the blockchain, unique to each network.\nnonce: A counter used in hashing algorithms to ensure data integrity.\ntimestamp: The creation time of the genesis block in Unix time.\nextraData: Additional data that can be included by the creator of the genesis block.\ngasLimit: The maximum amount of gas that can be used in the block.\ndifficulty: A measure of how difficult it is to mine a new block.\nmixHash: A unique identifier proving a sufficient amount of computation for the block.\ncoinbase: The Ethereum address of the miner who mined this block.\nstateRoot: The root of the state trie, reflecting the final state after all transactions.\nalloc: Allows pre-allocating Ether to a set of addresses with predefined balances.\nnumber: The block number, with the genesis block being 0.\ngasUsed: The total gas used in the block.\nparentHash: The hash of the parent block, all zeros for the genesis block since there is no parent.\n\nA sample for simulating mainnet via genesis can be found here.\n{\n  &quot;chainId&quot;: &quot;0x2323&quot;,\n  &quot;nonce&quot;: &quot;0x42&quot;,\n  &quot;timestamp&quot;: &quot;0x0&quot;,\n  &quot;extraData&quot;: &quot;0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa&quot;,\n  &quot;gasLimit&quot;: &quot;0x1388&quot;,\n  &quot;difficulty&quot;: &quot;0x400000000&quot;,\n  &quot;mixHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,\n  &quot;coinbase&quot;: &quot;0x0000000000000000000000000000000000000000&quot;,\n  &quot;stateRoot&quot;: &quot;0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544&quot;,\n  &quot;alloc&quot;: {\n    &quot;000d836201318ec6899a67540690382780743280&quot;: {\n      &quot;balance&quot;: &quot;0xad78ebc5ac6200000&quot;\n    }\n  },\n  &quot;number&quot;: &quot;0x0&quot;,\n  &quot;gasUsed&quot;: &quot;0x0&quot;,\n  &quot;parentHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;\n}","title":"Using genesis.json","titles":[null,"anvil","Usage within Docker"]},"26":{"href":"/chisel/overview#chisel","html":"\n<p>Chisel is a fast, utilitarian, and verbose Solidity REPL.</p>\n<p>The <code>chisel</code> binary can be used both within and outside of a Foundry project.\nIf the binary is executed in a Foundry project root, Chisel will inherit the project&#x27;s configuration options.</p>\n<p>Chisel is part of the Foundry suite and is installed alongside <code>forge</code>, <code>cast</code>, and <code>anvil</code>. If you haven&#x27;t installed Foundry\nyet, see <a href=\"/introduction/installation\">Foundry installation</a>.</p>\n","isPage":true,"text":"\nChisel is a fast, utilitarian, and verbose Solidity REPL.\nThe chisel binary can be used both within and outside of a Foundry project.\nIf the binary is executed in a Foundry project root, Chisel will inherit the project&#x27;s configuration options.\nChisel is part of the Foundry suite and is installed alongside forge, cast, and anvil. If you haven&#x27;t installed Foundry\nyet, see Foundry installation.\n","title":"Chisel","titles":[null]},"27":{"href":"/chisel/overview#getting-started","html":"\n<p>To use Chisel, simply type <code>chisel</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">chisel</span></span></code></pre>\n<p>From here, start writing Solidity code! Chisel will offer verbose feedback on each input.</p>\n<p>Create a variable <code>a</code> and query it:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">➜ uint256 a = 123;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">➜ a</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">Type: uint256</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">├ Hex: 0x7b</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">├ Hex (full word): 0x000000000000000000000000000000000000000000000000000000000000007b</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">└ Decimal: 123</span></span></code></pre>\n<p>Finally, run <code>!source</code> to see <code>a</code> was applied:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// SPDX-License-Identifier: UNLICENSED</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ^0.8.28</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Vm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/Vm.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> REPL</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Vm </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> constant</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Vm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint160</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;hevm cheat code&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)))));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">@notice</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> REPL contract entry point</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 123</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>To see available commands, type <code>!help</code> within the REPL.</p>\n<br/>\n<aside data-callout=\"info\"><p>See the <a href=\"/chisel/reference\"><code>chisel</code> Reference</a> for in depth information on Chisel and its capabilities.</p></aside>","isPage":false,"text":"\nTo use Chisel, simply type chisel.\nchisel\nFrom here, start writing Solidity code! Chisel will offer verbose feedback on each input.\nCreate a variable a and query it:\n➜ uint256 a = 123;\n➜ a\nType: uint256\n├ Hex: 0x7b\n├ Hex (full word): 0x000000000000000000000000000000000000000000000000000000000000007b\n└ Decimal: 123\nFinally, run !source to see a was applied:\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n \nimport {Vm} from &quot;forge-std/Vm.sol&quot;;\n \ncontract REPL {\n    Vm internal constant vm = Vm(address(uint160(uint256(keccak256(&quot;hevm cheat code&quot;)))));\n \n    /// @notice REPL contract entry point\n    function run() public {\n        uint256 a = 123;\n    }\n}\nTo see available commands, type !help within the REPL.\n\nSee the chisel Reference for in depth information on Chisel and its capabilities.","title":"Getting started","titles":[null,"Chisel"]},"28":{"href":"/chisel/reference#chisel","html":"\n","isPage":true,"text":"\n","title":"chisel","titles":[null]},"29":{"href":"/chisel/reference#name","html":"\n<p><code>chisel</code> - Test and receive verbose feedback on Solidity inputs within a REPL environment.</p>\n","isPage":false,"text":"\nchisel - Test and receive verbose feedback on Solidity inputs within a REPL environment.\n","title":"NAME","titles":[null,"chisel"]},"30":{"href":"/chisel/reference#synopsis","html":"\n<p><code>chisel</code> [<em>options</em>]</p>\n","isPage":false,"text":"\nchisel [options]\n","title":"SYNOPSIS","titles":[null,"chisel"]},"31":{"href":"/chisel/reference#subcommands-bin","html":"\n<ol>\n<li><code>chisel list</code>\n<ul>\n<li>Displays all cached sessions stored in <code>~/.foundry/cache/chisel</code>.</li>\n</ul>\n</li>\n<li><code>chisel load &lt;id&gt;</code>\n<ul>\n<li>If a cached session with <code>id = &lt;id&gt;</code> exists, launches the REPL and loads the corresponding session.</li>\n</ul>\n</li>\n<li><code>chisel view &lt;id&gt;</code>\n<ul>\n<li>If a cached session with <code>id = &lt;id&gt;</code> exists, displays the source code of the session&#x27;s REPL contract.</li>\n</ul>\n</li>\n<li><code>chisel clear-cache</code>\n<ul>\n<li>Deletes all cache files within the <code>~/.foundry/cache/chisel</code> directory. These sessions are unrecoverable, so use this command with care.</li>\n</ul>\n</li>\n</ol>\n","isPage":false,"text":"\n\nchisel list\n\nDisplays all cached sessions stored in ~/.foundry/cache/chisel.\n\n\nchisel load &lt;id&gt;\n\nIf a cached session with id = &lt;id&gt; exists, launches the REPL and loads the corresponding session.\n\n\nchisel view &lt;id&gt;\n\nIf a cached session with id = &lt;id&gt; exists, displays the source code of the session&#x27;s REPL contract.\n\n\nchisel clear-cache\n\nDeletes all cache files within the ~/.foundry/cache/chisel directory. These sessions are unrecoverable, so use this command with care.\n\n\n\n","title":"Subcommands (bin)","titles":[null,"chisel","SYNOPSIS"]},"32":{"href":"/chisel/reference#flags","html":"\n<p>See <code>man chisel</code> or <code>chisel --help</code> for all available environment configuration flags.</p>\n","isPage":false,"text":"\nSee man chisel or chisel --help for all available environment configuration flags.\n","title":"Flags","titles":[null,"chisel","SYNOPSIS"]},"33":{"href":"/chisel/reference#description","html":"\n<p>Chisel is a Solidity REPL (short for &quot;read-eval-print loop&quot;) that allows developers to write\nand test Solidity code snippets. It provides an interactive environment for writing and executing\nSolidity code, as well as a set of built-in commands for working with and debugging your code. This\nmakes it a useful tool for quickly testing and experimenting with Solidity code without having to\nspin up a sandbox foundry test suite.</p>\n","isPage":false,"text":"\nChisel is a Solidity REPL (short for &quot;read-eval-print loop&quot;) that allows developers to write\nand test Solidity code snippets. It provides an interactive environment for writing and executing\nSolidity code, as well as a set of built-in commands for working with and debugging your code. This\nmakes it a useful tool for quickly testing and experimenting with Solidity code without having to\nspin up a sandbox foundry test suite.\n","title":"DESCRIPTION","titles":[null,"chisel"]},"34":{"href":"/chisel/reference#usage","html":"\n<p>To open chisel, simply execute the <code>chisel</code> binary.</p>\n<p>From there, input valid Solidity code. There are two kinds of inputs to the chisel prompt apart from commands:</p>\n<ol>\n<li>\n<p>Expressions</p>\n<ul>\n<li>Expressions are statements that return a value or otherwise can be evaluated on their own. For example,\n<code>1 &lt;&lt; 8</code> is an expression that will evaluate to a <code>uint256</code> with the value <code>256</code>. Expressions will be\nevaluated up front, and will not persist in the session state past their evaluation.</li>\n<li>Examples:\n<ul>\n<li><code>address(0).balance</code></li>\n<li><code>abi.encode(256, bytes32(0), &quot;Chisel!&quot;)</code></li>\n<li><code>myViewFunc(128)</code></li>\n<li>...</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Statements</p>\n<ul>\n<li>\n<p>Statements are snippets of code that are meant to persist in the session&#x27;s state. Statements include\nvariable definitions, calls to non-state-mutating functions that return a value, and contract, function,\nevent, error, mapping, or struct definitions. If you would like an expression to be evaluated as a statement,\na semi-colon (<code>;</code>) can be appended to the end.</p>\n</li>\n<li>\n<p>Examples:</p>\n<ul>\n<li>\n<p><code>uint256 a = 0xa57b</code></p>\n</li>\n<li>\n<p><code>myStateMutatingFunc(128)</code> || <code>myViewFunc(128);</code>. Notice the <code>;</code></p>\n</li>\n<li>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> hash64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _a,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _b</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _hash) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    assembly</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Store the 64 bytes we want to hash in scratch space</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        mstore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0x00</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, _a)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        mstore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0x20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, _b)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Hash the memory in scratch space</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // and assign the result to `_hash`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        _hash </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0x00</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0x40</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n</li>\n<li>\n<p><code>event ItHappened(bytes32 indexed hash)</code></p>\n</li>\n<li>\n<p><code>struct Complex256 { uint256 re; uint256 im; }</code></p>\n</li>\n<li>\n<p>...</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n","isPage":false,"text":"\nTo open chisel, simply execute the chisel binary.\nFrom there, input valid Solidity code. There are two kinds of inputs to the chisel prompt apart from commands:\n\n\nExpressions\n\nExpressions are statements that return a value or otherwise can be evaluated on their own. For example,\n1 &lt;&lt; 8 is an expression that will evaluate to a uint256 with the value 256. Expressions will be\nevaluated up front, and will not persist in the session state past their evaluation.\nExamples:\n\naddress(0).balance\nabi.encode(256, bytes32(0), &quot;Chisel!&quot;)\nmyViewFunc(128)\n...\n\n\n\n\n\nStatements\n\n\nStatements are snippets of code that are meant to persist in the session&#x27;s state. Statements include\nvariable definitions, calls to non-state-mutating functions that return a value, and contract, function,\nevent, error, mapping, or struct definitions. If you would like an expression to be evaluated as a statement,\na semi-colon (;) can be appended to the end.\n\n\nExamples:\n\n\nuint256 a = 0xa57b\n\n\nmyStateMutatingFunc(128) || myViewFunc(128);. Notice the ;\n\n\nfunction hash64(\n  bytes32 _a,\n  bytes32 _b\n) internal pure returns (bytes32 _hash) {\n    assembly {\n        // Store the 64 bytes we want to hash in scratch space\n        mstore(0x00, _a)\n        mstore(0x20, _b)\n \n        // Hash the memory in scratch space\n        // and assign the result to `_hash`\n        _hash := keccak256(0x00, 0x40)\n    }\n}\n\n\nevent ItHappened(bytes32 indexed hash)\n\n\nstruct Complex256 { uint256 re; uint256 im; }\n\n\n...\n\n\n\n\n\n\n","title":"Usage","titles":[null,"chisel"]},"35":{"href":"/chisel/reference#available-commands","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Welcome to Chisel! Type `!help` to show available commands.</span></span>\n<span class=\"line\"><span>⚒️ Chisel help</span></span>\n<span class=\"line\"><span>=============</span></span>\n<span class=\"line\"><span>General</span></span>\n<span class=\"line\"><span>\t!help | !h - Display all commands</span></span>\n<span class=\"line\"><span>\t!quit | !q - Quit Chisel</span></span>\n<span class=\"line\"><span>\t!exec &lt;command&gt; [args] | !e &lt;command&gt; [args] - Execute a shell command and print the output</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>Session</span></span>\n<span class=\"line\"><span>\t!clear | !c - Clear current session source</span></span>\n<span class=\"line\"><span>\t!source | !so - Display the source code of the current session</span></span>\n<span class=\"line\"><span>\t!save [id] | !s [id] - Save the current session to cache</span></span>\n<span class=\"line\"><span>\t!load &lt;id&gt; | !l &lt;id&gt; - Load a previous session ID from cache</span></span>\n<span class=\"line\"><span>\t!list | !ls - List all cached sessions</span></span>\n<span class=\"line\"><span>\t!clearcache | !cc - Clear the chisel cache of all stored sessions</span></span>\n<span class=\"line\"><span>\t!export | !ex - Export the current session source to a script file</span></span>\n<span class=\"line\"><span>\t!fetch &lt;addr&gt; &lt;name&gt; | !fe &lt;addr&gt; &lt;name&gt; - Fetch the interface of a verified contract on Etherscan</span></span>\n<span class=\"line\"><span>\t!edit - Open the current session in an editor</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>Environment</span></span>\n<span class=\"line\"><span>\t!fork &lt;url&gt; | !f &lt;url&gt; - Fork an RPC for the current session. Supply 0 arguments to return to a local network</span></span>\n<span class=\"line\"><span>\t!traces | !t - Enable / disable traces for the current session</span></span>\n<span class=\"line\"><span>\t!calldata [data] | !cd [data] - Set calldata (`msg.data`) for the current session (appended after function selector). Clears it if no argument provided.</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>Debug</span></span>\n<span class=\"line\"><span>\t!memdump | !md - Dump the raw memory of the current state</span></span>\n<span class=\"line\"><span>\t!stackdump | !sd - Dump the raw stack of the current state</span></span>\n<span class=\"line\"><span>\t!rawstack &lt;var&gt; | !rs &lt;var&gt; - Display the raw value of a variable&#x27;s stack allocation. For variables that are &gt; 32 bytes in length, this will display their memory pointer.</span></span></code></pre>\n<strong>General</strong>\n<p><code>!help</code> | <code>!h</code></p>\n<p>Display all commands.</p>\n<p><code>!quit</code> | <code>!q</code></p>\n<p>Quit Chisel.</p>\n<p><code>!exec &lt;command&gt; [args]</code> | <code>!e &lt;command&gt; [args]</code></p>\n<p>Execute a shell command and print the output.</p>\n<p>Example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">➜</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> !e</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ls</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">CHANGELOG.md</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">LICENSE</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">README.md</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TESTS.md</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">artifacts</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cache</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">contracts</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">crytic-export</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">deploy</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">deploy-config</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">deployments</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">dist</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">echidna.yaml</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge-artifacts</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">foundry.toml</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">hardhat.config.ts</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">layout-lock.json</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">node_modules</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">package.json</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">scripts</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">slither.config.json</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">slither.db.json</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">src</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">tasks</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">test-case-generator</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">tsconfig.build.json</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">tsconfig.build.tsbuildinfo</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">tsconfig.json</span></span></code></pre>\n<strong>Session</strong>\n<p><code>!clear</code> | <code>!c</code></p>\n<p>Clear current session source.</p>\n<p>Under the hood, each Chisel session has an underlying contract that is altered as you input statements. This command clears this contract and resets your session to the default state.</p>\n<p><code>!source</code> | <code>!so</code></p>\n<p>Display the source code of the current session.</p>\n<p>As mentioned above, each Chisel session has an underlying contract. This command will display the source code of this contract.</p>\n<p><code>!save [id]</code> | <code>!s [id]</code></p>\n<p>Save the current session to cache.</p>\n<p>Chisel allows for caching sessions, which can be very useful if you are testing more complex logic in Chisel or if you want to return to a session at a later time. All cached Chisel sessions are stored in <code>~/.foundry/cache/chisel</code>.</p>\n<p>If an <code>id</code> argument is not supplied, Chisel will automatically assign a numerical ID to the session you are saving.</p>\n<p><code>!load &lt;id&gt;</code> | <code>!l &lt;id&gt;</code></p>\n<p>Load a previous session ID from cache.</p>\n<p>This command will load a previously cached session from the cache. Along with the session&#x27;s source, all environment settings will also be loaded. The <code>id</code> argument must correspond with an existing cached session in the <code>~/.foundry/cache/chisel</code> directory.</p>\n<p><code>!list</code> | <code>!ls</code></p>\n<p>List all cached sessions.</p>\n<p>This command will display all cached chisel sessions within the <code>~/.foundry/cache/chisel</code> directory.</p>\n<p><code>!clearcache</code> | <code>!cc</code></p>\n<p>Clear the chisel cache of all stored sessions.</p>\n<p>Deletes all cache files within the <code>~/.foundry/cache/chisel</code> directory. These sessions are unrecoverable, so use this command with care.</p>\n<p><code>!export</code> | <code>!ex</code></p>\n<p>Export the current session source to a script file.</p>\n<p>If <code>chisel</code> was executed from the root directory of a foundry project, it is possible to export your current session to a foundry script in the <code>scripts</code> dir of your project.</p>\n<p><code>!fetch &lt;addr&gt; &lt;name&gt;</code> | <code>!fe &lt;addr&gt; &lt;name&gt;</code></p>\n<p>Fetch the interface of a verified contract on Etherscan.</p>\n<p>This command will attempt to parse the interface of a verified contract @ <code>&lt;addr&gt;</code> from the Etherscan API. If successful, the interface will be inserted into the session source with the name <code>&lt;name&gt;</code>.</p>\n<p>At the moment, only interfaces of verified contracts on Ethereum mainnet can be fetched. In the future, Chisel will support fetching interfaces from multiple Etherscan-supported chains.</p>\n<p><code>!edit</code></p>\n<p>Open the current session&#x27;s <code>run()</code> function in an editor.</p>\n<p>chisel will use the editor defined in the <code>$EDITOR</code> environment variable.</p>\n<strong>Environment</strong>\n<p><code>!fork &lt;url&gt;</code> | <code>!f &lt;url&gt;</code></p>\n<p>Fork an RPC for the current session. Supply 0 arguments to return to a local network.</p>\n<p>Attempts to fork the state of the provided RPC. If no URL is provided, returns to using a blank, local devnet state.</p>\n<p><code>!traces</code> | <code>!t</code></p>\n<p>Enable / disable traces for the current session.</p>\n<p>When tracing is enabled, foundry-style call tracing and logs will be printed after each statement is inserted.</p>\n<strong>Debug</strong>\n<p><code>!memdump</code> | <code>!md</code></p>\n<p>Dump the raw memory of the current state.</p>\n<p>Attempts to dump the raw memory of the machine state after the last instruction of the REPL contract&#x27;s <code>run</code> function has finished executing.</p>\n<p><code>!stackdump</code> | <code>!sd</code></p>\n<p>Dump the raw stack of the current state.</p>\n<p>Attempts to dump the raw stack of the machine state after the last instruction of the REPL contract&#x27;s <code>run</code> function has finished executing.</p>\n<p><code>!rawstack &lt;var&gt;</code> | <code>!rs &lt;var&gt;</code></p>\n<p>Display the raw value of a variable&#x27;s stack allocation. For variables that are &gt; 32 bytes in length, this will display their memory pointer.</p>\n<p>This command is useful when you want to view the full raw stack allocation for a variable that is less than 32 bytes in length.</p>\n<p>Example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">➜</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> address</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> addr</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">➜</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> assembly</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">    addr</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> :=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> not</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">➜</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> addr</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Type:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> address</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">└</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Data:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0xffffffffffffffffffffffffffffffffffffffff</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">➜</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> !rs</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> addr</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Type:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> bytes32</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">└</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Data:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">➜</span></span></code></pre>","isPage":false,"text":"\nWelcome to Chisel! Type `!help` to show available commands.\n⚒️ Chisel help\n=============\nGeneral\n\t!help | !h - Display all commands\n\t!quit | !q - Quit Chisel\n\t!exec &lt;command&gt; [args] | !e &lt;command&gt; [args] - Execute a shell command and print the output\n\nSession\n\t!clear | !c - Clear current session source\n\t!source | !so - Display the source code of the current session\n\t!save [id] | !s [id] - Save the current session to cache\n\t!load &lt;id&gt; | !l &lt;id&gt; - Load a previous session ID from cache\n\t!list | !ls - List all cached sessions\n\t!clearcache | !cc - Clear the chisel cache of all stored sessions\n\t!export | !ex - Export the current session source to a script file\n\t!fetch &lt;addr&gt; &lt;name&gt; | !fe &lt;addr&gt; &lt;name&gt; - Fetch the interface of a verified contract on Etherscan\n\t!edit - Open the current session in an editor\n\nEnvironment\n\t!fork &lt;url&gt; | !f &lt;url&gt; - Fork an RPC for the current session. Supply 0 arguments to return to a local network\n\t!traces | !t - Enable / disable traces for the current session\n\t!calldata [data] | !cd [data] - Set calldata (`msg.data`) for the current session (appended after function selector). Clears it if no argument provided.\n\nDebug\n\t!memdump | !md - Dump the raw memory of the current state\n\t!stackdump | !sd - Dump the raw stack of the current state\n\t!rawstack &lt;var&gt; | !rs &lt;var&gt; - Display the raw value of a variable&#x27;s stack allocation. For variables that are &gt; 32 bytes in length, this will display their memory pointer.\nGeneral\n!help | !h\nDisplay all commands.\n!quit | !q\nQuit Chisel.\n!exec &lt;command&gt; [args] | !e &lt;command&gt; [args]\nExecute a shell command and print the output.\nExample:\n➜ !e ls\nCHANGELOG.md\nLICENSE\nREADME.md\nTESTS.md\nartifacts\ncache\ncontracts\ncrytic-export\ndeploy\ndeploy-config\ndeployments\ndist\nechidna.yaml\nforge-artifacts\nfoundry.toml\nhardhat.config.ts\nlayout-lock.json\nnode_modules\npackage.json\nscripts\nslither.config.json\nslither.db.json\nsrc\ntasks\ntest-case-generator\ntsconfig.build.json\ntsconfig.build.tsbuildinfo\ntsconfig.json\nSession\n!clear | !c\nClear current session source.\nUnder the hood, each Chisel session has an underlying contract that is altered as you input statements. This command clears this contract and resets your session to the default state.\n!source | !so\nDisplay the source code of the current session.\nAs mentioned above, each Chisel session has an underlying contract. This command will display the source code of this contract.\n!save [id] | !s [id]\nSave the current session to cache.\nChisel allows for caching sessions, which can be very useful if you are testing more complex logic in Chisel or if you want to return to a session at a later time. All cached Chisel sessions are stored in ~/.foundry/cache/chisel.\nIf an id argument is not supplied, Chisel will automatically assign a numerical ID to the session you are saving.\n!load &lt;id&gt; | !l &lt;id&gt;\nLoad a previous session ID from cache.\nThis command will load a previously cached session from the cache. Along with the session&#x27;s source, all environment settings will also be loaded. The id argument must correspond with an existing cached session in the ~/.foundry/cache/chisel directory.\n!list | !ls\nList all cached sessions.\nThis command will display all cached chisel sessions within the ~/.foundry/cache/chisel directory.\n!clearcache | !cc\nClear the chisel cache of all stored sessions.\nDeletes all cache files within the ~/.foundry/cache/chisel directory. These sessions are unrecoverable, so use this command with care.\n!export | !ex\nExport the current session source to a script file.\nIf chisel was executed from the root directory of a foundry project, it is possible to export your current session to a foundry script in the scripts dir of your project.\n!fetch &lt;addr&gt; &lt;name&gt; | !fe &lt;addr&gt; &lt;name&gt;\nFetch the interface of a verified contract on Etherscan.\nThis command will attempt to parse the interface of a verified contract @ &lt;addr&gt; from the Etherscan API. If successful, the interface will be inserted into the session source with the name &lt;name&gt;.\nAt the moment, only interfaces of verified contracts on Ethereum mainnet can be fetched. In the future, Chisel will support fetching interfaces from multiple Etherscan-supported chains.\n!edit\nOpen the current session&#x27;s run() function in an editor.\nchisel will use the editor defined in the $EDITOR environment variable.\nEnvironment\n!fork &lt;url&gt; | !f &lt;url&gt;\nFork an RPC for the current session. Supply 0 arguments to return to a local network.\nAttempts to fork the state of the provided RPC. If no URL is provided, returns to using a blank, local devnet state.\n!traces | !t\nEnable / disable traces for the current session.\nWhen tracing is enabled, foundry-style call tracing and logs will be printed after each statement is inserted.\nDebug\n!memdump | !md\nDump the raw memory of the current state.\nAttempts to dump the raw memory of the machine state after the last instruction of the REPL contract&#x27;s run function has finished executing.\n!stackdump | !sd\nDump the raw stack of the current state.\nAttempts to dump the raw stack of the machine state after the last instruction of the REPL contract&#x27;s run function has finished executing.\n!rawstack &lt;var&gt; | !rs &lt;var&gt;\nDisplay the raw value of a variable&#x27;s stack allocation. For variables that are &gt; 32 bytes in length, this will display their memory pointer.\nThis command is useful when you want to view the full raw stack allocation for a variable that is less than 32 bytes in length.\nExample:\n➜ address addr\n➜ assembly {\n    addr := not(0)\n}\n➜ addr\nType: address\n└ Data: 0xffffffffffffffffffffffffffffffffffffffff\n➜ !rs addr\nType: bytes32\n└ Data: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n➜","title":"Available Commands","titles":[null,"chisel","Usage"]},"36":{"href":"/forge/debugger#debugger","html":"\n<p>Forge ships with an interactive debugger.</p>\n<p>The debugger is accessible on <a href=\"/forge/reference/forge-test\"><code>forge test</code></a>, on <a href=\"/forge/reference/forge-script\"><code>forge script</code></a> and on <a href=\"/cast/reference/cast-run\"><code>cast run</code></a>. You can only select a single function or a single transaction to debug at the time.</p>\n<p>Using <code>forge test</code> (or <code>forge script</code>):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --debug</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --match-test</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;&lt;REGEX&gt;&quot;</span></span></code></pre>\n<p>Where <code>&lt;REGEX&gt;</code> is the function signature of the file you want to debug. For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --debug</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --match-test</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;test_Increment&quot;</span></span></code></pre>\n<p>If the matching test is a fuzz test, the debugger will open the first failing fuzz scenario, or the last successful one, whichever comes first. For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --debug</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --match-test</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;testFuzz_SetNumber&quot;</span></span></code></pre>\n<p>Using <code>cast run</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --debug</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  0xd15e0237413d7b824b784e1bbc3926e52f4726e5e5af30418803b8b327b4f8ca</span></span></code></pre>\n","isPage":true,"text":"\nForge ships with an interactive debugger.\nThe debugger is accessible on forge test, on forge script and on cast run. You can only select a single function or a single transaction to debug at the time.\nUsing forge test (or forge script):\nforge test --debug --match-test &quot;&lt;REGEX&gt;&quot;\nWhere &lt;REGEX&gt; is the function signature of the file you want to debug. For example:\nforge test --debug --match-test &quot;test_Increment&quot;\nIf the matching test is a fuzz test, the debugger will open the first failing fuzz scenario, or the last successful one, whichever comes first. For example:\nforge test --debug --match-test &quot;testFuzz_SetNumber&quot;\nUsing cast run:\ncast run --debug \\\n  0xd15e0237413d7b824b784e1bbc3926e52f4726e5e5af30418803b8b327b4f8ca\n","title":"Debugger","titles":[null]},"37":{"href":"/forge/debugger#debugger-layout","html":"\n<p><img src=\"/debugger.png\" alt=\"An image of the debugger UI\"/></p>\n<p>When the debugger is run, you are presented with a terminal divided into four quadrants:</p>\n<ul>\n<li><strong>Quadrant 1</strong>: The opcodes in the debugging session, with the current opcode highlighted. Additionally, the address of the current account, the program counter and the accumulated gas usage is also displayed</li>\n<li><strong>Quadrant 2</strong>: The current stack, as well as the size of the stack</li>\n<li><strong>Quadrant 3</strong>: The source view</li>\n<li><strong>Quadrant 4</strong>: The current memory of the EVM</li>\n</ul>\n<p>As you step through your code, you will notice that the words in the stack and memory sometimes change color.</p>\n<p>For the memory:</p>\n<ul>\n<li><strong>Red words</strong> are about to be written to by the current opcode</li>\n<li><strong>Green words</strong> were written to by the previous opcode</li>\n<li><strong>Cyan words</strong> are being read by the current opcode</li>\n</ul>\n<p>For the stack, <strong>cyan words</strong> are either being read or popped by the current opcode.</p>\n<blockquote>\n<p>⚠️ <strong>Note</strong></p>\n<p>In most test frameworks, the first test assertion to fail is the one reported.\nIn foundry, the last test assertion to fail (that comes from DSTest or cheatcodes) is the one to be reported.</p>\n</blockquote>\n","isPage":false,"text":"\n\nWhen the debugger is run, you are presented with a terminal divided into four quadrants:\n\nQuadrant 1: The opcodes in the debugging session, with the current opcode highlighted. Additionally, the address of the current account, the program counter and the accumulated gas usage is also displayed\nQuadrant 2: The current stack, as well as the size of the stack\nQuadrant 3: The source view\nQuadrant 4: The current memory of the EVM\n\nAs you step through your code, you will notice that the words in the stack and memory sometimes change color.\nFor the memory:\n\nRed words are about to be written to by the current opcode\nGreen words were written to by the previous opcode\nCyan words are being read by the current opcode\n\nFor the stack, cyan words are either being read or popped by the current opcode.\n\n⚠️ Note\nIn most test frameworks, the first test assertion to fail is the one reported.\nIn foundry, the last test assertion to fail (that comes from DSTest or cheatcodes) is the one to be reported.\n\n","title":"Debugger layout","titles":[null,"Debugger"]},"38":{"href":"/forge/debugger#navigating","html":"\n","isPage":false,"text":"\n","title":"Navigating","titles":[null,"Debugger"]},"39":{"href":"/forge/debugger#general","html":"\n<ul>\n<li><kbd>q</kbd>: Quit the debugger</li>\n<li><kbd>h</kbd>: Show help</li>\n</ul>\n","isPage":false,"text":"\n\nq: Quit the debugger\nh: Show help\n\n","title":"General","titles":[null,"Debugger"]},"40":{"href":"/forge/debugger#navigating-calls","html":"\n<ul>\n<li><kbd>0-9</kbd> + <kbd>k</kbd>: Step a number of times backwards (alternatively scroll up with your mouse)</li>\n<li><kbd>0-9</kbd> + <kbd>j</kbd>: Step a number of times forwards (alternatively scroll down with your mouse)</li>\n<li><kbd>g</kbd>: Move to the beginning of the transaction</li>\n<li><kbd>G</kbd>: Move to the end of the transaction</li>\n<li><kbd>c</kbd>: Move to the previous call-type instruction (i.e. <a href=\"https://www.evm.codes/#f1\"><code>CALL</code></a>, <a href=\"https://www.evm.codes/#fa\"><code>STATICCALL</code></a>, <a href=\"https://www.evm.codes/#f4\"><code>DELEGATECALL</code></a>, and <a href=\"https://www.evm.codes/#f2\"><code>CALLCODE</code></a>).</li>\n<li><kbd>C</kbd>: Move to the next call-type instruction</li>\n<li><kbd>a</kbd>: Move to the previous <a href=\"https://www.evm.codes/#f1\"><code>JUMP</code></a> or <a href=\"https://www.evm.codes/#57\"><code>JUMPI</code></a> instruction</li>\n<li><kbd>s</kbd>: Move to the next <a href=\"https://www.evm.codes/#5b\"><code>JUMPDEST</code></a> instruction</li>\n<li><kbd>&#x27;</kbd> + <kbd>a-z</kbd>: Move to <code>&lt;char&gt;</code> breakpoint set by a <a href=\"/reference/cheatcodes/breakpoint\"><code>vm.breakpoint</code></a> cheatcode</li>\n</ul>\n","isPage":false,"text":"\n\n0-9 + k: Step a number of times backwards (alternatively scroll up with your mouse)\n0-9 + j: Step a number of times forwards (alternatively scroll down with your mouse)\ng: Move to the beginning of the transaction\nG: Move to the end of the transaction\nc: Move to the previous call-type instruction (i.e. CALL, STATICCALL, DELEGATECALL, and CALLCODE).\nC: Move to the next call-type instruction\na: Move to the previous JUMP or JUMPI instruction\ns: Move to the next JUMPDEST instruction\n&#x27; + a-z: Move to &lt;char&gt; breakpoint set by a vm.breakpoint cheatcode\n\n","title":"Navigating calls","titles":[null,"Debugger"]},"41":{"href":"/forge/debugger#navigating-memory","html":"\n<ul>\n<li><kbd>Ctrl</kbd> + <kbd>j</kbd>: Scroll the memory view down</li>\n<li><kbd>Ctrl</kbd> + <kbd>k</kbd>: Scroll the memory view up</li>\n<li><kbd>m</kbd>: Show memory as UTF8</li>\n</ul>\n","isPage":false,"text":"\n\nCtrl + j: Scroll the memory view down\nCtrl + k: Scroll the memory view up\nm: Show memory as UTF8\n\n","title":"Navigating memory","titles":[null,"Debugger"]},"42":{"href":"/forge/debugger#navigating-the-stack","html":"\n<ul>\n<li><kbd>J</kbd>: Scroll the stack view down</li>\n<li><kbd>K</kbd>: Scroll the stack view up</li>\n<li><kbd>t</kbd>: Show labels on the stack to see what items the current op will consume</li>\n</ul>","isPage":false,"text":"\n\nJ: Scroll the stack view down\nK: Scroll the stack view up\nt: Show labels on the stack to see what items the current op will consume\n","title":"Navigating the stack","titles":[null,"Debugger"]},"43":{"href":"/forge/deploying#deploying","html":"\n<p>Forge can deploy smart contracts to a given network with the <a href=\"/forge/reference/forge-create\"><code>forge create</code></a> command.</p>\n<p>Forge CLI can deploy only one contract at a time.</p>\n<p>For deploying and verifying multiple smart contracts on multiple chains in one go, Forge&#x27;s <a href=\"/guides/scripting-with-solidity\">Solidity scripting</a> would be the more efficient approach.</p>\n<p>To deploy a contract, you must provide a RPC URL (env: <code>ETH_RPC_URL</code>) and the private key of the account that will deploy the contract. Additionally the <code>--broadcast</code> flag is responsible for publishing your transaction to the network as a safety precaution and mirrors the <code>--broadcast</code> flag of <code>forge script</code>. If you do not pass the <code>--broadcast</code> flag your transaction is a dry-run.</p>\n<p>To deploy <code>MyContract</code> to a network:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> create</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> src/MyContract.sol:MyContract</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --rpc-url</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">YOUR_RPC_UR</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">L</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --private-key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">YOUR_PRIVATE_KE</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Y</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --broadcast</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">compiling...</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">success.</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Deployer:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 0xa735b3c25f...</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Deployed</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> to:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 0x4054415432...</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Transaction</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> hash:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 0x6b4e0ff93a...</span></span></code></pre>\n<p>Solidity files may contain multiple contracts. <code>:MyContract</code> above specifies which contract to deploy from the <code>src/MyContract.sol</code> file.</p>\n<p>Use the <code>--constructor-args</code> flag to pass arguments to the constructor:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// SPDX-License-Identifier: UNLICENSED</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ^0.8.0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ERC20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;solmate/tokens/ERC20.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyToken</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ERC20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    constructor</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> symbol</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint8</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> initialSupply</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ) </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ERC20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(name, symbol, decimals) {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        _mint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">msg.sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, initialSupply);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Additionally, we can tell Forge to verify our contract on Etherscan, Sourcify or Blockscout, if the network is supported, by passing <code>--verify</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> create</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> src/MyToken.sol:MyToken</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --rpc-url</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">YOUR_RPC_UR</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">L</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --private-key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">YOUR_PRIVATE_KE</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Y</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --broadcast</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --etherscan-api-key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">YOUR_ETHERSCAN_API_KE</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Y</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --verify</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --constructor-args</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;ForgeUSD&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;FUSD&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 18</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1000000000000000000000</span></span></code></pre>\n","isPage":true,"text":"\nForge can deploy smart contracts to a given network with the forge create command.\nForge CLI can deploy only one contract at a time.\nFor deploying and verifying multiple smart contracts on multiple chains in one go, Forge&#x27;s Solidity scripting would be the more efficient approach.\nTo deploy a contract, you must provide a RPC URL (env: ETH_RPC_URL) and the private key of the account that will deploy the contract. Additionally the --broadcast flag is responsible for publishing your transaction to the network as a safety precaution and mirrors the --broadcast flag of forge script. If you do not pass the --broadcast flag your transaction is a dry-run.\nTo deploy MyContract to a network:\nforge create src/MyContract.sol:MyContract --rpc-url &lt;YOUR_RPC_URL&gt; --private-key &lt;YOUR_PRIVATE_KEY&gt; --broadcast\ncompiling...\nsuccess.\nDeployer: 0xa735b3c25f...\nDeployed to: 0x4054415432...\nTransaction hash: 0x6b4e0ff93a...\nSolidity files may contain multiple contracts. :MyContract above specifies which contract to deploy from the src/MyContract.sol file.\nUse the --constructor-args flag to pass arguments to the constructor:\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n \nimport {ERC20} from &quot;solmate/tokens/ERC20.sol&quot;;\n \ncontract MyToken is ERC20 {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        uint256 initialSupply\n    ) ERC20(name, symbol, decimals) {\n        _mint(msg.sender, initialSupply);\n    }\n}\nAdditionally, we can tell Forge to verify our contract on Etherscan, Sourcify or Blockscout, if the network is supported, by passing --verify.\nforge create src/MyToken.sol:MyToken --rpc-url &lt;YOUR_RPC_URL&gt; \\\n    --private-key &lt;YOUR_PRIVATE_KEY&gt; \\\n    --broadcast \\\n    --etherscan-api-key &lt;YOUR_ETHERSCAN_API_KEY&gt; \\\n    --verify \\\n    --constructor-args &quot;ForgeUSD&quot; &quot;FUSD&quot; 18 1000000000000000000000\n","title":"Deploying","titles":[null]},"44":{"href":"/forge/deploying#multi-chain-deployments","html":"\n<p>Deploying and verifying multiple smart contracts on multiple chains in one go is possible by using forking cheatcodes.</p>\n<p>For example, if you want to deploy a <code>Counter</code> contract on Sepolia Mainnet and Base Sepolia using a single command, you can configure RPC endpoints and verifiers as:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">rpc_endpoints</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sepolia = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;${SEPOLIA_URL}&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">base-sepolia = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;${BASE_SEPOLIA_URL}&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">etherscan</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sepolia = { key = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;${ETHERSCAN_API_KEY}&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">base-sepolia = { key = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;${ETHERSCAN_API_KEY}&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span></code></pre>\n<p>and create a <code>CounterScript</code> script as:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CounterScript</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createSelectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;sepolia&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Counter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createSelectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;base-sepolia&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Counter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>When running:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> script</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> script/CounterScript.s.sol</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --slow</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --multi</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --broadcast</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --private-key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">YOUR_PRIVATE_KE</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Y</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --verify</span></span></code></pre>\n<p>The script will create the Sepolia Mainnet fork (<code>vm.createSelectFork(&quot;sepolia&quot;)</code>), deploy and verify the <code>Counter</code> contract, and then move to Base Sepolia chain deployment (<code>vm.createSelectFork(&quot;base-sepolia&quot;)</code>).</p>\n<p>For a list of all available forking cheatcodes see <a href=\"/reference/cheatcodes/forking\"><code>forking</code></a> docs.</p>\n","isPage":false,"text":"\nDeploying and verifying multiple smart contracts on multiple chains in one go is possible by using forking cheatcodes.\nFor example, if you want to deploy a Counter contract on Sepolia Mainnet and Base Sepolia using a single command, you can configure RPC endpoints and verifiers as:\n[rpc_endpoints]\nsepolia = &quot;${SEPOLIA_URL}&quot;\nbase-sepolia = &quot;${BASE_SEPOLIA_URL}&quot;\n \n[etherscan]\nsepolia = { key = &quot;${ETHERSCAN_API_KEY}&quot; }\nbase-sepolia = { key = &quot;${ETHERSCAN_API_KEY}&quot; }\nand create a CounterScript script as:\ncontract CounterScript is Script {\n    function run() public {\n        vm.createSelectFork(&quot;sepolia&quot;);\n        vm.startBroadcast();\n        new Counter();\n        vm.stopBroadcast();\n \n        vm.createSelectFork(&quot;base-sepolia&quot;);\n        vm.startBroadcast();\n        new Counter();\n        vm.stopBroadcast();\n    }\n}\nWhen running:\nforge script script/CounterScript.s.sol --slow --multi --broadcast --private-key &lt;YOUR_PRIVATE_KEY&gt; --verify\nThe script will create the Sepolia Mainnet fork (vm.createSelectFork(&quot;sepolia&quot;)), deploy and verify the Counter contract, and then move to Base Sepolia chain deployment (vm.createSelectFork(&quot;base-sepolia&quot;)).\nFor a list of all available forking cheatcodes see forking docs.\n","title":"Multi-chain deployments","titles":[null]},"45":{"href":"/forge/deploying#verifying-a-pre-existing-contract","html":"\n<p>It is recommended to use the <code>--verify</code> flag with <code>forge create</code> to automatically verify the contract on explorer after a deployment.\nNote that for Etherscan <a href=\"https://docs.etherscan.io/getting-started/viewing-api-usage-statistics\"><code>ETHERSCAN_API_KEY</code></a> must be set.</p>\n<p>If you are verifying an already deployed contract, read on.</p>\n<p>You can verify a contract on Etherscan, Sourcify, oklink or Blockscout with the <a href=\"/forge/reference/forge-verify-contract\"><code>forge verify-contract</code></a> command.</p>\n<p>You must provide:</p>\n<ul>\n<li>the contract address</li>\n<li>the contract name or the path to the contract <code>&lt;path&gt;:&lt;contractname&gt;</code></li>\n<li>your Etherscan API key (env: <code>ETHERSCAN_API_KEY</code>) (if verifying on Etherscan or similar explorers e.g. BscScan / BaseScan / Polygonscan).</li>\n</ul>\n<p>Moreover, you may need to provide:</p>\n<ul>\n<li>the constructor arguments in the ABI-encoded format, if there are any</li>\n<li>external linked libraries in <code>src_file_path:library_name:library_address</code> format, if there are any</li>\n<li><a href=\"https://etherscan.io/solcversions\">compiler version</a> used for build, with 8 hex digits from the commit version prefix (the commit will usually not be a nightly build). It is auto-detected if not specified.</li>\n<li>the number of optimizations, if the Solidity optimizer was activated. It is auto-detected if not specified.</li>\n<li>the <a href=\"https://evm-chainlist.netlify.app/\">chain ID</a>, if the contract is not on Ethereum Mainnet</li>\n</ul>\n<p>Let&#x27;s say you want to verify <code>MyToken</code> (see above). You set the <a href=\"/config/reference/solidity-compiler#optimizer_runs\">number of optimizations</a> to 1 million, compiled it with v0.8.10, and deployed it, as shown above, to the Sepolia testnet (chain ID: 11155111). Note that <code>--num-of-optimizations</code> will default to 0 if not set on verification, while it defaults to 200 if not set on deployment, so make sure you pass <code>--num-of-optimizations 200</code> if you left the default compilation settings.</p>\n<p>Here&#x27;s how to verify it:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> verify-contract</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --chain-id</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 11155111</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --num-of-optimizations</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1000000</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --watch</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --constructor-args</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> abi-encode</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;constructor(string,string,uint256,uint256)&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;ForgeUSD&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;FUSD&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 18</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1000000000000000000000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --verifier</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> etherscan</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --etherscan-api-key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">your_etherscan_api_ke</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">y</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    --compiler-version</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> v0.8.10+commit.fc410830</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">CONTRACT_ADDRES</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">S</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    src/MyToken.sol:MyToken</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Submitted</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> contract</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> for</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> verification:</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">                Response:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> `</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">OK</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">                GUID:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> `</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">a6yrbjp5prvakia6bqp5qdacczyfhkyi5j1r6qbds1js41ak1a</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">                url:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://sepolia.etherscan.io//address/0x6a54…3a4c#code</span></span></code></pre>\n<blockquote>\n<p>ℹ️ <strong>Note:</strong></p>\n<p>External libraries can be specified with <code>--libraries</code> argument, one for each linked library. For example, to verify a contract with two linked libraries (<code>Maths</code> and <code>Utils</code>) the <code>forge verify-command</code> should be run with</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">--libraries</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> src/lib/Maths.sol:Maths:</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">maths_lib_addres</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">s</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">--libraries </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">src/lib/Utils.sol:Utils:</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">utils_lib_addres</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">s</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span></code></pre>\n<p>arguments.</p>\n</blockquote>\n<p>It is recommended to use the <a href=\"/forge/reference/forge-verify-contract#verify-contract-options\"><code>--watch</code></a> flag along\nwith <code>verify-contract</code> command in order to poll for the verification result.</p>\n<p>If the <code>--watch</code> flag was not supplied, you can check\nthe verification status with the <a href=\"/forge/reference/forge-verify-check\"><code>forge verify-check</code></a> command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> verify-check</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --chain-id</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 11155111</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">GUI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">D</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">YOUR_ETHERSCAN_API_KE</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Y</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Contract</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> successfully</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> verified.</span></span></code></pre>\n<br/>\n<blockquote>\n<p>💡 <strong>Tip</strong></p>\n<p>Use Cast&#x27;s <a href=\"/cast/reference/cast-abi-encode\"><code>abi-encode</code></a> to ABI-encode arguments.</p>\n<p>In this example, we ran <code>cast abi-encode &quot;constructor(string,string,uint8,uint256)&quot; &quot;ForgeUSD&quot; &quot;FUSD&quot; 18 1000000000000000000000</code> to ABI-encode the arguments.</p>\n</blockquote>\n<br/>\n","isPage":false,"text":"\nIt is recommended to use the --verify flag with forge create to automatically verify the contract on explorer after a deployment.\nNote that for Etherscan ETHERSCAN_API_KEY must be set.\nIf you are verifying an already deployed contract, read on.\nYou can verify a contract on Etherscan, Sourcify, oklink or Blockscout with the forge verify-contract command.\nYou must provide:\n\nthe contract address\nthe contract name or the path to the contract &lt;path&gt;:&lt;contractname&gt;\nyour Etherscan API key (env: ETHERSCAN_API_KEY) (if verifying on Etherscan or similar explorers e.g. BscScan / BaseScan / Polygonscan).\n\nMoreover, you may need to provide:\n\nthe constructor arguments in the ABI-encoded format, if there are any\nexternal linked libraries in src_file_path:library_name:library_address format, if there are any\ncompiler version used for build, with 8 hex digits from the commit version prefix (the commit will usually not be a nightly build). It is auto-detected if not specified.\nthe number of optimizations, if the Solidity optimizer was activated. It is auto-detected if not specified.\nthe chain ID, if the contract is not on Ethereum Mainnet\n\nLet&#x27;s say you want to verify MyToken (see above). You set the number of optimizations to 1 million, compiled it with v0.8.10, and deployed it, as shown above, to the Sepolia testnet (chain ID: 11155111). Note that --num-of-optimizations will default to 0 if not set on verification, while it defaults to 200 if not set on deployment, so make sure you pass --num-of-optimizations 200 if you left the default compilation settings.\nHere&#x27;s how to verify it:\nforge verify-contract \\\n    --chain-id 11155111 \\\n    --num-of-optimizations 1000000 \\\n    --watch \\\n    --constructor-args $(cast abi-encode &quot;constructor(string,string,uint256,uint256)&quot; &quot;ForgeUSD&quot; &quot;FUSD&quot; 18 1000000000000000000000) \\\n    --verifier etherscan \\\n    --etherscan-api-key &lt;your_etherscan_api_key&gt; \\\n    --compiler-version v0.8.10+commit.fc410830 \\\n    &lt;CONTRACT_ADDRESS&gt; \\\n    src/MyToken.sol:MyToken\n \nSubmitted contract for verification:\n                Response: `OK`\n                GUID: `a6yrbjp5prvakia6bqp5qdacczyfhkyi5j1r6qbds1js41ak1a`\n                url: https://sepolia.etherscan.io//address/0x6a54…3a4c#code\n\nℹ️ Note:\nExternal libraries can be specified with --libraries argument, one for each linked library. For example, to verify a contract with two linked libraries (Maths and Utils) the forge verify-command should be run with\n--libraries src/lib/Maths.sol:Maths:&lt;maths_lib_address&gt; \\\n--libraries src/lib/Utils.sol:Utils:&lt;utils_lib_address&gt;\narguments.\n\nIt is recommended to use the --watch flag along\nwith verify-contract command in order to poll for the verification result.\nIf the --watch flag was not supplied, you can check\nthe verification status with the forge verify-check command:\nforge verify-check --chain-id 11155111 &lt;GUID&gt; &lt;YOUR_ETHERSCAN_API_KEY&gt;\nContract successfully verified.\n\n\n💡 Tip\nUse Cast&#x27;s abi-encode to ABI-encode arguments.\nIn this example, we ran cast abi-encode &quot;constructor(string,string,uint8,uint256)&quot; &quot;ForgeUSD&quot; &quot;FUSD&quot; 18 1000000000000000000000 to ABI-encode the arguments.\n\n\n","title":"Verifying a pre-existing contract","titles":[null]},"46":{"href":"/forge/deploying#troubleshooting","html":"\n","isPage":false,"text":"\n","title":"Troubleshooting","titles":[null,"Verifying a pre-existing contract"]},"47":{"href":"/forge/deploying#missing-hex-prefix-0x-for-hex-string","html":"\n<p>Make sure the private key string begins with <code>0x</code>.</p>\n","isPage":false,"text":"\nMake sure the private key string begins with 0x.\n","title":"missing hex prefix (&quot;0x&quot;) for hex string","titles":[null,"Verifying a pre-existing contract","Troubleshooting",null]},"48":{"href":"/forge/deploying#eip-1559-not-activated","html":"\n<p>EIP-1559 is not supported or not activated on the RPC server. Pass the <code>--legacy</code> flag to use legacy transactions instead of the EIP-1559 ones. If you do development in a local environment, you can use Hardhat instead of Ganache.</p>\n","isPage":false,"text":"\nEIP-1559 is not supported or not activated on the RPC server. Pass the --legacy flag to use legacy transactions instead of the EIP-1559 ones. If you do development in a local environment, you can use Hardhat instead of Ganache.\n","title":"EIP-1559 not activated","titles":[null,"Verifying a pre-existing contract","Troubleshooting",null]},"49":{"href":"/forge/deploying#failed-to-parse-tokens","html":"\n<p>Make sure the passed arguments are of correct type.</p>\n","isPage":false,"text":"\nMake sure the passed arguments are of correct type.\n","title":"Failed to parse tokens","titles":[null,"Verifying a pre-existing contract","Troubleshooting",null]},"50":{"href":"/forge/deploying#signature-error","html":"\n<p>Make sure the private key is correct.</p>\n","isPage":false,"text":"\nMake sure the private key is correct.\n","title":"Signature error","titles":[null,"Verifying a pre-existing contract","Troubleshooting",null]},"51":{"href":"/forge/deploying#compiler-version-commit-for-verify","html":"\n<p>If you want to check the exact commit you are running locally, try: <code> ~/.svm/0.x.y/solc-0.x.y --version</code> where <code>x</code> and\n<code>y</code> are major and minor version numbers respectively. The output of this will be something like:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">solc,</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> the</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> solidity</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> compiler</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> commandline</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> interface</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Version:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 0.8.12+commit.f00d7308.Darwin.appleclang</span></span></code></pre>\n<p>Note: You cannot just paste the entire string &quot;0.8.12+commit.f00d7308.Darwin.appleclang&quot; as the argument for the compiler-version. But you can use the 8 hex digits of the commit to look up exactly what you should copy and paste from <a href=\"https://etherscan.io/solcversions\">compiler version</a>.</p>\n","isPage":false,"text":"\nIf you want to check the exact commit you are running locally, try:  ~/.svm/0.x.y/solc-0.x.y --version where x and\ny are major and minor version numbers respectively. The output of this will be something like:\nsolc, the solidity compiler commandline interface\nVersion: 0.8.12+commit.f00d7308.Darwin.appleclang\nNote: You cannot just paste the entire string &quot;0.8.12+commit.f00d7308.Darwin.appleclang&quot; as the argument for the compiler-version. But you can use the 8 hex digits of the commit to look up exactly what you should copy and paste from compiler version.\n","title":"Compiler version commit for verify","titles":[null,"Verifying a pre-existing contract","Troubleshooting",null]},"52":{"href":"/forge/deploying#invalid-api-key","html":"\n<p>With <a href=\"https://docs.etherscan.io/etherscan-v2\">Etherscan API V2</a>, only Etherscan keys are valid, this can be used for similar explorers eg BscScan/BaseScan/Polygonscan. Legacy keys from other explorers have been deprecated.</p>\n","isPage":false,"text":"\nWith Etherscan API V2, only Etherscan keys are valid, this can be used for similar explorers eg BscScan/BaseScan/Polygonscan. Legacy keys from other explorers have been deprecated.\n","title":"Invalid API Key","titles":[null,"Verifying a pre-existing contract","Troubleshooting",null]},"53":{"href":"/forge/deploying#known-issues","html":"\n","isPage":false,"text":"\n","title":"Known Issues","titles":[null,"Verifying a pre-existing contract"]},"54":{"href":"/forge/deploying#verifying-contracts-with-ambiguous-import-paths","html":"\n<p>Forge passes source directories (<code>src</code>, <code>lib</code>, <code>test</code> etc) as <code>--include-path</code> arguments to the compiler.\nThis means that given the following project tree</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>|- src</span></span>\n<span class=\"line\"><span>|-- folder</span></span>\n<span class=\"line\"><span>|--- Contract.sol</span></span>\n<span class=\"line\"><span>|--- IContract.sol</span></span></code></pre>\n<p>it is possible to import <code>IContract</code> inside the <code>Contract.sol</code> using <code>folder/IContract.sol</code> import path.</p>\n<p>Etherscan is not able to recompile such sources. Consider changing the imports to use relative import path.</p>","isPage":false,"text":"\nForge passes source directories (src, lib, test etc) as --include-path arguments to the compiler.\nThis means that given the following project tree\n|- src\n|-- folder\n|--- Contract.sol\n|--- IContract.sol\nit is possible to import IContract inside the Contract.sol using folder/IContract.sol import path.\nEtherscan is not able to recompile such sources. Consider changing the imports to use relative import path.","title":"Verifying Contracts With Ambiguous Import Paths","titles":[null,"Verifying a pre-existing contract","Known Issues"]},"55":{"href":"/forge/overview#forge-overview","html":"\n<p>Forge is a command-line tool that ships with Foundry. Forge tests, builds, and deploys your smart contracts.</p>\n<p>Forge is part of the Foundry suite and is installed alongside <code>cast</code>, <code>chisel</code>, and <code>anvil</code>. If you haven&#x27;t installed Foundry\nyet, see <a href=\"/introduction/installation\">Foundry installation</a>.</p>\n","isPage":true,"text":"\nForge is a command-line tool that ships with Foundry. Forge tests, builds, and deploys your smart contracts.\nForge is part of the Foundry suite and is installed alongside cast, chisel, and anvil. If you haven&#x27;t installed Foundry\nyet, see Foundry installation.\n","title":"Forge Overview","titles":[null]},"56":{"href":"/forge/overview#getting-started","html":"\n<p>The best way to understand Forge is to simply try it (in less than 30 seconds!).</p>\n<p>First, let&#x27;s initialize a new <code>counter</code> example repository:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> init</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> counter</span></span></code></pre>\n<p>Next <code>cd</code> into <code>counter</code> and build :</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">[⠊] Compiling...</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">[⠔] Compiling 27 files with Solc 0.8.28</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">[⠒] Solc 0.8.28 finished in 452.13ms</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">Compiler run successful!</span></span></code></pre>\n<p>Let&#x27;s <a href=\"https://book.getfoundry.sh/forge/tests#tests\">test</a> our contracts:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">[⠊] Compiling...</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">No files changed, compilation skipped</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">Ran 2 tests for test/Counter.t.sol:CounterTest</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">[PASS] testFuzz_SetNumber(uint256) (runs: 256, μ: 31121, ~: 31277)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">[PASS] test_Increment() (gas: 31293)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">Suite result: ok. 2 passed; 0 failed; 0 skipped; finished in 5.35ms (4.86ms CPU time)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">Ran 1 test suite in 5.91ms (5.35ms CPU time): 2 tests passed, 0 failed, 0 skipped (2 total tests)</span></span></code></pre>\n<p>Finally, let&#x27;s run our deployment script:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> script</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> script/Counter.s.sol</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">⠊</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] Compiling...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">No files changed, compilation skipped</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Script ran successfully.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Gas used: 109037</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">If you wish to simulate on-chain transactions pass a RPC URL.</span></span></code></pre>\n<aside data-callout=\"info\"><p>See the <a href=\"/forge/reference/overview\"><code>forge</code> Reference</a> for a complete overview of all the available subcommands.</p></aside>","isPage":false,"text":"\nThe best way to understand Forge is to simply try it (in less than 30 seconds!).\nFirst, let&#x27;s initialize a new counter example repository:\nforge init counter\nNext cd into counter and build :\nforge build\n[⠊] Compiling...\n[⠔] Compiling 27 files with Solc 0.8.28\n[⠒] Solc 0.8.28 finished in 452.13ms\nCompiler run successful!\nLet&#x27;s test our contracts:\nforge test\n[⠊] Compiling...\nNo files changed, compilation skipped\n \nRan 2 tests for test/Counter.t.sol:CounterTest\n[PASS] testFuzz_SetNumber(uint256) (runs: 256, μ: 31121, ~: 31277)\n[PASS] test_Increment() (gas: 31293)\nSuite result: ok. 2 passed; 0 failed; 0 skipped; finished in 5.35ms (4.86ms CPU time)\n \nRan 1 test suite in 5.91ms (5.35ms CPU time): 2 tests passed, 0 failed, 0 skipped (2 total tests)\nFinally, let&#x27;s run our deployment script:\nforge script script/Counter.s.sol\n[⠊] Compiling...\nNo files changed, compilation skipped\nScript ran successfully.\nGas used: 109037\n \nIf you wish to simulate on-chain transactions pass a RPC URL.\nSee the forge Reference for a complete overview of all the available subcommands.","title":"Getting started","titles":[null,"Forge Overview"]},"57":{"href":"/guides/deterministic-deployments-using-create2#deterministic-deployments-using-create2","html":"\n<p>Enshrined into the EVM as part of the <a href=\"https://ethereum.org/en/history/#constantinople\">Constantinople fork</a> of 2019, <code>CREATE2</code> is an opcode that started its journey as <a href=\"https://eips.ethereum.org/EIPS/eip-1014\">EIP-1014</a>.\n<code>CREATE2</code> allows you to deploy smart contracts to deterministic addresses, based on parameters controlled by the deployer.</p>\n<p>As a result, it&#x27;s often mentioned as enabling &quot;counterfactual&quot; deployments, where you can interact with an addresses that haven&#x27;t been created yet because <code>CREATE2</code> guarantees known code can be placed at that address.</p>\n<p>This is in contrast to the <code>CREATE</code> opcode, where the address of the deployed contract is a function of the deployer&#x27;s nonce.\nWith <code>CREATE2</code>, you can use the same deployer account to deploy contracts to the same address across multiple networks, even if the address has varying nonces.</p>\n<p>For the best user experience it is recommended to avoid having different addresses of the same deployment across different EVM chains.</p>\n","isPage":true,"text":"\nEnshrined into the EVM as part of the Constantinople fork of 2019, CREATE2 is an opcode that started its journey as EIP-1014.\nCREATE2 allows you to deploy smart contracts to deterministic addresses, based on parameters controlled by the deployer.\nAs a result, it&#x27;s often mentioned as enabling &quot;counterfactual&quot; deployments, where you can interact with an addresses that haven&#x27;t been created yet because CREATE2 guarantees known code can be placed at that address.\nThis is in contrast to the CREATE opcode, where the address of the deployed contract is a function of the deployer&#x27;s nonce.\nWith CREATE2, you can use the same deployer account to deploy contracts to the same address across multiple networks, even if the address has varying nonces.\nFor the best user experience it is recommended to avoid having different addresses of the same deployment across different EVM chains.\n","title":"Deterministic deployments using CREATE2","titles":[null]},"58":{"href":"/guides/deterministic-deployments-using-create2#getting-started","html":"\n<blockquote>\n<p>ℹ️ <strong>Note</strong></p>\n<p>This guide is intended to help you get started with configuring deterministic deployments using <code>CREATE2</code>.\nBy default, <code>new Counter{salt: salt}()</code> will use the deterministic deployer at <a href=\"https://github.com/Arachnid/deterministic-deployment-proxy\"><code>0x4e59b44847b379578588920ca78fbf26c0b4956c</code></a>. Note that the deployer may not be available on all EVM chains.\nA different deployer address can be configured by setting <code>create2_deployer</code> in <code>foundry.toml</code> or by using <code>--create2-deployer</code> argument.</p>\n</blockquote>\n","isPage":false,"text":"\n\nℹ️ Note\nThis guide is intended to help you get started with configuring deterministic deployments using CREATE2.\nBy default, new Counter{salt: salt}() will use the deterministic deployer at 0x4e59b44847b379578588920ca78fbf26c0b4956c. Note that the deployer may not be available on all EVM chains.\nA different deployer address can be configured by setting create2_deployer in foundry.toml or by using --create2-deployer argument.\n\n","title":"Getting started","titles":[null]},"59":{"href":"/guides/deterministic-deployments-using-create2#configuring-your-foundrytoml","html":"\n<p>In order to reliably deploy to deterministic addresses we will need to make sure our bytecode stays the same. To do so configure our <code>foundry.toml</code> as follows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">profile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">solc = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;&lt;SOLC_VERSION&gt;&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">evm_version = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;&lt;EVM_VERSION&gt;&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">bytecode_hash = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;none&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cbor_metadata = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span></code></pre>\n","isPage":false,"text":"\nIn order to reliably deploy to deterministic addresses we will need to make sure our bytecode stays the same. To do so configure our foundry.toml as follows:\n[profile.default]\nsolc = &quot;&lt;SOLC_VERSION&gt;&quot;\nevm_version = &quot;&lt;EVM_VERSION&gt;&quot;\nbytecode_hash = &quot;none&quot;\ncbor_metadata = false\n","title":"Configuring your foundry.toml","titles":[null]},"60":{"href":"/guides/deterministic-deployments-using-create2#solc-version","html":"\n<p>It is required to pin your <code>solc</code> (Solidity) version. It is generally recommended to use a recent version or, if preferred, the latest version.</p>\n","isPage":false,"text":"\nIt is required to pin your solc (Solidity) version. It is generally recommended to use a recent version or, if preferred, the latest version.\n","title":"Solc version","titles":[null,"Configuring your foundry.toml"]},"61":{"href":"/guides/deterministic-deployments-using-create2#evm-version","html":"\n<p>Next, configure your <code>evm_version</code>. It is generally recommended to use the most recent hardfork but depending on your deployment targets this may need to use an older hardfork due to opcode incompatibilities.</p>\n","isPage":false,"text":"\nNext, configure your evm_version. It is generally recommended to use the most recent hardfork but depending on your deployment targets this may need to use an older hardfork due to opcode incompatibilities.\n","title":"EVM version","titles":[null,"Configuring your foundry.toml"]},"62":{"href":"/guides/deterministic-deployments-using-create2#metadata-and-bytecode","html":"\n<p>By default the Solidity compiler appends the hash of the metadata file at end of the bytecode. This bytecode includes things like the compiler version and the ABI.</p>\n<p>Since the source file hashes are included in the metadata file, even if a single byte of source files changes, the metadata hash changes too. That means, if we can compile a contract with given source files and the bytecode + the appended metadata hash are exactly the same as an on-chain contract, we can be sure that this is a byte-by-byte match of the same source files and the same compilation settings.</p>\n<p>The metadata file may look something like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;compiler&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;version&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0.8.28+commit.7893614a&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;language&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Solidity&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;output&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;abi&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;inputs&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;stateMutability&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;nonpayable&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;function&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;increment&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;inputs&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;stateMutability&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;view&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;function&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;number&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;outputs&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">            &quot;internalType&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;uint256&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">            &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">            &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;uint256&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;inputs&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">            &quot;internalType&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;uint256&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">            &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;newNumber&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">            &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;uint256&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;stateMutability&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;nonpayable&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;function&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;setNumber&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;devdoc&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;kind&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;dev&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;methods&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {},</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;version&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;userdoc&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;kind&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;user&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;methods&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {},</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;version&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;settings&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;remappings&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;forge-std/=lib/forge-std/src/&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;optimizer&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;enabled&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;runs&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">200</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;metadata&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;bytecodeHash&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ipfs&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;compilationTarget&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;src/Counter.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Counter&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;evmVersion&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;cancun&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;libraries&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;sources&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;src/Counter.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;keccak256&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x09277f949d59a9521708c870dc39c2c434ad8f86a5472efda6a732ef728c0053&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;urls&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;bzz-raw://94cd5258357da018bf911aeda60ed9f5b130dce27445669ee200313cd3389200&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;dweb:/ipfs/QmNbEfWAqXCtfQpk6u7TpGa8sTHXFLpUz7uebz2FVbchSC&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      ],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;license&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;UNLICENSED&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;version&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Click <a href=\"https://playground.sourcify.dev/\">here</a> to learn more about the metadata file.</p>\n<p>By disabling the metadata as follows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">bytecode_hash = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;none&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cbor_metadata = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span></code></pre>\n<p>You are not including the metadata hash as part of the bytecode. This means that whilst your bytecode can now be deterministic you won&#x27;t be able to have a <a href=\"https://docs.sourcify.dev/docs/full-vs-partial-match/#full-perfect-matches\"><code>full match</code></a>, only a <a href=\"https://docs.sourcify.dev/docs/full-vs-partial-match/#partial-matches\"><code>partial match</code></a> when verifying your contracts. Depending on your requirements this may be acceptable.</p>\n","isPage":false,"text":"\nBy default the Solidity compiler appends the hash of the metadata file at end of the bytecode. This bytecode includes things like the compiler version and the ABI.\nSince the source file hashes are included in the metadata file, even if a single byte of source files changes, the metadata hash changes too. That means, if we can compile a contract with given source files and the bytecode + the appended metadata hash are exactly the same as an on-chain contract, we can be sure that this is a byte-by-byte match of the same source files and the same compilation settings.\nThe metadata file may look something like this:\n{\n  &quot;compiler&quot;: {\n    &quot;version&quot;: &quot;0.8.28+commit.7893614a&quot;\n  },\n  &quot;language&quot;: &quot;Solidity&quot;,\n  &quot;output&quot;: {\n    &quot;abi&quot;: [\n      {\n        &quot;inputs&quot;: [],\n        &quot;stateMutability&quot;: &quot;nonpayable&quot;,\n        &quot;type&quot;: &quot;function&quot;,\n        &quot;name&quot;: &quot;increment&quot;\n      },\n      {\n        &quot;inputs&quot;: [],\n        &quot;stateMutability&quot;: &quot;view&quot;,\n        &quot;type&quot;: &quot;function&quot;,\n        &quot;name&quot;: &quot;number&quot;,\n        &quot;outputs&quot;: [\n          {\n            &quot;internalType&quot;: &quot;uint256&quot;,\n            &quot;name&quot;: &quot;&quot;,\n            &quot;type&quot;: &quot;uint256&quot;\n          }\n        ]\n      },\n      {\n        &quot;inputs&quot;: [\n          {\n            &quot;internalType&quot;: &quot;uint256&quot;,\n            &quot;name&quot;: &quot;newNumber&quot;,\n            &quot;type&quot;: &quot;uint256&quot;\n          }\n        ],\n        &quot;stateMutability&quot;: &quot;nonpayable&quot;,\n        &quot;type&quot;: &quot;function&quot;,\n        &quot;name&quot;: &quot;setNumber&quot;\n      }\n    ],\n    &quot;devdoc&quot;: {\n      &quot;kind&quot;: &quot;dev&quot;,\n      &quot;methods&quot;: {},\n      &quot;version&quot;: 1\n    },\n    &quot;userdoc&quot;: {\n      &quot;kind&quot;: &quot;user&quot;,\n      &quot;methods&quot;: {},\n      &quot;version&quot;: 1\n    }\n  },\n  &quot;settings&quot;: {\n    &quot;remappings&quot;: [&quot;forge-std/=lib/forge-std/src/&quot;],\n    &quot;optimizer&quot;: {\n      &quot;enabled&quot;: false,\n      &quot;runs&quot;: 200\n    },\n    &quot;metadata&quot;: {\n      &quot;bytecodeHash&quot;: &quot;ipfs&quot;\n    },\n    &quot;compilationTarget&quot;: {\n      &quot;src/Counter.sol&quot;: &quot;Counter&quot;\n    },\n    &quot;evmVersion&quot;: &quot;cancun&quot;,\n    &quot;libraries&quot;: {}\n  },\n  &quot;sources&quot;: {\n    &quot;src/Counter.sol&quot;: {\n      &quot;keccak256&quot;: &quot;0x09277f949d59a9521708c870dc39c2c434ad8f86a5472efda6a732ef728c0053&quot;,\n      &quot;urls&quot;: [\n        &quot;bzz-raw://94cd5258357da018bf911aeda60ed9f5b130dce27445669ee200313cd3389200&quot;,\n        &quot;dweb:/ipfs/QmNbEfWAqXCtfQpk6u7TpGa8sTHXFLpUz7uebz2FVbchSC&quot;\n      ],\n      &quot;license&quot;: &quot;UNLICENSED&quot;\n    }\n  },\n  &quot;version&quot;: 1\n}\nClick here to learn more about the metadata file.\nBy disabling the metadata as follows:\nbytecode_hash = &quot;none&quot;\ncbor_metadata = false\nYou are not including the metadata hash as part of the bytecode. This means that whilst your bytecode can now be deterministic you won&#x27;t be able to have a full match, only a partial match when verifying your contracts. Depending on your requirements this may be acceptable.\n","title":"Metadata and bytecode","titles":[null,"Configuring your foundry.toml"]},"63":{"href":"/guides/deterministic-deployments-using-create2#optimizer","html":"\n<p>If you are enabling the <code>optimizer</code> make sure your <code>optimizer_runs</code> stay consistent.</p>\n","isPage":false,"text":"\nIf you are enabling the optimizer make sure your optimizer_runs stay consistent.\n","title":"Optimizer","titles":[null,"Configuring your foundry.toml"]},"64":{"href":"/guides/deterministic-deployments-using-create2#create2-factory","html":"\n<p>By default, your contracts won&#x27;t use the default (or specified using the <code>create2_deployer</code> configuration) create2 factory and will default to executing the create2 opcode from the contract it&#x27;s executed on. For example, this behavior occurs when running tests or executing scripts without a private key.</p>\n<p>You can use the following configuration:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">always_use_create_2_factory = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span></code></pre>\n<p>If you wish to always use the create2 factory. This comes handy if you wish to use the create2 factory deployment addresses in your tests for example.</p>\n","isPage":false,"text":"\nBy default, your contracts won&#x27;t use the default (or specified using the create2_deployer configuration) create2 factory and will default to executing the create2 opcode from the contract it&#x27;s executed on. For example, this behavior occurs when running tests or executing scripts without a private key.\nYou can use the following configuration:\nalways_use_create_2_factory = true\nIf you wish to always use the create2 factory. This comes handy if you wish to use the create2 factory deployment addresses in your tests for example.\n","title":"Create2 factory","titles":[null,"Configuring your foundry.toml"]},"65":{"href":"/guides/deterministic-deployments-using-create2#deploying-the-contract","html":"\n<p>When using Solidity&#x27;s default <code>CREATE</code> where the new address of a contract is determined by taking the <code>hash</code> of the <code>sender</code>&#x27;s address and the <code>sender</code>&#x27;s <code>nonce</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">new_contract_address = keccak256(rlp_encode([sender, nonce]))[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">12:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Using the default CREATE opcode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Counter counter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Counter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n<p>Because the <code>nonce</code> can only be used a single time it on each chain it is an unreliable way of deploying to the same contract address.</p>\n<p>Instead let&#x27;s use <code>CREATE2</code>&#x27;s <code>salt</code> parameter.</p>\n<p>The <code>salt</code> parameter in <code>CREATE2</code> is a key component that determines the final deployed contract address. It allows for flexibility and uniqueness in deterministic deployments. The address of the deployed contract is derived using the following formula:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">new_contract_address = keccak256(0xff ++ deployer ++ salt ++ keccak256(init_code))</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Passing the `salt` parameter to the CREATE2 opcode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Counter counter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Counter{salt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> salt}();</span></span></code></pre>\n<ul>\n<li><code>0xff</code> is a fixed prefix ensuring uniqueness.</li>\n<li><code>deployer</code> is the address executing the CREATE2 operation.</li>\n<li><code>salt</code> is a 32-byte value chosen by the deployer.</li>\n<li><code>keccak256(bytecode)</code> is the hash of the contract&#x27;s creation bytecode.</li>\n</ul>\n<p>Given that <code>0xff</code> is fixed, the <code>deployer</code> is a deterministic deployer (<a href=\"https://github.com/Arachnid/deterministic-deployment-proxy\">0x4e59b44847b379578588920ca78fbf26c0b4956c</a>) and our bytecode is fixed we can use the <code>salt</code> parameter to fully control our new contract address.</p>\n","isPage":false,"text":"\nWhen using Solidity&#x27;s default CREATE where the new address of a contract is determined by taking the hash of the sender&#x27;s address and the sender&#x27;s nonce:\nnew_contract_address = keccak256(rlp_encode([sender, nonce]))[12:]\n// Using the default CREATE opcode\nCounter counter = new Counter();\nBecause the nonce can only be used a single time it on each chain it is an unreliable way of deploying to the same contract address.\nInstead let&#x27;s use CREATE2&#x27;s salt parameter.\nThe salt parameter in CREATE2 is a key component that determines the final deployed contract address. It allows for flexibility and uniqueness in deterministic deployments. The address of the deployed contract is derived using the following formula:\nnew_contract_address = keccak256(0xff ++ deployer ++ salt ++ keccak256(init_code))\n// Passing the `salt` parameter to the CREATE2 opcode\nCounter counter = new Counter{salt: salt}();\n\n0xff is a fixed prefix ensuring uniqueness.\ndeployer is the address executing the CREATE2 operation.\nsalt is a 32-byte value chosen by the deployer.\nkeccak256(bytecode) is the hash of the contract&#x27;s creation bytecode.\n\nGiven that 0xff is fixed, the deployer is a deterministic deployer (0x4e59b44847b379578588920ca78fbf26c0b4956c) and our bytecode is fixed we can use the salt parameter to fully control our new contract address.\n","title":"Deploying the contract","titles":[null]},"66":{"href":"/guides/deterministic-deployments-using-create2#additional-resources","html":"\n<ul>\n<li><a href=\"https://docs.soliditylang.org/en/latest/metadata.html\">Contract Metadata</a></li>\n<li><a href=\"https://github.com/Vectorized/solady/blob/main/src/utils/CREATE3.sol\">Deterministic deployments agnostic to the initialization code</a></li>\n</ul>","isPage":false,"text":"\n\nContract Metadata\nDeterministic deployments agnostic to the initialization code\n","title":"Additional resources","titles":[null]},"67":{"href":"/guides/eip712#implementing-and-testing-eip-712-signatures","html":"\n<p>Foundry offers multiple utilities to make it easy and reliable to work with EIP-712 signatures.</p>\n<p>EIP-712 is a standard for hashing and signing typed structured data. Instead of signing an opaque hash, users can sign human-readable messages, significantly improving usability and security. This is particularly useful for meta-transactions, permit functions (like in ERC-20 permits), and other off-chain signature schemes. However, correctly implementing EIP-712 hashing logic can be intricate. Foundry&#x27;s suite provides powerful utilities specifically designed to help developers test and validate their EIP-712 implementations with confidence.</p>\n<p>This guide will show you how to leverage Foundry&#x27;s EIP-712 commands and cheatcodes with a practical, real-world example, demonstrating how to validate a complex library like Uniswap&#x27;s <code>PermitHash.sol</code> from their Permit2 system. This will showcase how to ensure that a custom EIP-712 hashing implementation aligns perfectly with the standard.</p>\n","isPage":true,"text":"\nFoundry offers multiple utilities to make it easy and reliable to work with EIP-712 signatures.\nEIP-712 is a standard for hashing and signing typed structured data. Instead of signing an opaque hash, users can sign human-readable messages, significantly improving usability and security. This is particularly useful for meta-transactions, permit functions (like in ERC-20 permits), and other off-chain signature schemes. However, correctly implementing EIP-712 hashing logic can be intricate. Foundry&#x27;s suite provides powerful utilities specifically designed to help developers test and validate their EIP-712 implementations with confidence.\nThis guide will show you how to leverage Foundry&#x27;s EIP-712 commands and cheatcodes with a practical, real-world example, demonstrating how to validate a complex library like Uniswap&#x27;s PermitHash.sol from their Permit2 system. This will showcase how to ensure that a custom EIP-712 hashing implementation aligns perfectly with the standard.\n","title":"Implementing and Testing EIP-712 signatures","titles":[null]},"68":{"href":"/guides/eip712#eip-712-commands","html":"\n<p>Forge offers a couple of commands which are useful when working with EIP-712 types:</p>\n","isPage":false,"text":"\nForge offers a couple of commands which are useful when working with EIP-712 types:\n","title":"EIP-712 commands","titles":[null]},"69":{"href":"/guides/eip712#forge-eip712","html":"\n<p>Outputs the canonical type definitions of the structs in the target files in the terminal.</p>\n<aside data-callout=\"tip\"><p>Use the <code>forge eip712</code> command to generate the canonical type definitions and manually copy-paste them into your contracts. This way you will avoid typos.</p></aside>\n","isPage":false,"text":"\nOutputs the canonical type definitions of the structs in the target files in the terminal.\nUse the forge eip712 command to generate the canonical type definitions and manually copy-paste them into your contracts. This way you will avoid typos.\n","title":"forge eip712","titles":[null,"EIP-712 commands"]},"70":{"href":"/guides/eip712#forge-bind-json","html":"\n<p>Automatically generates solidity bindings for the structs in the target files.\nThe generated bindings can easily be serialized to JSON strings, and also parsed from JSON strings.\nAdditionally, these bindings also allow the EIP-712 cheatcodes to derive the type definitions just their name.</p>\n","isPage":false,"text":"\nAutomatically generates solidity bindings for the structs in the target files.\nThe generated bindings can easily be serialized to JSON strings, and also parsed from JSON strings.\nAdditionally, these bindings also allow the EIP-712 cheatcodes to derive the type definitions just their name.\n","title":"forge bind-json","titles":[null,"EIP-712 commands"]},"71":{"href":"/guides/eip712#eip-712-cheatcodes","html":"\n<p>Foundry offers several cheatcodes to interact with EIP-712 types:</p>\n","isPage":false,"text":"\nFoundry offers several cheatcodes to interact with EIP-712 types:\n","title":"EIP-712 cheatcodes","titles":[null]},"72":{"href":"/guides/eip712#vmeip712hashtype","html":"\n<ul>\n<li>Generates the <code>typeHash</code> for an EIP-712 struct definition. This is <code>keccak256</code> of the canonical type encoding.</li>\n<li>It can take a direct string definition (i.e. <code>&quot;Mail(address from,string contents)&quot;</code>) or a type name if you&#x27;ve used <code>forge bind-json</code> to generate bindings from your Solidity structs.</li>\n</ul>\n","isPage":false,"text":"\n\nGenerates the typeHash for an EIP-712 struct definition. This is keccak256 of the canonical type encoding.\nIt can take a direct string definition (i.e. &quot;Mail(address from,string contents)&quot;) or a type name if you&#x27;ve used forge bind-json to generate bindings from your Solidity structs.\n\n","title":"vm.eip712HashType","titles":[null,"EIP-712 cheatcodes","forge bind-json"]},"73":{"href":"/guides/eip712#vmeip712hashstruct","html":"\n<ul>\n<li>Computes the <code>structHash</code>: <code>keccak256(typeHash + encodeData(struct)).</code></li>\n<li><code>encodeData(struct)</code> is the ABI-encoded values of the struct&#x27;s members.</li>\n<li>Like <code>vm.eip712HashType</code>, it accepts either a direct type definition string or a type name (with bindings).</li>\n</ul>\n","isPage":false,"text":"\n\nComputes the structHash: keccak256(typeHash + encodeData(struct)).\nencodeData(struct) is the ABI-encoded values of the struct&#x27;s members.\nLike vm.eip712HashType, it accepts either a direct type definition string or a type name (with bindings).\n\n","title":"vm.eip712HashStruct","titles":[null,"EIP-712 cheatcodes","forge bind-json"]},"74":{"href":"/guides/eip712#vmeip712hashtypeddata","html":"\n<ul>\n<li>Generates the final EIP-712 digest to be signed: <code>keccak256(&quot;\\x19\\x01&quot; + domainSeparator + structHash)</code>.</li>\n<li>It takes a full JSON string representing the typed data as per the EIP-712 specification. Useful for end-to-end testing of signature verification.</li>\n</ul>\n","isPage":false,"text":"\n\nGenerates the final EIP-712 digest to be signed: keccak256(&quot;\\x19\\x01&quot; + domainSeparator + structHash).\nIt takes a full JSON string representing the typed data as per the EIP-712 specification. Useful for end-to-end testing of signature verification.\n\n","title":"vm.eip712HashTypedData","titles":[null,"EIP-712 cheatcodes","forge bind-json"]},"75":{"href":"/guides/eip712#testing-uniswaps-permithash-library","html":"\n<p>Uniswap&#x27;s <code>Permit2</code> system utilizes the <code>PermitHash.sol</code> library to create hashes that comply with the EIP-712 standard for various permit structures. In this guide, we will demonstrate how to use Foundry to verify that the library correctly implements the EIP-712 hashing rules.</p>\n<p>Our objective is to focus on a few hashing functions within <code>PermitHash.sol</code>. We will provide these functions with sample data and then use <code>vm.eip712HashStruct</code> —with the same data and the canonical EIP-712 type definition— to determine if the generated hashes match.</p>\n","isPage":false,"text":"\nUniswap&#x27;s Permit2 system utilizes the PermitHash.sol library to create hashes that comply with the EIP-712 standard for various permit structures. In this guide, we will demonstrate how to use Foundry to verify that the library correctly implements the EIP-712 hashing rules.\nOur objective is to focus on a few hashing functions within PermitHash.sol. We will provide these functions with sample data and then use vm.eip712HashStruct —with the same data and the canonical EIP-712 type definition— to determine if the generated hashes match.\n","title":"Testing Uniswap&#x27;s PermitHash library","titles":[null,"EIP-712 cheatcodes"]},"76":{"href":"/guides/eip712#setting-up-the-test-environment","html":"\n<p>Before starting with the validations, we have to create the <code>PermitHash.t.sol</code> test file.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// SPDX-License-Identifier: UNLICENSED</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ^0.8.17</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/Test.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Import the library we are testing</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">PermitHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;src/libraries/PermitHash.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">IAllowanceTransfer</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> as</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> IAT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;src/interfaces/IAllowanceTransfer.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/* These are the structs, defined in `IAT`, that `PermitHash` relies on:</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">struct PermitDetails {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  address token;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  uint160 amount;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  uint48 expiration;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  uint48 nonce;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">struct PermitSingle {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  PermitDetails details;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  address spender;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  uint256 sigDeadline;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">}</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">*/</span></span></code></pre>\n<blockquote>\n<p><strong>Tip:</strong> as previously explained, you can use <code>forge bind-json</code> to leverage Foundry&#x27;s capabilities, and have higher guarantees when testing. By running that command, you can simply use the struct name when using the EIP-712 cheatcodes, and Foundry will automatically derive the canonical type definition.</p>\n</blockquote>\n","isPage":false,"text":"\nBefore starting with the validations, we have to create the PermitHash.t.sol test file.\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.17;\n \nimport &quot;forge-std/Test.sol&quot;;\n// Import the library we are testing\nimport {PermitHash} from &quot;src/libraries/PermitHash.sol&quot;;\nimport {IAllowanceTransfer as IAT} from &quot;src/interfaces/IAllowanceTransfer.sol&quot;;\n \n/* These are the structs, defined in `IAT`, that `PermitHash` relies on:\n \nstruct PermitDetails {\n  address token;\n  uint160 amount;\n  uint48 expiration;\n  uint48 nonce;\n}\n \nstruct PermitSingle {\n  PermitDetails details;\n  address spender;\n  uint256 sigDeadline;\n}\n*/\n\nTip: as previously explained, you can use forge bind-json to leverage Foundry&#x27;s capabilities, and have higher guarantees when testing. By running that command, you can simply use the struct name when using the EIP-712 cheatcodes, and Foundry will automatically derive the canonical type definition.\n\n","title":"Setting up the test environment","titles":[null,"EIP-712 cheatcodes","Testing Uniswap&#x27;s PermitHash library"]},"77":{"href":"/guides/eip712#validating-typhash","html":"\n<p>First of all, ensure that the type hashes for each of the structs are correct:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PermitHashTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> test_validatePermitDetails_typeHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // This test doesn&#x27;t rely on the bindings generated by `forge json`, therefore it requires</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // the string representation of the type as an input for the cheatcode.</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Assume available on Uniswap&#x27;s library. Otherwise you&#x27;d have to copy-paste it manually.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _PERMIT_DETAILS_TYPEDEF </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      &quot;PermitDetails(address token,uint160 amount,uint48 expiration,uint48 nonce)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // The type hash constant defined in Uniswap&#x27;s library</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> typeHash </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> PermitHash._PERMIT_DETAILS_TYPEHASH;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Use the cheatcode to get the expected hash (with string representation)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">eip712HashType</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(_PERMIT_DETAILS_TYPEDEF);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(typeHash, expected, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;PermitDetails typeHash mismatch&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> test_validatePermitSingle_typeHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // The type hash constant defined in Uniswap&#x27;s library</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> typeHash </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> PermitHash._PERMIT_SINGLE_TYPEHASH;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Use the cheatcode to get the expected hash (needs bindings)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">eip712HashType</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;PermitSingle&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(typeHash, expected, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;PermitSingle typeHash mismatch&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<aside data-callout=\"note\"><p>If the library&#x27;s <code>typeHash</code> was flawed, the assertion against the cheatcode would surface it.</p></aside>\n","isPage":false,"text":"\nFirst of all, ensure that the type hashes for each of the structs are correct:\ncontract PermitHashTest is Test {\n  function test_validatePermitDetails_typeHash() public {\n    // This test doesn&#x27;t rely on the bindings generated by `forge json`, therefore it requires\n    // the string representation of the type as an input for the cheatcode.\n \n    // Assume available on Uniswap&#x27;s library. Otherwise you&#x27;d have to copy-paste it manually.\n    string memory _PERMIT_DETAILS_TYPEDEF =\n      &quot;PermitDetails(address token,uint160 amount,uint48 expiration,uint48 nonce)&quot;;\n \n    // The type hash constant defined in Uniswap&#x27;s library\n    bytes32 typeHash = PermitHash._PERMIT_DETAILS_TYPEHASH;\n \n    // Use the cheatcode to get the expected hash (with string representation)\n    bytes32 expected = vm.eip712HashType(_PERMIT_DETAILS_TYPEDEF);\n \n    assertEq(typeHash, expected, &quot;PermitDetails typeHash mismatch&quot;);\n  }\n \n  function test_validatePermitSingle_typeHash() public {\n    // The type hash constant defined in Uniswap&#x27;s library\n    bytes32 typeHash = PermitHash._PERMIT_SINGLE_TYPEHASH;\n \n    // Use the cheatcode to get the expected hash (needs bindings)\n    bytes32 expected = vm.eip712HashType(&quot;PermitSingle&quot;);\n \n    assertEq(typeHash, expected, &quot;PermitSingle typeHash mismatch&quot;);\n  }\n}\nIf the library&#x27;s typeHash was flawed, the assertion against the cheatcode would surface it.\n","title":"Validating typHash","titles":[null,"EIP-712 cheatcodes"]},"78":{"href":"/guides/eip712#validating-structhash","html":"\n<p>After being certain that the hashes of the type definitions are correct, let&#x27;s validate that the hashes of the structs follow the EIP-712 specification.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PermitHashTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOKEN </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> SPENDER </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0xdEADBEeF00000000000000000000000000000000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> test_validatePermitDetails_structHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // This test doesn&#x27;t rely on the bindings generated by `forge bind-json`, therefore it requires</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // the string representation of the type as an input for the cheatcode.</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Assume available on Uniswap&#x27;s library. Otherwise you&#x27;d have to copy-paste it manually.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _PERMIT_DETAILS_TYPEDEF </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      &quot;PermitDetails(address token,uint160 amount,uint48 expiration,uint48 nonce)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Prepare the test data for PermitDetails</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    IAllowanceTransfer.PermitDetails </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> details </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> IAllowanceTransfer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">PermitDetails</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      token</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOKEN,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      amount</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      expiration</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> uint48</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.timestamp </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 3600</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      nonce</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 123</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Get the structHash from Uniswap&#x27;s library.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Despite private, assume it is available with a public function.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> structHash </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> PermitHash.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">_hashPermitDetails</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(details);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Use the cheatcode to get the expected hash (with string representation)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">eip712HashStruct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(_PERMIT_DETAILS_TYPEDEF, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(details));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(structHash, expected, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;PermitDetails structHash mismatch&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> test_validatePermitSingle_structHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    IAT.PermitDetails </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> details </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> IAT.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">PermitDetails</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      token</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TOKEN,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      amount</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 200</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      expiration</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> uint48</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.timestamp </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 7200</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      nonce</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 456</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    IAT.PermitSingle </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> permitSingle </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> IAT.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">PermitSingle</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      details</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> details,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      spender</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> SPENDER,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      sigDeadline</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.timestamp </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10800</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Get the structHash from Uniswap&#x27;s library.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> structHash </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> PermitHash.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">hash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(permitSingle);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Use the cheatcode to get the expected hash (needs bindings)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expectedStructHash </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">eip712HashStruct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;PermitSingle&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(permitSingle));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(structHash, expected, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;PermitSingle structHash mismatch&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<aside data-callout=\"note\"><p>If the library&#x27;s <code>structHash</code> was flawed, the assertion against the cheatcode would surface it.</p></aside>","isPage":false,"text":"\nAfter being certain that the hashes of the type definitions are correct, let&#x27;s validate that the hashes of the structs follow the EIP-712 specification.\ncontract PermitHashTest is Test {\n  address TOKEN = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n  address SPENDER = 0xdEADBEeF00000000000000000000000000000000;\n \n  function test_validatePermitDetails_structHash() public {\n    // This test doesn&#x27;t rely on the bindings generated by `forge bind-json`, therefore it requires\n    // the string representation of the type as an input for the cheatcode.\n \n    // Assume available on Uniswap&#x27;s library. Otherwise you&#x27;d have to copy-paste it manually.\n    string memory _PERMIT_DETAILS_TYPEDEF =\n      &quot;PermitDetails(address token,uint160 amount,uint48 expiration,uint48 nonce)&quot;;\n \n    // Prepare the test data for PermitDetails\n    IAllowanceTransfer.PermitDetails memory details = IAllowanceTransfer.PermitDetails({\n      token: TOKEN,\n      amount: 100 ether,\n      expiration: uint48(block.timestamp + 3600),\n      nonce: 123\n    });\n \n    // Get the structHash from Uniswap&#x27;s library.\n    // Despite private, assume it is available with a public function.\n    bytes32 structHash = PermitHash._hashPermitDetails(details);\n \n    // Use the cheatcode to get the expected hash (with string representation)\n    bytes32 expected = vm.eip712HashStruct(_PERMIT_DETAILS_TYPEDEF, abi.encode(details));\n \n    assertEq(structHash, expected, &quot;PermitDetails structHash mismatch&quot;);\n  }\n \n  function test_validatePermitSingle_structHash() public {\n    IAT.PermitDetails memory details = IAT.PermitDetails({\n      token: TOKEN,\n      amount: 200 ether,\n      expiration: uint48(block.timestamp + 7200),\n      nonce: 456\n    });\n \n    IAT.PermitSingle memory permitSingle = IAT.PermitSingle({\n      details: details,\n      spender: SPENDER,\n      sigDeadline: block.timestamp + 10800\n    });\n \n    // Get the structHash from Uniswap&#x27;s library.\n    bytes32 structHash = PermitHash.hash(permitSingle);\n \n    // Use the cheatcode to get the expected hash (needs bindings)\n    bytes32 expectedStructHash = vm.eip712HashStruct(&quot;PermitSingle&quot;, abi.encode(permitSingle));\n \n    assertEq(structHash, expected, &quot;PermitSingle structHash mismatch&quot;);\n  }\n}\nIf the library&#x27;s structHash was flawed, the assertion against the cheatcode would surface it.","title":"Validating structHash","titles":[null,"EIP-712 cheatcodes"]},"79":{"href":"/guides/forking-mainnet-with-cast-anvil#forking-mainnet-with-cast-and-anvil","html":"\n<p>By combining <a href=\"../reference/anvil/\">Anvil</a> and <a href=\"../cast/reference/\">Cast</a>, you can fork and test by interacting with contracts on a real network. The goal of this guide is to show you how to transfer DAI tokens from someone who holds DAI to an account created by Anvil.</p>\n","isPage":true,"text":"\nBy combining Anvil and Cast, you can fork and test by interacting with contracts on a real network. The goal of this guide is to show you how to transfer DAI tokens from someone who holds DAI to an account created by Anvil.\n","title":"Forking Mainnet with Cast and Anvil","titles":[null]},"80":{"href":"/guides/forking-mainnet-with-cast-anvil#getting-started","html":"\n<p>Let&#x27;s start by forking mainnet.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">anvil</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --fork-url</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://mainnet.infura.io/v3/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">$INFURA_KEY</span></span></code></pre>\n<p>You will see 10 accounts are created with their public and private keys. We will work with <code>0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266</code> (Let&#x27;s call this user Alice).</p>\n","isPage":false,"text":"\nLet&#x27;s start by forking mainnet.\nanvil --fork-url https://mainnet.infura.io/v3/$INFURA_KEY\nYou will see 10 accounts are created with their public and private keys. We will work with 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266 (Let&#x27;s call this user Alice).\n","title":"Getting started","titles":[null]},"81":{"href":"/guides/forking-mainnet-with-cast-anvil#transferring-dai","html":"\n<p>Go to Etherscan and search for holders of DAI tokens (<a href=\"https://etherscan.io/token/0x6b175474e89094c44da98b954eedeac495271d0f#balances\">here</a>). Let&#x27;s pick a random account. In this example we will be using <code>0xfc2eE3bD619B7cfb2dE2C797b96DeeCbD7F68e46</code>. Let&#x27;s export our contracts and accounts as environment variables:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ALICE</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> DAI</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0x6b175474e89094c44da98b954eedeac495271d0f</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> UNLUCKY_USER</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0xfc2eE3bD619B7cfb2dE2C797b96DeeCbD7F68e46</span></span></code></pre>\n<p>We can check Alice&#x27;s balance using <a href=\"../cast/reference/cast-call.md\"><code>cast call</code></a>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $DAI </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &quot;balanceOf(address)(uint256)&quot;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  $ALICE</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">0</span></span></code></pre>\n<p>Similarly, we can also check our unlucky user&#x27;s balance using <code>cast call</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $DAI </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &quot;balanceOf(address)(uint256)&quot;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  $UNLUCKY_USER</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">21840114973524208109322438</span></span></code></pre>\n<p>Let&#x27;s transfer some tokens from the unlucky user to Alice using <a href=\"../cast/reference/cast-send.md\"><code>cast send</code></a>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># This calls Anvil and lets us impersonate our unlucky user</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> rpc</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> anvil_impersonateAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $UNLUCKY_USER</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $DAI </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">--from $UNLUCKY_USER </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &quot;transfer(address,uint256)(bool)&quot;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  $ALICE </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  300000000000000000000000</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --unlocked</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">blockHash</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">               0xbf31c45f6935a0714bb4f709b5e3850ab0cc2f8bffe895fefb653d154e0aa062</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">blockNumber</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">             15052891</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">...</span></span></code></pre>\n<p>Let&#x27;s check that the transfer worked:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $DAI </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &quot;balanceOf(address)(uint256)&quot;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  $ALICE</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">300000000000000000000000</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $DAI </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &quot;balanceOf(address)(uint256)&quot;</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  $UNLUCKY_USER</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">21540114973524208109322438</span></span></code></pre>","isPage":false,"text":"\nGo to Etherscan and search for holders of DAI tokens (here). Let&#x27;s pick a random account. In this example we will be using 0xfc2eE3bD619B7cfb2dE2C797b96DeeCbD7F68e46. Let&#x27;s export our contracts and accounts as environment variables:\nexport ALICE=0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\nexport DAI=0x6b175474e89094c44da98b954eedeac495271d0f\nexport UNLUCKY_USER=0xfc2eE3bD619B7cfb2dE2C797b96DeeCbD7F68e46\nWe can check Alice&#x27;s balance using cast call:\ncast call $DAI \\\n  &quot;balanceOf(address)(uint256)&quot; \\\n  $ALICE\n0\nSimilarly, we can also check our unlucky user&#x27;s balance using cast call:\ncast call $DAI \\\n  &quot;balanceOf(address)(uint256)&quot; \\\n  $UNLUCKY_USER\n21840114973524208109322438\nLet&#x27;s transfer some tokens from the unlucky user to Alice using cast send:\n# This calls Anvil and lets us impersonate our unlucky user\ncast rpc anvil_impersonateAccount $UNLUCKY_USER\ncast send $DAI \\\n--from $UNLUCKY_USER \\\n  &quot;transfer(address,uint256)(bool)&quot; \\\n  $ALICE \\\n  300000000000000000000000 \\\n  --unlocked\nblockHash               0xbf31c45f6935a0714bb4f709b5e3850ab0cc2f8bffe895fefb653d154e0aa062\nblockNumber             15052891\n...\nLet&#x27;s check that the transfer worked:\ncast call $DAI \\\n  &quot;balanceOf(address)(uint256)&quot; \\\n  $ALICE\n300000000000000000000000\n \ncast call $DAI \\\n  &quot;balanceOf(address)(uint256)&quot; \\\n  $UNLUCKY_USER\n21540114973524208109322438","title":"Transferring DAI","titles":[null]},"82":{"href":"/guides/foundry-in-docker#running-foundry-inside-of-docker","html":"\n<p>This guide shows you how to build, test, and deploy a smart contract using Foundry&#x27;s Docker image. It adapts code from the [<code>first steps</code>] guide. If you haven&#x27;t completed that guide yet, and are new to solidity, you may want to start with it first. Alternatively, if you have some familiarity with Docker and Solidity, you can use your own existing project and adjust accordingly.</p>\n<blockquote>\n<p>This guide is for illustrative purposes only and provided on an as-is basis. The guide is not audited nor fully tested. No code in this guide should be used in a production environment.</p>\n</blockquote>\n","isPage":true,"text":"\nThis guide shows you how to build, test, and deploy a smart contract using Foundry&#x27;s Docker image. It adapts code from the [first steps] guide. If you haven&#x27;t completed that guide yet, and are new to solidity, you may want to start with it first. Alternatively, if you have some familiarity with Docker and Solidity, you can use your own existing project and adjust accordingly.\n\nThis guide is for illustrative purposes only and provided on an as-is basis. The guide is not audited nor fully tested. No code in this guide should be used in a production environment.\n\n","title":"Running Foundry inside of Docker","titles":[null]},"83":{"href":"/guides/foundry-in-docker#installation-and-setup","html":"\n<p>The only installation required to run this guide is Docker, and optionally, an IDE of your choice.\nFollow the <a href=\"/introduction/installation\">Docker installation instructions</a>.</p>\n<p>To keep future commands succinct, let&#x27;s re-tag the image:\n<code>docker tag ghcr.io/foundry-rs/foundry:latest foundry:latest</code></p>\n<p>Having Foundry installed locally is not strictly required, but it may be helpful for debugging. You can install it using <a href=\"/introduction/installation#using-foundryup\">foundryup</a>.</p>\n<p>Finally, to use any of the <code>cast</code> or <code>forge create</code> portions of this guide, you will need access to an Ethereum node. If you don&#x27;t have your own node running (likely), you can use a 3rd party node service. We won&#x27;t recommend a specific provider in this guide. A good place to start learning about Nodes-as-a-Service is <a href=\"https://ethereum.org/en/developers/docs/nodes-and-clients/nodes-as-a-service/\">Ethereum&#x27;s article</a> on the subject.</p>\n<p><strong>For the rest of this guide, it is assumed that the RPC endpoint of your ethereum node is set like this</strong>: <code>export RPC_URL=&lt;YOUR_RPC_URL&gt;</code></p>\n","isPage":false,"text":"\nThe only installation required to run this guide is Docker, and optionally, an IDE of your choice.\nFollow the Docker installation instructions.\nTo keep future commands succinct, let&#x27;s re-tag the image:\ndocker tag ghcr.io/foundry-rs/foundry:latest foundry:latest\nHaving Foundry installed locally is not strictly required, but it may be helpful for debugging. You can install it using foundryup.\nFinally, to use any of the cast or forge create portions of this guide, you will need access to an Ethereum node. If you don&#x27;t have your own node running (likely), you can use a 3rd party node service. We won&#x27;t recommend a specific provider in this guide. A good place to start learning about Nodes-as-a-Service is Ethereum&#x27;s article on the subject.\nFor the rest of this guide, it is assumed that the RPC endpoint of your ethereum node is set like this: export RPC_URL=&lt;YOUR_RPC_URL&gt;\n","title":"Installation and Setup","titles":[null,"Running Foundry inside of Docker"]},"84":{"href":"/guides/foundry-in-docker#a-tour-around-the-foundry-docker-image","html":"\n<p>The docker image can be used in two primary ways:</p>\n<ol>\n<li>As an interface directly to forge and cast</li>\n<li>As a base image for building your own containerized test, build, and deployment tooling</li>\n</ol>\n<p>We will cover both, but let&#x27;s start by taking a look at interfacing with foundry using docker. This is also a good test that your local installation worked!</p>\n<p>We can run any of the <code>cast</code> <a href=\"/cast/reference/overview\">commands</a> against our docker image. Let&#x27;s fetch the latest block information:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> foundry</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;cast block --rpc-url </span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">$RPC_URL</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> latest&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">baseFeePerGas</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;0xb634241e3&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">difficulty</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">           &quot;0x2e482bdf51572b&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">extraData</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;0x486976656f6e20686b&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">gasLimit</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">             &quot;0x1c9c380&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">gasUsed</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">              &quot;0x652993&quot;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">hash</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                 &quot;0x181748772da2f968bcc91940c8523bb6218a7d57669ded06648c9a9fb6839db5&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">logsBloom</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;0x406010046100001198c220108002b606400029444814008210820c04012804131847150080312500300051044208430002008029880029011520380060262400001c538d00440a885a02219d49624aa110000003094500022c003600a00258009610c410323580032000849a0408a81a0a060100022505202280c61880c80020e080244400440404520d210429a0000400010089410c8408162903609c920014028a94019088681018c909980701019201808040004100000080540610a9144d050020220c10a24c01c000002005400400022420140e18100400e10254926144c43a200cc008142080854088100128844003010020c344402386a8c011819408&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">miner</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                &quot;0x1ad91ee08f21be3de0ba2ba6918e714da6b45836&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">mixHash</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">              &quot;0xb920857687476c1bcb21557c5f6196762a46038924c5f82dc66300347a1cfc01&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">nonce</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                &quot;0x1ce6929033fbba90&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">number</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">               &quot;0xdd3309&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">parentHash</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">           &quot;0x39c6e1aa997d18a655c6317131589fd327ae814ef84e784f5eb1ab54b9941212&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">receiptsRoot</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">         &quot;0x4724f3b270dcc970f141e493d8dc46aeba6fffe57688210051580ac960fe0037&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sealFields</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">           []</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">sha3Uncles</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">           &quot;0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">size</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">                 &quot;0x1d6bb&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">stateRoot</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;0x0d4b714990132cf0f21801e2931b78454b26aad706fc6dc16b64e04f0c14737a&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">timestamp</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;0x6246259b&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">totalDifficulty</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      &quot;0x9923da68627095fd2e7&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">transactions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">         [...]</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">uncles</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">               []</span></span></code></pre>\n<p>If we&#x27;re in a directory with some Solidity <a href=\"https://github.com/dmfxyz/foundry-docker-guide\">source code</a>, we can mount that directory into Docker and use <code>forge</code> however we wish. For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -v</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $PWD</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:/app</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> foundry</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge test --root /app --watch&quot;</span></span></code></pre>\n<p>You can see our code was compiled and tested entirely within the container. Also, since we passed the <code>--watch</code> option, the container will recompile the code whenever a change is detected.</p>\n","isPage":false,"text":"\nThe docker image can be used in two primary ways:\n\nAs an interface directly to forge and cast\nAs a base image for building your own containerized test, build, and deployment tooling\n\nWe will cover both, but let&#x27;s start by taking a look at interfacing with foundry using docker. This is also a good test that your local installation worked!\nWe can run any of the cast commands against our docker image. Let&#x27;s fetch the latest block information:\ndocker run foundry &quot;cast block --rpc-url $RPC_URL latest&quot;\nbaseFeePerGas        &quot;0xb634241e3&quot;\ndifficulty           &quot;0x2e482bdf51572b&quot;\nextraData            &quot;0x486976656f6e20686b&quot;\ngasLimit             &quot;0x1c9c380&quot;\ngasUsed              &quot;0x652993&quot;\nhash                 &quot;0x181748772da2f968bcc91940c8523bb6218a7d57669ded06648c9a9fb6839db5&quot;\nlogsBloom            &quot;0x406010046100001198c220108002b606400029444814008210820c04012804131847150080312500300051044208430002008029880029011520380060262400001c538d00440a885a02219d49624aa110000003094500022c003600a00258009610c410323580032000849a0408a81a0a060100022505202280c61880c80020e080244400440404520d210429a0000400010089410c8408162903609c920014028a94019088681018c909980701019201808040004100000080540610a9144d050020220c10a24c01c000002005400400022420140e18100400e10254926144c43a200cc008142080854088100128844003010020c344402386a8c011819408&quot;\nminer                &quot;0x1ad91ee08f21be3de0ba2ba6918e714da6b45836&quot;\nmixHash              &quot;0xb920857687476c1bcb21557c5f6196762a46038924c5f82dc66300347a1cfc01&quot;\nnonce                &quot;0x1ce6929033fbba90&quot;\nnumber               &quot;0xdd3309&quot;\nparentHash           &quot;0x39c6e1aa997d18a655c6317131589fd327ae814ef84e784f5eb1ab54b9941212&quot;\nreceiptsRoot         &quot;0x4724f3b270dcc970f141e493d8dc46aeba6fffe57688210051580ac960fe0037&quot;\nsealFields           []\nsha3Uncles           &quot;0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347&quot;\nsize                 &quot;0x1d6bb&quot;\nstateRoot            &quot;0x0d4b714990132cf0f21801e2931b78454b26aad706fc6dc16b64e04f0c14737a&quot;\ntimestamp            &quot;0x6246259b&quot;\ntotalDifficulty      &quot;0x9923da68627095fd2e7&quot;\ntransactions         [...]\nuncles               []\nIf we&#x27;re in a directory with some Solidity source code, we can mount that directory into Docker and use forge however we wish. For example:\ndocker run -v $PWD:/app foundry &quot;forge test --root /app --watch&quot;\nYou can see our code was compiled and tested entirely within the container. Also, since we passed the --watch option, the container will recompile the code whenever a change is detected.\n","title":"A tour around the Foundry docker image","titles":[null,"Running Foundry inside of Docker"]},"85":{"href":"/guides/foundry-in-docker#creating-a-build-and-test-image","html":"\n<p>Let&#x27;s use the Foundry docker image as a base for using our own Docker image. We&#x27;ll use the image to:</p>\n<ol>\n<li>Build our solidity code</li>\n<li>Run our solidity tests</li>\n</ol>\n<p>A simple <code>Dockerfile</code> can accomplish these two goals:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Use the latest foundry image</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">FROM</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ghcr.io/foundry-rs/foundry</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Copy our source code into the container</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">WORKDIR</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /app</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Build and test the source code</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">COPY</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> . .</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">RUN</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> forge build</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">RUN</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> forge test</span></span></code></pre>\n<p>You can build this docker image and watch forge build/run the tests within the container:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --no-cache</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --progress=plain</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> .</span></span></code></pre>\n<p>Now, what happens if one of our tests fails? Modify <code>src/test/Counter.t.sol</code> to make a false assertion. Try to build image again.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testFuzz_SetNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> x</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(x);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --no-cache</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --progress=plain</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> .</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">...</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#9 0.522 Failed tests:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#9 0.522 [FAIL: assertion failed: 425 != 5; counterexample: calldata=[...] args=[425]] testFuzz_SetNumber(uint256) (runs: 0, μ: 0, ~: 0)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#9 0.522</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#9 0.522 Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 686.53µs (407.06µs CPU time)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">------</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">error:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> failed</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> to</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> solve:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> executor</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> failed</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> running</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [/bin/sh </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">-c</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test]:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> exit</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> code:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span></span></code></pre>\n<p>Our image failed to build because our tests failed! This is actually a nice property, because it means if we have a Docker image that successfully built (and therefore is available for use), we know the code inside the image passed the tests.*</p>\n<blockquote>\n<p>*Of course, chain of custody of your docker images is very important. Docker layer hashes can be very useful for verification. In a production environment, consider <a href=\"https://docs.docker.com/engine/security/trust/#:~:text=To%20sign%20a%20Docker%20Image,the%20local%20Docker%20trust%20repository\">signing your docker images</a>.</p>\n</blockquote>\n","isPage":false,"text":"\nLet&#x27;s use the Foundry docker image as a base for using our own Docker image. We&#x27;ll use the image to:\n\nBuild our solidity code\nRun our solidity tests\n\nA simple Dockerfile can accomplish these two goals:\n# Use the latest foundry image\nFROM ghcr.io/foundry-rs/foundry\n \n# Copy our source code into the container\nWORKDIR /app\n \n# Build and test the source code\nCOPY . .\nRUN forge build\nRUN forge test\nYou can build this docker image and watch forge build/run the tests within the container:\ndocker build --no-cache --progress=plain .\nNow, what happens if one of our tests fails? Modify src/test/Counter.t.sol to make a false assertion. Try to build image again.\nfunction testFuzz_SetNumber(uint256 x) public {\n    counter.setNumber(x);\n    assertEq(counter.number(), 5);\n}\ndocker build --no-cache --progress=plain .\n&lt;...&gt;\n#9 0.522 Failed tests:\n#9 0.522 [FAIL: assertion failed: 425 != 5; counterexample: calldata=[...] args=[425]] testFuzz_SetNumber(uint256) (runs: 0, μ: 0, ~: 0)\n#9 0.522\n#9 0.522 Suite result: FAILED. 1 passed; 1 failed; 0 skipped; finished in 686.53µs (407.06µs CPU time)\n------\nerror: failed to solve: executor failed running [/bin/sh -c forge test]: exit code: 1\nOur image failed to build because our tests failed! This is actually a nice property, because it means if we have a Docker image that successfully built (and therefore is available for use), we know the code inside the image passed the tests.*\n\n*Of course, chain of custody of your docker images is very important. Docker layer hashes can be very useful for verification. In a production environment, consider signing your docker images.\n\n","title":"Creating a &quot;build and test&quot; image","titles":[null,"Running Foundry inside of Docker"]},"86":{"href":"/guides/foundry-in-docker#creating-a-deployer-image","html":"\n<p>Now, we&#x27;ll move on to a bit more of an advanced Dockerfile. Let&#x27;s add an entrypoint that allows us to deploy our code by using the built (and tested!) image. We can target the Sepolia testnet first.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Use the latest foundry image</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">FROM</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ghcr.io/foundry-rs/foundry</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Copy our source code into the container</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">WORKDIR</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /app</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Build and test the source code</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">COPY</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> . .</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">RUN</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> forge build</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">RUN</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> forge test</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Set the entrypoint to the forge deployment command</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">ENTRYPOINT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;forge&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;create&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n<p>Let&#x27;s build the image, this time giving it a name:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --no-cache</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --progress=plain</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -t</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> counter</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> .</span></span></code></pre>\n<p>Here&#x27;s how we can use our docker image to deploy:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> counter-deployer</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --rpc-url</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $RPC_URL </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">--private-key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $PRIVATE_KEY </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">./src/Counter.sol:Counter</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">No</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> files</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> changed,</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> compilation</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> skipped</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Deployer:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x496e09fcb240c33b8fda3b4b74d81697c03b6b3d</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Deployed</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> to:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x23d465eaa80ad2e5cdb1a2345e4b54edd12560d3</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Transaction</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> hash:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0xf88c68c4a03a86b0e7ecb05cae8dea36f2896cd342a6af978cab11101c6224a9</span></span></code></pre>\n<p>We&#x27;ve just built, tested, and deployed our contract entirely within a Docker container! This guide was intended for testnet, but you can run the exact same Docker image targeting mainnet and be confident that the same code is being deployed by the same tooling.</p>\n","isPage":false,"text":"\nNow, we&#x27;ll move on to a bit more of an advanced Dockerfile. Let&#x27;s add an entrypoint that allows us to deploy our code by using the built (and tested!) image. We can target the Sepolia testnet first.\n# Use the latest foundry image\nFROM ghcr.io/foundry-rs/foundry\n \n# Copy our source code into the container\nWORKDIR /app\n \n# Build and test the source code\nCOPY . .\nRUN forge build\nRUN forge test\n \n# Set the entrypoint to the forge deployment command\nENTRYPOINT [&quot;forge&quot;, &quot;create&quot;]\nLet&#x27;s build the image, this time giving it a name:\ndocker build --no-cache --progress=plain -t counter .\nHere&#x27;s how we can use our docker image to deploy:\ndocker run counter-deployer --rpc-url $RPC_URL --private-key $PRIVATE_KEY ./src/Counter.sol:Counter\nNo files changed, compilation skipped\nDeployer: 0x496e09fcb240c33b8fda3b4b74d81697c03b6b3d\nDeployed to: 0x23d465eaa80ad2e5cdb1a2345e4b54edd12560d3\nTransaction hash: 0xf88c68c4a03a86b0e7ecb05cae8dea36f2896cd342a6af978cab11101c6224a9\nWe&#x27;ve just built, tested, and deployed our contract entirely within a Docker container! This guide was intended for testnet, but you can run the exact same Docker image targeting mainnet and be confident that the same code is being deployed by the same tooling.\n","title":"Creating a &quot;deployer&quot; image","titles":[null,"Running Foundry inside of Docker"]},"87":{"href":"/guides/foundry-in-docker#why-is-this-useful","html":"\n<p>Docker is about portability, reproducibility, and environment invariance. This means you can be less concerned about unexpected changes when you switch between environments, networks, developers, etc. Here are a few basic examples of why one may like to use Docker images for smart contract deployment:</p>\n<ul>\n<li>Reduces overhead of ensuring system level dependencies match between deployment environments (e.g. does your production runner always have the same version of <code>forge</code> as your dev runner?)</li>\n<li>Increases confidence that code has been tested prior to deployment and has not been altered (e.g. if, in the above image, your code re-compiles on deployment, that&#x27;s a major red flag).</li>\n<li>Eases pain points around segregation of duties: people with your mainnet credentials do not need to ensure they have the latest compiler, codebase, etc. It&#x27;s easy to ensure that the docker deploy image someone ran in testnet is identical to the one targeting mainnet.</li>\n<li>Docker is an accepted standard on virtually all public cloud providers. It makes it easy to schedule jobs, tasks, etc that need to interact with the blockchain.</li>\n</ul>\n","isPage":false,"text":"\nDocker is about portability, reproducibility, and environment invariance. This means you can be less concerned about unexpected changes when you switch between environments, networks, developers, etc. Here are a few basic examples of why one may like to use Docker images for smart contract deployment:\n\nReduces overhead of ensuring system level dependencies match between deployment environments (e.g. does your production runner always have the same version of forge as your dev runner?)\nIncreases confidence that code has been tested prior to deployment and has not been altered (e.g. if, in the above image, your code re-compiles on deployment, that&#x27;s a major red flag).\nEases pain points around segregation of duties: people with your mainnet credentials do not need to ensure they have the latest compiler, codebase, etc. It&#x27;s easy to ensure that the docker deploy image someone ran in testnet is identical to the one targeting mainnet.\nDocker is an accepted standard on virtually all public cloud providers. It makes it easy to schedule jobs, tasks, etc that need to interact with the blockchain.\n\n","title":"Why is this useful?","titles":[null,"Running Foundry inside of Docker"]},"88":{"href":"/guides/foundry-in-docker#using-docker-compose-to-launch-anvil","html":"\n<p>To launch Anvil using <a href=\"https://docs.docker.com/compose/\">Docker Compose</a> one could use the following <code>docker-compose.yml</code> configuration:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">services</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">  anvil</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">    image</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">ghcr.io/foundry-rs/foundry</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">    container_name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">anvil</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">    environment</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">      ANVIL_IP_ADDR</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0.0.0.0&quot;</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">    working_dir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/anvil</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">    ports</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      - </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;8545:8545&quot;</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">    command</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">anvil</span></span></code></pre>\n<p>Finally, run <code>docker compose up</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">docker compose up</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] Running 1/1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ✔ Container anvil  Created</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Attaching to anvil</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">anvil  |</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">anvil  |</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">anvil  |                              _   _</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">anvil  |                             (_) | |</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">anvil  |       __ _   _ __   __   __  _  | |</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">anvil  |      / </span><span style=\"color:#24292E;font-style:italic;--shiki-dark:#ADBAC7;--shiki-dark-font-style:italic\">_` | | &#x27;_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> \\  \\ \\ / / | | | |</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">anvil  |     | (_| | | | | |  \\ V /  | | | |</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">anvil  |      </span><span style=\"color:#005CC5;--shiki-dark:#F47067\">\\_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">_,</span><span style=\"color:#24292E;font-style:italic;--shiki-dark:#ADBAC7;--shiki-dark-font-style:italic\">_| |_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">| |</span><span style=\"color:#24292E;font-style:italic;--shiki-dark:#ADBAC7;--shiki-dark-font-style:italic\">_|   </span><span style=\"color:#005CC5;font-style:italic;--shiki-dark:#F47067;--shiki-dark-font-style:italic\">\\_</span><span style=\"color:#24292E;font-style:italic;--shiki-dark:#ADBAC7;--shiki-dark-font-style:italic\">/   |_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">| |_|</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">anvil  |</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">anvil  |     0.3.1-dev (fea38858b0 2025-01-21T16:48:49.865302749Z)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">anvil  |     https://github.com/foundry-rs/foundry</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">anvil  |     ...</span></span></code></pre>","isPage":false,"text":"\nTo launch Anvil using Docker Compose one could use the following docker-compose.yml configuration:\nservices:\n  anvil:\n    image: ghcr.io/foundry-rs/foundry\n    container_name: anvil\n    environment:\n      ANVIL_IP_ADDR: &quot;0.0.0.0&quot;\n    working_dir: /anvil\n    ports:\n      - &quot;8545:8545&quot;\n    command: anvil\nFinally, run docker compose up.\ndocker compose up\n[+] Running 1/1\n ✔ Container anvil  Created\nAttaching to anvil\nanvil  |\nanvil  |\nanvil  |                              _   _\nanvil  |                             (_) | |\nanvil  |       __ _   _ __   __   __  _  | |\nanvil  |      / _` | | &#x27;_ \\  \\ \\ / / | | | |\nanvil  |     | (_| | | | | |  \\ V /  | | | |\nanvil  |      \\__,_| |_| |_|   \\_/   |_| |_|\nanvil  |\nanvil  |     0.3.1-dev (fea38858b0 2025-01-21T16:48:49.865302749Z)\nanvil  |     https://github.com/foundry-rs/foundry\nanvil  |     ...","title":"Using docker-compose to launch Anvil","titles":[null,"Running Foundry inside of Docker"]},"89":{"href":"/guides/scripting-with-solidity#scripting-with-solidity","html":"\n<p>Solidity scripting is a way to declaratively deploy contracts using Solidity, instead of using the more limiting and less user friendly <a href=\"/forge/reference/forge-create\"><code>forge create</code></a>.</p>\n<p>Solidity scripts are like the scripts you write when working with tools like Hardhat; what makes Solidity scripting different is that they are written in Solidity instead of JavaScript, and they are run on the fast Foundry EVM backend, which provides advanced simulation with dry-run capabilities.</p>\n","isPage":true,"text":"\nSolidity scripting is a way to declaratively deploy contracts using Solidity, instead of using the more limiting and less user friendly forge create.\nSolidity scripts are like the scripts you write when working with tools like Hardhat; what makes Solidity scripting different is that they are written in Solidity instead of JavaScript, and they are run on the fast Foundry EVM backend, which provides advanced simulation with dry-run capabilities.\n","title":"Scripting with Solidity","titles":[null]},"90":{"href":"/guides/scripting-with-solidity#overview","html":"\n<p><code>forge script</code> does not work in an asynchronous manner. First, it collects all transactions from the script, and only then does it broadcast them all. It can essentially be split into 4 phases:</p>\n<ol>\n<li>Local Simulation - The contract script is run in a local evm. If a rpc/fork url has been provided, it will execute the script in that context. Any <strong>external call</strong> (not static, not internal) from a <code>vm.broadcast</code> and/or <code>vm.startBroadcast</code> will be appended to a list.</li>\n<li>Onchain Simulation - Optional. If a rpc/fork url has been provided, then it will sequentially execute all the collected transactions from the previous phase here.</li>\n<li>Broadcasting - Optional. If the <code>--broadcast</code> flag is provided and the previous phases have succeeded, it will broadcast the transactions collected at step <code>1</code>. and simulated at step <code>2</code>.</li>\n<li>Verification - Optional. If the <code>--verify</code> flag is provided, there&#x27;s an API key, and the previous phases have succeeded it will attempt to verify the contract. (eg. etherscan).</li>\n</ol>\n<aside data-callout=\"tip\"><p>Transactions that previously failed or timed-out can be submitted again by providing <code>--resume</code> flag.</p></aside>\n<p>Given this flow, it&#x27;s important to be aware that transactions whose behaviour can be influenced by external state/actors might have a different result than what was simulated on step <code>2</code>, e.g. front running.</p>\n","isPage":false,"text":"\nforge script does not work in an asynchronous manner. First, it collects all transactions from the script, and only then does it broadcast them all. It can essentially be split into 4 phases:\n\nLocal Simulation - The contract script is run in a local evm. If a rpc/fork url has been provided, it will execute the script in that context. Any external call (not static, not internal) from a vm.broadcast and/or vm.startBroadcast will be appended to a list.\nOnchain Simulation - Optional. If a rpc/fork url has been provided, then it will sequentially execute all the collected transactions from the previous phase here.\nBroadcasting - Optional. If the --broadcast flag is provided and the previous phases have succeeded, it will broadcast the transactions collected at step 1. and simulated at step 2.\nVerification - Optional. If the --verify flag is provided, there&#x27;s an API key, and the previous phases have succeeded it will attempt to verify the contract. (eg. etherscan).\n\nTransactions that previously failed or timed-out can be submitted again by providing --resume flag.\nGiven this flow, it&#x27;s important to be aware that transactions whose behaviour can be influenced by external state/actors might have a different result than what was simulated on step 2, e.g. front running.\n","title":"Overview","titles":[null]},"91":{"href":"/guides/scripting-with-solidity#getting-started","html":"\n<p>Let&#x27;s try to deploy the basic <code>Counter</code> contract Foundry provides:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> init</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Counter</span></span></code></pre>\n<p>Next let&#x27;s try compiling our contracts to make sure everything is in order.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span></span></code></pre>\n","isPage":false,"text":"\nLet&#x27;s try to deploy the basic Counter contract Foundry provides:\nforge init Counter\nNext let&#x27;s try compiling our contracts to make sure everything is in order.\nforge build\n","title":"Getting started","titles":[null]},"92":{"href":"/guides/scripting-with-solidity#deploying-our-contract","html":"\n<p>We are going to deploy the <code>Counter</code> contract to the Sepolia testnet but in order to do so we will need to complete a few prerequisites:</p>\n<ol>\n<li>Get a Sepolia RPC URL.</li>\n</ol>\n<p>You can either grab an RPC URL from <a href=\"https://chainlist.org/chain/11155111\">Chainlist</a> or use an RPC provider like <a href=\"https://www.alchemy.com/\">Alchemy</a> or <a href=\"https://www.infura.io/\">Infura</a>.</p>\n<ol start=\"2\">\n<li>Get a one-time use private key for deploying.</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> wallet new`</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Successfully created new keypair.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Address:     &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">PUBLIC</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> KEY</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Private key: &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">PRIVATE_KEY</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n<ol start=\"3\">\n<li>Fund the private key.</li>\n</ol>\n<p>Grab some Sepolia testnet ETH, available in different faucets:</p>\n<ul>\n<li><a href=\"https://sepoliafaucet.com/\">Alchemy</a></li>\n<li><a href=\"https://faucet.quicknode.com/ethereum/sepolia\">Quicknode</a></li>\n<li><a href=\"https://sepolia-faucet.pk910.de/\">Proof of work faucet</a></li>\n</ul>\n<p>Some faucets require you to have a balance on Ethereum mainnet.</p>\n<p>If so, claim the testnet ETH on a wallet you control and transfer the testnet ETH to your newly created deployer keypair.</p>\n<ol start=\"4\">\n<li>Get a Sepolia Etherscan API key.</li>\n</ol>\n","isPage":false,"text":"\nWe are going to deploy the Counter contract to the Sepolia testnet but in order to do so we will need to complete a few prerequisites:\n\nGet a Sepolia RPC URL.\n\nYou can either grab an RPC URL from Chainlist or use an RPC provider like Alchemy or Infura.\n\nGet a one-time use private key for deploying.\n\n`cast wallet new`\nSuccessfully created new keypair.\nAddress:     &lt;PUBLIC KEY&gt;\nPrivate key: &lt;PRIVATE_KEY&gt;\n\nFund the private key.\n\nGrab some Sepolia testnet ETH, available in different faucets:\n\nAlchemy\nQuicknode\nProof of work faucet\n\nSome faucets require you to have a balance on Ethereum mainnet.\nIf so, claim the testnet ETH on a wallet you control and transfer the testnet ETH to your newly created deployer keypair.\n\nGet a Sepolia Etherscan API key.\n\n","title":"Deploying our contract","titles":[null]},"93":{"href":"/guides/scripting-with-solidity#configuring-foundrytoml","html":"\n<p>Once you have all that create a <code>.env</code> file and add the variables. Foundry automatically loads in a <code>.env</code> file present in your project directory.</p>\n<p>The .env file should follow this format:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">SEPOLIA_RPC_URL</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ETHERSCAN_API_KEY</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span></span></code></pre>\n<p>We now need to edit the <code>foundry.toml</code> file. There should already be one in the root of the project.</p>\n<p>Add the following lines to the end of the file:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">rpc_endpoints</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sepolia = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;${SEPOLIA_RPC_URL}&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">etherscan</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sepolia = { key = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;${ETHERSCAN_API_KEY}&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span></code></pre>\n<p>This creates a <a href=\"/reference/cheatcodes/rpc\">RPC alias</a> for Sepolia and loads the Etherscan API key.</p>\n<p>However this does not affect the <code>getChain</code> method.</p>\n","isPage":false,"text":"\nOnce you have all that create a .env file and add the variables. Foundry automatically loads in a .env file present in your project directory.\nThe .env file should follow this format:\nSEPOLIA_RPC_URL=\nETHERSCAN_API_KEY=\nWe now need to edit the foundry.toml file. There should already be one in the root of the project.\nAdd the following lines to the end of the file:\n[rpc_endpoints]\nsepolia = &quot;${SEPOLIA_RPC_URL}&quot;\n \n[etherscan]\nsepolia = { key = &quot;${ETHERSCAN_API_KEY}&quot; }\nThis creates a RPC alias for Sepolia and loads the Etherscan API key.\nHowever this does not affect the getChain method.\n","title":"Configuring foundry.toml","titles":[null,"Deploying our contract"]},"94":{"href":"/guides/scripting-with-solidity#writing-the-script","html":"\n<p>Next, navigate to the <code>script</code> folder and locate the <code>CounterScript</code>.</p>\n<p>Modify the contents so it looks like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// SPDX-License-Identifier: UNLICENSED</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ^0.8.13</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">console</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/Script.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Counter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;../src/Counter.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CounterScript</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Counter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> counter;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        counter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Counter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Now let&#x27;s read through the code and figure out what it actually means and does.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// SPDX-License-Identifier: UNLICENSED</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ^0.8.13</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Remember even if it&#x27;s a script it still works like a smart contract, but is never deployed, so just like any other smart contract written in Solidity the <code>pragma version</code> has to be specified.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">console</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/Script.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Counter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;../src/Counter.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Just like we may import Forge Std to get testing utilities when writing tests, it also provides some scripting utilities.</p>\n<p>The next line just imports the <code>Counter</code> contract.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CounterScript</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span></code></pre>\n<p>We have created a contract called <code>CounterScript</code> and it inherits <code>Script</code> from Forge Std.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span></code></pre>\n<p>By default, scripts are executed by calling the function named <code>run</code>, our entrypoint.</p>\n<p>This loads in the private key from our <code>.env</code> file. <strong>Note:</strong> you must be careful when exposing private keys in a <code>.env</code> file and loading them into programs. This is only recommended for use with non-privileged deployers or for local / test setups. For production setups please review the various <a href=\"/forge/reference/forge-script#wallet-options---raw\">wallet options</a> that Foundry supports.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n<p>This is a special cheatcode that records calls and contract creations made by our main script contract. The private key of the sender we will pass in will instruct it to use that key for signing the transactions. Later, we will broadcast these transactions to deploy our <code>Counter</code> contract.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Counter counter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Counter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n<p>Here we have just created our <code>Counter</code> contract. Because we called <code>vm.startBroadcast()</code> before this line, the contract creation will be recorded by Forge, and as mentioned previously, we can broadcast the transaction to deploy the contract on-chain. The broadcast transaction logs will be stored in the <code>broadcast</code> directory by default. You can change the logs location by setting <a href=\"/config/reference/project#broadcast\"><code>broadcast</code></a> in your <code>foundry.toml</code> file.</p>\n<p>The broadcasting sender is determined by checking the following in order:</p>\n<ol>\n<li>If <code>--sender</code> argument was provided, that address is used.</li>\n<li>If exactly one signer (e.g. private key, hardware wallet, keystore) is set, that signer is used.</li>\n<li>Otherwise, the default Foundry sender (<code>0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38</code>) is attempted to be used.</li>\n</ol>\n<p>Now that you&#x27;re up to speed about what the script smart contract does, let&#x27;s run it.</p>\n","isPage":false,"text":"\nNext, navigate to the script folder and locate the CounterScript.\nModify the contents so it looks like this:\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n \nimport {Script, console} from &quot;forge-std/Script.sol&quot;;\nimport {Counter} from &quot;../src/Counter.sol&quot;;\n \ncontract CounterScript is Script {\n    Counter public counter;\n \n    function setUp() public {}\n \n    function run() public {\n        vm.startBroadcast();\n \n        counter = new Counter();\n \n        vm.stopBroadcast();\n    }\n}\nNow let&#x27;s read through the code and figure out what it actually means and does.\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\nRemember even if it&#x27;s a script it still works like a smart contract, but is never deployed, so just like any other smart contract written in Solidity the pragma version has to be specified.\nimport {Script, console} from &quot;forge-std/Script.sol&quot;;\nimport {Counter} from &quot;../src/Counter.sol&quot;;\nJust like we may import Forge Std to get testing utilities when writing tests, it also provides some scripting utilities.\nThe next line just imports the Counter contract.\ncontract CounterScript is Script {\nWe have created a contract called CounterScript and it inherits Script from Forge Std.\nfunction run() external {\nBy default, scripts are executed by calling the function named run, our entrypoint.\nThis loads in the private key from our .env file. Note: you must be careful when exposing private keys in a .env file and loading them into programs. This is only recommended for use with non-privileged deployers or for local / test setups. For production setups please review the various wallet options that Foundry supports.\nvm.startBroadcast();\nThis is a special cheatcode that records calls and contract creations made by our main script contract. The private key of the sender we will pass in will instruct it to use that key for signing the transactions. Later, we will broadcast these transactions to deploy our Counter contract.\nCounter counter = new Counter();\nHere we have just created our Counter contract. Because we called vm.startBroadcast() before this line, the contract creation will be recorded by Forge, and as mentioned previously, we can broadcast the transaction to deploy the contract on-chain. The broadcast transaction logs will be stored in the broadcast directory by default. You can change the logs location by setting broadcast in your foundry.toml file.\nThe broadcasting sender is determined by checking the following in order:\n\nIf --sender argument was provided, that address is used.\nIf exactly one signer (e.g. private key, hardware wallet, keystore) is set, that signer is used.\nOtherwise, the default Foundry sender (0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38) is attempted to be used.\n\nNow that you&#x27;re up to speed about what the script smart contract does, let&#x27;s run it.\n","title":"Writing the script","titles":[null,"Deploying our contract"]},"95":{"href":"/guides/scripting-with-solidity#deploying-to-a-testnet","html":"\n<p>You should have added the variables we mentioned earlier to the <code>.env</code> for this next part to work.</p>\n<p>At the root of the project run:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># To load the variables in the .env file</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">source</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> .env</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># To deploy and verify our contract</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> script</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --chain</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> sepolia</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> script/Counter.s.sol:CounterScript</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --rpc-url</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $SEPOLIA_RPC_URL </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">--broadcast</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --verify</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -vvvv</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --interactives</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span></span></code></pre>\n<p>Note the <code>--interactives 1</code>, this will open an interactive prompt to enter your private key. For anything beyond a simple testnet deployment in a development setting you are <strong>STRONGLY</strong> <a href=\"/guides/best-practices/key-management\">recommended to use a hardware wallet or a password protected keystore</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Enter private key: &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">PRIVATE_KEY</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n<p>Forge is going to run our script and broadcast the transactions for us - this can take a little while, since Forge will also wait for the transaction receipts. You should see something like this after a minute or so:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">⠊</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] Compiling...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">No files changed, compilation skipped</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Enter private key:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Traces:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  [</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">137029</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] CounterScript::run()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ├─ [</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] VM::startBroadcast()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    │   └─ ← [</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">Return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ├─ [</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">96345</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] → new Counter@&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">ADDRESS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    │   └─ ← [</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">Return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] 481 bytes of code</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ├─ [</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] VM::stopBroadcast()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    │   └─ ← [</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">Return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    └─ ← [</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">Stop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Script ran successfully.</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;font-weight:bold;--shiki-dark:#6CB6FF;--shiki-dark-font-weight:bold\">## Setting up 1 EVM.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;font-weight:bold;--shiki-dark:#6CB6FF;--shiki-dark-font-weight:bold\">==========================</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Simulated On-chain Traces:</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  [</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">96345</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] → new Counter@&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">ADDRESS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    └─ ← [</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">Return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] 481 bytes of code</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;font-weight:bold;--shiki-dark:#6CB6FF;--shiki-dark-font-weight:bold\">==========================</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Chain 11155111</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Estimated gas price: &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">GAS_PRICE</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; gwei</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Estimated total gas used for script: &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">GAS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Estimated amount required: &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">GAS_AMOUNT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; ETH</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;font-weight:bold;--shiki-dark:#6CB6FF;--shiki-dark-font-weight:bold\">==========================</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;font-weight:bold;--shiki-dark:#6CB6FF;--shiki-dark-font-weight:bold\">##### sepolia</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">✅  [</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">Success</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] Hash: &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">HASH</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Contract Address: &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">ADDRESS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Block: &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">BLOCK</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Paid: &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">GAS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">✅ Sequence #1 on sepolia | Total Paid: &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">GAS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;font-weight:bold;--shiki-dark:#6CB6FF;--shiki-dark-font-weight:bold\">==========================</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;font-weight:bold;--shiki-dark:#6CB6FF;--shiki-dark-font-weight:bold\">##</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Start verification for (1) contracts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Start verifying contract </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">`&lt;ADDRESS&gt;`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> deployed on sepolia</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Compiler version: 0.8.28</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Submitting verification for [</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">src/Counter.sol:Counter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">ADDRESS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Submitted contract for verification:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tResponse: `OK`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tGUID: `&lt;GUID&gt;`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">\tURL: https://sepolia.etherscan.io/address/&lt;ADDRESS&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Contract verification status:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Response: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">`NOTOK`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Details: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">`Pending in queue`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Warning: Verification is still pending...; waiting 15 seconds before trying again (7 tries remaining)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Contract verification status:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Response: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">`OK`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Details: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">`Pass - Verified`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Contract successfully verified</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">All (1) contracts were verified!</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Transactions saved to: /home/user/counter/broadcast/Counter.s.sol/11155111/run-latest.json</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Sensitive values saved to: /home/user/counter/cache/Counter.s.sol/11155111/run-latest.json</span></span></code></pre>\n<p>This confirms that you have successfully deployed the <code>Counter</code> contract to the Sepolia testnet and have also verified it on Etherscan, all with one command.</p>\n","isPage":false,"text":"\nYou should have added the variables we mentioned earlier to the .env for this next part to work.\nAt the root of the project run:\n# To load the variables in the .env file\nsource .env\n \n# To deploy and verify our contract\nforge script --chain sepolia script/Counter.s.sol:CounterScript --rpc-url $SEPOLIA_RPC_URL --broadcast --verify -vvvv --interactives 1\nNote the --interactives 1, this will open an interactive prompt to enter your private key. For anything beyond a simple testnet deployment in a development setting you are STRONGLY recommended to use a hardware wallet or a password protected keystore.\nEnter private key: &lt;PRIVATE_KEY&gt;\nForge is going to run our script and broadcast the transactions for us - this can take a little while, since Forge will also wait for the transaction receipts. You should see something like this after a minute or so:\n[⠊] Compiling...\nNo files changed, compilation skipped\nEnter private key:\nTraces:\n  [137029] CounterScript::run()\n    ├─ [0] VM::startBroadcast()\n    │   └─ ← [Return]\n    ├─ [96345] → new Counter@&lt;ADDRESS&gt;\n    │   └─ ← [Return] 481 bytes of code\n    ├─ [0] VM::stopBroadcast()\n    │   └─ ← [Return]\n    └─ ← [Stop]\n \n \nScript ran successfully.\n \n## Setting up 1 EVM.\n==========================\nSimulated On-chain Traces:\n \n  [96345] → new Counter@&lt;ADDRESS&gt;\n    └─ ← [Return] 481 bytes of code\n \n \n==========================\n \nChain 11155111\n \nEstimated gas price: &lt;GAS_PRICE&gt; gwei\n \nEstimated total gas used for script: &lt;GAS&gt;\n \nEstimated amount required: &lt;GAS_AMOUNT&gt; ETH\n \n==========================\n \n##### sepolia\n✅  [Success] Hash: &lt;HASH&gt;\nContract Address: &lt;ADDRESS&gt;\nBlock: &lt;BLOCK&gt;\nPaid: &lt;GAS&gt;\n \n✅ Sequence #1 on sepolia | Total Paid: &lt;GAS&gt;\n \n \n==========================\n \nONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.\n##\nStart verification for (1) contracts\nStart verifying contract `&lt;ADDRESS&gt;` deployed on sepolia\nCompiler version: 0.8.28\n \nSubmitting verification for [src/Counter.sol:Counter] &lt;ADDRESS&gt;.\nSubmitted contract for verification:\n\tResponse: `OK`\n\tGUID: `&lt;GUID&gt;`\n\tURL: https://sepolia.etherscan.io/address/&lt;ADDRESS&gt;\nContract verification status:\nResponse: `NOTOK`\nDetails: `Pending in queue`\nWarning: Verification is still pending...; waiting 15 seconds before trying again (7 tries remaining)\nContract verification status:\nResponse: `OK`\nDetails: `Pass - Verified`\nContract successfully verified\nAll (1) contracts were verified!\n \nTransactions saved to: /home/user/counter/broadcast/Counter.s.sol/11155111/run-latest.json\n \nSensitive values saved to: /home/user/counter/cache/Counter.s.sol/11155111/run-latest.json\nThis confirms that you have successfully deployed the Counter contract to the Sepolia testnet and have also verified it on Etherscan, all with one command.\n","title":"Deploying to a testnet","titles":[null,"Deploying our contract"]},"96":{"href":"/guides/scripting-with-solidity#deploying-to-a-local-anvil-instance","html":"\n<p>You can deploy to Anvil, the local testnet, by configuring the <code>--fork-url</code>.</p>\n<p>Let&#x27;s start Anvil in one terminal window:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">anvil</span></span></code></pre>\n<p>This will show you are list of default accounts.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Available Accounts</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;font-weight:bold;--shiki-dark:#6CB6FF;--shiki-dark-font-weight:bold\">==================</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(0) 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 (10000.000000000000000000 ETH)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">...</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Private Keys</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;font-weight:bold;--shiki-dark:#6CB6FF;--shiki-dark-font-weight:bold\">==================</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(0) 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">...</span></span></code></pre>\n<p>Then run the following script in a different terminal window:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> script</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> script/Counter.s.sol:CounterScript</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --fork-url</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> http://localhost:8545</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --broadcast</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --interactives</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span></span></code></pre>\n<p>Next enter the private key, pick one from the list.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Enter private key: &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">PRIVATE_KEY</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">⠊</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] Compiling...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">No files changed, compilation skipped</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Enter private key:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Script ran successfully.</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;font-weight:bold;--shiki-dark:#6CB6FF;--shiki-dark-font-weight:bold\">## Setting up 1 EVM.</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;font-weight:bold;--shiki-dark:#6CB6FF;--shiki-dark-font-weight:bold\">==========================</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Chain 31337</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Estimated gas price: 2.000000001 gwei</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Estimated total gas used for script: 203856</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Estimated amount required: 0.000407712000203856 ETH</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;font-weight:bold;--shiki-dark:#6CB6FF;--shiki-dark-font-weight:bold\">==========================</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;font-weight:bold;--shiki-dark:#6CB6FF;--shiki-dark-font-weight:bold\">##### anvil-hardhat</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">✅  [</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">Success</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] Hash: 0x6795deaad7fd483eda4b16af7d8b871c7f6e49beb50709ce1cf0ca81c29247d1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Contract Address: 0x5FbDB2315678afecb367f032d93F642f64180aa3</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Block: 1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Paid: 0.000156813000156813 ETH (156813 gas * 1.000000001 gwei)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">✅ Sequence #1 on anvil-hardhat | Total Paid: 0.000156813000156813 ETH (156813 gas * avg 1.000000001 gwei)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;font-weight:bold;--shiki-dark:#6CB6FF;--shiki-dark-font-weight:bold\">==========================</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Transactions saved to: /home/user/counter/broadcast/Counter.s.sol/31337/run-latest.json</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Sensitive values saved to: /home/user/counter/cache/Counter.s.sol/31337/run-latest.json</span></span></code></pre>","isPage":false,"text":"\nYou can deploy to Anvil, the local testnet, by configuring the --fork-url.\nLet&#x27;s start Anvil in one terminal window:\nanvil\nThis will show you are list of default accounts.\nAvailable Accounts\n==================\n \n(0) 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 (10000.000000000000000000 ETH)\n...\n \nPrivate Keys\n==================\n \n(0) 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\n...\nThen run the following script in a different terminal window:\nforge script script/Counter.s.sol:CounterScript --fork-url http://localhost:8545 --broadcast --interactives 1\nNext enter the private key, pick one from the list.\nEnter private key: &lt;PRIVATE_KEY&gt;\n[⠊] Compiling...\nNo files changed, compilation skipped\nEnter private key:\nScript ran successfully.\n \n## Setting up 1 EVM.\n \n==========================\n \nChain 31337\n \nEstimated gas price: 2.000000001 gwei\n \nEstimated total gas used for script: 203856\n \nEstimated amount required: 0.000407712000203856 ETH\n \n==========================\n \n##### anvil-hardhat\n✅  [Success] Hash: 0x6795deaad7fd483eda4b16af7d8b871c7f6e49beb50709ce1cf0ca81c29247d1\nContract Address: 0x5FbDB2315678afecb367f032d93F642f64180aa3\nBlock: 1\nPaid: 0.000156813000156813 ETH (156813 gas * 1.000000001 gwei)\n \n✅ Sequence #1 on anvil-hardhat | Total Paid: 0.000156813000156813 ETH (156813 gas * avg 1.000000001 gwei)\n \n \n==========================\n \nONCHAIN EXECUTION COMPLETE &amp; SUCCESSFUL.\n \nTransactions saved to: /home/user/counter/broadcast/Counter.s.sol/31337/run-latest.json\n \nSensitive values saved to: /home/user/counter/cache/Counter.s.sol/31337/run-latest.json","title":"Deploying to a local Anvil instance","titles":[null,"Deploying our contract"]},"97":{"href":"/guides/video-tutorials#foundry-tutorial-videos","html":"\n<p>Unofficial <em>youtube playlists</em> of Foundry tutorials from Blockchain educators.</p>\n<table><thead><tr><th style=\"text-align:center\">URL</th><th style=\"text-align:center\">Description</th><th style=\"text-align:center\">Author</th></tr></thead><tbody><tr><td style=\"text-align:center\"><a href=\"https://www.youtube.com/playlist?list=PL4Rj_WH6yLgWe7TxankiqkrkVKXIwOP42\" target=\"_blank\"><img src=\"https://i.ytimg.com/vi/umepbfKp5rI/hq720.jpg\" alt=\"\"/></a></td><td style=\"text-align:center\"><a href=\"https://www.youtube.com/playlist?list=PL4Rj_WH6yLgWe7TxankiqkrkVKXIwOP42\" target=\"_blank\"><em>Blockchain Developer, Solidity, Foundry Full Course 2023</em> ~ Learn Solidity, Blockchain Development, &amp; Smart Contracts Powered By AI - Full Course</a></td><td style=\"text-align:center\"><a href=\"https://www.youtube.com/@PatrickAlphaC\" target=\"_blank\">Patrick Collins</a></td></tr><tr><td style=\"text-align:center\"><a href=\"https://youtube.com/playlist?list=PLO5VPQH6OWdUrKEWPF07CSuVm3T99DQki\" target=\"_blank\"><img src=\"https://i.ytimg.com/vi/tgs5q-GJmg4/hq720.jpg\" alt=\"\"/></a></td><td style=\"text-align:center\"><a href=\"https://youtube.com/playlist?list=PLO5VPQH6OWdUrKEWPF07CSuVm3T99DQki\" target=\"_blank\"><em>Foundry</em> ~ Playlist of beginner level videos on Foundry</a></td><td style=\"text-align:center\"><a href=\"https://www.youtube.com/@smartcontractprogrammer\" target=\"_blank\">Smart Contract Programmer</a></td></tr><tr><td style=\"text-align:center\"><a href=\"https://www.youtube.com/watch?v=hOB1Yiuxojk\" target=\"_blank\"><img src=\"https://i.ytimg.com/vi/hOB1Yiuxojk/maxresdefault.jpg\" alt=\"\"/></a></td><td style=\"text-align:center\"><a href=\"https://www.youtube.com/watch?v=hOB1Yiuxojk\" target=\"_blank\">A Complete Introduction to Smart Contract Development With Foundry</a></td><td style=\"text-align:center\"><a href=\"https://www.youtube.com/@axelar-network\" target=\"_blank\">Axelar</a></td></tr><tr><td style=\"text-align:center\"><a href=\"https://updraft.cyfrin.io/courses/foundry\" target=\"_blank\"><img src=\"https://cyfrin-updraft-cms-main.imgix.net/assets/preview_images/f101.png\" alt=\"\"/></a></td><td style=\"text-align:center\"><a href=\"https://updraft.cyfrin.io/courses/foundry\" target=\"_blank\">Cyfrin Updraft - Foundry Fundamentals</a></td><td style=\"text-align:center\"><a href=\"https://updraft.cyfrin.io/\">Cyfrin Updraft</a></td></tr><tr><td style=\"text-align:center\"><a href=\"https://updraft.cyfrin.io/courses/advanced-foundry\" target=\"_blank\"><img src=\"https://cyfrin-updraft-cms-main.imgix.net/assets/preview_images/af.png\" alt=\"\"/></a></td><td style=\"text-align:center\"><a href=\"https://updraft.cyfrin.io/courses/advanced-foundry\" target=\"_blank\">Cyfrin Updraft - Advanced Foundry</a></td><td style=\"text-align:center\"><a href=\"https://updraft.cyfrin.io/\">Cyfrin Updraft</a></td></tr></tbody></table>","isPage":true,"text":"\nUnofficial youtube playlists of Foundry tutorials from Blockchain educators.\nURLDescriptionAuthorBlockchain Developer, Solidity, Foundry Full Course 2023 ~ Learn Solidity, Blockchain Development, &amp; Smart Contracts Powered By AI - Full CoursePatrick CollinsFoundry ~ Playlist of beginner level videos on FoundrySmart Contract ProgrammerA Complete Introduction to Smart Contract Development With FoundryAxelarCyfrin Updraft - Foundry FundamentalsCyfrin UpdraftCyfrin Updraft - Advanced FoundryCyfrin Updraft","title":"Foundry Tutorial Videos","titles":[null]},"98":{"href":"/config/continuous-integration#continuous-integration","html":"\n","isPage":true,"text":"\n","title":"Continuous Integration","titles":[null]},"99":{"href":"/config/continuous-integration#github-actions","html":"\n<p>To test your project using GitHub Actions, here is a sample workflow:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">push</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">test</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">jobs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">  check</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">    name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">Foundry project</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">    runs-on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">ubuntu-latest</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">    steps</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      - </span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">uses</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">actions/checkout@v4</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">        with</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">          submodules</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">recursive</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      - </span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">Install Foundry</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">        uses</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">foundry-rs/foundry-toolchain@v1</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">        with</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">          version</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">stable</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      - </span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">Run tests</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">        run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">forge test -vvv</span></span></code></pre>\n","isPage":false,"text":"\nTo test your project using GitHub Actions, here is a sample workflow:\non: [push]\n \nname: test\n \njobs:\n  check:\n    name: Foundry project\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          submodules: recursive\n \n      - name: Install Foundry\n        uses: foundry-rs/foundry-toolchain@v1\n        with:\n          version: stable\n \n      - name: Run tests\n        run: forge test -vvv\n","title":"GitHub Actions","titles":[null,"Continuous Integration"]},"100":{"href":"/config/continuous-integration#travis-ci","html":"\n<p>To test your project using Travis CI, here is a sample workflow:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">language</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">rust</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">cache</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">  cargo</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">  directories</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    - </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">$HOME/.foundry</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">install</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  - </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">curl -L https://foundry.paradigm.xyz | bash</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  - </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">export PATH=$PATH:$HOME/.foundry/bin</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  - </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">foundryup -b master</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  - </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">forge test -vvv</span></span></code></pre>\n","isPage":false,"text":"\nTo test your project using Travis CI, here is a sample workflow:\nlanguage: rust\ncache:\n  cargo: true\n  directories:\n    - $HOME/.foundry\n \ninstall:\n  - curl -L https://foundry.paradigm.xyz | bash\n  - export PATH=$PATH:$HOME/.foundry/bin\n  - foundryup -b master\n \nscript:\n  - forge test -vvv\n","title":"Travis CI","titles":[null,"Continuous Integration"]},"101":{"href":"/config/continuous-integration#gitlab-ci","html":"\n<p>To test your project using GitLab CI, here is a sample workflow:\nNote: check out <a href=\"https://docs.gitlab.com/runner/executors/docker.html#how-pull-policies-work\">Policy</a> to fetch the remote image</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">variables</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">  GIT_SUBMODULE_STRATEGY</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">recursive</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">jobs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">  image</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">ghcr.io/foundry-rs/foundry</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">  script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    - </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">forge install</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    - </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">forge test -vvv</span></span></code></pre>","isPage":false,"text":"\nTo test your project using GitLab CI, here is a sample workflow:\nNote: check out Policy to fetch the remote image\nvariables:\n  GIT_SUBMODULE_STRATEGY: recursive\n \njobs:\n  image: ghcr.io/foundry-rs/foundry\n  script:\n    - forge install\n    - forge test -vvv","title":"GitLab CI","titles":[null]},"102":{"href":"/config/dynamic-test-linking#dynamic-test-linking","html":"\n<p><a href=\"https://github.com/foundry-rs/foundry/releases/tag/v1.1.0\">v1.1 release</a> comes with dynamic test linking feature, built on top of <a href=\"https://github.com/paradigmxyz/solar\">Solar</a>, which eliminates redundant test compilation when changing the contract logic, Foundry skips recompiling large test suites, resulting in massive time savings.</p>\n<p>How it works:</p>\n<p>On the initial build, Foundry preprocesses test contracts by extracting constructor parameters of the contracts under test and replacing direct instantiations with <a href=\"/reference/cheatcodes/get-deployed-code\"><code>deployCode</code> cheatcodes</a>.</p>\n<p>Subsequent compilations reuse pre-built artifacts for deployed contracts instead of recompiling both the source and all associated test contracts.\nDynamic test linking capability is built on top of <a href=\"https://github.com/paradigmxyz/solar\">Solar</a>, the blazingly fast and modular Solidity compiler.</p>\n<p>You can enable this feature by setting the <code>dynamic_test_linking</code> configuration option to <code>true</code> in your <code>foundry.toml</code> file:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">profile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#B31D28;font-style:italic;--shiki-dark:#FF938A;--shiki-dark-font-style:italic\">...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">dynamic_test_linking = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span></code></pre>\n<p>OR by passing the <code>--dynamic-test-linking</code> flag to the <code>forge build</code> command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --dynamic-test-linking</span></span></code></pre>\n<p>We are looking into enabling this by default in the future.</p>\n<p>Benchmarks from the <a href=\"https://github.com/foundry-rs/foundry/pull/10010\">PR</a> show greater than 10x speedup in compilation time for large projects:</p>\n<table><thead><tr><th>Project</th><th>Change</th><th>Files compiled (with / without, after initial compile)</th><th>Time to compile (with / without, after initial compile)</th></tr></thead><tbody><tr><td><a href=\"https://github.com/Uniswap/v4-core/tree/80311e34080fee64b6fc6c916e9a51a437d0e482\">uniswap v4-core</a></td><td>add <code>Lock.lock();</code> at <a href=\"https://github.com/Uniswap/v4-core/blob/80311e34080fee64b6fc6c916e9a51a437d0e482/src/PoolManager.sol#L107\">PoolManager.sol#L107</a></td><td>1 / 19</td><td>2.25s / 165.13s</td></tr><tr><td><a href=\"https://github.com/sparkdotfi/spark-psm/tree/9d0bcc045e81407408368c9a4bb6e3f13db77e32\">spark-psm</a></td><td>change <code>amountOut &lt; minAmountOut</code> at <a href=\"https://github.com/sparkdotfi/spark-psm/blob/9d0bcc045e81407408368c9a4bb6e3f13db77e32/src/PSM3.sol#L125\">PSM3.sol#L125</a></td><td>3 / 28</td><td>2.14s / 16.15s</td></tr><tr><td><a href=\"https://github.com/morpho-org/morpho-blue-bundlers/tree/1fa17256abb86c4de48fd5e251ebd46aae70ca1a\">morpho-blue-bundlers</a></td><td>change <code>if (assets &lt; 0)</code> at <a href=\"https://github.com/morpho-org/morpho-blue-bundlers/blob/1fa17256abb86c4de48fd5e251ebd46aae70ca1a/src/MorphoBundler.sol#L106\">MorphoBundler.sol#L106</a></td><td>11 / 36</td><td>16.39s / 251.05s</td></tr><tr><td><a href=\"https://github.com/morpho-org/morpho-blue/commit/9e2b0755b47bbe5b09bf1be8f00e060d4eab6f1c\">morpho-blue</a></td><td>add <code>require(assets != 0, ErrorsLib.ZERO_ASSETS)</code> at <a href=\"https://github.com/morpho-org/morpho-blue/blob/9e2b0755b47bbe5b09bf1be8f00e060d4eab6f1c/src/Morpho.sol#L424\">Morpho.sol#L424</a></td><td>1 / 23</td><td>1.01s / 133.73s</td></tr><tr><td><a href=\"https://github.com/sablier-labs/lockup/tree/b2f33926fcac72a1a855c6b8ccaa75166895f13c\">sablier lockup</a></td><td>change <code>if (cliffTime &lt; 0)</code> at <a href=\"https://github.com/sablier-labs/lockup/blob/b2f33926fcac72a1a855c6b8ccaa75166895f13c/src/SablierLockup.sol#L480\">SablierLockup.sol#L480</a></td><td>1 / 104</td><td>781ms / 71.29s</td></tr><tr><td><a href=\"https://github.com/Vectorized/solady/commit/724c39bdfebb593157c2dfa6797c07a25dfb564c\">solady</a></td><td>add additional <code>_setOwner(newOwner)</code> at <a href=\"https://github.com/Vectorized/solady/blob/724c39bdfebb593157c2dfa6797c07a25dfb564c/src/auth/Ownable.sol#L182\">Ownable.sol#L182</a></td><td>9 / 14</td><td>6.17s / 6.34s</td></tr><tr><td><a href=\"https://github.com/euler-xyz/ethereum-vault-connector/commit/64f6d2171a57e02a0f95bcbdecf1d92e9d253d40\">euler evc</a></td><td>change <code>SET_MAX_ELEMENTS</code> to <code>11</code> at <a href=\"https://github.com/euler-xyz/ethereum-vault-connector/blob/64f6d2171a57e02a0f95bcbdecf1d92e9d253d40/src/Set.sol#L7\">Set.sol#L7</a></td><td>28 / 30</td><td>9.17s / 9.40s</td></tr></tbody></table>","isPage":true,"text":"\nv1.1 release comes with dynamic test linking feature, built on top of Solar, which eliminates redundant test compilation when changing the contract logic, Foundry skips recompiling large test suites, resulting in massive time savings.\nHow it works:\nOn the initial build, Foundry preprocesses test contracts by extracting constructor parameters of the contracts under test and replacing direct instantiations with deployCode cheatcodes.\nSubsequent compilations reuse pre-built artifacts for deployed contracts instead of recompiling both the source and all associated test contracts.\nDynamic test linking capability is built on top of Solar, the blazingly fast and modular Solidity compiler.\nYou can enable this feature by setting the dynamic_test_linking configuration option to true in your foundry.toml file:\n[profile.default]\n...\ndynamic_test_linking = true\nOR by passing the --dynamic-test-linking flag to the forge build command:\nforge build --dynamic-test-linking\nWe are looking into enabling this by default in the future.\nBenchmarks from the PR show greater than 10x speedup in compilation time for large projects:\nProjectChangeFiles compiled (with / without, after initial compile)Time to compile (with / without, after initial compile)uniswap v4-coreadd Lock.lock(); at PoolManager.sol#L1071 / 192.25s / 165.13sspark-psmchange amountOut &lt; minAmountOut at PSM3.sol#L1253 / 282.14s / 16.15smorpho-blue-bundlerschange if (assets &lt; 0) at MorphoBundler.sol#L10611 / 3616.39s / 251.05smorpho-blueadd require(assets != 0, ErrorsLib.ZERO_ASSETS) at Morpho.sol#L4241 / 231.01s / 133.73ssablier lockupchange if (cliffTime &lt; 0) at SablierLockup.sol#L4801 / 104781ms / 71.29ssoladyadd additional _setOwner(newOwner) at Ownable.sol#L1829 / 146.17s / 6.34seuler evcchange SET_MAX_ELEMENTS to 11 at Set.sol#L728 / 309.17s / 9.40s","title":"Dynamic Test Linking","titles":[null]},"103":{"href":"/config/hardhat#integrating-with-hardhat","html":"\n<p>It&#x27;s possible to have your Foundry project work alongside <a href=\"https://hardhat.org/\">Hardhat</a>. This article assumes that you have Foundry and node installed in your system. This article also assumes familiarity with both Foundry and Hardhat.</p>\n","isPage":true,"text":"\nIt&#x27;s possible to have your Foundry project work alongside Hardhat. This article assumes that you have Foundry and node installed in your system. This article also assumes familiarity with both Foundry and Hardhat.\n","title":"Integrating with Hardhat","titles":[null]},"104":{"href":"/config/hardhat#why-does-this-not-work-out-of-the-box","html":"\n<p>Hardhat by default expects libraries to be installed in <code>node_modules</code>, the default folder for all NodeJS dependencies. Foundry expects them to be in <code>lib</code>. Of course <a href=\"/config/overview\">we can configure Foundry</a> but not easily to the directory structure of <code>node_modules</code>.</p>\n<p>For this reason, the recommended setup is to use <a href=\"https://www.npmjs.com/package/@nomicfoundation/hardhat-foundry\">hardhat-foundry</a>. When hardhat-foundry is installed and used correctly, Hardhat will use the same contracts directory that is used by Foundry, and it will be able to use dependencies installed with forge install.</p>\n<p>In this article we will cover both scenarios:</p>\n<ol>\n<li>Adding Hardhat to a Foundry project, and,</li>\n<li>Adding Foundry to a Hardhat project.</li>\n</ol>\n","isPage":false,"text":"\nHardhat by default expects libraries to be installed in node_modules, the default folder for all NodeJS dependencies. Foundry expects them to be in lib. Of course we can configure Foundry but not easily to the directory structure of node_modules.\nFor this reason, the recommended setup is to use hardhat-foundry. When hardhat-foundry is installed and used correctly, Hardhat will use the same contracts directory that is used by Foundry, and it will be able to use dependencies installed with forge install.\nIn this article we will cover both scenarios:\n\nAdding Hardhat to a Foundry project, and,\nAdding Foundry to a Hardhat project.\n\n","title":"Why does this not work out of the box?","titles":[null,"Integrating with Hardhat"]},"105":{"href":"/config/hardhat#just-show-me-the-example-repo","html":"\n<p><a href=\"https://github.com/foundry-rs/HardhatInFoundry\">Enjoy!</a></p>\n<p>If you want to adapt this to a Foundry project you already have or learn how it works, read below:</p>\n","isPage":false,"text":"\nEnjoy!\nIf you want to adapt this to a Foundry project you already have or learn how it works, read below:\n","title":"Just show me the example repo!","titles":[null,"Integrating with Hardhat"]},"106":{"href":"/config/hardhat#adding-hardhat-to-a-foundry-project","html":"\n<p>Inside your Foundry project working directory:</p>\n<ol>\n<li><code>npm init -y</code> - This will set up a <code>package.json</code> file.</li>\n<li><code>npm i --save-dev hardhat</code> - Install Hardhat as a dev dependency into your project.</li>\n<li><code>npx hardhat init</code> - Initialize your Hardhat project inside the same directory and choose the  &quot;<strong>Create an empty hardhat.config.js</strong>&quot; option. This will create a basic <code>hardhat.config.js</code> file.</li>\n<li><code>npm i --save-dev @nomicfoundation/hardhat-foundry @nomicfoundation/hardhat-toolbox</code> - This will install the hardhat-foundry plugin and the Hardhat toolbox plugin which is a combination of all the basic dependencies you need to run Hardhat tests.</li>\n</ol>\n<p>Your hardhat.config.js file should look like this to make the plugins work:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;@nomicfoundation/hardhat-toolbox&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;@nomicfoundation/hardhat-foundry&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/** </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">@type</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> import(&#x27;hardhat/config&#x27;).HardhatUserConfig */</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">module</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">exports</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  solidity: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0.8.19&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">};</span></span></code></pre>\n<ol start=\"5\">\n<li>By default, a Foundry project ships with a simple <code>Counter.sol</code> contract and a couple of tests. Create a file named <code>Counter.t.js</code> inside the <code>test</code> directory parallel to the default <code>Counter.t.sol</code> file.</li>\n<li>Add the following code to the <code>Counter.t.js</code> file:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;chai&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hre</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;hardhat&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">loadFixture</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;@nomicfoundation/hardhat-toolbox/network-helpers&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">describe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Counter contract&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> CounterLockFixture</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> counter</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ethers.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deployContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Counter&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { counter };</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  it</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Should increment the number correctly&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">counter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> loadFixture</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(CounterLockFixture);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">increment</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()).to.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">equal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // This is not a fuzz test because Hardhat does not support fuzzing yet.</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  it</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Should set the number correctly&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">counter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> loadFixture</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(CounterLockFixture);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()).to.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">equal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  });</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span></code></pre>\n<p>This piece of code will execute the same tests as the default <code>Counter.t.sol</code> file.</p>\n<p>And this is it!\nYou can create Hardhat and Foundry tests in the same <code>test</code> directory and run them with <code>npx hardhat test</code> and <code>forge test</code> respectively.\nCheck out <a href=\"https://hardhat.org/docs\">Hardhat&#x27;s documentation</a> to learn more.</p>\n","isPage":false,"text":"\nInside your Foundry project working directory:\n\nnpm init -y - This will set up a package.json file.\nnpm i --save-dev hardhat - Install Hardhat as a dev dependency into your project.\nnpx hardhat init - Initialize your Hardhat project inside the same directory and choose the  &quot;Create an empty hardhat.config.js&quot; option. This will create a basic hardhat.config.js file.\nnpm i --save-dev @nomicfoundation/hardhat-foundry @nomicfoundation/hardhat-toolbox - This will install the hardhat-foundry plugin and the Hardhat toolbox plugin which is a combination of all the basic dependencies you need to run Hardhat tests.\n\nYour hardhat.config.js file should look like this to make the plugins work:\nrequire(&quot;@nomicfoundation/hardhat-toolbox&quot;);\nrequire(&quot;@nomicfoundation/hardhat-foundry&quot;);\n/** @type import(&#x27;hardhat/config&#x27;).HardhatUserConfig */\nmodule.exports = {\n  solidity: &quot;0.8.19&quot;,\n};\n\nBy default, a Foundry project ships with a simple Counter.sol contract and a couple of tests. Create a file named Counter.t.js inside the test directory parallel to the default Counter.t.sol file.\nAdd the following code to the Counter.t.js file:\n\nconst { expect } = require(&quot;chai&quot;);\nconst hre = require(&quot;hardhat&quot;);\nconst { loadFixture } = require(&quot;@nomicfoundation/hardhat-toolbox/network-helpers&quot;);\n \ndescribe(&quot;Counter contract&quot;, function () {\n  async function CounterLockFixture() {\n    const counter = await ethers.deployContract(&quot;Counter&quot;);\n    await counter.setNumber(0);\n \n    return { counter };\n  }\n \n  it(&quot;Should increment the number correctly&quot;, async function () {\n    const { counter } = await loadFixture(CounterLockFixture);\n    await counter.increment();\n    expect(await counter.number()).to.equal(1);\n  });\n \n  // This is not a fuzz test because Hardhat does not support fuzzing yet.\n  it(&quot;Should set the number correctly&quot;, async function () {\n    const { counter } = await loadFixture(CounterLockFixture);\n    await counter.setNumber(100);\n    expect(await counter.number()).to.equal(100);\n  });\n});\nThis piece of code will execute the same tests as the default Counter.t.sol file.\nAnd this is it!\nYou can create Hardhat and Foundry tests in the same test directory and run them with npx hardhat test and forge test respectively.\nCheck out Hardhat&#x27;s documentation to learn more.\n","title":"Adding Hardhat to a Foundry project","titles":[null,"Integrating with Hardhat"]},"107":{"href":"/config/hardhat#adding-foundry-to-a-hardhat-project","html":"\n<p>Inside your Hardhat project working directory:</p>\n<ol>\n<li><code>npm i --save-dev @nomicfoundation/hardhat-foundry</code>- Install the hardhat-foundry plugin.</li>\n<li>Add <code>require(&quot;@nomicfoundation/hardhat-foundry&quot;);</code> to the top of your <code>hardhat.config.js</code> file.</li>\n</ol>\n<blockquote>\n<p>ℹ️ <strong>Note</strong>\nStep number 3 will only work if your directory is an initialized git repository. Run <code>git init</code> if you haven&#x27;t already.</p>\n</blockquote>\n<ol start=\"3\">\n<li>Run <code>npx hardhat init-foundry</code> in your terminal. This will generate a <code>foundry.toml</code> file based on your Hardhat project&#x27;s existing configuration, and will install the <code>forge-std</code> library.</li>\n</ol>\n<p>Hardhat will now set up a basic Foundry project inside the same directory with a few configurations inside the <code>foundry.toml</code> file to make sure that Foundry knows where to look for your contracts, tests and dependencies. You can always change these configurations later by editing the <code>foundry.toml</code> file.</p>","isPage":false,"text":"\nInside your Hardhat project working directory:\n\nnpm i --save-dev @nomicfoundation/hardhat-foundry- Install the hardhat-foundry plugin.\nAdd require(&quot;@nomicfoundation/hardhat-foundry&quot;); to the top of your hardhat.config.js file.\n\n\nℹ️ Note\nStep number 3 will only work if your directory is an initialized git repository. Run git init if you haven&#x27;t already.\n\n\nRun npx hardhat init-foundry in your terminal. This will generate a foundry.toml file based on your Hardhat project&#x27;s existing configuration, and will install the forge-std library.\n\nHardhat will now set up a basic Foundry project inside the same directory with a few configurations inside the foundry.toml file to make sure that Foundry knows where to look for your contracts, tests and dependencies. You can always change these configurations later by editing the foundry.toml file.","title":"Adding Foundry to a Hardhat project","titles":[null,"Integrating with Hardhat"]},"108":{"href":"/config/overview#configuring-your-foundrytoml","html":"\n<p>Forge can be configured using a configuration file called <code>foundry.toml</code>, which is placed in the root of your project.</p>\n<p>Configuration can be namespaced by profiles. The default profile is named <code>default</code>, from which all other profiles inherit. You are free to customize the <code>default</code> profile, and add as many new profiles as you need.</p>\n<p>Additionally, you can create a global <code>foundry.toml</code> in your home directory.</p>\n<p>Let&#x27;s take a look at a configuration file that contains two profiles: the default profile, which always enables the optimizer, as well as a CI profile, that always displays traces:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">profile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">optimizer = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">optimizer_runs = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20_000</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">profile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ci</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">verbosity = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4</span></span></code></pre>\n<p>When running <code>forge</code>, you can specify the profile to use using the <code>FOUNDRY_PROFILE</code> environment variable.</p>\n","isPage":true,"text":"\nForge can be configured using a configuration file called foundry.toml, which is placed in the root of your project.\nConfiguration can be namespaced by profiles. The default profile is named default, from which all other profiles inherit. You are free to customize the default profile, and add as many new profiles as you need.\nAdditionally, you can create a global foundry.toml in your home directory.\nLet&#x27;s take a look at a configuration file that contains two profiles: the default profile, which always enables the optimizer, as well as a CI profile, that always displays traces:\n[profile.default]\noptimizer = true\noptimizer_runs = 20_000\n \n[profile.ci]\nverbosity = 4\nWhen running forge, you can specify the profile to use using the FOUNDRY_PROFILE environment variable.\n","title":"Configuring your foundry.toml","titles":[null]},"109":{"href":"/config/overview#standalone-sections","html":"\n<p>Besides the profile sections, the configuration file can also contain standalone sections (<code>[fmt]</code>, <code>[fuzz]</code>, <code>[invariant]</code> etc). By default, each standalone section belongs to the <code>default</code> profile.\ni.e. <code>[fmt]</code> is equivalent to <code>[profile.default.fmt]</code>.</p>\n<p>To configure the standalone section for different profiles other than <code>default</code>, use syntax <code>[profile.&lt;profile name&gt;.&lt;standalone&gt;]</code>.\ni.e. <code>[profile.ci.fuzz]</code>.</p>\n<br/>\n<aside data-callout=\"info\"><p>See the <a href=\"/config/reference/default-config\"><code>foundry.toml</code> Reference</a> for a complete overview of what you can configure.</p></aside>","isPage":false,"text":"\nBesides the profile sections, the configuration file can also contain standalone sections ([fmt], [fuzz], [invariant] etc). By default, each standalone section belongs to the default profile.\ni.e. [fmt] is equivalent to [profile.default.fmt].\nTo configure the standalone section for different profiles other than default, use syntax [profile.&lt;profile name&gt;.&lt;standalone&gt;].\ni.e. [profile.ci.fuzz].\n\nSee the foundry.toml Reference for a complete overview of what you can configure.","title":"Standalone sections","titles":[null,"Configuring your foundry.toml"]},"110":{"href":"/config/shell-autocompletion#shell-autocompletion","html":"\n<p>You can generate autocompletion shell scripts for <code>bash</code>, <code>elvish</code>, <code>fish</code>, <code>powershell</code>, and <code>zsh</code>.</p>\n","isPage":true,"text":"\nYou can generate autocompletion shell scripts for bash, elvish, fish, powershell, and zsh.\n","title":"Shell Autocompletion","titles":[null]},"111":{"href":"/config/shell-autocompletion#zsh","html":"\n<p>First, ensure that the following is present somewhere in your <code>~/.zshrc</code> file (if not, add it):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">autoload</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -U</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> compinit</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">compinit</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -i</span></span></code></pre>\n<p>Then run:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> completions</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> zsh</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tee</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/share/zsh/site-functions/_forge</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> completions</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> zsh</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tee</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/share/zsh/site-functions/_cast</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">anvil</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> completions</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> zsh</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> sudo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tee</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/share/zsh/site-functions/_anvil</span></span></code></pre>\n<p>For macOS:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> completions</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> zsh</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &gt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /opt/homebrew/completions/zsh/_forge</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> completions</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> zsh</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &gt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /opt/homebrew/completions/zsh/_cast</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">anvil</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> completions</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> zsh</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &gt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /opt/homebrew/completions/zsh/_anvil</span></span></code></pre>\n","isPage":false,"text":"\nFirst, ensure that the following is present somewhere in your ~/.zshrc file (if not, add it):\nautoload -U compinit\ncompinit -i\nThen run:\nforge completions zsh | sudo tee /usr/local/share/zsh/site-functions/_forge\ncast completions zsh | sudo tee /usr/local/share/zsh/site-functions/_cast\nanvil completions zsh | sudo tee /usr/local/share/zsh/site-functions/_anvil\nFor macOS:\nforge completions zsh &gt; /opt/homebrew/completions/zsh/_forge\ncast completions zsh &gt; /opt/homebrew/completions/zsh/_cast\nanvil completions zsh &gt; /opt/homebrew/completions/zsh/_anvil\n","title":"zsh","titles":[null,"Shell Autocompletion"]},"112":{"href":"/config/shell-autocompletion#fish","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">mkdir</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -p</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.config/fish/completions</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> completions</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fish</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.config/fish/completions/forge.fish</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> completions</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fish</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.config/fish/completions/cast.fish</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">anvil</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> completions</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> fish</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.config/fish/completions/anvil.fish</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">source</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.config/fish/config.fish</span></span></code></pre>\n","isPage":false,"text":"\nmkdir -p $HOME/.config/fish/completions\nforge completions fish &gt; $HOME/.config/fish/completions/forge.fish\ncast completions fish &gt; $HOME/.config/fish/completions/cast.fish\nanvil completions fish &gt; $HOME/.config/fish/completions/anvil.fish\nsource $HOME/.config/fish/config.fish\n","title":"fish","titles":[null,"Shell Autocompletion"]},"113":{"href":"/config/shell-autocompletion#bash","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">mkdir</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -p</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.local/share/bash-completion/completions</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> completions</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> bash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.local/share/bash-completion/completions/forge</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> completions</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> bash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.local/share/bash-completion/completions/cast</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">anvil</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> completions</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> bash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $HOME</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/.local/share/bash-completion/completions/anvil</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">exec</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> bash</span></span></code></pre>","isPage":false,"text":"\nmkdir -p $HOME/.local/share/bash-completion/completions\nforge completions bash &gt; $HOME/.local/share/bash-completion/completions/forge\ncast completions bash &gt; $HOME/.local/share/bash-completion/completions/cast\nanvil completions bash &gt; $HOME/.local/share/bash-completion/completions/anvil\nexec bash","title":"bash","titles":[null,"Shell Autocompletion"]},"114":{"href":"/config/static-analyzers#static-analyzers","html":"\n","isPage":true,"text":"\n","title":"Static Analyzers","titles":[null]},"115":{"href":"/config/static-analyzers#slither","html":"\n<p>To test your project using <a href=\"https://github.com/crytic/slither\">slither</a>, here is a sample <code>slither.config.json</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;filter_paths&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;lib&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>To run Slither on the entire project, use this command in the root of the project:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">slither</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> .</span></span></code></pre>\n<p>By default (as of version 0.10.0), this will skip tests and scripts. To force inclusion of the tests and scripts, add the <code>--foundry-compile-all</code> flag.</p>\n<p>To run Slither on a single file, use this command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">slither</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> src/Contract.sol</span></span></code></pre>\n<p>Note, this requires configuring the <a href=\"https://book.getfoundry.sh/config/reference/solidity-compiler#solc_version\">solc version in the foundry config file</a>.</p>\n<p>You do not need to provide remappings via the <code>solc_remaps</code> option as Slither will automatically detect remappings in a Foundry project. Slither will invoke <code>forge</code> to perform the build.</p>\n<p>See the <a href=\"https://github.com/crytic/slither/wiki/Usage\">Slither wiki</a> for more information.</p>\n<p>In order to use a custom configuration, such as the sample <code>slither.config.json</code> mentioned above, the following command is used as mentioned in the <a href=\"https://github.com/crytic/slither/wiki/Usage#configuration-file\">slither-wiki</a>. By default slither looks for the <code>slither.config.json</code> but you can define the path and any other <code>json</code> file of your choice:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">slither</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --config-file</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">pat</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">h</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">/file.config.json</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> .</span></span></code></pre>\n<p>Example output (Raw):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Pragma</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> version^0.8.13</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (Counter.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">solc-0.8.13</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> is</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> not</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> recommended</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> for</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> deployment</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Reference:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">setNumber(uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) should be declared external:</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">        -</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Counter.setNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (Counter.sol#7-9)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">increment</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() should be declared external:</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">        -</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Counter.increment</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() (Counter.sol#11-13)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Reference:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Counter.sol</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> analyzed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (1 </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">contracts</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> with</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 78</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> detectors</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), 4 result(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">s</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) found</span></span></code></pre>\n<p>Slither also has a <a href=\"https://github.com/marketplace/actions/slither-action\">GitHub Action</a> for CI/CD.</p>\n","isPage":false,"text":"\nTo test your project using slither, here is a sample slither.config.json:\n{\n  &quot;filter_paths&quot;: &quot;lib&quot;\n}\nTo run Slither on the entire project, use this command in the root of the project:\nslither .\nBy default (as of version 0.10.0), this will skip tests and scripts. To force inclusion of the tests and scripts, add the --foundry-compile-all flag.\nTo run Slither on a single file, use this command:\nslither src/Contract.sol\nNote, this requires configuring the solc version in the foundry config file.\nYou do not need to provide remappings via the solc_remaps option as Slither will automatically detect remappings in a Foundry project. Slither will invoke forge to perform the build.\nSee the Slither wiki for more information.\nIn order to use a custom configuration, such as the sample slither.config.json mentioned above, the following command is used as mentioned in the slither-wiki. By default slither looks for the slither.config.json but you can define the path and any other json file of your choice:\nslither --config-file &lt;path&gt;/file.config.json .\nExample output (Raw):\nPragma version^0.8.13 (Counter.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.6.12/0.7.6/0.8.7\nsolc-0.8.13 is not recommended for deployment\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity\n \nsetNumber(uint256) should be declared external:\n        - Counter.setNumber(uint256) (Counter.sol#7-9)\nincrement() should be declared external:\n        - Counter.increment() (Counter.sol#11-13)\nReference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external\nCounter.sol analyzed (1 contracts with 78 detectors), 4 result(s) found\nSlither also has a GitHub Action for CI/CD.\n","title":"Slither","titles":[null,"Static Analyzers"]},"116":{"href":"/config/static-analyzers#aderyn","html":"\n<p>To test your project using <a href=\"https://github.com/cyfrin/aderyn\">aderyn</a>, install the <a href=\"https://marketplace.visualstudio.com/items?itemName=Cyfrin.aderyn&amp;ssr=false#overview\">VS Code extension</a> supported by Cyfrin.</p>\n<p>To run the tool manually, follow the <a href=\"https://cyfrin.gitbook.io/cyfrin-docs/aderyn-cli/quickstart\">Quick Start</a> example with video guide.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> path/to/solidity/project/root</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">aderyn</span></span></code></pre>\n<p>Explore more CLI options <a href=\"https://cyfrin.gitbook.io/cyfrin-docs/cli-options\">here</a>.</p>\n","isPage":false,"text":"\nTo test your project using aderyn, install the VS Code extension supported by Cyfrin.\nTo run the tool manually, follow the Quick Start example with video guide.\ncd path/to/solidity/project/root\naderyn\nExplore more CLI options here.\n","title":"Aderyn","titles":[null,"Static Analyzers"]},"117":{"href":"/config/static-analyzers#mythril","html":"\n<p>To test your project using <a href=\"https://github.com/ConsenSys/mythril\">mythril</a>, here is a sample <code>mythril.config.json</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;remappings&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ds-test/=lib/ds-test/src/&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;forge-std/=lib/forge-std/src/&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;optimizer&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;enabled&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;runs&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">200</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Note, you need switch <code>rustc</code> to nightly to install <code>mythril</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">rustup default nightly</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">pip3 install mythril</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">myth analyze src/Contract.sol --solc-json mythril.config.json</span></span></code></pre>\n<p>See the <a href=\"https://mythril-classic.readthedocs.io/en/develop/\">mythril docs</a> for more information.</p>\n<p>You can pass custom Solc compiler output to Mythril using the <code>--solc-json</code> flag. For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">myth</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> analyze</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> src/Counter.sol</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --solc-json</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> mythril.config.json</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">.</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">mythril.laser.plugin.loader</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [INFO]: Loading laser plugin: coverage</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">mythril.laser.plugin.loader</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [INFO]: Loading laser plugin: mutation-pruner</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">.</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Achieved</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 11.56%</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> coverage</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> for</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> code:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220659fce8aadca285da9206b61f95de294d3958c409cc3011ded856f421885867464736f6c63430008100033</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">mythril.laser.plugin.plugins.coverage.coverage_plugin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [INFO]: Achieved 90.13% coverage </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> code: 6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220659fce8aadca285da9206b61f95de294d3958c409cc3011ded856f421885867464736f6c63430008100033</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">mythril.laser.plugin.plugins.instruction_profiler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [INFO]: Total: 1.0892839431762695 s</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[ADD         ]   0.9974 %,  nr      9,  total   0.0109 s,  avg   0.0012 s,  min   0.0011 s,  max   0.0013 s</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[SWAP1       ]   1.8446 %,  nr     18,  total   0.0201 s,  avg   0.0011 s,  min   0.0010 s,  max   0.0013 s</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[SWAP2       ]   0.8858 %,  nr      9,  total   0.0096 s,  avg   0.0011 s,  min   0.0010 s,  max   0.0011 s</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">mythril.analysis.security</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [INFO]: Starting analysis</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">mythril.mythril.mythril_analyzer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [INFO]: Solver statistics:</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Query</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> count:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 61</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Solver</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> time:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 3.6820807456970215</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">The</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> analysis</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> was</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> completed</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> successfully.</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> No</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> issues</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> were</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> detected.</span></span></code></pre>\n<p>The findings will be listed at the end of this output if any. Since the default <code>Counter.sol</code> doesn&#x27;t have any logic, <code>mythx</code> reports that no issues were found.</p>","isPage":false,"text":"\nTo test your project using mythril, here is a sample mythril.config.json:\n{\n  &quot;remappings&quot;: [&quot;ds-test/=lib/ds-test/src/&quot;, &quot;forge-std/=lib/forge-std/src/&quot;],\n  &quot;optimizer&quot;: {\n    &quot;enabled&quot;: true,\n    &quot;runs&quot;: 200\n  }\n}\nNote, you need switch rustc to nightly to install mythril:\nrustup default nightly\npip3 install mythril\nmyth analyze src/Contract.sol --solc-json mythril.config.json\nSee the mythril docs for more information.\nYou can pass custom Solc compiler output to Mythril using the --solc-json flag. For example:\nmyth analyze src/Counter.sol --solc-json mythril.config.json\n.\n.\nmythril.laser.plugin.loader [INFO]: Loading laser plugin: coverage\nmythril.laser.plugin.loader [INFO]: Loading laser plugin: mutation-pruner\n.\n.\nAchieved 11.56% coverage for code: 608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220659fce8aadca285da9206b61f95de294d3958c409cc3011ded856f421885867464736f6c63430008100033\nmythril.laser.plugin.plugins.coverage.coverage_plugin [INFO]: Achieved 90.13% coverage for code: 6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220659fce8aadca285da9206b61f95de294d3958c409cc3011ded856f421885867464736f6c63430008100033\nmythril.laser.plugin.plugins.instruction_profiler [INFO]: Total: 1.0892839431762695 s\n[ADD         ]   0.9974 %,  nr      9,  total   0.0109 s,  avg   0.0012 s,  min   0.0011 s,  max   0.0013 s\n.\n.\n[SWAP1       ]   1.8446 %,  nr     18,  total   0.0201 s,  avg   0.0011 s,  min   0.0010 s,  max   0.0013 s\n[SWAP2       ]   0.8858 %,  nr      9,  total   0.0096 s,  avg   0.0011 s,  min   0.0010 s,  max   0.0011 s\n \nmythril.analysis.security [INFO]: Starting analysis\nmythril.mythril.mythril_analyzer [INFO]: Solver statistics:\nQuery count: 61\nSolver time: 3.6820807456970215\nThe analysis was completed successfully. No issues were detected.\nThe findings will be listed at the end of this output if any. Since the default Counter.sol doesn&#x27;t have any logic, mythx reports that no issues were found.","title":"Mythril","titles":[null,"Static Analyzers"]},"118":{"href":"/config/vscode#integrating-with-vscode","html":"\n<p>You can get Solidity support for Visual Studio Code by installing the <a href=\"https://github.com/juanfranblanco/vscode-solidity\">VSCode Solidity extension</a>.</p>\n<p>To make the extension play nicely with Foundry, you may have to tweak a couple of things.</p>\n","isPage":true,"text":"\nYou can get Solidity support for Visual Studio Code by installing the VSCode Solidity extension.\nTo make the extension play nicely with Foundry, you may have to tweak a couple of things.\n","title":"Integrating with VSCode","titles":[null]},"119":{"href":"/config/vscode#1-remappings","html":"\n<p>You may want to place your remappings in <code>remappings.txt</code>.</p>\n<p>If they are already in <code>foundry.toml</code>, copy them over and use <code>remappings.txt</code> instead. If you just use the autogenerated remappings that Foundry provides, run <code>forge remappings &gt; remappings.txt</code>.</p>\n","isPage":false,"text":"\nYou may want to place your remappings in remappings.txt.\nIf they are already in foundry.toml, copy them over and use remappings.txt instead. If you just use the autogenerated remappings that Foundry provides, run forge remappings &gt; remappings.txt.\n","title":"1. Remappings","titles":[null,"Integrating with VSCode"]},"120":{"href":"/config/vscode#2-dependencies","html":"\n<p>You may have to add the following to your <code>.vscode/settings.json</code> for the extension to find your dependencies:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;solidity.packageDefaultDependenciesContractsDirectory&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;src&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;solidity.packageDefaultDependenciesDirectory&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;lib&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Where <code>src</code> is the source code directory and <code>lib</code> is your dependency directory.</p>\n","isPage":false,"text":"\nYou may have to add the following to your .vscode/settings.json for the extension to find your dependencies:\n{\n  &quot;solidity.packageDefaultDependenciesContractsDirectory&quot;: &quot;src&quot;,\n  &quot;solidity.packageDefaultDependenciesDirectory&quot;: &quot;lib&quot;\n}\nWhere src is the source code directory and lib is your dependency directory.\n","title":"2. Dependencies","titles":[null,"Integrating with VSCode"]},"121":{"href":"/config/vscode#3-formatter","html":"\n<p>To enable the built-in formatter that comes with Foundry to automatically format your code on save, you can add the following settings to your <code>.vscode/settings.json</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;editor.formatOnSave&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;[solidity]&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;editor.defaultFormatter&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;JuanBlanco.solidity&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;solidity.formatter&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;forge&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>To configure the formatter settings, refer to the <a href=\"/config/reference/formatter\">Formatter</a> reference.</p>\n","isPage":false,"text":"\nTo enable the built-in formatter that comes with Foundry to automatically format your code on save, you can add the following settings to your .vscode/settings.json:\n{\n  &quot;editor.formatOnSave&quot;: true,\n  &quot;[solidity]&quot;: {\n    &quot;editor.defaultFormatter&quot;: &quot;JuanBlanco.solidity&quot;\n  },\n  &quot;solidity.formatter&quot;: &quot;forge&quot;\n}\nTo configure the formatter settings, refer to the Formatter reference.\n","title":"3. Formatter","titles":[null,"Integrating with VSCode"]},"122":{"href":"/config/vscode#4-solc-version","html":"\n<p>Finally, it is recommended to specify a Solidity compiler version:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;solidity.compileUsingRemoteVersion&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;v0.8.17&quot;</span></span></code></pre>\n<p>To get Foundry in line with the chosen version, add the following to your <code>default</code> profile in <code>foundry.toml</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">solc = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0.8.17&quot;</span></span></code></pre>\n","isPage":false,"text":"\nFinally, it is recommended to specify a Solidity compiler version:\n&quot;solidity.compileUsingRemoteVersion&quot;: &quot;v0.8.17&quot;\nTo get Foundry in line with the chosen version, add the following to your default profile in foundry.toml.\nsolc = &quot;0.8.17&quot;\n","title":"4. Solc Version","titles":[null,"Integrating with VSCode"]},"123":{"href":"/config/vscode#example-of-using-openzeppelin-contracts-and-non-standard-project-layout","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">.</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">└──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> project</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">    └──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> contracts</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">        ├──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> lib</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">        │</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">   ├──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> forge-std</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">        │</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">   └──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> openzeppelin-contracts</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">        ├──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> script</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">        ├──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> src</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">        └──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span></span></code></pre>\n<p>Add line to <code>remappings.txt</code> file (<a href=\"/guides/project-setup/dependencies#remapping-dependencies\"><code>forge remapping</code></a>):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">@openzeppelin</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">lib</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">openzeppelin</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contracts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span></span></code></pre>\n<p>Add line to <code>.vscode/settings.json</code> file (solidity extension settings):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;solidity.remappings&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;@openzeppelin/=project/contracts/lib/openzeppelin-contracts/&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Now all contracts from the OpenZeppelin documentation can be used.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ERC20 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>","isPage":false,"text":"\n.\n└── project\n    └── contracts\n        ├── lib\n        │   ├── forge-std\n        │   └── openzeppelin-contracts\n        ├── script\n        ├── src\n        └── test\nAdd line to remappings.txt file (forge remapping):\n@openzeppelin/=lib/openzeppelin-contracts/\nAdd line to .vscode/settings.json file (solidity extension settings):\n{\n  &quot;solidity.remappings&quot;: [\n    &quot;@openzeppelin/=project/contracts/lib/openzeppelin-contracts/&quot;\n  ]\n}\nNow all contracts from the OpenZeppelin documentation can be used.\nimport { ERC20 } from &quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;;","title":"Example of using OpenZeppelin contracts and non-standard project layout.","titles":[null,"Integrating with VSCode"]},"124":{"href":"/config/vyper#vyper-support","html":"\n<p>Foundry supports compiling and testing Vyper contracts.</p>\n","isPage":true,"text":"\nFoundry supports compiling and testing Vyper contracts.\n","title":"Vyper support","titles":[null]},"125":{"href":"/config/vyper#1-compilation","html":"\n<p>You can install Vyper by following the instructions <a href=\"https://vyper.readthedocs.io/en/stable/installing-vyper.html\">here</a>. If you have <code>vyper</code> available in your PATH, foundry will automatically use it.</p>\n<p>Otherwise, you can set the path to <code>vyper</code> in your <code>foundry.toml</code> by adding the following:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">vyper</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">path = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;/path/to/vyper&quot;</span></span></code></pre>\n","isPage":false,"text":"\nYou can install Vyper by following the instructions here. If you have vyper available in your PATH, foundry will automatically use it.\nOtherwise, you can set the path to vyper in your foundry.toml by adding the following:\n[vyper]\npath = &quot;/path/to/vyper&quot;\n","title":"1. Compilation","titles":[null,"Vyper support"]},"126":{"href":"/config/vyper#vyper-libraries-via-forge-install","html":"\n<p>If you want an import like the following to work in your Vyper contract:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> snekmate.utils </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> eip712_domain_separator</span></span></code></pre>\n<p>You can install Vyper the desired library via <code>forge install</code> e.g. <code>forge install pcaversaccio/snekmate</code>.</p>\n<p>You then need to adjust your <code>foundry.toml</code> as follows (replacing &quot;snekmate&quot; with the name of your\ndesired package):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">skip = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;**/lib/snekmate/**&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">libs = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;lib&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;lib/snekmate/src&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n","isPage":false,"text":"\nIf you want an import like the following to work in your Vyper contract:\nfrom snekmate.utils import eip712_domain_separator\nYou can install Vyper the desired library via forge install e.g. forge install pcaversaccio/snekmate.\nYou then need to adjust your foundry.toml as follows (replacing &quot;snekmate&quot; with the name of your\ndesired package):\nskip = [&quot;**/lib/snekmate/**&quot;]\nlibs = [&quot;lib&quot;, &quot;lib/snekmate/src&quot;]\n","title":"Vyper libraries via forge install","titles":[null,"Vyper support","1. Compilation"]},"127":{"href":"/config/vyper#vyper-libraries-via-pip","html":"\n<p>Alternatively if you want to install the package via <code>pip</code> into your system&#x27;s python configuration\nor a virtual environment you can point foundry to it by modifying your <code>foundry.toml</code> as follows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Assuming you have a virtual environment in `.venv` and are using Python 3.12</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">libs = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;lib&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;.venv/lib/python3.12/site-packages/&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n<p>Note that compatible alternative python package managers like <code>uv</code> will work too.</p>\n","isPage":false,"text":"\nAlternatively if you want to install the package via pip into your system&#x27;s python configuration\nor a virtual environment you can point foundry to it by modifying your foundry.toml as follows:\n# Assuming you have a virtual environment in `.venv` and are using Python 3.12\nlibs = [&quot;lib&quot;, &quot;.venv/lib/python3.12/site-packages/&quot;]\nNote that compatible alternative python package managers like uv will work too.\n","title":"Vyper libraries via pip","titles":[null,"Vyper support","1. Compilation"]},"128":{"href":"/config/vyper#2-solidity-tests","html":"\n<p>Let&#x27;s write a test for this simple Counter contract:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">number: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">@</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">deploy</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">@</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">payable</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">def</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> __init__</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(initial_number: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">):</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.number </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> initial_number</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">@</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">external</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">def</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> set_number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(new_number: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">):</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.number </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> new_number</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">@</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">external</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">def</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> increment</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">():</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.number </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span></span></code></pre>\n<p>We can deploy it by using the <code>deployCode</code> cheatcode from <code>forge-std</code> and test it with the following Solidity test:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/Test.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ICounter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> increment</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> view</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> set_number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> newNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CounterTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ICounter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> counter;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> initialNumber </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        counter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ICounter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deployCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Counter&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(initialNumber)));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), initialNumber);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> test_Increment</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">increment</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), initialNumber </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testFuzz_SetNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> x</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">set_number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(x);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), x);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nLet&#x27;s write a test for this simple Counter contract:\nnumber: public(uint256)\n \n@deploy\n@payable\ndef __init__(initial_number: uint256):\n    self.number = initial_number\n \n@external\ndef set_number(new_number: uint256):\n    self.number = new_number\n \n@external\ndef increment():\n    self.number += 1\nWe can deploy it by using the deployCode cheatcode from forge-std and test it with the following Solidity test:\nimport {Test} from &quot;forge-std/Test.sol&quot;;\n \ninterface ICounter {\n    function increment() external;\n    function number() external view returns (uint256);\n    function set_number(uint256 newNumber) external;\n}\n \ncontract CounterTest is Test {\n    ICounter public counter;\n    uint256 initialNumber = 5;\n \n    function setUp() public {\n        counter = ICounter(deployCode(&quot;Counter&quot;, abi.encode(initialNumber)));\n        assertEq(counter.number(), initialNumber);\n    }\n \n    function test_Increment() public {\n        counter.increment();\n        assertEq(counter.number(), initialNumber + 1);\n    }\n \n    function testFuzz_SetNumber(uint256 x) public {\n        counter.set_number(x);\n        assertEq(counter.number(), x);\n    }\n}\n","title":"2. Solidity tests","titles":[null,"Vyper support"]},"129":{"href":"/config/vyper#3-deploying","html":"\n<p>You can deploy Vyper contracts via <code>forge create</code> command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> create</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Counter</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --constructor-args</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;1&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --rpc-url</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $RPC_URL </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">--private-key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $PRIVATE_KEY</span></span></code></pre>\n<p>And with <code>deployCode</code> you can deploy Vyper contracts in your scripts as well:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/Script.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CounterScript</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">broadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        deployCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;src/Counter.vy&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nYou can deploy Vyper contracts via forge create command:\nforge create Counter --constructor-args &#x27;1&#x27; --rpc-url $RPC_URL --private-key $PRIVATE_KEY\nAnd with deployCode you can deploy Vyper contracts in your scripts as well:\nimport {Script} from &quot;forge-std/Script.sol&quot;;\n \ncontract CounterScript is Script {\n    function run() public {\n        vm.broadcast();\n        deployCode(&quot;src/Counter.vy&quot;, abi.encode(1));\n    }\n}\n","title":"3. Deploying","titles":[null,"Vyper support"]},"130":{"href":"/config/vyper#4-vyper-scripts","html":"\n<p>You can write Vyper scripts in the same way as Solidity scripts:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Vm:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    def</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> startBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(): </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nonpayable</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ICounter:</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    def</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> increment</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(): </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">nonpayable</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    def</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() -&gt; </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">view</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">constant</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Vm) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Vm(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">0x</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">7109709ECfa91a80626fF3989D68f67F5b1DD12D</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">@</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">external</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">def</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(counter: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">):</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    number_before: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> staticcall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ICounter(counter).number()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    extcall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.startBroadcast()</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    extcall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ICounter(counter).increment()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    number_after: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> staticcall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ICounter(counter).number()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> number_after </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> number_before </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span></span></code></pre>\n<p>Such script can be run with the following command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> script</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> script/Increment.s.vy</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --sig</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;run&#x27;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;&lt;counter address&gt;&#x27;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --rpc-url</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $RPC_URL </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">--broadcast</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  --private-key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $PRIVATE_KEY</span></span></code></pre>\n","isPage":false,"text":"\nYou can write Vyper scripts in the same way as Solidity scripts:\ninterface Vm:\n    def startBroadcast(): nonpayable\n \ninterface ICounter:\n    def increment(): nonpayable\n    def number() -&gt; uint256: view\n \nvm: constant(Vm) = Vm(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D)\n \n@external\ndef run(counter: address):\n    number_before: uint256 = staticcall ICounter(counter).number()\n \n    extcall vm.startBroadcast()\n    extcall ICounter(counter).increment()\n \n    number_after: uint256 = staticcall ICounter(counter).number()\n \n    assert number_after == number_before + 1\nSuch script can be run with the following command:\nforge script script/Increment.s.vy  --sig &#x27;run&#x27; &#x27;&lt;counter address&gt;&#x27; --rpc-url $RPC_URL --broadcast  --private-key $PRIVATE_KEY\n","title":"4. Vyper scripts","titles":[null,"Vyper support"]},"131":{"href":"/config/vyper#5-limitations","html":"\n<ul>\n<li>While you can write and run tests and scripts in Vyper, there is no <code>new</code> keyword in Vyper allowing you to deploy contracts. This will be addressed in the future with new cheatcodes.</li>\n<li>Vyper does not allow overloads with the same names but different parameter types. Thus some cheatcode combinations might require workarounds to be used. (e.g. <code>startBroadcast(address sender))</code> and <code>startBroadcast(uint256 pk)</code>)</li>\n<li><code>forge coverage</code> currently does not support Vyper contracts.</li>\n</ul>","isPage":false,"text":"\n\nWhile you can write and run tests and scripts in Vyper, there is no new keyword in Vyper allowing you to deploy contracts. This will be addressed in the future with new cheatcodes.\nVyper does not allow overloads with the same names but different parameter types. Thus some cheatcode combinations might require workarounds to be used. (e.g. startBroadcast(address sender)) and startBroadcast(uint256 pk))\nforge coverage currently does not support Vyper contracts.\n","title":"5. Limitations","titles":[null,"Vyper support"]},"132":{"href":"/cast/overview#cast","html":"\n<p>Cast is a Swiss Army knife for interacting with Ethereum applications from the command line. You can make smart contract calls, send transactions, or retrieve any type of chain data - all from your command-line!</p>\n<p>The <code>cast</code> binary can be used both within and outside of a Foundry project.</p>\n<p>Cast is part of the Foundry suite and is installed alongside <code>forge</code>, <code>chisel</code>, and <code>anvil</code>. If you haven&#x27;t installed Foundry\nyet, see <a href=\"/introduction/installation\">Foundry installation</a>.</p>\n","isPage":true,"text":"\nCast is a Swiss Army knife for interacting with Ethereum applications from the command line. You can make smart contract calls, send transactions, or retrieve any type of chain data - all from your command-line!\nThe cast binary can be used both within and outside of a Foundry project.\nCast is part of the Foundry suite and is installed alongside forge, chisel, and anvil. If you haven&#x27;t installed Foundry\nyet, see Foundry installation.\n","title":"Cast","titles":[null]},"133":{"href":"/cast/overview#getting-started","html":"\n<p>Here are a few examples of what you can do:</p>\n<p><strong>Check the latest block on Ethereum Mainnet</strong>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> block-number</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --rpc-url</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://reth-ethereum.ithaca.xyz/rpc</span></span></code></pre>\n<strong>Check the Ether balance of <code>vitalik.eth</code></strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> balance</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> vitalik.eth</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --ether</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --rpc-url</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://reth-ethereum.ithaca.xyz/rpc</span></span></code></pre>\n<strong>Replay and trace a transaction</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x9c32042f5e997e27e67f82583839548eb19dc78c4769ad6218657c17f2a5ed31</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --rpc-url</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://reth-ethereum.ithaca.xyz/rpc</span></span></code></pre>\n<p>Optionally, pass <code>--etherscan-api-key &lt;API_KEY&gt;</code> to decode transaction traces using verified source maps, providing more detailed and human-readable information.</p>\n<strong>Retrieve the total supply of the DAI token</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> call</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x6b175474e89094c44da98b954eedeac495271d0f</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;totalSupply()(uint256)&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --rpc-url</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://eth-mainnet.alchemyapi.io/v2/Lc7oIGYeL_QvInzI0Wiu_pOZZDEKBrdf</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">3696884440995286197434703193</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [3.696e27]</span></span></code></pre>\n<strong>Decode calldata</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 4byte-decode</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x1F1F897F676d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e7</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;fulfillRandomness(bytes32,uint256)&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">0x676d000000000000000000000000000000000000000000000000000000000000</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">999</span></span></code></pre>\n<strong>Send messages between two Anvil accounts</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> send</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --private-key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">PRIVATE_KE</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Y</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x3c44cdddb6a900fa2b585dd299e03d12fa4293bc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> from-utf8</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;hello world&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">--rpc-url</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> http://127.0.0.1:8545/</span></span></code></pre>\n<br/>\n<aside data-callout=\"info\"><p>See the <a href=\"/cast/reference/overview\"><code>cast</code> Reference</a> for a complete overview of all the available subcommands.</p></aside>","isPage":false,"text":"\nHere are a few examples of what you can do:\nCheck the latest block on Ethereum Mainnet:\ncast block-number --rpc-url https://reth-ethereum.ithaca.xyz/rpc\nCheck the Ether balance of vitalik.eth\ncast balance vitalik.eth --ether --rpc-url https://reth-ethereum.ithaca.xyz/rpc\nReplay and trace a transaction\ncast run 0x9c32042f5e997e27e67f82583839548eb19dc78c4769ad6218657c17f2a5ed31 --rpc-url https://reth-ethereum.ithaca.xyz/rpc\nOptionally, pass --etherscan-api-key &lt;API_KEY&gt; to decode transaction traces using verified source maps, providing more detailed and human-readable information.\nRetrieve the total supply of the DAI token\ncast call 0x6b175474e89094c44da98b954eedeac495271d0f &quot;totalSupply()(uint256)&quot; --rpc-url https://eth-mainnet.alchemyapi.io/v2/Lc7oIGYeL_QvInzI0Wiu_pOZZDEKBrdf\n3696884440995286197434703193 [3.696e27]\nDecode calldata\ncast 4byte-decode 0x1F1F897F676d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e7\n1) &quot;fulfillRandomness(bytes32,uint256)&quot;\n0x676d000000000000000000000000000000000000000000000000000000000000\n999\nSend messages between two Anvil accounts\ncast send --private-key &lt;PRIVATE_KEY&gt; 0x3c44cdddb6a900fa2b585dd299e03d12fa4293bc $(cast from-utf8 &quot;hello world&quot;) --rpc-url http://127.0.0.1:8545/\n\nSee the cast Reference for a complete overview of all the available subcommands.","title":"Getting started","titles":[null,"Cast"]},"134":{"href":"/introduction/getting-started#getting-started","html":"\n<p>Foundry is a blazing fast, portable and modular toolkit for Ethereum application development written in Rust. It consists of four essential tools that suffice all the needs a blockchain app developer will ever have.</p>\n<p>Here&#x27;s an overview of the tools available at your disposal after <a href=\"/introduction/installation#using-foundryup\">running foundryup</a>:</p>\n<table><thead><tr><th>Tool</th><th>What it enables</th></tr></thead><tbody><tr><td><strong><a href=\"/forge/overview\"><code>forge</code></a></strong></td><td>Build, test, debug, deploy and verify smart contracts</td></tr><tr><td><strong><a href=\"/anvil/overview\"><code>anvil</code></a></strong></td><td>Run a local Ethereum development node with forking capabilities</td></tr><tr><td><strong><a href=\"/cast/overview\"><code>cast</code></a></strong></td><td>Interact with contracts, send transactions, and retrieve chain data</td></tr><tr><td><strong><a href=\"/chisel/overview\"><code>chisel</code></a></strong></td><td>Fast Solidity REPL for rapid prototyping and debugging</td></tr></tbody></table>\n<aside data-callout=\"tip\"><p>You can always view detailed help for any command or subcommand by appending <code>--help</code> to it.</p></aside>\n<hr/>\n","isPage":true,"text":"\nFoundry is a blazing fast, portable and modular toolkit for Ethereum application development written in Rust. It consists of four essential tools that suffice all the needs a blockchain app developer will ever have.\nHere&#x27;s an overview of the tools available at your disposal after running foundryup:\nToolWhat it enablesforgeBuild, test, debug, deploy and verify smart contractsanvilRun a local Ethereum development node with forking capabilitiescastInteract with contracts, send transactions, and retrieve chain datachiselFast Solidity REPL for rapid prototyping and debugging\nYou can always view detailed help for any command or subcommand by appending --help to it.\n\n","title":"Getting Started","titles":[null]},"135":{"href":"/introduction/getting-started#forge","html":"\n<p>Forge is a command-line tool for building, testing, and deploying smart contracts.</p>\n","isPage":false,"text":"\nForge is a command-line tool for building, testing, and deploying smart contracts.\n","title":"Forge","titles":[null,"Getting Started"]},"136":{"href":"/introduction/getting-started#initialize-a-new-project","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Create a new project called Counter</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> init</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Counter</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Counter</span></span></code></pre>\n","isPage":false,"text":"\n# Create a new project called Counter\nforge init Counter\ncd Counter\n","title":"Initialize a new project","titles":[null,"Getting Started","Forge"]},"137":{"href":"/introduction/getting-started#build-and-test-contracts","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Compile your contracts</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Run your test suite</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Run tests against live chain state by forking</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --fork-url</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://reth-ethereum.ithaca.xyz/rpc</span></span></code></pre>\n","isPage":false,"text":"\n# Compile your contracts\nforge build\n \n# Run your test suite\nforge test\n \n# Run tests against live chain state by forking\nforge test --fork-url https://reth-ethereum.ithaca.xyz/rpc\n","title":"Build and test contracts","titles":[null,"Getting Started","Forge"]},"138":{"href":"/introduction/getting-started#deploy-contracts","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Use forge scripts to deploy contracts</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Set your private key</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> PRIVATE_KEY</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Deploy to local anvil instance</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> script</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> script/Counter.s.sol</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --rpc-url</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> http://127.0.0.1:8545</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --broadcast</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --private-key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $PRIVATE_KEY</span></span></code></pre>\n<p><code>forge</code> also enables more advanced workflows such as:</p>\n<ul>\n<li><a href=\"/forge/advanced-testing/table-testing\">Table testing</a> - Property-based testing with test cases inputs organized into a table format</li>\n<li><a href=\"/forge/advanced-testing/fuzz-testing\">Fuzz testing</a> - Property-based testing with randomized inputs</li>\n<li><a href=\"/forge/advanced-testing/invariant-testing\">Invariant testing</a> - Test system-wide properties across function call sequences</li>\n<li><a href=\"/forge/gas-tracking/overview\">Gas tracking</a> - Monitor and optimize gas consumption across your contracts</li>\n<li><a href=\"/forge/reference/forge-coverage\">Coverage reports</a> - Generate detailed test coverage analysis with <code>forge coverage</code></li>\n</ul>\n<p>Learn more about <code>forge</code> <a href=\"/forge/overview\">here</a>.</p>\n<hr/>\n","isPage":false,"text":"\n# Use forge scripts to deploy contracts\n# Set your private key\nexport PRIVATE_KEY=&quot;0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80&quot;\n \n# Deploy to local anvil instance\nforge script script/Counter.s.sol --rpc-url http://127.0.0.1:8545 --broadcast --private-key $PRIVATE_KEY\nforge also enables more advanced workflows such as:\n\nTable testing - Property-based testing with test cases inputs organized into a table format\nFuzz testing - Property-based testing with randomized inputs\nInvariant testing - Test system-wide properties across function call sequences\nGas tracking - Monitor and optimize gas consumption across your contracts\nCoverage reports - Generate detailed test coverage analysis with forge coverage\n\nLearn more about forge here.\n\n","title":"Deploy contracts","titles":[null,"Getting Started","Forge"]},"139":{"href":"/introduction/getting-started#anvil","html":"\n<p>Anvil is a fast local Ethereum development node that is perfect for testing your contracts and other blockchain workflows in a controlled environment.</p>\n","isPage":false,"text":"\nAnvil is a fast local Ethereum development node that is perfect for testing your contracts and other blockchain workflows in a controlled environment.\n","title":"Anvil","titles":[null,"Getting Started"]},"140":{"href":"/introduction/getting-started#start-a-local-development-node","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Start anvil with 10 pre-funded accounts</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">anvil</span></span></code></pre>\n","isPage":false,"text":"\n# Start anvil with 10 pre-funded accounts\nanvil\n","title":"Start a local development node","titles":[null,"Getting Started","Anvil"]},"141":{"href":"/introduction/getting-started#fork-mainnet-state","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Fork latest mainnet state for testing</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">anvil</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --fork-url</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://reth-ethereum.ithaca.xyz/rpc</span></span></code></pre>\n<p><code>anvil</code> comes up with other advanced capabilities such as:</p>\n<ul>\n<li><strong>Custom <code>anvil_</code> methods</strong> - Advanced node control including <a href=\"/anvil/reference#anvil_impersonateaccount\">account impersonation</a>, <a href=\"/anvil/reference#anvil_setbalance\">state manipulation</a>, and <a href=\"/anvil/reference#anvil_mine\">mining control</a></li>\n<li><strong>Forking capabilities</strong> - Fork anvil off another live chain</li>\n</ul>\n<p>All of the above is provided while maintaining full compliance with the Ethereum JSON-RPC spec.</p>\n<p>Learn more about <code>anvil</code> <a href=\"/anvil/overview\">here</a>.</p>\n","isPage":false,"text":"\n# Fork latest mainnet state for testing\nanvil --fork-url https://reth-ethereum.ithaca.xyz/rpc\nanvil comes up with other advanced capabilities such as:\n\nCustom anvil_ methods - Advanced node control including account impersonation, state manipulation, and mining control\nForking capabilities - Fork anvil off another live chain\n\nAll of the above is provided while maintaining full compliance with the Ethereum JSON-RPC spec.\nLearn more about anvil here.\n","title":"Fork mainnet state","titles":[null,"Getting Started","Anvil"]},"142":{"href":"/introduction/getting-started#cast","html":"\n<p>Cast is your Swiss army knife for interacting with Ethereum applications from the command line. You can make smart contract calls, send transactions, or retrieve any type of chain data.</p>\n","isPage":false,"text":"\nCast is your Swiss army knife for interacting with Ethereum applications from the command line. You can make smart contract calls, send transactions, or retrieve any type of chain data.\n","title":"Cast","titles":[null,"Getting Started"]},"143":{"href":"/introduction/getting-started#read-contract-data","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Check ETH balance</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> balance</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> vitalik.eth</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --ether</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --rpc-url</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://reth-ethereum.ithaca.xyz/rpc</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Call a contract function to read data</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> call</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;balanceOf(address)&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045</span><span style=\"color:#005CC5;--shiki-dark:#F47067\"> \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">--rpc-url </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">https://reth-ethereum.ithaca.xyz/rpc</span></span></code></pre>\n","isPage":false,"text":"\n# Check ETH balance\ncast balance vitalik.eth --ether --rpc-url https://reth-ethereum.ithaca.xyz/rpc\n \n# Call a contract function to read data\ncast call 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 \\\n&quot;balanceOf(address)&quot; 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045 \\\n--rpc-url https://reth-ethereum.ithaca.xyz/rpc\n","title":"Read contract data","titles":[null,"Getting Started","Cast"]},"144":{"href":"/introduction/getting-started#send-transactions","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Set your private key</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> PRIVATE_KEY</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Send ETH to an address</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> send</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x70997970C51812dc3A010C7d01b50e0d17dc79C8</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --value</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10000000</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --private-key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $PRIVATE_KEY</span></span></code></pre>\n","isPage":false,"text":"\n# Set your private key\nexport PRIVATE_KEY=&quot;0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80&quot;\n \n# Send ETH to an address\ncast send 0x70997970C51812dc3A010C7d01b50e0d17dc79C8 --value 10000000 --private-key $PRIVATE_KEY\n","title":"Send transactions","titles":[null,"Getting Started","Cast"]},"145":{"href":"/introduction/getting-started#interact-with-json-rpc","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Call JSON-RPC methods directly</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> rpc</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> eth_getHeaderByNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 2h</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 22539851</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">--rpc-url</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://reth-ethereum.ithaca.xyz/rpc</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Get latest block number</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> block-number</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --rpc-url</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://reth-ethereum.ithaca.xyz/rpc</span></span></code></pre>\n<p>Learn more about <code>cast</code> <a href=\"/cast/overview\">here</a>.</p>\n<hr/>\n","isPage":false,"text":"\n# Call JSON-RPC methods directly\ncast rpc eth_getHeaderByNumber $(cast 2h 22539851) --rpc-url https://reth-ethereum.ithaca.xyz/rpc\n \n# Get latest block number\ncast block-number --rpc-url https://reth-ethereum.ithaca.xyz/rpc\nLearn more about cast here.\n\n","title":"Interact with JSON-RPC","titles":[null,"Getting Started","Cast"]},"146":{"href":"/introduction/getting-started#chisel","html":"\n<p>Chisel is a fast, utilitarian, and verbose Solidity REPL for rapid prototyping and debugging. It&#x27;s perfect for testing Solidity snippets and exploring contract behavior interactively.</p>\n","isPage":false,"text":"\nChisel is a fast, utilitarian, and verbose Solidity REPL for rapid prototyping and debugging. It&#x27;s perfect for testing Solidity snippets and exploring contract behavior interactively.\n","title":"Chisel","titles":[null,"Getting Started"]},"147":{"href":"/introduction/getting-started#start-the-repl","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Launch chisel REPL</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">chisel</span></span></code></pre>\n","isPage":false,"text":"\n# Launch chisel REPL\nchisel\n","title":"Start the REPL","titles":[null,"Getting Started","Chisel"]},"148":{"href":"/introduction/getting-started#interactive-solidity-development","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create and query variables</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">➜ </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 123</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">➜ a</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Type</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> uint256</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├ Hex</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x7b</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├ </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Hex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (full word)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x000000000000000000000000000000000000000000000000000000000000007b</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">└ Decimal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 123</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Test contract functions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">➜ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> x</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> y</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) { </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> x </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> y; }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">➜ </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Type</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> uint256</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">└ Decimal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 15</span></span></code></pre>\n<p>Learn more about <code>chisel</code> <a href=\"/chisel/overview\">here</a>.</p>","isPage":false,"text":"\n// Create and query variables\n➜ uint256 a = 123;\n➜ a\nType: uint256\n├ Hex: 0x7b\n├ Hex (full word): 0x000000000000000000000000000000000000000000000000000000000000007b\n└ Decimal: 123\n \n// Test contract functions\n➜ function add(uint256 x, uint256 y) pure returns (uint256) { return x + y; }\n➜ add(5, 10)\nType: uint256\n└ Decimal: 15\nLearn more about chisel here.","title":"Interactive Solidity development","titles":[null,"Getting Started","Chisel"]},"149":{"href":"/introduction/installation#installation","html":"\n<p>If you encounter any issues during installation, refer to the <a href=\"/misc/faq\">FAQ</a> for assistance.</p>\n","isPage":true,"text":"\nIf you encounter any issues during installation, refer to the FAQ for assistance.\n","title":"Installation","titles":[null]},"150":{"href":"/introduction/installation#precompiled-binaries","html":"\n<p>Precompiled binaries can be downloaded from the <a href=\"https://github.com/foundry-rs/foundry/releases\">GitHub releases page</a>. For easier management, we recommend using <a href=\"#using-foundryup\">Foundryup</a>.</p>\n","isPage":false,"text":"\nPrecompiled binaries can be downloaded from the GitHub releases page. For easier management, we recommend using Foundryup.\n","title":"Precompiled Binaries","titles":[null,"Installation"]},"151":{"href":"/introduction/installation#using-foundryup","html":"\n<p>Foundryup is the official installer for the Foundry toolchain. You can learn more about it <a href=\"https://github.com/foundry-rs/foundry/blob/master/foundryup/README.md\">here</a>.</p>\n<p>To install Foundryup, open your terminal and run the following command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">curl</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -L</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://foundry.paradigm.xyz</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> bash</span></span></code></pre>\n<p>This will install Foundryup. Simply follow the on-screen instructions, and the <code>foundryup</code> command will become available in your CLI.</p>\n<p>Running <code>foundryup</code> will automatically install the latest stable version of the <a href=\"#precompiled-binaries\">precompiled binaries</a>: <code>forge</code>, <code>cast</code>, <code>anvil</code>, and <code>chisel</code>. If you wish to use the latest <code>nightly</code> build run <code>foundryup --install nightly</code>. For additional options, such as installing a specific version or commit, run <code>foundryup --help</code>.</p>\n<blockquote>\n<p>ℹ️ <strong>Note</strong><br/>\nIf you&#x27;re using Windows, you&#x27;ll need to install and use <a href=\"https://gitforwindows.org/\">Git BASH</a> or <a href=\"https://learn.microsoft.com/en-us/windows/wsl/install\">WSL</a> as your terminal, since Foundryup currently doesn&#x27;t support Powershell or Command Prompt (Cmd).</p>\n</blockquote>\n","isPage":false,"text":"\nFoundryup is the official installer for the Foundry toolchain. You can learn more about it here.\nTo install Foundryup, open your terminal and run the following command:\ncurl -L https://foundry.paradigm.xyz | bash\nThis will install Foundryup. Simply follow the on-screen instructions, and the foundryup command will become available in your CLI.\nRunning foundryup will automatically install the latest stable version of the precompiled binaries: forge, cast, anvil, and chisel. If you wish to use the latest nightly build run foundryup --install nightly. For additional options, such as installing a specific version or commit, run foundryup --help.\n\nℹ️ Note\nIf you&#x27;re using Windows, you&#x27;ll need to install and use Git BASH or WSL as your terminal, since Foundryup currently doesn&#x27;t support Powershell or Command Prompt (Cmd).\n\n","title":"Using Foundryup","titles":[null,"Installation"]},"152":{"href":"/introduction/installation#verify-integrity-and-provenance-of-binaries","html":"\n<p>Foundry binaries are attested by using <a href=\"https://docs.github.com/en/actions/security-for-github-actions/using-artifact-attestations/using-artifact-attestations-to-establish-provenance-for-builds\">GitHub artifact attestations</a>. It is strongly recommended to verify the binaries installed using <code>foundryup</code> in order to check that they were built and distributed from Foundry repository.<br/>\nFor example, <code>forge</code> binary integrity and provenance can be verified by running:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">gh</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> attestation</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> verify</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --owner</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> foundry-rs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">which</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> forge</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">✓</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Verification</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> succeeded!</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">The</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> following</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> attestation</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> matched</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> the</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> policy</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> criteria</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">-</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Attestation</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> #1</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">  -</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Build</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> repo:.....</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> foundry-rs/foundry</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">  -</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Build</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> workflow:.</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> .github/workflows/release.yml@refs/tags/stable</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">  -</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Signer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> repo:....</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> foundry-rs/foundry</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">  -</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Signer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> workflow:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> .github/workflows/release.yml@refs/tags/stable</span></span></code></pre>\n","isPage":false,"text":"\nFoundry binaries are attested by using GitHub artifact attestations. It is strongly recommended to verify the binaries installed using foundryup in order to check that they were built and distributed from Foundry repository.\nFor example, forge binary integrity and provenance can be verified by running:\ngh attestation verify --owner foundry-rs $(which forge)\n \n✓ Verification succeeded!\n \nThe following 1 attestation matched the policy criteria\n \n- Attestation #1\n  - Build repo:..... foundry-rs/foundry\n  - Build workflow:. .github/workflows/release.yml@refs/tags/stable\n  - Signer repo:.... foundry-rs/foundry\n  - Signer workflow: .github/workflows/release.yml@refs/tags/stable\n","title":"Verify integrity and provenance of binaries","titles":[null,"Installation","Using Foundryup"]},"153":{"href":"/introduction/installation#building-from-source","html":"\n","isPage":false,"text":"\n","title":"Building from Source","titles":[null,"Installation"]},"154":{"href":"/introduction/installation#prerequisites","html":"\n<p>You&#x27;ll need the <a href=\"https://rust-lang.org\">Rust</a> compiler and Cargo, Rust&#x27;s package manager. The easiest way to install both is by using <a href=\"https://rustup.rs/\"><code>rustup.rs</code></a>.</p>\n<p>Foundry generally supports building only with the latest stable version of Rust. If you&#x27;re using an older version of Rust, you can update it with <code>rustup</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">rustup</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> update</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> stable</span></span></code></pre>\n<p>For Windows users, you&#x27;ll also need a recent version of <a href=\"https://visualstudio.microsoft.com/downloads/\">Visual Studio</a>, with the &quot;Desktop Development With C++&quot; workload installed.</p>\n","isPage":false,"text":"\nYou&#x27;ll need the Rust compiler and Cargo, Rust&#x27;s package manager. The easiest way to install both is by using rustup.rs.\nFoundry generally supports building only with the latest stable version of Rust. If you&#x27;re using an older version of Rust, you can update it with rustup:\nrustup update stable\nFor Windows users, you&#x27;ll also need a recent version of Visual Studio, with the &quot;Desktop Development With C++&quot; workload installed.\n","title":"Prerequisites","titles":[null,"Installation","Building from Source"]},"155":{"href":"/introduction/installation#building","html":"\n<p>You can either use the various flags provided by <a href=\"#using-foundryup\">Foundryup</a>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">foundryup</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --branch</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> master</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">foundryup</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --path</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> path/to/foundry</span></span></code></pre>\n<p>Alternatively, you can install via Cargo with the following command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/foundry-rs/foundry</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --profile</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> release</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --locked</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> chisel</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> anvil</span></span></code></pre>\n<p>You can also manually build from a local copy of the <a href=\"https://github.com/foundry-rs/foundry\">Foundry repository</a>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># clone the repository</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/foundry-rs/foundry.git</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> foundry</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># install Forge</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --path</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ./crates/forge</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --profile</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> release</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --force</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --locked</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># install Cast</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --path</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ./crates/cast</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --profile</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> release</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --force</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --locked</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># install Anvil</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --path</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ./crates/anvil</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --profile</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> release</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --force</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --locked</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># install Chisel</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cargo</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --path</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ./crates/chisel</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --profile</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> release</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --force</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --locked</span></span></code></pre>\n","isPage":false,"text":"\nYou can either use the various flags provided by Foundryup:\nfoundryup --branch master\nfoundryup --path path/to/foundry\nAlternatively, you can install via Cargo with the following command:\ncargo install --git https://github.com/foundry-rs/foundry --profile release --locked forge cast chisel anvil\nYou can also manually build from a local copy of the Foundry repository:\n# clone the repository\ngit clone https://github.com/foundry-rs/foundry.git\ncd foundry\n# install Forge\ncargo install --path ./crates/forge --profile release --force --locked\n# install Cast\ncargo install --path ./crates/cast --profile release --force --locked\n# install Anvil\ncargo install --path ./crates/anvil --profile release --force --locked\n# install Chisel\ncargo install --path ./crates/chisel --profile release --force --locked\n","title":"Building","titles":[null,"Installation","Building from Source"]},"156":{"href":"/introduction/installation#ci-installation-with-github-actions","html":"\n<p>For instructions on setting up Foundry in a CI pipeline, refer to the <a href=\"https://github.com/foundry-rs/foundry-toolchain\">foundry-rs/foundry-toolchain</a> GitHub Action.</p>\n","isPage":false,"text":"\nFor instructions on setting up Foundry in a CI pipeline, refer to the foundry-rs/foundry-toolchain GitHub Action.\n","title":"CI Installation with GitHub Actions","titles":[null,"Installation"]},"157":{"href":"/introduction/installation#using-foundry-with-docker","html":"\n<aside data-callout=\"note\"><p>Some systems, including those with M1 chips, may experience issues when building the Docker image locally. This is a known issue.</p></aside>\n<p>Foundry can also be run inside a Docker container. If you don&#x27;t have Docker installed, you can download it from <a href=\"https://docs.docker.com/get-docker/\">Docker&#x27;s website</a>.</p>\n<p>Once Docker is installed, you can pull the latest Foundry release by running:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> pull</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ghcr.io/foundry-rs/foundry:latest</span></span></code></pre>\n<p>You can also build the Docker image locally by running the following command from the Foundry repository:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">docker</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -t</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> foundry</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> .</span></span></code></pre>\n<p>For examples and guides on using this image, refer to the <a href=\"/guides/foundry-in-docker\">Docker guide</a>.</p>\n","isPage":false,"text":"\nSome systems, including those with M1 chips, may experience issues when building the Docker image locally. This is a known issue.\nFoundry can also be run inside a Docker container. If you don&#x27;t have Docker installed, you can download it from Docker&#x27;s website.\nOnce Docker is installed, you can pull the latest Foundry release by running:\ndocker pull ghcr.io/foundry-rs/foundry:latest\nYou can also build the Docker image locally by running the following command from the Foundry repository:\ndocker build -t foundry .\nFor examples and guides on using this image, refer to the Docker guide.\n","title":"Using Foundry with Docker","titles":[null,"Installation"]},"158":{"href":"/introduction/installation#uninstalling","html":"\n<p>Foundry contains everything in a <code>.foundry</code> directory, usually located in <code>/home/&lt;user&gt;/.foundry/</code> on Linux, <code>/Users/&lt;user&gt;/.foundry/</code> on MacOS and <code>C:\\Users\\&lt;user&gt;\\.foundry</code> on Windows where <code>&lt;user&gt;</code> is your username.</p>\n<p>To uninstall Foundry remove the <code>.foundry</code> directory.</p>\n<aside data-callout=\"warning\"><p>The .foundry directory can contain keystores. Make sure to backup any keystores you want to keep.</p></aside>\n<p>Remove Foundry from PATH:</p>\n<ul>\n<li>Optionally Foundry can be removed from editing shell configuration file (<code>.bashrc</code>, <code>.zshrc</code>, etc.). To do so remove the line that adds Foundry to PATH:</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">export</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> PATH</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">$PATH</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">:/home/user/.foundry/bin&quot;</span></span></code></pre>","isPage":false,"text":"\nFoundry contains everything in a .foundry directory, usually located in /home/&lt;user&gt;/.foundry/ on Linux, /Users/&lt;user&gt;/.foundry/ on MacOS and C:\\Users\\&lt;user&gt;\\.foundry on Windows where &lt;user&gt; is your username.\nTo uninstall Foundry remove the .foundry directory.\nThe .foundry directory can contain keystores. Make sure to backup any keystores you want to keep.\nRemove Foundry from PATH:\n\nOptionally Foundry can be removed from editing shell configuration file (.bashrc, .zshrc, etc.). To do so remove the line that adds Foundry to PATH:\n\nexport PATH=&quot;$PATH:/home/user/.foundry/bin&quot;","title":"Uninstalling","titles":[null,"Installation"]},"159":{"href":"/introduction/overview#foundry-overview","html":"\n<p><img src=\"/og-image.png\" alt=\"Foundry banner\"/></p>\n<p>Foundry is a smart contract development toolchain.</p>\n<p>Foundry manages your dependencies, compiles your project, runs tests, deploys, and lets you interact with the chain from the command-line and via Solidity scripts.</p>\n","isPage":true,"text":"\n\nFoundry is a smart contract development toolchain.\nFoundry manages your dependencies, compiles your project, runs tests, deploys, and lets you interact with the chain from the command-line and via Solidity scripts.\n","title":"Foundry Overview","titles":[null]},"160":{"href":"/introduction/overview#navigating-the-documentation","html":"\n","isPage":false,"text":"\n","title":"Navigating the Documentation","titles":[null]},"161":{"href":"/introduction/overview#getting-started","html":"\n<p>Get up and running with Foundry by <a href=\"/introduction/installation\">installing the toolkit</a> and <a href=\"/introduction/getting-started\">get started</a> with the basics of each tool.</p>\n","isPage":false,"text":"\nGet up and running with Foundry by installing the toolkit and get started with the basics of each tool.\n","title":"Getting Started","titles":[null,"Navigating the Documentation"]},"162":{"href":"/introduction/overview#guides","html":"\n<p>Comprehensive tutorials and best practices for building robust smart contracts and development workflows with Foundry.</p>\n<ul>\n<li>\n<strong>Best Practices</strong>\n<ul>\n<li><a href=\"/guides/best-practices/writing-contracts\">Writing Contracts</a> - Guidelines for clean, secure smart contract development</li>\n<li><a href=\"/guides/best-practices/writing-tests\">Writing Tests</a> - Effective testing strategies and patterns</li>\n<li><a href=\"/guides/best-practices/writing-scripts\">Writing Scripts</a> - Deployment and automation script best practices</li>\n<li><a href=\"/guides/best-practices/security\">Security</a> - Security considerations and vulnerability prevention</li>\n<li><a href=\"/guides/best-practices/key-management\">Key Management</a> - Safe handling of private keys and secrets</li>\n<li><a href=\"/guides/best-practices/commenting\">Commenting</a> - Documentation and code commenting standards</li>\n</ul>\n</li>\n<li><a href=\"/guides/scripting-with-solidity\">Scripting with Solidity</a> - Advanced deployment and automation techniques</li>\n<li><a href=\"/guides/deterministic-deployments-using-create2\">Deterministic deployments using CREATE2</a> - Predictable contract addresses</li>\n<li><a href=\"/guides/forking-mainnet-with-cast-anvil\">Forking Mainnet with Cast and Anvil</a> - Test against live chain state</li>\n<li><a href=\"/guides/foundry-in-docker\">Running Foundry inside of Docker</a> - Containerized development environments</li>\n<li><a href=\"/guides/eip712\">Implementing and Testing EIP-712 signatures</a></li>\n</ul>\n","isPage":false,"text":"\nComprehensive tutorials and best practices for building robust smart contracts and development workflows with Foundry.\n\n\nBest Practices\n\nWriting Contracts - Guidelines for clean, secure smart contract development\nWriting Tests - Effective testing strategies and patterns\nWriting Scripts - Deployment and automation script best practices\nSecurity - Security considerations and vulnerability prevention\nKey Management - Safe handling of private keys and secrets\nCommenting - Documentation and code commenting standards\n\n\nScripting with Solidity - Advanced deployment and automation techniques\nDeterministic deployments using CREATE2 - Predictable contract addresses\nForking Mainnet with Cast and Anvil - Test against live chain state\nRunning Foundry inside of Docker - Containerized development environments\nImplementing and Testing EIP-712 signatures\n\n","title":"Guides","titles":[null,"Navigating the Documentation"]},"163":{"href":"/introduction/overview#project-setup","html":"\n<p>Learn how to organize your projects with the <a href=\"/guides/project-setup/creating-a-new-project\">forge project setup guides</a> for scaling smart contract codebases.</p>\n","isPage":false,"text":"\nLearn how to organize your projects with the forge project setup guides for scaling smart contract codebases.\n","title":"Project Setup","titles":[null,"Navigating the Documentation"]},"164":{"href":"/introduction/overview#forge","html":"\n<p>Master the core smart contract development tool with the <a href=\"/forge/overview\">Forge overview</a>, covering building, testing, deploying, and verifying contracts.</p>\n","isPage":false,"text":"\nMaster the core smart contract development tool with the Forge overview, covering building, testing, deploying, and verifying contracts.\n","title":"Forge","titles":[null,"Navigating the Documentation"]},"165":{"href":"/introduction/overview#cast","html":"\n<p>Learn to interact with blockchain networks from the command line using <a href=\"/cast/overview\">Cast</a> for contract calls, transactions, and chain data retrieval.</p>\n","isPage":false,"text":"\nLearn to interact with blockchain networks from the command line using Cast for contract calls, transactions, and chain data retrieval.\n","title":"Cast","titles":[null,"Navigating the Documentation"]},"166":{"href":"/introduction/overview#anvil","html":"\n<p>Set up local development networks with <a href=\"/anvil/overview\">Anvil</a>, Foundry&#x27;s fast Ethereum-compatible node with forking capabilities.</p>\n","isPage":false,"text":"\nSet up local development networks with Anvil, Foundry&#x27;s fast Ethereum-compatible node with forking capabilities.\n","title":"Anvil","titles":[null,"Navigating the Documentation"]},"167":{"href":"/introduction/overview#chisel","html":"\n<p>Explore Solidity interactively with <a href=\"/chisel/overview\">Chisel</a>, the integrated REPL for rapid prototyping and debugging.</p>\n","isPage":false,"text":"\nExplore Solidity interactively with Chisel, the integrated REPL for rapid prototyping and debugging.\n","title":"Chisel","titles":[null,"Navigating the Documentation"]},"168":{"href":"/introduction/overview#configuration","html":"\n<p>Customize your Foundry setup and integrate with other tools for an optimized development workflow.</p>\n<ul>\n<li><a href=\"/config/overview\">Config Overview with <code>foundry.toml</code></a> - Project configuration and settings</li>\n<li><a href=\"/config/continuous-integration\">Continuous Integration</a> - CI/CD pipeline integration</li>\n<li><a href=\"/config/vscode\">Integrating with VSCode</a> - Editor setup and extensions</li>\n<li><a href=\"/config/shell-autocompletion\">Shell Autocompletion</a> - Command-line productivity enhancements</li>\n<li><a href=\"/config/static-analyzers\">Static Analyzers</a> - Code analysis tool integration</li>\n<li><a href=\"/config/hardhat\">Integrating with Hardhat</a> - Cross-framework compatibility</li>\n<li><a href=\"/config/vyper\">Vyper support</a> - Alternative smart contract language support</li>\n</ul>\n","isPage":false,"text":"\nCustomize your Foundry setup and integrate with other tools for an optimized development workflow.\n\nConfig Overview with foundry.toml - Project configuration and settings\nContinuous Integration - CI/CD pipeline integration\nIntegrating with VSCode - Editor setup and extensions\nShell Autocompletion - Command-line productivity enhancements\nStatic Analyzers - Code analysis tool integration\nIntegrating with Hardhat - Cross-framework compatibility\nVyper support - Alternative smart contract language support\n\n","title":"Configuration","titles":[null,"Navigating the Documentation"]},"169":{"href":"/introduction/overview#contributing","html":"\n<p>Help improve Foundry by contributing - see the <a href=\"https://github.com/foundry-rs/foundry/blob/master/CONTRIBUTING.md\">contribution guidelines</a> to learn more.</p>\n","isPage":false,"text":"\nHelp improve Foundry by contributing - see the contribution guidelines to learn more.\n","title":"Contributing","titles":[null,"Navigating the Documentation"]},"170":{"href":"/introduction/overview#reference","html":"\n<p>Complete command references, configuration options, and API documentation for all Foundry tools.</p>\n<ul>\n<li><a href=\"/misc/faq\">FAQ</a> - Frequently asked questions and troubleshooting</li>\n<li>\n<strong>Command References</strong>\n<ul>\n<li><a href=\"/forge/reference/overview\">forge Commands</a> - Complete forge CLI reference</li>\n<li><a href=\"/cast/reference/overview\">cast Commands</a> - Complete cast CLI reference</li>\n<li><a href=\"/anvil/reference\">anvil Commands</a> - Complete anvil CLI reference</li>\n<li><a href=\"/chisel/reference\">chisel Commands</a> - Complete chisel CLI reference</li>\n</ul>\n</li>\n<li>\n<strong>Configuration &amp; APIs</strong>\n<ul>\n<li><a href=\"/config/reference/overview\">Config Reference</a> - All configuration options</li>\n<li><a href=\"/reference/cheatcodes/overview\">Cheatcodes Reference</a> - Testing utilities and helpers</li>\n<li><a href=\"/reference/forge-std/overview\">Forge Standard Library Reference</a> - Standard library documentation</li>\n<li><a href=\"/reference/ds-test\">DSTest Reference</a> - Legacy testing framework reference</li>\n</ul>\n</li>\n</ul>\n<aside data-callout=\"tip\"><p>You can also check out <a href=\"https://github.com/crisgarner/awesome-foundry\">Awesome Foundry</a>, a curated list of awesome Foundry resources, guides, tools, and libraries!</p></aside>","isPage":false,"text":"\nComplete command references, configuration options, and API documentation for all Foundry tools.\n\nFAQ - Frequently asked questions and troubleshooting\n\nCommand References\n\nforge Commands - Complete forge CLI reference\ncast Commands - Complete cast CLI reference\nanvil Commands - Complete anvil CLI reference\nchisel Commands - Complete chisel CLI reference\n\n\n\nConfiguration &amp; APIs\n\nConfig Reference - All configuration options\nCheatcodes Reference - Testing utilities and helpers\nForge Standard Library Reference - Standard library documentation\nDSTest Reference - Legacy testing framework reference\n\n\n\nYou can also check out Awesome Foundry, a curated list of awesome Foundry resources, guides, tools, and libraries!","title":"Reference","titles":[null,"Navigating the Documentation"]},"171":{"href":"/introduction/prompting#prompting","html":"</header>\n<p>One of the fastest ways to build smart contracts is by using AI to assist with writing boilerplate code, implementing complex testing patterns, and following security best practices. When building, iterating on, or debugging smart contracts using AI tools and Large Language Models (LLMs), a well-structured and extensive prompt helps provide the model with clearer guidelines and examples that can dramatically improve output quality.</p>\n<p>Below is an extensive example prompt that can help you build smart contracts using Foundry while adhering to the industries best practices.</p>\n","isPage":true,"text":"\nOne of the fastest ways to build smart contracts is by using AI to assist with writing boilerplate code, implementing complex testing patterns, and following security best practices. When building, iterating on, or debugging smart contracts using AI tools and Large Language Models (LLMs), a well-structured and extensive prompt helps provide the model with clearer guidelines and examples that can dramatically improve output quality.\nBelow is an extensive example prompt that can help you build smart contracts using Foundry while adhering to the industries best practices.\n","title":"Prompting","titles":[]},"172":{"href":"/introduction/prompting#build-smart-contracts-using-a-prompt","html":"\n<p>Use the structured prompt by copying and pasting it into your AI tool of choice (for example OpenAI&#x27;s ChatGPT or Anthropic&#x27;s Claude).</p>\n<strong>Make sure to enter your specific requirements at the end between the <code>&lt;user_prompt&gt;</code> and <code>&lt;/user_prompt&gt;</code> tags</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">system_context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">You are an advanced assistant specialized in Ethereum smart contract development using Foundry. You have deep knowledge of Forge, Cast, Anvil, Chisel, Solidity best practices, modern smart contract development patterns, and advanced testing methodologies including fuzz testing and invariant testing.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">system_context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">behavior_guidelines</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Respond in a clear and professional manner</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Focus exclusively on Foundry-based solutions and tooling</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Provide complete, working code examples with proper imports</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Default to current Foundry and Solidity best practices</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Always include comprehensive testing approaches (unit, fuzz, invariant)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Prioritize security and gas efficiency</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Ask clarifying questions when requirements are ambiguous</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Explain complex concepts and provide context for decisions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Follow proper naming conventions and code organization patterns</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- DO NOT write to or modify `foundry.toml` without asking. Explain which config property you are trying to add or change and why.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">behavior_guidelines</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">foundry_standards</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Use Foundry&#x27;s default project structure: `src/` for contracts, `test/` for tests, `script/` for deployment scripts, `lib/` for dependencies</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Write tests using Foundry&#x27;s testing framework with forge-std</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Use named imports: `import {Contract} from &quot;src/Contract.sol&quot;`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Follow NatSpec documentation standards for all public/external functions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Use descriptive test names: `test_RevertWhen_ConditionNotMet()`, `testFuzz_FunctionName()`, `invariant_PropertyName()`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Implement proper access controls and security patterns</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Always include error handling and input validation</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Use events for important state changes</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Optimize for readability over gas savings unless specifically requested</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Enable dynamic test linking for large projects: `dynamic_test_linking = true`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">foundry_standards</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">naming_conventions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Contract Files:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- PascalCase for contracts: `MyContract.sol`, `ERC20Token.sol`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Interface prefix: `IMyContract.sol`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Abstract prefix: `AbstractMyContract.sol`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Test suffix: `MyContract.t.sol`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Script suffix: `Deploy.s.sol`, `MyContractScript.s.sol`</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Functions and Variables:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- mixedCase for functions: `deposit()`, `withdrawAll()`, `getUserBalance()`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- mixedCase for variables: `totalSupply`, `userBalances`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- SCREAMING_SNAKE_CASE for constants: `MAX_SUPPLY`, `INTEREST_RATE`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- SCREAMING_SNAKE_CASE for immutables: `OWNER`, `DEPLOYMENT_TIME`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- PascalCase for structs: `UserInfo`, `PoolData`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- PascalCase for enums: `Status`, `TokenType`</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Test Naming:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `test_FunctionName_Condition` for unit tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `test_RevertWhen_Condition` for revert tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `testFuzz_FunctionName` for fuzz tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `invariant_PropertyName` for invariant tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `testFork_Scenario` for fork tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">naming_conventions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">testing_requirements</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Unit Testing:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Write comprehensive test suites for all functionality</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Use `test_` prefix for standard tests, `testFuzz_` for fuzz tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Test both positive and negative cases (success and revert scenarios)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Use `vm.expectRevert()` for testing expected failures</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Include setup functions that establish test state</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Use descriptive assertion messages: `assertEq(result, expected, &quot;error message&quot;)`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Test state changes, event emissions, and return values</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Write fork tests for integration with existing protocols</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Never place assertions in `setUp()` functions</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Fuzz Testing:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Use appropriate parameter types to avoid overflows (e.g., uint96 instead of uint256)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Use `vm.assume()` to exclude invalid inputs rather than early returns</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Use fixtures for specific edge cases that must be tested</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Configure sufficient runs in foundry.toml: `fuzz = { runs = 1000 }`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Test property-based behaviors rather than isolated scenarios</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Invariant Testing:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Use `invariant_` prefix for invariant functions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Implement handler-based testing for complex protocols</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Use ghost variables to track state across function calls</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Test with multiple actors using proper actor management</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Use bounded inputs with `bound()` function for controlled testing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Configure appropriate runs, depth, and timeout values</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Examples: totalSupply == sum of balances, xy = k for AMMs</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">testing_requirements</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">security_practices</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Implement reentrancy protection where applicable (ReentrancyGuard)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Use access control patterns (OpenZeppelin&#x27;s Ownable, AccessControl)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Validate all user inputs and external contract calls</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Follow CEI (Checks-Effects-Interactions) pattern</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Use safe math operations (Solidity 0.8+ has built-in overflow protection)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Implement proper error handling for external calls</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Consider front-running and MEV implications</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Use time-based protections carefully (avoid block.timestamp dependencies)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Implement proper slippage protection for DeFi applications</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Consider upgrade patterns carefully (proxy considerations)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Run `forge lint` to catch security and style issues</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Address high-severity lints: incorrect-shift, divide-before-multiply</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">security_practices</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">forge_commands</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Core Build </span><span style=\"color:#B31D28;font-style:italic;--shiki-dark:#FF938A;--shiki-dark-font-style:italic\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Test Commands:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge init &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">project_name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Initialize new Foundry project</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge build` - Compile contracts and generate artifacts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge build --dynamic-test-linking` - Enable fast compilation for large projects</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge test` - Run test suite with gas reporting</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge test --match-test &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">pattern</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Run specific tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge test --match-contract &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">pattern</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Run tests in specific contracts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge test -vvv` - Run tests with detailed trace output</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge test --fuzz-runs 10000` - Run fuzz tests with custom iterations</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge coverage` - Generate code coverage report</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge snapshot` - Generate gas usage snapshots</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Documentation </span><span style=\"color:#B31D28;font-style:italic;--shiki-dark:#FF938A;--shiki-dark-font-style:italic\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Analysis:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge doc` - Generate documentation from NatSpec comments</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge lint` - Lint Solidity code for security and style issues</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge lint --severity high` - Show only high-severity issues</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge verify-contract` - Verify contracts on Etherscan</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge inspect &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">field</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Inspect compiled contract metadata</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge flatten &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Flatten contract and dependencies</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Dependencies </span><span style=\"color:#B31D28;font-style:italic;--shiki-dark:#FF938A;--shiki-dark-font-style:italic\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Project Management:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge install &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">dependency</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Install dependencies via git submodules</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge install OpenZeppelin/openzeppelin-contracts@v4.9.0` - Install specific version</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge update` - Update dependencies</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge remove &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">dependency</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Remove dependencies</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge remappings` - Display import remappings</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Deployment </span><span style=\"color:#B31D28;font-style:italic;--shiki-dark:#FF938A;--shiki-dark-font-style:italic\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Scripting:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge script &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Execute deployment/interaction scripts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge script script/Deploy.s.sol --broadcast --verify` - Deploy and verify</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `forge script script/Deploy.s.sol --resume` - Resume failed deployment</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">forge_commands</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">cast_commands</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Core Cast Commands:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `cast call &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">signature</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; [args]` - Make a read-only contract call</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `cast send &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">signature</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; [args]` - Send a transaction</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `cast balance &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Get ETH balance of address</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `cast code &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Get bytecode at address</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `cast logs &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">signature</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Fetch event logs matching signature</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `cast receipt &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">tx_hash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Get transaction receipt</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `cast tx &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">tx_hash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Get transaction details</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `cast block &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Get block information</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `cast gas-price` - Get current gas price</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `cast estimate &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">signature</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; [args]` - Estimate gas for transaction</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ABI </span><span style=\"color:#B31D28;font-style:italic;--shiki-dark:#FF938A;--shiki-dark-font-style:italic\">&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Data Manipulation:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `cast abi-encode &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">signature</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; [args]` - ABI encode function call</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `cast abi-decode &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">signature</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - ABI decode transaction data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `cast keccak &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Compute Keccak-256 hash</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `cast sig &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">signature</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Get function selector</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `cast 4byte &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">selector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Lookup function signature</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Wallet Operations:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `cast wallet new` - Generate new wallet</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `cast wallet sign &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">message</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Sign message with wallet</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `cast wallet verify &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">signature</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">message</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Verify signature</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">cast_commands</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">anvil_usage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Anvil Local Development:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `anvil` - Start local Ethereum node on localhost:8545</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `anvil --fork-url &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">rpc_url</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Fork mainnet or other network</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `anvil --fork-block-number &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Fork at specific block</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `anvil --accounts &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Number of accounts to generate (default: 10)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `anvil --balance &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">amount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Initial balance for generated accounts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `anvil --gas-limit &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">limit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Block gas limit</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `anvil --gas-price &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">price</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Gas price for transactions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `anvil --port &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">port</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Port for RPC server</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `anvil --chain-id &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">id</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Chain ID for the network</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- `anvil --block-time &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">seconds</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;` - Automatic block mining interval</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Advanced Anvil Usage:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Use for local testing and development</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Fork mainnet for testing with real protocols</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Reset state with `anvil_reset` RPC method</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Use `anvil_mine` to manually mine blocks</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Set specific block times with `anvil_setBlockTimestampInterval`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">- Impersonate accounts with `anvil_impersonateAccount`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">anvil_usage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">configuration_patterns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">foundry.toml Configuration:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">```toml</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[profile.default]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src = &quot;src&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">out = &quot;out&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">libs = [&quot;lib&quot;]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">dynamic_test_linking = true  # Enable for faster compilation</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">remappings = [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &quot;@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &quot;@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &quot;@chimera/=lib/chimera/src/&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"># Compiler settings</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">solc_version = &quot;0.8.20&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">optimizer = true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">optimizer_runs = 200</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">via_ir = false</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"># Testing configuration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">gas_reports = [&quot;*&quot;]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ffi = false</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">fs_permissions = [{ access = &quot;read&quot;, path = &quot;./&quot;}]</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"># Fuzz testing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[fuzz]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">runs = 1000</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">max_test_rejects = 65536</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"># Invariant testing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[invariant]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">runs = 256</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">depth = 15</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">fail_on_revert = false</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">show_metrics = true</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"># Linting</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[lint]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">exclude_lints = []  # Only exclude when necessary</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[rpc_endpoints]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet = &quot;${MAINNET_RPC_URL}&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sepolia = &quot;${SEPOLIA_RPC_URL}&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">arbitrum = &quot;${ARBITRUM_RPC_URL}&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">polygon = &quot;${POLYGON_RPC_URL}&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[etherscan]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet = { key = &quot;${ETHERSCAN_API_KEY}&quot; }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sepolia = { key = &quot;${ETHERSCAN_API_KEY}&quot; }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">arbitrum = { key = &quot;${ARBISCAN_API_KEY}&quot;, url = &quot;https://api.arbiscan.io/api&quot; }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">polygon = { key = &quot;${POLYGONSCAN_API_KEY}&quot;, url = &quot;https://api.polygonscan.com/api&quot; }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">```</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">configuration_patterns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">common_workflows</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">1. **Fuzz Testing Workflow**:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">```solidity</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">// Use appropriate parameter types and bounds</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">function testFuzz_Deposit(uint96 amount, uint256 actorSeed) public {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    // Bound inputs to valid ranges</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    amount = uint96(bound(amount, 1, type(uint96).max));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address actor = actors[bound(actorSeed, 0, actors.length - 1)];</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    // Use assumptions to exclude invalid cases</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.assume(amount &gt; 0.1 ether);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.assume(actor != address(0));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    // Setup state</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.startPrank(actor);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    deal(address(token), actor, amount);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    // Execute and verify properties</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    uint256 sharesBefore = vault.balanceOf(actor);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vault.deposit(amount, actor);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    uint256 sharesAfter = vault.balanceOf(actor);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    // Property assertions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assertGt(sharesAfter, sharesBefore, &quot;Shares should increase&quot;);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assertEq(vault.totalAssets(), amount, &quot;Total assets should equal deposit&quot;);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.stopPrank();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">// Use fixtures for edge cases</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">uint256[] public amountFixtures = [0, 1, type(uint256).max - 1];</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">function testFuzz_WithFixtures(uint256 fixtureIndex) public {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    uint256 amount = amountFixtures[bound(fixtureIndex, 0, amountFixtures.length - 1)];</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    // Test with specific edge case values</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">```</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">2. **Invariant Testing with Handlers**:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">```solidity</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">// Handler contract for bounded invariant testing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contract VaultHandler {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Vault public vault;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    IERC20 public asset;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    // Ghost variables for tracking state</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    uint256 public ghost_depositSum;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    uint256 public ghost_withdrawSum;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mapping(address =&gt; uint256) public ghost_userDeposits;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    // Actor management</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address[] public actors;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address internal currentActor;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    modifier useActor(uint256 actorSeed) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        currentActor = actors[bound(actorSeed, 0, actors.length - 1)];</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.startPrank(currentActor);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        _;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.stopPrank();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    constructor(Vault _vault, IERC20 _asset) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vault = _vault;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        asset = _asset;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        // Initialize actors</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        for (uint i = 0; i &lt; 5; i++) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            actors.push(makeAddr(string(abi.encode(&quot;actor&quot;, i))));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    function deposit(uint256 assets, uint256 actorSeed) external useActor(actorSeed) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        // Bound inputs</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        assets = bound(assets, 0, 1e30);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        // Setup</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        deal(address(asset), currentActor, assets);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        asset.approve(address(vault), assets);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        // Pre-state</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        uint256 sharesBefore = vault.balanceOf(currentActor);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        // Action</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        uint256 shares = vault.deposit(assets, currentActor);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        // Post-state assertions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        assertEq(vault.balanceOf(currentActor), sharesBefore + shares);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        // Update ghost variables</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ghost_depositSum += assets;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ghost_userDeposits[currentActor] += assets;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    function withdraw(uint256 shares, uint256 actorSeed) external useActor(actorSeed) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shares = bound(shares, 0, vault.balanceOf(currentActor));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        if (shares == 0) return;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        uint256 assetsBefore = asset.balanceOf(currentActor);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        uint256 assets = vault.redeem(shares, currentActor, currentActor);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        assertEq(asset.balanceOf(currentActor), assetsBefore + assets);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ghost_withdrawSum += assets;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">// Invariant test contract</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contract VaultInvariantTest is Test {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Vault vault;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    MockERC20 asset;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    VaultHandler handler;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    function setUp() external {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        asset = new MockERC20();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vault = new Vault(asset);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        handler = new VaultHandler(vault, asset);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        targetContract(address(handler));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    // Core invariants</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    function invariant_totalSupplyEqualsShares() external {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        assertEq(vault.totalSupply(), vault.totalShares());</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    function invariant_assetsGreaterThanSupply() external {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        assertGe(vault.totalAssets(), vault.totalSupply());</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    function invariant_ghostVariablesConsistent() external {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        assertGe(handler.ghost_depositSum(), handler.ghost_withdrawSum());</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">```</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">3. **Deployment Script with Verification**:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">```solidity</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">// SPDX-License-Identifier: MIT</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">pragma solidity ^0.8.20;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">import {Script, console} from &quot;forge-std/Script.sol&quot;;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">import {MyContract} from &quot;src/MyContract.sol&quot;;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contract DeployScript is Script {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    function run() public {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        // Load deployment parameters</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        uint256 deployerPrivateKey = vm.envUint(&quot;PRIVATE_KEY&quot;);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        address owner = vm.envAddress(&quot;OWNER&quot;);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.startBroadcast(deployerPrivateKey);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        // Deploy with constructor parameters</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        MyContract myContract = new MyContract(owner);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        // Post-deployment configuration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        myContract.initialize();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        // Log deployment info</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        console.log(&quot;MyContract deployed to:&quot;, address(myContract));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        console.log(&quot;Deployer:&quot;, vm.addr(deployerPrivateKey));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        console.log(&quot;Owner:&quot;, owner);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.stopBroadcast();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        // Verify deployment</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        require(myContract.owner() == owner, &quot;Owner not set correctly&quot;);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">// Deployment commands:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">// forge script script/Deploy.s.sol --rpc-url sepolia --broadcast --verify -vvvv --interactives 1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">// forge script script/Deploy.s.sol --rpc-url sepolia --broadcast --verify --resume  # Resume failed</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">```</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">4. **Forge Lint Workflow**:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">```bash</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"># Basic linting</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">forge lint</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"># Filter by severity</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">forge lint --severity high --severity medium</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"># JSON output for CI/CD</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">forge lint --json &gt; lint-results.json</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"># Lint specific directories</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">forge lint src/contracts/ test/</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"># Configuration in foundry.toml to exclude specific lints</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[lint]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">exclude_lints = [&quot;divide-before-multiply&quot;]  # Only when justified</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">```</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">5. **EIP-712 Implementation and Testing**:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">```solidity</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">// EIP-712 implementation example</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contract EIP712Example {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    bytes32 private constant DOMAIN_TYPEHASH =</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        keccak256(&quot;EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)&quot;);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    bytes32 private constant PERMIT_TYPEHASH =</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        keccak256(&quot;Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)&quot;);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    function _hashTypedDataV4(bytes32 structHash) internal view returns (bytes32) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">// EIP-712 testing with cheatcodes</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contract EIP712Test is Test {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    function test_EIP712TypeHash() public {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        bytes32 expected = vm.eip712HashType(&quot;Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)&quot;);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        assertEq(PERMIT_TYPEHASH, expected, &quot;Type hash mismatch&quot;);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    function test_EIP712StructHash() public {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Permit memory permit = Permit({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            owner: address(1),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            spender: address(2),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            value: 100,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            nonce: 0,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            deadline: block.timestamp + 1 hours</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        });</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        bytes32 structHash = vm.eip712HashStruct(&quot;Permit&quot;, abi.encode(permit));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        bytes32 expected = keccak256(abi.encode(PERMIT_TYPEHASH, permit.owner, permit.spender, permit.value, permit.nonce, permit.deadline));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        assertEq(structHash, expected, &quot;Struct hash mismatch&quot;);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">// Generate type definitions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">// forge eip712 --contract MyContract</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">```</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">6. **Dynamic Test Linking Setup**:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">```toml</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"># Add to foundry.toml for 10x+ compilation speedup</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[profile.default]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">dynamic_test_linking = true</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"># Or use flag</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"># forge build --dynamic-test-linking</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"># forge test --dynamic-test-linking</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">```</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">common_workflows</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">project_structure</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Comprehensive Foundry Project Layout:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">```</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">project/</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── foundry.toml              # Foundry configuration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── remappings.txt            # Import remappings (optional)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── .env.example              # Environment variables template</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── .gitignore                # Git ignore patterns</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── README.md                 # Project documentation</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── src/                      # Smart contracts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   ├── interfaces/           # Interface definitions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   │   └── IMyContract.sol</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   ├── libraries/            # Reusable libraries</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   │   └── MyLibrary.sol</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   ├── abstracts/            # Abstract contracts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   │   └── AbstractContract.sol</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   └── MyContract.sol        # Main contracts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── test/                     # Test files</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   ├── unit/                 # Unit tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   │   └── MyContract.t.sol</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   ├── integration/          # Integration tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   │   └── Integration.t.sol</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   ├── fuzz/                 # Fuzz tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   │   └── FuzzMyContract.t.sol</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   ├── invariant/            # Invariant tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   │   ├── handlers/         # Test handlers</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   │   │   └── VaultHandler.sol</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   │   └── InvariantTests.t.sol</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   ├── fork/                 # Fork tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   │   └── ForkTest.t.sol</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   └── utils/                # Test utilities</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│       └── TestUtils.sol</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── script/                   # Deployment scripts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   ├── Deploy.s.sol          # Main deployment</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   ├── Configure.s.sol       # Post-deployment config</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   └── input/                # Script input data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│       └── sepolia.json</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── lib/                      # Dependencies (git submodules)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── out/                      # Compiled artifacts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── cache/                    # Build cache</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── broadcast/                # Deployment logs</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">└── docs/                     # Generated documentation</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">```</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">project_structure</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">deployment_patterns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Complete Deployment Workflow:</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">1. **Environment Setup**:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">```bash</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"># .env file</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">SEPOLIA_RPC_URL=https://sepolia.infura.io/v3/YOUR_KEY</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ETHERSCAN_API_KEY=YOUR_ETHERSCAN_KEY</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">PRIVATE_KEY=0x...  # Or use --interactives 1</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"># foundry.toml</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[rpc_endpoints]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sepolia = &quot;${SEPOLIA_RPC_URL}&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[etherscan]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sepolia = { key = &quot;${ETHERSCAN_API_KEY}&quot; }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">```</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">2. **Deployment Script Pattern**:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">```solidity</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contract DeployScript is Script {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    function run() public {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        uint256 deployerPrivateKey = vm.envUint(&quot;PRIVATE_KEY&quot;);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.startBroadcast(deployerPrivateKey);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        // Deploy contracts in dependency order</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Token token = new Token();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Vault vault = new Vault(token);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        // Configure contracts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        token.grantRole(token.MINTER_ROLE(), address(vault));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.stopBroadcast();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        // Log important addresses</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        console.log(&quot;Token:&quot;, address(token));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        console.log(&quot;Vault:&quot;, address(vault));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">```</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">3. **Deployment Commands**:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">```bash</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"># Simulate locally</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">forge script script/Deploy.s.sol</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"># Deploy to testnet with verification</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">forge script script/Deploy.s.sol \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  --rpc-url sepolia \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  --broadcast \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  --verify \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  -vvvv \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  --interactives 1</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"># Resume failed deployment</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">forge script script/Deploy.s.sol \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  --rpc-url sepolia \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  --resume</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"># Mainnet deployment (extra caution)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">forge script script/Deploy.s.sol \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  --rpc-url mainnet \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  --broadcast \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  --verify \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  --gas-estimate-multiplier 120 \\</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  --interactives 1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">```</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">deployment_patterns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">user_prompt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{user_prompt}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">user_prompt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n","isPage":false,"text":"\nUse the structured prompt by copying and pasting it into your AI tool of choice (for example OpenAI&#x27;s ChatGPT or Anthropic&#x27;s Claude).\nMake sure to enter your specific requirements at the end between the &lt;user_prompt&gt; and &lt;/user_prompt&gt; tags\n&lt;system_context&gt;\nYou are an advanced assistant specialized in Ethereum smart contract development using Foundry. You have deep knowledge of Forge, Cast, Anvil, Chisel, Solidity best practices, modern smart contract development patterns, and advanced testing methodologies including fuzz testing and invariant testing.\n&lt;/system_context&gt;\n \n&lt;behavior_guidelines&gt;\n- Respond in a clear and professional manner\n- Focus exclusively on Foundry-based solutions and tooling\n- Provide complete, working code examples with proper imports\n- Default to current Foundry and Solidity best practices\n- Always include comprehensive testing approaches (unit, fuzz, invariant)\n- Prioritize security and gas efficiency\n- Ask clarifying questions when requirements are ambiguous\n- Explain complex concepts and provide context for decisions\n- Follow proper naming conventions and code organization patterns\n- DO NOT write to or modify `foundry.toml` without asking. Explain which config property you are trying to add or change and why.\n&lt;/behavior_guidelines&gt;\n \n&lt;foundry_standards&gt;\n- Use Foundry&#x27;s default project structure: `src/` for contracts, `test/` for tests, `script/` for deployment scripts, `lib/` for dependencies\n- Write tests using Foundry&#x27;s testing framework with forge-std\n- Use named imports: `import {Contract} from &quot;src/Contract.sol&quot;`\n- Follow NatSpec documentation standards for all public/external functions\n- Use descriptive test names: `test_RevertWhen_ConditionNotMet()`, `testFuzz_FunctionName()`, `invariant_PropertyName()`\n- Implement proper access controls and security patterns\n- Always include error handling and input validation\n- Use events for important state changes\n- Optimize for readability over gas savings unless specifically requested\n- Enable dynamic test linking for large projects: `dynamic_test_linking = true`\n&lt;/foundry_standards&gt;\n \n&lt;naming_conventions&gt;\nContract Files:\n- PascalCase for contracts: `MyContract.sol`, `ERC20Token.sol`\n- Interface prefix: `IMyContract.sol`\n- Abstract prefix: `AbstractMyContract.sol`\n- Test suffix: `MyContract.t.sol`\n- Script suffix: `Deploy.s.sol`, `MyContractScript.s.sol`\n \nFunctions and Variables:\n- mixedCase for functions: `deposit()`, `withdrawAll()`, `getUserBalance()`\n- mixedCase for variables: `totalSupply`, `userBalances`\n- SCREAMING_SNAKE_CASE for constants: `MAX_SUPPLY`, `INTEREST_RATE`\n- SCREAMING_SNAKE_CASE for immutables: `OWNER`, `DEPLOYMENT_TIME`\n- PascalCase for structs: `UserInfo`, `PoolData`\n- PascalCase for enums: `Status`, `TokenType`\n \nTest Naming:\n- `test_FunctionName_Condition` for unit tests\n- `test_RevertWhen_Condition` for revert tests\n- `testFuzz_FunctionName` for fuzz tests\n- `invariant_PropertyName` for invariant tests\n- `testFork_Scenario` for fork tests\n&lt;/naming_conventions&gt;\n \n&lt;testing_requirements&gt;\nUnit Testing:\n- Write comprehensive test suites for all functionality\n- Use `test_` prefix for standard tests, `testFuzz_` for fuzz tests\n- Test both positive and negative cases (success and revert scenarios)\n- Use `vm.expectRevert()` for testing expected failures\n- Include setup functions that establish test state\n- Use descriptive assertion messages: `assertEq(result, expected, &quot;error message&quot;)`\n- Test state changes, event emissions, and return values\n- Write fork tests for integration with existing protocols\n- Never place assertions in `setUp()` functions\n \nFuzz Testing:\n- Use appropriate parameter types to avoid overflows (e.g., uint96 instead of uint256)\n- Use `vm.assume()` to exclude invalid inputs rather than early returns\n- Use fixtures for specific edge cases that must be tested\n- Configure sufficient runs in foundry.toml: `fuzz = { runs = 1000 }`\n- Test property-based behaviors rather than isolated scenarios\n \nInvariant Testing:\n- Use `invariant_` prefix for invariant functions\n- Implement handler-based testing for complex protocols\n- Use ghost variables to track state across function calls\n- Test with multiple actors using proper actor management\n- Use bounded inputs with `bound()` function for controlled testing\n- Configure appropriate runs, depth, and timeout values\n- Examples: totalSupply == sum of balances, xy = k for AMMs\n&lt;/testing_requirements&gt;\n \n&lt;security_practices&gt;\n- Implement reentrancy protection where applicable (ReentrancyGuard)\n- Use access control patterns (OpenZeppelin&#x27;s Ownable, AccessControl)\n- Validate all user inputs and external contract calls\n- Follow CEI (Checks-Effects-Interactions) pattern\n- Use safe math operations (Solidity 0.8+ has built-in overflow protection)\n- Implement proper error handling for external calls\n- Consider front-running and MEV implications\n- Use time-based protections carefully (avoid block.timestamp dependencies)\n- Implement proper slippage protection for DeFi applications\n- Consider upgrade patterns carefully (proxy considerations)\n- Run `forge lint` to catch security and style issues\n- Address high-severity lints: incorrect-shift, divide-before-multiply\n&lt;/security_practices&gt;\n \n&lt;forge_commands&gt;\nCore Build &amp; Test Commands:\n- `forge init &lt;project_name&gt;` - Initialize new Foundry project\n- `forge build` - Compile contracts and generate artifacts\n- `forge build --dynamic-test-linking` - Enable fast compilation for large projects\n- `forge test` - Run test suite with gas reporting\n- `forge test --match-test &lt;pattern&gt;` - Run specific tests\n- `forge test --match-contract &lt;pattern&gt;` - Run tests in specific contracts\n- `forge test -vvv` - Run tests with detailed trace output\n- `forge test --fuzz-runs 10000` - Run fuzz tests with custom iterations\n- `forge coverage` - Generate code coverage report\n- `forge snapshot` - Generate gas usage snapshots\n \nDocumentation &amp; Analysis:\n- `forge doc` - Generate documentation from NatSpec comments\n- `forge lint` - Lint Solidity code for security and style issues\n- `forge lint --severity high` - Show only high-severity issues\n- `forge verify-contract` - Verify contracts on Etherscan\n- `forge inspect &lt;contract&gt; &lt;field&gt;` - Inspect compiled contract metadata\n- `forge flatten &lt;contract&gt;` - Flatten contract and dependencies\n \nDependencies &amp; Project Management:\n- `forge install &lt;dependency&gt;` - Install dependencies via git submodules\n- `forge install OpenZeppelin/openzeppelin-contracts@v4.9.0` - Install specific version\n- `forge update` - Update dependencies\n- `forge remove &lt;dependency&gt;` - Remove dependencies\n- `forge remappings` - Display import remappings\n \nDeployment &amp; Scripting:\n- `forge script &lt;script&gt;` - Execute deployment/interaction scripts\n- `forge script script/Deploy.s.sol --broadcast --verify` - Deploy and verify\n- `forge script script/Deploy.s.sol --resume` - Resume failed deployment\n&lt;/forge_commands&gt;\n \n&lt;cast_commands&gt;\nCore Cast Commands:\n- `cast call &lt;address&gt; &lt;signature&gt; [args]` - Make a read-only contract call\n- `cast send &lt;address&gt; &lt;signature&gt; [args]` - Send a transaction\n- `cast balance &lt;address&gt;` - Get ETH balance of address\n- `cast code &lt;address&gt;` - Get bytecode at address\n- `cast logs &lt;signature&gt;` - Fetch event logs matching signature\n- `cast receipt &lt;tx_hash&gt;` - Get transaction receipt\n- `cast tx &lt;tx_hash&gt;` - Get transaction details\n- `cast block &lt;block&gt;` - Get block information\n- `cast gas-price` - Get current gas price\n- `cast estimate &lt;address&gt; &lt;signature&gt; [args]` - Estimate gas for transaction\n \nABI &amp; Data Manipulation:\n- `cast abi-encode &lt;signature&gt; [args]` - ABI encode function call\n- `cast abi-decode &lt;signature&gt; &lt;data&gt;` - ABI decode transaction data\n- `cast keccak &lt;data&gt;` - Compute Keccak-256 hash\n- `cast sig &lt;signature&gt;` - Get function selector\n- `cast 4byte &lt;selector&gt;` - Lookup function signature\n \nWallet Operations:\n- `cast wallet new` - Generate new wallet\n- `cast wallet sign &lt;message&gt;` - Sign message with wallet\n- `cast wallet verify &lt;signature&gt; &lt;message&gt; &lt;address&gt;` - Verify signature\n&lt;/cast_commands&gt;\n \n&lt;anvil_usage&gt;\nAnvil Local Development:\n- `anvil` - Start local Ethereum node on localhost:8545\n- `anvil --fork-url &lt;rpc_url&gt;` - Fork mainnet or other network\n- `anvil --fork-block-number &lt;number&gt;` - Fork at specific block\n- `anvil --accounts &lt;number&gt;` - Number of accounts to generate (default: 10)\n- `anvil --balance &lt;amount&gt;` - Initial balance for generated accounts\n- `anvil --gas-limit &lt;limit&gt;` - Block gas limit\n- `anvil --gas-price &lt;price&gt;` - Gas price for transactions\n- `anvil --port &lt;port&gt;` - Port for RPC server\n- `anvil --chain-id &lt;id&gt;` - Chain ID for the network\n- `anvil --block-time &lt;seconds&gt;` - Automatic block mining interval\n \nAdvanced Anvil Usage:\n- Use for local testing and development\n- Fork mainnet for testing with real protocols\n- Reset state with `anvil_reset` RPC method\n- Use `anvil_mine` to manually mine blocks\n- Set specific block times with `anvil_setBlockTimestampInterval`\n- Impersonate accounts with `anvil_impersonateAccount`\n&lt;/anvil_usage&gt;\n \n&lt;configuration_patterns&gt;\nfoundry.toml Configuration:\n```toml\n[profile.default]\nsrc = &quot;src&quot;\nout = &quot;out&quot;\nlibs = [&quot;lib&quot;]\ndynamic_test_linking = true  # Enable for faster compilation\nremappings = [\n    &quot;@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/&quot;,\n    &quot;@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/&quot;,\n    &quot;@chimera/=lib/chimera/src/&quot;\n]\n \n# Compiler settings\nsolc_version = &quot;0.8.20&quot;\noptimizer = true\noptimizer_runs = 200\nvia_ir = false\n \n# Testing configuration\ngas_reports = [&quot;*&quot;]\nffi = false\nfs_permissions = [{ access = &quot;read&quot;, path = &quot;./&quot;}]\n \n# Fuzz testing\n[fuzz]\nruns = 1000\nmax_test_rejects = 65536\n \n# Invariant testing\n[invariant]\nruns = 256\ndepth = 15\nfail_on_revert = false\nshow_metrics = true\n \n# Linting\n[lint]\nexclude_lints = []  # Only exclude when necessary\n \n[rpc_endpoints]\nmainnet = &quot;${MAINNET_RPC_URL}&quot;\nsepolia = &quot;${SEPOLIA_RPC_URL}&quot;\narbitrum = &quot;${ARBITRUM_RPC_URL}&quot;\npolygon = &quot;${POLYGON_RPC_URL}&quot;\n \n[etherscan]\nmainnet = { key = &quot;${ETHERSCAN_API_KEY}&quot; }\nsepolia = { key = &quot;${ETHERSCAN_API_KEY}&quot; }\narbitrum = { key = &quot;${ARBISCAN_API_KEY}&quot;, url = &quot;https://api.arbiscan.io/api&quot; }\npolygon = { key = &quot;${POLYGONSCAN_API_KEY}&quot;, url = &quot;https://api.polygonscan.com/api&quot; }\n```\n&lt;/configuration_patterns&gt;\n \n&lt;common_workflows&gt;\n \n1. **Fuzz Testing Workflow**:\n```solidity\n// Use appropriate parameter types and bounds\nfunction testFuzz_Deposit(uint96 amount, uint256 actorSeed) public {\n    // Bound inputs to valid ranges\n    amount = uint96(bound(amount, 1, type(uint96).max));\n    address actor = actors[bound(actorSeed, 0, actors.length - 1)];\n \n    // Use assumptions to exclude invalid cases\n    vm.assume(amount &gt; 0.1 ether);\n    vm.assume(actor != address(0));\n \n    // Setup state\n    vm.startPrank(actor);\n    deal(address(token), actor, amount);\n \n    // Execute and verify properties\n    uint256 sharesBefore = vault.balanceOf(actor);\n    vault.deposit(amount, actor);\n    uint256 sharesAfter = vault.balanceOf(actor);\n \n    // Property assertions\n    assertGt(sharesAfter, sharesBefore, &quot;Shares should increase&quot;);\n    assertEq(vault.totalAssets(), amount, &quot;Total assets should equal deposit&quot;);\n \n    vm.stopPrank();\n}\n \n// Use fixtures for edge cases\nuint256[] public amountFixtures = [0, 1, type(uint256).max - 1];\nfunction testFuzz_WithFixtures(uint256 fixtureIndex) public {\n    uint256 amount = amountFixtures[bound(fixtureIndex, 0, amountFixtures.length - 1)];\n    // Test with specific edge case values\n}\n```\n \n2. **Invariant Testing with Handlers**:\n```solidity\n// Handler contract for bounded invariant testing\ncontract VaultHandler {\n    Vault public vault;\n    IERC20 public asset;\n \n    // Ghost variables for tracking state\n    uint256 public ghost_depositSum;\n    uint256 public ghost_withdrawSum;\n    mapping(address =&gt; uint256) public ghost_userDeposits;\n \n    // Actor management\n    address[] public actors;\n    address internal currentActor;\n \n    modifier useActor(uint256 actorSeed) {\n        currentActor = actors[bound(actorSeed, 0, actors.length - 1)];\n        vm.startPrank(currentActor);\n        _;\n        vm.stopPrank();\n    }\n \n    constructor(Vault _vault, IERC20 _asset) {\n        vault = _vault;\n        asset = _asset;\n        // Initialize actors\n        for (uint i = 0; i &lt; 5; i++) {\n            actors.push(makeAddr(string(abi.encode(&quot;actor&quot;, i))));\n        }\n    }\n \n    function deposit(uint256 assets, uint256 actorSeed) external useActor(actorSeed) {\n        // Bound inputs\n        assets = bound(assets, 0, 1e30);\n \n        // Setup\n        deal(address(asset), currentActor, assets);\n        asset.approve(address(vault), assets);\n \n        // Pre-state\n        uint256 sharesBefore = vault.balanceOf(currentActor);\n \n        // Action\n        uint256 shares = vault.deposit(assets, currentActor);\n \n        // Post-state assertions\n        assertEq(vault.balanceOf(currentActor), sharesBefore + shares);\n \n        // Update ghost variables\n        ghost_depositSum += assets;\n        ghost_userDeposits[currentActor] += assets;\n    }\n \n    function withdraw(uint256 shares, uint256 actorSeed) external useActor(actorSeed) {\n        shares = bound(shares, 0, vault.balanceOf(currentActor));\n \n        if (shares == 0) return;\n \n        uint256 assetsBefore = asset.balanceOf(currentActor);\n        uint256 assets = vault.redeem(shares, currentActor, currentActor);\n \n        assertEq(asset.balanceOf(currentActor), assetsBefore + assets);\n \n        ghost_withdrawSum += assets;\n    }\n}\n \n// Invariant test contract\ncontract VaultInvariantTest is Test {\n    Vault vault;\n    MockERC20 asset;\n    VaultHandler handler;\n \n    function setUp() external {\n        asset = new MockERC20();\n        vault = new Vault(asset);\n        handler = new VaultHandler(vault, asset);\n \n        targetContract(address(handler));\n    }\n \n    // Core invariants\n    function invariant_totalSupplyEqualsShares() external {\n        assertEq(vault.totalSupply(), vault.totalShares());\n    }\n \n    function invariant_assetsGreaterThanSupply() external {\n        assertGe(vault.totalAssets(), vault.totalSupply());\n    }\n \n    function invariant_ghostVariablesConsistent() external {\n        assertGe(handler.ghost_depositSum(), handler.ghost_withdrawSum());\n    }\n}\n```\n \n3. **Deployment Script with Verification**:\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n \nimport {Script, console} from &quot;forge-std/Script.sol&quot;;\nimport {MyContract} from &quot;src/MyContract.sol&quot;;\n \ncontract DeployScript is Script {\n    function run() public {\n        // Load deployment parameters\n        uint256 deployerPrivateKey = vm.envUint(&quot;PRIVATE_KEY&quot;);\n        address owner = vm.envAddress(&quot;OWNER&quot;);\n \n        vm.startBroadcast(deployerPrivateKey);\n \n        // Deploy with constructor parameters\n        MyContract myContract = new MyContract(owner);\n \n        // Post-deployment configuration\n        myContract.initialize();\n \n        // Log deployment info\n        console.log(&quot;MyContract deployed to:&quot;, address(myContract));\n        console.log(&quot;Deployer:&quot;, vm.addr(deployerPrivateKey));\n        console.log(&quot;Owner:&quot;, owner);\n \n        vm.stopBroadcast();\n \n        // Verify deployment\n        require(myContract.owner() == owner, &quot;Owner not set correctly&quot;);\n    }\n}\n \n// Deployment commands:\n// forge script script/Deploy.s.sol --rpc-url sepolia --broadcast --verify -vvvv --interactives 1\n// forge script script/Deploy.s.sol --rpc-url sepolia --broadcast --verify --resume  # Resume failed\n```\n \n4. **Forge Lint Workflow**:\n```bash\n# Basic linting\nforge lint\n \n# Filter by severity\nforge lint --severity high --severity medium\n \n# JSON output for CI/CD\nforge lint --json &gt; lint-results.json\n \n# Lint specific directories\nforge lint src/contracts/ test/\n \n# Configuration in foundry.toml to exclude specific lints\n[lint]\nexclude_lints = [&quot;divide-before-multiply&quot;]  # Only when justified\n```\n \n5. **EIP-712 Implementation and Testing**:\n```solidity\n// EIP-712 implementation example\ncontract EIP712Example {\n    bytes32 private constant DOMAIN_TYPEHASH =\n        keccak256(&quot;EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)&quot;);\n \n    bytes32 private constant PERMIT_TYPEHASH =\n        keccak256(&quot;Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)&quot;);\n \n    function _hashTypedDataV4(bytes32 structHash) internal view returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n \n// EIP-712 testing with cheatcodes\ncontract EIP712Test is Test {\n    function test_EIP712TypeHash() public {\n        bytes32 expected = vm.eip712HashType(&quot;Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)&quot;);\n        assertEq(PERMIT_TYPEHASH, expected, &quot;Type hash mismatch&quot;);\n    }\n \n    function test_EIP712StructHash() public {\n        Permit memory permit = Permit({\n            owner: address(1),\n            spender: address(2),\n            value: 100,\n            nonce: 0,\n            deadline: block.timestamp + 1 hours\n        });\n \n        bytes32 structHash = vm.eip712HashStruct(&quot;Permit&quot;, abi.encode(permit));\n        bytes32 expected = keccak256(abi.encode(PERMIT_TYPEHASH, permit.owner, permit.spender, permit.value, permit.nonce, permit.deadline));\n        assertEq(structHash, expected, &quot;Struct hash mismatch&quot;);\n    }\n}\n \n// Generate type definitions\n// forge eip712 --contract MyContract\n```\n \n6. **Dynamic Test Linking Setup**:\n```toml\n# Add to foundry.toml for 10x+ compilation speedup\n[profile.default]\ndynamic_test_linking = true\n \n# Or use flag\n# forge build --dynamic-test-linking\n# forge test --dynamic-test-linking\n```\n \n&lt;/common_workflows&gt;\n \n&lt;project_structure&gt;\nComprehensive Foundry Project Layout:\n```\nproject/\n├── foundry.toml              # Foundry configuration\n├── remappings.txt            # Import remappings (optional)\n├── .env.example              # Environment variables template\n├── .gitignore                # Git ignore patterns\n├── README.md                 # Project documentation\n├── src/                      # Smart contracts\n│   ├── interfaces/           # Interface definitions\n│   │   └── IMyContract.sol\n│   ├── libraries/            # Reusable libraries\n│   │   └── MyLibrary.sol\n│   ├── abstracts/            # Abstract contracts\n│   │   └── AbstractContract.sol\n│   └── MyContract.sol        # Main contracts\n├── test/                     # Test files\n│   ├── unit/                 # Unit tests\n│   │   └── MyContract.t.sol\n│   ├── integration/          # Integration tests\n│   │   └── Integration.t.sol\n│   ├── fuzz/                 # Fuzz tests\n│   │   └── FuzzMyContract.t.sol\n│   ├── invariant/            # Invariant tests\n│   │   ├── handlers/         # Test handlers\n│   │   │   └── VaultHandler.sol\n│   │   └── InvariantTests.t.sol\n│   ├── fork/                 # Fork tests\n│   │   └── ForkTest.t.sol\n│   └── utils/                # Test utilities\n│       └── TestUtils.sol\n├── script/                   # Deployment scripts\n│   ├── Deploy.s.sol          # Main deployment\n│   ├── Configure.s.sol       # Post-deployment config\n│   └── input/                # Script input data\n│       └── sepolia.json\n├── lib/                      # Dependencies (git submodules)\n├── out/                      # Compiled artifacts\n├── cache/                    # Build cache\n├── broadcast/                # Deployment logs\n└── docs/                     # Generated documentation\n```\n&lt;/project_structure&gt;\n \n&lt;deployment_patterns&gt;\nComplete Deployment Workflow:\n \n1. **Environment Setup**:\n```bash\n# .env file\nSEPOLIA_RPC_URL=https://sepolia.infura.io/v3/YOUR_KEY\nETHERSCAN_API_KEY=YOUR_ETHERSCAN_KEY\nPRIVATE_KEY=0x...  # Or use --interactives 1\n \n# foundry.toml\n[rpc_endpoints]\nsepolia = &quot;${SEPOLIA_RPC_URL}&quot;\n \n[etherscan]\nsepolia = { key = &quot;${ETHERSCAN_API_KEY}&quot; }\n```\n \n2. **Deployment Script Pattern**:\n```solidity\ncontract DeployScript is Script {\n    function run() public {\n        uint256 deployerPrivateKey = vm.envUint(&quot;PRIVATE_KEY&quot;);\n \n        vm.startBroadcast(deployerPrivateKey);\n \n        // Deploy contracts in dependency order\n        Token token = new Token();\n        Vault vault = new Vault(token);\n \n        // Configure contracts\n        token.grantRole(token.MINTER_ROLE(), address(vault));\n \n        vm.stopBroadcast();\n \n        // Log important addresses\n        console.log(&quot;Token:&quot;, address(token));\n        console.log(&quot;Vault:&quot;, address(vault));\n    }\n}\n```\n \n3. **Deployment Commands**:\n```bash\n# Simulate locally\nforge script script/Deploy.s.sol\n \n# Deploy to testnet with verification\nforge script script/Deploy.s.sol \\\n  --rpc-url sepolia \\\n  --broadcast \\\n  --verify \\\n  -vvvv \\\n  --interactives 1\n \n# Resume failed deployment\nforge script script/Deploy.s.sol \\\n  --rpc-url sepolia \\\n  --resume\n \n# Mainnet deployment (extra caution)\nforge script script/Deploy.s.sol \\\n  --rpc-url mainnet \\\n  --broadcast \\\n  --verify \\\n  --gas-estimate-multiplier 120 \\\n  --interactives 1\n```\n&lt;/deployment_patterns&gt;\n \n&lt;user_prompt&gt;\n{user_prompt}\n&lt;/user_prompt&gt;\n","title":"Build smart contracts using a prompt","titles":["Prompting"]},"173":{"href":"/introduction/prompting#example-usage","html":"\n<p>Here&#x27;s how you might customize the prompt for a specific project:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>&lt;user_prompt&gt;</span></span>\n<span class=\"line\"><span>I need to create a vault contract with the following features:</span></span>\n<span class=\"line\"><span>- ERC4626 compliant vault</span></span>\n<span class=\"line\"><span>- Deposit/withdraw functionality with fees</span></span>\n<span class=\"line\"><span>- Reward distribution mechanism</span></span>\n<span class=\"line\"><span>- Access controls for admin functions</span></span>\n<span class=\"line\"><span>- Include comprehensive testing (unit, fuzz, invariant)</span></span>\n<span class=\"line\"><span>- Include deployment script with verification</span></span>\n<span class=\"line\"><span>- Follow all security best practices</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>Please provide the complete implementation with proper Foundry project structure, including invariant tests with handlers to verify vault properties.</span></span>\n<span class=\"line\"><span>&lt;/user_prompt&gt;</span></span></code></pre>\n<p>Remember to always review and test any AI-generated code thoroughly before using it in production environments.</p>","isPage":false,"text":"\nHere&#x27;s how you might customize the prompt for a specific project:\n&lt;user_prompt&gt;\nI need to create a vault contract with the following features:\n- ERC4626 compliant vault\n- Deposit/withdraw functionality with fees\n- Reward distribution mechanism\n- Access controls for admin functions\n- Include comprehensive testing (unit, fuzz, invariant)\n- Include deployment script with verification\n- Follow all security best practices\n\nPlease provide the complete implementation with proper Foundry project structure, including invariant tests with handlers to verify vault properties.\n&lt;/user_prompt&gt;\nRemember to always review and test any AI-generated code thoroughly before using it in production environments.","title":"Example Usage","titles":["Prompting"]},"174":{"href":"/misc/README#miscellaneous","html":"\n<ul>\n<li><a href=\"./struct-encoding.md\">Struct encoding</a></li>\n</ul>","isPage":true,"text":"\n\nStruct encoding\n","title":"Miscellaneous","titles":[null]},"175":{"href":"/misc/faq#faq","html":"\n<p>This is a collection of common questions and answers. If you do not find your question listed here, hop in the <a href=\"https://t.me/foundry_support\">Telegram support channel</a>\nand let us help you!</p>\n","isPage":true,"text":"\nThis is a collection of common questions and answers. If you do not find your question listed here, hop in the Telegram support channel\nand let us help you!\n","title":"FAQ","titles":[null]},"176":{"href":"/misc/faq#i-cant-build-from-source","html":"\n<p>Make sure you&#x27;re on the latest stable Rust toolchain:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">rustup</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> default</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> stable</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">rustup</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> update</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> stable</span></span></code></pre>\n","isPage":false,"text":"\nMake sure you&#x27;re on the latest stable Rust toolchain:\nrustup default stable\nrustup update stable\n","title":"I can&#x27;t build from source!","titles":[null,"FAQ"]},"177":{"href":"/misc/faq#libusb-error-when-running-forgecast","html":"\n<p>If you are using the binaries as released, you may see the following error on MacOS:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">dyld:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Library</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> not</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> loaded:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /usr/local/opt/libusb/lib/libusb-1.0.0.dylib</span></span></code></pre>\n<p>In order to fix this, you must install the <code>libusb</code> library:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">brew</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> libusb</span></span></code></pre>\n","isPage":false,"text":"\nIf you are using the binaries as released, you may see the following error on MacOS:\ndyld: Library not loaded: /usr/local/opt/libusb/lib/libusb-1.0.0.dylib\nIn order to fix this, you must install the libusb library:\nbrew install libusb\n","title":"libusb error when running forge/cast","titles":[null,"FAQ"]},"178":{"href":"/misc/faq#out-of-date-glibc","html":"\n<p>If you run into an error resembling the following after using <code>foundryup</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /lib/x86_64-linux-gnu/libc.so.6:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> version</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;GLIBC_2.29&#x27;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> not</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> found</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (required </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">by</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> forge</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<p>There are 2 workarounds:</p>\n<ol>\n<li><a href=\"/introduction/installation/#building-from-source\">Building from source</a></li>\n<li><a href=\"/introduction/installation/#using-foundry-with-docker\">Using Docker</a></li>\n</ol>\n","isPage":false,"text":"\nIf you run into an error resembling the following after using foundryup:\nforge: /lib/x86_64-linux-gnu/libc.so.6: version &#x27;GLIBC_2.29&#x27; not found (required by forge)\nThere are 2 workarounds:\n\nBuilding from source\nUsing Docker\n\n","title":"Out of date GLIBC","titles":[null,"FAQ"]},"179":{"href":"/misc/faq#help-i-cant-see-my-logs","html":"\n<p>Forge does not display logs by default. If you want to see logs from Hardhat&#x27;s <code>console.log</code> or from DSTest-style <code>log_*</code> events,\nyou need to run <a href=\"./forge/reference/forge-test.md\"><code>forge test</code></a> with verbosity 2 (<code>-vv</code>).</p>\n<p>If you want to see other events your contracts emit, you need to run with traces enabled.\nTo do that, set the verbosity to 3 (<code>-vvv</code>) to see traces for failing tests, or 4 (<code>-vvvv</code>) to see traces for all tests.</p>\n","isPage":false,"text":"\nForge does not display logs by default. If you want to see logs from Hardhat&#x27;s console.log or from DSTest-style log_* events,\nyou need to run forge test with verbosity 2 (-vv).\nIf you want to see other events your contracts emit, you need to run with traces enabled.\nTo do that, set the verbosity to 3 (-vvv) to see traces for failing tests, or 4 (-vvvv) to see traces for all tests.\n","title":"Help! I can&#x27;t see my logs!","titles":[null,"FAQ"]},"180":{"href":"/misc/faq#my-tests-are-failing-and-i-dont-know-why","html":"\n<p>To gain better insight into why your tests are failing, try using traces. To enable traces, you need to increase the verbosity\non <a href=\"./forge/reference/forge-test.md\">forge test</a> to at least 3 (<code>-vvv</code>) but you can go as high as 5 (<code>-vvvvv</code>) for even more traces.</p>\n<p>You can learn more about traces in our <a href=\"./forge/traces.md\">Understanding Traces</a> chapter.</p>\n","isPage":false,"text":"\nTo gain better insight into why your tests are failing, try using traces. To enable traces, you need to increase the verbosity\non forge test to at least 3 (-vvv) but you can go as high as 5 (-vvvvv) for even more traces.\nYou can learn more about traces in our Understanding Traces chapter.\n","title":"My tests are failing and I don&#x27;t know why!","titles":[null,"FAQ"]},"181":{"href":"/misc/faq#how-do-i-use-consolelog","html":"\n<p>To use Hardhat&#x27;s <code>console.log</code> you must add it to your project by copying the file over from <a href=\"./reference/forge-std/console-log.md\">here</a>.</p>\n<p>Alternatively, you can use <a href=\"https://github.com/foundry-rs/forge-std\">Forge Std</a> which comes bundled with <code>console.log</code>. To use <code>console.log</code> from Forge Std,\nyou have to import it:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">console</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/console.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nTo use Hardhat&#x27;s console.log you must add it to your project by copying the file over from here.\nAlternatively, you can use Forge Std which comes bundled with console.log. To use console.log from Forge Std,\nyou have to import it:\nimport {console} from &quot;forge-std/console.sol&quot;;\n","title":"How do I use console.log?","titles":[null,"FAQ"]},"182":{"href":"/misc/faq#how-do-i-run-specific-tests","html":"\n<p>If you want to run only a few tests, you can use <code>--match-test</code> to filter test functions,\n<code>--match-contract</code> to filter test contracts, and <code>--match-path</code> to filter test files on <a href=\"./forge/reference/forge-test.md\"><code>forge test</code></a>.</p>\n","isPage":false,"text":"\nIf you want to run only a few tests, you can use --match-test to filter test functions,\n--match-contract to filter test contracts, and --match-path to filter test files on forge test.\n","title":"How do I run specific tests?","titles":[null,"FAQ"]},"183":{"href":"/misc/faq#how-do-i-use-a-specific-solidity-compiler","html":"\n<p>Forge will try to auto-detect what Solidity compiler works for your project.</p>\n<p>To use a specific Solidity compiler, you can set <a href=\"./config/reference/solidity-compiler.md#solc_version\"><code>solc</code></a> in your <a href=\"./config/\">config file</a>,\nor pass <code>--use solc:&lt;version&gt;</code> to a Forge command that supports it (e.g. <a href=\"./forge/reference/forge-build.md\"><code>forge build</code></a>\nor <a href=\"./forge/reference/forge-test.md\"><code>forge test</code></a>).\nPaths to a solc binary are also accepted. To use a specific local solc binary, you can set <code>solc = &quot;&lt;path to solc&gt;&quot;</code> in your config file, or pass <code>--use &quot;&lt;path to solc&gt;&quot;</code>.\nThe solc version/path can also be set via the env variable <code>FOUNDRY_SOLC=&lt;version/path&gt;</code>, but the cli arg <code>--use</code> has priority.</p>\n<p>For example, if you have a project that supports all 0.7.x Solidity versions, but you want to compile with solc 0.7.0, you could use <code>forge build --use solc:0.7.0</code>.</p>\n","isPage":false,"text":"\nForge will try to auto-detect what Solidity compiler works for your project.\nTo use a specific Solidity compiler, you can set solc in your config file,\nor pass --use solc:&lt;version&gt; to a Forge command that supports it (e.g. forge build\nor forge test).\nPaths to a solc binary are also accepted. To use a specific local solc binary, you can set solc = &quot;&lt;path to solc&gt;&quot; in your config file, or pass --use &quot;&lt;path to solc&gt;&quot;.\nThe solc version/path can also be set via the env variable FOUNDRY_SOLC=&lt;version/path&gt;, but the cli arg --use has priority.\nFor example, if you have a project that supports all 0.7.x Solidity versions, but you want to compile with solc 0.7.0, you could use forge build --use solc:0.7.0.\n","title":"How do I use a specific Solidity compiler?","titles":[null,"FAQ"]},"184":{"href":"/misc/faq#how-do-i-fork-from-a-live-network","html":"\n<p>To fork from a live network, pass <code>--fork-url &lt;URL&gt;</code> to <a href=\"./forge/reference/forge-test.md\"><code>forge test</code></a>.\nYou can also fork from a specific block using <code>--fork-block-number &lt;BLOCK&gt;</code>, which adds determinism to your test, and allows Forge to cache\nthe chain data for that block.</p>\n<p>For example, to fork from Ethereum mainnet at block 10,000,000 you could use: <code>forge test --fork-url $MAINNET_RPC_URL --fork-block-number 10000000</code>.</p>\n","isPage":false,"text":"\nTo fork from a live network, pass --fork-url &lt;URL&gt; to forge test.\nYou can also fork from a specific block using --fork-block-number &lt;BLOCK&gt;, which adds determinism to your test, and allows Forge to cache\nthe chain data for that block.\nFor example, to fork from Ethereum mainnet at block 10,000,000 you could use: forge test --fork-url $MAINNET_RPC_URL --fork-block-number 10000000.\n","title":"How do I fork from a live network?","titles":[null,"FAQ"]},"185":{"href":"/misc/faq#how-do-i-add-my-own-assertions","html":"\n<p>You can add your own assertions by creating your own base test contract and having that inherit from the test framework of your choice.</p>\n<p>For example, if you use DSTest, you could create a base test contract like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TestBase</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> DSTest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> myCustomAssertion</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">          emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;a and b did not match&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">          fail</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>You would then inherit from <code>TestBase</code> in your test contracts.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyContractTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TestBase</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testSomething</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Similarly, if you use <a href=\"https://github.com/foundry-rs/forge-std\">Forge Std</a>, you can create a base test contract that inherits from <code>Test</code>.</p>\n<p>For a good example of a base test contract that has helper methods and custom assertions, see <a href=\"https://github.com/transmissions11/solmate/blob/19a4f345970ed39ee6369f343d145e0d4071c18a/src/test/utils/DSTestPlus.sol#L10\">Solmate&#x27;s <code>DSTestPlus</code></a>.</p>\n","isPage":false,"text":"\nYou can add your own assertions by creating your own base test contract and having that inherit from the test framework of your choice.\nFor example, if you use DSTest, you could create a base test contract like this:\ncontract TestBase is DSTest {\n    function myCustomAssertion(uint a, uint b) {\n      if (a != b) {\n          emit log_string(&quot;a and b did not match&quot;);\n          fail();\n      }\n    }\n}\nYou would then inherit from TestBase in your test contracts.\ncontract MyContractTest is TestBase {\n    function testSomething() {\n        // ...\n    }\n}\nSimilarly, if you use Forge Std, you can create a base test contract that inherits from Test.\nFor a good example of a base test contract that has helper methods and custom assertions, see Solmate&#x27;s DSTestPlus.\n","title":"How do I add my own assertions?","titles":[null,"FAQ"]},"186":{"href":"/misc/faq#how-do-i-use-forge-offline","html":"\n<p>Forge will sometimes check for newer Solidity versions that fit your project. To use Forge offline, use the <code>--offline</code> flag.</p>\n","isPage":false,"text":"\nForge will sometimes check for newer Solidity versions that fit your project. To use Forge offline, use the --offline flag.\n","title":"How do I use Forge offline?","titles":[null,"FAQ"]},"187":{"href":"/misc/faq#im-getting-solc-errors","html":"\n<p><a href=\"https://binaries.soliditylang.org/\">solc-bin</a> doesn&#x27;t offer static builds for Apple silicon. Foundry relies on <a href=\"https://github.com/alloy-rs/svm-rs\">svm</a> to install native builds for Apple silicon.</p>\n<p>All solc versions are installed under <code>~/.svm/</code> if the directory already exists. If not, it uses <code>$XDG_DATA_HOME/svm/</code>, commonly mapped to <code>$HOME/.local/share/svm/</code> on Linux or <code>$HOME/Library/Application Support/svm/</code> on MacOS. If you encounter solc related errors, such as <code>SolcError: ...</code> please remove the <code>~/.svm/</code> directory and try again, this will trigger a fresh install and usually resolves the issue.</p>\n<p>If you&#x27;re on Apple silicon, please ensure the <a href=\"https://github.com/Z3Prover/z3\"><code>z3</code> theorem prover</a> is installed: <code>brew install z3</code></p>\n<blockquote>\n<p><strong>Note</strong>: native Apple silicon builds are only available from <code>0.8.5</code> upwards. If you need older versions, you must enable Apple silicon rosetta to run them.</p>\n</blockquote>\n","isPage":false,"text":"\nsolc-bin doesn&#x27;t offer static builds for Apple silicon. Foundry relies on svm to install native builds for Apple silicon.\nAll solc versions are installed under ~/.svm/ if the directory already exists. If not, it uses $XDG_DATA_HOME/svm/, commonly mapped to $HOME/.local/share/svm/ on Linux or $HOME/Library/Application Support/svm/ on MacOS. If you encounter solc related errors, such as SolcError: ... please remove the ~/.svm/ directory and try again, this will trigger a fresh install and usually resolves the issue.\nIf you&#x27;re on Apple silicon, please ensure the z3 theorem prover is installed: brew install z3\n\nNote: native Apple silicon builds are only available from 0.8.5 upwards. If you need older versions, you must enable Apple silicon rosetta to run them.\n\n","title":"I&#x27;m getting Solc errors","titles":[null,"FAQ"]},"188":{"href":"/misc/faq#forge-fails-in-javascript-monorepos-pnpm","html":"\n<p>Managers like <code>pnpm</code> use symlinks to manage <code>node_modules</code> folders.</p>\n<p>A common layout may look like:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>├── contracts</span></span>\n<span class=\"line\"><span>│    ├── contracts</span></span>\n<span class=\"line\"><span>│    ├── foundry.toml</span></span>\n<span class=\"line\"><span>│    ├── lib</span></span>\n<span class=\"line\"><span>│    ├── node_modules</span></span>\n<span class=\"line\"><span>│    ├── package.json</span></span>\n<span class=\"line\"><span>├── node_modules</span></span>\n<span class=\"line\"><span>│    ├── ...</span></span>\n<span class=\"line\"><span>├── package.json</span></span>\n<span class=\"line\"><span>├── pnpm-lock.yaml</span></span>\n<span class=\"line\"><span>├── pnpm-workspace.yaml</span></span></code></pre>\n<p>Where the Foundry workspace is in <code>./contracts</code>, but packages in <code>./contracts/node_modules</code> are symlinked to <code>./node_modules</code>.</p>\n<p>When running <code>forge build</code> in <code>./contracts/node_modules</code>, this can lead to an error like:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">error[6275]: ParserError: Source &quot;node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol&quot; not found: File outside of allowed directories. The following are allowed: &quot;&lt;repo&gt;/contracts&quot;, &quot;&lt;repo&gt;/contracts/contracts&quot;, &quot;&lt;repo&gt;/contracts/lib&quot;.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --&gt; node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:8:1:</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  |</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">8 | import &quot;../../../utils/cryptography/draft-EIP712.sol&quot;;</span></span></code></pre>\n<p>This error happens when <code>solc</code> was able to resolve symlinked files, but they&#x27;re outside the Foundry workspace (<code>./contracts</code>).</p>\n<p>Adding <code>node_modules</code> to <code>allow_paths</code> in <code>foundry.toml</code> grants solc access to that directory, and it will be able to read it:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># This translates to `solc --allow-paths ../node_modules`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">allow_paths = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;../node_modules&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n<p>Note that the path is relative to the Foundry workspace. See also <a href=\"https://docs.soliditylang.org/en/latest/path-resolution.html#allowed-paths\">solc allowed-paths</a></p>\n","isPage":false,"text":"\nManagers like pnpm use symlinks to manage node_modules folders.\nA common layout may look like:\n├── contracts\n│    ├── contracts\n│    ├── foundry.toml\n│    ├── lib\n│    ├── node_modules\n│    ├── package.json\n├── node_modules\n│    ├── ...\n├── package.json\n├── pnpm-lock.yaml\n├── pnpm-workspace.yaml\nWhere the Foundry workspace is in ./contracts, but packages in ./contracts/node_modules are symlinked to ./node_modules.\nWhen running forge build in ./contracts/node_modules, this can lead to an error like:\nerror[6275]: ParserError: Source &quot;node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol&quot; not found: File outside of allowed directories. The following are allowed: &quot;&lt;repo&gt;/contracts&quot;, &quot;&lt;repo&gt;/contracts/contracts&quot;, &quot;&lt;repo&gt;/contracts/lib&quot;.\n --&gt; node_modules/@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:8:1:\n  |\n8 | import &quot;../../../utils/cryptography/draft-EIP712.sol&quot;;\nThis error happens when solc was able to resolve symlinked files, but they&#x27;re outside the Foundry workspace (./contracts).\nAdding node_modules to allow_paths in foundry.toml grants solc access to that directory, and it will be able to read it:\n# This translates to `solc --allow-paths ../node_modules`\nallow_paths = [&quot;../node_modules&quot;]\nNote that the path is relative to the Foundry workspace. See also solc allowed-paths\n","title":"Forge fails in JavaScript monorepos (pnpm)","titles":[null,"FAQ"]},"189":{"href":"/misc/faq#im-getting-permission-denied-os-error-13","html":"\n<p>If you see an error like</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">Failed to create artifact parent folder &quot;/.../MyProject/out/IsolationModeMagic.sol&quot;: Permission denied (os error 13)</span></span></code></pre>\n<p>Then there&#x27;s likely a folder permission issue. Ensure <code>user</code> has write access in the project root&#x27;s folder.</p>\n<p>It has been <a href=\"https://github.com/foundry-rs/foundry/issues/3268\">reported</a> that on linux, canonicalizing paths can result in weird paths (<code>/_1/...</code>). This can be resolved by nuking the entire project folder and initializing again.</p>\n","isPage":false,"text":"\nIf you see an error like\nFailed to create artifact parent folder &quot;/.../MyProject/out/IsolationModeMagic.sol&quot;: Permission denied (os error 13)\nThen there&#x27;s likely a folder permission issue. Ensure user has write access in the project root&#x27;s folder.\nIt has been reported that on linux, canonicalizing paths can result in weird paths (/_1/...). This can be resolved by nuking the entire project folder and initializing again.\n","title":"I&#x27;m getting Permission denied (os error 13)","titles":[null,"FAQ"]},"190":{"href":"/misc/faq#connection-refused-when-running-forge-build","html":"\n<p>If you&#x27;re unable to access github URLs called by <code>forge build</code>, you will see an error like</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">Error:</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">error sending request for url (https://raw.githubusercontent.com/roynalnaruto/solc-builds/ff4ea8a7bbde4488428de69f2c40a7fc56184f5e/macosx/aarch64/list.json): error trying to connect: tcp connect error: Connection refused (os error 61)</span></span></code></pre>\n<p>Connection failed because access to the URL from your location may be restricted. To solve this, you should set proxy.</p>\n<p>You could run <code>export http_proxy=http://127.0.0.1:7890 https_proxy=http://127.0.0.1:7890</code> first in the terminal then you will <code>forge build</code> successfully.</p>\n","isPage":false,"text":"\nIf you&#x27;re unable to access github URLs called by forge build, you will see an error like\nError:\nerror sending request for url (https://raw.githubusercontent.com/roynalnaruto/solc-builds/ff4ea8a7bbde4488428de69f2c40a7fc56184f5e/macosx/aarch64/list.json): error trying to connect: tcp connect error: Connection refused (os error 61)\nConnection failed because access to the URL from your location may be restricted. To solve this, you should set proxy.\nYou could run export http_proxy=http://127.0.0.1:7890 https_proxy=http://127.0.0.1:7890 first in the terminal then you will forge build successfully.\n","title":"Connection refused when running forge build","titles":[null,"FAQ"]},"191":{"href":"/misc/faq#im-getting-notactivated-evmerror-notactivated-error-in-my-tests","html":"\n<p>This error refers to an EVM version mismatch, make sure the <code>evm_version</code> configuration is inline with the test (forked chain) you&#x27;re using (similar for errors like <code>prevrandao not set</code>). See <a href=\"/config/reference/solidity-compiler#evm_version\"><code>evm_version</code> configuration</a></p>","isPage":false,"text":"\nThis error refers to an EVM version mismatch, make sure the evm_version configuration is inline with the test (forked chain) you&#x27;re using (similar for errors like prevrandao not set). See evm_version configuration","title":"I&#x27;m getting [NotActivated] EvmError: NotActivated error in my tests.","titles":[null,"FAQ"]},"192":{"href":"/misc/struct-encoding#struct-encoding","html":"\n<p>Structs are user defined types that can group several variables:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyStruct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> addr;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Only the new <a href=\"https://docs.soliditylang.org/en/latest/layout-of-source-files.html#abi-coder-pragma\">ABI coder v2</a> can encode and decode arbitrarily nested arrays and structs. Since Solidity 0.8.0 it is activated by default, prior to that it needs to be activated via <code>pragma experimental ABIEncoderV2</code>.</p>\n<p>Solidity structs map to the ABI type &quot;tuple&quot;. For more information on how Solidity types map to ABI types see <a href=\"https://docs.soliditylang.org/en/latest/abi-spec.html#mapping-solidity-to-abi-types\">Mapping Solidity to ABI types</a> in the Solidity documentation.</p>\n<p>Structs are therefore encoded and decoded as tuples. So the struct we defined above, <code>MyStruct</code>, maps to the tuple <code>(address,uint256)</code> in terms of the ABI.</p>\n<p>Let&#x27;s see how this works in a contract:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> =0.8.15</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyStruct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> addr;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> f</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">MyStruct</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>The ABI of the <code>f</code> function in this contract is:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;inputs&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;components&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;internalType&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;addr&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;address&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;internalType&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;uint256&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;amount&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;uint256&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      ],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;internalType&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;struct Test.MyStruct&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;t&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;tuple&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;f&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;outputs&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;stateMutability&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;pure&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;function&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>which reads: The function <code>f</code> takes 1 input of type <code>tuple</code> with two components of type <code>address</code> and <code>uint256</code>.</p>\n<p><strong>Nested Struct Encoding:</strong>\nHere&#x27;s a more complex example with nested structs:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.8.21</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> nestedStruct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> addr;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyStruct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> nestedStructName;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> nestedStructCount;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        nestedStruct _nestedStruct;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> f</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">MyStruct</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>The ABI of the <code>f</code> function in this contract is:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;inputs&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;t&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;tuple&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;internalType&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;struct Test.MyStruct&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;components&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;nestedStructName&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;string&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;internalType&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;string&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;nestedStructCount&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;uint256&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;internalType&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;uint256&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;_nestedStruct&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;tuple&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;internalType&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;struct Test.nestedStruct&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">          &quot;components&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">              &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;addr&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">              &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">              &quot;internalType&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;address&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">              &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;amount&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">              &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;uint256&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">              &quot;internalType&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;uint256&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      ]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;f&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;outputs&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;stateMutability&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;pure&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;type&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;function&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>which reads: The function <code>f</code> takes 1 input of type tuple with three components: a string, a uint256, and another tuple representing the nested struct with components addr of type address and amount of type uint256.</p>\n<p>To encode <code>MyStruct</code> to pass it as a parameter to the function <code>f</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> abi-encode</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;f((string,uint256,(address,uint256)))&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;(example,1,(0x...,1))&quot;</span></span></code></pre>\n<p>To deploy a contract accepting <code>MyStruct</code> as an argument:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> create</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> src/Test.sol:Test</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --constructor-args</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;(example,1,(0x...,1))&quot;</span></span></code></pre>","isPage":true,"text":"\nStructs are user defined types that can group several variables:\nstruct MyStruct {\n    address addr;\n    uint256 amount;\n}\nOnly the new ABI coder v2 can encode and decode arbitrarily nested arrays and structs. Since Solidity 0.8.0 it is activated by default, prior to that it needs to be activated via pragma experimental ABIEncoderV2.\nSolidity structs map to the ABI type &quot;tuple&quot;. For more information on how Solidity types map to ABI types see Mapping Solidity to ABI types in the Solidity documentation.\nStructs are therefore encoded and decoded as tuples. So the struct we defined above, MyStruct, maps to the tuple (address,uint256) in terms of the ABI.\nLet&#x27;s see how this works in a contract:\npragma solidity =0.8.15;\n \n \ncontract Test {\n    struct MyStruct {\n        address addr;\n        uint256 amount;\n    }\n    function f(MyStruct memory t) public pure {}\n}\nThe ABI of the f function in this contract is:\n{\n  &quot;inputs&quot;: [\n    {\n      &quot;components&quot;: [\n        {\n          &quot;internalType&quot;: &quot;address&quot;,\n          &quot;name&quot;: &quot;addr&quot;,\n          &quot;type&quot;: &quot;address&quot;\n        },\n        {\n          &quot;internalType&quot;: &quot;uint256&quot;,\n          &quot;name&quot;: &quot;amount&quot;,\n          &quot;type&quot;: &quot;uint256&quot;\n        }\n      ],\n      &quot;internalType&quot;: &quot;struct Test.MyStruct&quot;,\n      &quot;name&quot;: &quot;t&quot;,\n      &quot;type&quot;: &quot;tuple&quot;\n    }\n  ],\n  &quot;name&quot;: &quot;f&quot;,\n  &quot;outputs&quot;: [],\n  &quot;stateMutability&quot;: &quot;pure&quot;,\n  &quot;type&quot;: &quot;function&quot;\n}\nwhich reads: The function f takes 1 input of type tuple with two components of type address and uint256.\nNested Struct Encoding:\nHere&#x27;s a more complex example with nested structs:\npragma solidity 0.8.21;\n \ncontract Test {\n    struct nestedStruct {\n        address addr;\n        uint256 amount;\n    }\n \n    struct MyStruct {\n        string nestedStructName;\n        uint256 nestedStructCount;\n        nestedStruct _nestedStruct;\n    }\n \n    function f(MyStruct memory t) public pure {}\n}\nThe ABI of the f function in this contract is:\n{\n  &quot;inputs&quot;: [\n    {\n      &quot;name&quot;: &quot;t&quot;,\n      &quot;type&quot;: &quot;tuple&quot;,\n      &quot;internalType&quot;: &quot;struct Test.MyStruct&quot;,\n      &quot;components&quot;: [\n        {\n          &quot;name&quot;: &quot;nestedStructName&quot;,\n          &quot;type&quot;: &quot;string&quot;,\n          &quot;internalType&quot;: &quot;string&quot;\n        },\n        {\n          &quot;name&quot;: &quot;nestedStructCount&quot;,\n          &quot;type&quot;: &quot;uint256&quot;,\n          &quot;internalType&quot;: &quot;uint256&quot;\n        },\n        {\n          &quot;name&quot;: &quot;_nestedStruct&quot;,\n          &quot;type&quot;: &quot;tuple&quot;,\n          &quot;internalType&quot;: &quot;struct Test.nestedStruct&quot;,\n          &quot;components&quot;: [\n            {\n              &quot;name&quot;: &quot;addr&quot;,\n              &quot;type&quot;: &quot;address&quot;,\n              &quot;internalType&quot;: &quot;address&quot;\n            },\n            {\n              &quot;name&quot;: &quot;amount&quot;,\n              &quot;type&quot;: &quot;uint256&quot;,\n              &quot;internalType&quot;: &quot;uint256&quot;\n            }\n          ]\n        }\n      ]\n    }\n  ],\n  &quot;name&quot;: &quot;f&quot;,\n  &quot;outputs&quot;: [],\n  &quot;stateMutability&quot;: &quot;pure&quot;,\n  &quot;type&quot;: &quot;function&quot;\n}\nwhich reads: The function f takes 1 input of type tuple with three components: a string, a uint256, and another tuple representing the nested struct with components addr of type address and amount of type uint256.\nTo encode MyStruct to pass it as a parameter to the function f:\ncast abi-encode &quot;f((string,uint256,(address,uint256)))&quot; &quot;(example,1,(0x...,1))&quot;\nTo deploy a contract accepting MyStruct as an argument:\nforge create src/Test.sol:Test --constructor-args &quot;(example,1,(0x...,1))&quot;","title":"Struct Encoding","titles":[null]},"193":{"href":"/misc/v1#foundry-v10-migration-guide","html":"\n<p>Several breaking changes were introduced in Foundry <code>v1.0</code> version, which could require updates on projects using older versions.\nThis guide documents the suggested best practices when migrating from an older version.</p>\n<ul>\n<li><a href=\"#foundry-v10-migration-guide\">Foundry v1.0 migration guide</a>\n<ul>\n<li><a href=\"#solc-optimizer-disabled-by-default\">Solc optimizer disabled by default</a></li>\n<li><a href=\"#expect-revert-cheatcode-disabled-on-internal-calls-by-default\">Expect revert cheatcode disabled on internal calls by default</a></li>\n<li><a href=\"#removed-support-for-testfail-tests\">Removed support for testFail tests</a></li>\n<li><a href=\"#removed-support-for-legacy-consolesol-signatures\">Removed support for legacy console.sol signatures</a></li>\n<li><a href=\"#conflicting-remappings-are-ignored\">Conflicting remappings are ignored</a></li>\n<li><a href=\"#artifacts-not-persisted-on-forge-coverage\">Artifacts not persisted on <code>forge coverage</code></a></li>\n<li><a href=\"#other\">Other</a></li>\n</ul>\n</li>\n</ul>\n","isPage":true,"text":"\nSeveral breaking changes were introduced in Foundry v1.0 version, which could require updates on projects using older versions.\nThis guide documents the suggested best practices when migrating from an older version.\n\nFoundry v1.0 migration guide\n\nSolc optimizer disabled by default\nExpect revert cheatcode disabled on internal calls by default\nRemoved support for testFail tests\nRemoved support for legacy console.sol signatures\nConflicting remappings are ignored\nArtifacts not persisted on forge coverage\nOther\n\n\n\n","title":"Foundry v1.0 migration guide","titles":[null]},"194":{"href":"/misc/v1#solc-optimizer-disabled-by-default","html":"\n<p>Enabling optimizer by default could introduce bugs for seemingly correct code (if there are bugs in optimizer itself) - see <a href=\"https://github.com/foundry-rs/foundry/issues/2486\">#2486</a>. Foundry <code>v1.0</code> default settings could affect current projects by reporting higher contract sizes and / or project build failures. It is recommended to explicitly enable optimizer and their runs in <code>foundry.toml</code> configuration:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">optimizer = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">optimizer_runs = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">200</span></span></code></pre>\n<blockquote>\n<p>ℹ️ <strong>Note</strong></p>\n<p>Projects using additional compiler profiles with optimizer runs but without explicitly enable optimizer could fail to build with <code>Missing profile satisfying settings restrictions</code> message.</p>\n</blockquote>\n<p>See: <a href=\"/config/reference/solidity-compiler#optimizer\">optimizer configuration</a></p>\n","isPage":false,"text":"\nEnabling optimizer by default could introduce bugs for seemingly correct code (if there are bugs in optimizer itself) - see #2486. Foundry v1.0 default settings could affect current projects by reporting higher contract sizes and / or project build failures. It is recommended to explicitly enable optimizer and their runs in foundry.toml configuration:\noptimizer = true\noptimizer_runs = 200\n\nℹ️ Note\nProjects using additional compiler profiles with optimizer runs but without explicitly enable optimizer could fail to build with Missing profile satisfying settings restrictions message.\n\nSee: optimizer configuration\n","title":"Solc optimizer disabled by default","titles":[null,"Foundry v1.0 migration guide"]},"195":{"href":"/misc/v1#expect-revert-cheatcode-disabled-on-internal-calls-by-default","html":"\n<p>When testing internal functions with <code>vm.expectRevert</code> cheatcode at the same call depth only the first <code>vm.expectRevert</code> is executed - see <a href=\"https://github.com/foundry-rs/foundry/issues/3437\">#3437</a>. In Foundry <code>v1.0</code> default settings this behavior is disabled by default. This could affect current projects by reporting test failures as <code>[FAIL: call didn&#x27;t revert at a lower depth than cheatcode call depth]</code>. It is recommended to review these failing tests and either enable revert on internal calls or rewrite tests to avoid this.<br/>\nFor example, a test like the one below:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ContractTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    error</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CustomError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> revertWithCustomError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        revert</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> CustomError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testExample</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        revertWithCustomError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>can be changed to use a mock <code>CustomContract</code> that expose a public function:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CustomContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    error</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CustomError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> revertWithCustomError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        revert</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> CustomError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ContractTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    CustomContract </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> c;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        c </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> CustomContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testExample</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        c.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">revertWithCustomError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>or configured to allow expect reverts:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// forge-config: default.allow_internal_expect_revert = true</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testExample</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        revertWithCustomError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span></code></pre>\n<p>See: <a href=\"/reference/cheatcodes/expect-revert#error\"><code>vm.expectRevert</code></a> cheatcode</p>\n","isPage":false,"text":"\nWhen testing internal functions with vm.expectRevert cheatcode at the same call depth only the first vm.expectRevert is executed - see #3437. In Foundry v1.0 default settings this behavior is disabled by default. This could affect current projects by reporting test failures as [FAIL: call didn&#x27;t revert at a lower depth than cheatcode call depth]. It is recommended to review these failing tests and either enable revert on internal calls or rewrite tests to avoid this.\nFor example, a test like the one below:\ncontract ContractTest is Test {\n    error CustomError();\n \n    function revertWithCustomError() internal {\n        revert CustomError();\n    }\n \n    function testExample() public {\n        vm.expectRevert();\n        revertWithCustomError();\n    }\n}\ncan be changed to use a mock CustomContract that expose a public function:\ncontract CustomContract {\n    error CustomError();\n \n    function revertWithCustomError() external {\n        revert CustomError();\n    }\n}\n \ncontract ContractTest is Test {\n    CustomContract internal c;\n \n    function setUp() public {\n        c = new CustomContract();\n    }\n \n    function testExample() public {\n        vm.expectRevert();\n        c.revertWithCustomError();\n    }\n}\nor configured to allow expect reverts:\n    /// forge-config: default.allow_internal_expect_revert = true\n    function testExample() public {\n        vm.expectRevert();\n        revertWithCustomError();\n    }\nSee: vm.expectRevert cheatcode\n","title":"Expect revert cheatcode disabled on internal calls by default","titles":[null,"Foundry v1.0 migration guide"]},"196":{"href":"/misc/v1#removed-support-for-testfail-tests","html":"\n<p>The <code>testFail</code> test prefix support is removed in Foundry <code>v1.0</code> in order to prevent confusion - see <a href=\"https://github.com/foundry-rs/foundry/issues/4437\">#4437</a>. This could affect existing projects by reporting test failures where they&#x27;re not expected. Existing <code>testFail</code> tests can be migrated for <code>v1.0</code> by using <code>vm.expectRevert()</code> cheatcode or by using a <code>try/catch</code> approach and assert the failure.<br/>\nFor example, a test like the one below:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testFail_IncrementAsNotOwner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">prank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    upOnly.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">increment</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>can be rewritten as</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> test_RevertWhen_CallerIsNotOwner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Unauthorized.selector);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">prank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    upOnly.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">increment</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe testFail test prefix support is removed in Foundry v1.0 in order to prevent confusion - see #4437. This could affect existing projects by reporting test failures where they&#x27;re not expected. Existing testFail tests can be migrated for v1.0 by using vm.expectRevert() cheatcode or by using a try/catch approach and assert the failure.\nFor example, a test like the one below:\nfunction testFail_IncrementAsNotOwner() public {\n    vm.prank(address(0));\n    upOnly.increment();\n}\ncan be rewritten as\nfunction test_RevertWhen_CallerIsNotOwner() public {\n    vm.expectRevert(Unauthorized.selector);\n    vm.prank(address(0));\n    upOnly.increment();\n}\n","title":"Removed support for testFail tests","titles":[null,"Foundry v1.0 migration guide"]},"197":{"href":"/misc/v1#removed-support-for-legacy-consolesol-signatures","html":"\n<p>Foundry <code>v1.0</code> removes the support for <code>console.sol</code> selectors that use the faulty ABI encoding - see <a href=\"https://github.com/foundry-rs/foundry/issues/8910\">#8910</a>. This could affect existing projects by producing test build failures, therefore they need to be updated accordingly. For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;testMisc&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">42</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>should be rewritten as</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;testMisc&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">42</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">logUint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<blockquote>\n<p>ℹ️ <strong>Note</strong></p>\n<p>Latest <code>forge-std</code> version should be used in order to use the newly signatures for console logging and avoid unexpected behaviour.</p>\n</blockquote>\n","isPage":false,"text":"\nFoundry v1.0 removes the support for console.sol selectors that use the faulty ABI encoding - see #8910. This could affect existing projects by producing test build failures, therefore they need to be updated accordingly. For example:\nconsole.log(&quot;testMisc&quot;, 42);\nconsole.log(0);\nshould be rewritten as\nconsole.log(&quot;testMisc&quot;, uint256(42));\nconsole.log(uint256(0));\nconsole.logUint(0);\n\nℹ️ Note\nLatest forge-std version should be used in order to use the newly signatures for console logging and avoid unexpected behaviour.\n\n","title":"Removed support for legacy console.sol signatures","titles":[null,"Foundry v1.0 migration guide"]},"198":{"href":"/misc/v1#conflicting-remappings-are-ignored","html":"\n<p>Prior to Foundry <code>v1.0</code>, <code>forge</code> inferred remappings by taking into account remappings of sub-projects. When conflicting remappings were present, the longest / most specified had the priority. This was dangerous, as adding sub-projects were able to completely change the code that is executed, even if the remappings of the root project are not changed - see <a href=\"https://github.com/foundry-rs/foundry/issues/9146\">#8910</a>.\nWith <code>v1.0</code>, a project will fail to build if the same remapping</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B31D28;font-style:italic;--shiki-dark:#FF938A;--shiki-dark-font-style:italic\">@openzeppelin/=lib/openzeppelin-contracts/contracts/</span></span></code></pre>\n<p>is defined in both root project and in an imported dependency.\nTo fix it, the project root remapping should be added in <code>src</code> context:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#B31D28;font-style:italic;--shiki-dark:#FF938A;--shiki-dark-font-style:italic\">src:@openzeppelin/=lib/openzeppelin-contracts/contracts/</span></span></code></pre>\n","isPage":false,"text":"\nPrior to Foundry v1.0, forge inferred remappings by taking into account remappings of sub-projects. When conflicting remappings were present, the longest / most specified had the priority. This was dangerous, as adding sub-projects were able to completely change the code that is executed, even if the remappings of the root project are not changed - see #8910.\nWith v1.0, a project will fail to build if the same remapping\n@openzeppelin/=lib/openzeppelin-contracts/contracts/\nis defined in both root project and in an imported dependency.\nTo fix it, the project root remapping should be added in src context:\nsrc:@openzeppelin/=lib/openzeppelin-contracts/contracts/\n","title":"Conflicting remappings are ignored","titles":[null,"Foundry v1.0 migration guide"]},"199":{"href":"/misc/v1#artifacts-not-persisted-on-forge-coverage","html":"\n<p>In prior versions, <code>forge coverage</code> was changing the artifacts (which are unoptimized in order to provide accurate source hit maps) without any warnings. This was confusing and was leading to undesired situations like the one in <a href=\"https://github.com/foundry-rs/foundry/issues/8840#issuecomment-2390792012\">#8840 comment</a>. Foundry <code>v1.0</code> does not generate artifacts when running coverage anymore hence projects should be aware of the change.</p>\n","isPage":false,"text":"\nIn prior versions, forge coverage was changing the artifacts (which are unoptimized in order to provide accurate source hit maps) without any warnings. This was confusing and was leading to undesired situations like the one in #8840 comment. Foundry v1.0 does not generate artifacts when running coverage anymore hence projects should be aware of the change.\n","title":"Artifacts not persisted on forge coverage","titles":[null,"Foundry v1.0 migration guide"]},"200":{"href":"/misc/v1#other","html":"\n<ul>\n<li><code>FORGE_SNAPSHOT_CHECK</code> requires boolean value. Use <code>FORGE_SNAPSHOT_CHECK=true|false</code>.</li>\n<li><code>forge inspect --pretty</code> flag was removed. Use <code>forge inspect</code> for table view.</li>\n<li><code>forge bind --ethers</code> was removed. Use <code>forge bind</code> (defaults to <code>alloy</code>).</li>\n<li><code>forge debug</code> subcommand was removed. Use <code>forge test --debug</code> and <code>forge script --debug</code>.</li>\n<li><code>cast etherscan-source</code> subcommand was replaced with <code>cast source</code>. Use additional <code>explorer_url</code> and <code>explorer_api_url</code> args for alternative block explorers.</li>\n<li><code>foundryup</code> installs stable if no version specified. Use <code>foundryup -i nightly</code> to install nightly versions.</li>\n</ul>","isPage":false,"text":"\n\nFORGE_SNAPSHOT_CHECK requires boolean value. Use FORGE_SNAPSHOT_CHECK=true|false.\nforge inspect --pretty flag was removed. Use forge inspect for table view.\nforge bind --ethers was removed. Use forge bind (defaults to alloy).\nforge debug subcommand was removed. Use forge test --debug and forge script --debug.\ncast etherscan-source subcommand was replaced with cast source. Use additional explorer_url and explorer_api_url args for alternative block explorers.\nfoundryup installs stable if no version specified. Use foundryup -i nightly to install nightly versions.\n","title":"Other","titles":[null,"Foundry v1.0 migration guide"]},"201":{"href":"/reference/README#references","html":"\n<ul>\n<li><a href=\"/forge/reference/overview\">forge Commands</a></li>\n<li><a href=\"/cast/reference/overview\">cast Commands</a></li>\n<li><a href=\"/anvil/reference\">anvil Reference</a></li>\n<li><a href=\"/chisel/reference\">chisel Reference</a></li>\n<li><a href=\"/config/reference/overview\">Config Reference</a></li>\n<li><a href=\"/reference/cheatcodes/overview\">Cheatcodes Reference</a></li>\n<li><a href=\"/reference/forge-std/overview\">Forge Standard Library Reference</a></li>\n<li><a href=\"/reference/ds-test\">ds-test Reference</a></li>\n</ul>","isPage":true,"text":"\n\nforge Commands\ncast Commands\nanvil Reference\nchisel Reference\nConfig Reference\nCheatcodes Reference\nForge Standard Library Reference\nds-test Reference\n","title":"References","titles":[null]},"202":{"href":"/reference/ds-test#dstest-reference","html":"\n<p>Dappsys Test (DSTest for short) provides basic logging and assertion functionality. It is included in the Forge Standard Library.</p>\n<p>To get access to the functions, import <code>forge-std/Test.sol</code> and inherit from <code>Test</code> in your test contract:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/Test.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ContractTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // ... tests ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":true,"text":"\nDappsys Test (DSTest for short) provides basic logging and assertion functionality. It is included in the Forge Standard Library.\nTo get access to the functions, import forge-std/Test.sol and inherit from Test in your test contract:\nimport {Test} from &quot;forge-std/Test.sol&quot;;\n \ncontract ContractTest is Test {\n    // ... tests ...\n}\n","title":"DSTest Reference","titles":[null]},"203":{"href":"/reference/ds-test#logging","html":"\n<p>This is a complete overview of all the available logging events. For detailed descriptions and example usage, see below.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                    (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> logs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                   (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log_address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log_bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log_int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">                (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">               (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log_bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">              (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log_string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">             (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log_named_address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> val</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log_named_bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> val</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log_named_decimal_int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> val</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log_named_decimal_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> val</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log_named_int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> val</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log_named_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">         (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> val</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log_named_bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> val</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log_named_string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">       (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> val</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nThis is a complete overview of all the available logging events. For detailed descriptions and example usage, see below.\nevent log                    (string);\nevent logs                   (bytes);\n \nevent log_address            (address);\nevent log_bytes32            (bytes32);\nevent log_int                (int);\nevent log_uint               (uint);\nevent log_bytes              (bytes);\nevent log_string             (string);\n \nevent log_named_address      (string key, address val);\nevent log_named_bytes32      (string key, bytes32 val);\nevent log_named_decimal_int  (string key, int val, uint decimals);\nevent log_named_decimal_uint (string key, uint val, uint decimals);\nevent log_named_int          (string key, int val);\nevent log_named_uint         (string key, uint val);\nevent log_named_bytes        (string key, bytes val);\nevent log_named_string       (string key, string val);\n","title":"Logging","titles":[null,"DSTest Reference"]},"204":{"href":"/reference/ds-test#logging-events","html":"\n<p>This section documents all events for logging and provides usage examples.</p>\n","isPage":false,"text":"\nThis section documents all events for logging and provides usage examples.\n","title":"Logging events","titles":[null,"DSTest Reference"]},"205":{"href":"/reference/ds-test#log","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nevent log(string);\n","title":"log","titles":[null,"DSTest Reference","Logging events"]},"206":{"href":"/reference/ds-test#example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;here&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// here</span></span></code></pre>\n<br/>\n<hr/>\n","isPage":false,"text":"\nemit log(&quot;here&quot;);\n// here\n\n\n","title":"Example","titles":[null,"DSTest Reference","Logging events","log"]},"207":{"href":"/reference/ds-test#logs","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> logs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nevent logs(bytes);\n","title":"logs","titles":[null,"DSTest Reference","Logging events"]},"208":{"href":"/reference/ds-test#example-1","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> logs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;abcd&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// 0x6162636400000000000000000000000000000000000000000000000000000000</span></span></code></pre>\n<br/>\n<hr/>\n","isPage":false,"text":"\nemit logs(bytes(&quot;abcd&quot;));\n// 0x6162636400000000000000000000000000000000000000000000000000000000\n\n\n","title":"Example","titles":[null,"DSTest Reference","Logging events","logs"]},"209":{"href":"/reference/ds-test#log_type","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;(&lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;);</span></span></code></pre>\n<p>Where <code>&lt;type&gt;</code> can be <code>address</code>, <code>bytes32</code>, <code>int</code>, <code>uint</code>, <code>bytes</code>, <code>string</code></p>\n","isPage":false,"text":"\nevent log_&lt;type&gt;(&lt;type&gt;);\nWhere &lt;type&gt; can be address, bytes32, int, uint, bytes, string\n","title":"log_&lt;type&gt;","titles":[null,"DSTest Reference","Logging events"]},"210":{"href":"/reference/ds-test#example-2","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(amount);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1000000000000000000</span></span></code></pre>\n<br/>\n<hr/>\n","isPage":false,"text":"\nuint256 amount = 1 ether;\nemit log_uint(amount);\n// 1000000000000000000\n\n\n","title":"Example","titles":[null,"DSTest Reference","Logging events","log_&lt;type&gt;"]},"211":{"href":"/reference/ds-test#log_named_type","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log_named_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, &lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">val</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>Where <code>&lt;type&gt;</code> can be <code>address</code>, <code>bytes32</code>, <code>int</code>, <code>uint</code>, <code>bytes</code>, <code>string</code></p>\n","isPage":false,"text":"\nevent log_named_&lt;type&gt;(string key, &lt;type&gt; val);\nWhere &lt;type&gt; can be address, bytes32, int, uint, bytes, string\n","title":"log_named_&lt;type&gt;","titles":[null,"DSTest Reference","Logging events"]},"212":{"href":"/reference/ds-test#example-3","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_named_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Amount&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, amount);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// amount: 1000000000000000000</span></span></code></pre>\n<br/>\n<hr/>\n","isPage":false,"text":"\nuint256 amount = 1 ether;\nemit log_named_uint(&quot;Amount&quot;, amount);\n// amount: 1000000000000000000\n\n\n","title":"Example","titles":[null,"DSTest Reference","Logging events","log_named_&lt;type&gt;"]},"213":{"href":"/reference/ds-test#log_named_decimal_type","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log_named_decimal_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, &lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">val</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>Where <code>&lt;type&gt;</code> can be <code>int</code>, <code>uint</code></p>\n","isPage":false,"text":"\nevent log_named_decimal_&lt;type&gt;(string key, &lt;type&gt; val, uint decimals);\nWhere &lt;type&gt; can be int, uint\n","title":"log_named_decimal_&lt;type&gt;","titles":[null,"DSTest Reference","Logging events"]},"214":{"href":"/reference/ds-test#example-4","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_named_decimal_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Amount&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, amount, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">18</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// amount: 1.000000000000000000</span></span></code></pre>\n","isPage":false,"text":"\nuint256 amount = 1 ether;\nemit log_named_decimal_uint(&quot;Amount&quot;, amount, 18);\n// amount: 1.000000000000000000\n","title":"Example","titles":[null,"DSTest Reference","Logging events","log_named_decimal_&lt;type&gt;"]},"215":{"href":"/reference/ds-test#asserting","html":"\n<p>This is a complete overview of all the available assertion functions. For detailed descriptions and example usage, see below.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Assert the `condition` is true</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertTrue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> condition</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertTrue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> condition</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Assert `a` is equal to `b`</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEqDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEqDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEqDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEqDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Assert  `a` is greater than `b`</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGtDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGtDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGtDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGtDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Assert  `a` is greater than or equal to `b`</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGeDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGeDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGeDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGeDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Assert  `a` is lesser than `b`</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLtDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLtDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLtDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLtDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Assert  `a` is lesser than or equal to `b`</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLeDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLeDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLeDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLeDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Asserts `a` is approximately equal to `b` with delta in absolute value.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertApproxEqAbs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> maxDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertApproxEqAbs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> maxDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Asserts `a` is approximately equal to `b` with delta in percentage, where `1e18` is 100%.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertApproxEqRel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> maxPercentDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertApproxEqRel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> maxPercentDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nThis is a complete overview of all the available assertion functions. For detailed descriptions and example usage, see below.\n// Assert the `condition` is true\nfunction assertTrue(bool condition) internal;\nfunction assertTrue(bool condition, string memory err) internal;\n \n// Assert `a` is equal to `b`\nfunction assertEq(address a, address b) internal;\nfunction assertEq(address a, address b, string memory err) internal;\nfunction assertEq(bytes32 a, bytes32 b) internal;\nfunction assertEq(bytes32 a, bytes32 b, string memory err) internal;\nfunction assertEq(int a, int b) internal;\nfunction assertEq(int a, int b, string memory err) internal;\nfunction assertEq(uint a, uint b) internal;\nfunction assertEq(uint a, uint b, string memory err) internal;\nfunction assertEqDecimal(int a, int b, uint decimals) internal;\nfunction assertEqDecimal(int a, int b, uint decimals, string memory err) internal;\nfunction assertEqDecimal(uint a, uint b, uint decimals) internal;\nfunction assertEqDecimal(uint a, uint b, uint decimals, string memory err) internal;\nfunction assertEq(string memory a, string memory b) internal;\nfunction assertEq(string memory a, string memory b, string memory err) internal;\nfunction assertEq32(bytes32 a, bytes32 b) internal;\nfunction assertEq32(bytes32 a, bytes32 b, string memory err) internal;\nfunction assertEq0(bytes memory a, bytes memory b) internal;\nfunction assertEq0(bytes memory a, bytes memory b, string memory err) internal;\n \n// Assert  `a` is greater than `b`\nfunction assertGt(uint a, uint b) internal;\nfunction assertGt(uint a, uint b, string memory err) internal;\nfunction assertGt(int a, int b) internal;\nfunction assertGt(int a, int b, string memory err) internal;\nfunction assertGtDecimal(int a, int b, uint decimals) internal;\nfunction assertGtDecimal(int a, int b, uint decimals, string memory err) internal;\nfunction assertGtDecimal(uint a, uint b, uint decimals) internal;\nfunction assertGtDecimal(uint a, uint b, uint decimals, string memory err) internal;\n \n// Assert  `a` is greater than or equal to `b`\nfunction assertGe(uint a, uint b) internal;\nfunction assertGe(uint a, uint b, string memory err) internal;\nfunction assertGe(int a, int b) internal;\nfunction assertGe(int a, int b, string memory err) internal;\nfunction assertGeDecimal(int a, int b, uint decimals) internal;\nfunction assertGeDecimal(int a, int b, uint decimals, string memory err) internal;\nfunction assertGeDecimal(uint a, uint b, uint decimals) internal;\nfunction assertGeDecimal(uint a, uint b, uint decimals, string memory err) internal;\n \n// Assert  `a` is lesser than `b`\nfunction assertLt(uint a, uint b) internal;\nfunction assertLt(uint a, uint b, string memory err) internal;\nfunction assertLt(int a, int b) internal;\nfunction assertLt(int a, int b, string memory err) internal;\nfunction assertLtDecimal(int a, int b, uint decimals) internal;\nfunction assertLtDecimal(int a, int b, uint decimals, string memory err) internal;\nfunction assertLtDecimal(uint a, uint b, uint decimals) internal;\nfunction assertLtDecimal(uint a, uint b, uint decimals, string memory err) internal;\n \n// Assert  `a` is lesser than or equal to `b`\nfunction assertLe(uint a, uint b) internal;\nfunction assertLe(uint a, uint b, string memory err) internal;\nfunction assertLe(int a, int b) internal;\nfunction assertLe(int a, int b, string memory err) internal;\nfunction assertLeDecimal(int a, int b, uint decimals) internal;\nfunction assertLeDecimal(int a, int b, uint decimals, string memory err) internal;\nfunction assertLeDecimal(uint a, uint b, uint decimals) internal;\nfunction assertLeDecimal(uint a, uint b, uint decimals, string memory err) internal;\n \n// Asserts `a` is approximately equal to `b` with delta in absolute value.\nfunction assertApproxEqAbs(uint256 a, uint256 b, uint256 maxDelta) internal;\nfunction assertApproxEqAbs(uint256 a, uint256 b, uint256 maxDelta, string memory err) internal;\n \n// Asserts `a` is approximately equal to `b` with delta in percentage, where `1e18` is 100%.\nfunction assertApproxEqRel(uint256 a, uint256 b, uint256 maxPercentDelta) internal;\nfunction assertApproxEqRel(uint256 a, uint256 b, uint256 maxPercentDelta, string memory err) internal;\n","title":"Asserting","titles":[null,"DSTest Reference"]},"216":{"href":"/reference/ds-test#assertion-functions","html":"\n<p>This section documents all functions for asserting and provides usage examples.</p>\n","isPage":false,"text":"\nThis section documents all functions for asserting and provides usage examples.\n","title":"Assertion functions","titles":[null,"DSTest Reference"]},"217":{"href":"/reference/ds-test#asserttrue","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertTrue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> condition</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Asserts the <code>condition</code> is true.</p>\n","isPage":false,"text":"\nfunction assertTrue(bool condition) internal;\nAsserts the condition is true.\n","title":"assertTrue","titles":[null,"DSTest Reference","Assertion functions"]},"218":{"href":"/reference/ds-test#example-5","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> success </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fun</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertTrue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(success);</span></span></code></pre>\n<br/>\n<hr/>\n","isPage":false,"text":"\nbool success = contract.fun();\nassertTrue(success);\n\n\n","title":"Example","titles":[null,"DSTest Reference","Assertion functions","assertTrue"]},"219":{"href":"/reference/ds-test#asserteq","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, &lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Where <code>&lt;type&gt;</code> can be <code>address</code>, <code>bytes32</code>, <code>int</code>, <code>uint</code></p>\n<p>Asserts <code>a</code> is equal to <code>b</code>.</p>\n","isPage":false,"text":"\nfunction assertEq(&lt;type&gt; a, &lt;type&gt; b) internal;\nWhere &lt;type&gt; can be address, bytes32, int, uint\nAsserts a is equal to b.\n","title":"assertEq","titles":[null,"DSTest Reference","Assertion functions"]},"220":{"href":"/reference/ds-test#example-6","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1e18</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wei</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a, b);</span></span></code></pre>\n<br/>\n<hr/>\n","isPage":false,"text":"\nuint256 a = 1 ether;\nuint256 b = 1e18 wei;\nassertEq(a, b);\n\n\n","title":"Example","titles":[null,"DSTest Reference","Assertion functions","assertEq"]},"221":{"href":"/reference/ds-test#asserteqdecimal","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEqDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, &lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Where <code>&lt;type&gt;</code> can be <code>int</code>, <code>uint</code></p>\n<p>Asserts <code>a</code> is equal to <code>b</code>.</p>\n","isPage":false,"text":"\nfunction assertEqDecimal(&lt;type&gt; a, &lt;type&gt; b, uint decimals) internal;\nWhere &lt;type&gt; can be int, uint\nAsserts a is equal to b.\n","title":"assertEqDecimal","titles":[null,"DSTest Reference","Assertion functions"]},"222":{"href":"/reference/ds-test#example-7","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1e18</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wei</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEqDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a, b, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">18</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<br/>\n<hr/>\n","isPage":false,"text":"\nuint256 a = 1 ether;\nuint256 b = 1e18 wei;\nassertEqDecimal(a, b, 18);\n\n\n","title":"Example","titles":[null,"DSTest Reference","Assertion functions","assertEqDecimal"]},"223":{"href":"/reference/ds-test#asserteq32","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Asserts <code>a</code> is equal to <code>b</code>.</p>\n","isPage":false,"text":"\nfunction assertEq32(bytes32 a, bytes32 b) internal;\nAsserts a is equal to b.\n","title":"assertEq32","titles":[null,"DSTest Reference","Assertion functions"]},"224":{"href":"/reference/ds-test#example-8","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;abcd&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0x6162636400000000000000000000000000000000000000000000000000000000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<br/>\n<hr/>\n","isPage":false,"text":"\nassertEq(bytes32(&quot;abcd&quot;), 0x6162636400000000000000000000000000000000000000000000000000000000);\n\n\n","title":"Example","titles":[null,"DSTest Reference","Assertion functions","assertEq32"]},"225":{"href":"/reference/ds-test#asserteq0","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Asserts <code>a</code> is equal to <code>b</code>.</p>\n","isPage":false,"text":"\nfunction assertEq0(bytes a, bytes b) internal;\nAsserts a is equal to b.\n","title":"assertEq0","titles":[null,"DSTest Reference","Assertion functions"]},"226":{"href":"/reference/ds-test#example-9","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> name1 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Alice&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> name2 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Bob&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(name1), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(name2)); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// [FAIL]</span></span></code></pre>\n<br/>\n<hr/>\n","isPage":false,"text":"\nstring memory name1 = &quot;Alice&quot;;\nstring memory name2 = &quot;Bob&quot;;\nassertEq0(bytes(name1), bytes(name2)); // [FAIL]\n\n\n","title":"Example","titles":[null,"DSTest Reference","Assertion functions","assertEq0"]},"227":{"href":"/reference/ds-test#assertgt","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, &lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Where <code>&lt;type&gt;</code> can be <code>int</code>, <code>uint</code></p>\n<p>Asserts <code>a</code> is greater than <code>b</code>.</p>\n","isPage":false,"text":"\nfunction assertGt(&lt;type&gt; a, &lt;type&gt; b) internal;\nWhere &lt;type&gt; can be int, uint\nAsserts a is greater than b.\n","title":"assertGt","titles":[null,"DSTest Reference","Assertion functions"]},"228":{"href":"/reference/ds-test#example-10","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1e18</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wei</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertGt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a, b);</span></span></code></pre>\n<br/>\n<hr/>\n","isPage":false,"text":"\nuint256 a = 2 ether;\nuint256 b = 1e18 wei;\nassertGt(a, b);\n\n\n","title":"Example","titles":[null,"DSTest Reference","Assertion functions","assertGt"]},"229":{"href":"/reference/ds-test#assertgtdecimal","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGtDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, &lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Where <code>&lt;type&gt;</code> can be <code>int</code>, <code>uint</code></p>\n<p>Asserts <code>a</code> is greater than <code>b</code>.</p>\n","isPage":false,"text":"\nfunction assertGtDecimal(&lt;type&gt; a, &lt;type&gt; b, uint decimals) internal;\nWhere &lt;type&gt; can be int, uint\nAsserts a is greater than b.\n","title":"assertGtDecimal","titles":[null,"DSTest Reference","Assertion functions"]},"230":{"href":"/reference/ds-test#example-11","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1e18</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wei</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertGtDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a, b, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">18</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<br/>\n<hr/>\n","isPage":false,"text":"\nuint256 a = 2 ether;\nuint256 b = 1e18 wei;\nassertGtDecimal(a, b, 18);\n\n\n","title":"Example","titles":[null,"DSTest Reference","Assertion functions","assertGtDecimal"]},"231":{"href":"/reference/ds-test#assertge","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, &lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Where <code>&lt;type&gt;</code> can be <code>int</code>, <code>uint</code></p>\n<p>Asserts <code>a</code> is greater than or equal to <code>b</code>.</p>\n","isPage":false,"text":"\nfunction assertGe(&lt;type&gt; a, &lt;type&gt; b) internal;\nWhere &lt;type&gt; can be int, uint\nAsserts a is greater than or equal to b.\n","title":"assertGe","titles":[null,"DSTest Reference","Assertion functions"]},"232":{"href":"/reference/ds-test#example-12","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1e18</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wei</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertGe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a, b);</span></span></code></pre>\n<br/>\n<hr/>\n","isPage":false,"text":"\nuint256 a = 1 ether;\nuint256 b = 1e18 wei;\nassertGe(a, b);\n\n\n","title":"Example","titles":[null,"DSTest Reference","Assertion functions","assertGe"]},"233":{"href":"/reference/ds-test#assertgedecimal","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGeDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, &lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Where <code>&lt;type&gt;</code> can be <code>int</code>, <code>uint</code></p>\n<p>Asserts <code>a</code> is greater than or equal to <code>b</code>.</p>\n","isPage":false,"text":"\nfunction assertGeDecimal(&lt;type&gt; a, &lt;type&gt; b, uint decimals) internal;\nWhere &lt;type&gt; can be int, uint\nAsserts a is greater than or equal to b.\n","title":"assertGeDecimal","titles":[null,"DSTest Reference","Assertion functions"]},"234":{"href":"/reference/ds-test#example-13","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1e18</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wei</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertGeDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a, b, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">18</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<br/>\n<hr/>\n","isPage":false,"text":"\nuint256 a = 1 ether;\nuint256 b = 1e18 wei;\nassertGeDecimal(a, b, 18);\n\n\n","title":"Example","titles":[null,"DSTest Reference","Assertion functions","assertGeDecimal"]},"235":{"href":"/reference/ds-test#assertlt","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, &lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Where <code>&lt;type&gt;</code> can be <code>int</code>, <code>uint</code></p>\n<p>Asserts <code>a</code> is lesser than <code>b</code>.</p>\n","isPage":false,"text":"\nfunction assertLt(&lt;type&gt; a, &lt;type&gt; b) internal;\nWhere &lt;type&gt; can be int, uint\nAsserts a is lesser than b.\n","title":"assertLt","titles":[null,"DSTest Reference","Assertion functions"]},"236":{"href":"/reference/ds-test#example-14","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2e18</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wei</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertLt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a, b);</span></span></code></pre>\n<br/>\n<hr/>\n","isPage":false,"text":"\nuint256 a = 1 ether;\nuint256 b = 2e18 wei;\nassertLt(a, b);\n\n\n","title":"Example","titles":[null,"DSTest Reference","Assertion functions","assertLt"]},"237":{"href":"/reference/ds-test#assertltdecimal","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLtDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, &lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Where <code>&lt;type&gt;</code> can be <code>int</code>, <code>uint</code></p>\n<p>Asserts <code>a</code> is lesser than <code>b</code>.</p>\n","isPage":false,"text":"\nfunction assertLtDecimal(&lt;type&gt; a, &lt;type&gt; b, uint decimals) internal;\nWhere &lt;type&gt; can be int, uint\nAsserts a is lesser than b.\n","title":"assertLtDecimal","titles":[null,"DSTest Reference","Assertion functions"]},"238":{"href":"/reference/ds-test#example-15","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2e18</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wei</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertLtDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a, b, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">18</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<br/>\n<hr/>\n","isPage":false,"text":"\nuint256 a = 1 ether;\nuint256 b = 2e18 wei;\nassertLtDecimal(a, b, 18);\n\n\n","title":"Example","titles":[null,"DSTest Reference","Assertion functions","assertLtDecimal"]},"239":{"href":"/reference/ds-test#assertle","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, &lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Where <code>&lt;type&gt;</code> can be <code>int</code>, <code>uint</code></p>\n<p>Asserts <code>a</code> is lesser than or equal to <code>b</code>.</p>\n","isPage":false,"text":"\nfunction assertLe(&lt;type&gt; a, &lt;type&gt; b) internal;\nWhere &lt;type&gt; can be int, uint\nAsserts a is lesser than or equal to b.\n","title":"assertLe","titles":[null,"DSTest Reference","Assertion functions"]},"240":{"href":"/reference/ds-test#example-16","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1e18</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wei</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertLe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a, b);</span></span></code></pre>\n<br/>\n<hr/>\n","isPage":false,"text":"\nuint256 a = 1 ether;\nuint256 b = 1e18 wei;\nassertLe(a, b);\n\n\n","title":"Example","titles":[null,"DSTest Reference","Assertion functions","assertLe"]},"241":{"href":"/reference/ds-test#assertledecimal","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLeDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, &lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Where <code>&lt;type&gt;</code> can be <code>int</code>, <code>uint</code></p>\n<p>Asserts <code>a</code> is lesser than or equal to <code>b</code>.</p>\n","isPage":false,"text":"\nfunction assertLeDecimal(&lt;type&gt; a, &lt;type&gt; b, uint decimals) internal;\nWhere &lt;type&gt; can be int, uint\nAsserts a is lesser than or equal to b.\n","title":"assertLeDecimal","titles":[null,"DSTest Reference","Assertion functions"]},"242":{"href":"/reference/ds-test#example-17","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1e18</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> wei</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertLeDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a, b, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">18</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<br/>\n<hr/>\n","isPage":false,"text":"\nuint256 a = 1 ether;\nuint256 b = 1e18 wei;\nassertLeDecimal(a, b, 18);\n\n\n","title":"Example","titles":[null,"DSTest Reference","Assertion functions","assertLeDecimal"]},"243":{"href":"/reference/ds-test#assertapproxeqabs","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertApproxEqAbs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, &lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> maxDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Where <code>&lt;type&gt;</code> can be <code>int</code>, <code>uint</code></p>\n<p>Asserts <code>a</code> is approximately equal to <code>b</code> with delta in absolute value.</p>\n","isPage":false,"text":"\nfunction assertApproxEqAbs(&lt;type&gt; a, &lt;type&gt; b, uint256 maxDelta) internal;\nWhere &lt;type&gt; can be int, uint\nAsserts a is approximately equal to b with delta in absolute value.\n","title":"assertApproxEqAbs","titles":[null,"DSTest Reference","Assertion functions"]},"244":{"href":"/reference/ds-test#example-18","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 200</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertApproxEqAbs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a, b, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">90</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<br/>\n<hr/>\n","isPage":false,"text":"\nfunction testRevert () external {\n    uint256 a = 100;\n    uint256 b = 200;\n \n    assertApproxEqAbs(a, b, 90);\n}\n\n\n","title":"Example","titles":[null,"DSTest Reference","Assertion functions","assertApproxEqAbs"]},"245":{"href":"/reference/ds-test#assertapproxeqrel","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertApproxEqRel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, &lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> maxPercentDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Where <code>&lt;type&gt;</code> can be <code>int</code>, <code>uint</code></p>\n<p>Asserts <code>a</code> is approximately equal to <code>b</code> with delta in percentage, where <code>1e18</code> is 100%.</p>\n","isPage":false,"text":"\nfunction assertApproxEqRel(&lt;type&gt; a, &lt;type&gt; b, uint256 maxPercentDelta) internal;\nWhere &lt;type&gt; can be int, uint\nAsserts a is approximately equal to b with delta in percentage, where 1e18 is 100%.\n","title":"assertApproxEqRel","titles":[null,"DSTest Reference","Assertion functions"]},"246":{"href":"/reference/ds-test#example-19","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 200</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertApproxEqRel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a, b, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4e18</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<br/>\n<blockquote>\n<p>ℹ️ <strong>Information</strong></p>\n<p>You can pass a custom error message to the above functions by providing an additional parameter <code>string err</code>.</p>\n</blockquote>","isPage":false,"text":"\nfunction testRevert () external {\n    uint256 a = 100;\n    uint256 b = 200;\n    assertApproxEqRel(a, b, 0.4e18);\n}\n\n\nℹ️ Information\nYou can pass a custom error message to the above functions by providing an additional parameter string err.\n","title":"Example","titles":[null,"DSTest Reference","Assertion functions","assertApproxEqRel"]},"247":{"href":"/forge/advanced-testing/differential-ffi-testing#differential-testing","html":"\n<p>Forge can be used for differential testing and differential fuzzing. You can even test against non-EVM executables using the <code>ffi</code> <a href=\"/reference/cheatcodes/ffi\">cheatcode</a>.</p>\n","isPage":true,"text":"\nForge can be used for differential testing and differential fuzzing. You can even test against non-EVM executables using the ffi cheatcode.\n","title":"Differential Testing","titles":[null]},"248":{"href":"/forge/advanced-testing/differential-ffi-testing#background","html":"\n<p><a href=\"https://en.wikipedia.org/wiki/Differential_testing\">Differential testing</a> cross references multiple implementations of the same function by comparing each one&#x27;s output. Imagine we have a function specification <code>F(X)</code>, and two implementations of that specification: <code>f1(X)</code> and <code>f2(X)</code>. We expect <code>f1(x) == f2(x)</code> for all x that exist in an appropriate input space. If <code>f1(x) != f2(x)</code>, we know that at least one function is incorrectly implementing <code>F(X)</code>. This process of testing for equality and identifying discrepancies is the core of differential testing.</p>\n<p>Differential fuzzing is an extension of differential testing. Differential fuzzing programmatically generates many values of <code>x</code> to find discrepancies and edge cases that manually chosen inputs might not reveal.</p>\n<blockquote>\n<p>Note: the <code>==</code> operator in this case can be a custom definition of equality. For example, if testing floating point implementations, you might use approximate equality with a certain tolerance.</p>\n</blockquote>\n<p>Some real life uses of this type of testing include:</p>\n<ul>\n<li>Comparing upgraded implementations to their predecessors</li>\n<li>Testing code against known reference implementations</li>\n<li>Confirming compatibility with third party tools and dependencies</li>\n</ul>\n<p>Below are some examples of how Forge is used for differential testing.</p>\n","isPage":false,"text":"\nDifferential testing cross references multiple implementations of the same function by comparing each one&#x27;s output. Imagine we have a function specification F(X), and two implementations of that specification: f1(X) and f2(X). We expect f1(x) == f2(x) for all x that exist in an appropriate input space. If f1(x) != f2(x), we know that at least one function is incorrectly implementing F(X). This process of testing for equality and identifying discrepancies is the core of differential testing.\nDifferential fuzzing is an extension of differential testing. Differential fuzzing programmatically generates many values of x to find discrepancies and edge cases that manually chosen inputs might not reveal.\n\nNote: the == operator in this case can be a custom definition of equality. For example, if testing floating point implementations, you might use approximate equality with a certain tolerance.\n\nSome real life uses of this type of testing include:\n\nComparing upgraded implementations to their predecessors\nTesting code against known reference implementations\nConfirming compatibility with third party tools and dependencies\n\nBelow are some examples of how Forge is used for differential testing.\n","title":"Background","titles":[null,"Differential Testing"]},"249":{"href":"/forge/advanced-testing/differential-ffi-testing#primer-the-ffi-cheatcode","html":"\n<p><a href=\"/reference/cheatcodes/ffi\"><code>ffi</code></a> allows you to execute an arbitrary shell command and capture the output. Here&#x27;s a mock example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/Test.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TestContract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testMyFFI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cmds </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[](</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        cmds[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;cat&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        cmds[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;address.txt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// assume contains abi-encoded address.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ffi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(cmds);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> loadedAddress </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">decode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result, (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Do something with the address</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>An address has previously been written to <code>address.txt</code>, and we read it in using the FFI cheatcode. This data can now be used throughout your test contract.</p>\n","isPage":false,"text":"\nffi allows you to execute an arbitrary shell command and capture the output. Here&#x27;s a mock example:\nimport {Test} from &quot;forge-std/Test.sol&quot;;\n \ncontract TestContract is Test {\n \n    function testMyFFI () public {\n        string[] memory cmds = new string[](2);\n        cmds[0] = &quot;cat&quot;;\n        cmds[1] = &quot;address.txt&quot;; // assume contains abi-encoded address.\n        bytes memory result = vm.ffi(cmds);\n        address loadedAddress = abi.decode(result, (address));\n        // Do something with the address\n        // ...\n    }\n}\nAn address has previously been written to address.txt, and we read it in using the FFI cheatcode. This data can now be used throughout your test contract.\n","title":"Primer: The ffi cheatcode","titles":[null,"Differential Testing"]},"250":{"href":"/forge/advanced-testing/differential-ffi-testing#example-differential-testing-merkle-tree-implementations","html":"\n<p><a href=\"https://en.wikipedia.org/wiki/Merkle_tree\">Merkle Trees</a> are a cryptographic commitment scheme frequently used in blockchain applications. Their popularity has led to a number of different implementations of Merkle Tree generators, provers, and verifiers. Merkle roots and proofs are often generated using a language like JavaScript or Python, while proof verification usually occurs on-chain in Solidity.</p>\n<p><a href=\"https://github.com/dmfxyz/murky\">Murky</a> is a complete implementation of Merkle roots, proofs, and verification in Solidity. Its test suite includes differential tests against OpenZeppelin&#x27;s Merkle proof library, as well as root generation tests against a reference JavaScript implementation. These tests are powered by Foundry&#x27;s fuzzing and <code>ffi</code> capabilities.</p>\n","isPage":false,"text":"\nMerkle Trees are a cryptographic commitment scheme frequently used in blockchain applications. Their popularity has led to a number of different implementations of Merkle Tree generators, provers, and verifiers. Merkle roots and proofs are often generated using a language like JavaScript or Python, while proof verification usually occurs on-chain in Solidity.\nMurky is a complete implementation of Merkle roots, proofs, and verification in Solidity. Its test suite includes differential tests against OpenZeppelin&#x27;s Merkle proof library, as well as root generation tests against a reference JavaScript implementation. These tests are powered by Foundry&#x27;s fuzzing and ffi capabilities.\n","title":"Example: Differential Testing Merkle Tree Implementations","titles":[null,"Differential Testing"]},"251":{"href":"/forge/advanced-testing/differential-ffi-testing#differential-fuzzing-against-a-reference-typescript-implementation","html":"\n<p>Using the <code>ffi</code> cheatcode, Murky tests its own Merkle root implementation against a TypeScript implementation using data provided by Forge&#x27;s fuzzer:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testMerkleRootMatchesJSImplementationFuzzed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> leaves</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assume</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(leaves.length </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> packed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(leaves);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> runJsInputs </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[](</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Build ffi command string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    runJsInputs[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;npm&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    runJsInputs[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;--prefix&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    runJsInputs[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;differential_testing/scripts/&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    runJsInputs[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;--silent&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    runJsInputs[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;run&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    runJsInputs[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;generate-root-cli&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    runJsInputs[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">6</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> leaves.length.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    runJsInputs[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">7</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> packed.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toHexString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Run command and capture output</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> jsResult </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ffi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(runJsInputs);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> jsGeneratedRoot </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">decode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(jsResult, (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Calculate root using Murky</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> murkyGeneratedRoot </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> m.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getRoot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(leaves);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(murkyGeneratedRoot, jsGeneratedRoot);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<blockquote>\n<p>Note: see <a href=\"https://github.com/dmfxyz/murky/blob/main/differential_testing/test/utils/Strings2.sol\"><code>Strings2.sol</code></a> in the Murky Repo for the library that enables <code>(bytes memory).toHexString()</code></p>\n</blockquote>\n<p>Forge runs <code>npm --prefix differential_testing/scripts/ --silent run generate-root-cli {numLeaves} {hexEncodedLeaves}</code>. This calculates the Merkle root for the input data using the reference JavaScript implementation. The script prints the root to stdout, and that printout is captured as <code>bytes</code> in the return value of <code>vm.ffi()</code>.</p>\n<p>The test then calculates the root using the Solidity implementation.</p>\n<p>Finally, the test asserts that the both roots are exactly equal. If they are not equal, the test fails.</p>\n","isPage":false,"text":"\nUsing the ffi cheatcode, Murky tests its own Merkle root implementation against a TypeScript implementation using data provided by Forge&#x27;s fuzzer:\nfunction testMerkleRootMatchesJSImplementationFuzzed(bytes32[] memory leaves) public {\n    vm.assume(leaves.length &gt; 1);\n    bytes memory packed = abi.encodePacked(leaves);\n    string[] memory runJsInputs = new string[](8);\n \n    // Build ffi command string\n    runJsInputs[0] = &#x27;npm&#x27;;\n    runJsInputs[1] = &#x27;--prefix&#x27;;\n    runJsInputs[2] = &#x27;differential_testing/scripts/&#x27;;\n    runJsInputs[3] = &#x27;--silent&#x27;;\n    runJsInputs[4] = &#x27;run&#x27;;\n    runJsInputs[5] = &#x27;generate-root-cli&#x27;;\n    runJsInputs[6] = leaves.length.toString();\n    runJsInputs[7] = packed.toHexString();\n \n    // Run command and capture output\n    bytes memory jsResult = vm.ffi(runJsInputs);\n    bytes32 jsGeneratedRoot = abi.decode(jsResult, (bytes32));\n \n    // Calculate root using Murky\n    bytes32 murkyGeneratedRoot = m.getRoot(leaves);\n    assertEq(murkyGeneratedRoot, jsGeneratedRoot);\n}\n\nNote: see Strings2.sol in the Murky Repo for the library that enables (bytes memory).toHexString()\n\nForge runs npm --prefix differential_testing/scripts/ --silent run generate-root-cli {numLeaves} {hexEncodedLeaves}. This calculates the Merkle root for the input data using the reference JavaScript implementation. The script prints the root to stdout, and that printout is captured as bytes in the return value of vm.ffi().\nThe test then calculates the root using the Solidity implementation.\nFinally, the test asserts that the both roots are exactly equal. If they are not equal, the test fails.\n","title":"Differential fuzzing against a reference TypeScript implementation","titles":[null,"Differential Testing","Example: Differential Testing Merkle Tree Implementations"]},"252":{"href":"/forge/advanced-testing/differential-ffi-testing#differential-fuzzing-against-openzeppelins-merkle-proof-library","html":"\n<p>You may want to use differential testing against another Solidity implementation. In that case, <code>ffi</code> is not needed. Instead, the reference implementation is imported directly into the test.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MerkleProof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//...</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testCompatibilityOpenZeppelinProver</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _data, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> node</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assume</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(_data.length </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assume</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _data.length);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> root </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> m.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getRoot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(_data);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> proof </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> m.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getProof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(_data, node);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> valueToProve </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _data[node];</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> murkyVerified </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> m.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">verifyProof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(root, proof, valueToProve);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ozVerified </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> MerkleProof.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">verify</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(proof, root, valueToProve);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertTrue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(murkyVerified </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ozVerified);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nYou may want to use differential testing against another Solidity implementation. In that case, ffi is not needed. Instead, the reference implementation is imported directly into the test.\nimport {MerkleProof} from &quot;openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol&quot;;\n//...\nfunction testCompatibilityOpenZeppelinProver(bytes32[] memory _data, uint256 node) public {\n    vm.assume(_data.length &gt; 1);\n    vm.assume(node &lt; _data.length);\n    bytes32 root = m.getRoot(_data);\n    bytes32[] memory proof = m.getProof(_data, node);\n    bytes32 valueToProve = _data[node];\n    bool murkyVerified = m.verifyProof(root, proof, valueToProve);\n    bool ozVerified = MerkleProof.verify(proof, root, valueToProve);\n    assertTrue(murkyVerified == ozVerified);\n}\n","title":"Differential fuzzing against OpenZeppelin&#x27;s Merkle Proof Library","titles":[null,"Differential Testing","Example: Differential Testing Merkle Tree Implementations"]},"253":{"href":"/forge/advanced-testing/differential-ffi-testing#differential-testing-against-a-known-edge-case","html":"\n<p>Differential tests are not always fuzzed -- they are also useful for testing known edge cases. In the case of the Murky codebase, the initial implementation of the <code>log2ceil</code> function did not work for certain arrays whose lengths were close to a power of 2 (like 129). As a safety check, a test is always run against an array of this length and compared to the TypeScript implementation. You can see the full test <a href=\"https://github.com/dmfxyz/murky/blob/main/differential_testing/test/DifferentialTests.t.sol#L21\">here</a>.</p>\n","isPage":false,"text":"\nDifferential tests are not always fuzzed -- they are also useful for testing known edge cases. In the case of the Murky codebase, the initial implementation of the log2ceil function did not work for certain arrays whose lengths were close to a power of 2 (like 129). As a safety check, a test is always run against an array of this length and compared to the TypeScript implementation. You can see the full test here.\n","title":"Differential testing against a known edge case","titles":[null,"Differential Testing","Example: Differential Testing Merkle Tree Implementations"]},"254":{"href":"/forge/advanced-testing/differential-ffi-testing#standardized-testing-against-reference-data","html":"\n<p>FFI is also useful for injecting reproducible, standardized data into the testing environment. In the Murky library, it is used as follows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] data;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] leaves </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">15</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">16</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">23</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">42</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">69</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">88</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">];</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> inputs </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[](</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    inputs[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;cat&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    inputs[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;src/test/standard_data/StandardInput.txt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ffi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(inputs);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">decode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result, (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    m </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Merkle</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testMerkleGenerateProofStandard</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> view</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> _getData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> leaves.length; </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">i) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        m.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getProof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(_data, leaves[i]);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p><code>src/test/standard_data/StandardInput.txt</code> is a text file that contains an encoded <code>bytes32[100]</code> array. It&#x27;s generated outside of the test and can be used in any language&#x27;s Web3 SDK. It looks something like:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">0xf910ccaa307836354233316666386231414464306335333243453944383735313..423532</span></span></code></pre>\n<p>The standardized testing contract reads in the file using <code>ffi</code>. It decodes the data into an array and then, in this example, generates proofs for 8 different leaves. Because the data is constant and standard, we can meaningfully measure gas and performance improvements using this test.</p>\n<blockquote>\n<p>Of course, one could just hardcode the array into the test! But that makes it much harder to do consistent testing across contracts, implementations, etc.</p>\n</blockquote>\n","isPage":false,"text":"\nFFI is also useful for injecting reproducible, standardized data into the testing environment. In the Murky library, it is used as follows:\nbytes32[100] data;\nuint256[8] leaves = [4, 8, 15, 16, 23, 42, 69, 88];\n \nfunction setUp() public {\n    string[] memory inputs = new string[](2);\n    inputs[0] = &quot;cat&quot;;\n    inputs[1] = &quot;src/test/standard_data/StandardInput.txt&quot;;\n    bytes memory result =  vm.ffi(inputs);\n    data = abi.decode(result, (bytes32[100]));\n    m = new Merkle();\n}\n \nfunction testMerkleGenerateProofStandard() public view {\n    bytes32[] memory _data = _getData();\n    for (uint i = 0; i &lt; leaves.length; ++i) {\n        m.getProof(_data, leaves[i]);\n    }\n}\nsrc/test/standard_data/StandardInput.txt is a text file that contains an encoded bytes32[100] array. It&#x27;s generated outside of the test and can be used in any language&#x27;s Web3 SDK. It looks something like:\n0xf910ccaa307836354233316666386231414464306335333243453944383735313..423532\nThe standardized testing contract reads in the file using ffi. It decodes the data into an array and then, in this example, generates proofs for 8 different leaves. Because the data is constant and standard, we can meaningfully measure gas and performance improvements using this test.\n\nOf course, one could just hardcode the array into the test! But that makes it much harder to do consistent testing across contracts, implementations, etc.\n\n","title":"Standardized Testing against reference data","titles":[null,"Differential Testing","Example: Differential Testing Merkle Tree Implementations"]},"255":{"href":"/forge/advanced-testing/differential-ffi-testing#example-differential-testing-gradual-dutch-auctions","html":"\n<p>The reference implementation for Paradigm&#x27;s <a href=\"https://www.paradigm.xyz/2022/04/gda\">Gradual Dutch Auction</a> mechanism contains a number of differential, fuzzed tests. It is an excellent repository to further explore differential testing using <code>ffi</code>.</p>\n<ul>\n<li>Differential tests for <a href=\"https://github.com/FrankieIsLost/gradual-dutch-auction/blob/master/src/test/DiscreteGDA.t.sol#L78\">Discrete GDAs</a></li>\n<li>Differential tests for <a href=\"https://github.com/FrankieIsLost/gradual-dutch-auction/blob/master/src/test/ContinuousGDA.t.sol#L89\">Continuous GDAs</a></li>\n<li>Reference <a href=\"https://github.com/FrankieIsLost/gradual-dutch-auction/blob/master/analysis/compute_price.py\">Python implementation</a></li>\n</ul>\n","isPage":false,"text":"\nThe reference implementation for Paradigm&#x27;s Gradual Dutch Auction mechanism contains a number of differential, fuzzed tests. It is an excellent repository to further explore differential testing using ffi.\n\nDifferential tests for Discrete GDAs\nDifferential tests for Continuous GDAs\nReference Python implementation\n\n","title":"Example: Differential Testing Gradual Dutch Auctions","titles":[null,"Differential Testing"]},"256":{"href":"/forge/advanced-testing/differential-ffi-testing#reference-repositories","html":"\n<ul>\n<li><a href=\"https://github.com/FrankieIsLost/gradual-dutch-auction\">Gradual Dutch Auctions</a></li>\n<li><a href=\"https://www.github.com/dmfxyz/murky\">Murky</a></li>\n<li><a href=\"https://github.com/patrickd-/solidity-fuzzing-boilerplate\">Solidity Fuzzing Template</a></li>\n</ul>\n<p>If you have another repository that would serve as a reference, please contribute it!</p>","isPage":false,"text":"\n\nGradual Dutch Auctions\nMurky\nSolidity Fuzzing Template\n\nIf you have another repository that would serve as a reference, please contribute it!","title":"Reference Repositories","titles":[null,"Differential Testing"]},"257":{"href":"/forge/advanced-testing/fuzz-testing#fuzz-testing","html":"\n<p>Forge supports property based testing.</p>\n<p>Property-based testing is a way of testing general behaviors as opposed to isolated scenarios.</p>\n<p>Let&#x27;s examine what that means by writing a unit test, finding the general property we are testing for, and converting it to a property-based test instead:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.8.10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/Test.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Safe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    receive</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> payable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> withdraw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        payable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">msg.sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).balance);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SafeTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Safe safe;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Needed so the test contract itself can receive ether</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // when withdrawing</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    receive</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> payable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        safe </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Safe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> test_Withdraw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        payable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(safe)).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> preBalance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).balance;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        safe.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">withdraw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> postBalance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).balance;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(preBalance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, postBalance);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Running the test, we see it passes:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Compiling</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 24</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> files</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> with</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Solc</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.8.10</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Solc</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.8.10</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> finished</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 573.11ms</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Compiler</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> successful!</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Ran</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> for</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test/Safe.t.sol:SafeTest</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[PASS] </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">test_Withdraw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">gas:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 19644</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Suite</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> result:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ok.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> passed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> failed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> skipped</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">finished</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 920.67µs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (376.00µs </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">CPU</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Ran</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> suite</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 123.11ms</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (920.67µs </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">CPU</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">): 1 tests passed, 0 failed, 0 skipped (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> total</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tests</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<p>This unit test <em>does test</em> that we can withdraw ether from our safe. However, who is to say that it works for all amounts, not just 1 ether?</p>\n<p>The general property here is: given a safe balance, when we withdraw, we should get whatever is in the safe.</p>\n<p>Forge will run any test that takes at least one parameter as a property-based test, so let&#x27;s rewrite:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SafeTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // ...</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testFuzz_Withdraw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> amount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        payable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(safe)).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(amount);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> preBalance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).balance;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        safe.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">withdraw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> postBalance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).balance;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(preBalance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount, postBalance);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>If we run the test now, we can see that Forge runs the property-based test, but it fails for high values of <code>amount</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Compiling</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> files</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> with</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Solc</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.8.10</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Solc</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.8.10</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> finished</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 538.28ms</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Compiler</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> successful!</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Ran</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> for</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test/Safe.t.sol:SafeTest</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[FAIL: EvmError: Revert; counterexample: calldata</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0x29facca7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> args</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">115792089237316195423570985008687907853269984665640564039457584007913129639934</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [1.157e77]]] testFuzz_Withdraw(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">runs:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 4,</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> μ:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 19884,</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ~:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 19884</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Suite</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> result:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> FAILED.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> passed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> failed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> skipped</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">finished</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 3.53ms</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (3.00ms </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">CPU</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Ran</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> suite</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 124.01ms</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (3.53ms </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">CPU</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">): 0 tests passed, 1 failed, 0 skipped (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> total</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tests</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<p>The default amount of ether that the test contract is given is <code>2**96 wei</code> (as in DappTools), so we have to restrict the type of amount to <code>uint96</code> to make sure we don&#x27;t try to send more than we have:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testFuzz_Withdraw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint96</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> amount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span></code></pre>\n<p>And now it passes:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Compiling</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> files</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> with</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Solc</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.8.10</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Solc</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.8.10</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> finished</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 549.00ms</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Compiler</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> successful!</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Ran</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> for</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test/Safe.t.sol:SafeTest</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[PASS] testFuzz_Withdraw(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">uint96</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">runs:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 257,</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> μ:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 19401,</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ~:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 19923</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Suite</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> result:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ok.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> passed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> failed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> skipped</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">finished</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 25.22ms</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (24.67ms </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">CPU</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Ran</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> suite</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 124.27ms</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (25.22ms </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">CPU</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">): 1 tests passed, 0 failed, 0 skipped (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> total</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tests</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<p>You may want to exclude certain cases using the <a href=\"/reference/cheatcodes/assume\"><code>assume</code></a> cheatcode. In those cases, fuzzer will discard the inputs and start a new fuzz run:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testFuzz_Withdraw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint96</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> amount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assume</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(amount </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // snip</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>There are different ways to run property-based tests, notably parametric testing and fuzzing. Forge only supports fuzzing.</p>\n","isPage":true,"text":"\nForge supports property based testing.\nProperty-based testing is a way of testing general behaviors as opposed to isolated scenarios.\nLet&#x27;s examine what that means by writing a unit test, finding the general property we are testing for, and converting it to a property-based test instead:\npragma solidity 0.8.10;\n \nimport {Test} from &quot;forge-std/Test.sol&quot;;\n \ncontract Safe {\n    receive() external payable {}\n \n    function withdraw() external {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n}\n \ncontract SafeTest is Test {\n    Safe safe;\n \n    // Needed so the test contract itself can receive ether\n    // when withdrawing\n    receive() external payable {}\n \n    function setUp() public {\n        safe = new Safe();\n    }\n \n    function test_Withdraw() public {\n        payable(address(safe)).transfer(1 ether);\n        uint256 preBalance = address(this).balance;\n        safe.withdraw();\n        uint256 postBalance = address(this).balance;\n        assertEq(preBalance + 1 ether, postBalance);\n    }\n}\nRunning the test, we see it passes:\nforge test\nCompiling 24 files with Solc 0.8.10\nSolc 0.8.10 finished in 573.11ms\nCompiler run successful!\n \nRan 1 test for test/Safe.t.sol:SafeTest\n[PASS] test_Withdraw() (gas: 19644)\nSuite result: ok. 1 passed; 0 failed; 0 skipped; finished in 920.67µs (376.00µs CPU time)\n \nRan 1 test suite in 123.11ms (920.67µs CPU time): 1 tests passed, 0 failed, 0 skipped (1 total tests)\nThis unit test does test that we can withdraw ether from our safe. However, who is to say that it works for all amounts, not just 1 ether?\nThe general property here is: given a safe balance, when we withdraw, we should get whatever is in the safe.\nForge will run any test that takes at least one parameter as a property-based test, so let&#x27;s rewrite:\ncontract SafeTest is Test {\n    // ...\n \n    function testFuzz_Withdraw(uint256 amount) public {\n        payable(address(safe)).transfer(amount);\n        uint256 preBalance = address(this).balance;\n        safe.withdraw();\n        uint256 postBalance = address(this).balance;\n        assertEq(preBalance + amount, postBalance);\n    }\n}\nIf we run the test now, we can see that Forge runs the property-based test, but it fails for high values of amount:\nforge test\nCompiling 1 files with Solc 0.8.10\nSolc 0.8.10 finished in 538.28ms\nCompiler run successful!\n \nRan 1 test for test/Safe.t.sol:SafeTest\n[FAIL: EvmError: Revert; counterexample: calldata=0x29facca7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe args=[115792089237316195423570985008687907853269984665640564039457584007913129639934 [1.157e77]]] testFuzz_Withdraw(uint256) (runs: 4, μ: 19884, ~: 19884)\nSuite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 3.53ms (3.00ms CPU time)\n \nRan 1 test suite in 124.01ms (3.53ms CPU time): 0 tests passed, 1 failed, 0 skipped (1 total tests)\nThe default amount of ether that the test contract is given is 2**96 wei (as in DappTools), so we have to restrict the type of amount to uint96 to make sure we don&#x27;t try to send more than we have:\n    function testFuzz_Withdraw(uint96 amount) public {\nAnd now it passes:\nforge test\nCompiling 1 files with Solc 0.8.10\nSolc 0.8.10 finished in 549.00ms\nCompiler run successful!\n \nRan 1 test for test/Safe.t.sol:SafeTest\n[PASS] testFuzz_Withdraw(uint96) (runs: 257, μ: 19401, ~: 19923)\nSuite result: ok. 1 passed; 0 failed; 0 skipped; finished in 25.22ms (24.67ms CPU time)\n \nRan 1 test suite in 124.27ms (25.22ms CPU time): 1 tests passed, 0 failed, 0 skipped (1 total tests)\nYou may want to exclude certain cases using the assume cheatcode. In those cases, fuzzer will discard the inputs and start a new fuzz run:\nfunction testFuzz_Withdraw(uint96 amount) public {\n    vm.assume(amount &gt; 0.1 ether);\n    // snip\n}\nThere are different ways to run property-based tests, notably parametric testing and fuzzing. Forge only supports fuzzing.\n","title":"Fuzz Testing","titles":[null]},"258":{"href":"/forge/advanced-testing/fuzz-testing#interpreting-results","html":"\n<p>You might have noticed that fuzz tests are summarized a bit differently compared to unit tests:</p>\n<ul>\n<li>&quot;runs&quot; refers to the amount of scenarios the fuzzer tested. By default, the fuzzer will generate 256 scenarios, but this and other test execution parameters can be setup by the user. Fuzzer configuration details are provided <a href=\"#configuring-fuzz-test-execution\"><code>here</code></a>.</li>\n<li>&quot;μ&quot; (Greek letter mu) is the mean gas used across all fuzz runs</li>\n<li>&quot;~&quot; (tilde) is the median gas used across all fuzz runs</li>\n</ul>\n","isPage":false,"text":"\nYou might have noticed that fuzz tests are summarized a bit differently compared to unit tests:\n\n&quot;runs&quot; refers to the amount of scenarios the fuzzer tested. By default, the fuzzer will generate 256 scenarios, but this and other test execution parameters can be setup by the user. Fuzzer configuration details are provided here.\n&quot;μ&quot; (Greek letter mu) is the mean gas used across all fuzz runs\n&quot;~&quot; (tilde) is the median gas used across all fuzz runs\n\n","title":"Interpreting results","titles":[null,"Fuzz Testing"]},"259":{"href":"/forge/advanced-testing/fuzz-testing#configuring-fuzz-test-execution","html":"\n<p>Fuzz tests execution is governed by parameters that can be controlled by users via Forge configuration primitives. Configs can be applied globally or on a per-test basis. For details on this topic please refer to\n📚 <a href=\"/config/reference/overview\"><code>Global config</code></a> and 📚 <a href=\"/config/reference/inline-test-config\"><code>In-line config</code></a>.</p>\n","isPage":false,"text":"\nFuzz tests execution is governed by parameters that can be controlled by users via Forge configuration primitives. Configs can be applied globally or on a per-test basis. For details on this topic please refer to\n📚 Global config and 📚 In-line config.\n","title":"Configuring fuzz test execution","titles":[null,"Fuzz Testing"]},"260":{"href":"/forge/advanced-testing/fuzz-testing#fuzz-test-fixtures","html":"\n<p>Fuzz test fixtures can be defined when you want to make sure a certain set of values is used as inputs for fuzzed parameters.\nThese fixtures can be declared in tests as:</p>\n<ul>\n<li>storage arrays prefixed with <code>fixture</code> and followed by param name to be fuzzed. For example, fixtures to be used when fuzzing parameter <code>amount</code> of type <code>uint32</code> can be defined as</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fixtureAmount </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">555</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">];</span></span></code></pre>\n<ul>\n<li>functions named with <code>fixture</code> prefix, followed by param name to be fuzzed. Function should return an (fixed size or dynamic) array of values to be used for fuzzing. For example, fixtures to be used when fuzzing parameter named <code>owner</code> of type <code>address</code> can be defined in a function with signature</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fixtureOwner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<p>If the type of value provided as a fixture is not the same type as the named parameter to be fuzzed then it is rejected and an error is raised.</p>\n<p>An example where fixture could be used is to reproduce the <code>DSChief</code> vulnerability. Consider the 2 functions</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> etch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> yay</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> slate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        bytes32</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(yay));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        slates[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">hash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> yay;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> voteSlate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> slate</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> weight </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> deposits[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">msg.sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">];</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        subWeight</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(weight, votes[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">msg.sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        votes[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">msg.sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> slate;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        addWeight</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(weight, votes[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">msg.sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span></code></pre>\n<p>where the vulnerability can be reproduced by calling <code>voteSlate</code> before <code>etch</code>, with <code>slate</code> value being a hash of <code>yay</code> address.\nTo make sure fuzzer includes in the same run a <code>slate</code> value derived from a <code>yay</code> address, following fixtures can be defined:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fixtureYay </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        makeAddr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;yay1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        makeAddr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;yay2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        makeAddr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;yay3&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ];</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fixtureSlate </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">makeAddr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;yay1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))),</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">makeAddr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;yay2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))),</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">makeAddr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;yay3&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ];</span></span></code></pre>\n<p>Following image shows how fuzzer generates values with and without fixtures being declared:</p>\n<p><img src=\"/fuzzer.png\" alt=\"Fuzzer\"/></p>","isPage":false,"text":"\nFuzz test fixtures can be defined when you want to make sure a certain set of values is used as inputs for fuzzed parameters.\nThese fixtures can be declared in tests as:\n\nstorage arrays prefixed with fixture and followed by param name to be fuzzed. For example, fixtures to be used when fuzzing parameter amount of type uint32 can be defined as\n\nuint32[] public fixtureAmount = [1, 5, 555];\n\nfunctions named with fixture prefix, followed by param name to be fuzzed. Function should return an (fixed size or dynamic) array of values to be used for fuzzing. For example, fixtures to be used when fuzzing parameter named owner of type address can be defined in a function with signature\n\nfunction fixtureOwner() public returns (address[] memory)\nIf the type of value provided as a fixture is not the same type as the named parameter to be fuzzed then it is rejected and an error is raised.\nAn example where fixture could be used is to reproduce the DSChief vulnerability. Consider the 2 functions\n    function etch(address yay) public returns (bytes32 slate) {\n        bytes32 hash = keccak256(abi.encodePacked(yay));\n \n        slates[hash] = yay;\n \n        return hash;\n    }\n \n    function voteSlate(bytes32 slate) public {\n        uint weight = deposits[msg.sender];\n        subWeight(weight, votes[msg.sender]);\n        votes[msg.sender] = slate;\n        addWeight(weight, votes[msg.sender]);\n    }\nwhere the vulnerability can be reproduced by calling voteSlate before etch, with slate value being a hash of yay address.\nTo make sure fuzzer includes in the same run a slate value derived from a yay address, following fixtures can be defined:\n    address[] public fixtureYay = [\n        makeAddr(&quot;yay1&quot;),\n        makeAddr(&quot;yay2&quot;),\n        makeAddr(&quot;yay3&quot;)\n    ];\n \n    bytes32[] public fixtureSlate = [\n        keccak256(abi.encodePacked(makeAddr(&quot;yay1&quot;))),\n        keccak256(abi.encodePacked(makeAddr(&quot;yay2&quot;))),\n        keccak256(abi.encodePacked(makeAddr(&quot;yay3&quot;)))\n    ];\nFollowing image shows how fuzzer generates values with and without fixtures being declared:\n","title":"Fuzz test fixtures","titles":[null,"Fuzz Testing","Configuring fuzz test execution"]},"261":{"href":"/forge/advanced-testing/invariant-testing#invariant-testing","html":"</header>\n","isPage":true,"text":"\n","title":"Invariant Testing","titles":[]},"262":{"href":"/forge/advanced-testing/invariant-testing#overview","html":"\n<p>Invariant testing allows for a set of invariant expressions to be tested against randomized sequences of pre-defined function calls from pre-defined contracts. After each function call is performed, all defined invariants are asserted.</p>\n<p>Invariant testing is a powerful tool to expose incorrect logic in protocols. Due to the fact that function call sequences are randomized and have fuzzed inputs, invariant testing can expose false assumptions and incorrect logic in edge cases and highly complex protocol states.</p>\n<p>Invariant testing campaigns have two dimensions, <code>runs</code> and <code>depth</code>:</p>\n<ul>\n<li><code>runs</code>: Number of times that a sequence of function calls is generated and run.</li>\n<li><code>depth</code>: Number of function calls made in a given <code>run</code>. Invariants are asserted after each function call is made. If a function call reverts, the <code>depth</code> counter still increments.</li>\n</ul>\n<p>For long invariant campaigns a <code>timeout</code> (in seconds) can be set, ensuring test ends after specified time elapsed.</p>\n<blockquote>\n<p>ℹ️ <strong>Note</strong></p>\n<p>When implementing invariant tests is important to be aware that for each <code>invariant_*</code> function a different EVM executor is created, therefore invariants are not asserted against same EVM state. This means that if <code>invariant_A()</code> and <code>invariant_B()</code> functions are defined then <code>invariant_B()</code> won&#x27;t be asserted against EVM state of <code>invariant_A()</code> (and the other way around).</p>\n<p>If you want to assert all invariants at the same time then they can be grouped and run on multiple jobs. For example, assert all invariants using two jobs can be implemented as:</p>\n<pre><code class=\"language-Solidity\">function invariant_job1() public {\n   assertInvariants();\n}\n\nfunction invariant_job2() public {\n   assertInvariants();\n}\n\nfunction assertInvariants() internal {\n   assertEq(val1, val2);\n   assertEq(val3, val4);\n}\n</code></pre>\n</blockquote>\n<p>These and other invariant configuration aspects are explained <a href=\"#configuring-invariant-test-execution\"><code>here</code></a>.</p>\n<p>Similar to how standard tests are run in Foundry by prefixing a function name with <code>test</code>, invariant tests are denoted by prefixing the function name with <code>invariant</code> (e.g., <code>function invariant_A()</code>).</p>\n<p><code>afterInvariant()</code> function is called at the end of each invariant run (if declared), allowing post campaign processing. This function can be used for logging campaign metrics (e.g. how many times a selector was called) and post fuzz campaign testing (e.g. close out all positions and assert all funds are able to exit the system).</p>\n","isPage":false,"text":"\nInvariant testing allows for a set of invariant expressions to be tested against randomized sequences of pre-defined function calls from pre-defined contracts. After each function call is performed, all defined invariants are asserted.\nInvariant testing is a powerful tool to expose incorrect logic in protocols. Due to the fact that function call sequences are randomized and have fuzzed inputs, invariant testing can expose false assumptions and incorrect logic in edge cases and highly complex protocol states.\nInvariant testing campaigns have two dimensions, runs and depth:\n\nruns: Number of times that a sequence of function calls is generated and run.\ndepth: Number of function calls made in a given run. Invariants are asserted after each function call is made. If a function call reverts, the depth counter still increments.\n\nFor long invariant campaigns a timeout (in seconds) can be set, ensuring test ends after specified time elapsed.\n\nℹ️ Note\nWhen implementing invariant tests is important to be aware that for each invariant_* function a different EVM executor is created, therefore invariants are not asserted against same EVM state. This means that if invariant_A() and invariant_B() functions are defined then invariant_B() won&#x27;t be asserted against EVM state of invariant_A() (and the other way around).\nIf you want to assert all invariants at the same time then they can be grouped and run on multiple jobs. For example, assert all invariants using two jobs can be implemented as:\nfunction invariant_job1() public {\n   assertInvariants();\n}\n\nfunction invariant_job2() public {\n   assertInvariants();\n}\n\nfunction assertInvariants() internal {\n   assertEq(val1, val2);\n   assertEq(val3, val4);\n}\n\n\nThese and other invariant configuration aspects are explained here.\nSimilar to how standard tests are run in Foundry by prefixing a function name with test, invariant tests are denoted by prefixing the function name with invariant (e.g., function invariant_A()).\nafterInvariant() function is called at the end of each invariant run (if declared), allowing post campaign processing. This function can be used for logging campaign metrics (e.g. how many times a selector was called) and post fuzz campaign testing (e.g. close out all positions and assert all funds are able to exit the system).\n","title":"Overview","titles":["Invariant Testing"]},"263":{"href":"/forge/advanced-testing/invariant-testing#configuring-invariant-test-execution","html":"\n<p>Invariant tests execution is governed by parameters that can be controlled by users via Forge configuration primitives. Configs can be applied globally or on a per-test basis. For details on this topic please refer to\n📚 <a href=\"/config/reference/overview\"><code>Global config</code></a> and 📚 <a href=\"/config/reference/inline-test-config\"><code>In-line config</code></a>.</p>\n","isPage":false,"text":"\nInvariant tests execution is governed by parameters that can be controlled by users via Forge configuration primitives. Configs can be applied globally or on a per-test basis. For details on this topic please refer to\n📚 Global config and 📚 In-line config.\n","title":"Configuring invariant test execution","titles":["Invariant Testing","Overview"]},"264":{"href":"/forge/advanced-testing/invariant-testing#defining-invariants","html":"\n<p>Invariants are conditions expressions that should always hold true over the course of a fuzzing campaign. A good invariant testing suite should have as many invariants as possible, and can have different testing suites for different protocol states.</p>\n<p>Examples of invariants are:</p>\n<ul>\n<li><em>&quot;The xy=k formula always holds&quot;</em> for Uniswap</li>\n<li><em>&quot;The sum of all user balances is equal to the total supply&quot;</em> for an ERC-20 token.</li>\n</ul>\n<p>There are different ways to assert invariants, as outlined in the table below:</p>\n<table><tr><th>Type</th><th>Explanation</th><th>Example</th></tr><tr><td>Direct assertions</td><td>Query a protocol smart contract and assert values are as expected.</td><td><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertGe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">totalAssets</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">totalSupply</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre></td></tr><tr><td>Ghost variable assertions</td><td>Query a protocol smart contract and compare it against a value that has been persisted in the test environment (ghost variable).</td><td><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">totalSupply</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    sumBalanceOf</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre></td></tr><tr><td>Deoptimizing (Naive implementation assertions)</td><td>Query a protocol smart contract and compare it against a naive and typically highly gas-inefficient implementation of the same desired logic.</td><td><pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">outstandingInterest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    test.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">naiveInterest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre></td></tr></table>\n","isPage":false,"text":"\nInvariants are conditions expressions that should always hold true over the course of a fuzzing campaign. A good invariant testing suite should have as many invariants as possible, and can have different testing suites for different protocol states.\nExamples of invariants are:\n\n&quot;The xy=k formula always holds&quot; for Uniswap\n&quot;The sum of all user balances is equal to the total supply&quot; for an ERC-20 token.\n\nThere are different ways to assert invariants, as outlined in the table below:\nTypeExplanationExampleDirect assertionsQuery a protocol smart contract and assert values are as expected.assertGe(\n    token.totalAssets(),\n    token.totalSupply()\n)Ghost variable assertionsQuery a protocol smart contract and compare it against a value that has been persisted in the test environment (ghost variable).assertEq(\n    token.totalSupply(),\n    sumBalanceOf\n)Deoptimizing (Naive implementation assertions)Query a protocol smart contract and compare it against a naive and typically highly gas-inefficient implementation of the same desired logic.assertEq(\n    pool.outstandingInterest(),\n    test.naiveInterest()\n)\n","title":"Defining Invariants","titles":["Invariant Testing"]},"265":{"href":"/forge/advanced-testing/invariant-testing#conditional-invariants","html":"\n<p>Invariants must hold over the course of a given fuzzing campaign, but that doesn&#x27;t mean they must hold true in every situation. There is the possibility for certain invariants to be introduced/removed in a given scenario (e.g., during a liquidation).</p>\n<p>It is not recommended to introduce conditional logic into invariant assertions because they have the possibility of introducing false positives because of an incorrect code path. For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> invariant_example</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (protocolCondition) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(val1, val2);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>In this situation, if <code>protocolCondition == true</code>, the invariant is not asserted at all. Sometimes this can be desired behavior, but it can cause issues if the <code>protocolCondition</code> is true for the whole fuzzing campaign unexpectedly, or there is a logic error in the condition itself. For this reason its better to try and define an alternative invariant for that condition as well, for example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> invariant_example</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (protocolCondition) {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertLe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(val1, val2);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    };</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(val1, val2);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Another approach to handle different invariants across protocol states is to utilize dedicated invariant testing contracts for different scenarios. These scenarios can be bootstrapped using the <code>setUp</code> function, but it is more powerful to leverage <em>invariant targets</em> to govern the fuzzer to behave in a way that will only yield certain results (e.g., avoid liquidations).</p>\n","isPage":false,"text":"\nInvariants must hold over the course of a given fuzzing campaign, but that doesn&#x27;t mean they must hold true in every situation. There is the possibility for certain invariants to be introduced/removed in a given scenario (e.g., during a liquidation).\nIt is not recommended to introduce conditional logic into invariant assertions because they have the possibility of introducing false positives because of an incorrect code path. For example:\nfunction invariant_example() external {\n    if (protocolCondition) return;\n \n    assertEq(val1, val2);\n}\nIn this situation, if protocolCondition == true, the invariant is not asserted at all. Sometimes this can be desired behavior, but it can cause issues if the protocolCondition is true for the whole fuzzing campaign unexpectedly, or there is a logic error in the condition itself. For this reason its better to try and define an alternative invariant for that condition as well, for example:\nfunction invariant_example() external {\n    if (protocolCondition) {\n        assertLe(val1, val2);\n        return;\n    };\n \n    assertEq(val1, val2);\n}\nAnother approach to handle different invariants across protocol states is to utilize dedicated invariant testing contracts for different scenarios. These scenarios can be bootstrapped using the setUp function, but it is more powerful to leverage invariant targets to govern the fuzzer to behave in a way that will only yield certain results (e.g., avoid liquidations).\n","title":"Conditional Invariants","titles":["Invariant Testing","Defining Invariants"]},"266":{"href":"/forge/advanced-testing/invariant-testing#invariant-targets","html":"\n<p><strong>Target Contracts</strong>: The set of contracts that will be called over the course of a given invariant test fuzzing campaign. This set of contracts defaults to all contracts that were deployed in the <code>setUp</code> function, but can be customized to allow for more advanced invariant testing.</p>\n<p><strong>Target Senders</strong>: The invariant test fuzzer picks values for <code>msg.sender</code> at random when performing fuzz campaigns to simulate multiple actors in a system by default. If desired, the set of senders can be customized in the <code>setUp</code> function.</p>\n<p><strong>Target Interfaces</strong>: The set of addresses and their project identifiers that are not deployed during <code>setUp</code> but fuzzed in a forked environment (E.g. <code>[(0x1, [&quot;IERC20&quot;]), (0x2, (&quot;IOwnable&quot;))]</code>). This enables targeting of delegate proxies and contracts deployed with <code>create</code> or <code>create2</code>.</p>\n<p><strong>Target Selectors</strong>: The set of function selectors that are used by the fuzzer for invariant testing. These can be used to use a subset of functions within a given target contract.</p>\n<p><strong>Target Artifacts</strong>: The desired ABI to be used for a given contract. These can be used for proxy contract configurations.</p>\n<p><strong>Target Artifact Selectors</strong>: The desired subset of function selectors to be used within a given ABI to be used for a given contract. These can be used for proxy contract configurations.</p>\n<p>Priorities for the invariant fuzzer in the cases of target clashes are:</p>\n<p><code>targetInterfaces | targetSelectors &gt; excludeSelectors | targetArtifactSelectors &gt; excludeContracts | excludeArtifacts &gt; targetContracts | targetArtifacts</code></p>\n","isPage":false,"text":"\nTarget Contracts: The set of contracts that will be called over the course of a given invariant test fuzzing campaign. This set of contracts defaults to all contracts that were deployed in the setUp function, but can be customized to allow for more advanced invariant testing.\nTarget Senders: The invariant test fuzzer picks values for msg.sender at random when performing fuzz campaigns to simulate multiple actors in a system by default. If desired, the set of senders can be customized in the setUp function.\nTarget Interfaces: The set of addresses and their project identifiers that are not deployed during setUp but fuzzed in a forked environment (E.g. [(0x1, [&quot;IERC20&quot;]), (0x2, (&quot;IOwnable&quot;))]). This enables targeting of delegate proxies and contracts deployed with create or create2.\nTarget Selectors: The set of function selectors that are used by the fuzzer for invariant testing. These can be used to use a subset of functions within a given target contract.\nTarget Artifacts: The desired ABI to be used for a given contract. These can be used for proxy contract configurations.\nTarget Artifact Selectors: The desired subset of function selectors to be used within a given ABI to be used for a given contract. These can be used for proxy contract configurations.\nPriorities for the invariant fuzzer in the cases of target clashes are:\ntargetInterfaces | targetSelectors &gt; excludeSelectors | targetArtifactSelectors &gt; excludeContracts | excludeArtifacts &gt; targetContracts | targetArtifacts\n","title":"Invariant Targets","titles":["Invariant Testing"]},"267":{"href":"/forge/advanced-testing/invariant-testing#function-call-probability-distribution","html":"\n<p>Functions from these contracts will be called at random (with a uniformly distributed probability) with fuzzed inputs.</p>\n<p>For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>targetContract1:</span></span>\n<span class=\"line\"><span>├─ function1: 20%</span></span>\n<span class=\"line\"><span>└─ function2: 20%</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>targetContract2:</span></span>\n<span class=\"line\"><span>├─ function1: 20%</span></span>\n<span class=\"line\"><span>├─ function2: 20%</span></span>\n<span class=\"line\"><span>└─ function3: 20%</span></span></code></pre>\n<p>This is something to be mindful of when designing target contracts, as target contracts with less functions will have each function called more often due to this probability distribution.</p>\n<blockquote>\n<p>ℹ️ <strong>Note</strong></p>\n<p>A good practice is to set <code>show_metrics = true</code> in order to get a breakdown of all handler function calls and which functions are reverting/getting discarded (through <code>vm.assume</code> cheatcode).</p>\n</blockquote>\n","isPage":false,"text":"\nFunctions from these contracts will be called at random (with a uniformly distributed probability) with fuzzed inputs.\nFor example:\ntargetContract1:\n├─ function1: 20%\n└─ function2: 20%\n\ntargetContract2:\n├─ function1: 20%\n├─ function2: 20%\n└─ function3: 20%\nThis is something to be mindful of when designing target contracts, as target contracts with less functions will have each function called more often due to this probability distribution.\n\nℹ️ Note\nA good practice is to set show_metrics = true in order to get a breakdown of all handler function calls and which functions are reverting/getting discarded (through vm.assume cheatcode).\n\n","title":"Function Call Probability Distribution","titles":["Invariant Testing","Invariant Targets"]},"268":{"href":"/forge/advanced-testing/invariant-testing#invariant-test-helper-functions","html":"\n<p>Invariant test helper functions are included in <a href=\"https://github.com/foundry-rs/forge-std/blob/master/src/StdInvariant.sol\"><code>forge-std</code></a> to allow for configurable invariant test setup. The helper functions are outlined below:</p>\n<table><thead><tr><th>Function</th><th>Description</th></tr></thead><tbody><tr><td><code>excludeContract(address newExcludedContract_)</code></td><td>Adds a given address to the <code>_excludedContracts</code> array. This set of contracts is explicitly excluded from the target contracts.</td></tr><tr><td><code>excludeSelector(FuzzSelector memory newExcludedSelector_)</code></td><td>Adds a given <code>FuzzSelector</code> to the <code>_excludedSelectors</code> array. This set of <code>FuzzSelector</code>s is explicitly excluded from the target contract selectors.</td></tr><tr><td><code>excludeSender(address newExcludedSender_)</code></td><td>Adds a given address to the <code>_excludedSenders</code> array. This set of addresses is explicitly excluded from the target senders.</td></tr><tr><td><code>excludeArtifact(string memory newExcludedArtifact_)</code></td><td>Adds a given string to the <code>_excludedArtifacts</code> array. This set of strings is explicitly excluded from the target artifacts.</td></tr><tr><td><code>targetArtifact(string memory newTargetedArtifact_)</code></td><td>Adds a given string to the <code>_targetedArtifacts</code> array. This set of strings is used for the target artifacts.</td></tr><tr><td><code>targetArtifactSelector(FuzzArtifactSelector memory newTargetedArtifactSelector_)</code></td><td>Adds a given <code>FuzzArtifactSelector</code> to the <code>_targetedArtifactSelectors</code> array. This set of <code>FuzzArtifactSelector</code>s is used for the target artifact selectors.</td></tr><tr><td><code>targetContract(address newTargetedContract_)</code></td><td>Adds a given address to the <code>_targetedContracts</code> array. This set of addresses is used for the target contracts. This array overwrites the set of contracts that was deployed during the <code>setUp</code>.</td></tr><tr><td><code>targetSelector(FuzzSelector memory newTargetedSelector_)</code></td><td>Adds a given <code>FuzzSelector</code> to the <code>_targetedSelectors</code> array. This set of <code>FuzzSelector</code>s is used for the target contract selectors.</td></tr><tr><td><code>targetSender(address newTargetedSender_)</code></td><td>Adds a given address to the <code>_targetedSenders</code> array. This set of addresses is used for the target senders.</td></tr><tr><td><code>targetInterface(FuzzInterface memory newTargetedInterface_)</code></td><td>Adds a given <code>FuzzInterface</code> to the <code>_targetedInterfaces</code> array. This set of <code>FuzzInterface</code> extends the contracts and selectors to fuzz and enables targeting of addresses that are not deployed during <code>setUp</code> such as when fuzzing in a forked environment. Also enables targeting of delegate proxies and contracts deployed with <code>create</code> or <code>create2</code>.</td></tr></tbody></table>\n","isPage":false,"text":"\nInvariant test helper functions are included in forge-std to allow for configurable invariant test setup. The helper functions are outlined below:\nFunctionDescriptionexcludeContract(address newExcludedContract_)Adds a given address to the _excludedContracts array. This set of contracts is explicitly excluded from the target contracts.excludeSelector(FuzzSelector memory newExcludedSelector_)Adds a given FuzzSelector to the _excludedSelectors array. This set of FuzzSelectors is explicitly excluded from the target contract selectors.excludeSender(address newExcludedSender_)Adds a given address to the _excludedSenders array. This set of addresses is explicitly excluded from the target senders.excludeArtifact(string memory newExcludedArtifact_)Adds a given string to the _excludedArtifacts array. This set of strings is explicitly excluded from the target artifacts.targetArtifact(string memory newTargetedArtifact_)Adds a given string to the _targetedArtifacts array. This set of strings is used for the target artifacts.targetArtifactSelector(FuzzArtifactSelector memory newTargetedArtifactSelector_)Adds a given FuzzArtifactSelector to the _targetedArtifactSelectors array. This set of FuzzArtifactSelectors is used for the target artifact selectors.targetContract(address newTargetedContract_)Adds a given address to the _targetedContracts array. This set of addresses is used for the target contracts. This array overwrites the set of contracts that was deployed during the setUp.targetSelector(FuzzSelector memory newTargetedSelector_)Adds a given FuzzSelector to the _targetedSelectors array. This set of FuzzSelectors is used for the target contract selectors.targetSender(address newTargetedSender_)Adds a given address to the _targetedSenders array. This set of addresses is used for the target senders.targetInterface(FuzzInterface memory newTargetedInterface_)Adds a given FuzzInterface to the _targetedInterfaces array. This set of FuzzInterface extends the contracts and selectors to fuzz and enables targeting of addresses that are not deployed during setUp such as when fuzzing in a forked environment. Also enables targeting of delegate proxies and contracts deployed with create or create2.\n","title":"Invariant Test Helper Functions","titles":["Invariant Testing","Invariant Targets"]},"269":{"href":"/forge/advanced-testing/invariant-testing#target-contract-setup","html":"\n<p>Target contracts can be set up using the following three methods:</p>\n<ol>\n<li>Contracts that are manually added to the <code>targetContracts</code> array are added to the set of target contracts.</li>\n<li>Contracts that are deployed in the <code>setUp</code> function are automatically added to the set of target contracts (only works if no contracts have been manually added using option 1).</li>\n<li>Contracts that are deployed in the <code>setUp</code> can be <strong>removed</strong> from the target contracts if they are added to the <code>excludeContracts</code> array.</li>\n</ol>\n","isPage":false,"text":"\nTarget contracts can be set up using the following three methods:\n\nContracts that are manually added to the targetContracts array are added to the set of target contracts.\nContracts that are deployed in the setUp function are automatically added to the set of target contracts (only works if no contracts have been manually added using option 1).\nContracts that are deployed in the setUp can be removed from the target contracts if they are added to the excludeContracts array.\n\n","title":"Target Contract Setup","titles":["Invariant Testing","Invariant Targets"]},"270":{"href":"/forge/advanced-testing/invariant-testing#open-testing","html":"\n<p>The default configuration for target contracts is set to all contracts that are deployed during the setup. For smaller modules and more arithmetic contracts, this works well. For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ExampleContract1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> val1;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> val2;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> val3;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> addToA</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> amount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        val1 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        val3 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> addToB</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> amount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        val2 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        val3 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>This contract could be deployed and tested using the default target contract pattern:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> InvariantExample1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ExampleContract1 foo;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        foo </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ExampleContract1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> invariant_A</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(foo.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">val1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> foo.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">val2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), foo.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">val3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> invariant_B</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertGe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(foo.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">val1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> foo.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">val2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), foo.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">val3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">());</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>This setup will call <code>foo.addToA()</code> and <code>foo.addToB()</code> with a 50%-50% probability distribution with fuzzed inputs. Inevitably, the inputs will start to cause overflows and the function calls will start reverting. Since the default configuration in invariant testing is <code>fail_on_revert = false</code>, this will not cause the tests to fail. The invariants will hold throughout the rest of the fuzzing campaign and the result is that the test will pass. The output will look something like this:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>[PASS] invariant_A() (runs: 50, calls: 10000, reverts: 5533)</span></span>\n<span class=\"line\"><span>[PASS] invariant_B() (runs: 50, calls: 10000, reverts: 5533)</span></span></code></pre>\n","isPage":false,"text":"\nThe default configuration for target contracts is set to all contracts that are deployed during the setup. For smaller modules and more arithmetic contracts, this works well. For example:\ncontract ExampleContract1 {\n \n    uint256 public val1;\n    uint256 public val2;\n    uint256 public val3;\n \n    function addToA(uint256 amount) external {\n        val1 += amount;\n        val3 += amount;\n    }\n \n    function addToB(uint256 amount) external {\n        val2 += amount;\n        val3 += amount;\n    }\n \n}\nThis contract could be deployed and tested using the default target contract pattern:\ncontract InvariantExample1 is Test {\n \n    ExampleContract1 foo;\n \n    function setUp() external {\n        foo = new ExampleContract1();\n    }\n \n    function invariant_A() external {\n        assertEq(foo.val1() + foo.val2(), foo.val3());\n    }\n \n    function invariant_B() external {\n        assertGe(foo.val1() + foo.val2(), foo.val3());\n    }\n \n}\nThis setup will call foo.addToA() and foo.addToB() with a 50%-50% probability distribution with fuzzed inputs. Inevitably, the inputs will start to cause overflows and the function calls will start reverting. Since the default configuration in invariant testing is fail_on_revert = false, this will not cause the tests to fail. The invariants will hold throughout the rest of the fuzzing campaign and the result is that the test will pass. The output will look something like this:\n[PASS] invariant_A() (runs: 50, calls: 10000, reverts: 5533)\n[PASS] invariant_B() (runs: 50, calls: 10000, reverts: 5533)\n","title":"Open Testing","titles":["Invariant Testing"]},"271":{"href":"/forge/advanced-testing/invariant-testing#handler-based-testing","html":"\n<p>For more complex and integrated protocols, more sophisticated target contract usage is required to achieve the desired results. To illustrate how Handlers can be leveraged, the following contract will be used (an ERC-4626 based contract that accepts deposits of another ERC-20 token):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// SPDX-License-Identifier: UNLICENSED</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ^0.8.17</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> IERC20Like</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> owner_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> view</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> balance_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> transferFrom</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> owner_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> recipient_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> amount_</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> success_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Basic4626Deposit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /**********************************************************************************************/</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /*** Storage                                                                                ***/</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /**********************************************************************************************/</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> immutable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> asset;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> name;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> symbol;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint8</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> immutable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> decimals;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> totalSupply;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    mapping</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> balanceOf;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /**********************************************************************************************/</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /*** Constructor                                                                            ***/</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /**********************************************************************************************/</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    constructor</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> asset_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> name_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> symbol_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint8</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        asset    </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> asset_;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        name     </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> name_;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        symbol   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> symbol_;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        decimals </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> decimals_;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /**********************************************************************************************/</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /*** External Functions                                                                     ***/</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /**********************************************************************************************/</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deposit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> assets_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> receiver_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> shares_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shares_ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> convertToShares</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(assets_);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(receiver_ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ZERO_RECEIVER&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(shares_   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ZERO_SHARES&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(assets_   </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ZERO_ASSETS&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        totalSupply </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shares_;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Cannot overflow because totalSupply would first overflow in the statement above.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        unchecked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { balanceOf[receiver_] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shares_; }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">            IERC20Like</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(asset).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transferFrom</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">msg.sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), assets_),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">            &quot;TRANSFER_FROM&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> recipient_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> amount_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> success_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        balanceOf[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">msg.sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount_;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Cannot overflow because minting prevents overflow of totalSupply,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // and sum of user balances == totalSupply.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        unchecked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { balanceOf[recipient_] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount_; }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /**********************************************************************************************/</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /*** Public View Functions                                                                  ***/</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /**********************************************************************************************/</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> convertToShares</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> assets_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> view</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> shares_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> supply_ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> totalSupply;  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Cache to stack.</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        shares_ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> supply_ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ?</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> assets_ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (assets_ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> supply_) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> totalAssets</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> totalAssets</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> view</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> assets_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        assets_ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> IERC20Like</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(asset).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nFor more complex and integrated protocols, more sophisticated target contract usage is required to achieve the desired results. To illustrate how Handlers can be leveraged, the following contract will be used (an ERC-4626 based contract that accepts deposits of another ERC-20 token):\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.17;\n \ninterface IERC20Like {\n \n    function balanceOf(address owner_) external view returns (uint256 balance_);\n \n    function transferFrom(\n        address owner_,\n        address recipient_,\n        uint256 amount_\n    ) external returns (bool success_);\n \n}\n \ncontract Basic4626Deposit {\n \n    /**********************************************************************************************/\n    /*** Storage                                                                                ***/\n    /**********************************************************************************************/\n \n    address public immutable asset;\n \n    string public name;\n    string public symbol;\n \n    uint8 public immutable decimals;\n \n    uint256 public totalSupply;\n \n    mapping(address =&gt; uint256) public balanceOf;\n \n    /**********************************************************************************************/\n    /*** Constructor                                                                            ***/\n    /**********************************************************************************************/\n \n    constructor(address asset_, string memory name_, string memory symbol_, uint8 decimals_) {\n        asset    = asset_;\n        name     = name_;\n        symbol   = symbol_;\n        decimals = decimals_;\n    }\n \n    /**********************************************************************************************/\n    /*** External Functions                                                                     ***/\n    /**********************************************************************************************/\n \n    function deposit(uint256 assets_, address receiver_) external returns (uint256 shares_) {\n        shares_ = convertToShares(assets_);\n \n        require(receiver_ != address(0), &quot;ZERO_RECEIVER&quot;);\n        require(shares_   != uint256(0), &quot;ZERO_SHARES&quot;);\n        require(assets_   != uint256(0), &quot;ZERO_ASSETS&quot;);\n \n        totalSupply += shares_;\n \n        // Cannot overflow because totalSupply would first overflow in the statement above.\n        unchecked { balanceOf[receiver_] += shares_; }\n \n        require(\n            IERC20Like(asset).transferFrom(msg.sender, address(this), assets_),\n            &quot;TRANSFER_FROM&quot;\n        );\n    }\n \n    function transfer(address recipient_, uint256 amount_) external returns (bool success_) {\n        balanceOf[msg.sender] -= amount_;\n \n        // Cannot overflow because minting prevents overflow of totalSupply,\n        // and sum of user balances == totalSupply.\n        unchecked { balanceOf[recipient_] += amount_; }\n \n        return true;\n    }\n \n    /**********************************************************************************************/\n    /*** Public View Functions                                                                  ***/\n    /**********************************************************************************************/\n \n    function convertToShares(uint256 assets_) public view returns (uint256 shares_) {\n        uint256 supply_ = totalSupply;  // Cache to stack.\n \n        shares_ = supply_ == 0 ? assets_ : (assets_ * supply_) / totalAssets();\n    }\n \n    function totalAssets() public view returns (uint256 assets_) {\n        assets_ = IERC20Like(asset).balanceOf(address(this));\n    }\n \n}\n","title":"Handler-Based Testing","titles":["Invariant Testing"]},"272":{"href":"/forge/advanced-testing/invariant-testing#handler-functions","html":"\n<p>This contract&#x27;s <code>deposit</code> function requires that the caller has a non-zero balance of the ERC-20 <code>asset</code>. In the Open invariant testing approach, <code>deposit()</code> and <code>transfer()</code> would be called with a 50-50% distribution, but they would revert on every call. This would cause the invariant tests to &quot;pass&quot;, but in reality no state was manipulated in the desired contract at all. This is where target contracts can be leveraged. When a contract requires some additional logic in order to function properly, it can be added in a dedicated contract called a <code>Handler</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deposit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> assets</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> virtual</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    asset.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), assets);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    asset.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">approve</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token), assets);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shares </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deposit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(assets, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>This contract will provide the necessary setup before a function call is made in order to ensure it is successful.</p>\n<p>Building on this concept, Handlers can be used to develop more sophisticated invariant tests. With Open invariant testing, the tests run as shown in the diagram below, with random sequences of function calls being made to the protocol contracts directly with fuzzed parameters. This will cause reverts for more complex systems as outlined above.</p>\n<p><img src=\"https://user-images.githubusercontent.com/44272939/214752968-5f0e7653-d52e-43e6-b453-cac935f5d97d.svg\" alt=\"Blank diagram\"/></p>\n<p>By manually adding all Handler contracts to the <code>targetContracts</code> array, all function calls made to protocol contracts can be made in a way that is governed by the Handler to ensure successful calls. This is outlined in the diagram below.</p>\n<p><img src=\"https://user-images.githubusercontent.com/44272939/216420091-8a5c2bcc-d586-458f-be1e-a9ea0ef5961f.svg\" alt=\"Invariant Diagrams - Page 2\"/></p>\n<p>With this layer between the fuzzer and the protocol, more powerful testing can be achieved.</p>\n","isPage":false,"text":"\nThis contract&#x27;s deposit function requires that the caller has a non-zero balance of the ERC-20 asset. In the Open invariant testing approach, deposit() and transfer() would be called with a 50-50% distribution, but they would revert on every call. This would cause the invariant tests to &quot;pass&quot;, but in reality no state was manipulated in the desired contract at all. This is where target contracts can be leveraged. When a contract requires some additional logic in order to function properly, it can be added in a dedicated contract called a Handler.\nfunction deposit(uint256 assets) public virtual {\n    asset.mint(address(this), assets);\n \n    asset.approve(address(token), assets);\n \n    uint256 shares = token.deposit(assets, address(this));\n}\nThis contract will provide the necessary setup before a function call is made in order to ensure it is successful.\nBuilding on this concept, Handlers can be used to develop more sophisticated invariant tests. With Open invariant testing, the tests run as shown in the diagram below, with random sequences of function calls being made to the protocol contracts directly with fuzzed parameters. This will cause reverts for more complex systems as outlined above.\n\nBy manually adding all Handler contracts to the targetContracts array, all function calls made to protocol contracts can be made in a way that is governed by the Handler to ensure successful calls. This is outlined in the diagram below.\n\nWith this layer between the fuzzer and the protocol, more powerful testing can be achieved.\n","title":"Handler Functions","titles":["Invariant Testing","Handler-Based Testing"]},"273":{"href":"/forge/advanced-testing/invariant-testing#handler-ghost-variables","html":"\n<p>Within Handlers, &quot;ghost variables&quot; can be tracked across multiple function calls to add additional information for invariant tests. A good example of this is summing all of the <code>shares</code> that each LP owns after depositing into the ERC-4626 token as shown above, and using that in the invariant (<code>totalSupply == sumBalanceOf</code>).</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deposit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> assets</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> virtual</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    asset.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), assets);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    asset.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">approve</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token), assets);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shares </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deposit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(assets, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    sumBalanceOf </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shares;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nWithin Handlers, &quot;ghost variables&quot; can be tracked across multiple function calls to add additional information for invariant tests. A good example of this is summing all of the shares that each LP owns after depositing into the ERC-4626 token as shown above, and using that in the invariant (totalSupply == sumBalanceOf).\nfunction deposit(uint256 assets) public virtual {\n    asset.mint(address(this), assets);\n \n    asset.approve(address(token), assets);\n \n    uint256 shares = token.deposit(assets, address(this));\n \n    sumBalanceOf += shares;\n}\n","title":"Handler Ghost Variables","titles":["Invariant Testing","Handler-Based Testing"]},"274":{"href":"/forge/advanced-testing/invariant-testing#function-level-assertions","html":"\n<p>Another benefit is the ability to perform assertions on function calls as they are happening. An example is asserting the ERC-20 balance of the LP has decremented by <code>assets</code> during the <code>deposit</code> function call, as well as their LP token balance incrementing by <code>shares</code>. In this way, handler functions are similar to fuzz tests because they can take in fuzzed inputs, perform state changes, and assert before/after state.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deposit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> assets</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> virtual</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    asset.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), assets);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    asset.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">approve</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token), assets);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> beforeBalance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> asset.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shares </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deposit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(assets, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(asset.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), beforeBalance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> assets);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    sumBalanceOf </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shares;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nAnother benefit is the ability to perform assertions on function calls as they are happening. An example is asserting the ERC-20 balance of the LP has decremented by assets during the deposit function call, as well as their LP token balance incrementing by shares. In this way, handler functions are similar to fuzz tests because they can take in fuzzed inputs, perform state changes, and assert before/after state.\nfunction deposit(uint256 assets) public virtual {\n    asset.mint(address(this), assets);\n \n    asset.approve(address(token), assets);\n \n    uint256 beforeBalance = asset.balanceOf(address(this));\n \n    uint256 shares = token.deposit(assets, address(this));\n \n    assertEq(asset.balanceOf(address(this)), beforeBalance - assets);\n \n    sumBalanceOf += shares;\n}\n","title":"Function-Level Assertions","titles":["Invariant Testing","Handler-Based Testing"]},"275":{"href":"/forge/advanced-testing/invariant-testing#boundedunbounded-functions","html":"\n<p>In addition, with Handlers, input parameters can be bounded to reasonable expected values such that <code>fail_on_revert</code> in <code>foundry.toml</code> can be set to <code>true</code>. This can be accomplished using the <code>bound()</code> helper function from <code>forge-std</code>. This ensures that every function call that is being made by the fuzzer must be successful against the protocol in order to get tests to pass. This is very useful for visibility and confidence that the protocol is being tested in the desired way.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deposit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> assets</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assets </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> bound</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(assets, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1e30</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    asset.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), assets);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    asset.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">approve</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token), assets);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> beforeBalance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> asset.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shares </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deposit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(assets, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(asset.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), beforeBalance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> assets);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    sumBalanceOf </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shares;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>This can also be accomplished by inheriting non-bounded functions from dedicated &quot;unbounded&quot; Handler contracts that can be used for <code>fail_on_revert = false</code> testing. This type of testing is also useful since it can expose issues in assumptions made with <code>bound</code> function usage.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Unbounded</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deposit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> assets</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> virtual</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    asset.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), assets);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    asset.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">approve</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token), assets);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> beforeBalance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> asset.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shares </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deposit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(assets, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(asset.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), beforeBalance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> assets);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    sumBalanceOf </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shares;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Bounded</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deposit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> assets</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assets </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> bound</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(assets, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1e30</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    super</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deposit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(assets);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nIn addition, with Handlers, input parameters can be bounded to reasonable expected values such that fail_on_revert in foundry.toml can be set to true. This can be accomplished using the bound() helper function from forge-std. This ensures that every function call that is being made by the fuzzer must be successful against the protocol in order to get tests to pass. This is very useful for visibility and confidence that the protocol is being tested in the desired way.\nfunction deposit(uint256 assets) external {\n    assets = bound(assets, 0, 1e30);\n \n    asset.mint(address(this), assets);\n \n    asset.approve(address(token), assets);\n \n    uint256 beforeBalance = asset.balanceOf(address(this));\n \n    uint256 shares = token.deposit(assets, address(this));\n \n    assertEq(asset.balanceOf(address(this)), beforeBalance - assets);\n \n    sumBalanceOf += shares;\n}\nThis can also be accomplished by inheriting non-bounded functions from dedicated &quot;unbounded&quot; Handler contracts that can be used for fail_on_revert = false testing. This type of testing is also useful since it can expose issues in assumptions made with bound function usage.\n// Unbounded\nfunction deposit(uint256 assets) public virtual {\n    asset.mint(address(this), assets);\n \n    asset.approve(address(token), assets);\n \n    uint256 beforeBalance = asset.balanceOf(address(this));\n \n    uint256 shares = token.deposit(assets, address(this));\n \n    assertEq(asset.balanceOf(address(this)), beforeBalance - assets);\n \n    sumBalanceOf += shares;\n}\n// Bounded\nfunction deposit(uint256 assets) external {\n    assets = bound(assets, 0, 1e30);\n \n    super.deposit(assets);\n}\n","title":"Bounded/Unbounded Functions","titles":["Invariant Testing","Handler-Based Testing"]},"276":{"href":"/forge/advanced-testing/invariant-testing#actor-management","html":"\n<p>In the function calls above, it can be seen that <code>address(this)</code> is the sole depositor in the ERC-4626 contract, which is not a realistic representation of its intended use. By leveraging the <code>prank</code> cheatcodes in <code>forge-std</code>, each Handler can manage a set of actors and use them to perform the same function call from different <code>msg.sender</code> addresses. This can be accomplished using the following modifier:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> actors;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> currentActor;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">modifier</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useActor</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> actorIndexSeed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    currentActor </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> actors[</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">bound</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(actorIndexSeed, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, actors.length </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)];</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startPrank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(currentActor);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    _</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopPrank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Using multiple actors allows for more granular ghost variable usage as well. This is demonstrated in the functions below:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Unbounded</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deposit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> assets</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> actorIndexSeed</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> virtual</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> useActor</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">actorIndexSeed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    asset.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(currentActor, assets);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    asset.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">approve</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token), assets);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> beforeBalance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> asset.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shares </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deposit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(assets, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(asset.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), beforeBalance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> assets);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    sumBalanceOf </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> shares;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    sumDeposits[currentActor] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> assets</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Bounded</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deposit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> assets</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> actorIndexSeed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    assets </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> bound</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(assets, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1e30</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    super</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deposit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(assets, actorIndexSeed);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nIn the function calls above, it can be seen that address(this) is the sole depositor in the ERC-4626 contract, which is not a realistic representation of its intended use. By leveraging the prank cheatcodes in forge-std, each Handler can manage a set of actors and use them to perform the same function call from different msg.sender addresses. This can be accomplished using the following modifier:\naddress[] public actors;\n \naddress internal currentActor;\n \nmodifier useActor(uint256 actorIndexSeed) {\n    currentActor = actors[bound(actorIndexSeed, 0, actors.length - 1)];\n    vm.startPrank(currentActor);\n    _;\n    vm.stopPrank();\n}\nUsing multiple actors allows for more granular ghost variable usage as well. This is demonstrated in the functions below:\n// Unbounded\nfunction deposit(\n    uint256 assets,\n    uint256 actorIndexSeed\n) public virtual useActor(actorIndexSeed) {\n    asset.mint(currentActor, assets);\n \n    asset.approve(address(token), assets);\n \n    uint256 beforeBalance = asset.balanceOf(address(this));\n \n    uint256 shares = token.deposit(assets, address(this));\n \n    assertEq(asset.balanceOf(address(this)), beforeBalance - assets);\n \n    sumBalanceOf += shares;\n \n    sumDeposits[currentActor] += assets\n}\n// Bounded\nfunction deposit(uint256 assets, uint256 actorIndexSeed) external {\n    assets = bound(assets, 0, 1e30);\n \n    super.deposit(assets, actorIndexSeed);\n}","title":"Actor Management","titles":["Invariant Testing","Handler-Based Testing"]},"277":{"href":"/forge/advanced-testing/overview#advanced-testing","html":"\n<p>Forge comes with a number of advanced testing methods:</p>\n<ul>\n<li><a href=\"/forge/advanced-testing/table-testing\">Table Testing</a></li>\n<li><a href=\"/forge/advanced-testing/fuzz-testing\">Fuzz Testing</a></li>\n<li><a href=\"/forge/advanced-testing/invariant-testing\">Invariant Testing</a></li>\n<li><a href=\"/forge/advanced-testing/differential-ffi-testing\">Differential Testing</a></li>\n</ul>\n<p>In the future, Forge will also support these:</p>\n<ul>\n<li><a href=\"#\">Symbolic Execution</a></li>\n<li><a href=\"#\">Mutation Testing</a></li>\n</ul>\n<p>Each chapter dives into what problem the testing methods solve, and how to apply them to your own project.</p>","isPage":true,"text":"\nForge comes with a number of advanced testing methods:\n\nTable Testing\nFuzz Testing\nInvariant Testing\nDifferential Testing\n\nIn the future, Forge will also support these:\n\nSymbolic Execution\nMutation Testing\n\nEach chapter dives into what problem the testing methods solve, and how to apply them to your own project.","title":"Advanced Testing","titles":[null]},"278":{"href":"/forge/advanced-testing/table-testing#table-testing","html":"\n<p>Foundry v1.3.0 comes with support for table testing, which enables the definition of a dataset (the &quot;table&quot;) and the execution of a test function for each entry in that dataset. This approach helps ensure that certain combinations of inputs and conditions are tested.</p>\n","isPage":true,"text":"\nFoundry v1.3.0 comes with support for table testing, which enables the definition of a dataset (the &quot;table&quot;) and the execution of a test function for each entry in that dataset. This approach helps ensure that certain combinations of inputs and conditions are tested.\n","title":"Table Testing","titles":[null]},"279":{"href":"/forge/advanced-testing/table-testing#test-definition","html":"\n<p>In forge, table tests are functions named with <code>table</code> prefix that accepts datasets as one or multiple arguments:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tableSumsTest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">TestCase</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> testCaseSum</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tableSumsTest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">TestCase</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> testCaseSum</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> enable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span></span></code></pre>\n<p>The datasets are defined as forge fixtures which can be:</p>\n<ul>\n<li>storage arrays prefixed with <code>fixture</code> prefix and followed by dataset name</li>\n<li>functions named with <code>fixture</code> prefix, followed by dataset name. Function should return an (fixed size or dynamic) array of values.</li>\n</ul>\n","isPage":false,"text":"\nIn forge, table tests are functions named with table prefix that accepts datasets as one or multiple arguments:\nfunction tableSumsTest(TestCase memory testCaseSum) public\nfunction tableSumsTest(TestCase memory testCaseSum, bool enable) public\nThe datasets are defined as forge fixtures which can be:\n\nstorage arrays prefixed with fixture prefix and followed by dataset name\nfunctions named with fixture prefix, followed by dataset name. Function should return an (fixed size or dynamic) array of values.\n\n","title":"Test definition","titles":[null,"Table Testing",null]},"280":{"href":"/forge/advanced-testing/table-testing#examples","html":"\n<ul>\n<li>Single dataset. In following example, <code>tableSumsTest</code> test will be executed twice, with inputs from <code>fixtureSums</code> dataset: once with <code>TestCase(1, 2, 3)</code> and once with <code>TestCase(4, 5, 9)</code>.</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TestCase</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fixtureSums</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">TestCase</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    TestCase[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> entries </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TestCase[](</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    entries[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> TestCase</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    entries[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> TestCase</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">9</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> entries;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tableSumsTest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">TestCase</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> sums</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(sums.a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sums.b </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sums.expected, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;wrong sum&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<ul>\n<li>Multiple datasets. <code>tableSwapTest</code> test will be executed twice, by using values at the same position from <code>fixtureWallet</code> and <code>fixtureSwap</code> datasets.</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Wallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> owner;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Swap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> swap;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Wallet[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fixtureWallet;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Swap[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fixtureSwap;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // first table test input</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fixtureWallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">push</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">11</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">11</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fixtureSwap.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">push</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Swap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">11</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // second table test input</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fixtureWallet.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">push</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Wallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">12</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">12</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));        </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fixtureSwap.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">push</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Swap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">12</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tableSwapTest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">Wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> wallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">Swap</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> swap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        (wallet.owner </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">11</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> swap.swap) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">||</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (wallet.owner </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">12</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&amp;&amp;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">swap.swap), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;not allowed&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\n\nSingle dataset. In following example, tableSumsTest test will be executed twice, with inputs from fixtureSums dataset: once with TestCase(1, 2, 3) and once with TestCase(4, 5, 9).\n\nstruct TestCase {\n    uint256 a;\n    uint256 b;\n    uint256 expected;\n}\n    \nfunction fixtureSums() public returns (TestCase[] memory) {\n    TestCase[] memory entries = new TestCase[](2);\n    entries[0] = TestCase(1, 2, 3);\n    entries[1] = TestCase(4, 5, 9);\n    return entries;\n}\n \nfunction tableSumsTest(TestCase memory sums) public pure {\n    require(sums.a + sums.b == sums.expected, &quot;wrong sum&quot;);\n}\n\nMultiple datasets. tableSwapTest test will be executed twice, by using values at the same position from fixtureWallet and fixtureSwap datasets.\n\nstruct Wallet {\n    address owner;\n    uint256 amount;\n}\n \nstruct Swap {\n    bool swap;\n    uint256 amount;\n}\n    \nWallet[] public fixtureWallet;\nSwap[] public fixtureSwap;\n \nfunction setUp() public {\n    // first table test input\n    fixtureWallet.push(Wallet(address(11), 11));\n    fixtureSwap.push(Swap(true, 11));\n \n    // second table test input\n    fixtureWallet.push(Wallet(address(12), 12));        \n    fixtureSwap.push(Swap(false, 12));\n}\n \nfunction tableSwapTest(Wallet memory wallet, Swap memory swap) public pure {\n    require(\n        (wallet.owner == address(11) &amp;&amp; swap.swap) || (wallet.owner == address(12) &amp;&amp; !swap.swap), &quot;not allowed&quot;\n    );\n}","title":"Examples","titles":[null,"Table Testing",null]},"281":{"href":"/forge/gas-tracking/gas-function-snapshots#gas-function-snapshots","html":"\n<p>Forge can generate gas snapshots for all your test functions. This can\nbe useful to get a general feel for how much gas your contract will consume,\nor to compare gas usage before and after various optimizations.</p>\n<p>To generate the gas snapshot, run <a href=\"/forge/reference/forge-snapshot\"><code>forge snapshot</code></a>.</p>\n<p>This will generate a file called <code>.gas-snapshot</code> by default with all your\ntests and their respective gas usage.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">forge snapshot</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cat .gas-snapshot</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ERC20Test:testApprove() (gas: 31162)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ERC20Test:testBurn() (gas: 59875)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ERC20Test:testRevertTransferFromInsufficientAllowance() (gas: 81034)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ERC20Test:testRevertTransferFromInsufficientBalance() (gas: 81662)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ERC20Test:testRevertTransferInsufficientBalance() (gas: 52882)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ERC20Test:testInfiniteApproveTransferFrom() (gas: 90167)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ERC20Test:testMetadata() (gas: 14606)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ERC20Test:testMint() (gas: 53830)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ERC20Test:testTransfer() (gas: 60473)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ERC20Test:testTransferFrom() (gas: 84152)</span></span></code></pre>\n","isPage":true,"text":"\nForge can generate gas snapshots for all your test functions. This can\nbe useful to get a general feel for how much gas your contract will consume,\nor to compare gas usage before and after various optimizations.\nTo generate the gas snapshot, run forge snapshot.\nThis will generate a file called .gas-snapshot by default with all your\ntests and their respective gas usage.\nforge snapshot\ncat .gas-snapshot\n \nERC20Test:testApprove() (gas: 31162)\nERC20Test:testBurn() (gas: 59875)\nERC20Test:testRevertTransferFromInsufficientAllowance() (gas: 81034)\nERC20Test:testRevertTransferFromInsufficientBalance() (gas: 81662)\nERC20Test:testRevertTransferInsufficientBalance() (gas: 52882)\nERC20Test:testInfiniteApproveTransferFrom() (gas: 90167)\nERC20Test:testMetadata() (gas: 14606)\nERC20Test:testMint() (gas: 53830)\nERC20Test:testTransfer() (gas: 60473)\nERC20Test:testTransferFrom() (gas: 84152)\n","title":"Gas Function Snapshots","titles":[null]},"282":{"href":"/forge/gas-tracking/gas-function-snapshots#filtering","html":"\n<p>If you would like to specify a different output file, run <code>forge snapshot --snap &lt;FILE_NAME&gt;</code>.</p>\n<p>You can also sort the results by gas usage. Use the <code>--asc</code> option to sort the results in\nascending order and <code>--desc</code> to sort the results in descending order.</p>\n<p>Finally, you can also specify a min/max gas threshold for all your tests.\nTo only include results above a threshold, you can use the <code>--min &lt;VALUE&gt;</code> option.\nIn the same way, to only include results under a threshold,\nyou can use the <code>--max &lt;VALUE&gt;</code> option.</p>\n<p>Keep in mind that the changes will be made in the snapshot file, and not in the snapshot being\ndisplayed on your screen.</p>\n<p>You can also use it in combination with the filters for <code>forge test</code>, such as <code>forge snapshot --match-path contracts/test/ERC721.t.sol</code> to generate a gas snapshot relevant to this test contract.</p>\n","isPage":false,"text":"\nIf you would like to specify a different output file, run forge snapshot --snap &lt;FILE_NAME&gt;.\nYou can also sort the results by gas usage. Use the --asc option to sort the results in\nascending order and --desc to sort the results in descending order.\nFinally, you can also specify a min/max gas threshold for all your tests.\nTo only include results above a threshold, you can use the --min &lt;VALUE&gt; option.\nIn the same way, to only include results under a threshold,\nyou can use the --max &lt;VALUE&gt; option.\nKeep in mind that the changes will be made in the snapshot file, and not in the snapshot being\ndisplayed on your screen.\nYou can also use it in combination with the filters for forge test, such as forge snapshot --match-path contracts/test/ERC721.t.sol to generate a gas snapshot relevant to this test contract.\n","title":"Filtering","titles":[null,"Gas Function Snapshots"]},"283":{"href":"/forge/gas-tracking/gas-function-snapshots#comparing-gas-usage","html":"\n<p>If you would like to compare the current snapshot file with your\nlatest changes, you can use the <code>--diff</code> or <code>--check</code> options.</p>\n<p><code>--diff</code> will compare against the snapshot and display changes from the snapshot.</p>\n<p>It can also optionally take a file name (<code>--diff &lt;FILE_NAME&gt;</code>), with the default\nbeing <code>.gas-snapshot</code>.</p>\n<p>For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">forge snapshot --diff .gas-snapshot2</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Running 10 tests for src/test/ERC20.t.sol:ERC20Test</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">PASS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] testApprove() (gas: 31162)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">PASS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] testBurn() (gas: 59875)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">PASS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] testRevertTransferFromInsufficientAllowance() (gas: 81034)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">PASS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] testRevertTransferFromInsufficientBalance() (gas: 81662)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">PASS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] testRevertTransferInsufficientBalance() (gas: 52882)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">PASS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] testInfiniteApproveTransferFrom() (gas: 90167)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">PASS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] testMetadata() (gas: 14606)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">PASS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] testMint() (gas: 53830)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">PASS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] testTransfer() (gas: 60473)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">PASS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] testTransferFrom() (gas: 84152)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Test result: ok. 10 passed; 0 failed; finished in 2.86ms</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">testBurn() (gas: 0 (0.000%))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">testRevertTransferFromInsufficientAllowance() (gas: 0 (0.000%))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">testRevertTransferFromInsufficientBalance() (gas: 0 (0.000%))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">testRevertTransferInsufficientBalance() (gas: 0 (0.000%))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">testInfiniteApproveTransferFrom() (gas: 0 (0.000%))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">testMetadata() (gas: 0 (0.000%))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">testMint() (gas: 0 (0.000%))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">testTransfer() (gas: 0 (0.000%))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">testTransferFrom() (gas: 0 (0.000%))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">testApprove() (gas: -8 (-0.000%))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Overall gas change: -8 (-0.000%)</span></span></code></pre>\n<p><code>--check</code> will compare a snapshot with an existing snapshot file and display all the\ndifferences, if any. You can change the file to compare against by providing a different file name: <code>--check &lt;FILE_NAME&gt;</code>.</p>\n<p>For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">forge snapshot --check .gas-snapshot2</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Running 10 tests for src/test/ERC20.t.sol:ERC20Test</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">PASS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] testApprove() (gas: 31162)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">PASS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] testBurn() (gas: 59875)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">PASS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] testRevertTransferFromInsufficientAllowance() (gas: 81034)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">PASS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] testRevertTransferFromInsufficientBalance() (gas: 81662)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">PASS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] testRevertTransferInsufficientBalance() (gas: 52882)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">PASS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] testInfiniteApproveTransferFrom() (gas: 90167)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">PASS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] testMetadata() (gas: 14606)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">PASS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] testMint() (gas: 53830)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">PASS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] testTransfer() (gas: 60473)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">PASS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] testTransferFrom() (gas: 84152)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Test result: ok. 10 passed; 0 failed; finished in 2.47ms</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Diff in &quot;ERC20Test::testApprove()&quot;: consumed &quot;(gas: 31162)&quot; gas, expected &quot;(gas: 31170)&quot; gas</span></span></code></pre>","isPage":false,"text":"\nIf you would like to compare the current snapshot file with your\nlatest changes, you can use the --diff or --check options.\n--diff will compare against the snapshot and display changes from the snapshot.\nIt can also optionally take a file name (--diff &lt;FILE_NAME&gt;), with the default\nbeing .gas-snapshot.\nFor example:\nforge snapshot --diff .gas-snapshot2\n \nRunning 10 tests for src/test/ERC20.t.sol:ERC20Test\n[PASS] testApprove() (gas: 31162)\n[PASS] testBurn() (gas: 59875)\n[PASS] testRevertTransferFromInsufficientAllowance() (gas: 81034)\n[PASS] testRevertTransferFromInsufficientBalance() (gas: 81662)\n[PASS] testRevertTransferInsufficientBalance() (gas: 52882)\n[PASS] testInfiniteApproveTransferFrom() (gas: 90167)\n[PASS] testMetadata() (gas: 14606)\n[PASS] testMint() (gas: 53830)\n[PASS] testTransfer() (gas: 60473)\n[PASS] testTransferFrom() (gas: 84152)\nTest result: ok. 10 passed; 0 failed; finished in 2.86ms\ntestBurn() (gas: 0 (0.000%))\ntestRevertTransferFromInsufficientAllowance() (gas: 0 (0.000%))\ntestRevertTransferFromInsufficientBalance() (gas: 0 (0.000%))\ntestRevertTransferInsufficientBalance() (gas: 0 (0.000%))\ntestInfiniteApproveTransferFrom() (gas: 0 (0.000%))\ntestMetadata() (gas: 0 (0.000%))\ntestMint() (gas: 0 (0.000%))\ntestTransfer() (gas: 0 (0.000%))\ntestTransferFrom() (gas: 0 (0.000%))\ntestApprove() (gas: -8 (-0.000%))\nOverall gas change: -8 (-0.000%)\n--check will compare a snapshot with an existing snapshot file and display all the\ndifferences, if any. You can change the file to compare against by providing a different file name: --check &lt;FILE_NAME&gt;.\nFor example:\nforge snapshot --check .gas-snapshot2\n \nRunning 10 tests for src/test/ERC20.t.sol:ERC20Test\n[PASS] testApprove() (gas: 31162)\n[PASS] testBurn() (gas: 59875)\n[PASS] testRevertTransferFromInsufficientAllowance() (gas: 81034)\n[PASS] testRevertTransferFromInsufficientBalance() (gas: 81662)\n[PASS] testRevertTransferInsufficientBalance() (gas: 52882)\n[PASS] testInfiniteApproveTransferFrom() (gas: 90167)\n[PASS] testMetadata() (gas: 14606)\n[PASS] testMint() (gas: 53830)\n[PASS] testTransfer() (gas: 60473)\n[PASS] testTransferFrom() (gas: 84152)\nTest result: ok. 10 passed; 0 failed; finished in 2.47ms\nDiff in &quot;ERC20Test::testApprove()&quot;: consumed &quot;(gas: 31162)&quot; gas, expected &quot;(gas: 31170)&quot; gas","title":"Comparing gas usage","titles":[null,"Gas Function Snapshots"]},"284":{"href":"/forge/gas-tracking/gas-reports#gas-reports","html":"\n<p>Forge can produce gas reports for your contracts. You can configure which contracts output gas reports via the <code>gas_reports</code> field in <code>foundry.toml</code>.</p>\n<p>To produce reports for specific contracts:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">gas_reports = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MyContract&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MyContractFactory&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n<p>To produce reports for all contracts:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">gas_reports = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;*&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n<p>To generate gas reports, run <code>forge test --gas-report</code>.</p>\n<p>You can also use it in combination with other subcommands, such as <code>forge test --match-test testBurn --gas-report</code>, to generate only a gas report relevant to this test.</p>\n<p>Example output:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">╭───────────────────────┬─────────────────┬────────┬────────┬────────┬─────────╮</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ MockERC1155 contract  ┆                 ┆        ┆        ┆        ┆         │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">╞═══════════════════════╪═════════════════╪════════╪════════╪════════╪═════════╡</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ Deployment Cost       ┆ Deployment Size ┆        ┆        ┆        ┆         │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ 1082720               ┆ 5440            ┆        ┆        ┆        ┆         │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ Function Name         ┆ min             ┆ avg    ┆ median ┆ max    ┆ # calls │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ balanceOf             ┆ 596             ┆ 596    ┆ 596    ┆ 596    ┆ 44      │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ balanceOfBatch        ┆ 2363            ┆ 4005   ┆ 4005   ┆ 5647   ┆ 2       │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ batchBurn             ┆ 2126            ┆ 5560   ┆ 2584   ┆ 11970  ┆ 3       │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ batchMint             ┆ 2444            ┆ 135299 ┆ 125081 ┆ 438531 ┆ 18      │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ burn                  ┆ 814             ┆ 2117   ┆ 2117   ┆ 3421   ┆ 2       │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ isApprovedForAll      ┆ 749             ┆ 749    ┆ 749    ┆ 749    ┆ 1       │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ mint                  ┆ 26039           ┆ 31943  ┆ 27685  ┆ 118859 ┆ 22      │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ safeBatchTransferFrom ┆ 2561            ┆ 137750 ┆ 126910 ┆ 461304 ┆ 8       │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ safeTransferFrom      ┆ 1335            ┆ 34505  ┆ 28103  ┆ 139557 ┆ 9       │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ setApprovalForAll     ┆ 24485           ┆ 24485  ┆ 24485  ┆ 24485  ┆ 12      │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">╰───────────────────────┴─────────────────┴────────┴────────┴────────┴─────────╯</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">╭───────────────────────┬─────────────────┬────────┬────────┬────────┬─────────╮</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ Example contract      ┆                 ┆        ┆        ┆        ┆         │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">╞═══════════════════════╪═════════════════╪════════╪════════╪════════╪═════════╡</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ Deployment Cost       ┆ Deployment Size ┆        ┆        ┆        ┆         │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ 1082720               ┆ 5440            ┆        ┆        ┆        ┆         │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ Function Name         ┆ min             ┆ avg    ┆ median ┆ max    ┆ # calls │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ foo                   ┆ 596             ┆ 596    ┆ 596    ┆ 596    ┆ 44      │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ bar                   ┆ 2363            ┆ 4005   ┆ 4005   ┆ 5647   ┆ 2       │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ baz                   ┆ 2126            ┆ 5560   ┆ 2584   ┆ 11970  ┆ 3       │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">╰───────────────────────┴─────────────────┴────────┴────────┴────────┴─────────╯</span></span></code></pre>\n<p>You can also ignore contracts via the <code>gas_reports_ignore</code> field in <code>foundry.toml</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">gas_reports_ignore = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Example&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n<p>This would change the output to:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">╭───────────────────────┬─────────────────┬────────┬────────┬────────┬─────────╮</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ MockERC1155 contract  ┆                 ┆        ┆        ┆        ┆         │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">╞═══════════════════════╪═════════════════╪════════╪════════╪════════╪═════════╡</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ Deployment Cost       ┆ Deployment Size ┆        ┆        ┆        ┆         │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ 1082720               ┆ 5440            ┆        ┆        ┆        ┆         │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ Function Name         ┆ min             ┆ avg    ┆ median ┆ max    ┆ # calls │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ balanceOf             ┆ 596             ┆ 596    ┆ 596    ┆ 596    ┆ 44      │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ balanceOfBatch        ┆ 2363            ┆ 4005   ┆ 4005   ┆ 5647   ┆ 2       │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ batchBurn             ┆ 2126            ┆ 5560   ┆ 2584   ┆ 11970  ┆ 3       │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ batchMint             ┆ 2444            ┆ 135299 ┆ 125081 ┆ 438531 ┆ 18      │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ burn                  ┆ 814             ┆ 2117   ┆ 2117   ┆ 3421   ┆ 2       │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ isApprovedForAll      ┆ 749             ┆ 749    ┆ 749    ┆ 749    ┆ 1       │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ mint                  ┆ 26039           ┆ 31943  ┆ 27685  ┆ 118859 ┆ 22      │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ safeBatchTransferFrom ┆ 2561            ┆ 137750 ┆ 126910 ┆ 461304 ┆ 8       │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ safeTransferFrom      ┆ 1335            ┆ 34505  ┆ 28103  ┆ 139557 ┆ 9       │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│ setApprovalForAll     ┆ 24485           ┆ 24485  ┆ 24485  ┆ 24485  ┆ 12      │</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">╰───────────────────────┴─────────────────┴────────┴────────┴────────┴─────────╯</span></span></code></pre>","isPage":true,"text":"\nForge can produce gas reports for your contracts. You can configure which contracts output gas reports via the gas_reports field in foundry.toml.\nTo produce reports for specific contracts:\ngas_reports = [&quot;MyContract&quot;, &quot;MyContractFactory&quot;]\nTo produce reports for all contracts:\ngas_reports = [&quot;*&quot;]\nTo generate gas reports, run forge test --gas-report.\nYou can also use it in combination with other subcommands, such as forge test --match-test testBurn --gas-report, to generate only a gas report relevant to this test.\nExample output:\n╭───────────────────────┬─────────────────┬────────┬────────┬────────┬─────────╮\n│ MockERC1155 contract  ┆                 ┆        ┆        ┆        ┆         │\n╞═══════════════════════╪═════════════════╪════════╪════════╪════════╪═════════╡\n│ Deployment Cost       ┆ Deployment Size ┆        ┆        ┆        ┆         │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ 1082720               ┆ 5440            ┆        ┆        ┆        ┆         │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ Function Name         ┆ min             ┆ avg    ┆ median ┆ max    ┆ # calls │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ balanceOf             ┆ 596             ┆ 596    ┆ 596    ┆ 596    ┆ 44      │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ balanceOfBatch        ┆ 2363            ┆ 4005   ┆ 4005   ┆ 5647   ┆ 2       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ batchBurn             ┆ 2126            ┆ 5560   ┆ 2584   ┆ 11970  ┆ 3       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ batchMint             ┆ 2444            ┆ 135299 ┆ 125081 ┆ 438531 ┆ 18      │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ burn                  ┆ 814             ┆ 2117   ┆ 2117   ┆ 3421   ┆ 2       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ isApprovedForAll      ┆ 749             ┆ 749    ┆ 749    ┆ 749    ┆ 1       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ mint                  ┆ 26039           ┆ 31943  ┆ 27685  ┆ 118859 ┆ 22      │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ safeBatchTransferFrom ┆ 2561            ┆ 137750 ┆ 126910 ┆ 461304 ┆ 8       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ safeTransferFrom      ┆ 1335            ┆ 34505  ┆ 28103  ┆ 139557 ┆ 9       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ setApprovalForAll     ┆ 24485           ┆ 24485  ┆ 24485  ┆ 24485  ┆ 12      │\n╰───────────────────────┴─────────────────┴────────┴────────┴────────┴─────────╯\n \n╭───────────────────────┬─────────────────┬────────┬────────┬────────┬─────────╮\n│ Example contract      ┆                 ┆        ┆        ┆        ┆         │\n╞═══════════════════════╪═════════════════╪════════╪════════╪════════╪═════════╡\n│ Deployment Cost       ┆ Deployment Size ┆        ┆        ┆        ┆         │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ 1082720               ┆ 5440            ┆        ┆        ┆        ┆         │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ Function Name         ┆ min             ┆ avg    ┆ median ┆ max    ┆ # calls │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ foo                   ┆ 596             ┆ 596    ┆ 596    ┆ 596    ┆ 44      │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ bar                   ┆ 2363            ┆ 4005   ┆ 4005   ┆ 5647   ┆ 2       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ baz                   ┆ 2126            ┆ 5560   ┆ 2584   ┆ 11970  ┆ 3       │\n╰───────────────────────┴─────────────────┴────────┴────────┴────────┴─────────╯\nYou can also ignore contracts via the gas_reports_ignore field in foundry.toml:\ngas_reports_ignore = [&quot;Example&quot;]\nThis would change the output to:\n╭───────────────────────┬─────────────────┬────────┬────────┬────────┬─────────╮\n│ MockERC1155 contract  ┆                 ┆        ┆        ┆        ┆         │\n╞═══════════════════════╪═════════════════╪════════╪════════╪════════╪═════════╡\n│ Deployment Cost       ┆ Deployment Size ┆        ┆        ┆        ┆         │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ 1082720               ┆ 5440            ┆        ┆        ┆        ┆         │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ Function Name         ┆ min             ┆ avg    ┆ median ┆ max    ┆ # calls │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ balanceOf             ┆ 596             ┆ 596    ┆ 596    ┆ 596    ┆ 44      │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ balanceOfBatch        ┆ 2363            ┆ 4005   ┆ 4005   ┆ 5647   ┆ 2       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ batchBurn             ┆ 2126            ┆ 5560   ┆ 2584   ┆ 11970  ┆ 3       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ batchMint             ┆ 2444            ┆ 135299 ┆ 125081 ┆ 438531 ┆ 18      │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ burn                  ┆ 814             ┆ 2117   ┆ 2117   ┆ 3421   ┆ 2       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ isApprovedForAll      ┆ 749             ┆ 749    ┆ 749    ┆ 749    ┆ 1       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ mint                  ┆ 26039           ┆ 31943  ┆ 27685  ┆ 118859 ┆ 22      │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ safeBatchTransferFrom ┆ 2561            ┆ 137750 ┆ 126910 ┆ 461304 ┆ 8       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ safeTransferFrom      ┆ 1335            ┆ 34505  ┆ 28103  ┆ 139557 ┆ 9       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ setApprovalForAll     ┆ 24485           ┆ 24485  ┆ 24485  ┆ 24485  ┆ 12      │\n╰───────────────────────┴─────────────────┴────────┴────────┴────────┴─────────╯","title":"Gas Reports","titles":[null]},"285":{"href":"/forge/gas-tracking/overview#gas-tracking","html":"\n<p>Forge can help you estimate how much gas your contract will consume.</p>\n<p>Currently, Forge ships with three different tools for this job:</p>\n<ul>\n<li><a href=\"/forge/gas-tracking/gas-reports\"><strong>Gas reports</strong></a>: Gas reports give you an overview of how much Forge thinks the\nindividual functions in your contracts will consume in gas.</li>\n<li><a href=\"/forge/gas-tracking/gas-function-snapshots\"><strong>Gas function snapshots</strong></a>: Gas function snapshots give you an overview of how much\neach test function consumes in gas.</li>\n<li><a href=\"/forge/gas-tracking/gas-section-snapshots\"><strong>Gas section snapshots</strong></a>: Gas section snapshots give you the ability to capture gas usage over arbitrary sections inside of test functions.\nThis also tracks internal gas usage. You can access this by using the <code>snapshotGas*</code> cheatcodes inside your tests.</li>\n</ul>\n<p>Gas reports, gas function snapshots and gas section snapshots differ in some ways:</p>\n<ul>\n<li>Gas reports use tracing to figure out gas costs for individual contract calls.<br/>\nThis gives more granular insight, at the cost of speed.</li>\n<li>Gas function snapshots have more built-in tools, such as diffs and exporting the results to a file.\nSnapshots are not as granular as gas reports, but they are faster to generate.</li>\n<li>Gas section snapshots provides the most granular way to capture gas usage. Every captured gas snapshot is written to a file in a <code>snapshots</code> directory.\nBy default these snapshots are grouped by the contract name of the test.</li>\n</ul>","isPage":true,"text":"\nForge can help you estimate how much gas your contract will consume.\nCurrently, Forge ships with three different tools for this job:\n\nGas reports: Gas reports give you an overview of how much Forge thinks the\nindividual functions in your contracts will consume in gas.\nGas function snapshots: Gas function snapshots give you an overview of how much\neach test function consumes in gas.\nGas section snapshots: Gas section snapshots give you the ability to capture gas usage over arbitrary sections inside of test functions.\nThis also tracks internal gas usage. You can access this by using the snapshotGas* cheatcodes inside your tests.\n\nGas reports, gas function snapshots and gas section snapshots differ in some ways:\n\nGas reports use tracing to figure out gas costs for individual contract calls.\nThis gives more granular insight, at the cost of speed.\nGas function snapshots have more built-in tools, such as diffs and exporting the results to a file.\nSnapshots are not as granular as gas reports, but they are faster to generate.\nGas section snapshots provides the most granular way to capture gas usage. Every captured gas snapshot is written to a file in a snapshots directory.\nBy default these snapshots are grouped by the contract name of the test.\n","title":"Gas Tracking","titles":[null]},"286":{"href":"/forge/reference/README#forge-commands","html":"\n<ul>\n<li><a href=\"/forge/reference/general-commands.mdx\">General Commands</a></li>\n<li><a href=\"/forge/reference/project-commands.mdx\">Project Commands</a></li>\n<li><a href=\"/forge/reference/build-commands.mdx\">Build Commands</a></li>\n<li><a href=\"/forge/reference/test-commands.mdx\">Test Commands</a></li>\n<li><a href=\"/forge/reference/deploy-commands.mdx\">Deploy Commands</a></li>\n<li><a href=\"/forge/reference/utility-commands.mdx\">Utility Commands</a></li>\n</ul>","isPage":true,"text":"\n\nGeneral Commands\nProject Commands\nBuild Commands\nTest Commands\nDeploy Commands\nUtility Commands\n","title":"forge Commands","titles":[null]},"287":{"href":"/forge/reference/build-commands#build-commands","html":"\n<ul>\n<li><a href=\"/forge/reference/forge-build.mdx\">forge build</a></li>\n<li><a href=\"/forge/reference/forge-clean.mdx\">forge clean</a></li>\n<li><a href=\"/forge/reference/forge-inspect.mdx\">forge inspect</a></li>\n</ul>","isPage":true,"text":"\n\nforge build\nforge clean\nforge inspect\n","title":"Build Commands","titles":[null]},"288":{"href":"/forge/reference/common-options#common-options","html":"\n<p><code>-h</code><br/>\n<code>--help</code><br/>\n    Prints help information.</p>","isPage":true,"text":"\n-h\n--help\n    Prints help information.","title":"Common Options","titles":[null,null,null]},"289":{"href":"/forge/reference/compiler-options#compiler-options","html":"\n<p><code>--optimize</code><br/>\n    Activate the Solidity optimizer.</p>\n<p><code>--optimizer-runs</code> <em>runs</em><br/>\n    The number of optimizer runs.</p>\n<p><code>--via-ir</code><br/>\n    Use the Yul intermediate representation compilation pipeline.</p>\n<p><code>--revert-strings</code><br/>\n    How to treat revert and require reason strings.</p>\n<p><code>--use</code> <em>solc_version</em><br/>\n    Specify the solc version, or a path to a local solc, to build with.</p>\n<p>    Valid values are in the format <code>x.y.z</code>, <code>solc:x.y.z</code> or <code>path/to/solc</code>.</p>\n<p><code>--offline</code><br/>\n    Do not access the network. Missing solc versions will not be installed.</p>\n<p><code>--no-auto-detect</code><br/>\n    Do not auto-detect solc.</p>\n<p><code>--ignored-error-codes</code> <em>error_codes</em><br/>\n    Ignore solc warnings by error code. The parameter is a comma-separated list of error codes.</p>\n<p><code>--extra-output</code> <em>selector</em><br/>\n    Extra output to include in the contract&#x27;s artifact.</p>\n<p>    Example keys: <code>abi</code>, <code>storageLayout</code>, <code>evm.assembly</code>, <code>ewasm</code>, <code>ir</code>, <code>ir-optimized</code>, <code>metadata</code>.</p>\n<p>    For a full description, see the <a href=\"https://docs.soliditylang.org/en/latest/using-the-compiler.html#compiler-api\">Solidity docs</a>.</p>\n<p><code>--extra-output-files</code> <em>selector</em><br/>\n    Extra output to write to separate files.</p>\n<p>    Example keys: <code>abi</code>, <code>storageLayout</code>, <code>evm.assembly</code>, <code>ewasm</code>, <code>ir</code>, <code>ir-optimized</code>, <code>metadata</code>.</p>\n<p>    For a full description, see the <a href=\"https://docs.soliditylang.org/en/latest/using-the-compiler.html#compiler-api\">Solidity docs</a>.</p>\n<p><code>--evm-version</code> <em>version</em><br/>\n    The target EVM version.</p>","isPage":true,"text":"\n--optimize\n    Activate the Solidity optimizer.\n--optimizer-runs runs\n    The number of optimizer runs.\n--via-ir\n    Use the Yul intermediate representation compilation pipeline.\n--revert-strings\n    How to treat revert and require reason strings.\n--use solc_version\n    Specify the solc version, or a path to a local solc, to build with.\n    Valid values are in the format x.y.z, solc:x.y.z or path/to/solc.\n--offline\n    Do not access the network. Missing solc versions will not be installed.\n--no-auto-detect\n    Do not auto-detect solc.\n--ignored-error-codes error_codes\n    Ignore solc warnings by error code. The parameter is a comma-separated list of error codes.\n--extra-output selector\n    Extra output to include in the contract&#x27;s artifact.\n    Example keys: abi, storageLayout, evm.assembly, ewasm, ir, ir-optimized, metadata.\n    For a full description, see the Solidity docs.\n--extra-output-files selector\n    Extra output to write to separate files.\n    Example keys: abi, storageLayout, evm.assembly, ewasm, ir, ir-optimized, metadata.\n    For a full description, see the Solidity docs.\n--evm-version version\n    The target EVM version.","title":"Compiler Options","titles":[null,null,null]},"290":{"href":"/forge/reference/deploy-commands#deploy-commands","html":"\n<ul>\n<li><a href=\"/forge/reference/forge-create.mdx\">forge create</a></li>\n<li><a href=\"/forge/reference/forge-verify-contract.mdx\">forge verify-contract</a></li>\n<li><a href=\"/forge/reference/forge-verify-check.mdx\">forge verify-check</a></li>\n<li><a href=\"/forge/reference/forge-flatten.mdx\">forge flatten</a></li>\n</ul>","isPage":true,"text":"\n\nforge create\nforge verify-contract\nforge verify-check\nforge flatten\n","title":"Deploy Commands","titles":[null]},"291":{"href":"/forge/reference/evm-options#evm-options","html":"\n<p><code>-f</code> <em>url</em><br/>\n<code>--rpc-url</code> <em>url</em><br/>\n<code>--fork-url</code> <em>url</em><br/>\n    Fetch state over a remote endpoint instead of starting from an empty state.</p>\n<p>    In most cases, <code>--rpc-url</code> is preferred for specifying network connections, including custom chains.</p>\n<p>    If you want to fetch state from a specific block number, see\n<code>--fork-block-number</code>.</p>\n<p><code>--fork-block-number</code> <em>block</em><br/>\n    Fetch state from a specific block number over a remote endpoint. See <code>--fork-url</code>.</p>\n<p><code>--fork-retry-backoff &lt;BACKOFF&gt;</code><br/>\n     Initial retry backoff on encountering errors.</p>\n<p><code>--no-storage-caching</code><br/>\n    Explicitly disables the use of RPC caching.</p>\n<p>    All storage slots are read entirely from the endpoint. See <code>--fork-url</code>.</p>\n<p><code>-v</code><br/>\n<code>--verbosity</code><br/>\n    Verbosity of the EVM.</p>\n<p>    Pass multiple times to increase the verbosity (e.g. <code>-v</code>, <code>-vv</code>, <code>-vvv</code>).</p>\n<p>    Verbosity levels:<br/>\n    - 2: Print logs for all tests<br/>\n    - 3: Print execution traces for failing tests<br/>\n    - 4: Print execution traces for all tests, and setup traces for failing tests<br/>\n    - 5: Print execution and setup traces for all tests</p>\n<p><code>--sender</code> <em>address</em><br/>\n    The address which will be executing tests</p>\n<p><code>--initial-balance</code> <em>balance</em><br/>\n    The initial balance of deployed contracts</p>\n<p><code>--ffi</code><br/>\n    Enables the <a href=\"../../cheatcodes/ffi.md\">FFI cheatcode</a></p>","isPage":true,"text":"\n-f url\n--rpc-url url\n--fork-url url\n    Fetch state over a remote endpoint instead of starting from an empty state.\n    In most cases, --rpc-url is preferred for specifying network connections, including custom chains.\n    If you want to fetch state from a specific block number, see\n--fork-block-number.\n--fork-block-number block\n    Fetch state from a specific block number over a remote endpoint. See --fork-url.\n--fork-retry-backoff &lt;BACKOFF&gt;\n     Initial retry backoff on encountering errors.\n--no-storage-caching\n    Explicitly disables the use of RPC caching.\n    All storage slots are read entirely from the endpoint. See --fork-url.\n-v\n--verbosity\n    Verbosity of the EVM.\n    Pass multiple times to increase the verbosity (e.g. -v, -vv, -vvv).\n    Verbosity levels:\n    - 2: Print logs for all tests\n    - 3: Print execution traces for failing tests\n    - 4: Print execution traces for all tests, and setup traces for failing tests\n    - 5: Print execution and setup traces for all tests\n--sender address\n    The address which will be executing tests\n--initial-balance balance\n    The initial balance of deployed contracts\n--ffi\n    Enables the FFI cheatcode","title":"EVM Options","titles":[null,null,null]},"292":{"href":"/forge/reference/executor-options#executor-options","html":"\n<p><code>--base-fee &lt;FEE&gt;</code><br/>\n<code>--block-base-fee-per-gas &lt;FEE&gt;</code><br/>\n    The base fee in a block (in wei).</p>\n<p><code>--block-coinbase</code> <em>address</em><br/>\n    The coinbase of the block.</p>\n<p><code>--block-difficulty</code> <em>difficulty</em><br/>\n    The block difficulty.</p>\n<p><code>--block-gas-limit</code> <em>gas_limit</em><br/>\n    The block gas limit.</p>\n<p><code>--block-number</code> <em>block</em><br/>\n    The block number.</p>\n<p><code>--block-timestamp</code> <em>timestamp</em><br/>\n    The timestamp of the block (in seconds).</p>\n<p><code>--chain-id</code> <em>chain_id</em><br/>\n    The chain ID.</p>\n<p><code>--gas-limit</code> <em>gas_limit</em><br/>\n    The block gas limit.</p>\n<p><code>--gas-price</code> <em>gas_price</em><br/>\n    The gas price (in wei).</p>\n<p><code>--tx-origin</code> <em>address</em><br/>\n    The transaction origin.</p>","isPage":true,"text":"\n--base-fee &lt;FEE&gt;\n--block-base-fee-per-gas &lt;FEE&gt;\n    The base fee in a block (in wei).\n--block-coinbase address\n    The coinbase of the block.\n--block-difficulty difficulty\n    The block difficulty.\n--block-gas-limit gas_limit\n    The block gas limit.\n--block-number block\n    The block number.\n--block-timestamp timestamp\n    The timestamp of the block (in seconds).\n--chain-id chain_id\n    The chain ID.\n--gas-limit gas_limit\n    The block gas limit.\n--gas-price gas_price\n    The gas price (in wei).\n--tx-origin address\n    The transaction origin.","title":"Executor Options","titles":[null,null,null]},"293":{"href":"/forge/reference/forge-help#forge-help","html":"\n","isPage":true,"text":"\n","title":"forge help","titles":[null]},"294":{"href":"/forge/reference/forge-help#name","html":"\n<p>forge-help - Get help for a Forge command</p>\n","isPage":false,"text":"\nforge-help - Get help for a Forge command\n","title":"NAME","titles":[null,"forge help"]},"295":{"href":"/forge/reference/forge-help#synopsis","html":"\n<p><code>forge help</code> [<em>subcommand</em>]</p>\n","isPage":false,"text":"\nforge help [subcommand]\n","title":"SYNOPSIS","titles":[null,"forge help"]},"296":{"href":"/forge/reference/forge-help#description","html":"\n<p>Prints a help message for the given command.</p>\n","isPage":false,"text":"\nPrints a help message for the given command.\n","title":"DESCRIPTION","titles":[null,"forge help"]},"297":{"href":"/forge/reference/forge-help#examples","html":"\n<ol>\n<li>\n<p>Get help for a command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> help</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span></span></code></pre>\n</li>\n<li>\n<p>Help is also available with the <code>--help</code> flag:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --help</span></span></code></pre>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nGet help for a command:\nforge help build\n\n\nHelp is also available with the --help flag:\nforge build --help\n\n\n","title":"EXAMPLES","titles":[null,"forge help"]},"298":{"href":"/forge/reference/forge-help#see-also","html":"\n<p><a href=\"/forge/reference/overview\">forge</a></p>","isPage":false,"text":"\nforge","title":"SEE ALSO","titles":[null,"forge help"]},"299":{"href":"/forge/reference/forge-lint#forge-lint","html":"\n","isPage":true,"text":"\n","title":"forge lint","titles":[null]},"300":{"href":"/forge/reference/forge-lint#name","html":"\n<p>forge-lint – Lint Solidity source files.</p>\n","isPage":false,"text":"\nforge-lint – Lint Solidity source files.\n","title":"NAME","titles":[null,"forge lint"]},"301":{"href":"/forge/reference/forge-lint#synopsis","html":"\n<p><code>forge lint</code> [<em>options</em>] [<em>path</em>]...</p>\n","isPage":false,"text":"\nforge lint [options] [path]...\n","title":"SYNOPSIS","titles":[null,"forge lint"]},"302":{"href":"/forge/reference/forge-lint#description","html":"\n<p>Analyzes Solidity source files for style, correctness, and best practices by running a configurable set of lints. Supports filtering by lint severity and specific lint identifiers. Can output results in a JSON format compatible with <code>rustc</code>.</p>\n","isPage":false,"text":"\nAnalyzes Solidity source files for style, correctness, and best practices by running a configurable set of lints. Supports filtering by lint severity and specific lint identifiers. Can output results in a JSON format compatible with rustc.\n","title":"DESCRIPTION","titles":[null,"forge lint"]},"303":{"href":"/forge/reference/forge-lint#options","html":"\n<p><code>[PATH]...</code>\n    Paths to the Solidity files or directories to be checked. Overrides the <code>ignore</code> project config. If omitted, all source files in the project are linted.</p>\n<p><code>--root</code> <em>path</em>\n    The project&#x27;s root path. By default, this is the root directory of the current git repository, or the current working directory.</p>\n<p><code>--severity</code> <em>severity</em>...\n    Specifies which lints to run based on severity. Overrides the <code>severity</code> project config.\n    Supported values: <code>high</code>, <code>med</code>, <code>low</code>, <code>info</code>, <code>gas</code>.</p>\n<p><code>--only-lint</code> <em>lint_id</em>...\n    Specifies which lints to run by their ID (e.g., <code>incorrect-shift</code>). Overrides the <code>exclude_lints</code> project config.</p>\n<p><code>--json</code>\n    Activates the linter&#x27;s JSON formatter (rustc-compatible).</p>\n","isPage":false,"text":"\n[PATH]...\n    Paths to the Solidity files or directories to be checked. Overrides the ignore project config. If omitted, all source files in the project are linted.\n--root path\n    The project&#x27;s root path. By default, this is the root directory of the current git repository, or the current working directory.\n--severity severity...\n    Specifies which lints to run based on severity. Overrides the severity project config.\n    Supported values: high, med, low, info, gas.\n--only-lint lint_id...\n    Specifies which lints to run by their ID (e.g., incorrect-shift). Overrides the exclude_lints project config.\n--json\n    Activates the linter&#x27;s JSON formatter (rustc-compatible).\n","title":"OPTIONS","titles":[null,"forge lint"]},"304":{"href":"/forge/reference/forge-lint#examples","html":"\n<ol>\n<li>\n<p>Lint all Solidity files in the project:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> lint</span></span></code></pre>\n</li>\n<li>\n<p>Lint only files in a specific directory:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> lint</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> src/contracts/</span></span></code></pre>\n</li>\n<li>\n<p>Lint with only <code>high</code> and <code>gas</code> severity lints:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> lint</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --severity</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> high</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --severity</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> gas</span></span></code></pre>\n</li>\n<li>\n<p>Lint with specific lint ID and output as JSON:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> lint</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --only-lint</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> incorrect-shift</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --json</span></span></code></pre>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nLint all Solidity files in the project:\nforge lint\n\n\nLint only files in a specific directory:\nforge lint src/contracts/\n\n\nLint with only high and gas severity lints:\nforge lint --severity high --severity gas\n\n\nLint with specific lint ID and output as JSON:\nforge lint --only-lint incorrect-shift --json\n\n\n","title":"EXAMPLES","titles":[null,"forge lint"]},"305":{"href":"/forge/reference/forge-lint#supported-lints","html":"\n<p>This section details the lints supported by <code>forge lint</code>. Each lint includes an ID, a description of the issue it checks for, its severity, and examples of incorrect and correct code.</p>\n","isPage":false,"text":"\nThis section details the lints supported by forge lint. Each lint includes an ID, a description of the issue it checks for, its severity, and examples of incorrect and correct code.\n","title":"SUPPORTED LINTS","titles":[null,"forge lint"]},"306":{"href":"/forge/reference/forge-lint#high-severity","html":"\n","isPage":false,"text":"\n","title":"High Severity","titles":[null,"forge lint","SUPPORTED LINTS"]},"307":{"href":"/forge/reference/forge-lint#incorrect-shift","html":"\n<p>Warns against shift operations where the operands might be in an unconventional or potentially erroneous order, specifically when a literal is shifted by a non-literal.</p>\n<p>In Solidity, bitwise shift operations (<code>&lt;&lt;</code> for left shift, <code>&gt;&gt;</code> for right shift) take the value to be shifted as the left operand and the number of bits to shift as the right operand.</p>\n<p>This lint rule uses a heuristic to flag potentially incorrect shift oferations. To do so, it identifies expressions where literal is shifted by a variable, which can often be an indication of a logical error where the operands were intended to be reversed. If that was indeed intended, it is recommended to replace literals by constants. Alternatively, the lint rule can be disabled.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// SPDX-License-Identifier: MIT</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ^0.8.0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> IncorrectShift</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> const LARGE_NUM </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> foo </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> correct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> view</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Shifting &#x27;foo&#x27; by a literal &#x27;2&#x27;.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> foo </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Shifting a const &#x27;LARGE_NUM&#x27; by a variable &#x27;foo&#x27;.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> LARGE_NUM </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> foo;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> incorrect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> view</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Shifting a literal &#x27;2&#x27; by a variable &#x27;foo&#x27;. This is likely an error.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> foo;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>To disable this lint for your project, you can add its ID to the <code>exclude_lints</code> array within the <code>[lint]</code> section of the <code>foundry.toml</code> configuration file:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">lint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># ... rest of lint config ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">exclude_lints = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;incorrect-shift&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n<p>Alternatively, you can also disable this individual occurrence using <a href=\"/config/reference/linter#inline-configuration\">inline configuration</a>.</p>\n","isPage":false,"text":"\nWarns against shift operations where the operands might be in an unconventional or potentially erroneous order, specifically when a literal is shifted by a non-literal.\nIn Solidity, bitwise shift operations (&lt;&lt; for left shift, &gt;&gt; for right shift) take the value to be shifted as the left operand and the number of bits to shift as the right operand.\nThis lint rule uses a heuristic to flag potentially incorrect shift oferations. To do so, it identifies expressions where literal is shifted by a variable, which can often be an indication of a logical error where the operands were intended to be reversed. If that was indeed intended, it is recommended to replace literals by constants. Alternatively, the lint rule can be disabled.\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n \ncontract IncorrectShift {\n    uint64 const LARGE_NUM = 1 ether;\n    uint256 foo = 100;\n \n    function correct() public view returns (uint256) {\n        // Shifting &#x27;foo&#x27; by a literal &#x27;2&#x27;.\n        return foo &lt;&lt; 2;\n \n        // Shifting a const &#x27;LARGE_NUM&#x27; by a variable &#x27;foo&#x27;.\n        return LARGE_NUM &lt;&lt; foo;\n    }\n \n    function incorrect() public view returns (uint256) {\n        // Shifting a literal &#x27;2&#x27; by a variable &#x27;foo&#x27;. This is likely an error.\n        return 2 &lt;&lt; foo;\n    }\n}\nTo disable this lint for your project, you can add its ID to the exclude_lints array within the [lint] section of the foundry.toml configuration file:\n[lint]\n# ... rest of lint config ...\nexclude_lints = [&quot;incorrect-shift&quot;]\nAlternatively, you can also disable this individual occurrence using inline configuration.\n","title":"incorrect-shift","titles":[null,"forge lint","SUPPORTED LINTS","High Severity"]},"308":{"href":"/forge/reference/forge-lint#unchecked-call","html":"\n<p>Warns when low-level calls (<code>.call()</code>, <code>.delegatecall()</code>, <code>.staticcall()</code>) do not check the success return value.</p>\n<p>Low-level calls in Solidity return a tuple <code>(bool success, bytes memory data)</code>. Not checking the <code>success</code> value can lead to silent failures where the called function reverts but execution continues, potentially resulting in unexpected behavior or security vulnerabilities.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// SPDX-License-Identifier: MIT</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ^0.8.0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> UncheckedCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> correct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> success, ) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(target).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(success, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Call failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Or using if statement</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ok, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(target).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeWithSignature</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;foo()&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ok) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">revert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Call failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> incorrect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Unchecked call - success value is ignored</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(target).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Unchecked call - only data is used</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        (, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(target).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>To disable this lint for your project, you can add its ID to the <code>exclude_lints</code> array within the <code>[lint]</code> section of the <code>foundry.toml</code> configuration file:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">lint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># ... rest of lint config ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">exclude_lints = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;unchecked-call&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n<p>Alternatively, you can also disable this individual occurrence using <a href=\"/config/reference/linter#inline-configuration\">inline configuration</a>.</p>\n","isPage":false,"text":"\nWarns when low-level calls (.call(), .delegatecall(), .staticcall()) do not check the success return value.\nLow-level calls in Solidity return a tuple (bool success, bytes memory data). Not checking the success value can lead to silent failures where the called function reverts but execution continues, potentially resulting in unexpected behavior or security vulnerabilities.\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n \ncontract UncheckedCall {\n    function correct() public {\n        (bool success, ) = address(target).call(&quot;&quot;);\n        require(success, &quot;Call failed&quot;);\n \n        // Or using if statement\n        (bool ok, bytes memory data) = address(target).call(abi.encodeWithSignature(&quot;foo()&quot;));\n        if (!ok) revert(&quot;Call failed&quot;);\n    }\n \n    function incorrect() public {\n        // Unchecked call - success value is ignored\n        address(target).call(&quot;&quot;);\n \n        // Unchecked call - only data is used\n        (, bytes memory data) = address(target).call(&quot;&quot;);\n    }\n}\nTo disable this lint for your project, you can add its ID to the exclude_lints array within the [lint] section of the foundry.toml configuration file:\n[lint]\n# ... rest of lint config ...\nexclude_lints = [&quot;unchecked-call&quot;]\nAlternatively, you can also disable this individual occurrence using inline configuration.\n","title":"unchecked-call","titles":[null,"forge lint","SUPPORTED LINTS","High Severity"]},"309":{"href":"/forge/reference/forge-lint#erc20-unchecked-transfer","html":"\n<p>Warns when ERC20 <code>transfer</code> or <code>transferFrom</code> calls do not check the return value.</p>\n<p>While the ERC20 standard specifies that these functions should return a boolean indicating success, not all implementations follow this pattern correctly. Some tokens revert on failure, while others return false. Not checking the return value can lead to situations where a transfer fails silently, causing loss of funds or incorrect contract state.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// SPDX-License-Identifier: MIT</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ^0.8.0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ERC20UncheckedTransfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    IERC20 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> correct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Check return value with require</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(recipient, amount), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Transfer failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Or capture and check explicitly</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> success </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transferFrom</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(sender, recipient, amount);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">success) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">revert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Transfer failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> incorrect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Unchecked transfer - return value ignored</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(recipient, amount);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Unchecked transferFrom - return value ignored</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transferFrom</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(sender, recipient, amount);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>To disable this lint for your project, you can add its ID to the <code>exclude_lints</code> array within the <code>[lint]</code> section of the <code>foundry.toml</code> configuration file:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">lint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># ... rest of lint config ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">exclude_lints = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;erc20-unchecked-transfer&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n<p>Note that this lint could fire false positives, as it only checks the function name, but it doesn&#x27;t ensure that the called address is an ERC20 contract. Because of that, you may have to disable individual occurrences using <a href=\"/config/reference/linter#inline-configuration\">inline configuration</a>.</p>\n","isPage":false,"text":"\nWarns when ERC20 transfer or transferFrom calls do not check the return value.\nWhile the ERC20 standard specifies that these functions should return a boolean indicating success, not all implementations follow this pattern correctly. Some tokens revert on failure, while others return false. Not checking the return value can lead to situations where a transfer fails silently, causing loss of funds or incorrect contract state.\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n \ncontract ERC20UncheckedTransfer {\n    IERC20 public token;\n \n    function correct() public {\n        // Check return value with require\n        require(token.transfer(recipient, amount), &quot;Transfer failed&quot;);\n \n        // Or capture and check explicitly\n        bool success = token.transferFrom(sender, recipient, amount);\n        if (!success) revert(&quot;Transfer failed&quot;);\n    }\n \n    function incorrect() public {\n        // Unchecked transfer - return value ignored\n        token.transfer(recipient, amount);\n \n        // Unchecked transferFrom - return value ignored\n        token.transferFrom(sender, recipient, amount);\n    }\n}\nTo disable this lint for your project, you can add its ID to the exclude_lints array within the [lint] section of the foundry.toml configuration file:\n[lint]\n# ... rest of lint config ...\nexclude_lints = [&quot;erc20-unchecked-transfer&quot;]\nNote that this lint could fire false positives, as it only checks the function name, but it doesn&#x27;t ensure that the called address is an ERC20 contract. Because of that, you may have to disable individual occurrences using inline configuration.\n","title":"erc20-unchecked-transfer","titles":[null,"forge lint","SUPPORTED LINTS","High Severity"]},"310":{"href":"/forge/reference/forge-lint#medium-severity","html":"\n","isPage":false,"text":"\n","title":"Medium Severity","titles":[null,"forge lint","SUPPORTED LINTS"]},"311":{"href":"/forge/reference/forge-lint#divide-before-multiply","html":"\n<p>Warns against performing division before multiplication within the same expression, especially with integer arithmetic.</p>\n<p>In Solidity, integer division truncates (rounds down towards zero).\nPerforming division before multiplication can lead to a loss of precision that might be unintended and could have been avoided by reordering operations.\nFor example, <code>(a / b) * c</code> might result in <code>0</code> if <code>a &lt; b</code>, even if <code>(a * c) / b</code> would have yielded a non-zero result.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// SPDX-License-Identifier: MIT</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ^0.8.0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> DivideBeforeMultiply</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> correct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Results in 1.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> incorrect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> /</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Results in 0.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>To disable this lint for your project, you can add its ID to the <code>exclude_lints</code> array within the <code>[lint]</code> section of the <code>foundry.toml</code> configuration file:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">lint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># ... rest of lint config ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">exclude_lints = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;divide-before-multiply&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n<p>Alternatively, you can also disable this individual occurrence using <a href=\"/config/reference/linter#inline-configuration\">inline configuration</a>.</p>\n","isPage":false,"text":"\nWarns against performing division before multiplication within the same expression, especially with integer arithmetic.\nIn Solidity, integer division truncates (rounds down towards zero).\nPerforming division before multiplication can lead to a loss of precision that might be unintended and could have been avoided by reordering operations.\nFor example, (a / b) * c might result in 0 if a &lt; b, even if (a * c) / b would have yielded a non-zero result.\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n \ncontract DivideBeforeMultiply {\n    function correct() public pure returns (uint256) {\n        return (1 * 3) / 2; // Results in 1.\n    }\n \n    function incorrect() public pure returns (uint256) {\n        return (1 / 2) * 3; // Results in 0.\n    }\n}\nTo disable this lint for your project, you can add its ID to the exclude_lints array within the [lint] section of the foundry.toml configuration file:\n[lint]\n# ... rest of lint config ...\nexclude_lints = [&quot;divide-before-multiply&quot;]\nAlternatively, you can also disable this individual occurrence using inline configuration.\n","title":"divide-before-multiply","titles":[null,"forge lint","SUPPORTED LINTS","Medium Severity"]},"312":{"href":"/forge/reference/forge-lint#informational--style-guide","html":"\n","isPage":false,"text":"\n","title":"Informational / Style Guide","titles":[null,"forge lint","SUPPORTED LINTS"]},"313":{"href":"/forge/reference/forge-lint#pascal-case-struct","html":"\n<p>Ensures that struct names adhere to <code>PascalCase</code> (e.g., <code>MyStruct</code>) convention. This is a common styling guideline in Solidity to improve code readability and maintain consistency.</p>\n<p>Useful resources: <a href=\"https://docs.soliditylang.org/en/latest/style-guide.html#struct-names\">Solidity Style Guide - Struct Names</a></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// SPDX-License-Identifier: MIT</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ^0.8.0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PascalCaseStruct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Correct</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyStruct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Incorrect</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> my_struct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> myStruct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>To disable this lint for your project, you can add its ID to the <code>exclude_lints</code> array within the <code>[lint]</code> section of the <code>foundry.toml</code> configuration file:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">lint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># ... rest of lint config ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">exclude_lints = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;pascal-case-struct&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n<p>Alternatively, you can also disable this individual occurrence using <a href=\"/config/reference/linter#inline-configuration\">inline configuration</a>.</p>\n","isPage":false,"text":"\nEnsures that struct names adhere to PascalCase (e.g., MyStruct) convention. This is a common styling guideline in Solidity to improve code readability and maintain consistency.\nUseful resources: Solidity Style Guide - Struct Names\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n \ncontract PascalCaseStruct {\n    // Correct\n    struct MyStruct {\n        uint256 data;\n    }\n \n    // Incorrect\n    struct my_struct {\n        uint256 data;\n    }\n    struct myStruct {\n        uint256 data;\n    }\n}\nTo disable this lint for your project, you can add its ID to the exclude_lints array within the [lint] section of the foundry.toml configuration file:\n[lint]\n# ... rest of lint config ...\nexclude_lints = [&quot;pascal-case-struct&quot;]\nAlternatively, you can also disable this individual occurrence using inline configuration.\n","title":"pascal-case-struct","titles":[null,"forge lint","SUPPORTED LINTS","Informational / Style Guide"]},"314":{"href":"/forge/reference/forge-lint#mixed-case-function","html":"\n<p>Ensures that function names adhere to <code>mixedCase</code> (e.g., <code>myFunction</code>) convention. This helps in differentiate functions from other identifiers like structs or events and is a standard practice.</p>\n<p>Useful resources: <a href=\"https://docs.soliditylang.org/en/latest/style-guide.html#function-names\">Solidity Style Guide - Function Names</a></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// SPDX-License-Identifier: MIT</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ^0.8.0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MixedCaseFunction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Correct</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> myFunction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Incorrect</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> MyFunction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> my_function</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>To disable this lint for your project, you can add its ID to the <code>exclude_lints</code> array within the <code>[lint]</code> section of the <code>foundry.toml</code> configuration file:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">lint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># ... rest of lint config ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">exclude_lints = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;mixed-case-function&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n<p>Alternatively, you can also disable this individual occurrence using <a href=\"/config/reference/linter#inline-configuration\">inline configuration</a>.</p>\n","isPage":false,"text":"\nEnsures that function names adhere to mixedCase (e.g., myFunction) convention. This helps in differentiate functions from other identifiers like structs or events and is a standard practice.\nUseful resources: Solidity Style Guide - Function Names\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n \ncontract MixedCaseFunction {\n    // Correct\n    function myFunction() public pure returns (uint256) {\n        return 1;\n    }\n \n    // Incorrect\n    function MyFunction() public pure returns (uint256) {\n        return 1;\n    }\n    function my_function() public pure returns (uint256) {\n        return 1;\n    }\n}\nTo disable this lint for your project, you can add its ID to the exclude_lints array within the [lint] section of the foundry.toml configuration file:\n[lint]\n# ... rest of lint config ...\nexclude_lints = [&quot;mixed-case-function&quot;]\nAlternatively, you can also disable this individual occurrence using inline configuration.\n","title":"mixed-case-function","titles":[null,"forge lint","SUPPORTED LINTS","Informational / Style Guide"]},"315":{"href":"/forge/reference/forge-lint#mixed-case-variable","html":"\n<p>Ensures that mutable variable names (local variables and state variables that are not <code>constant</code> or <code>immutable</code>) adhere to <code>mixedCase</code> (e.g., <code>myVariable</code>) convention. This aligns with the general Solidity style for variable naming.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// SPDX-License-Identifier: MIT</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ^0.8.0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MixedCaseVariable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Correct</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateVariable;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> correct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> localVariable </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Incorrect</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state_variable;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> incorrect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> local_variable </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>To disable this lint for your project, you can add its ID to the <code>exclude_lints</code> array within the <code>[lint]</code> section of the <code>foundry.toml</code> configuration file:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">lint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># ... rest of lint config ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">exclude_lints = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;mixed-case-variable&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n<p>Alternatively, you can also disable this individual occurrence using <a href=\"/config/reference/linter#inline-configuration\">inline configuration</a>.</p>\n","isPage":false,"text":"\nEnsures that mutable variable names (local variables and state variables that are not constant or immutable) adhere to mixedCase (e.g., myVariable) convention. This aligns with the general Solidity style for variable naming.\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n \ncontract MixedCaseVariable {\n    // Correct\n    uint256 stateVariable;\n \n    function correct() public {\n        uint256 localVariable = 10;\n    }\n \n    // Incorrect\n    uint256 state_variable;\n \n    function incorrect() public {\n        uint256 local_variable = 20;\n    }\n}\nTo disable this lint for your project, you can add its ID to the exclude_lints array within the [lint] section of the foundry.toml configuration file:\n[lint]\n# ... rest of lint config ...\nexclude_lints = [&quot;mixed-case-variable&quot;]\nAlternatively, you can also disable this individual occurrence using inline configuration.\n","title":"mixed-case-variable","titles":[null,"forge lint","SUPPORTED LINTS","Informational / Style Guide"]},"316":{"href":"/forge/reference/forge-lint#screaming-snake-case-const","html":"\n<p>Ensures that <code>constant</code> variable names adhere to <code>SCREAMING_SNAKE_CASE</code> (e.g., <code>MY_CONSTANT</code>). This is the standard convention for constants in Solidity, making them easily identifiable.</p>\n<p>Useful resources: <a href=\"https://docs.soliditylang.org/en/latest/style-guide.html#constants\">Solidity Style Guide - Constants</a></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// SPDX-License-Identifier: MIT</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ^0.8.0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ScreamingSnakeCaseConstant</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Correct</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> constant</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> MY_CONSTANT </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Incorrect</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> constant</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> myConstant </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> constant</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> my_constant </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>To disable this lint for your project, you can add its ID to the <code>exclude_lints</code> array within the <code>[lint]</code> section of the <code>foundry.toml</code> configuration file:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">lint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># ... rest of lint config ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">exclude_lints = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;screaming-snake-case-constant&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n<p>Alternatively, you can also disable this individual occurrence using <a href=\"/config/reference/linter#inline-configuration\">inline configuration</a>.</p>\n","isPage":false,"text":"\nEnsures that constant variable names adhere to SCREAMING_SNAKE_CASE (e.g., MY_CONSTANT). This is the standard convention for constants in Solidity, making them easily identifiable.\nUseful resources: Solidity Style Guide - Constants\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n \ncontract ScreamingSnakeCaseConstant {\n    // Correct\n    uint256 constant MY_CONSTANT = 1;\n \n    // Incorrect\n    uint256 constant myConstant = 2;\n    uint256 constant my_constant = 3;\n}\nTo disable this lint for your project, you can add its ID to the exclude_lints array within the [lint] section of the foundry.toml configuration file:\n[lint]\n# ... rest of lint config ...\nexclude_lints = [&quot;screaming-snake-case-constant&quot;]\nAlternatively, you can also disable this individual occurrence using inline configuration.\n","title":"screaming-snake-case-const","titles":[null,"forge lint","SUPPORTED LINTS","Informational / Style Guide"]},"317":{"href":"/forge/reference/forge-lint#screaming-snake-case-immutable","html":"\n<p>Ensures that <code>immutable</code> variable names adhere to <code>SCREAMING_SNAKE_CASE</code> (e.g., <code>MY_IMMUTABLE_VAR</code>). Similar to constants, this convention helps in distinguish immutable variables and maintaining consistency.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// SPDX-License-Identifier: MIT</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ^0.8.0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ScreamingSnakeCaseImmutable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Correct</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> immutable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> MY_IMMUTABLE_VAR;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Incorrect</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> immutable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> myImmutableVar;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> immutable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> my_immutable_var;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>To disable this lint for your project, you can add its ID to the <code>exclude_lints</code> array within the <code>[lint]</code> section of the <code>foundry.toml</code> configuration file:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">lint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># ... rest of lint config ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">exclude_lints = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;screaming-snake-case-immutable&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n<p>Alternatively, you can also disable this individual occurrence using <a href=\"/config/reference/linter#inline-configuration\">inline configuration</a>.</p>\n","isPage":false,"text":"\nEnsures that immutable variable names adhere to SCREAMING_SNAKE_CASE (e.g., MY_IMMUTABLE_VAR). Similar to constants, this convention helps in distinguish immutable variables and maintaining consistency.\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n \ncontract ScreamingSnakeCaseImmutable {\n    // Correct\n    uint256 immutable MY_IMMUTABLE_VAR;\n \n    // Incorrect\n    uint256 immutable myImmutableVar;\n    address immutable my_immutable_var;\n}\nTo disable this lint for your project, you can add its ID to the exclude_lints array within the [lint] section of the foundry.toml configuration file:\n[lint]\n# ... rest of lint config ...\nexclude_lints = [&quot;screaming-snake-case-immutable&quot;]\nAlternatively, you can also disable this individual occurrence using inline configuration.\n","title":"screaming-snake-case-immutable","titles":[null,"forge lint","SUPPORTED LINTS","Informational / Style Guide"]},"318":{"href":"/forge/reference/forge-lint#gas-optimizations","html":"\n","isPage":false,"text":"\n","title":"Gas Optimizations","titles":[null,"forge lint","SUPPORTED LINTS"]},"319":{"href":"/forge/reference/forge-lint#asm-keccak256","html":"\n<p>Recommends using inline assembly for <code>keccak256</code> hashing when possible. The Solidity global function <code>keccak256()</code> involves memory allocation and copying which can be less gas-efficient than a direct inline assembly implementation that operates on memory directly, especially for hashing small, fixed-size data.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// SPDX-License-Identifier: MIT</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ^0.8.0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> HashOptimization</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Correct</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> correct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> hashedVal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        assembly</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">            mstore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0x00</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, a)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">            mstore</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0x20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, b)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> hashedVal </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0x00</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0x40</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Incorrect</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> incorrect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a, b));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>To disable this lint for your project, you can add its ID to the <code>exclude_lints</code> array within the <code>[lint]</code> section of the <code>foundry.toml</code> configuration file:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">lint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># ... rest of lint config ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">exclude_lints = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;asm-keccak256&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n<p>Alternatively, you can also disable this individual occurrence using <a href=\"/config/reference/linter#inline-configuration\">inline configuration</a>.</p>\n","isPage":false,"text":"\nRecommends using inline assembly for keccak256 hashing when possible. The Solidity global function keccak256() involves memory allocation and copying which can be less gas-efficient than a direct inline assembly implementation that operates on memory directly, especially for hashing small, fixed-size data.\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n \ncontract HashOptimization {\n    // Correct\n    function correct(uint256 a, uint256 b) public pure returns (bytes32 hashedVal) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            let hashedVal := keccak256(0x00, 0x40)\n        }\n    }\n \n    // Incorrect\n    function incorrect(uint256 a, uint256 b) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(a, b));\n    }\n}\nTo disable this lint for your project, you can add its ID to the exclude_lints array within the [lint] section of the foundry.toml configuration file:\n[lint]\n# ... rest of lint config ...\nexclude_lints = [&quot;asm-keccak256&quot;]\nAlternatively, you can also disable this individual occurrence using inline configuration.\n","title":"asm-keccak256","titles":[null,"forge lint","SUPPORTED LINTS","Gas Optimizations"]},"320":{"href":"/forge/reference/forge-lint#see-also","html":"\n<p><a href=\"/config/reference/linter\">Lint config</a></p>","isPage":false,"text":"\nLint config","title":"SEE ALSO","titles":[null,"forge lint"]},"321":{"href":"/forge/reference/general-commands#general-commands","html":"\n<ul>\n<li><a href=\"/forge/reference/overview\">forge</a></li>\n<li><a href=\"/forge/reference/forge-help.mdx\">forge help</a></li>\n<li><a href=\"/forge/reference/forge-completions.mdx\">forge completions</a></li>\n</ul>","isPage":true,"text":"\n\nforge\nforge help\nforge completions\n","title":"General Commands","titles":[null]},"322":{"href":"/forge/reference/project-commands#project-commands","html":"\n<ul>\n<li><a href=\"/forge/reference/forge-init.mdx\">forge init</a></li>\n<li><a href=\"/forge/reference/forge-clone.mdx\">forge clone</a></li>\n<li><a href=\"/forge/reference/forge-install.mdx\">forge install</a></li>\n<li><a href=\"/forge/reference/forge-update.mdx\">forge update</a></li>\n<li><a href=\"/forge/reference/forge-remove.mdx\">forge remove</a></li>\n<li><a href=\"/forge/reference/forge-config.mdx\">forge config</a></li>\n<li><a href=\"/forge/reference/forge-remappings.mdx\">forge remappings</a></li>\n<li><a href=\"/forge/reference/forge-tree.mdx\">forge tree</a></li>\n<li><a href=\"/forge/reference/forge-geiger.mdx\">forge geiger</a></li>\n</ul>","isPage":true,"text":"\n\nforge init\nforge clone\nforge install\nforge update\nforge remove\nforge config\nforge remappings\nforge tree\nforge geiger\n","title":"Project Commands","titles":[null]},"323":{"href":"/forge/reference/project-options#project-options","html":"\n<p><code>--build-info</code><br/>\n    Generate build info files.</p>\n<p><code>--build-info-path</code> <em>path</em><br/>\n    Output path to directory that build info files will be written to.</p>\n<p><code>--root</code> <em>path</em><br/>\n    The project&#x27;s root path. By default, this is the root directory of the current git repository, or the current working directory.</p>\n<p><code>-C</code> <em>path</em><br/>\n<code>--contracts</code> <em>path</em><br/>\n    The contracts source directory.<br/>\n    Environment: <code>DAPP_SRC</code></p>\n<p><code>--lib-paths</code> <em>path</em><br/>\n    The path to the library folder.</p>\n<p><code>-R</code> <em>remappings</em><br/>\n<code>--remappings</code> <em>remappings</em><br/>\n    The project&#x27;s remappings.</p>\n<p>    The parameter is a comma-separated list of remappings in the format <code>&lt;source&gt;=&lt;dest&gt;</code>.</p>\n<p><code>--cache-path</code> <em>path</em><br/>\n    The path to the compiler cache.</p>\n<p><code>--config-path</code> <em>file</em><br/>\n    Path to the config file.</p>\n<p><code>--hh</code><br/>\n<code>--hardhat</code><br/>\n    This is a convenience flag, and is the same as passing <code>--contracts contracts --lib-paths node-modules</code>.</p>","isPage":true,"text":"\n--build-info\n    Generate build info files.\n--build-info-path path\n    Output path to directory that build info files will be written to.\n--root path\n    The project&#x27;s root path. By default, this is the root directory of the current git repository, or the current working directory.\n-C path\n--contracts path\n    The contracts source directory.\n    Environment: DAPP_SRC\n--lib-paths path\n    The path to the library folder.\n-R remappings\n--remappings remappings\n    The project&#x27;s remappings.\n    The parameter is a comma-separated list of remappings in the format &lt;source&gt;=&lt;dest&gt;.\n--cache-path path\n    The path to the compiler cache.\n--config-path file\n    Path to the config file.\n--hh\n--hardhat\n    This is a convenience flag, and is the same as passing --contracts contracts --lib-paths node-modules.","title":"Project Options","titles":[null,null,null]},"324":{"href":"/forge/reference/test-commands#test-commands","html":"\n<ul>\n<li><a href=\"/forge/reference/forge-test.mdx\">forge test</a></li>\n<li><a href=\"/forge/reference/forge-snapshot.mdx\">forge snapshot</a></li>\n<li><a href=\"/forge/reference/forge-coverage.mdx\">forge coverage</a></li>\n</ul>","isPage":true,"text":"\n\nforge test\nforge snapshot\nforge coverage\n","title":"Test Commands","titles":[null]},"325":{"href":"/forge/reference/test-options#test-options","html":"\n<p><code>-m</code> <em>regex</em><br/>\n<code>--match</code> <em>regex</em><br/>\n    Only run test functions matching the specified regex pattern.<br/>\n    <strong>Deprecated: See <code>--match-test</code>.</strong></p>\n<p><code>--match-test</code> <em>regex</em><br/>\n    Only run test functions matching the specified regex pattern.</p>\n<p><code>--no-match-test</code> <em>regex</em><br/>\n    Only run test functions that do not match the specified regex pattern.</p>\n<p><code>--match-contract</code> <em>regex</em><br/>\n    Only run tests in contracts matching the specified regex pattern.</p>\n<p><code>--no-match-contract</code> <em>regex</em><br/>\n    Only run tests in contracts that do not match the specified regex pattern.</p>\n<p><code>--match-path</code> <em>glob</em><br/>\n    Only run tests in source files matching the specified glob pattern.</p>\n<p><code>--no-match-path</code> <em>glob</em><br/>\n    Only run tests in source files that do not match the specified glob pattern.</p>\n<p><code>--debug</code> <em>regex</em><br/>\n    Run a test in the debugger.</p>\n<p>    The argument passed to this flag is the name of the test function you want to run, and it works the same as <code>--match-test</code>.</p>\n<p>    If more than one test matches your specified criteria, you must add additional filters until only one test is found (see <code>--match-contract</code> and <code>--match-path</code>).</p>\n<p>    The matching test will be opened in the debugger regardless of the outcome of the test.</p>\n<p>    If the matching test is a fuzz test, then it will open the debugger on the first failure case. If the fuzz test does not fail, it will open the debugger on the last fuzz case.</p>\n<p><code>--gas-report</code><br/>\n    Print a gas report.</p>\n<p><code>--allow-failure</code><br/>\n    Exit with code 0 even if a test fails.</p>\n<p><code>--fail-fast</code><br/>\n    Stop running tests after the first failure.</p>\n<p><code>--etherscan-api-key</code> <em>key</em><br/>\n    Etherscan API key. If set, traces are decoded using Etherscan if <code>--fork-url</code> is also set.<br/>\n    Environment: <code>ETHERSCAN_API_KEY</code></p>","isPage":true,"text":"\n-m regex\n--match regex\n    Only run test functions matching the specified regex pattern.\n    Deprecated: See --match-test.\n--match-test regex\n    Only run test functions matching the specified regex pattern.\n--no-match-test regex\n    Only run test functions that do not match the specified regex pattern.\n--match-contract regex\n    Only run tests in contracts matching the specified regex pattern.\n--no-match-contract regex\n    Only run tests in contracts that do not match the specified regex pattern.\n--match-path glob\n    Only run tests in source files matching the specified glob pattern.\n--no-match-path glob\n    Only run tests in source files that do not match the specified glob pattern.\n--debug regex\n    Run a test in the debugger.\n    The argument passed to this flag is the name of the test function you want to run, and it works the same as --match-test.\n    If more than one test matches your specified criteria, you must add additional filters until only one test is found (see --match-contract and --match-path).\n    The matching test will be opened in the debugger regardless of the outcome of the test.\n    If the matching test is a fuzz test, then it will open the debugger on the first failure case. If the fuzz test does not fail, it will open the debugger on the last fuzz case.\n--gas-report\n    Print a gas report.\n--allow-failure\n    Exit with code 0 even if a test fails.\n--fail-fast\n    Stop running tests after the first failure.\n--etherscan-api-key key\n    Etherscan API key. If set, traces are decoded using Etherscan if --fork-url is also set.\n    Environment: ETHERSCAN_API_KEY","title":"Test Options","titles":[null,null,null]},"326":{"href":"/forge/reference/utility-commands#utility-commands","html":"\n<ul>\n<li><a href=\"/forge/reference/forge-bind.mdx\">forge bind</a></li>\n<li><a href=\"/forge/reference/forge-cache.mdx\">forge cache</a></li>\n<li><a href=\"/forge/reference/forge-cache-clean.mdx\">forge cache clean</a></li>\n<li><a href=\"/forge/reference/forge-cache-ls.mdx\">forge cache ls</a></li>\n<li><a href=\"/forge/reference/forge-script.mdx\">forge script</a></li>\n<li><a href=\"/forge/reference/forge-upload-selectors.mdx\">forge upload-selectors</a></li>\n<li><a href=\"/forge/reference/forge-doc.mdx\">forge doc</a></li>\n</ul>","isPage":true,"text":"\n\nforge bind\nforge cache\nforge cache clean\nforge cache ls\nforge script\nforge upload-selectors\nforge doc\n","title":"Utility Commands","titles":[null]},"327":{"href":"/forge/reference/watch-options#watch-options","html":"\n<p><code>-w</code> [<em>path...</em>]<br/>\n<code>--watch</code> [<em>path...</em>]<br/>\n    Watch specific file(s) or folder(s).</p>\n<p>    By default, the project&#x27;s source directory is watched.</p>\n<p><code>-d</code> <em>delay</em><br/>\n<code>--delay</code> <em>delay</em><br/>\n    File update debounce delay.</p>\n<p>    During the delay, incoming change events are accumulated and only once the delay has passed, is an action taken.<br/>\n    Note that this does not mean a command will be started: if <code>--no-restart</code> is given and a command is already running, the outcome of the action will be to do nothing.</p>\n<p>    Defaults to 50ms. Parses as decimal seconds by default, but using an integer with the <code>ms</code> suffix may be more convenient.</p>\n<p>    When using <code>--poll</code> mode, you&#x27;ll want a larger duration, or risk overloading disk I/O.</p>\n<p><code>--no-restart</code><br/>\n    Do not restart the command while it&#x27;s running.</p>\n<p><code>--run-all</code><br/>\n    Explicitly re-run the command on all files when a change is made.</p>","isPage":true,"text":"\n-w [path...]\n--watch [path...]\n    Watch specific file(s) or folder(s).\n    By default, the project&#x27;s source directory is watched.\n-d delay\n--delay delay\n    File update debounce delay.\n    During the delay, incoming change events are accumulated and only once the delay has passed, is an action taken.\n    Note that this does not mean a command will be started: if --no-restart is given and a command is already running, the outcome of the action will be to do nothing.\n    Defaults to 50ms. Parses as decimal seconds by default, but using an integer with the ms suffix may be more convenient.\n    When using --poll mode, you&#x27;ll want a larger duration, or risk overloading disk I/O.\n--no-restart\n    Do not restart the command while it&#x27;s running.\n--run-all\n    Explicitly re-run the command on all files when a change is made.","title":"Watch Options","titles":[null,null,null]},"328":{"href":"/forge/tests/cheatcodes#cheatcodes","html":"\n<p>Most of the time, simply testing your smart contracts outputs isn&#x27;t enough. To manipulate the state of the blockchain, as well as test for specific reverts and events, Foundry is shipped with a set of cheatcodes.</p>\n<p>Cheatcodes allow you to change the block number, your identity, and more. They are invoked by calling specific functions on a specially designated address: <code>0x7109709ECfa91a80626fF3989D68f67F5b1DD12D</code>.</p>\n<p>You can access cheatcodes easily via the <code>vm</code> instance available in Forge Standard Library&#x27;s <code>Test</code> contract. Forge Standard Library is explained in greater detail in the following <a href=\"/forge/tests/forge-std\">section</a>.</p>\n<p>Let&#x27;s write a test for a smart contract that is only callable by its owner.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.8.10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/Test.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">error</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Unauthorized</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> OwnerUpOnly</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> immutable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> owner;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> count;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    constructor</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        owner </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> msg.sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> increment</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">msg.sender</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> !=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> owner) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            revert</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Unauthorized</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        count</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> OwnerUpOnlyTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    OwnerUpOnly upOnly;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        upOnly </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> OwnerUpOnly</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> test_IncrementAsOwner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(upOnly.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">count</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        upOnly.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">increment</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(upOnly.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">count</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>If we run <code>forge test</code> now, we will see that the test passes, since <code>OwnerUpOnlyTest</code> is the owner of <code>OwnerUpOnly</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span></span></code></pre>\n<p>Let&#x27;s make sure that someone who is definitely not the owner can&#x27;t increment the count, by using the <code>expectRevert</code> cheatcode:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> OwnerUpOnlyTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    OwnerUpOnly upOnly;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // ...</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> test_RevertWhen_CallerIsNotOwner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Unauthorized.selector);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">prank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        upOnly.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">increment</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>If we run <code>forge test</code> one last time, we see that the test still passes, but this time we are sure that it will always fail if we revert for any other reason.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">No</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> files</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> changed,</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> compilation</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> skipped</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Ran</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> for</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test/OwnerUpOnly.t.sol:OwnerUpOnlyTest</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[PASS] </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">test_IncrementAsOwner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">gas:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 29808</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Suite</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> result:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ok.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> passed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> failed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> skipped</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">finished</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 668.83µs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (150.50µs </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">CPU</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Ran</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> suite</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 125.08ms</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (668.83µs </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">CPU</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">): 1 tests passed, 0 failed, 0 skipped (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> total</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tests</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<p>Another cheatcode that is perhaps not so intuitive is the <code>expectEmit</code> function. Before looking at <code>expectEmit</code>, we need to understand what an event is.</p>\n<p>Events are inheritable members of contracts. When you emit an event, the arguments are stored on the blockchain. The <code>indexed</code> attribute can be added to a maximum of three parameters of an event to form a data structure known as a &quot;topic.&quot; Topics allow users to search for events on the blockchain.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.8.10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/Test.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EmitContractTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> indexed</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> indexed</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> to</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> amount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> test_ExpectEmit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ExpectEmit emitter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ExpectEmit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Check that topic 1, topic 2, and data are the same as the following emitted event.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Checking topic 3 here doesn&#x27;t matter, because `Transfer` only has 2 indexed topics.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectEmit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // The event we expect</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1337</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1337</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // The event we get</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        emitter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> test_ExpectEmit_DoNotCheckData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ExpectEmit emitter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ExpectEmit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Check topic 1 and topic 2, but do not check data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectEmit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // The event we expect</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1337</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1338</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // The event we get</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        emitter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ExpectEmit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> indexed</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> indexed</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> to</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> amount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">msg.sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1337</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1337</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>When we call <code>vm.expectEmit(true, true, false, true);</code>, we want to check the 1st and 2nd <code>indexed</code> topic for the next event.</p>\n<p>The expected <code>Transfer</code> event in <code>test_ExpectEmit()</code> means we are expecting that <code>from</code> is <code>address(this)</code>, and <code>to</code> is <code>address(1337)</code>. This is compared against the event emitted from <code>emitter.t()</code>.</p>\n<p>In other words, we are checking that the first topic from <code>emitter.t()</code> is equal to <code>address(this)</code>. The 3rd argument in <code>expectEmit</code> is set to <code>false</code> because there is no need to check the third topic in the <code>Transfer</code> event, since there are only two. It does not matter even if we set to <code>true</code>.</p>\n<p>The 4th argument in <code>expectEmit</code> is set to <code>true</code>, which means that we want to check &quot;non-indexed topics&quot;, also known as data.</p>\n<p>For example, we want the data from the expected event in <code>test_ExpectEmit</code> - which is <code>amount</code> - to equal to the data in the actual emitted event. In other words, we are asserting that <code>amount</code> emitted by <code>emitter.t()</code> is equal to <code>1337</code>. If the fourth argument in <code>expectEmit</code> was set to <code>false</code>, we would not check <code>amount</code>.</p>\n<p>In other words, <code>test_ExpectEmit_DoNotCheckData</code> is a valid test case, even though the amounts differ, since we do not check the data.</p>\n<br/>\n<aside data-callout=\"info\"><p>See the <a href=\"/reference/cheatcodes/overview\">Cheatcodes Reference</a> for a complete overview of all the available cheatcodes.</p></aside>","isPage":true,"text":"\nMost of the time, simply testing your smart contracts outputs isn&#x27;t enough. To manipulate the state of the blockchain, as well as test for specific reverts and events, Foundry is shipped with a set of cheatcodes.\nCheatcodes allow you to change the block number, your identity, and more. They are invoked by calling specific functions on a specially designated address: 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D.\nYou can access cheatcodes easily via the vm instance available in Forge Standard Library&#x27;s Test contract. Forge Standard Library is explained in greater detail in the following section.\nLet&#x27;s write a test for a smart contract that is only callable by its owner.\npragma solidity 0.8.10;\n \nimport {Test} from &quot;forge-std/Test.sol&quot;;\n \nerror Unauthorized();\n \ncontract OwnerUpOnly {\n    address public immutable owner;\n    uint256 public count;\n \n    constructor() {\n        owner = msg.sender;\n    }\n \n    function increment() external {\n        if (msg.sender != owner) {\n            revert Unauthorized();\n        }\n        count++;\n    }\n}\n \ncontract OwnerUpOnlyTest is Test {\n    OwnerUpOnly upOnly;\n \n    function setUp() public {\n        upOnly = new OwnerUpOnly();\n    }\n \n    function test_IncrementAsOwner() public {\n        assertEq(upOnly.count(), 0);\n        upOnly.increment();\n        assertEq(upOnly.count(), 1);\n    }\n}\nIf we run forge test now, we will see that the test passes, since OwnerUpOnlyTest is the owner of OwnerUpOnly.\nforge test\nLet&#x27;s make sure that someone who is definitely not the owner can&#x27;t increment the count, by using the expectRevert cheatcode:\ncontract OwnerUpOnlyTest is Test {\n    OwnerUpOnly upOnly;\n \n    // ...\n \n    function test_RevertWhen_CallerIsNotOwner() public {\n        vm.expectRevert(Unauthorized.selector);\n        vm.prank(address(0));\n        upOnly.increment();\n    }\n}\nIf we run forge test one last time, we see that the test still passes, but this time we are sure that it will always fail if we revert for any other reason.\nforge test\nNo files changed, compilation skipped\n \nRan 1 test for test/OwnerUpOnly.t.sol:OwnerUpOnlyTest\n[PASS] test_IncrementAsOwner() (gas: 29808)\nSuite result: ok. 1 passed; 0 failed; 0 skipped; finished in 668.83µs (150.50µs CPU time)\n \nRan 1 test suite in 125.08ms (668.83µs CPU time): 1 tests passed, 0 failed, 0 skipped (1 total tests)\nAnother cheatcode that is perhaps not so intuitive is the expectEmit function. Before looking at expectEmit, we need to understand what an event is.\nEvents are inheritable members of contracts. When you emit an event, the arguments are stored on the blockchain. The indexed attribute can be added to a maximum of three parameters of an event to form a data structure known as a &quot;topic.&quot; Topics allow users to search for events on the blockchain.\npragma solidity 0.8.10;\n \nimport {Test} from &quot;forge-std/Test.sol&quot;;\n \ncontract EmitContractTest is Test {\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n \n    function test_ExpectEmit() public {\n        ExpectEmit emitter = new ExpectEmit();\n        // Check that topic 1, topic 2, and data are the same as the following emitted event.\n        // Checking topic 3 here doesn&#x27;t matter, because `Transfer` only has 2 indexed topics.\n        vm.expectEmit(true, true, false, true);\n        // The event we expect\n        emit Transfer(address(this), address(1337), 1337);\n        // The event we get\n        emitter.t();\n    }\n \n    function test_ExpectEmit_DoNotCheckData() public {\n        ExpectEmit emitter = new ExpectEmit();\n        // Check topic 1 and topic 2, but do not check data\n        vm.expectEmit(true, true, false, false);\n        // The event we expect\n        emit Transfer(address(this), address(1337), 1338);\n        // The event we get\n        emitter.t();\n    }\n}\n \ncontract ExpectEmit {\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n \n    function t() public {\n        emit Transfer(msg.sender, address(1337), 1337);\n    }\n}\nWhen we call vm.expectEmit(true, true, false, true);, we want to check the 1st and 2nd indexed topic for the next event.\nThe expected Transfer event in test_ExpectEmit() means we are expecting that from is address(this), and to is address(1337). This is compared against the event emitted from emitter.t().\nIn other words, we are checking that the first topic from emitter.t() is equal to address(this). The 3rd argument in expectEmit is set to false because there is no need to check the third topic in the Transfer event, since there are only two. It does not matter even if we set to true.\nThe 4th argument in expectEmit is set to true, which means that we want to check &quot;non-indexed topics&quot;, also known as data.\nFor example, we want the data from the expected event in test_ExpectEmit - which is amount - to equal to the data in the actual emitted event. In other words, we are asserting that amount emitted by emitter.t() is equal to 1337. If the fourth argument in expectEmit was set to false, we would not check amount.\nIn other words, test_ExpectEmit_DoNotCheckData is a valid test case, even though the amounts differ, since we do not check the data.\n\nSee the Cheatcodes Reference for a complete overview of all the available cheatcodes.","title":"Cheatcodes","titles":[null]},"329":{"href":"/forge/tests/forge-std#forge-standard-library-overview","html":"\n<p>Forge Standard Library (Forge Std for short) is a collection of helpful contracts that make writing tests easier, faster, and more user-friendly.</p>\n<p>Using Forge Std is the preferred way of writing tests with Foundry.</p>\n<p>It provides all the essential functionality you need to get started writing tests:</p>\n<ul>\n<li><code>Vm.sol</code>: Up-to-date cheatcodes interface</li>\n<li><code>console.sol</code> and <code>console2.sol</code>: Hardhat-style logging functionality</li>\n<li><code>Script.sol</code>: Basic utilities for <a href=\"/guides/scripting-with-solidity\">scripting with Solidity</a></li>\n<li><code>Test.sol</code>: A superset of DSTest containing standard libraries, a cheatcodes instance (<code>vm</code>), and Hardhat console</li>\n</ul>\n<p>Simply import <code>Test.sol</code> and inherit from <code>Test</code> in your test contract:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/Test.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ContractTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ...</span></span></code></pre>\n<p>Now, you can:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Access Hevm via the `vm` instance</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startPrank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Assert and log using Dappsys Test</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(dai.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10000e18</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Log with the Hardhat `console` (`console2`)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice.balance);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use anything from the Forge Std std-libraries</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(dai), alice, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10000e18</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>To import the <code>Vm</code> interface or the <code>console</code> library individually:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Vm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/Vm.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">console</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/console.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p><strong>Note:</strong> <code>console2.sol</code> contains patches to <code>console.sol</code> that allows Forge to decode traces for calls to the console, but it is not compatible with Hardhat.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">console2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/console2.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":true,"text":"\nForge Standard Library (Forge Std for short) is a collection of helpful contracts that make writing tests easier, faster, and more user-friendly.\nUsing Forge Std is the preferred way of writing tests with Foundry.\nIt provides all the essential functionality you need to get started writing tests:\n\nVm.sol: Up-to-date cheatcodes interface\nconsole.sol and console2.sol: Hardhat-style logging functionality\nScript.sol: Basic utilities for scripting with Solidity\nTest.sol: A superset of DSTest containing standard libraries, a cheatcodes instance (vm), and Hardhat console\n\nSimply import Test.sol and inherit from Test in your test contract:\nimport {Test} from &quot;forge-std/Test.sol&quot;;\n \ncontract ContractTest is Test { ...\nNow, you can:\n// Access Hevm via the `vm` instance\nvm.startPrank(alice);\n \n// Assert and log using Dappsys Test\nassertEq(dai.balanceOf(alice), 10000e18);\n \n// Log with the Hardhat `console` (`console2`)\nconsole.log(alice.balance);\n \n// Use anything from the Forge Std std-libraries\ndeal(address(dai), alice, 10000e18);\nTo import the Vm interface or the console library individually:\nimport {Vm} from &quot;forge-std/Vm.sol&quot;;\nimport {console} from &quot;forge-std/console.sol&quot;;\nNote: console2.sol contains patches to console.sol that allows Forge to decode traces for calls to the console, but it is not compatible with Hardhat.\nimport {console2} from &quot;forge-std/console2.sol&quot;;\n","title":"Forge Standard Library Overview","titles":[null]},"330":{"href":"/forge/tests/forge-std#standard-libraries","html":"\n<p>Forge Std currently consists of six standard libraries.</p>\n","isPage":false,"text":"\nForge Std currently consists of six standard libraries.\n","title":"Standard libraries","titles":[null,"Forge Standard Library Overview"]},"331":{"href":"/forge/tests/forge-std#std-logs","html":"\n<p>Std Logs expand upon the logging events from the <a href=\"/reference/ds-test#logging\"><code>DSTest</code></a> library.</p>\n","isPage":false,"text":"\nStd Logs expand upon the logging events from the DSTest library.\n","title":"Std Logs","titles":[null,"Forge Standard Library Overview","Standard libraries"]},"332":{"href":"/forge/tests/forge-std#std-assertions","html":"\n<p>Std Assertions expand upon the assertion functions from the <a href=\"/reference/ds-test#asserting\"><code>DSTest</code></a> library.</p>\n","isPage":false,"text":"\nStd Assertions expand upon the assertion functions from the DSTest library.\n","title":"Std Assertions","titles":[null,"Forge Standard Library Overview","Standard libraries"]},"333":{"href":"/forge/tests/forge-std#std-cheats","html":"\n<p>Std Cheats are wrappers around Forge cheatcodes that make them safer to use and improve the DX.</p>\n<p>You can access Std Cheats by simply calling them inside your test contract, as you would any other internal function:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// set up a prank as Alice with 100 ETH balance</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">hoax</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nStd Cheats are wrappers around Forge cheatcodes that make them safer to use and improve the DX.\nYou can access Std Cheats by simply calling them inside your test contract, as you would any other internal function:\n// set up a prank as Alice with 100 ETH balance\nhoax(alice, 100 ether);\n","title":"Std Cheats","titles":[null,"Forge Standard Library Overview","Standard libraries"]},"334":{"href":"/forge/tests/forge-std#std-errors","html":"\n<p>Std Errors provide wrappers around common internal Solidity errors and reverts.</p>\n<p>Std Errors are most useful in combination with the <a href=\"/reference/cheatcodes/expect-revert\"><code>expectRevert</code></a> cheatcode, as you do not need to remember the internal Solidity panic codes yourself. Note that you have to access them through <code>stdError</code>, as this is a library.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// expect an arithmetic error on the next call (e.g. underflow)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(stdError.arithmeticError);</span></span></code></pre>\n","isPage":false,"text":"\nStd Errors provide wrappers around common internal Solidity errors and reverts.\nStd Errors are most useful in combination with the expectRevert cheatcode, as you do not need to remember the internal Solidity panic codes yourself. Note that you have to access them through stdError, as this is a library.\n// expect an arithmetic error on the next call (e.g. underflow)\nvm.expectRevert(stdError.arithmeticError);\n","title":"Std Errors","titles":[null,"Forge Standard Library Overview","Standard libraries"]},"335":{"href":"/forge/tests/forge-std#std-storage","html":"\n<p>Std Storage makes manipulating contract storage easy. It can find and write to the storage slot(s) associated with a particular variable.</p>\n<p>The <code>Test</code> contract already provides a <code>StdStorage</code> instance <code>stdstore</code> through which you can access any std-storage functionality. Note that you must add <code>using stdStorage for StdStorage</code> in your test contract first.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// find the variable `score` in the contract `game`</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// and change its value to 10</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stdstore</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">target</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(game))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(game.score.selector)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">checked_write</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nStd Storage makes manipulating contract storage easy. It can find and write to the storage slot(s) associated with a particular variable.\nThe Test contract already provides a StdStorage instance stdstore through which you can access any std-storage functionality. Note that you must add using stdStorage for StdStorage in your test contract first.\n// find the variable `score` in the contract `game`\n// and change its value to 10\nstdstore\n    .target(address(game))\n    .sig(game.score.selector)\n    .checked_write(10);\n","title":"Std Storage","titles":[null,"Forge Standard Library Overview","Standard libraries"]},"336":{"href":"/forge/tests/forge-std#std-math","html":"\n<p>Std Math is a library with useful mathematical functions that are not provided in Solidity.</p>\n<p>Note that you have to access them through <code>stdMath</code>, as this is a library.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// get the absolute value of -10</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ten </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stdMath.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">abs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<br/>\n<aside data-callout=\"info\"><p>See the <a href=\"/reference/forge-std/overview\">Forge Standard Library Reference</a> for a complete overview of Forge Standard Library.</p></aside>","isPage":false,"text":"\nStd Math is a library with useful mathematical functions that are not provided in Solidity.\nNote that you have to access them through stdMath, as this is a library.\n// get the absolute value of -10\nuint256 ten = stdMath.abs(-10)\n\nSee the Forge Standard Library Reference for a complete overview of Forge Standard Library.","title":"Std Math","titles":[null,"Forge Standard Library Overview","Standard libraries"]},"337":{"href":"/forge/tests/fork-testing#fork-testing","html":"\n<p>Forge supports testing in a forked environment with two different approaches:</p>\n<ul>\n<li><a href=\"#forking-mode\"><strong>Forking Mode</strong></a> — use a single fork for all your tests via the <code>forge test --fork-url</code> flag</li>\n<li><a href=\"#forking-cheatcodes\"><strong>Forking Cheatcodes</strong></a> — create, select, and manage multiple forks directly in Solidity test code via <a href=\"/reference/cheatcodes/forking\">forking cheatcodes</a></li>\n</ul>\n<p>Which approach to use? Forking mode affords running an entire test suite against a specific forked environment, while forking cheatcodes provide more flexibility and expressiveness to work with multiple forks in your tests. Your particular use case and testing strategy will help inform which approach to use.</p>\n","isPage":true,"text":"\nForge supports testing in a forked environment with two different approaches:\n\nForking Mode — use a single fork for all your tests via the forge test --fork-url flag\nForking Cheatcodes — create, select, and manage multiple forks directly in Solidity test code via forking cheatcodes\n\nWhich approach to use? Forking mode affords running an entire test suite against a specific forked environment, while forking cheatcodes provide more flexibility and expressiveness to work with multiple forks in your tests. Your particular use case and testing strategy will help inform which approach to use.\n","title":"Fork Testing","titles":[null]},"338":{"href":"/forge/tests/fork-testing#forking-mode","html":"\n<p>To run all tests in a forked environment, such as a forked Ethereum mainnet, pass an RPC URL via the <code>--fork-url</code> flag:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --fork-url</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">your_rpc_ur</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">l</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span></code></pre>\n<p>The following values are changed to reflect those of the chain at the moment of forking:</p>\n<ul>\n<li><a href=\"/config/reference/testing#block_number\"><code>block_number</code></a></li>\n<li><a href=\"/config/reference/testing#chain_id\"><code>chain_id</code></a></li>\n<li><a href=\"/config/reference/testing#gas_limit\"><code>gas_limit</code></a></li>\n<li><a href=\"/config/reference/testing#gas_price\"><code>gas_price</code></a></li>\n<li><a href=\"/config/reference/testing#block_base_fee_per_gas\"><code>block_base_fee_per_gas</code></a></li>\n<li><a href=\"/config/reference/testing#block_coinbase\"><code>block_coinbase</code></a></li>\n<li><a href=\"/config/reference/testing#block_timestamp\"><code>block_timestamp</code></a></li>\n<li><a href=\"/config/reference/testing#block_difficulty\"><code>block_difficulty</code></a></li>\n</ul>\n<p>It is possible to specify a block from which to fork with <code>--fork-block-number</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --fork-url</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">your_rpc_ur</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">l</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --fork-block-number</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span></span></code></pre>\n<p>Forking is especially useful when you need to interact with existing contracts. You may choose to do integration testing this way, as if you were on an actual network.</p>\n","isPage":false,"text":"\nTo run all tests in a forked environment, such as a forked Ethereum mainnet, pass an RPC URL via the --fork-url flag:\nforge test --fork-url &lt;your_rpc_url&gt;\nThe following values are changed to reflect those of the chain at the moment of forking:\n\nblock_number\nchain_id\ngas_limit\ngas_price\nblock_base_fee_per_gas\nblock_coinbase\nblock_timestamp\nblock_difficulty\n\nIt is possible to specify a block from which to fork with --fork-block-number:\nforge test --fork-url &lt;your_rpc_url&gt; --fork-block-number 1\nForking is especially useful when you need to interact with existing contracts. You may choose to do integration testing this way, as if you were on an actual network.\n","title":"Forking Mode","titles":[null,"Fork Testing"]},"339":{"href":"/forge/tests/fork-testing#caching","html":"\n<p>If both <code>--fork-url</code> and <code>--fork-block-number</code> are specified, then data for that block is cached for future test runs.</p>\n<p>The data is cached in <code>~/.foundry/cache/rpc/&lt;chain name&gt;/&lt;block number&gt;</code>. To clear the cache, simply remove the directory or run <a href=\"/forge/reference/forge-clean\"><code>forge clean</code></a> (removes all build artifacts and cache directories).</p>\n<p>It is also possible to ignore the cache entirely by passing <code>--no-storage-caching</code>, or with <code>foundry.toml</code> by configuring <a href=\"/config/reference/testing#no_storage_caching\"><code>no_storage_caching</code></a> and <a href=\"/config/reference/testing#rpc_storage_caching\"><code>rpc_storage_caching</code></a>.</p>\n","isPage":false,"text":"\nIf both --fork-url and --fork-block-number are specified, then data for that block is cached for future test runs.\nThe data is cached in ~/.foundry/cache/rpc/&lt;chain name&gt;/&lt;block number&gt;. To clear the cache, simply remove the directory or run forge clean (removes all build artifacts and cache directories).\nIt is also possible to ignore the cache entirely by passing --no-storage-caching, or with foundry.toml by configuring no_storage_caching and rpc_storage_caching.\n","title":"Caching","titles":[null,"Fork Testing","Forking Mode"]},"340":{"href":"/forge/tests/fork-testing#improved-traces","html":"\n<p>Forge supports identifying contracts in a forked environment with Etherscan.</p>\n<p>To use this feature, pass the Etherscan API key via the <code>--etherscan-api-key</code> flag:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --fork-url</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">your_rpc_ur</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">l</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --etherscan-api-key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">your_etherscan_api_ke</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">y</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span></code></pre>\n<p>Alternatively, you can set the <code>ETHERSCAN_API_KEY</code> environment variable.</p>\n","isPage":false,"text":"\nForge supports identifying contracts in a forked environment with Etherscan.\nTo use this feature, pass the Etherscan API key via the --etherscan-api-key flag:\nforge test --fork-url &lt;your_rpc_url&gt; --etherscan-api-key &lt;your_etherscan_api_key&gt;\nAlternatively, you can set the ETHERSCAN_API_KEY environment variable.\n","title":"Improved traces","titles":[null,"Fork Testing","Forking Mode"]},"341":{"href":"/forge/tests/fork-testing#forking-cheatcodes","html":"\n<p>Forking cheatcodes allow you to enter forking mode programmatically in your Solidity test code. Instead of configuring forking mode via <code>forge</code> CLI arguments, these cheatcodes allow you to use forking mode on a test-by-test basis and work with multiple forks in your tests. Each fork is identified via its own unique <code>uint256</code> identifier.</p>\n","isPage":false,"text":"\nForking cheatcodes allow you to enter forking mode programmatically in your Solidity test code. Instead of configuring forking mode via forge CLI arguments, these cheatcodes allow you to use forking mode on a test-by-test basis and work with multiple forks in your tests. Each fork is identified via its own unique uint256 identifier.\n","title":"Forking Cheatcodes","titles":[null,"Fork Testing"]},"342":{"href":"/forge/tests/fork-testing#usage","html":"\n<p>Important to keep in mind that <em>all</em> test functions are isolated, meaning each test function is executed with a <em>copy</em> of the state <em>after</em> <code>setUp</code> and is executed in its own stand-alone EVM.</p>\n<p>Therefore forks created during <code>setUp</code> are available in tests. The code example below uses <a href=\"/reference/cheatcodes/create-fork\"><code>createFork</code></a> to create two forks, but does <em>not</em> select one initially. Each fork is identified with a unique identifier (<code>uint256 forkId</code>), which is assigned when it is first created.</p>\n<p>Enabling a specific fork is done via passing that <code>forkId</code> to <a href=\"/reference/cheatcodes/select-fork\"><code>selectFork</code></a>.</p>\n<p><a href=\"/reference/cheatcodes/create-select-fork\"><code>createSelectFork</code></a> is a one-liner for <code>createFork</code> plus <code>selectFork</code>.</p>\n<p>There can only be one fork active at a time, and the identifier for the currently active fork can be retrieved via <a href=\"/reference/cheatcodes/active-fork\"><code>activeFork</code></a>.</p>\n<p>Similar to <a href=\"/reference/cheatcodes/roll\"><code>roll</code></a>, you can set <code>block.number</code> of a fork with <a href=\"/reference/cheatcodes/roll-fork\"><code>rollFork</code></a>.</p>\n<p>To understand what happens when a fork is selected, it is important to know how the forking mode works in general:</p>\n<p>Each fork is a standalone EVM, i.e. all forks use completely independent storage. The only exception is the state of the <code>msg.sender</code> and the test contract itself, which are persistent across fork swaps.\nIn other words all changes that are made while fork <code>A</code> is active (<code>selectFork(A)</code>) are only recorded in fork <code>A</code>&#x27;s storage and are not available if another fork is selected. However, changes recorded in the test contract itself (variables) are still available because the test contract is a <em>persistent</em> account.</p>\n<p>The <code>selectFork</code> cheatcode sets the <em>remote</em> section with the fork&#x27;s data source, however the <em>local</em> memory remains persistent across fork swaps. This also means <code>selectFork</code> can be called at all times with any fork, to set the <em>remote</em> data source. However, it is important to keep in mind the above rules for <code>read/write</code> access always apply, meaning <em>writes</em> are persistent across fork swaps.</p>\n","isPage":false,"text":"\nImportant to keep in mind that all test functions are isolated, meaning each test function is executed with a copy of the state after setUp and is executed in its own stand-alone EVM.\nTherefore forks created during setUp are available in tests. The code example below uses createFork to create two forks, but does not select one initially. Each fork is identified with a unique identifier (uint256 forkId), which is assigned when it is first created.\nEnabling a specific fork is done via passing that forkId to selectFork.\ncreateSelectFork is a one-liner for createFork plus selectFork.\nThere can only be one fork active at a time, and the identifier for the currently active fork can be retrieved via activeFork.\nSimilar to roll, you can set block.number of a fork with rollFork.\nTo understand what happens when a fork is selected, it is important to know how the forking mode works in general:\nEach fork is a standalone EVM, i.e. all forks use completely independent storage. The only exception is the state of the msg.sender and the test contract itself, which are persistent across fork swaps.\nIn other words all changes that are made while fork A is active (selectFork(A)) are only recorded in fork A&#x27;s storage and are not available if another fork is selected. However, changes recorded in the test contract itself (variables) are still available because the test contract is a persistent account.\nThe selectFork cheatcode sets the remote section with the fork&#x27;s data source, however the local memory remains persistent across fork swaps. This also means selectFork can be called at all times with any fork, to set the remote data source. However, it is important to keep in mind the above rules for read/write access always apply, meaning writes are persistent across fork swaps.\n","title":"Usage","titles":[null,"Fork Testing","Forking Cheatcodes"]},"343":{"href":"/forge/tests/fork-testing#examples","html":"\n","isPage":false,"text":"\n","title":"Examples","titles":[null,"Fork Testing","Forking Cheatcodes"]},"344":{"href":"/forge/tests/fork-testing#create-and-select-forks","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ForkTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // the identifiers of the forks</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mainnetFork;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> optimismFork;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    //Access variables from .env file via vm.envString(&quot;varname&quot;)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    //Replace ALCHEMY_KEY by your alchemy key or Etherscan key, change RPC url if need</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    //inside your .env file e.g:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    //MAINNET_RPC_URL = &#x27;https://eth-mainnet.g.alchemy.com/v2/ALCHEMY_KEY&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    //string MAINNET_RPC_URL = vm.envString(&quot;MAINNET_RPC_URL&quot;);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    //string OPTIMISM_RPC_URL = vm.envString(&quot;OPTIMISM_RPC_URL&quot;);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // create two _different_ forks during setup</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        mainnetFork </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(MAINNET_RPC_URL);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        optimismFork </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(OPTIMISM_RPC_URL);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // demonstrate fork ids are unique</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testForkIdDiffer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(mainnetFork </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> optimismFork);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // select a specific fork</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testCanSelectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // select the fork</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">selectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(mainnetFork);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">activeFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), mainnetFork);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // from here on data is fetched from the `mainnetFork` if the EVM requests it and written to the storage of `mainnetFork`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // manage multiple forks in the same test</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testCanSwitchForks</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">selectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(mainnetFork);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">activeFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), mainnetFork);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">selectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(optimismFork);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">activeFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), optimismFork);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // forks can be created at all times</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testCanCreateAndSelectForkInOneStep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // creates a new fork and also selects it</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> anotherFork </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createSelectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(MAINNET_RPC_URL);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">activeFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), anotherFork);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // set `block.number` of a fork</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testCanSetForkBlockNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">selectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(mainnetFork);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">rollFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1_337_000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.number, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1_337_000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ncontract ForkTest is Test {\n    // the identifiers of the forks\n    uint256 mainnetFork;\n    uint256 optimismFork;\n \n    //Access variables from .env file via vm.envString(&quot;varname&quot;)\n    //Replace ALCHEMY_KEY by your alchemy key or Etherscan key, change RPC url if need\n    //inside your .env file e.g:\n    //MAINNET_RPC_URL = &#x27;https://eth-mainnet.g.alchemy.com/v2/ALCHEMY_KEY&#x27;\n    //string MAINNET_RPC_URL = vm.envString(&quot;MAINNET_RPC_URL&quot;);\n    //string OPTIMISM_RPC_URL = vm.envString(&quot;OPTIMISM_RPC_URL&quot;);\n \n    // create two _different_ forks during setup\n    function setUp() public {\n        mainnetFork = vm.createFork(MAINNET_RPC_URL);\n        optimismFork = vm.createFork(OPTIMISM_RPC_URL);\n    }\n \n    // demonstrate fork ids are unique\n    function testForkIdDiffer() public {\n        assert(mainnetFork != optimismFork);\n    }\n \n    // select a specific fork\n    function testCanSelectFork() public {\n        // select the fork\n        vm.selectFork(mainnetFork);\n        assertEq(vm.activeFork(), mainnetFork);\n \n        // from here on data is fetched from the `mainnetFork` if the EVM requests it and written to the storage of `mainnetFork`\n    }\n \n    // manage multiple forks in the same test\n    function testCanSwitchForks() public {\n        vm.selectFork(mainnetFork);\n        assertEq(vm.activeFork(), mainnetFork);\n \n        vm.selectFork(optimismFork);\n        assertEq(vm.activeFork(), optimismFork);\n    }\n \n    // forks can be created at all times\n    function testCanCreateAndSelectForkInOneStep() public {\n        // creates a new fork and also selects it\n        uint256 anotherFork = vm.createSelectFork(MAINNET_RPC_URL);\n        assertEq(vm.activeFork(), anotherFork);\n    }\n \n    // set `block.number` of a fork\n    function testCanSetForkBlockNumber() public {\n        vm.selectFork(mainnetFork);\n        vm.rollFork(1_337_000);\n \n        assertEq(block.number, 1_337_000);\n    }\n}\n","title":"Create and Select Forks","titles":[null,"Fork Testing","Forking Cheatcodes","Examples"]},"345":{"href":"/forge/tests/fork-testing#separated-and-persistent-storage","html":"\n<p>As mentioned each fork is essentially an independent EVM with separated storage.</p>\n<p>Only the accounts of <code>msg.sender</code> and the test contract (<code>ForkTest</code>) are persistent when forks are selected. But any account can be turned into a persistent account: <a href=\"/reference/cheatcodes/make-persistent\"><code>makePersistent</code></a>.</p>\n<p>An account that is <em>persistent</em> is unique, i.e. it exists on all forks</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ForkTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // the identifiers of the forks</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mainnetFork;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> optimismFork;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    //Access variables from .env file via vm.envString(&quot;varname&quot;)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    //Replace ALCHEMY_KEY by your alchemy key or Etherscan key, change RPC url if need</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    //inside your .env file e.g:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    //MAINNET_RPC_URL = &#x27;https://eth-mainnet.g.alchemy.com/v2/ALCHEMY_KEY&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    //string MAINNET_RPC_URL = vm.envString(&quot;MAINNET_RPC_URL&quot;);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    //string OPTIMISM_RPC_URL = vm.envString(&quot;OPTIMISM_RPC_URL&quot;);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // create two _different_ forks during setup</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        mainnetFork </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(MAINNET_RPC_URL);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        optimismFork </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(OPTIMISM_RPC_URL);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // creates a new contract while a fork is active</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testCreateContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">selectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(mainnetFork);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">activeFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), mainnetFork);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // the new contract is written to `mainnetFork`&#x27;s storage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        SimpleStorageContract simple </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SimpleStorageContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // and can be used as normal</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        simple.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(simple.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // after switching to another contract we still know `address(simple)` but the contract only lives in `mainnetFork`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">selectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(optimismFork);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        /* this call will therefore revert because `simple` now points to a contract that does not exist on the active fork</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        * it will produce following revert message:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        *</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        * &quot;Contract 0xCe71065D4017F316EC606Fe4422e11eB2c47c246 does not exist on active fork with id `1`</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        *       But exists on non active forks: `[0]`&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        */</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        simple.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">     // creates a new _persistent_ contract while a fork is active</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">     function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testCreatePersistentContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">selectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(mainnetFork);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        SimpleStorageContract simple </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SimpleStorageContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        simple.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(simple.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // mark the contract as persistent so it is also available when other forks are active</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">makePersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(simple));</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isPersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(simple)));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">selectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(optimismFork);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isPersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(simple)));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // This will succeed because the contract is now also available on the `optimismFork`</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(simple.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">     }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SimpleStorageContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _value) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _value;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>For more details and examples, see the <a href=\"/reference/cheatcodes/forking\">forking cheatcodes</a> reference.</p>\n","isPage":false,"text":"\nAs mentioned each fork is essentially an independent EVM with separated storage.\nOnly the accounts of msg.sender and the test contract (ForkTest) are persistent when forks are selected. But any account can be turned into a persistent account: makePersistent.\nAn account that is persistent is unique, i.e. it exists on all forks\ncontract ForkTest is Test {\n    // the identifiers of the forks\n    uint256 mainnetFork;\n    uint256 optimismFork;\n \n    //Access variables from .env file via vm.envString(&quot;varname&quot;)\n    //Replace ALCHEMY_KEY by your alchemy key or Etherscan key, change RPC url if need\n    //inside your .env file e.g:\n    //MAINNET_RPC_URL = &#x27;https://eth-mainnet.g.alchemy.com/v2/ALCHEMY_KEY&#x27;\n    //string MAINNET_RPC_URL = vm.envString(&quot;MAINNET_RPC_URL&quot;);\n    //string OPTIMISM_RPC_URL = vm.envString(&quot;OPTIMISM_RPC_URL&quot;);\n \n    // create two _different_ forks during setup\n    function setUp() public {\n        mainnetFork = vm.createFork(MAINNET_RPC_URL);\n        optimismFork = vm.createFork(OPTIMISM_RPC_URL);\n    }\n \n    // creates a new contract while a fork is active\n    function testCreateContract() public {\n        vm.selectFork(mainnetFork);\n        assertEq(vm.activeFork(), mainnetFork);\n \n        // the new contract is written to `mainnetFork`&#x27;s storage\n        SimpleStorageContract simple = new SimpleStorageContract();\n \n        // and can be used as normal\n        simple.set(100);\n        assertEq(simple.value(), 100);\n \n        // after switching to another contract we still know `address(simple)` but the contract only lives in `mainnetFork`\n        vm.selectFork(optimismFork);\n \n        /* this call will therefore revert because `simple` now points to a contract that does not exist on the active fork\n        * it will produce following revert message:\n        *\n        * &quot;Contract 0xCe71065D4017F316EC606Fe4422e11eB2c47c246 does not exist on active fork with id `1`\n        *       But exists on non active forks: `[0]`&quot;\n        */\n        simple.value();\n    }\n \n     // creates a new _persistent_ contract while a fork is active\n     function testCreatePersistentContract() public {\n        vm.selectFork(mainnetFork);\n        SimpleStorageContract simple = new SimpleStorageContract();\n        simple.set(100);\n        assertEq(simple.value(), 100);\n \n        // mark the contract as persistent so it is also available when other forks are active\n        vm.makePersistent(address(simple));\n        assert(vm.isPersistent(address(simple)));\n \n        vm.selectFork(optimismFork);\n        assert(vm.isPersistent(address(simple)));\n \n        // This will succeed because the contract is now also available on the `optimismFork`\n        assertEq(simple.value(), 100);\n     }\n}\n \ncontract SimpleStorageContract {\n    uint256 public value;\n \n    function set(uint256 _value) public {\n        value = _value;\n    }\n}\nFor more details and examples, see the forking cheatcodes reference.\n","title":"Separated and persistent storage","titles":[null,"Fork Testing","Forking Cheatcodes","Examples"]},"346":{"href":"/forge/tests/fork-testing#evm-version","html":"\n<p>Proper configuration is needed to execute forked tests with chains using different EVM versions:</p>\n<ul>\n<li>if same EVM version applies for all forked chains used, then it can be globally configured in <code>foundry.toml</code> file</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">evm_version = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;prague&quot;</span></span></code></pre>\n<ul>\n<li>if different EVM versions are used, specific EVM test version can be set using inline configuration</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// forge-config: default.evm_version = &quot;shanghai&quot;</span></span></code></pre>","isPage":false,"text":"\nProper configuration is needed to execute forked tests with chains using different EVM versions:\n\nif same EVM version applies for all forked chains used, then it can be globally configured in foundry.toml file\n\nevm_version = &quot;prague&quot;\n\nif different EVM versions are used, specific EVM test version can be set using inline configuration\n\n/// forge-config: default.evm_version = &quot;shanghai&quot;","title":"EVM version","titles":[null,"Fork Testing"]},"347":{"href":"/forge/tests/overview#tests","html":"\n<p>Forge can run your tests with the <a href=\"/forge/reference/forge-test\"><code>forge test</code></a> command. All tests are written in Solidity.</p>\n<p>Forge will look for the tests anywhere in your source directory. Any contract with a function that starts with <code>test</code> is considered to be a test. Usually, tests will be placed in <code>test/</code> by convention and end with <code>.t.sol</code>.</p>\n<p>Here&#x27;s an example of running <code>forge test</code> in a freshly created project, that only has the default test:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">No</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> files</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> changed,</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> compilation</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> skipped</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Ran</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tests</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> for</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test/Counter.t.sol:CounterTest</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[PASS] testFuzz_SetNumber(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">runs:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 256,</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> μ:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 31965,</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ~:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 32354</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[PASS] </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">test_Increment</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">gas:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 31851</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Suite</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> result:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ok.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> passed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> failed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> skipped</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">finished</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 38.79ms</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (33.61ms </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">CPU</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Ran</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> suite</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 137.49ms</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (38.79ms </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">CPU</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">): 2 tests passed, 0 failed, 0 skipped (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">2</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> total</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tests</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<p>You can also run specific tests by passing a filter:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --match-contract</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ComplicatedContractTest</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --match-test</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test_Deposit</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Compiling</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 24</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> files</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> with</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Solc</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.8.10</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Solc</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.8.10</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> finished</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 587.40ms</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Compiler</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> successful!</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Ran</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tests</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> for</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test/ComplicatedContract.t.sol:ComplicatedContractTest</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[PASS] </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">test_DepositERC20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">gas:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 179207</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[PASS] </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">test_DepositETH</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">gas:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 107628</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Suite</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> result:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ok.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> passed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> failed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> skipped</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">finished</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 4.29ms</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (6.23ms </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">CPU</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Ran</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> suite</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 122.03ms</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (4.29ms </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">CPU</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">): 2 tests passed, 0 failed, 0 skipped (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">2</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> total</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tests</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<p>This will run the tests in the <code>ComplicatedContractTest</code> test contract with <code>testDeposit</code> in the name.\nInverse versions of these flags also exist (<code>--no-match-contract</code> and <code>--no-match-test</code>).</p>\n<p>You can run tests in filenames that match a glob pattern with <code>--match-path</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --match-path</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test/ContractB.t.sol</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Compiling</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> files</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> with</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Solc</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.8.10</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Solc</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.8.10</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> finished</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 543.88ms</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Compiler</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> successful!</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Ran</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> for</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test/ContractB.t.sol:ContractBTest</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[PASS] </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">testExample</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">gas:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 257</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Suite</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> result:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ok.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> passed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> failed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> skipped</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">finished</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 618.25µs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (135.42µs </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">CPU</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Ran</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> suite</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 129.13ms</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (618.25µs </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">CPU</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">): 1 tests passed, 0 failed, 0 skipped (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> total</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tests</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<p>The inverse of the <code>--match-path</code> flag is <code>--no-match-path</code>.</p>\n","isPage":true,"text":"\nForge can run your tests with the forge test command. All tests are written in Solidity.\nForge will look for the tests anywhere in your source directory. Any contract with a function that starts with test is considered to be a test. Usually, tests will be placed in test/ by convention and end with .t.sol.\nHere&#x27;s an example of running forge test in a freshly created project, that only has the default test:\nforge test\nNo files changed, compilation skipped\n \nRan 2 tests for test/Counter.t.sol:CounterTest\n[PASS] testFuzz_SetNumber(uint256) (runs: 256, μ: 31965, ~: 32354)\n[PASS] test_Increment() (gas: 31851)\nSuite result: ok. 2 passed; 0 failed; 0 skipped; finished in 38.79ms (33.61ms CPU time)\n \nRan 1 test suite in 137.49ms (38.79ms CPU time): 2 tests passed, 0 failed, 0 skipped (2 total tests)\nYou can also run specific tests by passing a filter:\nforge test --match-contract ComplicatedContractTest --match-test test_Deposit\nCompiling 24 files with Solc 0.8.10\nSolc 0.8.10 finished in 587.40ms\nCompiler run successful!\n \nRan 2 tests for test/ComplicatedContract.t.sol:ComplicatedContractTest\n[PASS] test_DepositERC20() (gas: 179207)\n[PASS] test_DepositETH() (gas: 107628)\nSuite result: ok. 2 passed; 0 failed; 0 skipped; finished in 4.29ms (6.23ms CPU time)\n \nRan 1 test suite in 122.03ms (4.29ms CPU time): 2 tests passed, 0 failed, 0 skipped (2 total tests)\nThis will run the tests in the ComplicatedContractTest test contract with testDeposit in the name.\nInverse versions of these flags also exist (--no-match-contract and --no-match-test).\nYou can run tests in filenames that match a glob pattern with --match-path.\nforge test --match-path test/ContractB.t.sol\nCompiling 1 files with Solc 0.8.10\nSolc 0.8.10 finished in 543.88ms\nCompiler run successful!\n \nRan 1 test for test/ContractB.t.sol:ContractBTest\n[PASS] testExample() (gas: 257)\nSuite result: ok. 1 passed; 0 failed; 0 skipped; finished in 618.25µs (135.42µs CPU time)\n \nRan 1 test suite in 129.13ms (618.25µs CPU time): 1 tests passed, 0 failed, 0 skipped (1 total tests)\nThe inverse of the --match-path flag is --no-match-path.\n","title":"Tests","titles":[null]},"348":{"href":"/forge/tests/overview#logs-and-traces","html":"\n<p>The default behavior for <code>forge test</code> is to only display a summary of passing and failing tests. You can control this behavior by increasing the verbosity (using the <code>-v</code> flag). Each level of verbosity adds more information:</p>\n<ul>\n<li><strong>Level 2 (<code>-vv</code>)</strong>: Logs emitted during tests are also displayed. That includes assertion errors from tests, showing information such as expected vs actual.</li>\n<li><strong>Level 3 (<code>-vvv</code>)</strong>: Stack traces for failing tests are also displayed.</li>\n<li><strong>Level 4 (<code>-vvvv</code>)</strong>: Stack traces for all tests are displayed, and setup traces for failing tests are displayed.</li>\n<li><strong>Level 5 (<code>-vvvvv</code>)</strong>: Stack traces and setup traces are always displayed.</li>\n</ul>\n","isPage":false,"text":"\nThe default behavior for forge test is to only display a summary of passing and failing tests. You can control this behavior by increasing the verbosity (using the -v flag). Each level of verbosity adds more information:\n\nLevel 2 (-vv): Logs emitted during tests are also displayed. That includes assertion errors from tests, showing information such as expected vs actual.\nLevel 3 (-vvv): Stack traces for failing tests are also displayed.\nLevel 4 (-vvvv): Stack traces for all tests are displayed, and setup traces for failing tests are displayed.\nLevel 5 (-vvvvv): Stack traces and setup traces are always displayed.\n\n","title":"Logs and traces","titles":[null,"Tests"]},"349":{"href":"/forge/tests/overview#watch-mode","html":"\n<p>Forge can re-run your tests when you make changes to your files using <code>forge test --watch</code>.</p>\n<p>By default, only changed test files are re-run. If you want to re-run all tests on a change, you can use <code>forge test --watch --run-all</code>.</p>","isPage":false,"text":"\nForge can re-run your tests when you make changes to your files using forge test --watch.\nBy default, only changed test files are re-run. If you want to re-run all tests on a change, you can use forge test --watch --run-all.","title":"Watch mode","titles":[null,"Tests"]},"350":{"href":"/forge/tests/replay-testing#replaying-failures","html":"\n<p>Forge supports incrementally replaying last test run failures by persisting them on the disk.</p>\n","isPage":true,"text":"\nForge supports incrementally replaying last test run failures by persisting them on the disk.\n","title":"Replaying Failures","titles":[null]},"351":{"href":"/forge/tests/replay-testing#rerun-failures","html":"\n<p>The <code>--rerun</code> option can be used to omit successful tests and replay recorded failures only:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --rerun</span></span></code></pre>\n<p>The failed tests are written in <code>~/.foundry/cache/test-failures</code> file. This file is updated each time <code>forge test</code> is performed, so it reflects failures from the last run.</p>\n","isPage":false,"text":"\nThe --rerun option can be used to omit successful tests and replay recorded failures only:\nforge test --rerun\nThe failed tests are written in ~/.foundry/cache/test-failures file. This file is updated each time forge test is performed, so it reflects failures from the last run.\n","title":"Rerun failures","titles":[null,"Replaying Failures"]},"352":{"href":"/forge/tests/replay-testing#fuzz-tests-failures","html":"\n<p>Forge saves all fuzz tests counterexamples and replays them before new test campaigns are started (This is done in order to ensure there is no regression introduced).\nFuzz tests failures encountered in several runs are by default persisted in <code>~/.foundry/cache/fuzz/failures</code> file. The file content is not replaced by subsequent test runs, but new records are added to existing entries.</p>\n<p>The default file used to persist and rerun fuzz test failures from can be changed in foundry.toml:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">fuzz</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">failure_persist_file=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;/tests/failures.txt&quot;</span></span></code></pre>\n<p>or by using inline config</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// forge-config: default.fuzz.failure-persist-file = /tests/failures.txt</span></span></code></pre>\n","isPage":false,"text":"\nForge saves all fuzz tests counterexamples and replays them before new test campaigns are started (This is done in order to ensure there is no regression introduced).\nFuzz tests failures encountered in several runs are by default persisted in ~/.foundry/cache/fuzz/failures file. The file content is not replaced by subsequent test runs, but new records are added to existing entries.\nThe default file used to persist and rerun fuzz test failures from can be changed in foundry.toml:\n[fuzz]\nfailure_persist_file=&quot;/tests/failures.txt&quot;\nor by using inline config\n/// forge-config: default.fuzz.failure-persist-file = /tests/failures.txt\n","title":"Fuzz tests failures","titles":[null,"Replaying Failures"]},"353":{"href":"/forge/tests/replay-testing#invariant-tests-failures","html":"\n<p>Failures from invariant tests are saved and replayed before new test campaigns are started, similar with fuzz tests. The difference is that the failed sequences are persisted in individual files, with specific <code>~/.foundry/cache/invariant/failures/{TEST_SUITE_NAME}/{INVARIANT_NAME}</code> default path. Content of this file is replaced only when a different counterexample is found.</p>\n<p>The default directory to persist invariant test failures can be changed in foundry.toml:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">invariant</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">failure_persist_dir=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;/tests/dir&quot;</span></span></code></pre>\n<p>or by using inline config</p>\n<pre><code class=\"language-Solidity\">/// forge-config: default.invariant.failure-persist-dir = /tests/dir\n</code></pre>\n","isPage":false,"text":"\nFailures from invariant tests are saved and replayed before new test campaigns are started, similar with fuzz tests. The difference is that the failed sequences are persisted in individual files, with specific ~/.foundry/cache/invariant/failures/{TEST_SUITE_NAME}/{INVARIANT_NAME} default path. Content of this file is replaced only when a different counterexample is found.\nThe default directory to persist invariant test failures can be changed in foundry.toml:\n[invariant]\nfailure_persist_dir=&quot;/tests/dir&quot;\nor by using inline config\n/// forge-config: default.invariant.failure-persist-dir = /tests/dir\n\n","title":"Invariant tests failures","titles":[null,"Replaying Failures"]},"354":{"href":"/forge/tests/replay-testing#remove-persisted-failures","html":"\n<p>To ignore saved failures and start a clean test campaign, simply remove the persisted files or run <a href=\"/forge/reference/forge-clean\"><code>forge clean</code></a> (removes all build artifacts and cache directories).</p>","isPage":false,"text":"\nTo ignore saved failures and start a clean test campaign, simply remove the persisted files or run forge clean (removes all build artifacts and cache directories).","title":"Remove persisted failures","titles":[null,"Replaying Failures"]},"355":{"href":"/forge/tests/traces#understanding-traces","html":"\n<p>Forge can produce traces either for failing tests (<code>-vvv</code>) or all tests (<code>-vvvv</code>).</p>\n<p>Traces follow the same general format:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  [&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">Gas</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> Usage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;] &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;::&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">Function</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;(&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">Parameters</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ├─ [&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">Gas</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> Usage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;] &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;::&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">Function</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;(&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">Parameters</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    │   └─ ← &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">Return</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    └─ ← &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">Return</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> Value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n<p>Each trace can have many more subtraces, each denoting a call to a contract and a return value.</p>\n<p>If your terminal supports color, the traces will also come with a variety of colors:</p>\n<ul>\n<li><strong>Green</strong>: For calls that do not revert</li>\n<li><strong>Red</strong>: For reverting calls</li>\n<li><strong>Blue</strong>: For calls to cheat codes</li>\n<li><strong>Cyan</strong>: For emitted logs</li>\n<li><strong>Yellow</strong>: For contract deployments</li>\n</ul>\n<p>The gas usage (marked in square brackets) is for the entirety of the function call. You may notice, however, that sometimes the gas usage of one trace does not exactly match the gas usage of all its subtraces:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  [</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">24661</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] OwnerUpOnlyTest::testIncrementAsOwner()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ├─ [</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">2262</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] OwnerUpOnly::count()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    │   └─ ← 0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ├─ [</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">20398</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] OwnerUpOnly::increment()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    │   └─ ← ()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ├─ [</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">262</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] OwnerUpOnly::count()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    │   └─ ← 1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    └─ ← ()</span></span></code></pre>\n<p>The gas unaccounted for is due to some extra operations happening between calls, such as arithmetic and store reads/writes.</p>\n<p>Forge will try to decode as many signatures and values as possible, but sometimes this is not possible. In these cases, the traces will appear like so:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  [&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">Gas</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> Usage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;] &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;::&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">Calldata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    └─ ← &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">Return</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> Data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n<p>Some traces might be harder to grasp at first glance. These include:</p>\n<ul>\n<li>The <code>OOG</code> shorthand stands for &quot;Out Of Gas&quot;.</li>\n<li>The acronym <code>EOF</code> stands for &quot;Ethereum Object Format&quot;, which introduces an extensible and versioned container format for EVM bytecode. For more information, read <a href=\"https://evmobjectformat.org/\">here</a>.</li>\n<li><code>NotActivated</code> means the feature or opcode is not activated. Some versions of the EVM only support certain opcodes. You may need to use a more recent version using the <code>--evm_version</code> flag. For example, the <code>PUSH0</code> opcode is only available since the <a href=\"https://www.evm.codes/?fork=shanghai\">Shanghai</a> hardfork.</li>\n<li><code>InvalidFEOpcode</code> means that an undefined bytecode value has been encountered during execution. The EVM catches the unknown bytecode and returns the <code>INVALID</code> opcode instead, of value <code>0xFE</code>. You can find out more <a href=\"https://www.evm.codes/#fe\">here</a>.</li>\n</ul>\n<p>For a deeper insight into the various traces, you can explore the <a href=\"https://github.com/bluealloy/revm/blob/main/crates/interpreter/src/instruction_result.rs\">revm source code</a>.</p>","isPage":true,"text":"\nForge can produce traces either for failing tests (-vvv) or all tests (-vvvv).\nTraces follow the same general format:\n  [&lt;Gas Usage&gt;] &lt;Contract&gt;::&lt;Function&gt;(&lt;Parameters&gt;)\n    ├─ [&lt;Gas Usage&gt;] &lt;Contract&gt;::&lt;Function&gt;(&lt;Parameters&gt;)\n    │   └─ ← &lt;Return Value&gt;\n    └─ ← &lt;Return Value&gt;\nEach trace can have many more subtraces, each denoting a call to a contract and a return value.\nIf your terminal supports color, the traces will also come with a variety of colors:\n\nGreen: For calls that do not revert\nRed: For reverting calls\nBlue: For calls to cheat codes\nCyan: For emitted logs\nYellow: For contract deployments\n\nThe gas usage (marked in square brackets) is for the entirety of the function call. You may notice, however, that sometimes the gas usage of one trace does not exactly match the gas usage of all its subtraces:\n  [24661] OwnerUpOnlyTest::testIncrementAsOwner()\n    ├─ [2262] OwnerUpOnly::count()\n    │   └─ ← 0\n    ├─ [20398] OwnerUpOnly::increment()\n    │   └─ ← ()\n    ├─ [262] OwnerUpOnly::count()\n    │   └─ ← 1\n    └─ ← ()\nThe gas unaccounted for is due to some extra operations happening between calls, such as arithmetic and store reads/writes.\nForge will try to decode as many signatures and values as possible, but sometimes this is not possible. In these cases, the traces will appear like so:\n  [&lt;Gas Usage&gt;] &lt;Address&gt;::&lt;Calldata&gt;\n    └─ ← &lt;Return Data&gt;\nSome traces might be harder to grasp at first glance. These include:\n\nThe OOG shorthand stands for &quot;Out Of Gas&quot;.\nThe acronym EOF stands for &quot;Ethereum Object Format&quot;, which introduces an extensible and versioned container format for EVM bytecode. For more information, read here.\nNotActivated means the feature or opcode is not activated. Some versions of the EVM only support certain opcodes. You may need to use a more recent version using the --evm_version flag. For example, the PUSH0 opcode is only available since the Shanghai hardfork.\nInvalidFEOpcode means that an undefined bytecode value has been encountered during execution. The EVM catches the unknown bytecode and returns the INVALID opcode instead, of value 0xFE. You can find out more here.\n\nFor a deeper insight into the various traces, you can explore the revm source code.","title":"Understanding Traces","titles":[null]},"356":{"href":"/forge/tests/writing-tests#writing-tests","html":"\n<p>Tests are written in Solidity. If the test function reverts, the test fails, otherwise it passes.</p>\n<p>Let&#x27;s go over the most common way of writing tests, using the <a href=\"https://github.com/foundry-rs/forge-std\">Forge Standard Library</a>&#x27;s <code>Test</code> contract, which is the preferred way of writing tests with Forge.</p>\n<p>In this section, we&#x27;ll go over the basics using the functions from the Forge Std&#x27;s <code>Test</code> contract, which is itself a superset of <a href=\"https://github.com/dapphub/ds-test\">DSTest</a>. You will learn how to use more advanced stuff from the Forge Standard Library <a href=\"/forge/tests/forge-std\">soon</a>.</p>\n<p>DSTest provides basic logging and assertion functionality. To get access to the functions, import <code>forge-std/Test.sol</code> and inherit from <code>Test</code> in your test contract:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/Test.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Let&#x27;s examine a basic test:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.8.10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/Test.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ContractBTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> testNumber;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        testNumber </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 42</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> test_NumberIs42</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(testNumber, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">42</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// forge-config: default.allow_internal_expect_revert = true</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testRevert_Subtract43</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        testNumber </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 43</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Forge uses the following keywords in tests:</p>\n<ul>\n<li><code>setUp</code>: An optional function invoked before each test case is run.</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        testNumber </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 42</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span></code></pre>\n<ul>\n<li><code>test</code>: Functions prefixed with <code>test</code> are run as a test case.</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> test_NumberIs42</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(testNumber, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">42</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span></code></pre>\n<p>A good practice is to use the pattern <code>test_Revert[If|When]_Condition</code> in combination with the <a href=\"/reference/cheatcodes/expect-revert\"><code>expectRevert</code></a> cheatcode (cheatcodes are explained in greater detail in the following <a href=\"/forge/tests/cheatcodes\">section</a>). Also, other testing practices can be found in the <a href=\"/guides/best-practices/writing-tests\">Guides section</a>.</p>\n<blockquote>\n<p><strong>Note</strong>: To use <code>stdError</code> constants (like <code>arithmeticError</code> in the example below), make sure to import <code>StdError.sol</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">stdError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/StdError.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n</blockquote>\n<p>In this way you know exactly what reverted and with which error:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> test_CannotSubtract43</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(stdError.arithmeticError);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        testNumber </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 43</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span></code></pre>\n<br/>\n<p>Tests are deployed to <code>0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84</code>. If you deploy a contract within your test, then\n<code>0xb4c...7e84</code> will be its deployer. If the contract deployed within a test gives special permissions to its deployer,\nsuch as <code>Ownable.sol</code>&#x27;s <code>onlyOwner</code> modifier, then the test contract <code>0xb4c...7e84</code> will have those permissions.</p>\n<blockquote>\n<p>⚠️ <strong>Note</strong></p>\n<p>Test functions must have either <code>external</code> or <code>public</code> visibility. Functions declared as <code>internal</code> or\n<code>private</code> won&#x27;t be picked up by Forge, even if they are prefixed with <code>test</code>.</p>\n</blockquote>\n","isPage":true,"text":"\nTests are written in Solidity. If the test function reverts, the test fails, otherwise it passes.\nLet&#x27;s go over the most common way of writing tests, using the Forge Standard Library&#x27;s Test contract, which is the preferred way of writing tests with Forge.\nIn this section, we&#x27;ll go over the basics using the functions from the Forge Std&#x27;s Test contract, which is itself a superset of DSTest. You will learn how to use more advanced stuff from the Forge Standard Library soon.\nDSTest provides basic logging and assertion functionality. To get access to the functions, import forge-std/Test.sol and inherit from Test in your test contract:\nimport {Test} from &quot;forge-std/Test.sol&quot;;\nLet&#x27;s examine a basic test:\npragma solidity 0.8.10;\n \nimport {Test} from &quot;forge-std/Test.sol&quot;;\n \ncontract ContractBTest is Test {\n    uint256 testNumber;\n \n    function setUp() public {\n        testNumber = 42;\n    }\n \n    function test_NumberIs42() public {\n        assertEq(testNumber, 42);\n    }\n \n    /// forge-config: default.allow_internal_expect_revert = true\n    function testRevert_Subtract43() public {\n        vm.expectRevert();\n        testNumber -= 43;\n    }\n}\nForge uses the following keywords in tests:\n\nsetUp: An optional function invoked before each test case is run.\n\n    function setUp() public {\n        testNumber = 42;\n    }\n\ntest: Functions prefixed with test are run as a test case.\n\n    function test_NumberIs42() public {\n        assertEq(testNumber, 42);\n    }\nA good practice is to use the pattern test_Revert[If|When]_Condition in combination with the expectRevert cheatcode (cheatcodes are explained in greater detail in the following section). Also, other testing practices can be found in the Guides section.\n\nNote: To use stdError constants (like arithmeticError in the example below), make sure to import StdError.sol:\nimport {stdError} from &quot;forge-std/StdError.sol&quot;;\n\nIn this way you know exactly what reverted and with which error:\n    function test_CannotSubtract43() public {\n        vm.expectRevert(stdError.arithmeticError);\n        testNumber -= 43;\n    }\n\nTests are deployed to 0xb4c79daB8f259C7Aee6E5b2Aa729821864227e84. If you deploy a contract within your test, then\n0xb4c...7e84 will be its deployer. If the contract deployed within a test gives special permissions to its deployer,\nsuch as Ownable.sol&#x27;s onlyOwner modifier, then the test contract 0xb4c...7e84 will have those permissions.\n\n⚠️ Note\nTest functions must have either external or public visibility. Functions declared as internal or\nprivate won&#x27;t be picked up by Forge, even if they are prefixed with test.\n\n","title":"Writing Tests","titles":[null]},"357":{"href":"/forge/tests/writing-tests#before-test-setups","html":"\n<p>Unit and fuzz tests are stateless and are executed as single transactions, meaning that the state modified by a test won&#x27;t be available for a different one (instead, they&#x27;ll use the same state created by <code>setUp</code> call).\nIt is possible to simulate multiple transactions in a single test, with a dependency tree, by implementing the <code>beforeTestSetup</code> function.</p>\n<ul>\n<li><code>beforeTestSetup</code>: Optional function that configures a set of transactions to be executed before test.</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> beforeTestSetup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes4</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> testSelector</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> beforeTestCalldata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<p>where</p>\n<ul>\n<li><code>bytes4 testSelector</code> is the selector of the test for which transactions are applied</li>\n<li><code>bytes[] memory beforeTestCalldata</code> is an array of arbitrary calldata applied before test execution</li>\n</ul>\n<blockquote>\n<p>💡 <strong>Tip</strong></p>\n<p>This setup can be used for chaining tests or for scenarios when a test needs certain transactions committed before test run (e.g. when using <code>selfdestruct</code>).\nThe test fails if any of the configured transaction reverts.</p>\n</blockquote>\n<p>For example, in contract below, <code>testC</code> is configured to use state modified by <code>testA</code> and <code>setB(uint256)</code> functions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ContractTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> beforeTestSetup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        bytes4</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> testSelector</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> beforeTestCalldata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (testSelector </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.testC.selector) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            beforeTestCalldata </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[](</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            beforeTestCalldata[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.testA.selector);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            beforeTestCalldata[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeWithSignature</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;setB(uint256)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testA</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setB</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        b </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testC</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(b, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nUnit and fuzz tests are stateless and are executed as single transactions, meaning that the state modified by a test won&#x27;t be available for a different one (instead, they&#x27;ll use the same state created by setUp call).\nIt is possible to simulate multiple transactions in a single test, with a dependency tree, by implementing the beforeTestSetup function.\n\nbeforeTestSetup: Optional function that configures a set of transactions to be executed before test.\n\nfunction beforeTestSetup(\n    bytes4 testSelector\n) public returns (bytes[] memory beforeTestCalldata)\nwhere\n\nbytes4 testSelector is the selector of the test for which transactions are applied\nbytes[] memory beforeTestCalldata is an array of arbitrary calldata applied before test execution\n\n\n💡 Tip\nThis setup can be used for chaining tests or for scenarios when a test needs certain transactions committed before test run (e.g. when using selfdestruct).\nThe test fails if any of the configured transaction reverts.\n\nFor example, in contract below, testC is configured to use state modified by testA and setB(uint256) functions:\ncontract ContractTest is Test {\n    uint256 a;\n    uint256 b;\n \n    function beforeTestSetup(\n        bytes4 testSelector\n    ) public pure returns (bytes[] memory beforeTestCalldata) {\n        if (testSelector == this.testC.selector) {\n            beforeTestCalldata = new bytes[](2);\n            beforeTestCalldata[0] = abi.encodePacked(this.testA.selector);\n            beforeTestCalldata[1] = abi.encodeWithSignature(&quot;setB(uint256)&quot;, 1);\n        }\n    }\n \n    function testA() public {\n        require(a == 0);\n        a += 1;\n    }\n \n    function setB(uint256 value) public {\n        b = value;\n    }\n \n    function testC() public {\n        assertEq(a, 1);\n        assertEq(b, 1);\n    }\n}\n","title":"Before test setups","titles":[null,"Writing Tests"]},"358":{"href":"/forge/tests/writing-tests#shared-setups","html":"\n<p>It is possible to use shared setups by creating helper abstract contracts and inheriting them in your test contracts:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">abstract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> HelperContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> constant</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> IMPORTANT_ADDRESS </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x543d</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">...;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    SomeContract someContract;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    constructor</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {...}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyContractTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">HelperContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        someContract </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SomeContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, IMPORTANT_ADDRESS);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyOtherContractTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">HelperContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        someContract </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SomeContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, IMPORTANT_ADDRESS);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<br/>\n<aside data-callout=\"tip\"><p>Use the <a href=\"/reference/cheatcodes/get-code\"><code>getCode</code></a> cheatcode to deploy contracts with incompatible Solidity versions.</p></aside>","isPage":false,"text":"\nIt is possible to use shared setups by creating helper abstract contracts and inheriting them in your test contracts:\nabstract contract HelperContract {\n    address constant IMPORTANT_ADDRESS = 0x543d...;\n    SomeContract someContract;\n    constructor() {...}\n}\n \ncontract MyContractTest is Test, HelperContract {\n    function setUp() public {\n        someContract = new SomeContract(0, IMPORTANT_ADDRESS);\n        ...\n    }\n}\n \ncontract MyOtherContractTest is Test, HelperContract {\n    function setUp() public {\n        someContract = new SomeContract(1000, IMPORTANT_ADDRESS);\n        ...\n    }\n}\n\nUse the getCode cheatcode to deploy contracts with incompatible Solidity versions.","title":"Shared setups","titles":[null,"Writing Tests"]},"359":{"href":"/guides/best-practices/commenting#commenting","html":"\n<ol>\n<li>For public or external methods and variables, use <a href=\"https://docs.soliditylang.org/en/latest/natspec-format.html\">NatSpec</a> comments.</li>\n</ol>\n<ul>\n<li><code>forge doc</code> will parse these to autogenerate documentation.</li>\n<li>Etherscan will display them in the contract UI.</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>For simple NatSpec comments, consider just documenting params in the docstring, such as <code>/// @notice Returns the sum of `x` and `y`.</code>, instead of using <code>@param</code> tags.</p>\n</li>\n<li>\n<p>For complex NatSpec comments, consider using a tool like <a href=\"https://plantuml.com/ascii-art\">PlantUML</a> to generate ASCII art diagrams to help explain complex aspects of the codebase.</p>\n</li>\n<li>\n<p>Any markdown in your comments will carry over properly when generating docs with <code>forge doc</code>, so structure comments with markdown when useful.</p>\n<ul>\n<li>Good: <code>/// @notice Returns the sum of `x` and `y`.</code></li>\n<li>Bad: <code>/// @notice Returns the sum of x and y.</code></li>\n</ul>\n</li>\n</ol>","isPage":true,"text":"\n\nFor public or external methods and variables, use NatSpec comments.\n\n\nforge doc will parse these to autogenerate documentation.\nEtherscan will display them in the contract UI.\n\n\n\nFor simple NatSpec comments, consider just documenting params in the docstring, such as /// @notice Returns the sum of `x` and `y`., instead of using @param tags.\n\n\nFor complex NatSpec comments, consider using a tool like PlantUML to generate ASCII art diagrams to help explain complex aspects of the codebase.\n\n\nAny markdown in your comments will carry over properly when generating docs with forge doc, so structure comments with markdown when useful.\n\nGood: /// @notice Returns the sum of `x` and `y`.\nBad: /// @notice Returns the sum of x and y.\n\n\n","title":"Commenting","titles":[null]},"360":{"href":"/guides/best-practices/key-management#key-management","html":"\n<p>Script execution requires a private key to send transactions. This key controls all funds in the account, so it must be protected carefully. There are a few options for securely broadcasting transactions through a script:</p>\n","isPage":true,"text":"\nScript execution requires a private key to send transactions. This key controls all funds in the account, so it must be protected carefully. There are a few options for securely broadcasting transactions through a script:\n","title":"Key Management","titles":[null]},"361":{"href":"/guides/best-practices/key-management#using-hardware-wallet","html":"\n<p>Hardware wallets such as Ledger and Trezor store seed phrases in a secure enclave. Forge can send a raw transaction to the wallet, and the wallet will sign the transaction. The signed transaction is returned to forge and broadcaster. This way, private keys never leave the hardware wallet, making this a very secure approach. To use a hardware wallet with scripts, see the <code>--ledger</code> and <code>--trezor</code> <a href=\"/forge/reference/forge-script\">flags</a>.</p>\n","isPage":false,"text":"\nHardware wallets such as Ledger and Trezor store seed phrases in a secure enclave. Forge can send a raw transaction to the wallet, and the wallet will sign the transaction. The signed transaction is returned to forge and broadcaster. This way, private keys never leave the hardware wallet, making this a very secure approach. To use a hardware wallet with scripts, see the --ledger and --trezor flags.\n","title":"Using Hardware Wallet","titles":[null,"Key Management"]},"362":{"href":"/guides/best-practices/key-management#using-private-keys","html":"\n<p>With this approach you expose a private key on your machine, making it riskier than the above option. Therefore the suggested way to directly use a private key is to generate a new wallet for executing the script, and only send that wallet enough funds to run the script. Then, stop using the key after the script is complete. This way, if the key is compromised, only the funds on this throwaway key are lost, as opposed to losing everything in your wallet.</p>\n<ol>\n<li>\n<p>It&#x27;s very important that your scripts or contracts don&#x27;t rely on <code>msg.sender</code> since the sender will not be an account that&#x27;s meant to be used again. For example, if a deploy script configures a contract owner, ensure the owner a constructor argument and not set to <code>msg.sender</code>.</p>\n</li>\n<li>\n<p>To use this approach, you can either store the private key in an environment variable and use cheat codes to read it in, or use the <code>--private-key</code> flag to directly provide the key.</p>\n</li>\n</ol>\n","isPage":false,"text":"\nWith this approach you expose a private key on your machine, making it riskier than the above option. Therefore the suggested way to directly use a private key is to generate a new wallet for executing the script, and only send that wallet enough funds to run the script. Then, stop using the key after the script is complete. This way, if the key is compromised, only the funds on this throwaway key are lost, as opposed to losing everything in your wallet.\n\n\nIt&#x27;s very important that your scripts or contracts don&#x27;t rely on msg.sender since the sender will not be an account that&#x27;s meant to be used again. For example, if a deploy script configures a contract owner, ensure the owner a constructor argument and not set to msg.sender.\n\n\nTo use this approach, you can either store the private key in an environment variable and use cheat codes to read it in, or use the --private-key flag to directly provide the key.\n\n\n","title":"Using Private Keys","titles":[null,"Key Management"]},"363":{"href":"/guides/best-practices/key-management#using-a-keystore","html":"\n<p>This can be thought of as a middle ground between the above two approaches. With <a href=\"/cast/reference/cast-wallet-import\"><code>cast wallet import</code></a> you import a private key and encrypt it with a password. This still temporarily exposes your private key on your machine, but it becomes encrypted and you&#x27;ll provide the password to decrypt it to run a script.</p>\n<p>Additional security precautions when using scripts:</p>\n<ol>\n<li>Use a separate wallet for testing and development, instead of using your main wallet with real funds. Diversifying minimizes the risk of losing funds if your development wallet is compromised.</li>\n<li>If you accidentally push a private key or seed phrase to GitHub, or expose it online via other means—even momentarily—treat it as compromised. Act immediately to transfer your funds to a safer destination.</li>\n<li>When in doubt about whether a wallet contains real funds or not, assume it does. Always be certain about a wallet&#x27;s balances and status when using it for development purposes. Use <a href=\"https://blockscan.com/\">blockscan</a> to easily check many chains to see where the address has been used.</li>\n<li>Remember that adding an account in wallets like Metamask generates a new private key. However, that private key is derived from the same mnemonic as the other accounts generated in that wallet. Therefore, never expose the mnemonic as it may compromise all of your accounts.</li>\n</ol>\n<p><em>This was section was inspired by <a href=\"https://github.com/smartcontractkit/full-blockchain-solidity-course-js/discussions/5\">The Pledge</a> from <a href=\"https://twitter.com/PatrickAlphaC\">Patrick Collins</a>.</em></p>","isPage":false,"text":"\nThis can be thought of as a middle ground between the above two approaches. With cast wallet import you import a private key and encrypt it with a password. This still temporarily exposes your private key on your machine, but it becomes encrypted and you&#x27;ll provide the password to decrypt it to run a script.\nAdditional security precautions when using scripts:\n\nUse a separate wallet for testing and development, instead of using your main wallet with real funds. Diversifying minimizes the risk of losing funds if your development wallet is compromised.\nIf you accidentally push a private key or seed phrase to GitHub, or expose it online via other means—even momentarily—treat it as compromised. Act immediately to transfer your funds to a safer destination.\nWhen in doubt about whether a wallet contains real funds or not, assume it does. Always be certain about a wallet&#x27;s balances and status when using it for development purposes. Use blockscan to easily check many chains to see where the address has been used.\nRemember that adding an account in wallets like Metamask generates a new private key. However, that private key is derived from the same mnemonic as the other accounts generated in that wallet. Therefore, never expose the mnemonic as it may compromise all of your accounts.\n\nThis was section was inspired by The Pledge from Patrick Collins.","title":"Using a keystore","titles":[null,"Key Management"]},"364":{"href":"/guides/best-practices/security#security-practices","html":"\n<p>Thanks to <a href=\"https://twitter.com/samczsun\">@samsczun</a>&#x27;s <a href=\"https://www.youtube.com/watch?v=Wm3t8Fuiy1E\">How Do You Even Write Secure Code Anyways</a> talk for the tips in this section and the following section.</p>\n<ul>\n<li>Don&#x27;t optimize for coverage, optimize for well thought-out tests.</li>\n<li>Write positive and negative unit tests.\n<ul>\n<li>Write <em>positive</em> unit tests for things that the code should handle. Validate <em>all</em> state that changes from these tests.</li>\n<li>Write <em>negative</em> unit tests for things that the code should <em>not</em> handle. It&#x27;s helpful to follow up (as an adjacent test) with the positive test and make the change that it needs to pass.</li>\n<li>Each code path should have its own unit test.</li>\n</ul>\n</li>\n<li>Write integration tests to test entire features.</li>\n<li>Write fork tests to verify the correct behavior with existing deployed contract.</li>\n</ul>\n","isPage":true,"text":"\nThanks to @samsczun&#x27;s How Do You Even Write Secure Code Anyways talk for the tips in this section and the following section.\n\nDon&#x27;t optimize for coverage, optimize for well thought-out tests.\nWrite positive and negative unit tests.\n\nWrite positive unit tests for things that the code should handle. Validate all state that changes from these tests.\nWrite negative unit tests for things that the code should not handle. It&#x27;s helpful to follow up (as an adjacent test) with the positive test and make the change that it needs to pass.\nEach code path should have its own unit test.\n\n\nWrite integration tests to test entire features.\nWrite fork tests to verify the correct behavior with existing deployed contract.\n\n","title":"Security Practices","titles":[null]},"365":{"href":"/guides/best-practices/security#taint-analysis","html":"\n<p>When testing, you should prioritize functions that an attacker can affect, that means functions that accept some kind of user input. These are called <em>sources</em>.</p>\n<p>Consider that input data as <em>tainted</em> until it has been checked by the code, at which point it&#x27;s considered <em>clean</em>.</p>\n<p>A <em>sink</em> is a part of the code where some important operation is happening. For example, in MakerDAO that would be <code>vat.sol</code>.</p>\n<p>You should <em>ensure</em> that no <em>tainted</em> data ever reaches a <em>sink</em>. That means that all data that find themselves in the sink, should, at some point, have been checked by you. So, you need to define what the data <em>should</em> be and then make sure your checks <em>ensure</em> that the data will be how you expect it to be.</p>\n<p>Write more secure code and better tests using these as references to learn from:</p>\n<ul>\n<li><a href=\"https://github.com/transmissions11/solcurity\">transmissions11/solcurity</a></li>\n<li><a href=\"https://github.com/nascentxyz/simple-security-toolkit\">nascentxyz/simple-security-toolkit</a></li>\n</ul>","isPage":false,"text":"\nWhen testing, you should prioritize functions that an attacker can affect, that means functions that accept some kind of user input. These are called sources.\nConsider that input data as tainted until it has been checked by the code, at which point it&#x27;s considered clean.\nA sink is a part of the code where some important operation is happening. For example, in MakerDAO that would be vat.sol.\nYou should ensure that no tainted data ever reaches a sink. That means that all data that find themselves in the sink, should, at some point, have been checked by you. So, you need to define what the data should be and then make sure your checks ensure that the data will be how you expect it to be.\nWrite more secure code and better tests using these as references to learn from:\n\ntransmissions11/solcurity\nnascentxyz/simple-security-toolkit\n","title":"Taint Analysis","titles":[null,"Security Practices"]},"366":{"href":"/guides/best-practices/writing-contracts#general-contract-guidance","html":"\n","isPage":true,"text":"\n","title":"General Contract Guidance","titles":[null]},"367":{"href":"/guides/best-practices/writing-contracts#named-imports","html":"\n<p>Always use named import syntax, don&#x27;t import full files. This restricts what is being imported to just the named items, not everything in the file. Importing full files can result in solc complaining about duplicate definitions and slither erroring, especially as repos grow and have more dependencies with overlapping names.</p>\n<ul>\n<li>Good: <code>import {MyContract} from &quot;src/MyContract.sol&quot;</code> to only import <code>MyContract</code>.</li>\n<li>Bad: <code>import &quot;src/MyContract.sol&quot;</code> imports everything in <code>MyContract.sol</code>. (Importing <code>forge-std/Test</code> or <code>Script</code> can be an exception here, so you get the console library, etc).</li>\n</ul>\n","isPage":false,"text":"\nAlways use named import syntax, don&#x27;t import full files. This restricts what is being imported to just the named items, not everything in the file. Importing full files can result in solc complaining about duplicate definitions and slither erroring, especially as repos grow and have more dependencies with overlapping names.\n\nGood: import {MyContract} from &quot;src/MyContract.sol&quot; to only import MyContract.\nBad: import &quot;src/MyContract.sol&quot; imports everything in MyContract.sol. (Importing forge-std/Test or Script can be an exception here, so you get the console library, etc).\n\n","title":"Named Imports","titles":[null,"General Contract Guidance"]},"368":{"href":"/guides/best-practices/writing-contracts#absolute-vs-relative-imports","html":"\n<p>Note the tradeoffs between absolute and relative paths for imports (where absolute paths are relative to the repo root, e.g. <code>&quot;src/interfaces/IERC20.sol&quot;</code>), and choose the best approach for your project:</p>\n<ul>\n<li>Absolute paths make it easier to see where files are from and reduce churn when moving files around.</li>\n<li>Relative paths make it more likely your editor can provide features like linting and autocomplete, since editors/extensions may not understand your remappings.</li>\n</ul>\n","isPage":false,"text":"\nNote the tradeoffs between absolute and relative paths for imports (where absolute paths are relative to the repo root, e.g. &quot;src/interfaces/IERC20.sol&quot;), and choose the best approach for your project:\n\nAbsolute paths make it easier to see where files are from and reduce churn when moving files around.\nRelative paths make it more likely your editor can provide features like linting and autocomplete, since editors/extensions may not understand your remappings.\n\n","title":"Absolute vs Relative Imports","titles":[null,"General Contract Guidance"]},"369":{"href":"/guides/best-practices/writing-contracts#copying-libraries-from-dependencies","html":"\n<p>If copying a library from a dependency (instead of importing it), use the <code>ignore = []</code> option in the config file to avoid formatting that file. This makes diffing it against the original simpler for reviewers and auditors.</p>\n","isPage":false,"text":"\nIf copying a library from a dependency (instead of importing it), use the ignore = [] option in the config file to avoid formatting that file. This makes diffing it against the original simpler for reviewers and auditors.\n","title":"Copying Libraries from Dependencies","titles":[null,"General Contract Guidance"]},"370":{"href":"/guides/best-practices/writing-contracts#formatting","html":"\n<p>Similarly, feel free to use the <code>// forgefmt: disable-*</code> comment directives to ignore lines/sections of code that look better with manual formatting. Supported values for <code>*</code> are:</p>\n<ul>\n<li><code>disable-line</code></li>\n<li><code>disable-next-line</code></li>\n<li><code>disable-next-item</code></li>\n<li><code>disable-start</code></li>\n<li><code>disable-end</code></li>\n</ul>\n","isPage":false,"text":"\nSimilarly, feel free to use the // forgefmt: disable-* comment directives to ignore lines/sections of code that look better with manual formatting. Supported values for * are:\n\ndisable-line\ndisable-next-line\ndisable-next-item\ndisable-start\ndisable-end\n\n","title":"Formatting","titles":[null,"General Contract Guidance"]},"371":{"href":"/guides/best-practices/writing-contracts#write-secure-code","html":"\n<p>Additional best practices from <a href=\"https://twitter.com/samczsun\">samsczun</a>&#x27;s <a href=\"https://www.youtube.com/watch?v=Wm3t8Fuiy1E\">How Do You Even Write Secure Code Anyways</a> talk:</p>\n<ul>\n<li>Use descriptive variable names.</li>\n<li>Limit the number of active variables.</li>\n<li>No redundant logic.</li>\n<li>Early exit as much as possible to reduce mental load when seeing the code.</li>\n<li>Related code should be placed near each other.</li>\n<li>Delete unused code.</li>\n</ul>","isPage":false,"text":"\nAdditional best practices from samsczun&#x27;s How Do You Even Write Secure Code Anyways talk:\n\nUse descriptive variable names.\nLimit the number of active variables.\nNo redundant logic.\nEarly exit as much as possible to reduce mental load when seeing the code.\nRelated code should be placed near each other.\nDelete unused code.\n","title":"Write Secure Code","titles":[null,"General Contract Guidance"]},"372":{"href":"/guides/best-practices/writing-scripts#scripting-practices","html":"\n","isPage":true,"text":"\n","title":"Scripting Practices","titles":[null]},"373":{"href":"/guides/best-practices/writing-scripts#use-run-as-the-default-function","html":"\n<p>Stick with <code>run</code> as the default function name for clarity.</p>\n","isPage":false,"text":"\nStick with run as the default function name for clarity.\n","title":"Use run as the default function","titles":[null,"Scripting Practices"]},"374":{"href":"/guides/best-practices/writing-scripts#assign-correct-function-visibility","html":"\n<p>Any methods that are not intended to be called directly in the script should be <code>internal</code> or <code>private</code>. Generally the only public method should be <code>run</code>, as it&#x27;s easier to read/understand when each script file just does one thing.</p>\n","isPage":false,"text":"\nAny methods that are not intended to be called directly in the script should be internal or private. Generally the only public method should be run, as it&#x27;s easier to read/understand when each script file just does one thing.\n","title":"Assign correct function visibility","titles":[null,"Scripting Practices"]},"375":{"href":"/guides/best-practices/writing-scripts#naming-script-files","html":"\n<p>Consider prefixing scripts with a number based on the order they&#x27;re intended to be run over the protocol&#x27;s lifecycle. For example, <code>01_Deploy.s.sol</code>, <code>02_TransferOwnership.s.sol</code>. This makes things more self-documenting. This may not always apply depending on your project.</p>\n","isPage":false,"text":"\nConsider prefixing scripts with a number based on the order they&#x27;re intended to be run over the protocol&#x27;s lifecycle. For example, 01_Deploy.s.sol, 02_TransferOwnership.s.sol. This makes things more self-documenting. This may not always apply depending on your project.\n","title":"Naming script files","titles":[null,"Scripting Practices"]},"376":{"href":"/guides/best-practices/writing-scripts#test-your-scripts","html":"\n<ul>\n<li>Unit test them like you would test normal contracts, by writing tests that assert on the state changes made from running the script.</li>\n<li>Write your deploy script and scaffold tests by running that script. Then, run all tests against the state resulting from your production deployment script. This is a great way to gain confidence in a deploy script.</li>\n<li>Within your script itself, use <code>require</code> statements (or the <code>if (condition) revert()</code> pattern if you prefer) to stop execution of your script if something is wrong. For example, <code>require(computedAddress == deployedAddress, &quot;address mismatch&quot;)</code>. Using the <code>assertEq</code> helpers instead will not stop execution.</li>\n</ul>\n","isPage":false,"text":"\n\nUnit test them like you would test normal contracts, by writing tests that assert on the state changes made from running the script.\nWrite your deploy script and scaffold tests by running that script. Then, run all tests against the state resulting from your production deployment script. This is a great way to gain confidence in a deploy script.\nWithin your script itself, use require statements (or the if (condition) revert() pattern if you prefer) to stop execution of your script if something is wrong. For example, require(computedAddress == deployedAddress, &quot;address mismatch&quot;). Using the assertEq helpers instead will not stop execution.\n\n","title":"Test your scripts","titles":[null,"Scripting Practices"]},"377":{"href":"/guides/best-practices/writing-scripts#audit-broadcast-transactions","html":"\n<p><strong>Carefully audit which transactions are broadcast</strong>. Transactions not broadcast are still executed in the context of a test, so missing broadcasts or extra broadcasts are easy sources of error in the previous step.</p>\n","isPage":false,"text":"\nCarefully audit which transactions are broadcast. Transactions not broadcast are still executed in the context of a test, so missing broadcasts or extra broadcasts are easy sources of error in the previous step.\n","title":"Audit Broadcast Transactions","titles":[null,"Scripting Practices"]},"378":{"href":"/guides/best-practices/writing-scripts#avoid-getting-frontrun","html":"\n<p><strong>Watch out for frontrunning</strong>. Forge simulates your script, generates transaction data from the simulation results, then broadcasts the transactions. Make sure your script is robust against chain-state changing between the simulation and broadcast. A sample script vulnerable to this is below:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Pseudo-code, may not compile.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> VulnerableScript</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">   function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">      // Transaction 1: Deploy a new Gnosis Safe with CREATE.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">      // Because we&#x27;re using CREATE instead of CREATE2, the address of the new</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">      // Safe is a function of the nonce of the gnosisSafeProxyFactory.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">      address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mySafe </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gnosisSafeProxyFactory.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createProxy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(singleton, data);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">      // Transaction 2: Send tokens to the new Safe.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">      // We know the address of mySafe is a function of the nonce of the</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">      // gnosisSafeProxyFactory. If someone else deploys a Gnosis Safe between</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">      // the simulation and broadcast, the address of mySafe will be different,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">      // and this script will send 1000 DAI to the other person&#x27;s Safe. In this</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">      // case, we can protect ourselves from this by using CREATE2 instead of</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">      // CREATE, but every situation may have different solutions.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      dai.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(mySafe, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000e18</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">   }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nWatch out for frontrunning. Forge simulates your script, generates transaction data from the simulation results, then broadcasts the transactions. Make sure your script is robust against chain-state changing between the simulation and broadcast. A sample script vulnerable to this is below:\n// Pseudo-code, may not compile.\ncontract VulnerableScript is Script {\n   function run() public {\n      vm.startBroadcast();\n \n      // Transaction 1: Deploy a new Gnosis Safe with CREATE.\n      // Because we&#x27;re using CREATE instead of CREATE2, the address of the new\n      // Safe is a function of the nonce of the gnosisSafeProxyFactory.\n      address mySafe = gnosisSafeProxyFactory.createProxy(singleton, data);\n \n      // Transaction 2: Send tokens to the new Safe.\n      // We know the address of mySafe is a function of the nonce of the\n      // gnosisSafeProxyFactory. If someone else deploys a Gnosis Safe between\n      // the simulation and broadcast, the address of mySafe will be different,\n      // and this script will send 1000 DAI to the other person&#x27;s Safe. In this\n      // case, we can protect ourselves from this by using CREATE2 instead of\n      // CREATE, but every situation may have different solutions.\n      dai.transfer(mySafe, 1000e18);\n \n      vm.stopBroadcast();\n   }\n}\n","title":"Avoid getting frontrun","titles":[null,"Scripting Practices"]},"379":{"href":"/guides/best-practices/writing-scripts#reading-json-files","html":"\n<p>For scripts that read from JSON input files, put the input files in <code>script/input/&lt;chainID&gt;/&lt;description&gt;.json</code>. Then have <code>run(string memory input)</code> (or take multiple string inputs if you need to read from multiple files) as the script&#x27;s signature, and use the below method to read the JSON file.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> readInput</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> input</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> inputDir </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">concat</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">projectRoot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;/script/input/&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chainDir </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">concat</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.chainid), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;/&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> file </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">concat</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(input, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;.json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">readFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">concat</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(inputDir, chainDir, file));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nFor scripts that read from JSON input files, put the input files in script/input/&lt;chainID&gt;/&lt;description&gt;.json. Then have run(string memory input) (or take multiple string inputs if you need to read from multiple files) as the script&#x27;s signature, and use the below method to read the JSON file.\nfunction readInput(string memory input) internal returns (string memory) {\n  string memory inputDir = string.concat(vm.projectRoot(), &quot;/script/input/&quot;);\n  string memory chainDir = string.concat(vm.toString(block.chainid), &quot;/&quot;);\n  string memory file = string.concat(input, &quot;.json&quot;);\n  return vm.readFile(string.concat(inputDir, chainDir, file));\n}","title":"Reading JSON files","titles":[null,"Scripting Practices"]},"380":{"href":"/guides/best-practices/writing-tests#tests","html":"\n<hr/>\n","isPage":true,"text":"\n\n","title":"Tests","titles":[null]},"381":{"href":"/guides/best-practices/writing-tests#general-test-guidance","html":"\n","isPage":false,"text":"\n","title":"General Test Guidance","titles":[null,"Tests"]},"382":{"href":"/guides/best-practices/writing-tests#naming-test-files","html":"\n<p>For testing <code>MyContract.sol</code>, the test file should be <code>MyContract.t.sol</code>. For testing <code>MyScript.s.sol</code>, the test file should be <code>MyScript.t.sol</code>.</p>\n<ul>\n<li>If the contract is big and you want to split it over multiple files, group them logically like <code>MyContract.owner.t.sol</code>, <code>MyContract.deposits.t.sol</code>, etc.</li>\n</ul>\n","isPage":false,"text":"\nFor testing MyContract.sol, the test file should be MyContract.t.sol. For testing MyScript.s.sol, the test file should be MyScript.t.sol.\n\nIf the contract is big and you want to split it over multiple files, group them logically like MyContract.owner.t.sol, MyContract.deposits.t.sol, etc.\n\n","title":"Naming test files","titles":[null,"Tests","General Test Guidance"]},"383":{"href":"/guides/best-practices/writing-tests#no-assertions-in-setup","html":"\n<p>Never make assertions in the <code>setUp</code> function, instead use a dedicated test like <code>test_SetUpState()</code> if you need to ensure your <code>setUp</code> function does what you expected. More info on why in <a href=\"https://github.com/foundry-rs/foundry/issues/1291\">foundry-rs/foundry#1291</a></p>\n","isPage":false,"text":"\nNever make assertions in the setUp function, instead use a dedicated test like test_SetUpState() if you need to ensure your setUp function does what you expected. More info on why in foundry-rs/foundry#1291\n","title":"No assertions in setUp","titles":[null,"Tests","General Test Guidance"]},"384":{"href":"/guides/best-practices/writing-tests#organizing-and-naming-tests","html":"\n<p>For unit tests, there are two major ways to organize the tests:</p>\n<ol>\n<li>\n<p>Treat contracts as describe blocks:</p>\n<ul>\n<li><code>contract Add</code> holds all unit tests for the <code>add</code> method of <code>MyContract</code>.</li>\n<li><code>contract Supply</code> holds all tests for the <code>supply</code> method.</li>\n<li><code>contract Constructor</code> hold all tests for the constructor.</li>\n<li>A benefit of this approach is that smaller contracts should compile faster than large ones, so this approach of many small contracts should save time as test suites get large.</li>\n</ul>\n</li>\n<li>\n<p>Have a Test contract per contract-under-test, with as many utilities and fixtures as you want:</p>\n<ul>\n<li><code>contract MyContractTest</code> holds all unit tests for <code>MyContract</code>.</li>\n<li><code>function test_add_AddsTwoNumbers()</code> lives within <code>MyContractTest</code> to test the <code>add</code> method.</li>\n<li><code>function test_supply_UsersCanSupplyTokens()</code> also lives within <code>MyContractTest</code> to test the <code>supply</code> method.</li>\n<li>A benefit of this approach is that test output is grouped by contract-under-test, which makes it easier to quickly see where failures are.</li>\n</ul>\n</li>\n<li>\n<p>Some general guidance for all kinds tests:</p>\n<ul>\n<li>Test contracts/functions should be written in the same order as the original functions in the contract-under-test.</li>\n<li>All unit tests that test the same function should live serially in the test file.</li>\n<li>Test contracts can inherit from any helper contracts you want. For example <code>contract MyContractTest</code> tests <code>MyContract</code>, but may inherit from forge-std&#x27;s <code>Test</code>, as well as e.g. your own <code>TestUtilities</code> helper contract.</li>\n</ul>\n</li>\n<li>\n<p>Integration tests should live in the same <code>test</code> directory, with a clear naming convention. These may be in dedicated files, or they may live next to related unit tests in existing test files.</p>\n</li>\n<li>\n<p>Be consistent with test naming, as it&#x27;s helpful for filtering tests (e.g. for gas reports you might want to filter out revert tests). When combining naming conventions, keep them alphabetical. Below is a sample of valid names. A comprehensive list of valid and invalid examples can be found <a href=\"https://github.com/ScopeLift/scopelint/blob/1857e3940bfe92ac5a136827374f4b27ff083971/src/check/validators/test_names.rs#L106-L143\">here</a>.</p>\n<ul>\n<li><code>test_Description</code> for standard tests.</li>\n<li><code>testFuzz_Description</code> for fuzz tests.</li>\n<li><code>test_Revert[If|When]_Condition</code> for tests expecting a revert.</li>\n<li><code>testFork_Description</code> for tests that fork from a network.</li>\n<li><code>testForkFuzz_Revert[If|When]_Condition</code> for a fuzz test that forks and expects a revert.</li>\n</ul>\n</li>\n<li>\n<p>Name your constants and immutables using <code>ALL_CAPS_WITH_UNDERSCORES</code>, to make it easier to distinguish them from variables and functions.</p>\n</li>\n<li>\n<p>When using assertions like <code>assertEq</code>, consider leveraging the last string param to make it easier to identify failures. These can be kept brief, or even just be numbers—they basically serve as a replacement for showing line numbers of the revert, e.g. <code>assertEq(x, y, &quot;1&quot;)</code> or <code>assertEq(x, y, &quot;sum1&quot;)</code>. <em>(Note: <a href=\"https://github.com/foundry-rs/foundry/issues/2328\">foundry-rs/foundry#2328</a> tracks integrating this natively).</em></p>\n</li>\n<li>\n<p>When testing events, prefer setting all <code>expectEmit</code> arguments to <code>true</code>, i.e. <code>vm.expectEmit(true, true, true, true)</code> or <code>vm.expectEmit()</code>. Benefits:</p>\n<ul>\n<li>This ensures you test everything in your event.</li>\n<li>If you add a topic (i.e. a new indexed parameter), it&#x27;s now tested by default.</li>\n<li>Even if you only have 1 topic, the extra <code>true</code> arguments don&#x27;t hurt.</li>\n</ul>\n</li>\n<li>\n<p>Remember to write invariant tests! For the assertion string, use a verbose english description of the invariant: <code>assertEq(x + y, z, &quot;Invariant violated: the sum of x and y must always equal z&quot;)</code>.</p>\n</li>\n</ol>\n","isPage":false,"text":"\nFor unit tests, there are two major ways to organize the tests:\n\n\nTreat contracts as describe blocks:\n\ncontract Add holds all unit tests for the add method of MyContract.\ncontract Supply holds all tests for the supply method.\ncontract Constructor hold all tests for the constructor.\nA benefit of this approach is that smaller contracts should compile faster than large ones, so this approach of many small contracts should save time as test suites get large.\n\n\n\nHave a Test contract per contract-under-test, with as many utilities and fixtures as you want:\n\ncontract MyContractTest holds all unit tests for MyContract.\nfunction test_add_AddsTwoNumbers() lives within MyContractTest to test the add method.\nfunction test_supply_UsersCanSupplyTokens() also lives within MyContractTest to test the supply method.\nA benefit of this approach is that test output is grouped by contract-under-test, which makes it easier to quickly see where failures are.\n\n\n\nSome general guidance for all kinds tests:\n\nTest contracts/functions should be written in the same order as the original functions in the contract-under-test.\nAll unit tests that test the same function should live serially in the test file.\nTest contracts can inherit from any helper contracts you want. For example contract MyContractTest tests MyContract, but may inherit from forge-std&#x27;s Test, as well as e.g. your own TestUtilities helper contract.\n\n\n\nIntegration tests should live in the same test directory, with a clear naming convention. These may be in dedicated files, or they may live next to related unit tests in existing test files.\n\n\nBe consistent with test naming, as it&#x27;s helpful for filtering tests (e.g. for gas reports you might want to filter out revert tests). When combining naming conventions, keep them alphabetical. Below is a sample of valid names. A comprehensive list of valid and invalid examples can be found here.\n\ntest_Description for standard tests.\ntestFuzz_Description for fuzz tests.\ntest_Revert[If|When]_Condition for tests expecting a revert.\ntestFork_Description for tests that fork from a network.\ntestForkFuzz_Revert[If|When]_Condition for a fuzz test that forks and expects a revert.\n\n\n\nName your constants and immutables using ALL_CAPS_WITH_UNDERSCORES, to make it easier to distinguish them from variables and functions.\n\n\nWhen using assertions like assertEq, consider leveraging the last string param to make it easier to identify failures. These can be kept brief, or even just be numbers—they basically serve as a replacement for showing line numbers of the revert, e.g. assertEq(x, y, &quot;1&quot;) or assertEq(x, y, &quot;sum1&quot;). (Note: foundry-rs/foundry#2328 tracks integrating this natively).\n\n\nWhen testing events, prefer setting all expectEmit arguments to true, i.e. vm.expectEmit(true, true, true, true) or vm.expectEmit(). Benefits:\n\nThis ensures you test everything in your event.\nIf you add a topic (i.e. a new indexed parameter), it&#x27;s now tested by default.\nEven if you only have 1 topic, the extra true arguments don&#x27;t hurt.\n\n\n\nRemember to write invariant tests! For the assertion string, use a verbose english description of the invariant: assertEq(x + y, z, &quot;Invariant violated: the sum of x and y must always equal z&quot;).\n\n\n","title":"Organizing and Naming tests","titles":[null,"Tests","General Test Guidance"]},"385":{"href":"/guides/best-practices/writing-tests#fork-tests","html":"\n","isPage":false,"text":"\n","title":"Fork Tests","titles":[null,"Tests"]},"386":{"href":"/guides/best-practices/writing-tests#use-fork-tests-liberally","html":"\n<p>Don&#x27;t feel like you need to give forks tests special treatment, and use them liberally:</p>\n<ul>\n<li>Mocks are <em>required</em> in closed-source web2 development—you have to mock API responses because the code for that API isn&#x27;t open source so you cannot just run it locally. But for blockchains that&#x27;s not true: any code you&#x27;re interacting with that&#x27;s already deployed can be locally executed and even modified for free. So why introduce the risk of a wrong mock if you don&#x27;t need to?</li>\n<li>A common reason to avoid fork tests and prefer mocks is that fork tests are slow. But this is not always true. By pinning to a block number, forge caches RPC responses so only the first run is slower, and subsequent runs are significantly faster. See <a href=\"https://github.com/mds1/convex-shutdown-simulation/\">this benchmark</a>, where it took forge 7 minutes for the first run with a remote RPC, but only half a second once data was cached. <a href=\"https://alchemy.com\">Alchemy</a>, <a href=\"https://infura.io\">Infura</a> and <a href=\"https://tenderly.co\">Tenderly</a> offer free archive data, so pinning to a block shouldn&#x27;t be problematic.</li>\n<li>Note that the <a href=\"https://github.com/foundry-rs/foundry-toolchain\">foundry-toolchain</a> GitHub Action will cache RPC responses in CI by default, and it will also update the cache when you update your fork tests.</li>\n</ul>\n","isPage":false,"text":"\nDon&#x27;t feel like you need to give forks tests special treatment, and use them liberally:\n\nMocks are required in closed-source web2 development—you have to mock API responses because the code for that API isn&#x27;t open source so you cannot just run it locally. But for blockchains that&#x27;s not true: any code you&#x27;re interacting with that&#x27;s already deployed can be locally executed and even modified for free. So why introduce the risk of a wrong mock if you don&#x27;t need to?\nA common reason to avoid fork tests and prefer mocks is that fork tests are slow. But this is not always true. By pinning to a block number, forge caches RPC responses so only the first run is slower, and subsequent runs are significantly faster. See this benchmark, where it took forge 7 minutes for the first run with a remote RPC, but only half a second once data was cached. Alchemy, Infura and Tenderly offer free archive data, so pinning to a block shouldn&#x27;t be problematic.\nNote that the foundry-toolchain GitHub Action will cache RPC responses in CI by default, and it will also update the cache when you update your fork tests.\n\n","title":"Use fork tests liberally","titles":[null,"Tests","Fork Tests"]},"387":{"href":"/guides/best-practices/writing-tests#minimize-rpc-requests","html":"\n<p>Be careful with fuzz tests on a fork to avoid burning through RPC requests with non-deterministic fuzzing. If the input to your fork fuzz test is some parameter which is used in an RPC call to fetch data (e.g. querying the token balance of an address), each run of a fuzz test uses at least 1 RPC request, so you&#x27;ll quickly hit rate limits or usage limits. Solutions to consider:</p>\n<ul>\n<li>Replace multiple RPC calls with a single <a href=\"https://github.com/mds1/multicall\">multicall</a>.</li>\n<li>Specify a fuzz/invariant <a href=\"/config/reference/testing#seed\">seed</a>: this makes sure each <code>forge test</code> invocation uses the same fuzz inputs. RPC results are cached locally, so you&#x27;ll only query the node the first time.</li>\n<li>In CI, consider setting the fuzz seed using a <a href=\"https://github.com/sablier-labs/v2-core/blob/d1157b49ed4bceeff0c4e437c9f723e88c134d3a/.github/workflows/ci.yml#L252-L254\">computed environment variable</a> so it changes every day or every week. This gives flexibility on the tradeoff between increasing randomness to find more bugs vs. using a seed to reduce RPC requests.</li>\n<li>Structure your tests so the data you are fuzzing over is computed locally by your contract, and not data that is used in an RPC call (may or may not be feasible based on what you&#x27;re doing).</li>\n<li>Lastly, you can of course always run a local node or bump your RPC plan.</li>\n</ul>\n","isPage":false,"text":"\nBe careful with fuzz tests on a fork to avoid burning through RPC requests with non-deterministic fuzzing. If the input to your fork fuzz test is some parameter which is used in an RPC call to fetch data (e.g. querying the token balance of an address), each run of a fuzz test uses at least 1 RPC request, so you&#x27;ll quickly hit rate limits or usage limits. Solutions to consider:\n\nReplace multiple RPC calls with a single multicall.\nSpecify a fuzz/invariant seed: this makes sure each forge test invocation uses the same fuzz inputs. RPC results are cached locally, so you&#x27;ll only query the node the first time.\nIn CI, consider setting the fuzz seed using a computed environment variable so it changes every day or every week. This gives flexibility on the tradeoff between increasing randomness to find more bugs vs. using a seed to reduce RPC requests.\nStructure your tests so the data you are fuzzing over is computed locally by your contract, and not data that is used in an RPC call (may or may not be feasible based on what you&#x27;re doing).\nLastly, you can of course always run a local node or bump your RPC plan.\n\n","title":"Minimize RPC requests","titles":[null,"Tests","Fork Tests"]},"388":{"href":"/guides/best-practices/writing-tests#configure-fork-urls-in-foundrytoml-and-use-cheatcodes","html":"\n<ol>\n<li>\n<p>When writing fork tests, do not use the <code>--fork-url</code> flag. Instead, prefer the following approach for its improved flexibility:</p>\n<ul>\n<li>Define <code>[rpc_endpoints]</code> in the <code>foundry.toml</code> config file and use the <a href=\"/forge/tests/fork-testing#forking-cheatcodes\">forking cheatcodes</a>.</li>\n<li>Access the RPC URL endpoint in your test with forge-std&#x27;s <code>stdChains.ChainName.rpcUrl</code>. See the list of supported chains and expected config file aliases <a href=\"https://github.com/foundry-rs/forge-std/blob/ff4bf7db008d096ea5a657f2c20516182252a3ed/src/StdCheats.sol#L255-L271\">here</a>.</li>\n<li>Always pin to a block so tests are deterministic and RPC responses are cached.</li>\n<li>More info on this fork test approach can be found <a href=\"https://twitter.com/msolomon44/status/1564742781129502722\">here</a> (this predates <code>StdChains</code> so that aspect is a bit out of date).</li>\n</ul>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nWhen writing fork tests, do not use the --fork-url flag. Instead, prefer the following approach for its improved flexibility:\n\nDefine [rpc_endpoints] in the foundry.toml config file and use the forking cheatcodes.\nAccess the RPC URL endpoint in your test with forge-std&#x27;s stdChains.ChainName.rpcUrl. See the list of supported chains and expected config file aliases here.\nAlways pin to a block so tests are deterministic and RPC responses are cached.\nMore info on this fork test approach can be found here (this predates StdChains so that aspect is a bit out of date).\n\n\n\n","title":"Configure fork urls in foundry.toml and use cheatcodes","titles":[null,"Tests","Fork Tests"]},"389":{"href":"/guides/best-practices/writing-tests#test-harnesses","html":"\n","isPage":false,"text":"\n","title":"Test Harnesses","titles":[null,"Tests"]},"390":{"href":"/guides/best-practices/writing-tests#internal-functions","html":"\n<p>To test <code>internal</code> functions, write a harness contract that inherits from the contract under test (CuT). Harness contracts that inherit from the CuT expose the <code>internal</code> functions as <code>external</code> ones.</p>\n<p>Each <code>internal</code> function that is tested should be exposed via an external one with a name that follows the pattern <code>exposed_&lt;function_name&gt;</code>. For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// file: src/MyContract.sol</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> myInternalMethod</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 42</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// file: test/MyContract.t.sol</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">MyContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;src/MyContract.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyContractHarness</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Deploy this contract then call this method to test `myInternalMethod`.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> exposed_myInternalMethod</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> myInternalMethod</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTo test internal functions, write a harness contract that inherits from the contract under test (CuT). Harness contracts that inherit from the CuT expose the internal functions as external ones.\nEach internal function that is tested should be exposed via an external one with a name that follows the pattern exposed_&lt;function_name&gt;. For example:\n// file: src/MyContract.sol\ncontract MyContract {\n  function myInternalMethod() internal returns (uint) {\n    return 42;\n  }\n}\n \n// file: test/MyContract.t.sol\nimport {MyContract} from &quot;src/MyContract.sol&quot;;\n \ncontract MyContractHarness is MyContract {\n  // Deploy this contract then call this method to test `myInternalMethod`.\n  function exposed_myInternalMethod() external returns (uint) {\n    return myInternalMethod();\n  }\n}\n","title":"Internal Functions","titles":[null,"Tests","Test Harnesses"]},"391":{"href":"/guides/best-practices/writing-tests#private-functions","html":"\n<p>Unfortunately there is currently no good way to unit test <code>private</code> methods since they cannot be accessed by any other contracts. Options include:</p>\n<ul>\n<li>Converting <code>private</code> functions to <code>internal</code>.</li>\n<li>Copy/pasting the logic into your test contract and writing a script that runs in CI check to ensure both functions are identical.</li>\n</ul>\n","isPage":false,"text":"\nUnfortunately there is currently no good way to unit test private methods since they cannot be accessed by any other contracts. Options include:\n\nConverting private functions to internal.\nCopy/pasting the logic into your test contract and writing a script that runs in CI check to ensure both functions are identical.\n\n","title":"Private Functions","titles":[null,"Tests","Test Harnesses"]},"392":{"href":"/guides/best-practices/writing-tests#workaround-functions","html":"\n<p>Harnesses can also be used to expose functionality or information otherwise unavailable in the original smart contract. The most straightforward example is when we want to test the length of a public array. The functions should follow the pattern: <code>workaround_&lt;function_name&gt;</code>, such as <code>workaround_queueLength()</code>.</p>\n<p>Another use case for this is tracking data that you would not track in production to help test invariants. For example, you might store a list of all token holders to simplify validation of the invariant &quot;sum of all balances must equal total supply&quot;. These are often known as &quot;ghost variables&quot;. You can learn more about this in <a href=\"https://twitter.com/rikardhjort\">Rikard Hjort</a>&#x27;s <a href=\"https://youtu.be/ETlNhV9jYJw\">Formal Methods for the Working DeFi Dev</a> talk.</p>","isPage":false,"text":"\nHarnesses can also be used to expose functionality or information otherwise unavailable in the original smart contract. The most straightforward example is when we want to test the length of a public array. The functions should follow the pattern: workaround_&lt;function_name&gt;, such as workaround_queueLength().\nAnother use case for this is tracking data that you would not track in production to help test invariants. For example, you might store a list of all token holders to simplify validation of the invariant &quot;sum of all balances must equal total supply&quot;. These are often known as &quot;ghost variables&quot;. You can learn more about this in Rikard Hjort&#x27;s Formal Methods for the Working DeFi Dev talk.","title":"Workaround Functions","titles":[null,"Tests","Test Harnesses"]},"393":{"href":"/guides/project-setup/clone-a-verified-contract#clone-a-verified-contract","html":"\n<p>To clone an on-chain verified contract as a Forge project, use <a href=\"/forge/reference/forge-clone\"><code>forge clone</code></a>, say <a href=\"https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\">WETH9</a> on Ethereum mainnet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> clone</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> WETH9</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --etherscan-api-key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">YOUR_API_KE</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Y</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span></span></code></pre>\n<p>This creates a new directory <code>WETH9</code>, configures it as a foundry project and clones all the source code of the contract into it. This also initializes a new <code>git</code> repository.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Downloading</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> the</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> source</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> code</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> of</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Etherscan...</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Initializing</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /home/zhan4987/WETH9...</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Installing</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> forge-std</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /home/zhan4987/WETH9/lib/forge-std</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (url: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">Some</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">&quot;https://github.com/foundry-rs/forge-std&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">,</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tag:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> None</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Cloning</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> into</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;/home/zhan4987/WETH9/lib/forge-std&#x27;...</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">remote:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Enumerating</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> objects:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 2243,</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> done.</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">remote:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Counting</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> objects:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 100%</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (2238/2238), done.</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">remote:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Compressing</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> objects:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 100%</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (778/778), done.</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">remote:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Total</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2243</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (delta </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1489</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), reused 2097 (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">delta</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1391</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), pack-reused 5</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Receiving</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> objects:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 100%</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (2243/2243), 649.07 KiB </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">|</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> 8.89</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> MiB/s,</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> done.</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Resolving</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> deltas:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 100%</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (1489/1489), done.</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Installed</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> forge-std</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> v1.8.1</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Initialized</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> project</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Collecting</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> the</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> creation</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> information</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> of</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Etherscan...</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Waiting</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> for</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 5</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> seconds</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> to</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> avoid</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> rate</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> limit...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[⠊] Compiling...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[⠒] Compiling 1 files with 0.4.19</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[⠢] Solc 0.4.19 finished in 9.50ms</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Compiler</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> successful!</span></span></code></pre>\n<p>The cloned Forge project comes with an additional <code>.clone.meta</code> metadata file besides those ordinary files that a normal Forge project has.</p>\n<p>Let&#x27;s see what the <code>.clone.meta</code> file looks like:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">  &quot;path&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;src/Contract.sol&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">  &quot;targetContract&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;WETH9&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">  &quot;address&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">  &quot;chainId&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 1,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">  &quot;creationTransaction&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0xb95343413e459a0f97461812111254163ae53467855c0d73e0f1e7c5b8442fa3&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">  &quot;deployer&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0x4f26ffbe5f04ed43630fdc30a87638d53d0b0876&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">  &quot;constructorArguments&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0x&quot;,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">  &quot;storageLayout&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">    &quot;storage&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [],</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">    &quot;types&quot;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> {}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p><code>clone.meta</code> is a compact JSON data file that contains the information of the on-chain contract instance, e.g., contract address, constructor arguments, etc. More details of the metadata can be found in the <a href=\"/forge/reference/forge-clone\">reference</a>.</p>","isPage":true,"text":"\nTo clone an on-chain verified contract as a Forge project, use forge clone, say WETH9 on Ethereum mainnet:\nforge clone 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 WETH9 --etherscan-api-key &lt;YOUR_API_KEY&gt;\nThis creates a new directory WETH9, configures it as a foundry project and clones all the source code of the contract into it. This also initializes a new git repository.\nDownloading the source code of 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 from Etherscan...\nInitializing /home/zhan4987/WETH9...\nInstalling forge-std in /home/zhan4987/WETH9/lib/forge-std (url: Some(&quot;https://github.com/foundry-rs/forge-std&quot;), tag: None)\nCloning into &#x27;/home/zhan4987/WETH9/lib/forge-std&#x27;...\nremote: Enumerating objects: 2243, done.\nremote: Counting objects: 100% (2238/2238), done.\nremote: Compressing objects: 100% (778/778), done.\nremote: Total 2243 (delta 1489), reused 2097 (delta 1391), pack-reused 5\nReceiving objects: 100% (2243/2243), 649.07 KiB | 8.89 MiB/s, done.\nResolving deltas: 100% (1489/1489), done.\nInstalled forge-std v1.8.1\nInitialized forge project\nCollecting the creation information of 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2 from Etherscan...\nWaiting for 5 seconds to avoid rate limit...\n[⠊] Compiling...\n[⠒] Compiling 1 files with 0.4.19\n[⠢] Solc 0.4.19 finished in 9.50ms\nCompiler run successful!\nThe cloned Forge project comes with an additional .clone.meta metadata file besides those ordinary files that a normal Forge project has.\nLet&#x27;s see what the .clone.meta file looks like:\n{\n  &quot;path&quot;: &quot;src/Contract.sol&quot;,\n  &quot;targetContract&quot;: &quot;WETH9&quot;,\n  &quot;address&quot;: &quot;0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2&quot;,\n  &quot;chainId&quot;: 1,\n  &quot;creationTransaction&quot;: &quot;0xb95343413e459a0f97461812111254163ae53467855c0d73e0f1e7c5b8442fa3&quot;,\n  &quot;deployer&quot;: &quot;0x4f26ffbe5f04ed43630fdc30a87638d53d0b0876&quot;,\n  &quot;constructorArguments&quot;: &quot;0x&quot;,\n  &quot;storageLayout&quot;: {\n    &quot;storage&quot;: [],\n    &quot;types&quot;: {}\n  }\n}\nclone.meta is a compact JSON data file that contains the information of the on-chain contract instance, e.g., contract address, constructor arguments, etc. More details of the metadata can be found in the reference.","title":"Clone a Verified Contract","titles":[null]},"394":{"href":"/guides/project-setup/creating-a-new-project#creating-a-new-project","html":"\n<p>To start a new project with Foundry, use <a href=\"/forge/reference/forge-init\"><code>forge init</code></a>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> init</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> hello_foundry</span></span></code></pre>\n<p>This creates a new directory <code>hello_foundry</code> from the default template. This also initializes a new <code>git</code> repository.</p>\n<p>If you want to create a new project using a different template, you would pass the <code>--template</code> flag, like so:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> init</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --template</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/foundry-rs/forge-template</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> hello_template</span></span></code></pre>\n<p>For now, let&#x27;s check what the default template looks like:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> hello_foundry</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">tree</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> .</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -d</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -L</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">.</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">├──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> lib</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">├──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> script</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">├──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> src</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">└──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">5</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> directories</span></span></code></pre>\n<p>The default template comes with one dependency installed: Forge Standard Library. This is the preferred testing library used for Foundry projects. Additionally, the template also comes with an empty starter contract and a simple test.</p>\n<p>Let&#x27;s build the project:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> build</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Compiling</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 23</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> files</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> with</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Solc</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.8.29</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Solc</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.8.29</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> finished</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 481.28ms</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Compiler</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> successful!</span></span></code></pre>\n<p>And run the tests:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">No</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> files</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> changed,</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> compilation</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> skipped</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Ran</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tests</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> for</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test/Counter.t.sol:CounterTest</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[PASS] testFuzz_SetNumber(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">runs:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 256,</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> μ:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 31965,</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ~:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 32354</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[PASS] </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">test_Increment</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">gas:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 31851</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Suite</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> result:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ok.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> passed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> failed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">0</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> skipped</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">finished</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 38.79ms</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (33.61ms </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">CPU</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Ran</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> suite</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 137.49ms</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (38.79ms </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">CPU</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">): 2 tests passed, 0 failed, 0 skipped (</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">2</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> total</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tests</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<p>You&#x27;ll notice that two new directories have popped up: <code>out</code> and <code>cache</code>.</p>\n<p>The <code>out</code> directory contains your contract artifact, such as the ABI, while the <code>cache</code> is used by <code>forge</code> to only recompile what is necessary.</p>","isPage":true,"text":"\nTo start a new project with Foundry, use forge init:\nforge init hello_foundry\nThis creates a new directory hello_foundry from the default template. This also initializes a new git repository.\nIf you want to create a new project using a different template, you would pass the --template flag, like so:\nforge init --template https://github.com/foundry-rs/forge-template hello_template\nFor now, let&#x27;s check what the default template looks like:\ncd hello_foundry\ntree . -d -L 1\n.\n├── lib\n├── script\n├── src\n└── test\n \n5 directories\nThe default template comes with one dependency installed: Forge Standard Library. This is the preferred testing library used for Foundry projects. Additionally, the template also comes with an empty starter contract and a simple test.\nLet&#x27;s build the project:\nforge build\nCompiling 23 files with Solc 0.8.29\nSolc 0.8.29 finished in 481.28ms\nCompiler run successful!\nAnd run the tests:\nforge test\nNo files changed, compilation skipped\n \nRan 2 tests for test/Counter.t.sol:CounterTest\n[PASS] testFuzz_SetNumber(uint256) (runs: 256, μ: 31965, ~: 32354)\n[PASS] test_Increment() (gas: 31851)\nSuite result: ok. 2 passed; 0 failed; 0 skipped; finished in 38.79ms (33.61ms CPU time)\n \nRan 1 test suite in 137.49ms (38.79ms CPU time): 2 tests passed, 0 failed, 0 skipped (2 total tests)\nYou&#x27;ll notice that two new directories have popped up: out and cache.\nThe out directory contains your contract artifact, such as the ABI, while the cache is used by forge to only recompile what is necessary.","title":"Creating a New Project","titles":[null]},"395":{"href":"/guides/project-setup/dependencies#dependencies","html":"\n<p>Forge manages dependencies using <a href=\"https://git-scm.com/book/en/v2/Git-Tools-Submodules\">git submodules</a> by default, which means that it works with any GitHub repository that contains smart contracts.</p>\n","isPage":true,"text":"\nForge manages dependencies using git submodules by default, which means that it works with any GitHub repository that contains smart contracts.\n","title":"Dependencies","titles":[null]},"396":{"href":"/guides/project-setup/dependencies#adding-a-dependency","html":"\n<p>To add a dependency, run <a href=\"/forge/reference/forge-update\"><code>forge install</code></a>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> vectorized/solady</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Installing</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> solady</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> in</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> /private/var/folders/x4/z46ytl8n5msgkg6dst5hwwhh0000gn/T/tmp.AkOjwj9xvM/hello_foundry/lib/solady</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (url: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">Some</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">&quot;https://github.com/vectorized/solady&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">,</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tag:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> None</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">    Installed</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> solady</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> v0.1.19</span></span></code></pre>\n<p>This pulls the <code>solady</code> library, stages the <code>.gitmodules</code> file in git and makes a commit with the message <code>Installed solady</code>.</p>\n<p>If we now check the <code>lib</code> folder:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">tree</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> .</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -d</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> -L</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">.</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">├──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> lib</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">├──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> script</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">├──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> src</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">└──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">5</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> directories</span></span></code></pre>\n<p>We can see that Forge installed <code>solady</code>!</p>\n<p>By default, <code>forge install</code> installs the latest master branch version. If you want to install a specific tag or commit, you can do it like so:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> vectorized/solady@v0.1.3</span></span></code></pre>\n","isPage":false,"text":"\nTo add a dependency, run forge install:\nforge install vectorized/solady\nInstalling solady in /private/var/folders/x4/z46ytl8n5msgkg6dst5hwwhh0000gn/T/tmp.AkOjwj9xvM/hello_foundry/lib/solady (url: Some(&quot;https://github.com/vectorized/solady&quot;), tag: None)\n    Installed solady v0.1.19\nThis pulls the solady library, stages the .gitmodules file in git and makes a commit with the message Installed solady.\nIf we now check the lib folder:\ntree . -d -L 1\n.\n├── lib\n├── script\n├── src\n└── test\n \n5 directories\nWe can see that Forge installed solady!\nBy default, forge install installs the latest master branch version. If you want to install a specific tag or commit, you can do it like so:\nforge install vectorized/solady@v0.1.3\n","title":"Adding a dependency","titles":[null,"Dependencies"]},"397":{"href":"/guides/project-setup/dependencies#remapping-dependencies","html":"\n<p>Forge can remap dependencies to make them easier to import. Forge will automatically try to deduce some remappings for you:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> remappings</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge-std/</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">=lib/forge-std/src/</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">solady/</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">=lib/solady/src/</span></span></code></pre>\n<p>These remappings mean:</p>\n<ul>\n<li>To import from <code>forge-std</code> we would write: <code>import &quot;forge-std/Contract.sol&quot;;</code></li>\n<li>To import from <code>solady</code> we would write: <code>import &quot;solady/Contract.sol&quot;;</code></li>\n</ul>\n<p>You can customize these remappings by creating a <code>remappings.txt</code> file in the root of your project.</p>\n<p>Let&#x27;s create a remapping called <code>solady-utils</code> that points to the <code>utils</code> folder in the <code>solady</code> repository!</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">@solady-utils/</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">=lib/solady/src/utils/</span></span></code></pre>\n<p>You can also set remappings in <code>foundry.toml</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">remappings = [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;@solady-utils/=lib/solady/src/utils/&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n<p>Now we can import any of the contracts in <code>src/utils</code> of the <code>solady</code> repository like so:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">LibString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;@solady-utils/LibString.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nForge can remap dependencies to make them easier to import. Forge will automatically try to deduce some remappings for you:\nforge remappings\nforge-std/=lib/forge-std/src/\nsolady/=lib/solady/src/\nThese remappings mean:\n\nTo import from forge-std we would write: import &quot;forge-std/Contract.sol&quot;;\nTo import from solady we would write: import &quot;solady/Contract.sol&quot;;\n\nYou can customize these remappings by creating a remappings.txt file in the root of your project.\nLet&#x27;s create a remapping called solady-utils that points to the utils folder in the solady repository!\n@solady-utils/=lib/solady/src/utils/\nYou can also set remappings in foundry.toml.\nremappings = [\n    &quot;@solady-utils/=lib/solady/src/utils/&quot;,\n]\nNow we can import any of the contracts in src/utils of the solady repository like so:\nimport {LibString} from &quot;@solady-utils/LibString.sol&quot;;\n","title":"Remapping dependencies","titles":[null,"Dependencies"]},"398":{"href":"/guides/project-setup/dependencies#remapping-conflicts","html":"\n<p>In some cases, you may encounter dependency conflicts when two or more git submodules include different dependencies with the same namespace. For example, suppose you have installed both <code>org/lib_1</code> and <code>org/lib_2</code>, and they each reference their own versions of <code>@openzeppelin</code>. In such scenarios, <code>forge remappings</code> generates a single remapping entry for the namespace, which will point to only one of the two <code>@openzeppelin</code> libraries.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> remappings</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">@openzeppelin/</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">=lib/lib_1/node_modules/@openzeppelin/</span></span></code></pre>\n<p>This situation can lead to import issues, causing <code>forge build</code> to fail or introduce unexpected behavior into your contracts. To resolve this, you can add remapping contexts to your <code>remappings.txt</code> file. This instructs the compiler to use different remappings in distinct compilation contexts, resolving the conflict. For example, to address the conflict between <code>lib_1</code> and <code>lib_2</code>, you would update your remappings.txt as follows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">lib/lib_1/:@openzeppelin/</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">=lib/lib_1/node_modules/@openzeppelin/</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">lib/lib_2/:@openzeppelin/</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">=lib/lib_2/node_modules/@openzeppelin/</span></span></code></pre>\n<p>This approach ensures that each dependency is mapped to the appropriate library version, avoiding potential issues. For more information about remapping, please see the <a href=\"https://docs.soliditylang.org/en/latest/path-resolution.html#import-remapping\">Solidity Lang Docs</a>.</p>\n","isPage":false,"text":"\nIn some cases, you may encounter dependency conflicts when two or more git submodules include different dependencies with the same namespace. For example, suppose you have installed both org/lib_1 and org/lib_2, and they each reference their own versions of @openzeppelin. In such scenarios, forge remappings generates a single remapping entry for the namespace, which will point to only one of the two @openzeppelin libraries.\nforge remappings\n@openzeppelin/=lib/lib_1/node_modules/@openzeppelin/\nThis situation can lead to import issues, causing forge build to fail or introduce unexpected behavior into your contracts. To resolve this, you can add remapping contexts to your remappings.txt file. This instructs the compiler to use different remappings in distinct compilation contexts, resolving the conflict. For example, to address the conflict between lib_1 and lib_2, you would update your remappings.txt as follows:\nlib/lib_1/:@openzeppelin/=lib/lib_1/node_modules/@openzeppelin/\nlib/lib_2/:@openzeppelin/=lib/lib_2/node_modules/@openzeppelin/\nThis approach ensures that each dependency is mapped to the appropriate library version, avoiding potential issues. For more information about remapping, please see the Solidity Lang Docs.\n","title":"Remapping conflicts","titles":[null,"Dependencies"]},"399":{"href":"/guides/project-setup/dependencies#updating-dependencies","html":"\n<p>You can update a specific dependency to the latest commit on the version you have specified using <a href=\"/forge/reference/forge-update\"><code>forge update &lt;dep&gt;</code></a>. For example, if we wanted to pull the latest commit from our previously installed master-version of <code>solady</code>, we would run:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> update</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> lib/solady</span></span></code></pre>\n<p>Alternatively, you can do this for all dependencies at once by just running <code>forge update</code>.</p>\n","isPage":false,"text":"\nYou can update a specific dependency to the latest commit on the version you have specified using forge update &lt;dep&gt;. For example, if we wanted to pull the latest commit from our previously installed master-version of solady, we would run:\nforge update lib/solady\nAlternatively, you can do this for all dependencies at once by just running forge update.\n","title":"Updating dependencies","titles":[null,"Dependencies"]},"400":{"href":"/guides/project-setup/dependencies#removing-dependencies","html":"\n<p>You can remove dependencies using <a href=\"/forge/reference/forge-remove\"><code>forge remove &lt;deps&gt;...</code></a>, where <code>&lt;deps&gt;</code> is either the full path to the dependency or just the name. For example, to remove <code>solady</code> both of these commands are equivalent:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> remove</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> solady</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># ... is equivalent to ...</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> remove</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> lib/solady</span></span></code></pre>\n","isPage":false,"text":"\nYou can remove dependencies using forge remove &lt;deps&gt;..., where &lt;deps&gt; is either the full path to the dependency or just the name. For example, to remove solady both of these commands are equivalent:\nforge remove solady\n# ... is equivalent to ...\nforge remove lib/solady\n","title":"Removing dependencies","titles":[null,"Dependencies"]},"401":{"href":"/guides/project-setup/dependencies#hardhat-compatibility","html":"\n<p>Forge also supports Hardhat-style projects where dependencies are npm packages (stored in <code>node_modules</code>) and contracts are stored in <code>contracts</code> as opposed to <code>src</code>.</p>\n<p>To enable Hardhat compatibility mode pass the <code>--hh</code> flag.</p>","isPage":false,"text":"\nForge also supports Hardhat-style projects where dependencies are npm packages (stored in node_modules) and contracts are stored in contracts as opposed to src.\nTo enable Hardhat compatibility mode pass the --hh flag.","title":"Hardhat compatibility","titles":[null,"Dependencies"]},"402":{"href":"/guides/project-setup/project-layout#project-layout","html":"\n<p>Forge is flexible on how you structure your project. By default, the structure is:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">.</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">├──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> README.md</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">├──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> foundry.toml</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">├──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> lib</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">│  </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> └──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> forge-std</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">│  </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">     ├──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> CONTRIBUTING.md</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">│  </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">     ├──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> LICENSE-APACHE</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">│  </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">     ├──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> LICENSE-MIT</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">│  </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">     ├──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> README.md</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">│  </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">     ├──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> foundry.toml</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">│  </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">     ├──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> package.json</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">│  </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">     ├──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> scripts</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">│  </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">     ├──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> src</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">│  </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">     └──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">├──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> script</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">│  </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> └──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Counter.s.sol</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">├──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> src</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">│  </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> └──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Counter.sol</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">└──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">    └──</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Counter.t.sol</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">9</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> directories,</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 11</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> files</span></span></code></pre>\n<ul>\n<li>You can configure Foundry&#x27;s behavior using <code>foundry.toml</code>.</li>\n<li>Remappings are specified in <code>remappings.txt</code>.</li>\n<li>The default directory for contracts is <code>src/</code>.</li>\n<li>The default directory for tests is <code>test/</code>, where any contract with a function that starts with <code>test</code> is considered to be a test.</li>\n<li>Dependencies are stored as git submodules in <code>lib/</code>.</li>\n</ul>\n<p>You can configure where Forge looks for both dependencies and contracts using the <code>--lib-paths</code> and <code>--contracts</code> flags respectively. Alternatively you can configure it in <code>foundry.toml</code>.</p>\n<p>Combined with remappings, this gives you the flexibility needed to support the project structure of other toolchains such as Hardhat and Truffle.</p>\n<p>For automatic Hardhat support you can also pass the <code>--hh</code> flag, which sets the following flags: <code>--lib-paths node_modules --contracts contracts</code>.</p>","isPage":true,"text":"\nForge is flexible on how you structure your project. By default, the structure is:\n.\n├── README.md\n├── foundry.toml\n├── lib\n│   └── forge-std\n│       ├── CONTRIBUTING.md\n│       ├── LICENSE-APACHE\n│       ├── LICENSE-MIT\n│       ├── README.md\n│       ├── foundry.toml\n│       ├── package.json\n│       ├── scripts\n│       ├── src\n│       └── test\n├── script\n│   └── Counter.s.sol\n├── src\n│   └── Counter.sol\n└── test\n    └── Counter.t.sol\n \n9 directories, 11 files\n\nYou can configure Foundry&#x27;s behavior using foundry.toml.\nRemappings are specified in remappings.txt.\nThe default directory for contracts is src/.\nThe default directory for tests is test/, where any contract with a function that starts with test is considered to be a test.\nDependencies are stored as git submodules in lib/.\n\nYou can configure where Forge looks for both dependencies and contracts using the --lib-paths and --contracts flags respectively. Alternatively you can configure it in foundry.toml.\nCombined with remappings, this gives you the flexibility needed to support the project structure of other toolchains such as Hardhat and Truffle.\nFor automatic Hardhat support you can also pass the --hh flag, which sets the following flags: --lib-paths node_modules --contracts contracts.","title":"Project Layout","titles":[null]},"403":{"href":"/guides/project-setup/soldeer#soldeer-as-a-package-manager","html":"\n<p>As explained <a href=\"./dependencies\">here</a>, Foundry has been using git submodules to handle dependencies up until now.</p>\n<p>The need for a native package manager started to emerge as projects became more complex.</p>\n<p>A new approach has been in the making, <a href=\"https://soldeer.xyz\">soldeer.xyz</a>, which is a Solidity native dependency manager built in Rust and open sourced (check the repository <a href=\"https://github.com/mario-eth/soldeer\">https://github.com/mario-eth/soldeer</a>).</p>\n","isPage":true,"text":"\nAs explained here, Foundry has been using git submodules to handle dependencies up until now.\nThe need for a native package manager started to emerge as projects became more complex.\nA new approach has been in the making, soldeer.xyz, which is a Solidity native dependency manager built in Rust and open sourced (check the repository https://github.com/mario-eth/soldeer).\n","title":"Soldeer as a Package Manager","titles":[null]},"404":{"href":"/guides/project-setup/soldeer#if-you-want-to-see-the-full-commands-and-usage-of-soldeer-you-can-visit-the-usagemd","html":"\n","isPage":false,"text":"\n","title":"If you want to see the full commands and usage of Soldeer, you can visit the","titles":[null,"Soldeer as a Package Manager",null]},"405":{"href":"/guides/project-setup/soldeer#initialize-a-new-project","html":"\n<p>If you&#x27;re using Soldeer for the first time in a new Foundry project, you can use the <code>init</code> command to install a fresh instance of Soldeer, complete with the necessary configurations and the latest version of <code>forge-std</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> soldeer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> init</span></span></code></pre>\n","isPage":false,"text":"\nIf you&#x27;re using Soldeer for the first time in a new Foundry project, you can use the init command to install a fresh instance of Soldeer, complete with the necessary configurations and the latest version of forge-std.\nforge soldeer init\n","title":"Initialize a new project","titles":[null,"Soldeer as a Package Manager"]},"406":{"href":"/guides/project-setup/soldeer#adding-a-dependency","html":"\n","isPage":false,"text":"\n","title":"Adding a Dependency","titles":[null,"Soldeer as a Package Manager"]},"407":{"href":"/guides/project-setup/soldeer#add-a-dependency-stored-in-the-central-repository","html":"\n<p>To add a dependency, you can visit <a href=\"https://soldeer.xyz\">soldeer.xyz</a> and search for the dependency you want to add (e.g., openzeppelin 5.0.2).</p>\n<p><img src=\"https://i.postimg.cc/Hm6R8MTs/Unknown-413.png\" alt=\"image\"/></p>\n<p>Then just run the forge command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> soldeer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @openzeppelin-contracts~5.0.2</span></span></code></pre>\n<p>This will download the dependency from the central repository and install it into a <code>dependencies</code> directory.</p>\n<p>Soldeer can manage two types of dependency configuration: using <code>soldeer.toml</code> or embedded in the <code>foundry.toml</code>. In order to work with Foundry, you have to define the <code>[dependencies]</code> config in the <code>foundry.toml</code>. This will tell the <code>soldeer CLI</code> to define the installed dependencies there.\nE.g.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Full reference https://github.com/foundry-rs/foundry/tree/master/crates/config</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">profile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">auto_detect_solc = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">bytecode_hash = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;none&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">fuzz = { runs = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1_000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">libs = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;dependencies&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#6A737D;--shiki-dark:#768390\"># &lt;= This is important to be added</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">gas_reports = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;*&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">dependencies</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#6A737D;--shiki-dark:#768390\"># &lt;= Dependencies will be added under this config</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;@openzeppelin-contracts&quot; = { version = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;5.0.2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;@uniswap-universal-router&quot; = { version = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1.6.0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;@prb-math&quot; = { version = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;4.0.2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">forge-std = { version = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1.8.1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span></code></pre>\n","isPage":false,"text":"\nTo add a dependency, you can visit soldeer.xyz and search for the dependency you want to add (e.g., openzeppelin 5.0.2).\n\nThen just run the forge command:\nforge soldeer install @openzeppelin-contracts~5.0.2\nThis will download the dependency from the central repository and install it into a dependencies directory.\nSoldeer can manage two types of dependency configuration: using soldeer.toml or embedded in the foundry.toml. In order to work with Foundry, you have to define the [dependencies] config in the foundry.toml. This will tell the soldeer CLI to define the installed dependencies there.\nE.g.\n# Full reference https://github.com/foundry-rs/foundry/tree/master/crates/config\n \n[profile.default]\nauto_detect_solc = false\nbytecode_hash = &quot;none&quot;\nfuzz = { runs = 1_000 }\nlibs = [&quot;dependencies&quot;] # &lt;= This is important to be added\ngas_reports = [&quot;*&quot;]\n \n[dependencies] # &lt;= Dependencies will be added under this config\n&quot;@openzeppelin-contracts&quot; = { version = &quot;5.0.2&quot; }\n&quot;@uniswap-universal-router&quot; = { version = &quot;1.6.0&quot; }\n&quot;@prb-math&quot; = { version = &quot;4.0.2&quot; }\nforge-std = { version = &quot;1.8.1&quot; }\n","title":"Add a Dependency Stored in the Central Repository","titles":[null,"Soldeer as a Package Manager","Adding a Dependency"]},"408":{"href":"/guides/project-setup/soldeer#add-a-dependency-stored-at-a-specific-link","html":"\n<p>If the central repository does not have a certain dependency, you can install it by providing a zip archive link.</p>\n<p>E.g.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> soldeer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @custom-dependency~1.0.0</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --url</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://my-website.com/custom-dependency-1-0-0.zip</span></span></code></pre>\n<p>The above command will try to download the dependency from the provided link and install it as a normal dependency. For this, you will see in the config an additional field called <code>path</code>.</p>\n<p>E.g.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">dependencies</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;@custom-dependency&quot; = { version = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1.0.0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, path = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://my-website.com/custom-dependency-1-0-0.zip&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span></code></pre>\n","isPage":false,"text":"\nIf the central repository does not have a certain dependency, you can install it by providing a zip archive link.\nE.g.\nforge soldeer install @custom-dependency~1.0.0 --url https://my-website.com/custom-dependency-1-0-0.zip\nThe above command will try to download the dependency from the provided link and install it as a normal dependency. For this, you will see in the config an additional field called path.\nE.g.\n[dependencies]\n&quot;@custom-dependency&quot; = { version = &quot;1.0.0&quot;, path = &quot;https://my-website.com/custom-dependency-1-0-0.zip&quot; }\n","title":"Add a Dependency Stored at a Specific Link","titles":[null,"Soldeer as a Package Manager","Adding a Dependency"]},"409":{"href":"/guides/project-setup/soldeer#add-a-dependency-stored-in-git","html":"\n<p>If you choose to use Git as a source for your dependencies — though we generally discourage this, since Git isn&#x27;t designed to be a dependency manager — you can provide the Git repository link as an additional argument. Soldeer will then automatically handle the installation using a Git subprocess.\nFor example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> soldeer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> forge-std~1.9.2</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/foundry-rs/forge-std.git</span></span></code></pre>\n<p>If you want to use a specific revision, branch, or tag, you can do so by appending the following arguments to the command: <code>--rev/--tag/--branch</code></p>\n<p>e.g.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> soldeer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> forge-std~1.9.2</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/foundry-rs/forge-std.git</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --rev</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 4695fac44b2934aaa6d7150e2eaf0256fdc566a7</span></span></code></pre>\n<p>Some git examples:</p>\n<p>Some examples:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> soldeer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test-project~v1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> git@github.com:test/test.git</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> soldeer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test-project~v1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> git@gitlab.com:test/test.git</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> soldeer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test-project~v1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://github.com/test/test.git</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> soldeer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test-project~v1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://gitlab.com/test/test.git</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> soldeer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test-project~v1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> git@github.com:test/test.git</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --rev</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> 345e611cd84bfb4e62c583fa1886c1928bc1a464</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> soldeer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test-project~v1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> git@github.com:test/test.git</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --branch</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> dev</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> soldeer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> test-project~v1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --git</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> git@github.com:test/test.git</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --tag</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> v1</span></span></code></pre>\n","isPage":false,"text":"\nIf you choose to use Git as a source for your dependencies — though we generally discourage this, since Git isn&#x27;t designed to be a dependency manager — you can provide the Git repository link as an additional argument. Soldeer will then automatically handle the installation using a Git subprocess.\nFor example:\nforge soldeer install forge-std~1.9.2 --git https://github.com/foundry-rs/forge-std.git\nIf you want to use a specific revision, branch, or tag, you can do so by appending the following arguments to the command: --rev/--tag/--branch\ne.g.\nforge soldeer install forge-std~1.9.2 --git https://github.com/foundry-rs/forge-std.git --rev 4695fac44b2934aaa6d7150e2eaf0256fdc566a7\nSome git examples:\nSome examples:\nforge soldeer install test-project~v1 --git git@github.com:test/test.git\nforge soldeer install test-project~v1 --git git@gitlab.com:test/test.git\nforge soldeer install test-project~v1 --git https://github.com/test/test.git\nforge soldeer install test-project~v1 --git https://gitlab.com/test/test.git\nforge soldeer install test-project~v1 --git git@github.com:test/test.git --rev 345e611cd84bfb4e62c583fa1886c1928bc1a464\nforge soldeer install test-project~v1 --git git@github.com:test/test.git --branch dev\nforge soldeer install test-project~v1 --git git@github.com:test/test.git --tag v1\n","title":"Add a Dependency Stored in GIT","titles":[null,"Soldeer as a Package Manager","Adding a Dependency"]},"410":{"href":"/guides/project-setup/soldeer#updating-dependencies","html":"\n<p>Because Soldeer specifies the dependencies in a config file (foundry or soldeer toml), sharing a dependency configuration within the team is much easier.</p>\n<p>For example, having this Foundry config file in a git repository, one can pull the repository and then run <code>forge soldeer update</code>. This command will automatically install all the dependencies specified under the <code>[dependencies]</code> tag.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Full reference https://github.com/foundry-rs/foundry/tree/master/crates/config</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">profile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">auto_detect_solc = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">bytecode_hash = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;none&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">fuzz = { runs = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1_000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">libs = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;dependencies&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#6A737D;--shiki-dark:#768390\"># &lt;= This is important to be added</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">gas_reports = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;*&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">dependencies</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#6A737D;--shiki-dark:#768390\"># &lt;= Dependencies will be added under this config</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;@openzeppelin-contracts&quot; = { version = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;5.0.2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;@uniswap-universal-router&quot; = { version = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1.6.0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&quot;@prb-math&quot; = { version = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;4.0.2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">forge-std = { version = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1.8.1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span></code></pre>\n","isPage":false,"text":"\nBecause Soldeer specifies the dependencies in a config file (foundry or soldeer toml), sharing a dependency configuration within the team is much easier.\nFor example, having this Foundry config file in a git repository, one can pull the repository and then run forge soldeer update. This command will automatically install all the dependencies specified under the [dependencies] tag.\n# Full reference https://github.com/foundry-rs/foundry/tree/master/crates/config\n \n[profile.default]\nauto_detect_solc = false\nbytecode_hash = &quot;none&quot;\nfuzz = { runs = 1_000 }\nlibs = [&quot;dependencies&quot;] # &lt;= This is important to be added\ngas_reports = [&quot;*&quot;]\n \n[dependencies] # &lt;= Dependencies will be added under this config\n&quot;@openzeppelin-contracts&quot; = { version = &quot;5.0.2&quot; }\n&quot;@uniswap-universal-router&quot; = { version = &quot;1.6.0&quot; }\n&quot;@prb-math&quot; = { version = &quot;4.0.2&quot; }\nforge-std = { version = &quot;1.8.1&quot; }\n","title":"Updating Dependencies","titles":[null,"Soldeer as a Package Manager"]},"411":{"href":"/guides/project-setup/soldeer#removing-dependencies","html":"\n<p>You can use <code>forge soldeer uninstall DEPENDENCY</code>.</p>\n<p>Example: <code>forge soldeer uninstall @openzeppelin-contracts</code>. This will action will remove:</p>\n<ul>\n<li>the config entry</li>\n<li>the <code>dependencies</code> artifacts</li>\n<li>the <code>soldeer.lock</code> entry</li>\n<li>the <code>remappings</code> entry (txt or config remapping)</li>\n</ul>\n<p>Additionally you can manually remove a dependency by just removing the artifacts: dependency files, config entry, remappings entry.</p>\n","isPage":false,"text":"\nYou can use forge soldeer uninstall DEPENDENCY.\nExample: forge soldeer uninstall @openzeppelin-contracts. This will action will remove:\n\nthe config entry\nthe dependencies artifacts\nthe soldeer.lock entry\nthe remappings entry (txt or config remapping)\n\nAdditionally you can manually remove a dependency by just removing the artifacts: dependency files, config entry, remappings entry.\n","title":"Removing Dependencies","titles":[null,"Soldeer as a Package Manager"]},"412":{"href":"/guides/project-setup/soldeer#remappings","html":"\n<p>The remappings are now fully configurable, the config TOML file (foundry.toml) accepts a\n<code>[soldeer]</code> field with the following options</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">soldeer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># whether soldeer manages remappings</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">remappings_generate = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># whether soldeer re-generates all remappings when installing, updating or uninstalling deps</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">remappings_regenerate = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># whether to suffix the remapping with the version: `name-a.b.c`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">remappings_version = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># a prefix to add to the remappings (&quot;@&quot; would give `@name`)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">remappings_prefix = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># where to store the remappings (&quot;txt&quot; for `remappings.txt` or &quot;config&quot; for `foundry.toml`)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># ignored when `soldeer.toml` is used as config (uses `remappings.txt`)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">remappings_location = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;txt&quot;</span></span></code></pre>\n","isPage":false,"text":"\nThe remappings are now fully configurable, the config TOML file (foundry.toml) accepts a\n[soldeer] field with the following options\n[soldeer]\n# whether soldeer manages remappings\nremappings_generate = true\n \n# whether soldeer re-generates all remappings when installing, updating or uninstalling deps\nremappings_regenerate = false\n \n# whether to suffix the remapping with the version: `name-a.b.c`\nremappings_version = true\n \n# a prefix to add to the remappings (&quot;@&quot; would give `@name`)\nremappings_prefix = &quot;&quot;\n \n# where to store the remappings (&quot;txt&quot; for `remappings.txt` or &quot;config&quot; for `foundry.toml`)\n# ignored when `soldeer.toml` is used as config (uses `remappings.txt`)\nremappings_location = &quot;txt&quot;\n","title":"Remappings","titles":[null,"Soldeer as a Package Manager"]},"413":{"href":"/guides/project-setup/soldeer#installing-dependencies-of-dependencies-aka-sub-dependencies","html":"\n<p>Whenever you install a dependency, that dependency might have other dependencies that need to be installed as well. Currently, you can handle this by either specifying the <code>recursive_deps</code> field as a configuration entry in the config file or by passing the <code>--recursive-deps</code> argument when running the install or update command. This will ensure that all necessary sub-dependencies are automatically pulled in.\ne.g.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">soldeer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">recursive_deps = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span></code></pre>\n","isPage":false,"text":"\nWhenever you install a dependency, that dependency might have other dependencies that need to be installed as well. Currently, you can handle this by either specifying the recursive_deps field as a configuration entry in the config file or by passing the --recursive-deps argument when running the install or update command. This will ensure that all necessary sub-dependencies are automatically pulled in.\ne.g.\n[soldeer]\nrecursive_deps = true\n","title":"Installing dependencies of dependencies aka sub-dependencies","titles":[null,"Soldeer as a Package Manager"]},"414":{"href":"/guides/project-setup/soldeer#pushing-a-new-version-to-the-central-repository","html":"\n<p>Soldeer acts like npmjs/crates.io, encouraging all developers to publish their projects to the central repository.</p>\n<p>To do that, you have to go to <a href=\"https://soldeer.xyz\">soldeer.xyz</a>, create an account, verify it, then</p>\n<p><img src=\"https://i.postimg.cc/G3VDpN2S/s1.png\" alt=\"image\"/></p>\n<p>Just add a new project</p>\n<p><img src=\"https://i.postimg.cc/rsBRYd3L/s2.png\" alt=\"image\"/></p>\n<p>After the project is created, you can go into your project source and:</p>\n<ul>\n<li>Create a <code>.soldeerignore</code> file that acts as a <code>.gitignore</code> to exclude files that aren&#x27;t needed. The <code>.gitignore</code> file is also respected.</li>\n<li>Run <code>forge soldeer login</code> to log into your account.</li>\n<li>Run <code>forge soldeer push my-project~1.0.0</code> in your terminal in the directory that you want to push to the central repository associated with the project <code>my-project</code> at version <code>1.0.0</code>.</li>\n</ul>\n<p>If you want to push a specific directory and not the current directory your terminal is in, you can use <code>forge soldeer push my-project~1.0.0 /path/to/directory</code>.</p>\n<p><strong>Warning</strong> ⚠️</p>\n<p>You are at risk to push sensitive files to the central repository that then can be seen by everyone. Make sure to exclude sensitive files in the <code>.soldeerignore</code> file.\nFurthermore, we&#x27;ve implemented a warning that it will be triggered if you try to push a project that contains any <code>.dot</code> files/directories.\nIf you want to skip this warning, you can just use</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> soldeer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> push</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> my-project~1.0.0</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --skip-warnings</span></span></code></pre>\n","isPage":false,"text":"\nSoldeer acts like npmjs/crates.io, encouraging all developers to publish their projects to the central repository.\nTo do that, you have to go to soldeer.xyz, create an account, verify it, then\n\nJust add a new project\n\nAfter the project is created, you can go into your project source and:\n\nCreate a .soldeerignore file that acts as a .gitignore to exclude files that aren&#x27;t needed. The .gitignore file is also respected.\nRun forge soldeer login to log into your account.\nRun forge soldeer push my-project~1.0.0 in your terminal in the directory that you want to push to the central repository associated with the project my-project at version 1.0.0.\n\nIf you want to push a specific directory and not the current directory your terminal is in, you can use forge soldeer push my-project~1.0.0 /path/to/directory.\nWarning ⚠️\nYou are at risk to push sensitive files to the central repository that then can be seen by everyone. Make sure to exclude sensitive files in the .soldeerignore file.\nFurthermore, we&#x27;ve implemented a warning that it will be triggered if you try to push a project that contains any .dot files/directories.\nIf you want to skip this warning, you can just use\nforge soldeer push my-project~1.0.0 --skip-warnings\n","title":"Pushing a New Version to the Central Repository","titles":[null,"Soldeer as a Package Manager"]},"415":{"href":"/guides/project-setup/soldeer#dry-run","html":"\n<p>In case you want to simulate what would happen if you push a version, you can use the <code>--dry-run</code> flag. This will create a zip file that you can inspect before pushing it to the central repository.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> soldeer</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> push</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> my-project~1.0.0</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --dry-run</span></span></code></pre>\n","isPage":false,"text":"\nIn case you want to simulate what would happen if you push a version, you can use the --dry-run flag. This will create a zip file that you can inspect before pushing it to the central repository.\nforge soldeer push my-project~1.0.0 --dry-run\n","title":"Dry-run","titles":[null,"Soldeer as a Package Manager","Pushing a New Version to the Central Repository"]},"416":{"href":"/guides/project-setup/soldeer#login-data","html":"\n<p>By default, Soldeer saves the login token in the <code>~/.soldeer/.soldeer_login</code> file, which is used to push files to the central repository. If you prefer to save the token in a different location, you can set the environment variable <code>SOLDEER_LOGIN_FILE</code>.</p>\n<blockquote>\n<p><strong>Warning</strong> ⚠️</p>\n<ul>\n<li>Once a project is created, it cannot be deleted.</li>\n<li>Once a version is pushed, it cannot be deleted.</li>\n<li>You cannot push the same version twice.</li>\n<li>The project name in the command that you run in the terminal must match the project name that you created on the Soldeer website.</li>\n<li>We encourage everyone to use version pinning when importing them into the contracts, this will help with securing your code by knowing exactly what version of a dependency you are using. Furthermore, it will help security researchers in their work.</li>\n<li>Make sure you delete this zip file before pushing the version if you run dry-run.\ne.g. instead of using\n<code>import &#x27;@openzeppelin-contracts/token/ERC20.sol&#x27;</code> you should do\n<code>import &#x27;@openzeppelin-contracts-5.0.2/token/ERC20.sol&#x27;</code></li>\n</ul>\n</blockquote>\n","isPage":false,"text":"\nBy default, Soldeer saves the login token in the ~/.soldeer/.soldeer_login file, which is used to push files to the central repository. If you prefer to save the token in a different location, you can set the environment variable SOLDEER_LOGIN_FILE.\n\nWarning ⚠️\n\nOnce a project is created, it cannot be deleted.\nOnce a version is pushed, it cannot be deleted.\nYou cannot push the same version twice.\nThe project name in the command that you run in the terminal must match the project name that you created on the Soldeer website.\nWe encourage everyone to use version pinning when importing them into the contracts, this will help with securing your code by knowing exactly what version of a dependency you are using. Furthermore, it will help security researchers in their work.\nMake sure you delete this zip file before pushing the version if you run dry-run.\ne.g. instead of using\nimport &#x27;@openzeppelin-contracts/token/ERC20.sol&#x27; you should do\nimport &#x27;@openzeppelin-contracts-5.0.2/token/ERC20.sol&#x27;\n\n\n","title":"Login Data","titles":[null,"Soldeer as a Package Manager","Pushing a New Version to the Central Repository"]},"417":{"href":"/guides/project-setup/soldeer#what-happens-if-a-certain-package-is-not-present-in-the-central-repository","html":"\n<ul>\n<li>If a certain package is not present in the central repository, you can open an issue in the <a href=\"https://github.com/mario-eth/soldeer/issues\">Soldeer Repository</a> and the team will look into adding it.</li>\n<li>If you have a package that you want to use and it is not present in the central repository, you can push it to the central repository by following the steps above.</li>\n</ul>\n","isPage":false,"text":"\n\nIf a certain package is not present in the central repository, you can open an issue in the Soldeer Repository and the team will look into adding it.\nIf you have a package that you want to use and it is not present in the central repository, you can push it to the central repository by following the steps above.\n\n","title":"What happens if a certain package is not present in the central repository?","titles":[null,"Soldeer as a Package Manager"]},"418":{"href":"/guides/project-setup/soldeer#remappings-caveats","html":"\n<p>If you use other dependency managers, such as git submodules or npm, ensure you don&#x27;t duplicate dependencies between\nsoldeer and the other manager.</p>\n<p>Remappings targeting dependencies installed without Soldeer are not modified or removed when using Soldeer commands,\nunless the <code>--regenerate-remappings</code> flag is specified or the <code>remappings_regenerate = true</code> option is set.</p>\n","isPage":false,"text":"\nIf you use other dependency managers, such as git submodules or npm, ensure you don&#x27;t duplicate dependencies between\nsoldeer and the other manager.\nRemappings targeting dependencies installed without Soldeer are not modified or removed when using Soldeer commands,\nunless the --regenerate-remappings flag is specified or the remappings_regenerate = true option is set.\n","title":"Remappings Caveats","titles":[null]},"419":{"href":"/guides/project-setup/soldeer#dependencies-maintenance","html":"\n<p>The vision for Soldeer is that major projects such as OpenZeppelin, Solady, Uniswap would start publishing their own\npackages to the Soldeer registry so that the community can easily include them and get timely updates.</p>\n<p>Until this happens, the Soldeer maintenance team (currently m4rio.eth) will push the most popular dependencies to the\nrepository by relying on their npmjs or GitHub versions. We are using\n<a href=\"https://github.com/mario-eth/soldeer-crawler\">an open-source crawler tool</a> to crawl and push the dependencies under the\n<code>soldeer</code> organization.</p>\n<p>For those who want an extra layer of security, the <code>soldeer.lock</code> file saves a <code>SHA-256</code> hash for each downloaded\nZIP file and the corresponding unzipped folder (see <code>soldeer_core::utils::hash_folder</code> to see how it gets generated).\nThese can be compared with the official releases to ensure the files were not manipulated.</p>\n<p><strong>For Project Maintainers</strong>\nIf you want to move your project from the Soldeer organization and take care of pushing the versions to Soldeer\nyourself, please open an issue on GitHub or contact m4rio.eth on <a href=\"https://twitter.com/m4rio_eth\">X (formerly Twitter)</a>.</p>","isPage":false,"text":"\nThe vision for Soldeer is that major projects such as OpenZeppelin, Solady, Uniswap would start publishing their own\npackages to the Soldeer registry so that the community can easily include them and get timely updates.\nUntil this happens, the Soldeer maintenance team (currently m4rio.eth) will push the most popular dependencies to the\nrepository by relying on their npmjs or GitHub versions. We are using\nan open-source crawler tool to crawl and push the dependencies under the\nsoldeer organization.\nFor those who want an extra layer of security, the soldeer.lock file saves a SHA-256 hash for each downloaded\nZIP file and the corresponding unzipped folder (see soldeer_core::utils::hash_folder to see how it gets generated).\nThese can be compared with the official releases to ensure the files were not manipulated.\nFor Project Maintainers\nIf you want to move your project from the Soldeer organization and take care of pushing the versions to Soldeer\nyourself, please open an issue on GitHub or contact m4rio.eth on X (formerly Twitter).","title":"Dependencies Maintenance","titles":[null]},"420":{"href":"/config/reference/README#config-reference","html":"\n<ul>\n<li><a href=\"/config/reference/overview.mdx\">Overview</a></li>\n<li><a href=\"/config/reference/project.mdx\">Project</a></li>\n<li><a href=\"/config/reference/solidity-compiler.mdx\">Solidity Compiler</a></li>\n<li><a href=\"/config/reference/testing.mdx\">Testing</a></li>\n<li><a href=\"/config/reference/inline-test-config.mdx\">In-line test configuration</a></li>\n<li><a href=\"/config/reference/formatter.mdx\">Formatter</a></li>\n<li><a href=\"/config/reference/linter.mdx\">Linter</a></li>\n<li><a href=\"/config/reference/doc-generator.mdx\">Documentation Generator</a></li>\n<li><a href=\"/config/reference/etherscan.mdx\">Etherscan</a></li>\n</ul>","isPage":true,"text":"\n\nOverview\nProject\nSolidity Compiler\nTesting\nIn-line test configuration\nFormatter\nLinter\nDocumentation Generator\nEtherscan\n","title":"Config Reference","titles":[null]},"421":{"href":"/config/reference/default-config#default-foundry-configuration","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">profile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The source directory</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;src&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The test directory</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">test = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;test&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The script directory</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">script = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;script&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The artifact directory</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">out = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;out&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># A list of paths to look for libraries in</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">libs = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;lib&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># A list of remappings</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">remappings = []</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Whether to autodetect remappings by scanning the `libs` folders recursively</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">auto_detect_remappings = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># A list of deployed libraries to link against</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">libraries = []</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Whether to cache builds or not</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cache = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The cache directory if enabled</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cache_path = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;cache&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Where the broadcast logs are stored</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">broadcast = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;broadcast&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># additional solc allow paths</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">allow_paths = []</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># additional solc include paths</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">include_paths = []</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Whether to ignore the cache</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">force = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The EVM version by hardfork name</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">evm_version = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;london&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># A list of contracts to output gas reports for</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">gas_reports = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;*&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># A list of contracts to ignore for gas reports</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">gas_reports_ignore = []</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Override the Solidity version (this overrides `auto_detect_solc`)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#solc_version = &#x27;0.8.10&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Whether or not Forge should auto-detect the solc version to use</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">auto_detect_solc = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Disables downloading missing solc versions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">offline = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Enables or disables the optimizer</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">optimizer = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The number of optimizer runs</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">optimizer_runs = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">200</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The verbosity of tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">verbosity = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># A list of ignored solc error codes</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ignored_error_codes = [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1878</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5574</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Whether contract build warnings will cause compilation to fail</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">deny_warnings = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Configures the permissions of cheat codes that touch the file system</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">fs_permissions = []</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Whether to emit additional build info files</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">build_info = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Whether or not to enable `vm.ffi`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">ffi = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The address of `msg.sender` in tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sender = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The address of `tx.origin` in tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tx_origin = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The initial balance of the test contract</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">initial_balance = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xffffffffffffffffffffffff&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The chain ID we are on in tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">chain_id = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">31337</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The `block.number` value during EVM execution</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">block_number = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The gas limit in tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">gas_limit = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">9223372036854775807</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The gas price in tests (in wei)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">gas_price = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The block basefee in tests (in wei)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">block_base_fee_per_gas = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The address of `block.coinbase` in tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">block_coinbase = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000000&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The block timestamp in tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">block_timestamp = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The block difficulty in tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">block_difficulty = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The memory limit of the EVM (32 MB by default)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">memory_limit = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">33554432</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Extra output to include in the contract&#x27;s artifact.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">extra_output = []</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Extra output to write to separate files.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">extra_output_files = []</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Print the names of the compiled contracts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">names = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Print the sizes of the compiled contracts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sizes = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Whether or not to use the Yul intermediate representation compilation pipeline</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">via_ir = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Enables or disables RPC caching when forking</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">no_storage_caching = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Use the given hash method for the metadata hash that is appended</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># to the bytecode.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The metadata hash can be removed from the bytecode by setting &quot;none&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">bytecode_hash = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ipfs&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># How to treat revert (and require) reason strings</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">revert_strings = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;default&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># If enabled, the Solidity compiler is instructed to generate bytecode</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># only for the required contracts. This can reduce compile time</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># for `forge test`, but is experimental.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sparse_mode = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Contains alias -&gt; URL|Env pairs for RPC endpoints that can be accessed during testing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">rpc_endpoints = { optimism = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://optimism.alchemyapi.io/v2/...&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, mainnet = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;${RPC_MAINNET}&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The Solc instance to use if any.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># This takes precedence over `auto_detect_solc`, if a version is set then this overrides auto-detection.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#solc = None</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Switch optimizer components on or off in detail</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#optimizer_details = None</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Model checker settings.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#model_checker = None,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Url of the rpc server that should be used for any rpc calls</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#eth_rpc_url = None</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Etherscan API key</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#etherscan_api_key = None</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Only run test functions matching the specified regex pattern</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#match_test = None</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Only run test functions that do not match the specified regex pattern</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#no_match_test = None</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Only run tests in contracts matching the specified regex pattern</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#match_contract = None</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Only run tests in contracts that do not match the specified regex pattern</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#no_match_contract = None</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Only run tests in source files matching the specified glob pattern</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#match_path = None</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Only run tests in source files that do not match the specified glob pattern</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#no_match_path = None</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Only show coverage for files that do not match the specified regex pattern.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#no_match_coverage = None</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Number of threads to use. Not set or zero specifies the number of logical cores.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#threads = 0</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Whether to show test execution progress</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#show_progress = false</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Pins the block number for the state fork</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#fork_block_number = None</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The block gas limit</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#block_gas_limit = None</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The path to the `build-info` directory that contains the build info json files</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#build_info_path = None</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Whether to allow `expectRevert` for internal functions.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">allow_internal_expect_revert = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Use the create 2 factory in all cases including tests and non-broadcasting scripts.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">always_use_create_2_factory = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The CREATE2 deployer address to use.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">create2_deployer = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x4e59b44847b379578588920ca78fbf26c0b4956c&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># CREATE2 salt to use for the library deployment in scripts.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">create2_library_salt = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">fmt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Maximum line length where formatter will try to wrap the line</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">line_length = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">120</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Number of spaces per indentation level</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tab_width = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Print spaces between brackets</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">bracket_spacing = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Style of uint/int256 types</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">int_types = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;long&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># If function parameters are multiline then always put the function attributes on separate lines</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">func_attrs_with_params_multiline = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Style of quotation marks</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">quote_style = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;double&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Style of underscores in number literals</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">number_underscore = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;preserve&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">fuzz</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The number of fuzz runs for fuzz tests</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">runs = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">256</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The maximum number of test case rejections allowed by proptest, to be</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># encountered during usage of `vm.assume` cheatcode. This will be used</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># to set the `max_global_rejects` value in proptest test runner config.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># `max_local_rejects` option isn&#x27;t exposed here since we&#x27;re not using</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># `prop_filter`.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">max_test_rejects = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">65536</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The weight of the dictionary</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">dictionary_weight = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">40</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The flag indicating whether to include values from storage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">include_storage = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The flag indicating whether to include push bytes values</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">include_push_bytes = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Number of runs to include in the gas report.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">gas_report_samples = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">256</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Path where fuzz failures are recorded and replayed.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># failure_persist_dir = /path/to/persist/dir</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Name of the file to record fuzz failures, defaults to `failures`.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># failure_persist_file = &quot;failures&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Show `console.log` in fuzz test.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">show_logs = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">invariant</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The number of runs that must execute for each invariant test group</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">runs = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">256</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The number of calls executed to attempt to break invariants in one run</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">depth = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">15</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Fails the invariant fuzzing if a revert occurs</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">fail_on_revert = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Allows overriding an unsafe external call when running invariant tests. eg. reentrancy checks</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">call_override = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The weight of the dictionary</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">dictionary_weight = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">80</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The flag indicating whether to include values from storage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">include_storage = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The flag indicating whether to include push bytes values</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">include_push_bytes = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The maximum number of attempts to shrink the sequence.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">shrink_run_limit = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5000</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The maximum number of rejects via `vm.assume` which can be encountered during a single</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># invariant run.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">max_assume_rejects = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">65536</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Number of runs to include in the gas report.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">gas_report_samples = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">256</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Path where invariant failures are recorded and replayed.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># failure_persist_dir = /path/to/persist/dir</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Whether to collect and display fuzzed selectors metrics.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">show_metrics = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span></code></pre>","isPage":true,"text":"\n[profile.default]\n# The source directory\nsrc = &#x27;src&#x27;\n# The test directory\ntest = &#x27;test&#x27;\n# The script directory\nscript = &#x27;script&#x27;\n# The artifact directory\nout = &#x27;out&#x27;\n# A list of paths to look for libraries in\nlibs = [&#x27;lib&#x27;]\n# A list of remappings\nremappings = []\n# Whether to autodetect remappings by scanning the `libs` folders recursively\nauto_detect_remappings = true\n# A list of deployed libraries to link against\nlibraries = []\n# Whether to cache builds or not\ncache = true\n# The cache directory if enabled\ncache_path = &#x27;cache&#x27;\n# Where the broadcast logs are stored\nbroadcast = &#x27;broadcast&#x27;\n# additional solc allow paths\nallow_paths = []\n# additional solc include paths\ninclude_paths = []\n# Whether to ignore the cache\nforce = false\n# The EVM version by hardfork name\nevm_version = &#x27;london&#x27;\n# A list of contracts to output gas reports for\ngas_reports = [&#x27;*&#x27;]\n# A list of contracts to ignore for gas reports\ngas_reports_ignore = []\n# Override the Solidity version (this overrides `auto_detect_solc`)\n#solc_version = &#x27;0.8.10&#x27;\n# Whether or not Forge should auto-detect the solc version to use\nauto_detect_solc = true\n# Disables downloading missing solc versions\noffline = false\n# Enables or disables the optimizer\noptimizer = false\n# The number of optimizer runs\noptimizer_runs = 200\n# The verbosity of tests\nverbosity = 0\n# A list of ignored solc error codes\nignored_error_codes = [1878, 5574]\n# Whether contract build warnings will cause compilation to fail\ndeny_warnings = false\n# Configures the permissions of cheat codes that touch the file system\nfs_permissions = []\n# Whether to emit additional build info files\nbuild_info = false\n# Whether or not to enable `vm.ffi`\nffi = false\n# The address of `msg.sender` in tests\nsender = &#x27;0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38&#x27;\n# The address of `tx.origin` in tests\ntx_origin = &#x27;0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38&#x27;\n# The initial balance of the test contract\ninitial_balance = &#x27;0xffffffffffffffffffffffff&#x27;\n# The chain ID we are on in tests\nchain_id = 31337\n# The `block.number` value during EVM execution\nblock_number = 1\n# The gas limit in tests\ngas_limit = 9223372036854775807\n# The gas price in tests (in wei)\ngas_price = 0\n# The block basefee in tests (in wei)\nblock_base_fee_per_gas = 0\n# The address of `block.coinbase` in tests\nblock_coinbase = &#x27;0x0000000000000000000000000000000000000000&#x27;\n# The block timestamp in tests\nblock_timestamp = 1\n# The block difficulty in tests\nblock_difficulty = 0\n# The memory limit of the EVM (32 MB by default)\nmemory_limit = 33554432\n# Extra output to include in the contract&#x27;s artifact.\nextra_output = []\n# Extra output to write to separate files.\nextra_output_files = []\n# Print the names of the compiled contracts\nnames = false\n# Print the sizes of the compiled contracts\nsizes = false\n# Whether or not to use the Yul intermediate representation compilation pipeline\nvia_ir = false\n# Enables or disables RPC caching when forking\nno_storage_caching = false\n# Use the given hash method for the metadata hash that is appended\n# to the bytecode.\n# The metadata hash can be removed from the bytecode by setting &quot;none&quot;\nbytecode_hash = &quot;ipfs&quot;\n# How to treat revert (and require) reason strings\nrevert_strings = &quot;default&quot;\n# If enabled, the Solidity compiler is instructed to generate bytecode\n# only for the required contracts. This can reduce compile time\n# for `forge test`, but is experimental.\nsparse_mode = false\n# Contains alias -&gt; URL|Env pairs for RPC endpoints that can be accessed during testing\nrpc_endpoints = { optimism = &quot;https://optimism.alchemyapi.io/v2/...&quot;, mainnet = &quot;${RPC_MAINNET}&quot; }\n# The Solc instance to use if any.\n# This takes precedence over `auto_detect_solc`, if a version is set then this overrides auto-detection.\n#solc = None\n# Switch optimizer components on or off in detail\n#optimizer_details = None\n# Model checker settings.\n#model_checker = None,\n# Url of the rpc server that should be used for any rpc calls\n#eth_rpc_url = None\n# Etherscan API key\n#etherscan_api_key = None\n# Only run test functions matching the specified regex pattern\n#match_test = None\n# Only run test functions that do not match the specified regex pattern\n#no_match_test = None\n# Only run tests in contracts matching the specified regex pattern\n#match_contract = None\n# Only run tests in contracts that do not match the specified regex pattern\n#no_match_contract = None\n# Only run tests in source files matching the specified glob pattern\n#match_path = None\n# Only run tests in source files that do not match the specified glob pattern\n#no_match_path = None\n# Only show coverage for files that do not match the specified regex pattern.\n#no_match_coverage = None\n# Number of threads to use. Not set or zero specifies the number of logical cores.\n#threads = 0\n# Whether to show test execution progress\n#show_progress = false\n# Pins the block number for the state fork\n#fork_block_number = None\n# The block gas limit\n#block_gas_limit = None\n# The path to the `build-info` directory that contains the build info json files\n#build_info_path = None\n# Whether to allow `expectRevert` for internal functions.\nallow_internal_expect_revert = false\n# Use the create 2 factory in all cases including tests and non-broadcasting scripts.\nalways_use_create_2_factory = false\n# The CREATE2 deployer address to use.\ncreate2_deployer = &quot;0x4e59b44847b379578588920ca78fbf26c0b4956c&quot;\n# CREATE2 salt to use for the library deployment in scripts.\ncreate2_library_salt = &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;\n \n[fmt]\n# Maximum line length where formatter will try to wrap the line\nline_length = 120\n# Number of spaces per indentation level\ntab_width = 4\n# Print spaces between brackets\nbracket_spacing = false\n# Style of uint/int256 types\nint_types = &quot;long&quot;\n# If function parameters are multiline then always put the function attributes on separate lines\nfunc_attrs_with_params_multiline = true\n# Style of quotation marks\nquote_style = &quot;double&quot;\n# Style of underscores in number literals\nnumber_underscore = &quot;preserve&quot;\n \n[fuzz]\n# The number of fuzz runs for fuzz tests\nruns = 256\n# The maximum number of test case rejections allowed by proptest, to be\n# encountered during usage of `vm.assume` cheatcode. This will be used\n# to set the `max_global_rejects` value in proptest test runner config.\n# `max_local_rejects` option isn&#x27;t exposed here since we&#x27;re not using\n# `prop_filter`.\nmax_test_rejects = 65536\n# The weight of the dictionary\ndictionary_weight = 40\n# The flag indicating whether to include values from storage\ninclude_storage = true\n# The flag indicating whether to include push bytes values\ninclude_push_bytes = true\n# Number of runs to include in the gas report.\ngas_report_samples = 256\n# Path where fuzz failures are recorded and replayed.\n# failure_persist_dir = /path/to/persist/dir\n# Name of the file to record fuzz failures, defaults to `failures`.\n# failure_persist_file = &quot;failures&quot;\n# Show `console.log` in fuzz test.\nshow_logs = false\n \n[invariant]\n# The number of runs that must execute for each invariant test group\nruns = 256\n# The number of calls executed to attempt to break invariants in one run\ndepth = 15\n# Fails the invariant fuzzing if a revert occurs\nfail_on_revert = false\n# Allows overriding an unsafe external call when running invariant tests. eg. reentrancy checks\ncall_override = false\n# The weight of the dictionary\ndictionary_weight = 80\n# The flag indicating whether to include values from storage\ninclude_storage = true\n# The flag indicating whether to include push bytes values\ninclude_push_bytes = true\n# The maximum number of attempts to shrink the sequence.\nshrink_run_limit = 5000\n# The maximum number of rejects via `vm.assume` which can be encountered during a single\n# invariant run.\nmax_assume_rejects = 65536\n# Number of runs to include in the gas report.\ngas_report_samples = 256\n# Path where invariant failures are recorded and replayed.\n# failure_persist_dir = /path/to/persist/dir\n# Whether to collect and display fuzzed selectors metrics.\nshow_metrics = false","title":"Default foundry configuration","titles":[null]},"422":{"href":"/config/reference/doc-generator#documentation-generator","html":"\n<p>Configuration related to the behavior of the Forge documentation generator. These keys are set in <code>[doc]</code> section.</p>\n","isPage":true,"text":"\nConfiguration related to the behavior of the Forge documentation generator. These keys are set in [doc] section.\n","title":"Documentation Generator","titles":[null]},"423":{"href":"/config/reference/doc-generator#out","html":"\n<ul>\n<li>Type: string</li>\n<li>Default: <code>docs</code></li>\n<li>Environment: <code>FOUNDRY_DOC_OUT</code></li>\n</ul>\n<p>An output path for generated documentation.</p>\n","isPage":false,"text":"\n\nType: string\nDefault: docs\nEnvironment: FOUNDRY_DOC_OUT\n\nAn output path for generated documentation.\n","title":"out","titles":[null,"Documentation Generator",null,null]},"424":{"href":"/config/reference/doc-generator#title","html":"\n<ul>\n<li>Type: string</li>\n<li>Environment: <code>FOUNDRY_DOC_TITLE</code></li>\n</ul>\n<p>Title for the generated documentation.</p>\n","isPage":false,"text":"\n\nType: string\nEnvironment: FOUNDRY_DOC_TITLE\n\nTitle for the generated documentation.\n","title":"title","titles":[null,"Documentation Generator",null,null]},"425":{"href":"/config/reference/doc-generator#book","html":"\n<ul>\n<li>Type: string</li>\n<li>Default: <code>./book.toml</code></li>\n<li>Environment: <code>FOUNDRY_DOC_BOOK</code></li>\n</ul>\n<p>Path to user provided <code>book.toml</code>. It will be merged with default settings during doc generation.</p>\n","isPage":false,"text":"\n\nType: string\nDefault: ./book.toml\nEnvironment: FOUNDRY_DOC_BOOK\n\nPath to user provided book.toml. It will be merged with default settings during doc generation.\n","title":"book","titles":[null,"Documentation Generator",null,null]},"426":{"href":"/config/reference/doc-generator#repository","html":"\n<ul>\n<li>Type: string</li>\n<li>Environment: <code>FOUNDRY_DOC_REPOSITORY</code></li>\n</ul>\n<p>The git repository URL. Used to provide links to git source files.\nIf missing, <code>forge</code> will attempt to look up the current origin url and use its value.</p>\n","isPage":false,"text":"\n\nType: string\nEnvironment: FOUNDRY_DOC_REPOSITORY\n\nThe git repository URL. Used to provide links to git source files.\nIf missing, forge will attempt to look up the current origin url and use its value.\n","title":"repository","titles":[null,"Documentation Generator",null,null]},"427":{"href":"/config/reference/doc-generator#ignore","html":"\n<ul>\n<li>Type: array of strings (patterns)</li>\n<li>Default: <code>[]</code></li>\n<li>Environment: <code>FOUNDRY_DOC_IGNORE</code></li>\n</ul>\n<p>List of files to ignore when generating documentation. This is a comma separated list of glob patterns.</p>","isPage":false,"text":"\n\nType: array of strings (patterns)\nDefault: []\nEnvironment: FOUNDRY_DOC_IGNORE\n\nList of files to ignore when generating documentation. This is a comma separated list of glob patterns.","title":"ignore","titles":[null,"Documentation Generator",null,null]},"428":{"href":"/config/reference/etherscan#etherscan","html":"\n<p>Configuration related to Etherscan, such as API keys. This configuration is used in various places by Forge.</p>\n<p>The <code>[etherscan]</code> section is a mapping of keys to Etherscan configuration tables.</p>\n<p>With Etherscan API V2, only Etherscan keys are valid, which can be used to access all similar explorers (e.g. BscScan / BaseScan / Polygonscan).</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">etherscan</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet = { key = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;${ETHERSCAN_API_KEY}&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet2 = { key = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ABCDEFG&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, chain = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;mainnet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">optimism = { key = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1234567&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">unknown_chain = { key = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ABCDEFG&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, url = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;&lt;etherscan api url for this chain&gt;&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span></code></pre>","isPage":true,"text":"\nConfiguration related to Etherscan, such as API keys. This configuration is used in various places by Forge.\nThe [etherscan] section is a mapping of keys to Etherscan configuration tables.\nWith Etherscan API V2, only Etherscan keys are valid, which can be used to access all similar explorers (e.g. BscScan / BaseScan / Polygonscan).\n[etherscan]\nmainnet = { key = &quot;${ETHERSCAN_API_KEY}&quot; }\nmainnet2 = { key = &quot;ABCDEFG&quot;, chain = &quot;mainnet&quot; }\noptimism = { key = &quot;1234567&quot; }\nunknown_chain = { key = &quot;ABCDEFG&quot;, url = &quot;&lt;etherscan api url for this chain&gt;&quot; }","title":"Etherscan","titles":[null]},"429":{"href":"/config/reference/formatter#formatter","html":"\n<p>Configuration related to the behavior of the Forge formatter. Each of these keys live under the <code>[fmt]</code> section.</p>\n","isPage":true,"text":"\nConfiguration related to the behavior of the Forge formatter. Each of these keys live under the [fmt] section.\n","title":"Formatter","titles":[null]},"430":{"href":"/config/reference/formatter#single_line_statement_blocks","html":"\n<blockquote>\n<p>This allows configuring the style of statement blocks independently of the line length.</p>\n</blockquote>\n<p>The <code>single_line_statement_blocks</code> configuration option in Foundry controls whether statement blocks (code blocks enclosed in <code>{ }</code>) will be formatted to a single line or multiple lines.</p>\n<p>It has three possible values:</p>\n<ul>\n<li><code>&quot;single&quot;</code> - Statement blocks will be formatted to a single line if possible.</li>\n<li><code>&quot;multi&quot;</code> - Statement blocks will always be formatted to multiple lines.</li>\n<li><code>&quot;preserve&quot;</code> - Keep the existing single/multi line formatting of statement blocks.</li>\n</ul>\n<p>For example, with <code>&quot;single&quot;</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) { </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; }</span></span></code></pre>\n<p>With <code>&quot;multi&quot;</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>And with <code>&quot;preserve&quot;</code>, it will keep the original formatting of the code.</p>\n","isPage":false,"text":"\n\nThis allows configuring the style of statement blocks independently of the line length.\n\nThe single_line_statement_blocks configuration option in Foundry controls whether statement blocks (code blocks enclosed in { }) will be formatted to a single line or multiple lines.\nIt has three possible values:\n\n&quot;single&quot; - Statement blocks will be formatted to a single line if possible.\n&quot;multi&quot; - Statement blocks will always be formatted to multiple lines.\n&quot;preserve&quot; - Keep the existing single/multi line formatting of statement blocks.\n\nFor example, with &quot;single&quot;:\nif (true) { return true; }\nWith &quot;multi&quot;:\nif (true) {\n  return true;\n}\nAnd with &quot;preserve&quot;, it will keep the original formatting of the code.\n","title":"single_line_statement_blocks","titles":[null,"Formatter"]},"431":{"href":"/config/reference/formatter#multiline_func_header","html":"\n<blockquote>\n<p>This allows configuring the formatting of long function headers.</p>\n</blockquote>\n<ul>\n<li>Type: string</li>\n<li>Default: <code>attributes_first</code></li>\n<li>Environment: <code>FOUNDRY_FMT_MULTILINE_FUNC_HEADER</code> or <code>DAPP_FMT_MULTILINE_FUNC_HEADER</code></li>\n</ul>\n<p>The <code>multiline_func_header</code> configuration option in Foundry controls how function headers (the line containing the function name, parameters, return values etc.) are formatted when they exceed the max line length.</p>\n<p>Style of multiline function header in case it doesn&#x27;t fit in one line. Valid possible values:</p>\n<ul>\n<li><code>&quot;attributes_first&quot;</code> - (default)  Write function attributes multiline first</li>\n<li><code>&quot;params_first&quot;</code> - Break the function header into multiple lines, with each parameter on its own line. The function name stays on the first line.</li>\n<li><code>&quot;all&quot;</code> - If function parameters or attributes are multiline, multiline everything</li>\n</ul>\n<p>Style of multiline function header in case it doesn&#x27;t fit in one line. Valid values are:</p>\n<p>For example, with <code>&quot;params_first&quot;</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> myFunction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> param1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> param2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> param3</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>And with <code>&quot;all&quot;</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> myFunction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> param1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> param2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> param3</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // ...  </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n\nThis allows configuring the formatting of long function headers.\n\n\nType: string\nDefault: attributes_first\nEnvironment: FOUNDRY_FMT_MULTILINE_FUNC_HEADER or DAPP_FMT_MULTILINE_FUNC_HEADER\n\nThe multiline_func_header configuration option in Foundry controls how function headers (the line containing the function name, parameters, return values etc.) are formatted when they exceed the max line length.\nStyle of multiline function header in case it doesn&#x27;t fit in one line. Valid possible values:\n\n&quot;attributes_first&quot; - (default)  Write function attributes multiline first\n&quot;params_first&quot; - Break the function header into multiple lines, with each parameter on its own line. The function name stays on the first line.\n&quot;all&quot; - If function parameters or attributes are multiline, multiline everything\n\nStyle of multiline function header in case it doesn&#x27;t fit in one line. Valid values are:\nFor example, with &quot;params_first&quot;:\nfunction myFunction(\n    uint256 param1, \n    uint256 param2,\n    uint256 param3\n) public returns (uint256) {\n  // ...\n}\nAnd with &quot;all&quot;:\nfunction myFunction(\n    uint256 param1,\n    uint256 param2, \n    uint256 param3\n) \n    public \n    returns (uint256) \n{\n  // ...  \n}\n","title":"multiline_func_header","titles":[null,"Formatter"]},"432":{"href":"/config/reference/formatter#sort_imports","html":"\n<blockquote>\n<p>helps organize imports and makes it easier to find specific imports quickly.</p>\n</blockquote>\n<p>The <code>sort_imports</code> configuration option in Foundry controls whether import statements are sorted alphabetically within their import groups.</p>\n<p>From the code snippets provided:</p>\n<ul>\n<li>In <code>fmt.rs</code>, <code>sort_imports</code> is a configuration option that can be set to <code>true</code> or <code>false</code>.</li>\n<li>In <code>formatter.rs</code>, the <code>sort_imports()</code> method is called to sort import statements alphabetically if <code>sort_imports</code> is enabled.</li>\n<li>It finds import groups separated by blank lines in the source code.</li>\n<li>Then sorts the import statements within each group alphabetically.</li>\n</ul>\n<p>So in summary, enabling <code>sort_imports</code> will reorder solidity import statements alphabetically within their section groups, while preserving the relative ordering of the groups.</p>\n","isPage":false,"text":"\n\nhelps organize imports and makes it easier to find specific imports quickly.\n\nThe sort_imports configuration option in Foundry controls whether import statements are sorted alphabetically within their import groups.\nFrom the code snippets provided:\n\nIn fmt.rs, sort_imports is a configuration option that can be set to true or false.\nIn formatter.rs, the sort_imports() method is called to sort import statements alphabetically if sort_imports is enabled.\nIt finds import groups separated by blank lines in the source code.\nThen sorts the import statements within each group alphabetically.\n\nSo in summary, enabling sort_imports will reorder solidity import statements alphabetically within their section groups, while preserving the relative ordering of the groups.\n","title":"sort_imports","titles":[null,"Formatter"]},"433":{"href":"/config/reference/formatter#contract_new_lines","html":"\n<blockquote>\n<p>Controls the addition of blank lines before and after contract definitions.</p>\n</blockquote>\n<p>The <code>contract_new_lines</code> configuration option in Foundry controls whether empty lines are added before and after contract definitions.</p>\n<p>When enabled (<code>contract_new_lines = true</code>):</p>\n<ul>\n<li>An empty line will be added before the start of a contract definition.</li>\n<li>An empty line will also be added after the end of a contract definition.</li>\n</ul>\n<p>For example, with <code>contract_new_lines</code> enabled:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Empty line before contract contract MyContract { // ... } // Empty line after contract</span></span></code></pre>\n<p>This helps visually separate contract definitions and improve readability.</p>\n<p>When disabled (<code>contract_new_lines = false</code>), empty lines will not be added around contracts.</p>\n<p>So in summary, the <code>contract_new_lines</code> option controls the addition of blank lines before and after contract definitions.</p>\n","isPage":false,"text":"\n\nControls the addition of blank lines before and after contract definitions.\n\nThe contract_new_lines configuration option in Foundry controls whether empty lines are added before and after contract definitions.\nWhen enabled (contract_new_lines = true):\n\nAn empty line will be added before the start of a contract definition.\nAn empty line will also be added after the end of a contract definition.\n\nFor example, with contract_new_lines enabled:\n// Empty line before contract contract MyContract { // ... } // Empty line after contract\nThis helps visually separate contract definitions and improve readability.\nWhen disabled (contract_new_lines = false), empty lines will not be added around contracts.\nSo in summary, the contract_new_lines option controls the addition of blank lines before and after contract definitions.\n","title":"contract_new_lines","titles":[null,"Formatter"]},"434":{"href":"/config/reference/formatter#override_spacing","html":"\n<p>The <code>override_spacing</code> configuration option in Foundry controls whether a space is printed between the <code>override</code> keyword and the parent contracts when overriding a function or modifier.</p>\n<p>When <code>override_spacing</code> is enabled:</p>\n<ul>\n<li>A space will be added after the <code>override</code> keyword.</li>\n</ul>\n<p>For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Child</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Parent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> foo</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">override</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Parent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>When disabled, there will be no space between <code>override</code> and the parent contracts:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Child</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Parent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> foo</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">override</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Parent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { } </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Enables configuring the styling of override declarations.</p>\n<ul>\n<li><code>override_spacing = true</code> - Print a space after <code>override</code></li>\n<li><code>override_spacing = false</code> - No space after <code>override</code></li>\n</ul>\n","isPage":false,"text":"\nThe override_spacing configuration option in Foundry controls whether a space is printed between the override keyword and the parent contracts when overriding a function or modifier.\nWhen override_spacing is enabled:\n\nA space will be added after the override keyword.\n\nFor example:\ncontract Child is Parent {\n  function foo() override (Parent) public { }\n}\nWhen disabled, there will be no space between override and the parent contracts:\ncontract Child is Parent {\n  function foo() override(Parent) public { } \n}\nEnables configuring the styling of override declarations.\n\noverride_spacing = true - Print a space after override\noverride_spacing = false - No space after override\n\n","title":"override_spacing","titles":[null,"Formatter"]},"435":{"href":"/config/reference/formatter#line_length","html":"\n<ul>\n<li>Type: number</li>\n<li>Default: 120</li>\n<li>Environment: <code>FOUNDRY_FMT_LINE_LENGTH</code> or <code>DAPP_FMT_LINE_LENGTH</code></li>\n</ul>\n<p>Maximum line length where formatter will try to wrap the line.</p>\n","isPage":false,"text":"\n\nType: number\nDefault: 120\nEnvironment: FOUNDRY_FMT_LINE_LENGTH or DAPP_FMT_LINE_LENGTH\n\nMaximum line length where formatter will try to wrap the line.\n","title":"line_length","titles":[null,"Formatter"]},"436":{"href":"/config/reference/formatter#tab_width","html":"\n<ul>\n<li>Type: number</li>\n<li>Default: 4</li>\n<li>Environment: <code>FOUNDRY_FMT_TAB_WIDTH</code> or <code>DAPP_FMT_TAB_WIDTH</code></li>\n</ul>\n<p>Number of spaces per indentation level.</p>\n","isPage":false,"text":"\n\nType: number\nDefault: 4\nEnvironment: FOUNDRY_FMT_TAB_WIDTH or DAPP_FMT_TAB_WIDTH\n\nNumber of spaces per indentation level.\n","title":"tab_width","titles":[null,"Formatter"]},"437":{"href":"/config/reference/formatter#bracket_spacing","html":"\n<ul>\n<li>Type: bool</li>\n<li>Default: false</li>\n<li>Environment: <code>FOUNDRY_FMT_BRACKET_SPACING</code> or <code>DAPP_FMT_BRACKET_SPACING</code></li>\n</ul>\n<p>Whether or not to print spaces between brackets.</p>\n","isPage":false,"text":"\n\nType: bool\nDefault: false\nEnvironment: FOUNDRY_FMT_BRACKET_SPACING or DAPP_FMT_BRACKET_SPACING\n\nWhether or not to print spaces between brackets.\n","title":"bracket_spacing","titles":[null,"Formatter"]},"438":{"href":"/config/reference/formatter#int_types","html":"\n<ul>\n<li>Type: string</li>\n<li>Default: <code>long</code></li>\n<li>Environment: <code>FOUNDRY_FMT_INT_TYPES</code> or <code>DAPP_FMT_INT_TYPES</code></li>\n</ul>\n<p>Style of uint/int256 types. Valid values are:</p>\n<ul>\n<li><code>long</code> (default): Use the explicit <code>uint256</code> or <code>int256</code></li>\n<li><code>short</code>: Use the implicit <code>uint</code> or <code>int</code></li>\n<li><code>preserve</code>: Use the type defined in the source code</li>\n</ul>\n","isPage":false,"text":"\n\nType: string\nDefault: long\nEnvironment: FOUNDRY_FMT_INT_TYPES or DAPP_FMT_INT_TYPES\n\nStyle of uint/int256 types. Valid values are:\n\nlong (default): Use the explicit uint256 or int256\nshort: Use the implicit uint or int\npreserve: Use the type defined in the source code\n\n","title":"int_types","titles":[null,"Formatter"]},"439":{"href":"/config/reference/formatter#quote_style","html":"\n<ul>\n<li>Type: string</li>\n<li>Default: <code>double</code></li>\n<li>Environment: <code>FOUNDRY_FMT_QUOTE_STYLE</code> or <code>DAPP_FMT_QUOTE_STYLE</code></li>\n</ul>\n<p>Defines the quotation mark style. Valid values are:</p>\n<ul>\n<li><code>double</code> (default): Use double quotes where possible (<code>&quot;</code>)</li>\n<li><code>single</code>: Use single quotes where possible (<code>&#x27;</code>)</li>\n<li><code>preserve</code>: Use quotation mark defined in the source code</li>\n</ul>\n","isPage":false,"text":"\n\nType: string\nDefault: double\nEnvironment: FOUNDRY_FMT_QUOTE_STYLE or DAPP_FMT_QUOTE_STYLE\n\nDefines the quotation mark style. Valid values are:\n\ndouble (default): Use double quotes where possible (&quot;)\nsingle: Use single quotes where possible (&#x27;)\npreserve: Use quotation mark defined in the source code\n\n","title":"quote_style","titles":[null,"Formatter"]},"440":{"href":"/config/reference/formatter#number_underscore","html":"\n<ul>\n<li>Type: string</li>\n<li>Default: <code>preserve</code></li>\n<li>Environment: <code>FOUNDRY_FMT_NUMBER_UNDERSCORE</code> or <code>DAPP_FMT_NUMBER_UNDERSCORE</code></li>\n</ul>\n<p>Style of underscores in number literals. Valid values are:</p>\n<ul>\n<li><code>preserve</code> (default): Use the underscores defined in the source code</li>\n<li><code>thousands</code>: Add an underscore every thousand, if greater than 9999. i.e. <code>1000</code> is formatted as <code>1000</code> and <code>10000</code> as <code>10_000</code></li>\n<li><code>remove</code>: Remove all underscores</li>\n</ul>\n","isPage":false,"text":"\n\nType: string\nDefault: preserve\nEnvironment: FOUNDRY_FMT_NUMBER_UNDERSCORE or DAPP_FMT_NUMBER_UNDERSCORE\n\nStyle of underscores in number literals. Valid values are:\n\npreserve (default): Use the underscores defined in the source code\nthousands: Add an underscore every thousand, if greater than 9999. i.e. 1000 is formatted as 1000 and 10000 as 10_000\nremove: Remove all underscores\n\n","title":"number_underscore","titles":[null,"Formatter"]},"441":{"href":"/config/reference/formatter#hex_underscore","html":"\n<ul>\n<li>Type: string</li>\n<li>Default: <code>remove</code></li>\n<li>Environment: <code>FOUNDRY_FMT_HEX_UNDERSCORE</code> or <code>DAPP_FMT_HEX_UNDERSCORE</code></li>\n</ul>\n<p>Style of underscores in bytes literals. Valid values are:</p>\n<ul>\n<li><code>preserve</code>: Use the underscores defined in the source code</li>\n<li><code>remove</code> (default): Remove all underscores</li>\n<li><code>bytes</code>: Add underscore as separator between byte boundaries. i.e. <code>hex&quot;deadbeef&quot;</code> is formatted as <code>hex&quot;de_ad_be_ef&quot;</code></li>\n</ul>\n","isPage":false,"text":"\n\nType: string\nDefault: remove\nEnvironment: FOUNDRY_FMT_HEX_UNDERSCORE or DAPP_FMT_HEX_UNDERSCORE\n\nStyle of underscores in bytes literals. Valid values are:\n\npreserve: Use the underscores defined in the source code\nremove (default): Remove all underscores\nbytes: Add underscore as separator between byte boundaries. i.e. hex&quot;deadbeef&quot; is formatted as hex&quot;de_ad_be_ef&quot;\n\n","title":"hex_underscore","titles":[null,"Formatter"]},"442":{"href":"/config/reference/formatter#wrap_comments","html":"\n<ul>\n<li>Type: bool</li>\n<li>Default: false</li>\n<li>Environment: <code>FOUNDRY_FMT_WRAP_COMMENTS</code> or <code>DAPP_FMT_WRAP_COMMENTS</code></li>\n</ul>\n<p>Whether or not to wrap comments on <code>line_length</code> reached.</p>\n","isPage":false,"text":"\n\nType: bool\nDefault: false\nEnvironment: FOUNDRY_FMT_WRAP_COMMENTS or DAPP_FMT_WRAP_COMMENTS\n\nWhether or not to wrap comments on line_length reached.\n","title":"wrap_comments","titles":[null,"Formatter"]},"443":{"href":"/config/reference/formatter#ignore","html":"\n<ul>\n<li>Type: array of strings (patterns)</li>\n<li>Default: <code>[]</code></li>\n<li>Environment: <code>FOUNDRY_FMT_IGNORE</code> or <code>DAPP_FMT_IGNORE</code></li>\n</ul>\n<p>List of files to ignore when formatting. This is a comma separated list of glob patterns.</p>","isPage":false,"text":"\n\nType: array of strings (patterns)\nDefault: []\nEnvironment: FOUNDRY_FMT_IGNORE or DAPP_FMT_IGNORE\n\nList of files to ignore when formatting. This is a comma separated list of glob patterns.","title":"ignore","titles":[null,"Formatter"]},"444":{"href":"/config/reference/inline-test-config#in-line-test-configuration","html":"\n<p>Foundry users are enabled to specify overall test configurations, using a combination of ENV variables and config statements in the <code>foundry.toml</code>. Checkout the <a href=\"./testing.md\"><code>Testing reference</code></a> for a detailed description.</p>\n<p>Despite this may work in the general case, some tests may need finer control over their configuration. For such reason Forge provides a way to specify per-test configs for invariant and fuzz testing scenarios.</p>\n<p>Users can in-line test config statements directly in Solidity comments. This would affect the behavior of the <code>forge test</code> command for a specific test instance, as illustrated in the example below.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  /// forge-config: default.fuzz.runs = 100</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  /// forge-config: ci.fuzz.runs = 500</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  /// forge-config: default.fuzz.show-logs = true</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> test_SimpleFuzzTest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> x</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // --- snip ---</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>What we are asking here is to run our fuzzer <code>100</code> and <code>500</code> times for the <code>default</code> and <code>ci</code> profiles respectively. The interesting fact is that this would override any fuzz <code>runs</code> setup existing at a global level. All other configs would be inherited from the global context, making this acting as a fallback for all possible configurations.</p>\n","isPage":true,"text":"\nFoundry users are enabled to specify overall test configurations, using a combination of ENV variables and config statements in the foundry.toml. Checkout the Testing reference for a detailed description.\nDespite this may work in the general case, some tests may need finer control over their configuration. For such reason Forge provides a way to specify per-test configs for invariant and fuzz testing scenarios.\nUsers can in-line test config statements directly in Solidity comments. This would affect the behavior of the forge test command for a specific test instance, as illustrated in the example below.\ncontract MyTest is Test {\n  /// forge-config: default.fuzz.runs = 100\n  /// forge-config: ci.fuzz.runs = 500\n  /// forge-config: default.fuzz.show-logs = true\n  function test_SimpleFuzzTest(uint256 x) public {\n    // --- snip ---\n  }\n}\nWhat we are asking here is to run our fuzzer 100 and 500 times for the default and ci profiles respectively. The interesting fact is that this would override any fuzz runs setup existing at a global level. All other configs would be inherited from the global context, making this acting as a fallback for all possible configurations.\n","title":"In-line test configuration","titles":[null]},"445":{"href":"/config/reference/inline-test-config#block-comments","html":"\n<p>In-line test configurations can also be expressed in block comments, as illustrated in the example.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  /**</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   * forge-config: default.fuzz.runs = 1024</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   * forge-config: default.fuzz.max-test-rejects = 500</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   * forge-config: default.fuzz.show-logs = true</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">   */</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> test_SimpleFuzzTest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> x</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // --- snip ---</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nIn-line test configurations can also be expressed in block comments, as illustrated in the example.\ncontract MyTest is Test {\n  /**\n   * forge-config: default.fuzz.runs = 1024\n   * forge-config: default.fuzz.max-test-rejects = 500\n   * forge-config: default.fuzz.show-logs = true\n   */\n  function test_SimpleFuzzTest(uint256 x) public {\n    // --- snip ---\n  }\n}\n","title":"Block comments","titles":[null,"In-line test configuration"]},"446":{"href":"/config/reference/inline-test-config#in-line-fuzz-configs","html":"\n<p>Users can specify the configs described in the table. Each statement must have a prefix of the form <code>forge-config: ${PROFILE}.fuzz.</code></p>\n<table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>runs</code></td><td>integer</td><td>The amount of fuzz runs to perform for this specific test case. <a href=\"./testing.md#runs\"><code>Reference</code></a>.</td></tr><tr><td><code>max-test-rejects</code></td><td>integer</td><td>The maximum number of combined inputs that may be rejected before the test as a whole aborts. <a href=\"./testing.md#max_test_rejects\"><code>Reference</code></a>.</td></tr><tr><td><code>show-logs</code></td><td>boolean</td><td>The flag indicates whether to display console logs in fuzz tests or not. Works when <code>verbosity &gt;= 2</code>. <a href=\"./testing.md#show_logs\"><code>Reference</code></a>.</td></tr></tbody></table>\n<p>Fuzz config example</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyFuzzTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  /// forge-config: default.fuzz.runs = 100</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  /// forge-config: default.fuzz.max-test-rejects = 2</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  /// forge-config: default.fuzz.show-logs = true</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> test_InlineConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> x</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // --- snip ---</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nUsers can specify the configs described in the table. Each statement must have a prefix of the form forge-config: ${PROFILE}.fuzz.\nParameterTypeDescriptionrunsintegerThe amount of fuzz runs to perform for this specific test case. Reference.max-test-rejectsintegerThe maximum number of combined inputs that may be rejected before the test as a whole aborts. Reference.show-logsbooleanThe flag indicates whether to display console logs in fuzz tests or not. Works when verbosity &gt;= 2. Reference.\nFuzz config example\ncontract MyFuzzTest is Test {\n  /// forge-config: default.fuzz.runs = 100\n  /// forge-config: default.fuzz.max-test-rejects = 2\n  /// forge-config: default.fuzz.show-logs = true\n  function test_InlineConfig(uint256 x) public {\n    // --- snip ---\n  }\n}\n","title":"In-line fuzz configs","titles":[null,"In-line test configuration"]},"447":{"href":"/config/reference/inline-test-config#in-line-invariant-configs","html":"\n<p>Users can specify the configs described in the table. Each statement must have a prefix of the form <code>forge-config: ${PROFILE}.invariant.</code></p>\n<table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>runs</code></td><td>integer</td><td>The amount of invariant runs to perform for this specific test case. <a href=\"./testing.md#runs-1\"><code>Reference</code></a>.</td></tr><tr><td><code>depth</code></td><td>integer</td><td>The number of calls executed to attempt to break invariant in one run. <a href=\"./testing.md#depth\"><code>Reference</code></a>.</td></tr><tr><td><code>fail-on-revert</code></td><td>boolean</td><td>Fails the invariant fuzzing if a revert occurs. <a href=\"./testing.md#fail_on_revert\"><code>Reference</code></a>.</td></tr><tr><td><code>call-override</code></td><td>boolean</td><td>Overrides unsafe external calls when running invariant test. <a href=\"./testing.md#call_override\"><code>Reference</code></a>.</td></tr></tbody></table>\n<p>Invariant config example</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyInvariantTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  /// forge-config: default.invariant.runs = 100</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  /// forge-config: default.invariant.depth = 2</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  /// forge-config: default.invariant.fail-on-revert = false</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  /// forge-config: default.invariant.call-override = true</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> invariant_InlineConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // --- snip ---</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nUsers can specify the configs described in the table. Each statement must have a prefix of the form forge-config: ${PROFILE}.invariant.\nParameterTypeDescriptionrunsintegerThe amount of invariant runs to perform for this specific test case. Reference.depthintegerThe number of calls executed to attempt to break invariant in one run. Reference.fail-on-revertbooleanFails the invariant fuzzing if a revert occurs. Reference.call-overridebooleanOverrides unsafe external calls when running invariant test. Reference.\nInvariant config example\ncontract MyInvariantTest is Test {\n  /// forge-config: default.invariant.runs = 100\n  /// forge-config: default.invariant.depth = 2\n  /// forge-config: default.invariant.fail-on-revert = false\n  /// forge-config: default.invariant.call-override = true\n  function invariant_InlineConfig() public {\n    // --- snip ---\n  }\n}","title":"In-line invariant configs","titles":[null,"In-line test configuration"]},"448":{"href":"/config/reference/linter#linter-configuration","html":"\n<p>Configuration related to the behavior of the linter. These keys are set in the <code>[lint]</code> section.</p>\n","isPage":true,"text":"\nConfiguration related to the behavior of the linter. These keys are set in the [lint] section.\n","title":"Linter Configuration","titles":[null]},"449":{"href":"/config/reference/linter#severity","html":"\n<ul>\n<li>Type: array of strings</li>\n<li>Default: all severities enabled (<code>high</code>, <code>med</code>, <code>low</code>, <code>info</code>, <code>gas</code>)</li>\n<li>Environment: <code>FOUNDRY_LINT_SEVERITY</code></li>\n</ul>\n<p>Specifies which lints to run based on severity. If omitted, all severities are checked.</p>\n","isPage":false,"text":"\n\nType: array of strings\nDefault: all severities enabled (high, med, low, info, gas)\nEnvironment: FOUNDRY_LINT_SEVERITY\n\nSpecifies which lints to run based on severity. If omitted, all severities are checked.\n","title":"severity","titles":[null,"Linter Configuration",null,null]},"450":{"href":"/config/reference/linter#exclude_lints","html":"\n<ul>\n<li>Type: array of strings</li>\n<li>Default: <code>[]</code></li>\n<li>Environment: <code>FOUNDRY_LINT_EXCLUDE_LINTS</code></li>\n</ul>\n<p>List of lint IDs to exclude from checking (e.g., <code>&quot;mixed-case-function&quot;</code>).</p>\n","isPage":false,"text":"\n\nType: array of strings\nDefault: []\nEnvironment: FOUNDRY_LINT_EXCLUDE_LINTS\n\nList of lint IDs to exclude from checking (e.g., &quot;mixed-case-function&quot;).\n","title":"exclude_lints","titles":[null,"Linter Configuration",null,null]},"451":{"href":"/config/reference/linter#ignore","html":"\n<ul>\n<li>Type: array of strings (patterns)</li>\n<li>Default: <code>[]</code></li>\n<li>Environment: <code>FOUNDRY_LINT_IGNORE</code></li>\n</ul>\n<p>List of files or patterns to ignore when running the linter. This is a comma-separated list of glob patterns.</p>\n","isPage":false,"text":"\n\nType: array of strings (patterns)\nDefault: []\nEnvironment: FOUNDRY_LINT_IGNORE\n\nList of files or patterns to ignore when running the linter. This is a comma-separated list of glob patterns.\n","title":"ignore","titles":[null,"Linter Configuration",null,null]},"452":{"href":"/config/reference/linter#inline-configuration","html":"\n<p>The linter also offers the ability to disable lints for specific sections of code using inline comment directives.\nThis is useful when you need to suppress false positives or have valid reasons for code that would otherwise trigger a lint warning.</p>\n<p>To disable lints using inline config, your comment must follow this format:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">/// forge-lint: &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">directive</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;(&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">lint-ids</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;)</span></span></code></pre>\n<p>Where:</p>\n<ul>\n<li><code>&lt;directive&gt;</code> is one of the directives from the table below</li>\n<li><code>&lt;lint-ids&gt;</code> is a comma-separated list of lint identifiers, or <code>all</code> to disable all lints</li>\n</ul>\n","isPage":false,"text":"\nThe linter also offers the ability to disable lints for specific sections of code using inline comment directives.\nThis is useful when you need to suppress false positives or have valid reasons for code that would otherwise trigger a lint warning.\nTo disable lints using inline config, your comment must follow this format:\n/// forge-lint: &lt;directive&gt;(&lt;lint-ids&gt;)\nWhere:\n\n&lt;directive&gt; is one of the directives from the table below\n&lt;lint-ids&gt; is a comma-separated list of lint identifiers, or all to disable all lints\n\n","title":"Inline Configuration","titles":[null]},"453":{"href":"/config/reference/linter#supported-inline-directives","html":"\n<table><thead><tr><th>Directive</th><th>Description</th><th>Scope</th></tr></thead><tbody><tr><td><code>disable-next-item</code></td><td>Disables lints for the next code item (contract, function, variable, struct, etc.)</td><td>Next item regardless of line count</td></tr><tr><td><code>disable-line</code></td><td>Disables lints for the current line</td><td>Current line only</td></tr><tr><td><code>disable-next-line</code></td><td>Disables lints for the next line</td><td>Next line only</td></tr><tr><td><code>disable-start</code> / <code>disable-end</code></td><td>Disables lints for all code between the start and end comments</td><td>Block of code between directives</td></tr></tbody></table>\n","isPage":false,"text":"\nDirectiveDescriptionScopedisable-next-itemDisables lints for the next code item (contract, function, variable, struct, etc.)Next item regardless of line countdisable-lineDisables lints for the current lineCurrent line onlydisable-next-lineDisables lints for the next lineNext line onlydisable-start / disable-endDisables lints for all code between the start and end commentsBlock of code between directives\n","title":"Supported Inline Directives","titles":[null,"Inline Configuration"]},"454":{"href":"/config/reference/linter#best-practices","html":"\n<ol>\n<li><strong>Be Specific</strong>: Always specify which lint(s) you&#x27;re disabling rather than using <code>all</code>.</li>\n<li><strong>Add Comments</strong>: Explain why you&#x27;re disabling the lint to help future maintainers.</li>\n<li><strong>Minimize Scope</strong>: Use the most targeted directive possible (e.g., <code>disable-line</code> instead of <code>disable-start/end</code>).</li>\n</ol>","isPage":false,"text":"\n\nBe Specific: Always specify which lint(s) you&#x27;re disabling rather than using all.\nAdd Comments: Explain why you&#x27;re disabling the lint to help future maintainers.\nMinimize Scope: Use the most targeted directive possible (e.g., disable-line instead of disable-start/end).\n","title":"Best Practices","titles":[null,"Inline Configuration"]},"455":{"href":"/config/reference/overview#config-overview","html":"\n<p>Foundry&#x27;s configuration system allows you to configure its tools.</p>\n","isPage":true,"text":"\nFoundry&#x27;s configuration system allows you to configure its tools.\n","title":"Config Overview","titles":[null]},"456":{"href":"/config/reference/overview#profiles","html":"\n<p>Configuration can be arbitrarily namespaced into profiles. The default profile is named <code>default</code>, and all other profiles inherit values from this profile. Profiles are defined in the <code>profile</code> map.</p>\n<p>To add a profile named <code>local</code>, you would add:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">profile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">local</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n<p>You can select the profile to use by setting the <code>FOUNDRY_PROFILE</code> environment variable.</p>\n","isPage":false,"text":"\nConfiguration can be arbitrarily namespaced into profiles. The default profile is named default, and all other profiles inherit values from this profile. Profiles are defined in the profile map.\nTo add a profile named local, you would add:\n[profile.local]\nYou can select the profile to use by setting the FOUNDRY_PROFILE environment variable.\n","title":"Profiles","titles":[null,"Config Overview"]},"457":{"href":"/config/reference/overview#global-configuration","html":"\n<p>You can create a <code>foundry.toml</code> file in <code>~/.foundry</code> folder to configure Foundry globally.</p>\n","isPage":false,"text":"\nYou can create a foundry.toml file in ~/.foundry folder to configure Foundry globally.\n","title":"Global configuration","titles":[null,"Config Overview"]},"458":{"href":"/config/reference/overview#environment-variables","html":"\n<p>Configuration can be overridden with <code>FOUNDRY_</code> and <code>DAPP_</code> prefixed environment variables.</p>\n<p>Exceptions are:</p>\n<ul>\n<li><code>FOUNDRY_FFI</code>, <code>DAPP_FFI</code>, <code>DAPP_TEST_FFI</code></li>\n<li><code>FOUNDRY_PROFILE</code></li>\n<li><code>FOUNDRY_REMAPPINGS</code>, <code>DAPP_REMAPPINGS</code></li>\n<li><code>FOUNDRY_LIBRARIES</code>, <code>DAPP_LIBRARIES</code></li>\n<li><code>FOUNDRY_FS_PERMISSIONS</code>, <code>DAPP_FS_PERMISSIONS</code>, <code>DAPP_TEST_FS_PERMISSIONS</code></li>\n<li><code>DAPP_TEST_CACHE</code></li>\n<li><code>DAPP_TEST_FUZZ_RUNS</code></li>\n<li><code>DAPP_TEST_FUZZ_DEPTH</code></li>\n</ul>\n","isPage":false,"text":"\nConfiguration can be overridden with FOUNDRY_ and DAPP_ prefixed environment variables.\nExceptions are:\n\nFOUNDRY_FFI, DAPP_FFI, DAPP_TEST_FFI\nFOUNDRY_PROFILE\nFOUNDRY_REMAPPINGS, DAPP_REMAPPINGS\nFOUNDRY_LIBRARIES, DAPP_LIBRARIES\nFOUNDRY_FS_PERMISSIONS, DAPP_FS_PERMISSIONS, DAPP_TEST_FS_PERMISSIONS\nDAPP_TEST_CACHE\nDAPP_TEST_FUZZ_RUNS\nDAPP_TEST_FUZZ_DEPTH\n\n","title":"Environment variables","titles":[null,"Config Overview"]},"459":{"href":"/config/reference/overview#configuration-format","html":"\n<p>Configuration files are written in the <a href=\"https://toml.io\">TOML format</a>, with simple key-value pairs inside of sections.</p>\n<p>This page describes each configuration key in detail. To see the default values, either refer to the specific key in this document, or see the <a href=\"/config/reference/default-config\">default config</a>.</p>\n","isPage":false,"text":"\nConfiguration files are written in the TOML format, with simple key-value pairs inside of sections.\nThis page describes each configuration key in detail. To see the default values, either refer to the specific key in this document, or see the default config.\n","title":"Configuration format","titles":[null,"Config Overview"]},"460":{"href":"/config/reference/overview#configuration-keys","html":"\n<p>This section documents all configuration keys. All configuration keys must live under a profile, such as <code>default</code>.</p>","isPage":false,"text":"\nThis section documents all configuration keys. All configuration keys must live under a profile, such as default.","title":"Configuration keys","titles":[null,"Config Overview"]},"461":{"href":"/config/reference/project#project","html":"\n<p>Configuration related to the project in general.</p>\n","isPage":true,"text":"\nConfiguration related to the project in general.\n","title":"Project","titles":[null]},"462":{"href":"/config/reference/project#src","html":"\n<ul>\n<li>Type: string</li>\n<li>Default: src</li>\n<li>Environment: <code>FOUNDRY_SRC</code> or <code>DAPP_SRC</code></li>\n</ul>\n<p>The path to the contract sources relative to the root of the project.</p>\n","isPage":false,"text":"\n\nType: string\nDefault: src\nEnvironment: FOUNDRY_SRC or DAPP_SRC\n\nThe path to the contract sources relative to the root of the project.\n","title":"src","titles":[null,"Project",null,null]},"463":{"href":"/config/reference/project#test","html":"\n<ul>\n<li>Type: string</li>\n<li>Default: test</li>\n<li>Environment: <code>FOUNDRY_TEST</code> or <code>DAPP_TEST</code></li>\n</ul>\n<p>The path to the test contract sources relative to the root of the project.</p>\n","isPage":false,"text":"\n\nType: string\nDefault: test\nEnvironment: FOUNDRY_TEST or DAPP_TEST\n\nThe path to the test contract sources relative to the root of the project.\n","title":"test","titles":[null,"Project",null,null]},"464":{"href":"/config/reference/project#script","html":"\n<ul>\n<li>Type: string</li>\n<li>Default: script</li>\n<li>Environment: <code>FOUNDRY_SCRIPT</code> or <code>DAPP_SCRIPT</code></li>\n</ul>\n<p>The path to the script contract sources relative to the root of the project.</p>\n","isPage":false,"text":"\n\nType: string\nDefault: script\nEnvironment: FOUNDRY_SCRIPT or DAPP_SCRIPT\n\nThe path to the script contract sources relative to the root of the project.\n","title":"script","titles":[null,"Project",null,null]},"465":{"href":"/config/reference/project#out","html":"\n<ul>\n<li>Type: string</li>\n<li>Default: out</li>\n<li>Environment: <code>FOUNDRY_OUT</code> or <code>DAPP_OUT</code></li>\n</ul>\n<p>The path to put contract artifacts in, relative to the root of the project.</p>\n","isPage":false,"text":"\n\nType: string\nDefault: out\nEnvironment: FOUNDRY_OUT or DAPP_OUT\n\nThe path to put contract artifacts in, relative to the root of the project.\n","title":"out","titles":[null,"Project",null,null]},"466":{"href":"/config/reference/project#libs","html":"\n<ul>\n<li>Type: array of strings (paths)</li>\n<li>Default: lib</li>\n<li>Environment: <code>FOUNDRY_LIBS</code> or <code>DAPP_LIBS</code></li>\n</ul>\n<p>An array of paths that contain libraries, relative to the root of the project.</p>\n","isPage":false,"text":"\n\nType: array of strings (paths)\nDefault: lib\nEnvironment: FOUNDRY_LIBS or DAPP_LIBS\n\nAn array of paths that contain libraries, relative to the root of the project.\n","title":"libs","titles":[null,"Project",null,null]},"467":{"href":"/config/reference/project#cache","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: true</li>\n<li>Environment: <code>FOUNDRY_CACHE</code> or <code>DAPP_CACHE</code></li>\n</ul>\n<p>Whether or not to enable caching. If enabled, the result of compiling sources, tests, and dependencies, are cached in <code>cache</code>.</p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: true\nEnvironment: FOUNDRY_CACHE or DAPP_CACHE\n\nWhether or not to enable caching. If enabled, the result of compiling sources, tests, and dependencies, are cached in cache.\n","title":"cache","titles":[null,"Project",null,null]},"468":{"href":"/config/reference/project#cache_path","html":"\n<ul>\n<li>Type: string</li>\n<li>Default: cache</li>\n<li>Environment: <code>FOUNDRY_CACHE_PATH</code> or <code>DAPP_CACHE_PATH</code></li>\n</ul>\n<p>The path to the cache, relative to the root of the project.</p>\n","isPage":false,"text":"\n\nType: string\nDefault: cache\nEnvironment: FOUNDRY_CACHE_PATH or DAPP_CACHE_PATH\n\nThe path to the cache, relative to the root of the project.\n","title":"cache_path","titles":[null,"Project",null,null]},"469":{"href":"/config/reference/project#broadcast","html":"\n<ul>\n<li>Type: string</li>\n<li>Default: broadcast</li>\n</ul>\n<p>The path to the broadcast transaction logs, relative to the root of the project.</p>\n","isPage":false,"text":"\n\nType: string\nDefault: broadcast\n\nThe path to the broadcast transaction logs, relative to the root of the project.\n","title":"broadcast","titles":[null,"Project",null,null]},"470":{"href":"/config/reference/project#force","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code>FOUNDRY_FORCE</code> or <code>DAPP_FORCE</code></li>\n</ul>\n<p>Whether or not to perform a clean build, discarding the cache.</p>","isPage":false,"text":"\n\nType: boolean\nDefault: false\nEnvironment: FOUNDRY_FORCE or DAPP_FORCE\n\nWhether or not to perform a clean build, discarding the cache.","title":"force","titles":[null,"Project",null,null]},"471":{"href":"/config/reference/solidity-compiler#solidity-compiler","html":"\n<p>Configuration related to the behavior of the Solidity compiler.</p>\n<strong>Sections</strong>\n<ul>\n<li><a href=\"#general\">General</a></li>\n<li><a href=\"#optimizer\">Optimizer</a></li>\n<li><a href=\"#model-checker\">Model Checker</a></li>\n<li><a href=\"#compilation-restrictions\">Compilation Restrictions</a></li>\n</ul>\n","isPage":true,"text":"\nConfiguration related to the behavior of the Solidity compiler.\nSections\n\nGeneral\nOptimizer\nModel Checker\nCompilation Restrictions\n\n","title":"Solidity compiler","titles":[null]},"472":{"href":"/config/reference/solidity-compiler#general","html":"\n<p>Configuration related to the behavior of the Solidity compiler.</p>\n","isPage":false,"text":"\nConfiguration related to the behavior of the Solidity compiler.\n","title":"General","titles":[null,"Solidity compiler"]},"473":{"href":"/config/reference/solidity-compiler#remappings","html":"\n<ul>\n<li>Type: array of strings (remappings)</li>\n<li>Default: none</li>\n<li>Environment: <code>FOUNDRY_REMAPPINGS</code> or <code>DAPP_REMAPPINGS</code></li>\n</ul>\n<p>An array of remappings in the following format: <code>&lt;name&gt;=&lt;target&gt;</code>.</p>\n<p>A remapping <em>remaps</em> Solidity imports to different directories. For example, the following remapping</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">@openzeppelin/=node_modules/@openzeppelin/openzeppelin-contracts/</span></span></code></pre>\n<p>with an import like</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;@openzeppelin/contracts/utils/Context.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>becomes</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;node_modules/@openzeppelin/openzeppelin-contracts/contracts/utils/Context.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\n\nType: array of strings (remappings)\nDefault: none\nEnvironment: FOUNDRY_REMAPPINGS or DAPP_REMAPPINGS\n\nAn array of remappings in the following format: &lt;name&gt;=&lt;target&gt;.\nA remapping remaps Solidity imports to different directories. For example, the following remapping\n@openzeppelin/=node_modules/@openzeppelin/openzeppelin-contracts/\nwith an import like\nimport {Context} from &quot;@openzeppelin/contracts/utils/Context.sol&quot;;\nbecomes\nimport {Context} from &quot;node_modules/@openzeppelin/openzeppelin-contracts/contracts/utils/Context.sol&quot;;\n","title":"remappings","titles":[null,"Solidity compiler","General",null]},"474":{"href":"/config/reference/solidity-compiler#auto_detect_remappings","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: true</li>\n<li>Environment: <code>FOUNDRY_AUTO_DETECT_REMAPPINGS</code> or <code>DAPP_AUTO_DETECT_REMAPPINGS</code></li>\n</ul>\n<p>If enabled, Foundry will automatically try auto-detect remappings by scanning the <code>libs</code> folder(s).</p>\n<p>If set to <code>false</code>, only the remappings in <code>foundry.toml</code> and <code>remappings.txt</code> are used.</p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: true\nEnvironment: FOUNDRY_AUTO_DETECT_REMAPPINGS or DAPP_AUTO_DETECT_REMAPPINGS\n\nIf enabled, Foundry will automatically try auto-detect remappings by scanning the libs folder(s).\nIf set to false, only the remappings in foundry.toml and remappings.txt are used.\n","title":"auto_detect_remappings","titles":[null,"Solidity compiler","General",null]},"475":{"href":"/config/reference/solidity-compiler#allow_paths","html":"\n<ul>\n<li>Type: array of strings (paths)</li>\n<li>Default: none</li>\n<li>Environment: <code>FOUNDRY_ALLOW_PATHS</code> or <code>DAPP_ALLOW_PATHS</code></li>\n</ul>\n<p>Tells solc to allow reading source files from additional directories. This is mainly relevant for complex workspaces managed by <code>pnpm</code> or similar.</p>\n<p>See also <a href=\"https://docs.soliditylang.org/en/latest/path-resolution.html#allowed-paths\">solc allowed-paths</a></p>\n","isPage":false,"text":"\n\nType: array of strings (paths)\nDefault: none\nEnvironment: FOUNDRY_ALLOW_PATHS or DAPP_ALLOW_PATHS\n\nTells solc to allow reading source files from additional directories. This is mainly relevant for complex workspaces managed by pnpm or similar.\nSee also solc allowed-paths\n","title":"allow_paths","titles":[null,"Solidity compiler","General",null]},"476":{"href":"/config/reference/solidity-compiler#include_paths","html":"\n<ul>\n<li>Type: array of strings (paths)</li>\n<li>Default: none</li>\n<li>Environment: <code>FOUNDRY_INCLUDE_PATHS</code> or <code>DAPP_INCLUDE_PATHS</code></li>\n</ul>\n<p>Make an additional source directory available to the default import callback. Use this option if you want to import contracts whose location is not fixed in relation to your main source tree, e.g. third-party libraries installed using a package manager. Can be used multiple times. Can only be used if base path has a non-empty value.</p>\n<p>See also <a href=\"https://docs.soliditylang.org/en/latest/path-resolution.html\">solc path resolution</a></p>\n","isPage":false,"text":"\n\nType: array of strings (paths)\nDefault: none\nEnvironment: FOUNDRY_INCLUDE_PATHS or DAPP_INCLUDE_PATHS\n\nMake an additional source directory available to the default import callback. Use this option if you want to import contracts whose location is not fixed in relation to your main source tree, e.g. third-party libraries installed using a package manager. Can be used multiple times. Can only be used if base path has a non-empty value.\nSee also solc path resolution\n","title":"include_paths","titles":[null,"Solidity compiler","General",null]},"477":{"href":"/config/reference/solidity-compiler#libraries","html":"\n<ul>\n<li>Type: array of strings (libraries)</li>\n<li>Default: none</li>\n<li>Environment: <code>FOUNDRY_LIBRARIES</code> or <code>DAPP_LIBRARIES</code></li>\n</ul>\n<p>An array of libraries to link against in the following format: <code>&lt;file&gt;:&lt;lib&gt;:&lt;address&gt;</code>, for example: <code>src/MyLibrary.sol:MyLibrary:0xfD88CeE74f7D78697775aBDAE53f9Da1559728E4</code>.</p>\n","isPage":false,"text":"\n\nType: array of strings (libraries)\nDefault: none\nEnvironment: FOUNDRY_LIBRARIES or DAPP_LIBRARIES\n\nAn array of libraries to link against in the following format: &lt;file&gt;:&lt;lib&gt;:&lt;address&gt;, for example: src/MyLibrary.sol:MyLibrary:0xfD88CeE74f7D78697775aBDAE53f9Da1559728E4.\n","title":"libraries","titles":[null,"Solidity compiler","General",null]},"478":{"href":"/config/reference/solidity-compiler#solc_version","html":"\n<ul>\n<li>Type: string (semver)</li>\n<li>Default: none</li>\n<li>Environment: <code>FOUNDRY_SOLC_VERSION</code> or <code>DAPP_SOLC_VERSION</code></li>\n</ul>\n<p>If specified, overrides the auto-detection system (more below) and uses a single Solidity compiler version for the project.</p>\n<p>Only strict versions are supported (i.e. <code>0.8.11</code> is valid, but <code>^0.8.0</code> is not).</p>\n","isPage":false,"text":"\n\nType: string (semver)\nDefault: none\nEnvironment: FOUNDRY_SOLC_VERSION or DAPP_SOLC_VERSION\n\nIf specified, overrides the auto-detection system (more below) and uses a single Solidity compiler version for the project.\nOnly strict versions are supported (i.e. 0.8.11 is valid, but ^0.8.0 is not).\n","title":"solc_version","titles":[null,"Solidity compiler","General",null]},"479":{"href":"/config/reference/solidity-compiler#auto_detect_solc","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: true</li>\n<li>Environment: <code>FOUNDRY_AUTO_DETECT_SOLC</code> or <code>DAPP_AUTO_DETECT_SOLC</code></li>\n</ul>\n<p>If enabled, Foundry will automatically try to resolve appropriate Solidity compiler versions to compile your project.</p>\n<p>This key is ignored if <code>solc_version</code> is set.</p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: true\nEnvironment: FOUNDRY_AUTO_DETECT_SOLC or DAPP_AUTO_DETECT_SOLC\n\nIf enabled, Foundry will automatically try to resolve appropriate Solidity compiler versions to compile your project.\nThis key is ignored if solc_version is set.\n","title":"auto_detect_solc","titles":[null,"Solidity compiler","General",null]},"480":{"href":"/config/reference/solidity-compiler#offline","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code>FOUNDRY_OFFLINE</code> or <code>DAPP_OFFLINE</code></li>\n</ul>\n<p>If enabled, Foundry will not attempt to download any missing solc versions.</p>\n<p>If both <code>offline</code> and <code>auto-detect-solc</code> are set to <code>true</code>, the required version(s) of solc will be auto detected but any missing versions will <em>not</em> be installed.</p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: false\nEnvironment: FOUNDRY_OFFLINE or DAPP_OFFLINE\n\nIf enabled, Foundry will not attempt to download any missing solc versions.\nIf both offline and auto-detect-solc are set to true, the required version(s) of solc will be auto detected but any missing versions will not be installed.\n","title":"offline","titles":[null,"Solidity compiler","General",null]},"481":{"href":"/config/reference/solidity-compiler#ignored_warnings_from","html":"\n<ul>\n<li>Type: array of strings (file paths)</li>\n<li>Default: none</li>\n<li>Environment: <code>FOUNDRY_IGNORED_WARNINGS_FROM</code> OR <code>DAPP_IGNORED_WARNINGS_FROM</code></li>\n</ul>\n<p>An array of file paths from which warnings should be ignored during the compulation process. This is useful when you have a specific\ndirectories of files that produce known warnings and you wish to suppress these warnings without affecting others.</p>\n<p>Each entry in the array should be a path to a directory or a specific file. For Example:</p>\n<p><code>ignored_warnings_from = [&quot;path/to/warnings/file1.sol&quot;, &quot;path/to/warnings/file2.sol&quot;]</code></p>\n<p>This configuration will cause the compiler to ignore any warnings that originate from the specified paths.</p>\n","isPage":false,"text":"\n\nType: array of strings (file paths)\nDefault: none\nEnvironment: FOUNDRY_IGNORED_WARNINGS_FROM OR DAPP_IGNORED_WARNINGS_FROM\n\nAn array of file paths from which warnings should be ignored during the compulation process. This is useful when you have a specific\ndirectories of files that produce known warnings and you wish to suppress these warnings without affecting others.\nEach entry in the array should be a path to a directory or a specific file. For Example:\nignored_warnings_from = [&quot;path/to/warnings/file1.sol&quot;, &quot;path/to/warnings/file2.sol&quot;]\nThis configuration will cause the compiler to ignore any warnings that originate from the specified paths.\n","title":"ignored_warnings_from","titles":[null,"Solidity compiler","General",null]},"482":{"href":"/config/reference/solidity-compiler#ignored_error_codes","html":"\n<ul>\n<li>Type: array of integers/strings</li>\n<li>Default: none for source, SPDX license identifiers and contract size for tests</li>\n<li>Environment: <code>FOUNDRY_IGNORED_ERROR_CODES</code> or <code>DAPP_IGNORED_ERROR_CODES</code></li>\n</ul>\n<p>An array of Solidity compiler error codes to ignore during build, such as warnings.</p>\n<p>Valid values are:</p>\n<ul>\n<li><code>license</code>: 1878</li>\n<li><code>code-size</code>: 5574</li>\n<li><code>func-mutability</code>: 2018</li>\n<li><code>unused-var</code>: 2072</li>\n<li><code>unused-param</code>: 5667</li>\n<li><code>unused-return</code>: 9302</li>\n<li><code>virtual-interfaces</code>: 5815</li>\n<li><code>missing-receive-ether</code>: 3628</li>\n<li><code>shadowing</code>: 2519</li>\n<li><code>same-varname</code>: 8760</li>\n<li><code>unnamed-return</code>: 6321</li>\n<li><code>unreachable</code>: 5740</li>\n<li><code>pragma-solidity</code>: 3420</li>\n<li><code>constructor-visibility</code>: 2462</li>\n<li><code>init-code-size</code>: 3860</li>\n<li><code>transient-storage</code>: 2394</li>\n<li><code>too-many-warnings</code>: 4591</li>\n</ul>\n","isPage":false,"text":"\n\nType: array of integers/strings\nDefault: none for source, SPDX license identifiers and contract size for tests\nEnvironment: FOUNDRY_IGNORED_ERROR_CODES or DAPP_IGNORED_ERROR_CODES\n\nAn array of Solidity compiler error codes to ignore during build, such as warnings.\nValid values are:\n\nlicense: 1878\ncode-size: 5574\nfunc-mutability: 2018\nunused-var: 2072\nunused-param: 5667\nunused-return: 9302\nvirtual-interfaces: 5815\nmissing-receive-ether: 3628\nshadowing: 2519\nsame-varname: 8760\nunnamed-return: 6321\nunreachable: 5740\npragma-solidity: 3420\nconstructor-visibility: 2462\ninit-code-size: 3860\ntransient-storage: 2394\ntoo-many-warnings: 4591\n\n","title":"ignored_error_codes","titles":[null,"Solidity compiler","General",null]},"483":{"href":"/config/reference/solidity-compiler#deny_warnings","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code>FOUNDRY_DENY_WARNINGS</code> or <code>DAPP_DENY_WARNINGS</code></li>\n</ul>\n<p>If enabled, Foundry will treat Solidity compiler warnings as errors, stopping artifacts from being written to disk.</p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: false\nEnvironment: FOUNDRY_DENY_WARNINGS or DAPP_DENY_WARNINGS\n\nIf enabled, Foundry will treat Solidity compiler warnings as errors, stopping artifacts from being written to disk.\n","title":"deny_warnings","titles":[null,"Solidity compiler","General",null]},"484":{"href":"/config/reference/solidity-compiler#evm_version","html":"\n<ul>\n<li>Type: string</li>\n<li>Default: prague</li>\n<li>Environment: <code>FOUNDRY_EVM_VERSION</code> or <code>DAPP_EVM_VERSION</code></li>\n</ul>\n<p>The EVM version to use during tests. The value <strong>must</strong> be an EVM hardfork name, such as <code>london</code>, <code>paris</code>, <code>shanghai</code>, <code>cancun</code>, <code>prague</code>, etc.</p>\n<p>If you are relying on a specific EVM version for compatibility reasons you are recommended to pin to it in <code>foundry.toml</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">evm_version = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;paris&quot;</span></span></code></pre>\n","isPage":false,"text":"\n\nType: string\nDefault: prague\nEnvironment: FOUNDRY_EVM_VERSION or DAPP_EVM_VERSION\n\nThe EVM version to use during tests. The value must be an EVM hardfork name, such as london, paris, shanghai, cancun, prague, etc.\nIf you are relying on a specific EVM version for compatibility reasons you are recommended to pin to it in foundry.toml:\nevm_version = &quot;paris&quot;\n","title":"evm_version","titles":[null,"Solidity compiler","General",null]},"485":{"href":"/config/reference/solidity-compiler#revert_strings","html":"\n<ul>\n<li>Type: string</li>\n<li>Default: default</li>\n<li>Environment: <code>FOUNDRY_REVERT_STRINGS</code> or <code>DAPP_REVERT_STRINGS</code></li>\n</ul>\n<p>Possible values are:</p>\n<ul>\n<li><code>default</code> does not inject compiler-generated revert strings and keeps user-supplied ones.</li>\n<li><code>strip</code> removes all revert strings (if possible, i.e. if literals are used) keeping side-effects.</li>\n<li><code>debug</code> injects strings for compiler-generated internal reverts, implemented for ABI encoders V1 and V2 for now.</li>\n<li><code>verboseDebug</code> even appends further information to user-supplied revert strings (not yet implemented).</li>\n</ul>\n","isPage":false,"text":"\n\nType: string\nDefault: default\nEnvironment: FOUNDRY_REVERT_STRINGS or DAPP_REVERT_STRINGS\n\nPossible values are:\n\ndefault does not inject compiler-generated revert strings and keeps user-supplied ones.\nstrip removes all revert strings (if possible, i.e. if literals are used) keeping side-effects.\ndebug injects strings for compiler-generated internal reverts, implemented for ABI encoders V1 and V2 for now.\nverboseDebug even appends further information to user-supplied revert strings (not yet implemented).\n\n","title":"revert_strings","titles":[null,"Solidity compiler","General",null]},"486":{"href":"/config/reference/solidity-compiler#extra_output_files","html":"\n<ul>\n<li>Type: array of strings</li>\n<li>Default: none</li>\n<li>Environment: N/A</li>\n</ul>\n<p>Extra output from the Solidity compiler that should be written to files in the artifacts directory.</p>\n<p>Valid values are:</p>\n<ul>\n<li><code>metadata</code>: Written as a <code>metadata.json</code> file in the artifacts directory</li>\n<li><code>ir</code>: Written as a <code>.ir</code> file in the artifacts directory</li>\n<li><code>irOptimized</code>: Written as a <code>.iropt</code> file in the artifacts directory</li>\n<li><code>ewasm</code>: Written as a <code>.ewasm</code> file in the artifacts directory</li>\n<li><code>evm.assembly</code>: Written as a <code>.asm</code> file in the artifacts directory</li>\n</ul>\n","isPage":false,"text":"\n\nType: array of strings\nDefault: none\nEnvironment: N/A\n\nExtra output from the Solidity compiler that should be written to files in the artifacts directory.\nValid values are:\n\nmetadata: Written as a metadata.json file in the artifacts directory\nir: Written as a .ir file in the artifacts directory\nirOptimized: Written as a .iropt file in the artifacts directory\newasm: Written as a .ewasm file in the artifacts directory\nevm.assembly: Written as a .asm file in the artifacts directory\n\n","title":"extra_output_files","titles":[null,"Solidity compiler","General",null]},"487":{"href":"/config/reference/solidity-compiler#extra_output","html":"\n<ul>\n<li>Type: array of strings</li>\n<li>Default: see below</li>\n<li>Environment: N/A</li>\n</ul>\n<p>Extra output to include in the contract&#x27;s artifact.</p>\n<p>The following values are always set, since they&#x27;re required by Forge:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">extra_output = [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &quot;abi&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &quot;evm.bytecode&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &quot;evm.deployedBytecode&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &quot;evm.methodIdentifiers&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n<p>For a list of valid values, see the <a href=\"https://docs.soliditylang.org/en/latest/using-the-compiler.html#input-description\">Solidity docs</a> (search for: <em>The available output types are as follows</em>).</p>\n","isPage":false,"text":"\n\nType: array of strings\nDefault: see below\nEnvironment: N/A\n\nExtra output to include in the contract&#x27;s artifact.\nThe following values are always set, since they&#x27;re required by Forge:\nextra_output = [\n  &quot;abi&quot;,\n  &quot;evm.bytecode&quot;,\n  &quot;evm.deployedBytecode&quot;,\n  &quot;evm.methodIdentifiers&quot;,\n]\nFor a list of valid values, see the Solidity docs (search for: The available output types are as follows).\n","title":"extra_output","titles":[null,"Solidity compiler","General",null]},"488":{"href":"/config/reference/solidity-compiler#bytecode_hash","html":"\n<ul>\n<li>Type: string</li>\n<li>Default: ipfs</li>\n<li>Environment: <code>FOUNDRY_BYTECODE_HASH</code> or <code>DAPP_BYTECODE_HASH</code></li>\n</ul>\n<p>Determines the hash method for the metadata hash that is appended to the bytecode.</p>\n<p>Valid values are:</p>\n<ul>\n<li>ipfs (default)</li>\n<li>bzzr1</li>\n<li>none</li>\n</ul>\n","isPage":false,"text":"\n\nType: string\nDefault: ipfs\nEnvironment: FOUNDRY_BYTECODE_HASH or DAPP_BYTECODE_HASH\n\nDetermines the hash method for the metadata hash that is appended to the bytecode.\nValid values are:\n\nipfs (default)\nbzzr1\nnone\n\n","title":"bytecode_hash","titles":[null,"Solidity compiler","General",null]},"489":{"href":"/config/reference/solidity-compiler#sparse_mode","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code>FOUNDRY_SPARSE_MODE</code> or <code>DAPP_SPARSE_MODE</code></li>\n</ul>\n<p>Enables <a href=\"/forge/reference/forge-build#sparse-mode-experimental\">sparse mode</a> for builds.</p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: false\nEnvironment: FOUNDRY_SPARSE_MODE or DAPP_SPARSE_MODE\n\nEnables sparse mode for builds.\n","title":"sparse_mode","titles":[null,"Solidity compiler","General",null]},"490":{"href":"/config/reference/solidity-compiler#optimizer","html":"\n<p>Configuration related to the Solidity optimizer.</p>\n","isPage":false,"text":"\nConfiguration related to the Solidity optimizer.\n","title":"Optimizer","titles":[null,"Solidity compiler"]},"491":{"href":"/config/reference/solidity-compiler#optimizer-1","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code>FOUNDRY_OPTIMIZER</code> or <code>DAPP_OPTIMIZER</code></li>\n</ul>\n<p>Whether or not to enable the Solidity optimizer.</p>\n<blockquote>\n<p>ℹ️ <strong>Note</strong>\nSolidity optimizer is automatically enabled if <code>optimizer_runs</code> is set to a value greater than 0.</p>\n</blockquote>\n","isPage":false,"text":"\n\nType: boolean\nDefault: false\nEnvironment: FOUNDRY_OPTIMIZER or DAPP_OPTIMIZER\n\nWhether or not to enable the Solidity optimizer.\n\nℹ️ Note\nSolidity optimizer is automatically enabled if optimizer_runs is set to a value greater than 0.\n\n","title":"optimizer","titles":[null,"Solidity compiler","Optimizer",null]},"492":{"href":"/config/reference/solidity-compiler#optimizer_runs","html":"\n<ul>\n<li>Type: integer</li>\n<li>Default: 200</li>\n<li>Environment: <code>FOUNDRY_OPTIMIZER_RUNS</code> or <code>DAPP_OPTIMIZER_RUNS</code></li>\n</ul>\n<p>The number of runs specifies roughly how often each opcode of the deployed code will be executed across the life-time of the contract. This means it is a trade-off parameter between code size (deploy cost) and code execution cost (cost after deployment). A <code>optimizer_runs</code> parameter of <code>1</code> will produce short but expensive code. In contrast, a larger <code>optimizer_runs</code> parameter will produce longer but more gas efficient code. The maximum value of the parameter is <code>2**32-1</code>.</p>\n<p>A common misconception is that this parameter specifies the number of iterations of the optimizer. This is not true: The optimizer will always run as many times as it can still improve the code.</p>\n","isPage":false,"text":"\n\nType: integer\nDefault: 200\nEnvironment: FOUNDRY_OPTIMIZER_RUNS or DAPP_OPTIMIZER_RUNS\n\nThe number of runs specifies roughly how often each opcode of the deployed code will be executed across the life-time of the contract. This means it is a trade-off parameter between code size (deploy cost) and code execution cost (cost after deployment). A optimizer_runs parameter of 1 will produce short but expensive code. In contrast, a larger optimizer_runs parameter will produce longer but more gas efficient code. The maximum value of the parameter is 2**32-1.\nA common misconception is that this parameter specifies the number of iterations of the optimizer. This is not true: The optimizer will always run as many times as it can still improve the code.\n","title":"optimizer_runs","titles":[null,"Solidity compiler","Optimizer",null]},"493":{"href":"/config/reference/solidity-compiler#via_ir","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code>FOUNDRY_VIA_IR</code> or <code>DAPP_VIA_IR</code></li>\n</ul>\n<p>If set to true, changes compilation pipeline to go through the new IR optimizer.</p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: false\nEnvironment: FOUNDRY_VIA_IR or DAPP_VIA_IR\n\nIf set to true, changes compilation pipeline to go through the new IR optimizer.\n","title":"via_ir","titles":[null,"Solidity compiler","Optimizer",null]},"494":{"href":"/config/reference/solidity-compiler#use_literal_content","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n</ul>\n<p>If set to true, changes compilation to only use literal content and not URLs.</p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: false\n\nIf set to true, changes compilation to only use literal content and not URLs.\n","title":"use_literal_content","titles":[null,"Solidity compiler","Optimizer",null]},"495":{"href":"/config/reference/solidity-compiler#optimizer_details","html":"\n<p>The optimizer details section is used to tweak how the Solidity optimizer behaves. There are several configurable values in this section (each of them are booleans):</p>\n<ul>\n<li><code>peephole</code></li>\n<li><code>inliner</code></li>\n<li><code>jumpdestRemover</code></li>\n<li><code>orderLiterals</code></li>\n<li><code>deduplicate</code></li>\n<li><code>cse</code></li>\n<li><code>constantOptimizer</code></li>\n<li><code>yul</code></li>\n</ul>\n<p>Refer to the Solidity <a href=\"https://docs.soliditylang.org/en/latest/using-the-compiler.html#compiler-input-and-output-json-description\">compiler input description</a> for the default values.</p>\n","isPage":false,"text":"\nThe optimizer details section is used to tweak how the Solidity optimizer behaves. There are several configurable values in this section (each of them are booleans):\n\npeephole\ninliner\njumpdestRemover\norderLiterals\ndeduplicate\ncse\nconstantOptimizer\nyul\n\nRefer to the Solidity compiler input description for the default values.\n","title":"[optimizer_details]","titles":[null,"Solidity compiler","Optimizer",null]},"496":{"href":"/config/reference/solidity-compiler#optimizer_detailsyul_details","html":"\n<p>The Yul details subsection of the optimizer details section is used to tweak how the new IR optimizer behaves. There are two configuration values:</p>\n<ul>\n<li><code>stack_allocation</code>: Tries to improve the allocation of stack slots by freeing them up earlier.</li>\n<li><code>optimizer_steps</code>: Selects the optimizer steps to be applied.</li>\n</ul>\n<p>Refer to the Solidity <a href=\"https://docs.soliditylang.org/en/latest/using-the-compiler.html#compiler-input-and-output-json-description\">compiler input description</a> for the default values.</p>\n<blockquote>\n<p>ℹ️ <strong>Note</strong>\nIf you encounter compiler errors when using <code>via_ir</code>, explicitly enable the legacy <code>optimizer</code> and leave <code>optimizer_steps</code> as an empty string</p>\n</blockquote>\n","isPage":false,"text":"\nThe Yul details subsection of the optimizer details section is used to tweak how the new IR optimizer behaves. There are two configuration values:\n\nstack_allocation: Tries to improve the allocation of stack slots by freeing them up earlier.\noptimizer_steps: Selects the optimizer steps to be applied.\n\nRefer to the Solidity compiler input description for the default values.\n\nℹ️ Note\nIf you encounter compiler errors when using via_ir, explicitly enable the legacy optimizer and leave optimizer_steps as an empty string\n\n","title":"[optimizer_details.yul_details]","titles":[null,"Solidity compiler","Optimizer",null]},"497":{"href":"/config/reference/solidity-compiler#model-checker","html":"\n<p>The Solidity model checker is a built-in opt-in module that is available in Solidity compilers for OSX and Linux. Learn more about the model checker in the <a href=\"https://docs.soliditylang.org/en/latest/smtchecker.html#tutorial\">Solidity compiler documentation</a></p>\n<blockquote>\n<p>ℹ️ <strong>Note</strong>\nThe model checker requires <code>z3</code> version 4.8.8 or 4.8.14 on Linux.</p>\n</blockquote>\n<p>The model checker settings are configured in the <code>[model_checker]</code> section of the configuration.</p>\n<p>The model checker will run when <code>forge build</code> is invoked, and any findings will show up as warnings.</p>\n<p>These are the recommended settings when using the model checker:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">profile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">model_checker</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contracts = {&#x27;/path/to/project/src/Contract.sol&#x27; = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Contract&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">engine = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;chc&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">timeout = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10000</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">targets = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;assert&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n<p>Setting which contract should be verified is extremely important, otherwise all available contracts will be verified which may take a long time.</p>\n<p>The recommended engine is <code>chc</code>, but <code>bmc</code> and <code>all</code> (which runs both) are also accepted.</p>\n<p>It is also important to set a proper timeout (given in milliseconds), since the default time given to the underlying solver may not be enough.</p>\n<p>If no verification targets are given, only assertions will be checked.</p>\n","isPage":false,"text":"\nThe Solidity model checker is a built-in opt-in module that is available in Solidity compilers for OSX and Linux. Learn more about the model checker in the Solidity compiler documentation\n\nℹ️ Note\nThe model checker requires z3 version 4.8.8 or 4.8.14 on Linux.\n\nThe model checker settings are configured in the [model_checker] section of the configuration.\nThe model checker will run when forge build is invoked, and any findings will show up as warnings.\nThese are the recommended settings when using the model checker:\n[profile.default.model_checker]\ncontracts = {&#x27;/path/to/project/src/Contract.sol&#x27; = [&#x27;Contract&#x27;]}\nengine = &#x27;chc&#x27;\ntimeout = 10000\ntargets = [&#x27;assert&#x27;]\nSetting which contract should be verified is extremely important, otherwise all available contracts will be verified which may take a long time.\nThe recommended engine is chc, but bmc and all (which runs both) are also accepted.\nIt is also important to set a proper timeout (given in milliseconds), since the default time given to the underlying solver may not be enough.\nIf no verification targets are given, only assertions will be checked.\n","title":"Model checker","titles":[null,"Solidity compiler"]},"498":{"href":"/config/reference/solidity-compiler#model_checker","html":"\n<p>The following keys are available in the model checker section.</p>\n","isPage":false,"text":"\nThe following keys are available in the model checker section.\n","title":"[model_checker]","titles":[null,"Solidity compiler","Model checker",null]},"499":{"href":"/config/reference/solidity-compiler#model_checkercontracts","html":"\n<ul>\n<li>Type: table</li>\n<li>Default: all</li>\n<li>Environment: N/A</li>\n</ul>\n<p>Specifies what contracts the model checker will analyze.</p>\n<p>The key of the table is the path to a source file, and the value is an array of contract names to check.</p>\n<p>For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">profile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">model_checker</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contracts = { &quot;src/MyContracts.sol&quot; = [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ContractA&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ContractB&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] }</span></span></code></pre>\n","isPage":false,"text":"\n\nType: table\nDefault: all\nEnvironment: N/A\n\nSpecifies what contracts the model checker will analyze.\nThe key of the table is the path to a source file, and the value is an array of contract names to check.\nFor example:\n[profile.default.model_checker]\ncontracts = { &quot;src/MyContracts.sol&quot; = [&quot;ContractA&quot;, &quot;ContractB&quot;] }\n","title":"model_checker.contracts","titles":[null,"Solidity compiler","Model checker",null,"[model_checker]"]},"500":{"href":"/config/reference/solidity-compiler#model_checkerdiv_mod_with_slacks","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: N/A</li>\n</ul>\n<p>Sets how division and modulo operations should be encoded.</p>\n<p>Refer to the <a href=\"https://docs.soliditylang.org/en/latest/smtchecker.html#division-and-modulo-with-slack-variables\">Solidity documentation</a> for more information.</p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: false\nEnvironment: N/A\n\nSets how division and modulo operations should be encoded.\nRefer to the Solidity documentation for more information.\n","title":"model_checker.div_mod_with_slacks","titles":[null,"Solidity compiler","Model checker",null,"[model_checker]"]},"501":{"href":"/config/reference/solidity-compiler#model_checkerengine","html":"\n<ul>\n<li>Type: string (see below)</li>\n<li>Default: all</li>\n<li>Environment: N/A</li>\n</ul>\n<p>Specifies the model checker engine to run. Valid values are:</p>\n<ul>\n<li><code>chc</code>: The constrained horn clauses engine</li>\n<li><code>bmc</code>: The bounded model checker engine</li>\n<li><code>all</code>: Runs both engines</li>\n</ul>\n<p>Refer to the <a href=\"https://docs.soliditylang.org/en/latest/smtchecker.html#model-checking-engines\">Solidity documentation</a> for more information on the engines.</p>\n","isPage":false,"text":"\n\nType: string (see below)\nDefault: all\nEnvironment: N/A\n\nSpecifies the model checker engine to run. Valid values are:\n\nchc: The constrained horn clauses engine\nbmc: The bounded model checker engine\nall: Runs both engines\n\nRefer to the Solidity documentation for more information on the engines.\n","title":"model_checker.engine","titles":[null,"Solidity compiler","Model checker",null,"[model_checker]"]},"502":{"href":"/config/reference/solidity-compiler#model_checkerinvariants","html":"\n<ul>\n<li>Type: array of strings</li>\n<li>Default: N/A</li>\n<li>Environment: N/A</li>\n</ul>\n<p>Sets the model checker invariants. Valid values are:</p>\n<ul>\n<li><code>contract</code>: Contract Invariants</li>\n<li><code>reentrancy</code>: Reentrancy Properties</li>\n</ul>\n<p>Refer to the <a href=\"https://docs.soliditylang.org/en/latest/smtchecker.html#reported-inferred-inductive-invariants\">Solidity documentation</a> for more information on the invariants.</p>\n","isPage":false,"text":"\n\nType: array of strings\nDefault: N/A\nEnvironment: N/A\n\nSets the model checker invariants. Valid values are:\n\ncontract: Contract Invariants\nreentrancy: Reentrancy Properties\n\nRefer to the Solidity documentation for more information on the invariants.\n","title":"model_checker.invariants","titles":[null,"Solidity compiler","Model checker",null,"[model_checker]"]},"503":{"href":"/config/reference/solidity-compiler#model_checkershow_unproved","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: N/A</li>\n</ul>\n<p>Whether or not to output all unproved targets.</p>\n<p>Refer to the <a href=\"https://docs.soliditylang.org/en/latest/smtchecker.html#unproved-targets\">Solidity documentation</a> for more information.</p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: false\nEnvironment: N/A\n\nWhether or not to output all unproved targets.\nRefer to the Solidity documentation for more information.\n","title":"model_checker.show_unproved","titles":[null,"Solidity compiler","Model checker",null,"[model_checker]"]},"504":{"href":"/config/reference/solidity-compiler#model_checkersolvers","html":"\n<ul>\n<li>Type: array of strings</li>\n<li>Default: N/A</li>\n<li>Environment: N/A</li>\n</ul>\n<p>Sets the model checker solvers. Valid values are:</p>\n<ul>\n<li><code>cvc4</code></li>\n<li><code>eld</code>: introduced in v0.8.18</li>\n<li><code>smtlib2</code></li>\n<li><code>z3</code></li>\n</ul>\n<p>Refer to the <a href=\"https://docs.soliditylang.org/en/latest/smtchecker.html#smt-and-horn-solvers\">Solidity documentation</a> for more information.</p>\n","isPage":false,"text":"\n\nType: array of strings\nDefault: N/A\nEnvironment: N/A\n\nSets the model checker solvers. Valid values are:\n\ncvc4\neld: introduced in v0.8.18\nsmtlib2\nz3\n\nRefer to the Solidity documentation for more information.\n","title":"model_checker.solvers","titles":[null,"Solidity compiler","Model checker",null,"[model_checker]"]},"505":{"href":"/config/reference/solidity-compiler#model_checkertimeout","html":"\n<ul>\n<li>Type: number (milliseconds)</li>\n<li>Default: N/A</li>\n<li>Environment: N/A</li>\n</ul>\n<p>Sets the timeout for the underlying model checker engines (in milliseconds).</p>\n","isPage":false,"text":"\n\nType: number (milliseconds)\nDefault: N/A\nEnvironment: N/A\n\nSets the timeout for the underlying model checker engines (in milliseconds).\n","title":"model_checker.timeout","titles":[null,"Solidity compiler","Model checker",null,"[model_checker]"]},"506":{"href":"/config/reference/solidity-compiler#model_checkertargets","html":"\n<ul>\n<li>Type: array of strings</li>\n<li>Default: assert</li>\n<li>Environment: N/A</li>\n</ul>\n<p>Sets the model checker targets. Valid values are:</p>\n<ul>\n<li><code>assert</code>: Assertions</li>\n<li><code>underflow</code>: Arithmetic underflow</li>\n<li><code>overflow</code>: Arithmetic overflow</li>\n<li><code>divByZero</code>: Division by zero</li>\n<li><code>constantCondition</code>: Trivial conditions and unreachable code</li>\n<li><code>popEmptyArray</code>: Popping an empty array</li>\n<li><code>outOfBounds</code>: Out of bounds array/fixed bytes index access</li>\n<li><code>default</code>: All of the above (note: not the default for Forge)</li>\n</ul>\n","isPage":false,"text":"\n\nType: array of strings\nDefault: assert\nEnvironment: N/A\n\nSets the model checker targets. Valid values are:\n\nassert: Assertions\nunderflow: Arithmetic underflow\noverflow: Arithmetic overflow\ndivByZero: Division by zero\nconstantCondition: Trivial conditions and unreachable code\npopEmptyArray: Popping an empty array\noutOfBounds: Out of bounds array/fixed bytes index access\ndefault: All of the above (note: not the default for Forge)\n\n","title":"model_checker.targets","titles":[null,"Solidity compiler","Model checker",null,"[model_checker]"]},"507":{"href":"/config/reference/solidity-compiler#compilation-restrictions","html":"\n<p>Compilation restrictions allows configuration of how individual files or directories within projects are compiled.</p>\n<blockquote>\n<p>For a complex configuration of compiler profiles and compiler restrictions please refer to Uniswap <a href=\"https://github.com/Uniswap/contracts/blob/4d80a9cfed9b920b83a394b168a95319606a0b73/foundry.toml#L27-L72\">contracts monorepo</a>.</p>\n</blockquote>\n<p>For example, with configuration below, <code>Counter.sol</code> contract under <code>src</code> is compiled with <code>via-ir</code> option enabled while all other contracts (including tests) are compiled with the default profile.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># add via_ir profile</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">additional_compiler_profiles = [ { name = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;via-ir&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, via_ir = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } ]</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># enforce compiling tests without via_ir and only some heavy contract with via_ir</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># note: it will only work if tests are using vm.deployCode to deploy contract</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">compilation_restrictions = [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    { paths = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;test/**&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, via_ir = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    { paths = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;src/Counter.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, via_ir = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span></code></pre>\n<p>We can configure how individual files or directories are compiled by specifying the <code>compilation_restrictions</code> configuration (which applies to sources importing the restricted file as well).<br/>\nOnce we have a set of restrictions we need to construct settings objects to satisfy them. This is done by adding <code>additional_compiler_profiles</code>, which is a mapping from profile name to settings overrides.</p>\n<p>In the example above, we added a single profile named <code>via-ir</code> which uses default compilation settings but enables <code>via_ir</code> option, making it possible to compile the <code>Counter.sol</code> contract with <code>via_ir</code>, while all other contracts (including tests) with the default profile.<br/>\nWhen choosing compiler profile, first profile (starting with default one) satisfying restrictions of the source file and all of its imports will be used.</p>\n<blockquote>\n<p>If the same source file is compiled with several profiles, then an artifact is generated for each profile - if <code>Counter</code> is compiled with default and <code>v1</code> profile, <code>Counter.json</code> and <code>Counter.v1.json</code> artifacts are created.</p>\n</blockquote>\n","isPage":false,"text":"\nCompilation restrictions allows configuration of how individual files or directories within projects are compiled.\n\nFor a complex configuration of compiler profiles and compiler restrictions please refer to Uniswap contracts monorepo.\n\nFor example, with configuration below, Counter.sol contract under src is compiled with via-ir option enabled while all other contracts (including tests) are compiled with the default profile.\n# add via_ir profile\nadditional_compiler_profiles = [ { name = &quot;via-ir&quot;, via_ir = true } ]\n \n# enforce compiling tests without via_ir and only some heavy contract with via_ir\n# note: it will only work if tests are using vm.deployCode to deploy contract\ncompilation_restrictions = [\n    { paths = &quot;test/**&quot;, via_ir = false },\n    { paths = &quot;src/Counter.sol&quot;, via_ir = true },\n]\nWe can configure how individual files or directories are compiled by specifying the compilation_restrictions configuration (which applies to sources importing the restricted file as well).\nOnce we have a set of restrictions we need to construct settings objects to satisfy them. This is done by adding additional_compiler_profiles, which is a mapping from profile name to settings overrides.\nIn the example above, we added a single profile named via-ir which uses default compilation settings but enables via_ir option, making it possible to compile the Counter.sol contract with via_ir, while all other contracts (including tests) with the default profile.\nWhen choosing compiler profile, first profile (starting with default one) satisfying restrictions of the source file and all of its imports will be used.\n\nIf the same source file is compiled with several profiles, then an artifact is generated for each profile - if Counter is compiled with default and v1 profile, Counter.json and Counter.v1.json artifacts are created.\n\n","title":"Compilation Restrictions","titles":[null,"Solidity compiler"]},"508":{"href":"/config/reference/solidity-compiler#additional-compiler-settings","html":"\n<p><code>[additional_compiler_profiles]</code></p>\n<ul>\n<li>Type: array of additional compiler profiles</li>\n</ul>\n<p>Configures a mapping from profile name to settings overrides.</p>\n<p>For example, an additional <code>via-ir</code> compiler profile that changes compilation pipeline to go through the new IR optimizer can be defined as:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">additional_compiler_profiles = [ { name = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;via-ir&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, via_ir = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } ]</span></span></code></pre>\n<p>There are several configurable values for a compiler profile:</p>\n<ul>\n<li><code>name</code></li>\n<li><code>via_ir</code></li>\n<li><code>evm_version</code></li>\n<li><code>optimizer</code></li>\n<li><code>optimizer_runs</code></li>\n<li><code>bytecode_hash</code></li>\n</ul>\n","isPage":false,"text":"\n[additional_compiler_profiles]\n\nType: array of additional compiler profiles\n\nConfigures a mapping from profile name to settings overrides.\nFor example, an additional via-ir compiler profile that changes compilation pipeline to go through the new IR optimizer can be defined as:\nadditional_compiler_profiles = [ { name = &quot;via-ir&quot;, via_ir = true } ]\nThere are several configurable values for a compiler profile:\n\nname\nvia_ir\nevm_version\noptimizer\noptimizer_runs\nbytecode_hash\n\n","title":"Additional compiler settings:","titles":[null,"Solidity compiler","Compilation Restrictions"]},"509":{"href":"/config/reference/solidity-compiler#additional_compiler_profilename","html":"\n<ul>\n<li>Type: string</li>\n</ul>\n<p>Additional compiler profile name.</p>\n","isPage":false,"text":"\n\nType: string\n\nAdditional compiler profile name.\n","title":"additional_compiler_profile.name","titles":[null,"Solidity compiler","Compilation Restrictions","Additional compiler settings:"]},"510":{"href":"/config/reference/solidity-compiler#additional_compiler_profilevia_ir","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n</ul>\n<p>Additional compiler profile <a href=\"#via_ir\">via_ir</a> setting.</p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: false\n\nAdditional compiler profile via_ir setting.\n","title":"additional_compiler_profile.via_ir","titles":[null,"Solidity compiler","Compilation Restrictions","Additional compiler settings:"]},"511":{"href":"/config/reference/solidity-compiler#additional_compiler_profileevm_version","html":"\n<ul>\n<li>Type: string</li>\n<li>Default: prague</li>\n</ul>\n<p>Additional compiler profile <a href=\"#evm_version\">evm_version</a> setting.</p>\n","isPage":false,"text":"\n\nType: string\nDefault: prague\n\nAdditional compiler profile evm_version setting.\n","title":"additional_compiler_profile.evm_version","titles":[null,"Solidity compiler","Compilation Restrictions","Additional compiler settings:"]},"512":{"href":"/config/reference/solidity-compiler#additional_compiler_profileoptimizer","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n</ul>\n<p>Additional compiler profile <a href=\"#optimizer\">optimizer</a> setting.</p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: false\n\nAdditional compiler profile optimizer setting.\n","title":"additional_compiler_profile.optimizer","titles":[null,"Solidity compiler","Compilation Restrictions","Additional compiler settings:"]},"513":{"href":"/config/reference/solidity-compiler#additional_compiler_profileoptimizer_runs","html":"\n<ul>\n<li>Type: integer</li>\n<li>Default: 200</li>\n</ul>\n<p>Additional compiler profile <a href=\"#optimizer_runs\">optimizer_runs</a> setting.</p>\n","isPage":false,"text":"\n\nType: integer\nDefault: 200\n\nAdditional compiler profile optimizer_runs setting.\n","title":"additional_compiler_profile.optimizer_runs","titles":[null,"Solidity compiler","Compilation Restrictions","Additional compiler settings:"]},"514":{"href":"/config/reference/solidity-compiler#additional_compiler_profilebytecode_hash","html":"\n<ul>\n<li>Type: string</li>\n<li>Default: ipfs</li>\n</ul>\n<p>Additional compiler profile <a href=\"#bytecode_hash\">bytecode_hash</a> setting.</p>\n","isPage":false,"text":"\n\nType: string\nDefault: ipfs\n\nAdditional compiler profile bytecode_hash setting.\n","title":"additional_compiler_profile.bytecode_hash","titles":[null,"Solidity compiler","Compilation Restrictions","Additional compiler settings:"]},"515":{"href":"/config/reference/solidity-compiler#compilation-restrictions-settings","html":"\n","isPage":false,"text":"\n","title":"Compilation restrictions settings:","titles":[null,"Solidity compiler","Compilation Restrictions"]},"516":{"href":"/config/reference/solidity-compiler#compilation_restrictions","html":"\n<ul>\n<li>Type: array of compilation restrictions settings</li>\n</ul>\n","isPage":false,"text":"\n\nType: array of compilation restrictions settings\n\n","title":"[compilation_restrictions]","titles":[null,"Solidity compiler","Compilation Restrictions"]},"517":{"href":"/config/reference/solidity-compiler#compilation_restrictionpaths","html":"\n<ul>\n<li>Type: regex</li>\n</ul>\n<p>Only applies compilation restrictions on files matching given paths.</p>\n<p>For example:</p>\n<ul>\n<li><code>src/contracts/Counter.sol</code> - apply restrictions for specific contract</li>\n<li><code>src/contracts/{Counter,CounterFactory}.sol</code> - apply restrictions for multiple contracts, by name</li>\n<li><code>src/v1/**</code> or <code>src/v3/**/libraries/**</code> - apply restrictions for all contracts in matching source path</li>\n</ul>\n<p>There are several configurable values for an compilation restriction:</p>\n<ul>\n<li><code>version</code></li>\n<li><code>via_ir</code></li>\n<li><code>bytecode_hash</code></li>\n<li><code>optimizer_runs</code></li>\n<li><code>min_optimizer_runs</code></li>\n<li><code>max_optimizer_runs</code></li>\n<li><code>evm_version</code></li>\n<li><code>min_evm_version</code></li>\n<li><code>max_evm_version</code></li>\n</ul>\n","isPage":false,"text":"\n\nType: regex\n\nOnly applies compilation restrictions on files matching given paths.\nFor example:\n\nsrc/contracts/Counter.sol - apply restrictions for specific contract\nsrc/contracts/{Counter,CounterFactory}.sol - apply restrictions for multiple contracts, by name\nsrc/v1/** or src/v3/**/libraries/** - apply restrictions for all contracts in matching source path\n\nThere are several configurable values for an compilation restriction:\n\nversion\nvia_ir\nbytecode_hash\noptimizer_runs\nmin_optimizer_runs\nmax_optimizer_runs\nevm_version\nmin_evm_version\nmax_evm_version\n\n","title":"compilation_restriction.paths","titles":[null,"Solidity compiler","Compilation Restrictions","[compilation_restrictions]"]},"518":{"href":"/config/reference/solidity-compiler#compilation_restrictionversion","html":"\n<ul>\n<li>Type: string (semver)</li>\n</ul>\n<p>Restrict compilation for specific <a href=\"#solc_version\">solc_version</a>.</p>\n","isPage":false,"text":"\n\nType: string (semver)\n\nRestrict compilation for specific solc_version.\n","title":"compilation_restriction.version","titles":[null,"Solidity compiler","Compilation Restrictions","[compilation_restrictions]"]},"519":{"href":"/config/reference/solidity-compiler#compilation_restrictionvia_ir","html":"\n<ul>\n<li>Type: boolean</li>\n</ul>\n<p>Restrict compilation for specific <a href=\"#via_ir\">via_ir</a> setting.</p>\n","isPage":false,"text":"\n\nType: boolean\n\nRestrict compilation for specific via_ir setting.\n","title":"compilation_restriction.via_ir","titles":[null,"Solidity compiler","Compilation Restrictions","[compilation_restrictions]"]},"520":{"href":"/config/reference/solidity-compiler#compilation_restrictionbytecode_hash","html":"\n<ul>\n<li>Type: string</li>\n</ul>\n<p>Restrict compilation matching provided bytecode hash method.</p>\n","isPage":false,"text":"\n\nType: string\n\nRestrict compilation matching provided bytecode hash method.\n","title":"compilation_restriction.bytecode_hash","titles":[null,"Solidity compiler","Compilation Restrictions","[compilation_restrictions]"]},"521":{"href":"/config/reference/solidity-compiler#compilation_restrictionoptimizer_runs","html":"\n<ul>\n<li>Type: integer</li>\n</ul>\n<p>Restrict compilation for specific <a href=\"#optimizer_runs\">optimizer_runs</a> setting. Conflicts with <code>min_optimizer_runs</code> and <code>max_optimizer_runs</code> settings.</p>\n","isPage":false,"text":"\n\nType: integer\n\nRestrict compilation for specific optimizer_runs setting. Conflicts with min_optimizer_runs and max_optimizer_runs settings.\n","title":"compilation_restriction.optimizer_runs","titles":[null,"Solidity compiler","Compilation Restrictions","[compilation_restrictions]"]},"522":{"href":"/config/reference/solidity-compiler#compilation_restrictionmin_optimizer_runs","html":"\n<ul>\n<li>Type: integer</li>\n</ul>\n<p>Restrict compilation for min of <a href=\"#optimizer_runs\">optimizer_runs</a> setting. Conflicts with <code>optimizer_runs</code> setting, requires <code>max_optimizer_runs</code> setting.</p>\n","isPage":false,"text":"\n\nType: integer\n\nRestrict compilation for min of optimizer_runs setting. Conflicts with optimizer_runs setting, requires max_optimizer_runs setting.\n","title":"compilation_restriction.min_optimizer_runs","titles":[null,"Solidity compiler","Compilation Restrictions","[compilation_restrictions]"]},"523":{"href":"/config/reference/solidity-compiler#compilation_restrictionmax_optimizer_runs","html":"\n<ul>\n<li>Type: integer</li>\n</ul>\n<p>Restrict compilation for max of <a href=\"#optimizer_runs\">optimizer_runs</a> setting. Conflicts with <code>optimizer_runs</code> setting, requires <code>min_optimizer_runs</code> setting.</p>\n","isPage":false,"text":"\n\nType: integer\n\nRestrict compilation for max of optimizer_runs setting. Conflicts with optimizer_runs setting, requires min_optimizer_runs setting.\n","title":"compilation_restriction.max_optimizer_runs","titles":[null,"Solidity compiler","Compilation Restrictions","[compilation_restrictions]"]},"524":{"href":"/config/reference/solidity-compiler#compilation_restrictionevm_version","html":"\n<ul>\n<li>Type: string</li>\n</ul>\n<p>Restrict compilation for specific <a href=\"#evm_version\">evm_version</a> setting. Conflicts with <code>min_evm_version</code> and <code>max_evm_version</code> settings.</p>\n","isPage":false,"text":"\n\nType: string\n\nRestrict compilation for specific evm_version setting. Conflicts with min_evm_version and max_evm_version settings.\n","title":"compilation_restriction.evm_version","titles":[null,"Solidity compiler","Compilation Restrictions","[compilation_restrictions]"]},"525":{"href":"/config/reference/solidity-compiler#compilation_restrictionmin_evm_version","html":"\n<ul>\n<li>Type: string</li>\n</ul>\n<p>Restrict compilation for a min version of <a href=\"#evm_version\">evm_version</a> setting. Conflicts with <code>evm_version</code> setting, requires <code>max_evm_version</code> setting.</p>\n","isPage":false,"text":"\n\nType: string\n\nRestrict compilation for a min version of evm_version setting. Conflicts with evm_version setting, requires max_evm_version setting.\n","title":"compilation_restriction.min_evm_version","titles":[null,"Solidity compiler","Compilation Restrictions","[compilation_restrictions]"]},"526":{"href":"/config/reference/solidity-compiler#compilation_restrictionmax_evm_version","html":"\n<ul>\n<li>Type: string</li>\n</ul>\n<p>Restrict compilation for a max version of <a href=\"#evm_version\">evm_version</a> setting. Conflicts with <code>evm_version</code> setting, requires <code>min_evm_version</code> setting.</p>","isPage":false,"text":"\n\nType: string\n\nRestrict compilation for a max version of evm_version setting. Conflicts with evm_version setting, requires min_evm_version setting.","title":"compilation_restriction.max_evm_version","titles":[null,"Solidity compiler","Compilation Restrictions","[compilation_restrictions]"]},"527":{"href":"/config/reference/testing#testing","html":"\n<p>Configuration related to the behavior of <code>forge test</code>.</p>\n<strong>Sections</strong>\n<ul>\n<li><a href=\"#general\">General</a></li>\n<li><a href=\"#fuzz\">Fuzz</a></li>\n<li><a href=\"#invariant\">Invariant</a></li>\n</ul>\n","isPage":true,"text":"\nConfiguration related to the behavior of forge test.\nSections\n\nGeneral\nFuzz\nInvariant\n\n","title":"Testing","titles":[null]},"528":{"href":"/config/reference/testing#general","html":"\n","isPage":false,"text":"\n","title":"General","titles":[null,"Testing"]},"529":{"href":"/config/reference/testing#verbosity","html":"\n<ul>\n<li>Type: integer</li>\n<li>Default: 0</li>\n<li>Environment: <code>FOUNDRY_VERBOSITY</code> or <code>DAPP_VERBOSITY</code></li>\n</ul>\n<p>The verbosity level to use during tests.</p>\n<ul>\n<li><strong>Level 2 (<code>-vv</code>)</strong>: Logs emitted during tests are also displayed.</li>\n<li><strong>Level 3 (<code>-vvv</code>)</strong>: Stack traces for failing tests are also displayed.</li>\n<li><strong>Level 4 (<code>-vvvv</code>)</strong>: Stack traces for all tests are displayed, and setup traces for failing tests are displayed.</li>\n<li><strong>Level 5 (<code>-vvvvv</code>)</strong>: Stack traces and setup traces are always displayed.</li>\n</ul>\n","isPage":false,"text":"\n\nType: integer\nDefault: 0\nEnvironment: FOUNDRY_VERBOSITY or DAPP_VERBOSITY\n\nThe verbosity level to use during tests.\n\nLevel 2 (-vv): Logs emitted during tests are also displayed.\nLevel 3 (-vvv): Stack traces for failing tests are also displayed.\nLevel 4 (-vvvv): Stack traces for all tests are displayed, and setup traces for failing tests are displayed.\nLevel 5 (-vvvvv): Stack traces and setup traces are always displayed.\n\n","title":"verbosity","titles":[null,"Testing","General",null]},"530":{"href":"/config/reference/testing#ffi","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code>FOUNDRY_FFI</code> or <code>DAPP_FFI</code></li>\n</ul>\n<p>Whether or not to enable the <code>ffi</code> cheatcode.</p>\n<p><strong>Warning:</strong> Enabling this cheatcode has security implications for your project, as it allows tests to execute arbitrary programs on your computer.</p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: false\nEnvironment: FOUNDRY_FFI or DAPP_FFI\n\nWhether or not to enable the ffi cheatcode.\nWarning: Enabling this cheatcode has security implications for your project, as it allows tests to execute arbitrary programs on your computer.\n","title":"ffi","titles":[null,"Testing","General",null]},"531":{"href":"/config/reference/testing#sender","html":"\n<ul>\n<li>Type: string (address)</li>\n<li>Default: 0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38</li>\n<li>Environment: <code>FOUNDRY_SENDER</code> or <code>DAPP_SENDER</code></li>\n</ul>\n<p>The value of <code>msg.sender</code> in tests.</p>\n","isPage":false,"text":"\n\nType: string (address)\nDefault: 0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38\nEnvironment: FOUNDRY_SENDER or DAPP_SENDER\n\nThe value of msg.sender in tests.\n","title":"sender","titles":[null,"Testing","General",null]},"532":{"href":"/config/reference/testing#tx_origin","html":"\n<ul>\n<li>Type: string (address)</li>\n<li>Default: 0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38</li>\n<li>Environment: <code>FOUNDRY_TX_ORIGIN</code> or <code>DAPP_TX_ORIGIN</code></li>\n</ul>\n<p>The value of <code>tx.origin</code> in tests.</p>\n","isPage":false,"text":"\n\nType: string (address)\nDefault: 0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38\nEnvironment: FOUNDRY_TX_ORIGIN or DAPP_TX_ORIGIN\n\nThe value of tx.origin in tests.\n","title":"tx_origin","titles":[null,"Testing","General",null]},"533":{"href":"/config/reference/testing#initial_balance","html":"\n<ul>\n<li>Type: string (hexadecimal)</li>\n<li>Default: 0xffffffffffffffffffffffff</li>\n<li>Environment: <code>FOUNDRY_INITIAL_BALANCE</code> or <code>DAPP_INITIAL_BALANCE</code></li>\n</ul>\n<p>The initial balance of the test contracts in wei, written in hexadecimal.</p>\n","isPage":false,"text":"\n\nType: string (hexadecimal)\nDefault: 0xffffffffffffffffffffffff\nEnvironment: FOUNDRY_INITIAL_BALANCE or DAPP_INITIAL_BALANCE\n\nThe initial balance of the test contracts in wei, written in hexadecimal.\n","title":"initial_balance","titles":[null,"Testing","General",null]},"534":{"href":"/config/reference/testing#block_number","html":"\n<ul>\n<li>Type: integer</li>\n<li>Default: 1</li>\n<li>Environment: <code>FOUNDRY_BLOCK_NUMBER</code> or <code>DAPP_BLOCK_NUMBER</code></li>\n</ul>\n<p>The value of <code>block.number</code> in tests.</p>\n","isPage":false,"text":"\n\nType: integer\nDefault: 1\nEnvironment: FOUNDRY_BLOCK_NUMBER or DAPP_BLOCK_NUMBER\n\nThe value of block.number in tests.\n","title":"block_number","titles":[null,"Testing","General",null]},"535":{"href":"/config/reference/testing#chain_id","html":"\n<ul>\n<li>Type: integer</li>\n<li>Default: 31337</li>\n<li>Environment: <code>FOUNDRY_CHAIN_ID</code> or <code>DAPP_CHAIN_ID</code></li>\n</ul>\n<p>The value of the <code>chainid</code> opcode in tests.</p>\n","isPage":false,"text":"\n\nType: integer\nDefault: 31337\nEnvironment: FOUNDRY_CHAIN_ID or DAPP_CHAIN_ID\n\nThe value of the chainid opcode in tests.\n","title":"chain_id","titles":[null,"Testing","General",null]},"536":{"href":"/config/reference/testing#gas_limit","html":"\n<ul>\n<li>Type: integer or string</li>\n<li>Default: 9223372036854775807</li>\n<li>Environment: <code>FOUNDRY_GAS_LIMIT</code> or <code>DAPP_GAS_LIMIT</code></li>\n</ul>\n<p>The gas limit for each test case.</p>\n<blockquote>\n<p>ℹ️ <strong>Note</strong></p>\n<p>Due to a limitation in a dependency of Forge, you <strong>cannot raise the gas limit</strong> beyond the default without changing the value to a string.</p>\n<p>In order to use higher gas limits use a string:</p>\n</blockquote>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">gas_limit = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;18446744073709551615&quot;</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> # u64::MAX</span></span></code></pre>\n","isPage":false,"text":"\n\nType: integer or string\nDefault: 9223372036854775807\nEnvironment: FOUNDRY_GAS_LIMIT or DAPP_GAS_LIMIT\n\nThe gas limit for each test case.\n\nℹ️ Note\nDue to a limitation in a dependency of Forge, you cannot raise the gas limit beyond the default without changing the value to a string.\nIn order to use higher gas limits use a string:\n\ngas_limit = &quot;18446744073709551615&quot; # u64::MAX\n","title":"gas_limit","titles":[null,"Testing","General",null]},"537":{"href":"/config/reference/testing#gas_price","html":"\n<ul>\n<li>Type: integer</li>\n<li>Default: 0</li>\n<li>Environment: <code>FOUNDRY_GAS_PRICE</code> or <code>DAPP_GAS_PRICE</code></li>\n</ul>\n<p>The price of gas (in wei) in tests.</p>\n","isPage":false,"text":"\n\nType: integer\nDefault: 0\nEnvironment: FOUNDRY_GAS_PRICE or DAPP_GAS_PRICE\n\nThe price of gas (in wei) in tests.\n","title":"gas_price","titles":[null,"Testing","General",null]},"538":{"href":"/config/reference/testing#block_base_fee_per_gas","html":"\n<ul>\n<li>Type: integer</li>\n<li>Default: 0</li>\n<li>Environment: <code>FOUNDRY_BLOCK_BASE_FEE_PER_GAS</code> or <code>DAPP_BLOCK_BASE_FEE_PER_GAS</code></li>\n</ul>\n<p>The base fee per gas (in wei) in tests.</p>\n","isPage":false,"text":"\n\nType: integer\nDefault: 0\nEnvironment: FOUNDRY_BLOCK_BASE_FEE_PER_GAS or DAPP_BLOCK_BASE_FEE_PER_GAS\n\nThe base fee per gas (in wei) in tests.\n","title":"block_base_fee_per_gas","titles":[null,"Testing","General",null]},"539":{"href":"/config/reference/testing#block_coinbase","html":"\n<ul>\n<li>Type: string (address)</li>\n<li>Default: 0x0000000000000000000000000000000000000000</li>\n<li>Environment: <code>FOUNDRY_BLOCK_COINBASE</code> or <code>DAPP_BLOCK_COINBASE</code></li>\n</ul>\n<p>The value of <code>block.coinbase</code> in tests.</p>\n","isPage":false,"text":"\n\nType: string (address)\nDefault: 0x0000000000000000000000000000000000000000\nEnvironment: FOUNDRY_BLOCK_COINBASE or DAPP_BLOCK_COINBASE\n\nThe value of block.coinbase in tests.\n","title":"block_coinbase","titles":[null,"Testing","General",null]},"540":{"href":"/config/reference/testing#block_timestamp","html":"\n<ul>\n<li>Type: integer</li>\n<li>Default: 1</li>\n<li>Environment: <code>FOUNDRY_BLOCK_TIMESTAMP</code> or <code>DAPP_BLOCK_TIMESTAMP</code></li>\n</ul>\n<p>The value of <code>block.timestamp</code> in tests.</p>\n","isPage":false,"text":"\n\nType: integer\nDefault: 1\nEnvironment: FOUNDRY_BLOCK_TIMESTAMP or DAPP_BLOCK_TIMESTAMP\n\nThe value of block.timestamp in tests.\n","title":"block_timestamp","titles":[null,"Testing","General",null]},"541":{"href":"/config/reference/testing#block_difficulty","html":"\n<ul>\n<li>Type: integer</li>\n<li>Default: 0</li>\n<li>Environment: <code>FOUNDRY_BLOCK_DIFFICULTY</code> or <code>DAPP_BLOCK_DIFFICULTY</code></li>\n</ul>\n<p>The value of <code>block.difficulty</code> in tests.</p>\n","isPage":false,"text":"\n\nType: integer\nDefault: 0\nEnvironment: FOUNDRY_BLOCK_DIFFICULTY or DAPP_BLOCK_DIFFICULTY\n\nThe value of block.difficulty in tests.\n","title":"block_difficulty","titles":[null,"Testing","General",null]},"542":{"href":"/config/reference/testing#gas_reports","html":"\n<ul>\n<li>Type: array of strings (contract names)</li>\n<li>Default: [&quot;*&quot;]</li>\n<li>Environment: <code>FOUNDRY_GAS_REPORTS</code> or <code>DAPP_GAS_REPORTS</code></li>\n</ul>\n<p>The contracts to print gas reports for.</p>\n","isPage":false,"text":"\n\nType: array of strings (contract names)\nDefault: [&quot;*&quot;]\nEnvironment: FOUNDRY_GAS_REPORTS or DAPP_GAS_REPORTS\n\nThe contracts to print gas reports for.\n","title":"gas_reports","titles":[null,"Testing","General",null]},"543":{"href":"/config/reference/testing#no_storage_caching","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code>FOUNDRY_NO_STORAGE_CACHING</code> or <code>DAPP_NO_STORAGE_CACHING</code></li>\n</ul>\n<p>If set to <code>true</code>, then block data from RPC endpoints in tests will not be cached. Otherwise, the data is cached to <code>$HOME/.foundry/cache/&lt;chain id&gt;/&lt;block number&gt;</code>.</p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: false\nEnvironment: FOUNDRY_NO_STORAGE_CACHING or DAPP_NO_STORAGE_CACHING\n\nIf set to true, then block data from RPC endpoints in tests will not be cached. Otherwise, the data is cached to $HOME/.foundry/cache/&lt;chain id&gt;/&lt;block number&gt;.\n","title":"no_storage_caching","titles":[null,"Testing","General",null]},"544":{"href":"/config/reference/testing#rpc_storage_caching","html":"\n<p>The <code>[rpc_storage_caching]</code> block determines what RPC endpoints are cached.</p>\n","isPage":false,"text":"\nThe [rpc_storage_caching] block determines what RPC endpoints are cached.\n","title":"[rpc_storage_caching]","titles":[null,"Testing","General",null]},"545":{"href":"/config/reference/testing#rpc_storage_cachingchains","html":"\n<ul>\n<li>Type: string or array of strings (chain names)</li>\n<li>Default: all</li>\n<li>Environment: N/A</li>\n</ul>\n<p>Determines what chains are cached. By default, all chains are cached.</p>\n<p>Valid values are:</p>\n<ul>\n<li>&quot;all&quot;</li>\n<li>A list of chain names, e.g. <code>[&quot;optimism&quot;, &quot;mainnet&quot;]</code></li>\n</ul>\n","isPage":false,"text":"\n\nType: string or array of strings (chain names)\nDefault: all\nEnvironment: N/A\n\nDetermines what chains are cached. By default, all chains are cached.\nValid values are:\n\n&quot;all&quot;\nA list of chain names, e.g. [&quot;optimism&quot;, &quot;mainnet&quot;]\n\n","title":"rpc_storage_caching.chains","titles":[null,"Testing","General",null,"[rpc_storage_caching]"]},"546":{"href":"/config/reference/testing#rpc_storage_cachingendpoints","html":"\n<ul>\n<li>Type: string or array of regex patterns (to match URLs)</li>\n<li>Default: remote</li>\n<li>Environment: N/A</li>\n</ul>\n<p>Determines what RPC endpoints are cached. By default, only remote endpoints are cached.</p>\n<p>Valid values are:</p>\n<ul>\n<li>all</li>\n<li>remote (default)</li>\n<li>A list of regex patterns, e.g. <code>[&quot;localhost&quot;]</code></li>\n</ul>\n","isPage":false,"text":"\n\nType: string or array of regex patterns (to match URLs)\nDefault: remote\nEnvironment: N/A\n\nDetermines what RPC endpoints are cached. By default, only remote endpoints are cached.\nValid values are:\n\nall\nremote (default)\nA list of regex patterns, e.g. [&quot;localhost&quot;]\n\n","title":"rpc_storage_caching.endpoints","titles":[null,"Testing","General",null,"[rpc_storage_caching]"]},"547":{"href":"/config/reference/testing#eth_rpc_url","html":"\n<ul>\n<li>Type: string</li>\n<li>Default: none</li>\n<li>Environment: <code>FOUNDRY_ETH_RPC_URL</code> or <code>DAPP_ETH_RPC_URL</code></li>\n</ul>\n<p>The url of the rpc server that should be used for any rpc calls.</p>\n","isPage":false,"text":"\n\nType: string\nDefault: none\nEnvironment: FOUNDRY_ETH_RPC_URL or DAPP_ETH_RPC_URL\n\nThe url of the rpc server that should be used for any rpc calls.\n","title":"eth_rpc_url","titles":[null,"Testing","General",null]},"548":{"href":"/config/reference/testing#etherscan_api_key","html":"\n<ul>\n<li>Type: string</li>\n<li>Default: none</li>\n<li>Environment: <code>FOUNDRY_ETHERSCAN_API_KEY</code> or <code>DAPP_ETHERSCAN_API_KEY</code></li>\n</ul>\n<p>The etherscan API key for RPC calls.</p>\n","isPage":false,"text":"\n\nType: string\nDefault: none\nEnvironment: FOUNDRY_ETHERSCAN_API_KEY or DAPP_ETHERSCAN_API_KEY\n\nThe etherscan API key for RPC calls.\n","title":"etherscan_api_key","titles":[null,"Testing","General",null]},"549":{"href":"/config/reference/testing#match-test","html":"\n<ul>\n<li>Type: regex</li>\n<li>Default: none</li>\n<li>Environment: <code>FOUNDRY_MATCH_TEST</code> or <code>DAPP_MATCH_TEST</code></li>\n</ul>\n<p>Only run test methods matching regex.\nEquivalent to <code>forge test --match-test &lt;TEST_PATTERN&gt;</code></p>\n","isPage":false,"text":"\n\nType: regex\nDefault: none\nEnvironment: FOUNDRY_MATCH_TEST or DAPP_MATCH_TEST\n\nOnly run test methods matching regex.\nEquivalent to forge test --match-test &lt;TEST_PATTERN&gt;\n","title":"match-test","titles":[null,"Testing","General",null]},"550":{"href":"/config/reference/testing#no-match-test","html":"\n<ul>\n<li>Type: regex</li>\n<li>Default: none</li>\n<li>Environment: <code>FOUNDRY_NO_MATCH_TEST</code> or <code>DAPP_NO_MATCH_TEST</code></li>\n</ul>\n<p>Only run test methods not matching regex.\nEquivalent to <code>forge test --no-match-test &lt;TEST_PATTERN_INVERSE&gt;</code></p>\n","isPage":false,"text":"\n\nType: regex\nDefault: none\nEnvironment: FOUNDRY_NO_MATCH_TEST or DAPP_NO_MATCH_TEST\n\nOnly run test methods not matching regex.\nEquivalent to forge test --no-match-test &lt;TEST_PATTERN_INVERSE&gt;\n","title":"no-match-test","titles":[null,"Testing","General",null]},"551":{"href":"/config/reference/testing#match-contract","html":"\n<ul>\n<li>Type: regex</li>\n<li>Default: none</li>\n<li>Environment: <code>FOUNDRY_MATCH_CONTRACT</code> or <code>DAPP_MATCH_CONTRACT</code></li>\n</ul>\n<p>Only run test methods in contracts matching regex.\nEquivalent to <code>forge test --match-contract &lt;CONTRACT_PATTERN&gt;</code></p>\n","isPage":false,"text":"\n\nType: regex\nDefault: none\nEnvironment: FOUNDRY_MATCH_CONTRACT or DAPP_MATCH_CONTRACT\n\nOnly run test methods in contracts matching regex.\nEquivalent to forge test --match-contract &lt;CONTRACT_PATTERN&gt;\n","title":"match-contract","titles":[null,"Testing","General",null]},"552":{"href":"/config/reference/testing#no-match-contract","html":"\n<ul>\n<li>Type: regex</li>\n<li>Default: none</li>\n<li>Environment: <code>FOUNDRY_NO_MATCH_CONTRACT</code> or <code>DAPP_NO_MATCH_CONTRACT</code></li>\n</ul>\n<p>Only run test methods in contracts not matching regex.\nEquivalent to <code>forge test --no-match-contract &lt;CONTRACT_PATTERN_INVERSE&gt;</code></p>\n","isPage":false,"text":"\n\nType: regex\nDefault: none\nEnvironment: FOUNDRY_NO_MATCH_CONTRACT or DAPP_NO_MATCH_CONTRACT\n\nOnly run test methods in contracts not matching regex.\nEquivalent to forge test --no-match-contract &lt;CONTRACT_PATTERN_INVERSE&gt;\n","title":"no-match-contract","titles":[null,"Testing","General",null]},"553":{"href":"/config/reference/testing#match-path","html":"\n<ul>\n<li>Type: regex</li>\n<li>Default: none</li>\n<li>Environment: <code>FOUNDRY_MATCH_PATH</code> or <code>DAPP_MATCH_PATH</code></li>\n</ul>\n<p>Only runs test methods on files matching the path.\nEquivalent to <code>forge test --match-path &lt;PATH_PATTERN&gt;</code></p>\n","isPage":false,"text":"\n\nType: regex\nDefault: none\nEnvironment: FOUNDRY_MATCH_PATH or DAPP_MATCH_PATH\n\nOnly runs test methods on files matching the path.\nEquivalent to forge test --match-path &lt;PATH_PATTERN&gt;\n","title":"match-path","titles":[null,"Testing","General",null]},"554":{"href":"/config/reference/testing#no-match-path","html":"\n<ul>\n<li>Type: regex</li>\n<li>Default: none</li>\n<li>Environment: <code>FOUNDRY_NO_MATCH_PATH</code> or <code>DAPP_NO_MATCH_PATH</code></li>\n</ul>\n<p>Only runs test methods on files not matching the path.\nEquivalent to <code>forge test --no-match-path &lt;PATH_PATTERN_INVERSE&gt;</code></p>\n","isPage":false,"text":"\n\nType: regex\nDefault: none\nEnvironment: FOUNDRY_NO_MATCH_PATH or DAPP_NO_MATCH_PATH\n\nOnly runs test methods on files not matching the path.\nEquivalent to forge test --no-match-path &lt;PATH_PATTERN_INVERSE&gt;\n","title":"no-match-path","titles":[null,"Testing","General",null]},"555":{"href":"/config/reference/testing#threads","html":"\n<ul>\n<li>Type: integer</li>\n<li>Default: none</li>\n<li>Environment: <code>FOUNDRY_THREADS</code></li>\n</ul>\n<p>Number of threads to use.\nNot set or zero specifies the number of logical cores.</p>\n","isPage":false,"text":"\n\nType: integer\nDefault: none\nEnvironment: FOUNDRY_THREADS\n\nNumber of threads to use.\nNot set or zero specifies the number of logical cores.\n","title":"threads","titles":[null,"Testing","General",null]},"556":{"href":"/config/reference/testing#show_progress","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code>FOUNDRY_SHOW_PROGRESS</code></li>\n</ul>\n<p>Whether to show test execution progress.</p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: false\nEnvironment: FOUNDRY_SHOW_PROGRESS\n\nWhether to show test execution progress.\n","title":"show_progress","titles":[null,"Testing","General",null]},"557":{"href":"/config/reference/testing#block_gas_limit","html":"\n<ul>\n<li>Type: integer</li>\n<li>Default: none</li>\n<li>Environment: <code>FOUNDRY_BLOCK_GAS_LIMIT</code> or <code>DAPP_BLOCK_GAS_LIMIT</code></li>\n</ul>\n<p>The block.gaslimit value during EVM execution.</p>\n","isPage":false,"text":"\n\nType: integer\nDefault: none\nEnvironment: FOUNDRY_BLOCK_GAS_LIMIT or DAPP_BLOCK_GAS_LIMIT\n\nThe block.gaslimit value during EVM execution.\n","title":"block_gas_limit","titles":[null,"Testing","General",null]},"558":{"href":"/config/reference/testing#memory_limit","html":"\n<ul>\n<li>Type: integer</li>\n<li>Default: 33554432</li>\n<li>Environment: <code>FOUNDRY_MEMORY_LIMIT</code> or <code>DAPP_MEMORY_LIMIT</code></li>\n</ul>\n<p>The memory limit of the EVM in bytes.</p>\n","isPage":false,"text":"\n\nType: integer\nDefault: 33554432\nEnvironment: FOUNDRY_MEMORY_LIMIT or DAPP_MEMORY_LIMIT\n\nThe memory limit of the EVM in bytes.\n","title":"memory_limit","titles":[null,"Testing","General",null]},"559":{"href":"/config/reference/testing#names","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code>FOUNDRY_NAMES</code> or <code>DAPP_NAMES</code></li>\n</ul>\n<p>Print compiled contract names.</p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: false\nEnvironment: FOUNDRY_NAMES or DAPP_NAMES\n\nPrint compiled contract names.\n","title":"names","titles":[null,"Testing","General",null]},"560":{"href":"/config/reference/testing#sizes","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code>FOUNDRY_SIZES</code> or <code>DAPP_SIZES</code></li>\n</ul>\n<p>Print compiled contract sizes.</p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: false\nEnvironment: FOUNDRY_SIZES or DAPP_SIZES\n\nPrint compiled contract sizes.\n","title":"sizes","titles":[null,"Testing","General",null]},"561":{"href":"/config/reference/testing#rpc_endpoints","html":"\n<ul>\n<li>Type: table of RPC endpoints</li>\n<li>Default: none</li>\n<li>Environment: none</li>\n</ul>\n<p>This section lives outside of profiles and defines a table of RPC endpoints, where the key specifies the RPC endpoints&#x27;s name and the value is the RPC endpoint itself.</p>\n<p>The value can either be a valid RPC endpoint or a reference to an environment variable (wrapped with in <code>${}</code>).</p>\n<p>These RPC endpoints can be used in tests and Solidity scripts (see <a href=\"/reference/cheatcodes/rpc\"><code>vm.rpc</code></a>).</p>\n<p>The following example defines an endpoint named <code>optimism</code> and an endpoint named <code>mainnet</code> that references an environment variable <code>RPC_MAINNET</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">rpc_endpoints</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">optimism = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://optimism.alchemyapi.io/v2/...&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;${RPC_MAINNET}&quot;</span></span></code></pre>\n","isPage":false,"text":"\n\nType: table of RPC endpoints\nDefault: none\nEnvironment: none\n\nThis section lives outside of profiles and defines a table of RPC endpoints, where the key specifies the RPC endpoints&#x27;s name and the value is the RPC endpoint itself.\nThe value can either be a valid RPC endpoint or a reference to an environment variable (wrapped with in ${}).\nThese RPC endpoints can be used in tests and Solidity scripts (see vm.rpc).\nThe following example defines an endpoint named optimism and an endpoint named mainnet that references an environment variable RPC_MAINNET:\n[rpc_endpoints]\noptimism = &quot;https://optimism.alchemyapi.io/v2/...&quot;\nmainnet = &quot;${RPC_MAINNET}&quot;\n","title":"rpc_endpoints","titles":[null,"Testing","General",null]},"562":{"href":"/config/reference/testing#prompt_timeout","html":"\n<ul>\n<li>Type: integer</li>\n<li>Default: 120</li>\n<li>Environment: <code>FOUNDRY_PROMPT_TIMEOUT</code></li>\n</ul>\n<p>The number of seconds to wait before <code>vm.prompt</code> reverts with a timeout.</p>\n","isPage":false,"text":"\n\nType: integer\nDefault: 120\nEnvironment: FOUNDRY_PROMPT_TIMEOUT\n\nThe number of seconds to wait before vm.prompt reverts with a timeout.\n","title":"prompt_timeout","titles":[null,"Testing","General",null]},"563":{"href":"/config/reference/testing#fuzz","html":"\n<p>Configuration values for <code>[fuzz]</code> section.</p>\n","isPage":false,"text":"\nConfiguration values for [fuzz] section.\n","title":"Fuzz","titles":[null,"Testing"]},"564":{"href":"/config/reference/testing#runs","html":"\n<ul>\n<li>Type: integer</li>\n<li>Default: 256</li>\n<li>Environment: <code>FOUNDRY_FUZZ_RUNS</code> or <code>DAPP_FUZZ_RUNS</code></li>\n</ul>\n<p>The amount of fuzz runs to perform for each fuzz test case. Higher values gives more confidence in results at the cost of testing speed.</p>\n","isPage":false,"text":"\n\nType: integer\nDefault: 256\nEnvironment: FOUNDRY_FUZZ_RUNS or DAPP_FUZZ_RUNS\n\nThe amount of fuzz runs to perform for each fuzz test case. Higher values gives more confidence in results at the cost of testing speed.\n","title":"runs","titles":[null,"Testing","Fuzz",null]},"565":{"href":"/config/reference/testing#max_test_rejects","html":"\n<ul>\n<li>Type: integer</li>\n<li>Default: 65536</li>\n<li>Environment: <code>FOUNDRY_FUZZ_MAX_TEST_REJECTS</code></li>\n</ul>\n<p>The maximum number of combined inputs that may be rejected before the test as a whole aborts.\n&quot;Global&quot; filters apply to the whole test case. If the test case is rejected, the whole thing is regenerated.</p>\n","isPage":false,"text":"\n\nType: integer\nDefault: 65536\nEnvironment: FOUNDRY_FUZZ_MAX_TEST_REJECTS\n\nThe maximum number of combined inputs that may be rejected before the test as a whole aborts.\n&quot;Global&quot; filters apply to the whole test case. If the test case is rejected, the whole thing is regenerated.\n","title":"max_test_rejects","titles":[null,"Testing","Fuzz",null]},"566":{"href":"/config/reference/testing#seed","html":"\n<ul>\n<li>Type: string (hexadecimal)</li>\n<li>Default: none</li>\n<li>Environment: <code>FOUNDRY_FUZZ_SEED</code></li>\n</ul>\n<p>Optional seed for the fuzzing RNG algorithm.</p>\n","isPage":false,"text":"\n\nType: string (hexadecimal)\nDefault: none\nEnvironment: FOUNDRY_FUZZ_SEED\n\nOptional seed for the fuzzing RNG algorithm.\n","title":"seed","titles":[null,"Testing","Fuzz",null]},"567":{"href":"/config/reference/testing#dictionary_weight","html":"\n<ul>\n<li>Type: integer (between 0 and 100)</li>\n<li>Default: 40</li>\n<li>Environment: <code>FOUNDRY_FUZZ_DICTIONARY_WEIGHT</code></li>\n</ul>\n<p>The weight of the dictionary. A higher dictionary weight will bias the fuzz inputs towards &quot;interesting&quot; values, e.g. boundary values like <code>type(uint256).max</code> or contract addresses from your environment.</p>\n","isPage":false,"text":"\n\nType: integer (between 0 and 100)\nDefault: 40\nEnvironment: FOUNDRY_FUZZ_DICTIONARY_WEIGHT\n\nThe weight of the dictionary. A higher dictionary weight will bias the fuzz inputs towards &quot;interesting&quot; values, e.g. boundary values like type(uint256).max or contract addresses from your environment.\n","title":"dictionary_weight","titles":[null,"Testing","Fuzz",null]},"568":{"href":"/config/reference/testing#include_storage","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: true</li>\n<li>Environment: <code>FOUNDRY_FUZZ_INCLUDE_STORAGE</code></li>\n</ul>\n<p>The flag indicating whether to include values from storage.</p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: true\nEnvironment: FOUNDRY_FUZZ_INCLUDE_STORAGE\n\nThe flag indicating whether to include values from storage.\n","title":"include_storage","titles":[null,"Testing","Fuzz",null]},"569":{"href":"/config/reference/testing#include_push_bytes","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: true</li>\n<li>Environment: <code>FOUNDRY_FUZZ_INCLUDE_PUSH_BYTES</code></li>\n</ul>\n<p>The flag indicating whether to include push bytes values.</p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: true\nEnvironment: FOUNDRY_FUZZ_INCLUDE_PUSH_BYTES\n\nThe flag indicating whether to include push bytes values.\n","title":"include_push_bytes","titles":[null,"Testing","Fuzz",null]},"570":{"href":"/config/reference/testing#gas_report_samples","html":"\n<ul>\n<li>Type: integer</li>\n<li>Default: 256</li>\n<li>Environment: <code>FOUNDRY_FUZZ_GAS_REPORT_SAMPLES</code></li>\n</ul>\n<p>Number of runs to use for generating gas report.</p>\n","isPage":false,"text":"\n\nType: integer\nDefault: 256\nEnvironment: FOUNDRY_FUZZ_GAS_REPORT_SAMPLES\n\nNumber of runs to use for generating gas report.\n","title":"gas_report_samples","titles":[null,"Testing","Fuzz",null]},"571":{"href":"/config/reference/testing#failure_persist_dir","html":"\n<ul>\n<li>Type: string (path)</li>\n<li>Default: <code>./cache/fuzz</code></li>\n<li>Environment: <code>FOUNDRY_FUZZ_FAILURE_PERSIST_DIR</code></li>\n</ul>\n<p>Path where fuzz failures are recorded and replayed.</p>\n","isPage":false,"text":"\n\nType: string (path)\nDefault: ./cache/fuzz\nEnvironment: FOUNDRY_FUZZ_FAILURE_PERSIST_DIR\n\nPath where fuzz failures are recorded and replayed.\n","title":"failure_persist_dir","titles":[null,"Testing","Fuzz",null]},"572":{"href":"/config/reference/testing#failure_persist_file","html":"\n<ul>\n<li>Type: string</li>\n<li>Default: <code>failures</code></li>\n<li>Environment: <code>FOUNDRY_FUZZ_FAILURE_PERSIST_FILE</code></li>\n</ul>\n<p>Name of the file to record fuzz failures.</p>\n","isPage":false,"text":"\n\nType: string\nDefault: failures\nEnvironment: FOUNDRY_FUZZ_FAILURE_PERSIST_FILE\n\nName of the file to record fuzz failures.\n","title":"failure_persist_file","titles":[null,"Testing","Fuzz",null]},"573":{"href":"/config/reference/testing#show_logs","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code>FOUNDRY_FUZZ_SHOW_LOGS</code></li>\n</ul>\n<p>The flag indicates whether to display console logs in fuzz tests or not. Note that in order to enable displaying console logs, you&#x27;ll need to set <code>show_logs = true</code> and then use <code>forge test -vv</code> or set <code>verbosity &gt;= 2</code>.</p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: false\nEnvironment: FOUNDRY_FUZZ_SHOW_LOGS\n\nThe flag indicates whether to display console logs in fuzz tests or not. Note that in order to enable displaying console logs, you&#x27;ll need to set show_logs = true and then use forge test -vv or set verbosity &gt;= 2.\n","title":"show_logs","titles":[null,"Testing","Fuzz",null]},"574":{"href":"/config/reference/testing#invariant","html":"\n<p>Configuration values for <code>[invariant]</code> section.</p>\n<blockquote>\n<p>ℹ️ <strong>Note</strong></p>\n<p>Configuration for <code>[invariant]</code> section has the fallback logic\nfor common config entries (<code>runs</code>, <code>seed</code>, <code>dictionary_weight</code> etc).</p>\n<ul>\n<li>If the entries are not set in either section, then the defaults will be used.</li>\n<li>If the entries are set in the <code>[fuzz]</code> section, but are not set in the <code>[invariant]</code>\nsection, these values will automatically be set to the values specified in\nthe <code>[fuzz]</code> section.</li>\n<li>For any profile other than <code>default</code>:\n<ul>\n<li>If at least one entry is set in the <code>[invariant]</code> (same as\n<code>[profile.default.invariant]</code>) section, then the values from\n<code>[invariant]</code> section will be used, including defaults.</li>\n<li>If no entry is set in the <code>[invariant]</code> section, but there are\nentries in the <code>[fuzz]</code> (same as <code>[profile.default.fuzz]</code>) section,\nthen the values from the <code>[fuzz]</code> section will be used.</li>\n<li>If it&#x27;s none of the cases described above, then the defaults\nwill be used.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n","isPage":false,"text":"\nConfiguration values for [invariant] section.\n\nℹ️ Note\nConfiguration for [invariant] section has the fallback logic\nfor common config entries (runs, seed, dictionary_weight etc).\n\nIf the entries are not set in either section, then the defaults will be used.\nIf the entries are set in the [fuzz] section, but are not set in the [invariant]\nsection, these values will automatically be set to the values specified in\nthe [fuzz] section.\nFor any profile other than default:\n\nIf at least one entry is set in the [invariant] (same as\n[profile.default.invariant]) section, then the values from\n[invariant] section will be used, including defaults.\nIf no entry is set in the [invariant] section, but there are\nentries in the [fuzz] (same as [profile.default.fuzz]) section,\nthen the values from the [fuzz] section will be used.\nIf it&#x27;s none of the cases described above, then the defaults\nwill be used.\n\n\n\n\n","title":"Invariant","titles":[null,"Testing"]},"575":{"href":"/config/reference/testing#runs-1","html":"\n<ul>\n<li>Type: integer</li>\n<li>Default: 256</li>\n<li>Environment: <code>FOUNDRY_INVARIANT_RUNS</code></li>\n</ul>\n<p>The number of runs that must execute for each invariant test group. See also <a href=\"#runs\">fuzz.runs</a></p>\n","isPage":false,"text":"\n\nType: integer\nDefault: 256\nEnvironment: FOUNDRY_INVARIANT_RUNS\n\nThe number of runs that must execute for each invariant test group. See also fuzz.runs\n","title":"runs","titles":[null,"Testing","Invariant",null]},"576":{"href":"/config/reference/testing#depth","html":"\n<ul>\n<li>Type: integer</li>\n<li>Default: 500</li>\n<li>Environment: <code>FOUNDRY_INVARIANT_DEPTH</code></li>\n</ul>\n<p>The number of calls executed to attempt to break invariants in one run.</p>\n","isPage":false,"text":"\n\nType: integer\nDefault: 500\nEnvironment: FOUNDRY_INVARIANT_DEPTH\n\nThe number of calls executed to attempt to break invariants in one run.\n","title":"depth","titles":[null,"Testing","Invariant",null]},"577":{"href":"/config/reference/testing#fail_on_revert","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code>FOUNDRY_INVARIANT_FAIL_ON_REVERT</code></li>\n</ul>\n<p>Fails the invariant fuzzing if a revert occurs.</p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: false\nEnvironment: FOUNDRY_INVARIANT_FAIL_ON_REVERT\n\nFails the invariant fuzzing if a revert occurs.\n","title":"fail_on_revert","titles":[null,"Testing","Invariant",null]},"578":{"href":"/config/reference/testing#call_override","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code>FOUNDRY_INVARIANT_CALL_OVERRIDE</code></li>\n</ul>\n<p>Overrides unsafe external calls when running invariant tests, useful for e.g. performing reentrancy checks.</p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: false\nEnvironment: FOUNDRY_INVARIANT_CALL_OVERRIDE\n\nOverrides unsafe external calls when running invariant tests, useful for e.g. performing reentrancy checks.\n","title":"call_override","titles":[null,"Testing","Invariant",null]},"579":{"href":"/config/reference/testing#dictionary_weight-1","html":"\n<ul>\n<li>Type: integer (between 0 and 100)</li>\n<li>Default: 80</li>\n<li>Environment: <code>FOUNDRY_INVARIANT_DICTIONARY_WEIGHT</code></li>\n</ul>\n<p>The weight of the dictionary. See also <a href=\"#dictionary_weight\">fuzz.dictionary_weight</a></p>\n","isPage":false,"text":"\n\nType: integer (between 0 and 100)\nDefault: 80\nEnvironment: FOUNDRY_INVARIANT_DICTIONARY_WEIGHT\n\nThe weight of the dictionary. See also fuzz.dictionary_weight\n","title":"dictionary_weight","titles":[null,"Testing","Invariant",null]},"580":{"href":"/config/reference/testing#include_storage-1","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: true</li>\n<li>Environment: <code>FOUNDRY_FUZZ_INCLUDE_STORAGE</code></li>\n</ul>\n<p>The flag indicating whether to include values from storage. See also <a href=\"#include_storage\">fuzz.include_storage</a></p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: true\nEnvironment: FOUNDRY_FUZZ_INCLUDE_STORAGE\n\nThe flag indicating whether to include values from storage. See also fuzz.include_storage\n","title":"include_storage","titles":[null,"Testing","Invariant",null]},"581":{"href":"/config/reference/testing#include_push_bytes-1","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: true</li>\n<li>Environment: <code>FOUNDRY_FUZZ_INCLUDE_PUSH_BYTES</code></li>\n</ul>\n<p>The flag indicating whether to include push bytes values. See also <a href=\"#include_push_bytes\">fuzz.include_push_bytes</a></p>\n","isPage":false,"text":"\n\nType: boolean\nDefault: true\nEnvironment: FOUNDRY_FUZZ_INCLUDE_PUSH_BYTES\n\nThe flag indicating whether to include push bytes values. See also fuzz.include_push_bytes\n","title":"include_push_bytes","titles":[null,"Testing","Invariant",null]},"582":{"href":"/config/reference/testing#shrink_run_limit","html":"\n<ul>\n<li>Type: integer</li>\n<li>Default: 5000</li>\n<li>Environment: <code>FOUNDRY_INVARIANT_SHRINK_RUN_LIMIT</code></li>\n</ul>\n<p>The maximum number of attempts to shrink a failed the sequence. Shrink process is disabled if set to 0.</p>\n","isPage":false,"text":"\n\nType: integer\nDefault: 5000\nEnvironment: FOUNDRY_INVARIANT_SHRINK_RUN_LIMIT\n\nThe maximum number of attempts to shrink a failed the sequence. Shrink process is disabled if set to 0.\n","title":"shrink_run_limit","titles":[null,"Testing","Invariant",null]},"583":{"href":"/config/reference/testing#max_assume_rejects","html":"\n<ul>\n<li>Type: integer</li>\n<li>Default: 65536</li>\n<li>Environment: <code>FOUNDRY_INVARIANT_MAX_ASSUME_REJECTS</code></li>\n</ul>\n<p>The maximum number of rejects via <code>vm.assume</code> which can be encountered during a single invariant run.</p>\n","isPage":false,"text":"\n\nType: integer\nDefault: 65536\nEnvironment: FOUNDRY_INVARIANT_MAX_ASSUME_REJECTS\n\nThe maximum number of rejects via vm.assume which can be encountered during a single invariant run.\n","title":"max_assume_rejects","titles":[null,"Testing","Invariant",null]},"584":{"href":"/config/reference/testing#gas_report_samples-1","html":"\n<ul>\n<li>Type: integer</li>\n<li>Default: 256</li>\n<li>Environment: <code>FOUNDRY_INVARIANT_GAS_REPORT_SAMPLES</code></li>\n</ul>\n<p>Number of runs to use for generating gas report.</p>\n","isPage":false,"text":"\n\nType: integer\nDefault: 256\nEnvironment: FOUNDRY_INVARIANT_GAS_REPORT_SAMPLES\n\nNumber of runs to use for generating gas report.\n","title":"gas_report_samples","titles":[null,"Testing","Invariant",null]},"585":{"href":"/config/reference/testing#failure_persist_dir-1","html":"\n<ul>\n<li>Type: string (path)</li>\n<li>Default: <code>./cache/invariant</code></li>\n<li>Environment: <code>FOUNDRY_INVARIANT_FAILURE_PERSIST_DIR</code></li>\n</ul>\n<p>Path where invariant failures are recorded and replayed.</p>\n","isPage":false,"text":"\n\nType: string (path)\nDefault: ./cache/invariant\nEnvironment: FOUNDRY_INVARIANT_FAILURE_PERSIST_DIR\n\nPath where invariant failures are recorded and replayed.\n","title":"failure_persist_dir","titles":[null,"Testing","Invariant",null]},"586":{"href":"/config/reference/testing#show_metrics","html":"\n<ul>\n<li>Type: boolean</li>\n<li>Default: false</li>\n<li>Environment: <code>FOUNDRY_INVARIANT_SHOW_METRICS</code></li>\n</ul>\n<p>The flag indicating whether to collect and display fuzzed selectors metrics in test report.</p>","isPage":false,"text":"\n\nType: boolean\nDefault: false\nEnvironment: FOUNDRY_INVARIANT_SHOW_METRICS\n\nThe flag indicating whether to collect and display fuzzed selectors metrics in test report.","title":"show_metrics","titles":[null,"Testing","Invariant",null]},"587":{"href":"/cast/reference/abi-commands#abi-commands","html":"\n<ul>\n<li><a href=\"/cast/reference/cast-abi-encode\">cast abi-encode</a></li>\n<li><a href=\"/cast/reference/cast-4byte\">cast 4byte</a></li>\n<li><a href=\"/cast/reference/cast-4byte-calldata\">cast 4byte-calldata</a></li>\n<li><a href=\"/cast/reference/cast-4byte-event\">cast 4byte-event</a></li>\n<li><a href=\"/cast/reference/cast-calldata\">cast calldata</a></li>\n<li><a href=\"/cast/reference/cast-decode-abi\">cast decode-abi</a></li>\n<li><a href=\"/cast/reference/cast-decode-calldata\">cast decode-calldata</a></li>\n<li><a href=\"/cast/reference/cast-pretty-calldata\">cast pretty-calldata</a></li>\n<li><a href=\"/cast/reference/cast-selectors\">cast selectors</a></li>\n<li><a href=\"/cast/reference/cast-upload-signature\">cast upload-signature</a></li>\n</ul>","isPage":true,"text":"\n\ncast abi-encode\ncast 4byte\ncast 4byte-calldata\ncast 4byte-event\ncast calldata\ncast decode-abi\ncast decode-calldata\ncast pretty-calldata\ncast selectors\ncast upload-signature\n","title":"ABI Commands","titles":[null]},"588":{"href":"/cast/reference/account-commands#account-commands","html":"\n<ul>\n<li><a href=\"/cast/reference/cast-balance\">cast balance</a></li>\n<li><a href=\"/cast/reference/cast-storage\">cast storage</a></li>\n<li><a href=\"/cast/reference/cast-proof\">cast proof</a></li>\n<li><a href=\"/cast/reference/cast-nonce\">cast nonce</a></li>\n<li><a href=\"/cast/reference/cast-code\">cast code</a></li>\n<li><a href=\"/cast/reference/cast-codesize\">cast codesize</a></li>\n<li><a href=\"/cast/reference/cast-index\">cast index</a></li>\n</ul>","isPage":true,"text":"\n\ncast balance\ncast storage\ncast proof\ncast nonce\ncast code\ncast codesize\ncast index\n","title":"Account Commands","titles":[null]},"589":{"href":"/cast/reference/block-commands#block-commands","html":"\n<ul>\n<li><a href=\"/cast/reference/cast-find-block\">cast find-block</a></li>\n<li><a href=\"/cast/reference/cast-gas-price\">cast gas-price</a></li>\n<li><a href=\"/cast/reference/cast-block-number\">cast block-number</a></li>\n<li><a href=\"/cast/reference/cast-basefee\">cast basefee</a></li>\n<li><a href=\"/cast/reference/cast-block\">cast block</a></li>\n<li><a href=\"/cast/reference/cast-age\">cast age</a></li>\n</ul>","isPage":true,"text":"\n\ncast find-block\ncast gas-price\ncast block-number\ncast basefee\ncast block\ncast age\n","title":"Block Commands","titles":[null]},"590":{"href":"/cast/reference/cast-help#cast-help","html":"\n","isPage":true,"text":"\n","title":"cast help","titles":[null]},"591":{"href":"/cast/reference/cast-help#name","html":"\n<p>cast-help - Get help for a Cast command</p>\n","isPage":false,"text":"\ncast-help - Get help for a Cast command\n","title":"NAME","titles":[null,"cast help"]},"592":{"href":"/cast/reference/cast-help#synopsis","html":"\n<p><code>cast help</code> [<em>subcommand</em>]</p>\n","isPage":false,"text":"\ncast help [subcommand]\n","title":"SYNOPSIS","titles":[null,"cast help"]},"593":{"href":"/cast/reference/cast-help#description","html":"\n<p>Prints a help message for the given command.</p>\n","isPage":false,"text":"\nPrints a help message for the given command.\n","title":"DESCRIPTION","titles":[null,"cast help"]},"594":{"href":"/cast/reference/cast-help#examples","html":"\n<ol>\n<li>\n<p>Get help for a command:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> help</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> call</span></span></code></pre>\n</li>\n<li>\n<p>Help is also available with the <code>--help</code> flag:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> call</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --help</span></span></code></pre>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nGet help for a command:\ncast help call\n\n\nHelp is also available with the --help flag:\ncast call --help\n\n\n","title":"EXAMPLES","titles":[null,"cast help"]},"595":{"href":"/cast/reference/cast-help#see-also","html":"\n<p><a href=\"/cast/reference/overview\">cast</a></p>","isPage":false,"text":"\ncast","title":"SEE ALSO","titles":[null,"cast help"]},"596":{"href":"/cast/reference/cast-rpc#cast-rpc","html":"\n","isPage":true,"text":"\n","title":"cast rpc","titles":[null]},"597":{"href":"/cast/reference/cast-rpc#name","html":"\n<p>cast-rpc - Perform a raw JSON-RPC request</p>\n","isPage":false,"text":"\ncast-rpc - Perform a raw JSON-RPC request\n","title":"NAME","titles":[null,"cast rpc"]},"598":{"href":"/cast/reference/cast-rpc#synopsis","html":"\n<p><code>cast rpc</code> [<em>options</em>] <em>METHOD</em> [<em>PARAMS...</em>]</p>\n","isPage":false,"text":"\ncast rpc [options] METHOD [PARAMS...]\n","title":"SYNOPSIS","titles":[null,"cast rpc"]},"599":{"href":"/cast/reference/cast-rpc#description","html":"\n<p>Perform a simple JSON-RPC POST request for the given method and with the params</p>\n","isPage":false,"text":"\nPerform a simple JSON-RPC POST request for the given method and with the params\n","title":"DESCRIPTION","titles":[null,"cast rpc"]},"600":{"href":"/cast/reference/cast-rpc#options","html":"\n","isPage":false,"text":"\n","title":"OPTIONS","titles":[null,"cast rpc"]},"601":{"href":"/cast/reference/cast-rpc#query-options","html":"\n<p><code>-r</code> <em>url</em><br/>\n<code>--rpc-url</code> <em>url</em><br/>\n    The URL of the provider</p>\n<p><code>-w</code><br/>\n<code>--raw</code><br/>\n    Pass the &quot;params&quot; as is\n     If --raw is passed the first PARAM will be taken as the value of &quot;params&quot;. If no params are given, stdin will be used. For example:\n     rpc eth_getBlockByNumber &#x27;[&quot;0x123&quot;, false]&#x27; --raw\n     =&gt; <code>{&quot;method&quot;: &quot;eth_getBlockByNumber&quot;, &quot;params&quot;: [&quot;0x123&quot;, false] ... }</code></p>\n","isPage":false,"text":"\n-r url\n--rpc-url url\n    The URL of the provider\n-w\n--raw\n    Pass the &quot;params&quot; as is\n     If --raw is passed the first PARAM will be taken as the value of &quot;params&quot;. If no params are given, stdin will be used. For example:\n     rpc eth_getBlockByNumber &#x27;[&quot;0x123&quot;, false]&#x27; --raw\n     =&gt; {&quot;method&quot;: &quot;eth_getBlockByNumber&quot;, &quot;params&quot;: [&quot;0x123&quot;, false] ... }\n","title":"Query Options","titles":[null,"cast rpc","OPTIONS"]},"602":{"href":"/cast/reference/cast-rpc#examples","html":"\n<ol>\n<li>\n<p>Get latest <code>eth_getBlockByNumber</code> on localhost:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> rpc</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> eth_getBlockByNumber</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;latest&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;false&quot;</span></span></code></pre>\n</li>\n<li>\n<p>Get <code>eth_getTransactionByHash</code> on localhost:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> rpc</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> eth_getTransactionByHash</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x2642e960d3150244e298d52b5b0f024782253e6d0b2c9a01dd4858f7b4665a3f</span></span></code></pre>\n</li>\n<li>\n<p>Get latest <code>eth_getBlockByNumber</code> on etherum mainnet:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> rpc</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --rpc-url</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> https://mainnet.infura.io/v3/</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> eth_getBlockByNumber</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;latest&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;false&quot;</span></span></code></pre>\n</li>\n</ol>","isPage":false,"text":"\n\n\nGet latest eth_getBlockByNumber on localhost:\ncast rpc eth_getBlockByNumber &quot;latest&quot; &quot;false&quot;\n\n\nGet eth_getTransactionByHash on localhost:\ncast rpc eth_getTransactionByHash 0x2642e960d3150244e298d52b5b0f024782253e6d0b2c9a01dd4858f7b4665a3f\n\n\nGet latest eth_getBlockByNumber on etherum mainnet:\ncast rpc --rpc-url https://mainnet.infura.io/v3/ eth_getBlockByNumber &quot;latest&quot; &quot;false&quot;\n\n","title":"EXAMPLES","titles":[null,"cast rpc"]},"603":{"href":"/cast/reference/cast-wallet-new-mnemonic#cast-new-mnemonic","html":"\n","isPage":true,"text":"\n","title":"cast new-mnemonic","titles":[null]},"604":{"href":"/cast/reference/cast-wallet-new-mnemonic#name","html":"\n<p>cast-wallet-new-mnemonic - Creates a new mnemonic with a set number of words.</p>\n","isPage":false,"text":"\ncast-wallet-new-mnemonic - Creates a new mnemonic with a set number of words.\n","title":"NAME","titles":[null,"cast new-mnemonic"]},"605":{"href":"/cast/reference/cast-wallet-new-mnemonic#synopsis","html":"\n<p><code>cast wallet new-mnemonic</code> [<em>options</em>]</p>\n","isPage":false,"text":"\ncast wallet new-mnemonic [options]\n","title":"SYNOPSIS","titles":[null,"cast new-mnemonic"]},"606":{"href":"/cast/reference/cast-wallet-new-mnemonic#description","html":"\n<p>Generates a random BIP39 mnemonic phrase.</p>\n","isPage":false,"text":"\nGenerates a random BIP39 mnemonic phrase.\n","title":"DESCRIPTION","titles":[null,"cast new-mnemonic"]},"607":{"href":"/cast/reference/cast-wallet-new-mnemonic#options","html":"\n","isPage":false,"text":"\n","title":"OPTIONS","titles":[null,"cast new-mnemonic"]},"608":{"href":"/cast/reference/cast-wallet-new-mnemonic#new-mnemonic-options","html":"\n<p><code>-w</code>\n<code>--words</code>\n    The amount of words for the mnemonic. Defaults to 12.</p>\n<p><code>-a</code>\n<code>--accounts</code>\n    The number of accounts to display, which are derived from the mnemonic. Defaults to 1.</p>\n","isPage":false,"text":"\n-w\n--words\n    The amount of words for the mnemonic. Defaults to 12.\n-a\n--accounts\n    The number of accounts to display, which are derived from the mnemonic. Defaults to 1.\n","title":"New Mnemonic Options","titles":[null,"cast new-mnemonic","OPTIONS"]},"609":{"href":"/cast/reference/cast-wallet-new-mnemonic#examples","html":"\n<ol>\n<li>Create a new mnemonic with 24 words.\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">cast</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> wallet</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> new-mnemonic</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --words</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 24</span></span></code></pre>\n</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>Successfully generated a new mnemonic.</span></span>\n<span class=\"line\"><span>Phrase:</span></span>\n<span class=\"line\"><span>decrease where seek crop segment want icon medal sleep social blast provide virus grief pledge soccer stereo trick dry dirt rotate explain into nominee</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>Accounts:</span></span>\n<span class=\"line\"><span>- Account 0:</span></span>\n<span class=\"line\"><span>Address:     0x34644D4eC92ae1832877cE22AD9bA4b00c7397c8</span></span>\n<span class=\"line\"><span>Private key: 0x832a3784d0a130c8a0ce3cc6dfc336a41ca7801a117eac7a3bfaace52e4d239c</span></span></code></pre>\n","isPage":false,"text":"\n\nCreate a new mnemonic with 24 words.\ncast wallet new-mnemonic --words 24\n\n\nSuccessfully generated a new mnemonic.\nPhrase:\ndecrease where seek crop segment want icon medal sleep social blast provide virus grief pledge soccer stereo trick dry dirt rotate explain into nominee\n\nAccounts:\n- Account 0:\nAddress:     0x34644D4eC92ae1832877cE22AD9bA4b00c7397c8\nPrivate key: 0x832a3784d0a130c8a0ce3cc6dfc336a41ca7801a117eac7a3bfaace52e4d239c\n","title":"EXAMPLES","titles":[null,"cast new-mnemonic"]},"610":{"href":"/cast/reference/cast-wallet-new-mnemonic#see-also","html":"\n<p><a href=\"/cast/reference/overview\">cast</a></p>","isPage":false,"text":"\ncast","title":"SEE ALSO","titles":[null,"cast new-mnemonic"]},"611":{"href":"/cast/reference/chain-commands#chain-commands","html":"\n<ul>\n<li><a href=\"/cast/reference/cast-chain-id.mdx\">cast chain-id</a></li>\n<li><a href=\"/cast/reference/cast-chain.mdx\">cast chain</a></li>\n<li><a href=\"/cast/reference/cast-client.mdx\">cast client</a></li>\n</ul>","isPage":true,"text":"\n\ncast chain-id\ncast chain\ncast client\n","title":"Chain Commands","titles":[null]},"612":{"href":"/cast/reference/common-options#common-options","html":"\n<p><code>-h</code><br/>\n<code>--help</code><br/>\n    Prints help information.</p>","isPage":true,"text":"\n-h\n--help\n    Prints help information.","title":"Common Options","titles":[null,null,null]},"613":{"href":"/cast/reference/conversion-commands#conversion-commands","html":"\n<ul>\n<li><a href=\"/cast/reference/cast-format-bytes32-string.mdx\">cast format-bytes32-string</a></li>\n<li><a href=\"/cast/reference/cast-from-bin.mdx\">cast from-bin</a></li>\n<li><a href=\"/cast/reference/cast-from-fixed-point.mdx\">cast from-fixed-point</a></li>\n<li><a href=\"/cast/reference/cast-from-rlp.mdx\">cast from-rlp</a></li>\n<li><a href=\"/cast/reference/cast-from-utf8.mdx\">cast from-utf8</a></li>\n<li><a href=\"/cast/reference/cast-from-wei.mdx\">cast from-wei</a></li>\n<li><a href=\"/cast/reference/cast-parse-bytes32-address.mdx\">cast parse-bytes32-address</a></li>\n<li><a href=\"/cast/reference/cast-parse-bytes32-string.mdx\">cast parse-bytes32-string</a></li>\n<li><a href=\"/cast/reference/cast-to-ascii.mdx\">cast to-ascii</a></li>\n<li><a href=\"/cast/reference/cast-to-base.mdx\">cast to-base</a></li>\n<li><a href=\"/cast/reference/cast-to-bytes32.mdx\">cast to-bytes32</a></li>\n<li><a href=\"/cast/reference/cast-to-dec.mdx\">cast to-dec</a></li>\n<li><a href=\"/cast/reference/cast-to-fixed-point.mdx\">cast to-fixed-point</a></li>\n<li><a href=\"/cast/reference/cast-to-hex.mdx\">cast to-hex</a></li>\n<li><a href=\"/cast/reference/cast-to-hexdata.mdx\">cast to-hexdata</a></li>\n<li><a href=\"/cast/reference/cast-to-int256.mdx\">cast to-int256</a></li>\n<li><a href=\"/cast/reference/cast-to-rlp.mdx\">cast to-rlp</a></li>\n<li><a href=\"/cast/reference/cast-to-uint256.mdx\">cast to-uint256</a></li>\n<li><a href=\"/cast/reference/cast-to-unit.mdx\">cast to-unit</a></li>\n<li><a href=\"/cast/reference/cast-to-wei.mdx\">cast to-wei</a></li>\n<li><a href=\"/cast/reference/cast-shl.mdx\">cast shl</a></li>\n<li><a href=\"/cast/reference/cast-shr.mdx\">cast shr</a></li>\n</ul>","isPage":true,"text":"\n\ncast format-bytes32-string\ncast from-bin\ncast from-fixed-point\ncast from-rlp\ncast from-utf8\ncast from-wei\ncast parse-bytes32-address\ncast parse-bytes32-string\ncast to-ascii\ncast to-base\ncast to-bytes32\ncast to-dec\ncast to-fixed-point\ncast to-hex\ncast to-hexdata\ncast to-int256\ncast to-rlp\ncast to-uint256\ncast to-unit\ncast to-wei\ncast shl\ncast shr\n","title":"Conversion Commands","titles":[null]},"614":{"href":"/cast/reference/ens-commands#ens-commands","html":"\n<ul>\n<li><a href=\"/cast/reference/cast-lookup-address.mdx\">cast lookup-address</a></li>\n<li><a href=\"/cast/reference/cast-resolve-name.mdx\">cast resolve-name</a></li>\n<li><a href=\"/cast/reference/cast-namehash.mdx\">cast namehash</a></li>\n</ul>","isPage":true,"text":"\n\ncast lookup-address\ncast resolve-name\ncast namehash\n","title":"ENS Commands","titles":[null]},"615":{"href":"/cast/reference/etherscan-commands#etherscan-commands","html":"\n<ul>\n<li><a href=\"/cast/reference/cast-etherscan-source.mdx\">cast etherscan-source</a></li>\n</ul>","isPage":true,"text":"\n\ncast etherscan-source\n","title":"Etherscan Commands","titles":[null]},"616":{"href":"/cast/reference/general-commands#general-commands","html":"\n<ul>\n<li><a href=\"/cast/reference/overview\">cast</a></li>\n<li><a href=\"/cast/reference/cast-help.mdx\">cast help</a></li>\n<li><a href=\"/cast/reference/cast-completions.mdx\">cast completions</a></li>\n</ul>","isPage":true,"text":"\n\ncast\ncast help\ncast completions\n","title":"General Commands","titles":[null]},"617":{"href":"/cast/reference/transaction-commands#transaction-commands","html":"\n<ul>\n<li><a href=\"/cast/reference/cast-publish.mdx\">cast publish</a></li>\n<li><a href=\"/cast/reference/cast-receipt.mdx\">cast receipt</a></li>\n<li><a href=\"/cast/reference/cast-send.mdx\">cast send</a></li>\n<li><a href=\"/cast/reference/cast-mktx.mdx\">cast mktx</a></li>\n<li><a href=\"/cast/reference/cast-call.mdx\">cast call</a></li>\n<li><a href=\"/cast/reference/cast-rpc.mdx\">cast rpc</a></li>\n<li><a href=\"/cast/reference/cast-tx.mdx\">cast tx</a></li>\n<li><a href=\"/cast/reference/cast-run.mdx\">cast run</a></li>\n<li><a href=\"/cast/reference/cast-estimate.mdx\">cast estimate</a></li>\n<li><a href=\"/cast/reference/cast-access-list.mdx\">cast access-list</a></li>\n<li><a href=\"/cast/reference/cast-logs.mdx\">cast logs</a></li>\n</ul>","isPage":true,"text":"\n\ncast publish\ncast receipt\ncast send\ncast mktx\ncast call\ncast rpc\ncast tx\ncast run\ncast estimate\ncast access-list\ncast logs\n","title":"Transaction Commands","titles":[null]},"618":{"href":"/cast/reference/utility-commands#utility-commands","html":"\n<ul>\n<li><a href=\"/cast/reference/cast-address-zero.mdx\">cast address-zero</a></li>\n<li><a href=\"/cast/reference/cast-sig.mdx\">cast sig</a></li>\n<li><a href=\"/cast/reference/cast-sig-event.mdx\">cast sig-event</a></li>\n<li><a href=\"/cast/reference/cast-keccak.mdx\">cast keccak</a></li>\n<li><a href=\"/cast/reference/cast-compute-address.mdx\">cast compute-address</a></li>\n<li><a href=\"/cast/reference/cast-create2.mdx\">cast create2</a></li>\n<li><a href=\"/cast/reference/cast-interface.mdx\">cast interface</a></li>\n<li><a href=\"/cast/reference/cast-index.mdx\">cast index</a></li>\n<li><a href=\"/cast/reference/cast-concat-hex.mdx\">cast concat-hex</a></li>\n<li><a href=\"/cast/reference/cast-max-int.mdx\">cast max-int</a></li>\n<li><a href=\"/cast/reference/cast-min-int.mdx\">cast min-int</a></li>\n<li><a href=\"/cast/reference/cast-max-uint.mdx\">cast max-uint</a></li>\n<li><a href=\"/cast/reference/cast-to-check-sum-address.mdx\">cast to-check-sum-address</a></li>\n</ul>","isPage":true,"text":"\n\ncast address-zero\ncast sig\ncast sig-event\ncast keccak\ncast compute-address\ncast create2\ncast interface\ncast index\ncast concat-hex\ncast max-int\ncast min-int\ncast max-uint\ncast to-check-sum-address\n","title":"Utility Commands","titles":[null]},"619":{"href":"/cast/reference/wallet-commands#wallet-commands","html":"\n<ul>\n<li><a href=\"/cast/reference/cast-wallet.mdx\">cast wallet</a></li>\n<li><a href=\"/cast/reference/cast-wallet-address.mdx\">cast wallet address</a></li>\n<li><a href=\"/cast/reference/cast-wallet-new.mdx\">cast wallet new</a></li>\n<li><a href=\"/cast/reference/cast-wallet-sign.mdx\">cast wallet sign</a></li>\n<li><a href=\"/cast/reference/cast-wallet-vanity.mdx\">cast wallet vanity</a></li>\n<li><a href=\"/cast/reference/cast-wallet-verify.mdx\">cast wallet verify</a></li>\n<li><a href=\"/cast/reference/cast-wallet-import.mdx\">cast wallet import</a></li>\n<li><a href=\"/cast/reference/cast-wallet-sign-auth.mdx\">cast wallet sign-auth</a></li>\n</ul>","isPage":true,"text":"\n\ncast wallet\ncast wallet address\ncast wallet new\ncast wallet sign\ncast wallet vanity\ncast wallet verify\ncast wallet import\ncast wallet sign-auth\n","title":"Wallet Commands","titles":[null]},"620":{"href":"/reference/common/base-options#base-options","html":"\n<p><code>--base-in</code> <em>base</em>\n    The base of the input number. Available options:</p>\n<p>    10, d, dec, decimal</p>\n<p>    16, h, hex, hexadecimal</p>\n<p><code>--base-out</code> <em>base</em>\n    The desired base of the output. Available options:</p>\n<p>    2, b, bin, binary</p>\n<p>    8, o, oct, octal</p>\n<p>    10, d, dec, decimal</p>\n<p>    16, h, hex, hexadecimal</p>","isPage":true,"text":"\n--base-in base\n    The base of the input number. Available options:\n    10, d, dec, decimal\n    16, h, hex, hexadecimal\n--base-out base\n    The desired base of the output. Available options:\n    2, b, bin, binary\n    8, o, oct, octal\n    10, d, dec, decimal\n    16, h, hex, hexadecimal","title":"Base Options","titles":[null,null,null]},"621":{"href":"/reference/common/display-options#display-options","html":"\n<p><code>-j</code><br/>\n<code>--json</code><br/>\n     Print the deployment information as JSON.</p>","isPage":true,"text":"\n-j\n--json\n     Print the deployment information as JSON.","title":"Display Options","titles":[null,null,null]},"622":{"href":"/reference/common/etherscan-options#etherscan-options","html":"\n<p><code>--chain</code> <em>chain_name</em><br/>\n    The Etherscan chain.</p>\n<p><code>--etherscan-api-key</code> <em>key</em><br/>\n    Etherscan API key, or the key of an <a href=\"/config/reference/etherscan#etherscan\">Etherscan configuration table</a>.<br/>\n    Environment: <code>ETHERSCAN_API_KEY</code></p>","isPage":true,"text":"\n--chain chain_name\n    The Etherscan chain.\n--etherscan-api-key key\n    Etherscan API key, or the key of an Etherscan configuration table.\n    Environment: ETHERSCAN_API_KEY","title":"Etherscan Options","titles":[null,null,null]},"623":{"href":"/reference/common/multi-wallet-options-hardware#wallet-options---hardware-wallet","html":"\n<p><code>-t</code><br/>\n<code>--trezor</code><br/>\n    Use a Trezor hardware wallet.</p>\n<p><code>-l</code><br/>\n<code>--ledger</code><br/>\n    Use a Ledger hardware wallet.</p>\n<p><code>--hd-paths</code> <em>paths</em><br/>\n    The derivation paths to use with hardware wallets.</p>","isPage":true,"text":"\n-t\n--trezor\n    Use a Trezor hardware wallet.\n-l\n--ledger\n    Use a Ledger hardware wallet.\n--hd-paths paths\n    The derivation paths to use with hardware wallets.","title":"Wallet Options - Hardware Wallet","titles":[null,null,null]},"624":{"href":"/reference/common/multi-wallet-options-keystore#wallet-options---keystore","html":"\n<p><code>--keystores</code> <em>paths</em><br/>\n    Use the keystores in the given folders or files.<br/>\n    Environment: <code>ETH_KEYSTORE</code></p>\n<p><code>--account</code> <em>account-name</em><br/>\n    Use a keystore from the default keystores folder (~/.foundry/keystores) by its filename.<br/>\n    Environment: <code>ETH_KEYSTORE_ACCOUNT</code></p>\n<p><code>--password</code> <em>passwords</em><br/>\n    The keystore passwords. Used with <code>--keystore</code>.</p>","isPage":true,"text":"\n--keystores paths\n    Use the keystores in the given folders or files.\n    Environment: ETH_KEYSTORE\n--account account-name\n    Use a keystore from the default keystores folder (~/.foundry/keystores) by its filename.\n    Environment: ETH_KEYSTORE_ACCOUNT\n--password passwords\n    The keystore passwords. Used with --keystore.","title":"Wallet Options - Keystore","titles":[null,null,null]},"625":{"href":"/reference/common/multi-wallet-options-raw#wallet-options---raw","html":"\n<p><code>-i</code>\n<code>--interactives</code> <em>num</em><br/>\n    Open an interactive prompt to enter your private key. Takes a value for the number of keys to enter.<br/>\n    Default: 0</p>\n<p><code>--mnemonic-indexes</code> <em>indexes</em><br/>\n    Use the private key from the given mnemonic index. Used with --mnemonic-path.<br/>\n    Default: 0</p>\n<p><code>--mnemonic-paths</code> <em>paths</em><br/>\n    Use the mnemonic file at the specified path(s).</p>\n<p><code>--private-key</code> <em>raw_private_key</em><br/>\n    Use the provided private key.</p>\n<p><code>--private-keys</code> <em>raw_private_keys</em><br/>\n    Use the provided private keys.</p>","isPage":true,"text":"\n-i\n--interactives num\n    Open an interactive prompt to enter your private key. Takes a value for the number of keys to enter.\n    Default: 0\n--mnemonic-indexes indexes\n    Use the private key from the given mnemonic index. Used with --mnemonic-path.\n    Default: 0\n--mnemonic-paths paths\n    Use the mnemonic file at the specified path(s).\n--private-key raw_private_key\n    Use the provided private key.\n--private-keys raw_private_keys\n    Use the provided private keys.","title":"Wallet Options - Raw","titles":[null,null,null]},"626":{"href":"/reference/common/multi-wallet-options-remote#wallet-options---remote","html":"\n<p><code>-a</code> <em>addresses</em>\n<code>--froms</code> <em>addresses</em>\n    Sign the transaction with the specified accounts on the RPC.\n    Environment: <code>ETH_FROM</code></p>","isPage":true,"text":"\n-a addresses\n--froms addresses\n    Sign the transaction with the specified accounts on the RPC.\n    Environment: ETH_FROM","title":"Wallet Options - Remote","titles":[null,null,null]},"627":{"href":"/reference/common/wallet-options-hardware#wallet-options---hardware-wallet","html":"\n<p><code>-t</code><br/>\n<code>--trezor</code><br/>\n    Use a Trezor hardware wallet.</p>\n<p><code>-l</code><br/>\n<code>--ledger</code><br/>\n    Use a Ledger hardware wallet.</p>","isPage":true,"text":"\n-t\n--trezor\n    Use a Trezor hardware wallet.\n-l\n--ledger\n    Use a Ledger hardware wallet.","title":"Wallet Options - Hardware Wallet","titles":[null,null,null]},"628":{"href":"/reference/common/wallet-options-keystore#wallet-options---keystore","html":"\n<p><code>--keystore</code> <em>path</em><br/>\n    Use the keystore in the given folder or file.<br/>\n    Environment: <code>ETH_KEYSTORE</code></p>\n<p><code>--account</code> <em>account-name</em><br/>\n    Use a keystore from the default keystores folder (~/.foundry/keystores) by its filename.<br/>\n    Environment: <code>ETH_KEYSTORE_ACCOUNT</code></p>\n<p><code>--interactive</code></p>\n<p><code>--password</code> <em>password</em><br/>\n    The keystore password. Used with <code>--keystore</code>.\n    Environment: <code>ETH_PASSWORD</code></p>","isPage":true,"text":"\n--keystore path\n    Use the keystore in the given folder or file.\n    Environment: ETH_KEYSTORE\n--account account-name\n    Use a keystore from the default keystores folder (~/.foundry/keystores) by its filename.\n    Environment: ETH_KEYSTORE_ACCOUNT\n--interactive\n--password password\n    The keystore password. Used with --keystore.\n    Environment: ETH_PASSWORD","title":"Wallet Options - Keystore","titles":[null,null,null]},"629":{"href":"/reference/common/wallet-options-raw#wallet-options---raw","html":"\n<p><code>-i</code><br/>\n<code>--interactive &lt;NUM&gt;</code><br/>\n     Open an interactive prompt to enter your private key. Takes a value for the number of keys to enter.<br/>\n     Defaults to <code>0</code>.</p>\n<p><code>--mnemonic-derivation-path &lt;PATHS&gt;</code><br/>\n     The wallet derivation path. Works with both <code>--mnemonic-path</code> and hardware wallets.</p>\n<p><code>--mnemonic-indexes &lt;INDEXES&gt;</code><br/>\n     Use the private key from the given mnemonic index. Used with --mnemonic-paths.<br/>\n     Defaults to <code>0</code>.</p>\n<p><code>--mnemonic-passphrase &lt;PASSPHRASE&gt;</code><br/>\n     Use a BIP39 passphrases for the mnemonic.</p>\n<p><code>--mnemonic &lt;PATHS&gt;</code><br/>\n     Use the mnemonic phrases or mnemonic files at the specified paths.</p>\n<p><code>--private-key &lt;RAW_PRIVATE_KEY&gt;</code><br/>\n     Use the provided private key.</p>\n<p><code>--private-keys &lt;RAW_PRIVATE_KEYS&gt;</code><br/>\n     Use the provided private keys.</p>","isPage":true,"text":"\n-i\n--interactive &lt;NUM&gt;\n     Open an interactive prompt to enter your private key. Takes a value for the number of keys to enter.\n     Defaults to 0.\n--mnemonic-derivation-path &lt;PATHS&gt;\n     The wallet derivation path. Works with both --mnemonic-path and hardware wallets.\n--mnemonic-indexes &lt;INDEXES&gt;\n     Use the private key from the given mnemonic index. Used with --mnemonic-paths.\n     Defaults to 0.\n--mnemonic-passphrase &lt;PASSPHRASE&gt;\n     Use a BIP39 passphrases for the mnemonic.\n--mnemonic &lt;PATHS&gt;\n     Use the mnemonic phrases or mnemonic files at the specified paths.\n--private-key &lt;RAW_PRIVATE_KEY&gt;\n     Use the provided private key.\n--private-keys &lt;RAW_PRIVATE_KEYS&gt;\n     Use the provided private keys.","title":"WALLET OPTIONS - RAW:","titles":[null,null,null]},"630":{"href":"/reference/common/wallet-options-remote#wallet-options---remote","html":"\n<p><code>-f</code> <em>address</em><br/>\n<code>--from</code> <em>address</em><br/>\n    Sign the transaction with the specified account on the RPC.<br/>\n    Environment: <code>ETH_FROM</code></p>","isPage":true,"text":"\n-f address\n--from address\n    Sign the transaction with the specified account on the RPC.\n    Environment: ETH_FROM","title":"Wallet Options - Remote","titles":[null,null,null]},"631":{"href":"/reference/cheatcodes/accesses#accesses","html":"\n","isPage":true,"text":"\n","title":"accesses","titles":[null]},"632":{"href":"/reference/cheatcodes/accesses#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> accesses</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  address</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> reads</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> writes</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction accesses(\n  address\n)\nexternal\nreturns (\n  bytes32[] memory reads,\n  bytes32[] memory writes\n);\n","title":"Signature","titles":[null,"accesses"]},"633":{"href":"/reference/cheatcodes/accesses#description","html":"\n<p>Gets all storage slots that have been read (<code>reads</code>) or written to (<code>writes</code>) on an address.</p>\n<p>Note that <a href=\"/reference/cheatcodes/record.mdx\"><code>record</code></a> must be called first.</p>\n<blockquote>\n<p>ℹ️ <strong>Note</strong></p>\n<p>Every write also counts as an additional read.</p>\n</blockquote>\n","isPage":false,"text":"\nGets all storage slots that have been read (reads) or written to (writes) on an address.\nNote that record must be called first.\n\nℹ️ Note\nEvery write also counts as an additional read.\n\n","title":"Description","titles":[null,"accesses"]},"634":{"href":"/reference/cheatcodes/accesses#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// contract NumsContract {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">///     uint256 public num1 = 100; // slot 0</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">///     uint256 public num2 = 200; // slot 1</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">record</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">numsContract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">num2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> reads, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> writes) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">accesses</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(numsContract)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(reads[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1</span></span></code></pre>","isPage":false,"text":"\n/// contract NumsContract {\n///     uint256 public num1 = 100; // slot 0\n///     uint256 public num2 = 200; // slot 1\n/// }\n \nvm.record();\nnumsContract.num2();\n(bytes32[] memory reads, bytes32[] memory writes) = vm.accesses(\n  address(numsContract)\n);\nemit log_uint(uint256(reads[0])); // 1","title":"Examples","titles":[null,"accesses"]},"635":{"href":"/reference/cheatcodes/active-fork#activefork","html":"\n","isPage":true,"text":"\n","title":"activeFork","titles":[null]},"636":{"href":"/reference/cheatcodes/active-fork#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> activeFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction activeFork() external returns (uint256);\n","title":"Signature","titles":[null,"activeFork"]},"637":{"href":"/reference/cheatcodes/active-fork#description","html":"\n<p>Returns the identifier for the currently active fork. Reverts if no fork is currently active.</p>\n","isPage":false,"text":"\nReturns the identifier for the currently active fork. Reverts if no fork is currently active.\n","title":"Description","titles":[null,"activeFork"]},"638":{"href":"/reference/cheatcodes/active-fork#examples","html":"\n<p>Get the currently active fork id:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mainnetForkId </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(MAINNET_RPC_URL);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> optimismForkId </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(OPTIMISM_RPC_URL);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(mainnetForkId </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> optimismForkId);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">selectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(mainnetForkId);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">activeFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), mainnetForkId);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">selectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(optimismForkId);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">activeFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), optimismForkId);</span></span></code></pre>\n","isPage":false,"text":"\nGet the currently active fork id:\nuint256 mainnetForkId = vm.createFork(MAINNET_RPC_URL);\nuint256 optimismForkId = vm.createFork(OPTIMISM_RPC_URL);\n \nassert(mainnetForkId != optimismForkId);\n \nvm.selectFork(mainnetForkId);\nassertEq(vm.activeFork(), mainnetForkId);\n \nvm.selectFork(optimismForkId);\nassertEq(vm.activeFork(), optimismForkId);\n","title":"Examples","titles":[null,"activeFork"]},"639":{"href":"/reference/cheatcodes/active-fork#see-also","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/create-fork.mdx\">createFork</a></li>\n<li><a href=\"/reference/cheatcodes/select-fork.mdx\">selectFork</a></li>\n</ul>","isPage":false,"text":"\n\ncreateFork\nselectFork\n","title":"SEE ALSO","titles":[null,"activeFork"]},"640":{"href":"/reference/cheatcodes/addr#addr","html":"\n","isPage":true,"text":"\n","title":"addr","titles":[null]},"641":{"href":"/reference/cheatcodes/addr#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> addr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> privateKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction addr(uint256 privateKey) external returns (address);\n","title":"Signature","titles":[null,"addr"]},"642":{"href":"/reference/cheatcodes/addr#description","html":"\n<p>Computes the address for a given private key.</p>\n","isPage":false,"text":"\nComputes the address for a given private key.\n","title":"Description","titles":[null,"addr"]},"643":{"href":"/reference/cheatcodes/addr#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> alice </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">addr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 0x7e5f4552091a69125d5dfcb7b8c2659029395bdf</span></span></code></pre>","isPage":false,"text":"\naddress alice = vm.addr(1);\nemit log_address(alice); // 0x7e5f4552091a69125d5dfcb7b8c2659029395bdf","title":"Examples","titles":[null,"addr"]},"644":{"href":"/reference/cheatcodes/allow-cheatcodes#allowcheatcodes","html":"\n","isPage":true,"text":"\n","title":"allowCheatcodes","titles":[null]},"645":{"href":"/reference/cheatcodes/allow-cheatcodes#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> allowCheatcodes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction allowCheatcodes(address) external;\n","title":"Signature","titles":[null,"allowCheatcodes"]},"646":{"href":"/reference/cheatcodes/allow-cheatcodes#description","html":"\n<p>In forking mode, explicitly grant the given address cheatcode access.</p>\n<p>By default, the test contract, and its deployer are allowed to access cheatcodes. In addition to that, cheat code\naccess is granted if the contract was deployed by an address that already has cheatcode access.\nThis will prevent cheatcode access from accounts already deployed on the forked network.</p>\n<blockquote>\n<p>ℹ️ <strong>Note</strong></p>\n<p>This is only useful for more complex test setups in forking mode.</p>\n</blockquote>","isPage":false,"text":"\nIn forking mode, explicitly grant the given address cheatcode access.\nBy default, the test contract, and its deployer are allowed to access cheatcodes. In addition to that, cheat code\naccess is granted if the contract was deployed by an address that already has cheatcode access.\nThis will prevent cheatcode access from accounts already deployed on the forked network.\n\nℹ️ Note\nThis is only useful for more complex test setups in forking mode.\n","title":"Description","titles":[null,"allowCheatcodes"]},"647":{"href":"/reference/cheatcodes/assertions#assertions","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/expect-revert.mdx\"><code>expectRevert</code></a></li>\n<li><a href=\"/reference/cheatcodes/expect-emit.mdx\"><code>expectEmit</code></a></li>\n<li><a href=\"/reference/cheatcodes/expect-call.mdx\"><code>expectCall</code></a></li>\n</ul>","isPage":true,"text":"\n\nexpectRevert\nexpectEmit\nexpectCall\n","title":"Assertions","titles":[null]},"648":{"href":"/reference/cheatcodes/assume-no-revert#assumenorevert","html":"\n","isPage":true,"text":"\n","title":"assumeNoRevert","titles":[null]},"649":{"href":"/reference/cheatcodes/assume-no-revert#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assumeNoRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assumeNoRevert() external;\n","title":"Signature","titles":[null,"assumeNoRevert"]},"650":{"href":"/reference/cheatcodes/assume-no-revert#description","html":"\n<p>The fuzzer will discard the current fuzz inputs and start a new fuzz run if next call reverted.</p>\n<p>The test may fail if you hit the max number of rejects.</p>\n<p>You can configure the rejection thresholds by setting [<code>fuzz.max_test_rejects</code>][max-test-rejects] in your <code>foundry.toml</code> file.</p>\n","isPage":false,"text":"\nThe fuzzer will discard the current fuzz inputs and start a new fuzz run if next call reverted.\nThe test may fail if you hit the max number of rejects.\nYou can configure the rejection thresholds by setting [fuzz.max_test_rejects][max-test-rejects] in your foundry.toml file.\n","title":"Description","titles":[null,"assumeNoRevert"]},"651":{"href":"/reference/cheatcodes/assume-no-revert#examples","html":"\n<p>For a function that requires an amount in certain range:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> doSomething</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> amount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(amount </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1_000</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>reverts are discarded, resulting in test pass (or fail if max number of rejects hit):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testSomething</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> amount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assumeNoRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    target.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">doSomething</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(amount);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // [PASS]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nFor a function that requires an amount in certain range:\nfunction doSomething(uint256 amount) public {\n    require(amount &gt; 100 ether &amp;&amp; amount &lt; 1_000 ether);\n}\nreverts are discarded, resulting in test pass (or fail if max number of rejects hit):\nfunction testSomething(uint256 amount) public {\n    vm.assumeNoRevert();\n    target.doSomething(amount);\n    // [PASS]\n}","title":"Examples","titles":[null,"assumeNoRevert"]},"652":{"href":"/reference/cheatcodes/assume#assume","html":"\n","isPage":true,"text":"\n","title":"assume","titles":[null]},"653":{"href":"/reference/cheatcodes/assume#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assume</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assume(bool) external;\n","title":"Signature","titles":[null,"assume"]},"654":{"href":"/reference/cheatcodes/assume#description","html":"\n<p>If the boolean expression evaluates to false, the fuzzer will discard the current fuzz inputs and start a new fuzz run.</p>\n<p>The <code>assume</code> cheatcode should mainly be used for very narrow checks.\nBroad checks will slow down tests as it will take a while to find valid values, and the test may fail if you hit the max number of rejects.</p>\n<p>You can configure the rejection thresholds by setting <a href=\"../config/reference/testing.md#max_test_rejects\"><code>fuzz.max_test_rejects</code></a> in your <code>foundry.toml</code> file.</p>\n<p>For broad checks, such as ensuring a <code>uint256</code> falls within a certain range, you can bound your input with the modulo operator or Forge Standard&#x27;s <a href=\"../reference/forge-std/bound.md\"><code>bound</code></a> method.</p>\n<p>More information on filtering via <code>assume</code> can be found <a href=\"https://altsysrq.github.io/proptest-book/proptest/tutorial/filtering.html#filtering\">here</a>.</p>\n","isPage":false,"text":"\nIf the boolean expression evaluates to false, the fuzzer will discard the current fuzz inputs and start a new fuzz run.\nThe assume cheatcode should mainly be used for very narrow checks.\nBroad checks will slow down tests as it will take a while to find valid values, and the test may fail if you hit the max number of rejects.\nYou can configure the rejection thresholds by setting fuzz.max_test_rejects in your foundry.toml file.\nFor broad checks, such as ensuring a uint256 falls within a certain range, you can bound your input with the modulo operator or Forge Standard&#x27;s bound method.\nMore information on filtering via assume can be found here.\n","title":"Description","titles":[null,"assume"]},"655":{"href":"/reference/cheatcodes/assume#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Good example of using assume</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testSomething</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assume</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // [PASS]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// In this case assume is not a great fit, so you should bound inputs manually</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testSomethingElse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> bound</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1e36</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1e36</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // [PASS]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n// Good example of using assume\nfunction testSomething(uint256 a) public {\n    vm.assume(a != 1);\n    require(a != 1);\n    // [PASS]\n}\n// In this case assume is not a great fit, so you should bound inputs manually\nfunction testSomethingElse(uint256 a) public {\n    a = bound(a, 100, 1e36);\n    require(a &gt;= 100 &amp;&amp; a &lt;= 1e36);\n    // [PASS]\n}\n","title":"Examples","titles":[null,"assume"]},"656":{"href":"/reference/cheatcodes/assume#see-also","html":"\n<p>Forge Standard Library</p>\n<p><a href=\"/reference/forge-std/bound.mdx\"><code>bound</code></a></p>","isPage":false,"text":"\nForge Standard Library\nbound","title":"SEE ALSO","titles":[null,"assume"]},"657":{"href":"/reference/cheatcodes/breakpoint#breakpoint","html":"\n","isPage":true,"text":"\n","title":"breakpoint","titles":[null]},"658":{"href":"/reference/cheatcodes/breakpoint#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> breakpoint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> breakpoint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction breakpoint(string) external;\nfunction breakpoint(string, bool) external;\n","title":"Signature","titles":[null,"breakpoint"]},"659":{"href":"/reference/cheatcodes/breakpoint#description","html":"\n<p>Places a breakpoint to jump to in the debugger view.</p>\n<p>Calling <code>vm.breakpoint(&#x27;&lt;char&gt;, true)</code> is equivalent to <code>vm.breakpoint(&#x27;&lt;char&gt;)</code>, but calling <code>vm.breakpoint(&#x27;&lt;char&gt;, false)</code> will erase the breakpoint at <code>&#x27;&lt;char&gt;</code>.</p>\n<p>If the char is overwritten, only the last one that was visited in the execution steps is considered.</p>\n","isPage":false,"text":"\nPlaces a breakpoint to jump to in the debugger view.\nCalling vm.breakpoint(&#x27;&lt;char&gt;, true) is equivalent to vm.breakpoint(&#x27;&lt;char&gt;), but calling vm.breakpoint(&#x27;&lt;char&gt;, false) will erase the breakpoint at &#x27;&lt;char&gt;.\nIf the char is overwritten, only the last one that was visited in the execution steps is considered.\n","title":"Description","titles":[null,"breakpoint"]},"660":{"href":"/reference/cheatcodes/breakpoint#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testBreakpoint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">breakpoint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;a&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Opening up the debugger in a test environment and pressing <code>&#x27;a</code> will then place the debugger step at the place where the breakpoint cheatcode was called.</p>\n<p><img src=\"/breakpoint.png\" alt=\"breakpoint a\"/></p>\n","isPage":false,"text":"\nfunction testBreakpoint() public {\n    vm.breakpoint(&quot;a&quot;);\n}\nOpening up the debugger in a test environment and pressing &#x27;a will then place the debugger step at the place where the breakpoint cheatcode was called.\n\n","title":"Examples","titles":[null,"breakpoint"]},"661":{"href":"/reference/cheatcodes/breakpoint#see-also","html":"\n<p><a href=\"/forge/debugger\">debugger</a></p>","isPage":false,"text":"\ndebugger","title":"SEE ALSO","titles":[null,"breakpoint"]},"662":{"href":"/reference/cheatcodes/broadcast#broadcast","html":"\n","isPage":true,"text":"\n","title":"broadcast","titles":[null]},"663":{"href":"/reference/cheatcodes/broadcast#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> broadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> broadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> who</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> broadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> privateKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction broadcast() external;\nfunction broadcast(address who) external;\nfunction broadcast(uint256 privateKey) external;\n","title":"Signature","titles":[null,"broadcast"]},"664":{"href":"/reference/cheatcodes/broadcast#description","html":"\n<p>Using the address that calls the test contract or the address / private key provided\nas the sender, has the next call (at this call depth only and excluding cheatcode calls) create a\ntransaction that can later be signed and sent onchain.</p>\n","isPage":false,"text":"\nUsing the address that calls the test contract or the address / private key provided\nas the sender, has the next call (at this call depth only and excluding cheatcode calls) create a\ntransaction that can later be signed and sent onchain.\n","title":"Description","titles":[null,"broadcast"]},"665":{"href":"/reference/cheatcodes/broadcast#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deploy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">broadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ACCOUNT_A);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Test test </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // this won&#x27;t generate tx to sign</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> test.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // this will</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">broadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ACCOUNT_B);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    test.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // this also will, using a private key from your environment variables</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">broadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">envUint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;PRIVATE_KEY&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    test.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nfunction deploy() public {\n    vm.broadcast(ACCOUNT_A);\n    Test test = new Test();\n \n    // this won&#x27;t generate tx to sign\n    uint256 b = test.t(4);\n \n    // this will\n    vm.broadcast(ACCOUNT_B);\n    test.t(2);\n \n    // this also will, using a private key from your environment variables\n    vm.broadcast(vm.envUint(&quot;PRIVATE_KEY&quot;));\n    test.t(3);\n}\n","title":"Examples","titles":[null,"broadcast"]},"666":{"href":"/reference/cheatcodes/broadcast#see-also","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/start-broadcast.mdx\">startBroadcast</a></li>\n<li><a href=\"/reference/cheatcodes/stop-broadcast.mdx\">stopBroadcast</a></li>\n</ul>","isPage":false,"text":"\n\nstartBroadcast\nstopBroadcast\n","title":"SEE ALSO","titles":[null,"broadcast"]},"667":{"href":"/reference/cheatcodes/chain-id#chainid","html":"\n","isPage":true,"text":"\n","title":"chainId","titles":[null]},"668":{"href":"/reference/cheatcodes/chain-id#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> chainId</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction chainId(uint256) external;\n","title":"Signature","titles":[null,"chainId"]},"669":{"href":"/reference/cheatcodes/chain-id#description","html":"\n<p>Sets <code>block.chainid</code>.</p>\n","isPage":false,"text":"\nSets block.chainid.\n","title":"Description","titles":[null,"chainId"]},"670":{"href":"/reference/cheatcodes/chain-id#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">chainId</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">31337</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.chainid); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 31337</span></span></code></pre>","isPage":false,"text":"\nvm.chainId(31337);\nemit log_uint(block.chainid); // 31337","title":"Examples","titles":[null,"chainId"]},"671":{"href":"/reference/cheatcodes/clear-mocked-calls#clearmockedcalls","html":"\n","isPage":true,"text":"\n","title":"clearMockedCalls","titles":[null]},"672":{"href":"/reference/cheatcodes/clear-mocked-calls#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> clearMockedCalls</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction clearMockedCalls() external;\n","title":"Signature","titles":[null,"clearMockedCalls"]},"673":{"href":"/reference/cheatcodes/clear-mocked-calls#description","html":"\n<p>Clears all <a href=\"/reference/cheatcodes/mock-call.mdx\">mocked calls</a>.</p>","isPage":false,"text":"\nClears all mocked calls.","title":"Description","titles":[null,"clearMockedCalls"]},"674":{"href":"/reference/cheatcodes/coinbase#coinbase","html":"\n","isPage":true,"text":"\n","title":"coinbase","titles":[null]},"675":{"href":"/reference/cheatcodes/coinbase#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> coinbase</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction coinbase(address) external;\n","title":"Signature","titles":[null,"coinbase"]},"676":{"href":"/reference/cheatcodes/coinbase#description","html":"\n<p>Sets <code>block.coinbase</code>.</p>\n","isPage":false,"text":"\nSets block.coinbase.\n","title":"Description","titles":[null,"coinbase"]},"677":{"href":"/reference/cheatcodes/coinbase#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.coinbase); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 0x0000000000000000000000000000000000000000</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">coinbase</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0xEA674fdDe714fd979de3EdF0F56AA9716B898ec8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.coinbase); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 0xea674fdde714fd979de3edf0f56aa9716b898ec8</span></span></code></pre>","isPage":false,"text":"\nemit log_address(block.coinbase); // 0x0000000000000000000000000000000000000000\nvm.coinbase(0xEA674fdDe714fd979de3EdF0F56AA9716B898ec8);\nemit log_address(block.coinbase); // 0xea674fdde714fd979de3edf0f56aa9716b898ec8","title":"Examples","titles":[null,"coinbase"]},"678":{"href":"/reference/cheatcodes/copy-storage#copystorage","html":"\n","isPage":true,"text":"\n","title":"copyStorage","titles":[null]},"679":{"href":"/reference/cheatcodes/copy-storage#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> copyStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> to</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction copyStorage(address from, address to) external;\n","title":"Signature","titles":[null,"copyStorage"]},"680":{"href":"/reference/cheatcodes/copy-storage#description","html":"\n<p>Utility cheatcode to copy storage of <code>from</code> contract to another <code>to</code> contract.\nCheatcode is not allowed if the target address has arbitrary storage set.</p>\n","isPage":false,"text":"\nUtility cheatcode to copy storage of from contract to another to contract.\nCheatcode is not allowed if the target address has arbitrary storage set.\n","title":"Description","titles":[null,"copyStorage"]},"681":{"href":"/reference/cheatcodes/copy-storage#examples","html":"\n<p>Given a contract</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Counter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> count;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setCount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> x</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        count </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> x;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>using <code>copyStorage</code> cheatcode copies the storage set on an instance to another address:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testCopyStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Counter original </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Counter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    original.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setCount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Counter copy </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Counter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    copy.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setCount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Check initial count on copy.</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(copy.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">count</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">copyStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(original), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(copy));</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Value is copied from first contract to copy.</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(copy.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">count</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nGiven a contract\ncontract Counter {\n    uint256 public count;\n \n    function setCount(uint256 x) public {\n        count = x;\n    }\n}\nusing copyStorage cheatcode copies the storage set on an instance to another address:\nfunction testCopyStorage() public {\n    Counter original = new Counter();\n    original.setCount(1000);\n    Counter copy = new Counter();\n    copy.setCount(1);\n    // Check initial count on copy.\n    assertEq(copy.count(), 1);\n \n    vm.copyStorage(address(original), address(copy));\n    // Value is copied from first contract to copy.\n    assertEq(copy.count(), 1000);\n}","title":"Examples","titles":[null,"copyStorage"]},"682":{"href":"/reference/cheatcodes/create-fork#createfork","html":"\n","isPage":true,"text":"\n","title":"createFork","titles":[null]},"683":{"href":"/reference/cheatcodes/create-fork#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> urlOrAlias</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Creates a new fork with the given endpoint and block and returns the identifier of the fork</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> urlOrAlias</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Creates a new fork with the given endpoint and at the block the given transaction was mined in, and replays all transaction mined in the block before the transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> urlOrAlias</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\n// Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork\nfunction createFork(string calldata urlOrAlias) external returns (uint256)\n// Creates a new fork with the given endpoint and block and returns the identifier of the fork\nfunction createFork(string calldata urlOrAlias, uint256 block) external returns (uint256);\n// Creates a new fork with the given endpoint and at the block the given transaction was mined in, and replays all transaction mined in the block before the transaction\nfunction createFork(string calldata urlOrAlias, bytes32 transaction) external returns (uint256);\n","title":"Signature","titles":[null,"createFork"]},"684":{"href":"/reference/cheatcodes/create-fork#description","html":"\n<p>Creates a new fork from the given endpoint and returns the identifier of the fork. If a block number is passed as an argument, the fork will begin on that block, otherwise it will begin on the <em>latest</em> block.</p>\n<p>If a transaction hash is provided, it will roll the fork to the block the transaction was mined in and replays all previously executed transactions.</p>\n","isPage":false,"text":"\nCreates a new fork from the given endpoint and returns the identifier of the fork. If a block number is passed as an argument, the fork will begin on that block, otherwise it will begin on the latest block.\nIf a transaction hash is provided, it will roll the fork to the block the transaction was mined in and replays all previously executed transactions.\n","title":"Description","titles":[null,"createFork"]},"685":{"href":"/reference/cheatcodes/create-fork#examples","html":"\n<p>Create a new mainnet fork with the latest block number:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> forkId </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(MAINNET_RPC_URL);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">selectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(forkId);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.number, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">15_171_037</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// as of time of writing, 2022-07-19 04:55:27 UTC</span></span></code></pre>\n<p>Create a new mainnet fork with a given block number:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> forkId </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(MAINNET_RPC_URL, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1_337_000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">selectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(forkId);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.number, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1_337_000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nCreate a new mainnet fork with the latest block number:\nuint256 forkId = vm.createFork(MAINNET_RPC_URL);\nvm.selectFork(forkId);\n \nassertEq(block.number, 15_171_037); // as of time of writing, 2022-07-19 04:55:27 UTC\nCreate a new mainnet fork with a given block number:\nuint256 forkId = vm.createFork(MAINNET_RPC_URL, 1_337_000);\nvm.selectFork(forkId);\n \nassertEq(block.number, 1_337_000);\n","title":"Examples","titles":[null,"createFork"]},"686":{"href":"/reference/cheatcodes/create-fork#see-also","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/active-fork.mdx\">activeFork</a></li>\n<li><a href=\"/reference/cheatcodes/select-fork.mdx\">selectFork</a></li>\n<li><a href=\"/reference/cheatcodes/create-select-fork.mdx\">createSelectFork</a></li>\n</ul>","isPage":false,"text":"\n\nactiveFork\nselectFork\ncreateSelectFork\n","title":"SEE ALSO","titles":[null,"createFork"]},"687":{"href":"/reference/cheatcodes/create-select-fork#createselectfork","html":"\n","isPage":true,"text":"\n","title":"createSelectFork","titles":[null]},"688":{"href":"/reference/cheatcodes/create-select-fork#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createSelectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> urlOrAlias</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createSelectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> urlOrAlias</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createSelectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> urlOrAlias</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction createSelectFork(string calldata urlOrAlias) external returns (uint256);\nfunction createSelectFork(string calldata urlOrAlias, uint256 block) external returns (uint256);\nfunction createSelectFork(string calldata urlOrAlias, bytes32 transaction) external returns (uint256);\n","title":"Signature","titles":[null,"createSelectFork"]},"689":{"href":"/reference/cheatcodes/create-select-fork#description","html":"\n<p>Creates <em>and</em> selects a new fork from the given endpoint and returns the identifier of the fork. If a block number is passed as an argument, the fork will begin on that block, otherwise it will begin on the <em>latest</em> block.</p>\n<p>If a transaction hash is provided, it will roll the fork to the block the transaction was mined in and replays all previously executed transactions.</p>\n","isPage":false,"text":"\nCreates and selects a new fork from the given endpoint and returns the identifier of the fork. If a block number is passed as an argument, the fork will begin on that block, otherwise it will begin on the latest block.\nIf a transaction hash is provided, it will roll the fork to the block the transaction was mined in and replays all previously executed transactions.\n","title":"Description","titles":[null,"createSelectFork"]},"690":{"href":"/reference/cheatcodes/create-select-fork#examples","html":"\n<p>Create and select a new mainnet fork with the latest block number:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> forkId </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createSelectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(MAINNET_RPC_URL);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.number, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">15_171_037</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// as of time of writing, 2022-07-19 04:55:27 UTC</span></span></code></pre>\n<p>Create and select a new mainnet fork with a given block number:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> forkId </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createSelectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(MAINNET_RPC_URL, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1_337_000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.number, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1_337_000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nCreate and select a new mainnet fork with the latest block number:\nuint256 forkId = vm.createSelectFork(MAINNET_RPC_URL);\n \nassertEq(block.number, 15_171_037); // as of time of writing, 2022-07-19 04:55:27 UTC\nCreate and select a new mainnet fork with a given block number:\nuint256 forkId = vm.createSelectFork(MAINNET_RPC_URL, 1_337_000);\n \nassertEq(block.number, 1_337_000);\n","title":"Examples","titles":[null,"createSelectFork"]},"691":{"href":"/reference/cheatcodes/create-select-fork#see-also","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/create-fork.mdx\">createFork</a></li>\n<li><a href=\"/reference/cheatcodes/select-fork.mdx\">selectFork</a></li>\n</ul>","isPage":false,"text":"\n\ncreateFork\nselectFork\n","title":"SEE ALSO","titles":[null,"createSelectFork"]},"692":{"href":"/reference/cheatcodes/create-wallet#createwallet","html":"\n","isPage":true,"text":"\n","title":"createWallet","titles":[null]},"693":{"href":"/reference/cheatcodes/create-wallet#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Wallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">      address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> addr;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">      uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> publicKeyX;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">      uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> publicKeyY;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">      uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> privateKey;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">Wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">Wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">Wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\n  struct Wallet {\n      address addr;\n      uint256 publicKeyX;\n      uint256 publicKeyY;\n      uint256 privateKey;\n  }\n  function createWallet(string calldata) external returns (Wallet memory);\n  function createWallet(uint256) external returns (Wallet memory);\n  function createWallet(uint256, string calldata) external returns (Wallet memory);\n","title":"Signature","titles":[null,"createWallet"]},"694":{"href":"/reference/cheatcodes/create-wallet#description","html":"\n<p>Creates a new Wallet struct when given a parameter to derive the private key from.</p>\n","isPage":false,"text":"\nCreates a new Wallet struct when given a parameter to derive the private key from.\n","title":"Description","titles":[null,"createWallet"]},"695":{"href":"/reference/cheatcodes/create-wallet#tips","html":"\n<p><a href=\"/reference/cheatcodes/sign.mdx\"><code>sign()</code></a> and <a href=\"/reference/cheatcodes/get-nonce.mdx\"><code>getNonce()</code></a> both have supported function overloads for the Wallet struct as well.</p>\n","isPage":false,"text":"\nsign() and getNonce() both have supported function overloads for the Wallet struct as well.\n","title":"Tips","titles":[null,"createWallet"]},"696":{"href":"/reference/cheatcodes/create-wallet#examples","html":"\n","isPage":false,"text":"\n","title":"Examples","titles":[null,"createWallet"]},"697":{"href":"/reference/cheatcodes/create-wallet#uint256","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Vm.Wallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(wallet.privateKey); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// uint256(keccak256(bytes(&quot;1&quot;)))</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(wallet.addr); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// vm.addr(wallet.privateKey)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint160</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">            uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">                keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(wallet.publicKeyX, wallet.publicKeyY))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// wallet.addr</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getLabel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(wallet.addr)); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// &quot;&quot;</span></span></code></pre>\n","isPage":false,"text":"\nVm.Wallet memory wallet = vm.createWallet(uint256(keccak256(bytes(&quot;1&quot;))));\n \nemit log_uint(wallet.privateKey); // uint256(keccak256(bytes(&quot;1&quot;)))\n \nemit log_address(wallet.addr); // vm.addr(wallet.privateKey)\n \nemit log_address(\n    address(\n        uint160(\n            uint256(\n                keccak256(abi.encode(wallet.publicKeyX, wallet.publicKeyY))\n            )\n        )\n    )\n); // wallet.addr\n \nemit log_string(vm.getLabel(wallet.addr)); // &quot;&quot;\n","title":"uint256","titles":[null,"createWallet","Examples"]},"698":{"href":"/reference/cheatcodes/create-wallet#string","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Vm.Wallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;bob&#x27;s wallet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(wallet.privateKey); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// uint256(keccak256(bytes(&quot;bob&#x27;s wallet&quot;)))</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(wallet.addr); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// vm.addr(wallet.privateKey)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint160</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">            uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">                keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(wallet.publicKeyX, wallet.publicKeyY))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// wallet.addr</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getLabel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(wallet.addr)); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// &quot;bob&#x27;s wallet&quot;</span></span></code></pre>\n","isPage":false,"text":"\nVm.Wallet memory wallet = vm.createWallet(&quot;bob&#x27;s wallet&quot;);\n \nemit log_uint(wallet.privateKey); // uint256(keccak256(bytes(&quot;bob&#x27;s wallet&quot;)))\n \nemit log_address(wallet.addr); // vm.addr(wallet.privateKey)\n \nemit log_address(\n    address(\n        uint160(\n            uint256(\n                keccak256(abi.encode(wallet.publicKeyX, wallet.publicKeyY))\n            )\n        )\n    )\n); // wallet.addr\n \nemit log_string(vm.getLabel(wallet.addr)); // &quot;bob&#x27;s wallet&quot;\n","title":"string","titles":[null,"createWallet","Examples"]},"699":{"href":"/reference/cheatcodes/create-wallet#uint256-and-string","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Vm.Wallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;bob&#x27;s wallet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(wallet.privateKey); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// uint256(keccak256(bytes(&quot;1&quot;)))</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(wallet.addr); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// vm.addr(wallet.privateKey)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint160</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">            uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">                keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(wallet.publicKeyX, wallet.publicKeyY))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// wallet.addr</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getLabel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(wallet.addr)); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// &quot;bob&#x27;s wallet&quot;</span></span></code></pre>","isPage":false,"text":"\nVm.Wallet memory wallet = vm.createWallet(uint256(keccak256(bytes(&quot;1&quot;))), &quot;bob&#x27;s wallet&quot;);\n \nemit log_uint(wallet.privateKey); // uint256(keccak256(bytes(&quot;1&quot;)))\n \nemit log_address(wallet.addr); // vm.addr(wallet.privateKey)\n \nemit log_address(\n    address(\n        uint160(\n            uint256(\n                keccak256(abi.encode(wallet.publicKeyX, wallet.publicKeyY))\n            )\n        )\n    )\n); // wallet.addr\n \nemit log_string(vm.getLabel(wallet.addr)); // &quot;bob&#x27;s wallet&quot;","title":"uint256 and string","titles":[null,"createWallet","Examples"]},"700":{"href":"/reference/cheatcodes/deal#deal","html":"\n","isPage":true,"text":"\n","title":"deal","titles":[null]},"701":{"href":"/reference/cheatcodes/deal#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> who</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> newBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction deal(address who, uint256 newBalance) external;\n","title":"Signature","titles":[null,"deal"]},"702":{"href":"/reference/cheatcodes/deal#description","html":"\n<p>Sets the balance of an address <code>who</code> to <code>newBalance</code>.</p>\n<p>If the alternative signature of <code>deal</code> is used (defined in <code>StdCheats.sol</code>), then we can additionally specify ERC20 token address, as well as an option to update <code>totalSupply</code>.</p>\n","isPage":false,"text":"\nSets the balance of an address who to newBalance.\nIf the alternative signature of deal is used (defined in StdCheats.sol), then we can additionally specify ERC20 token address, as well as an option to update totalSupply.\n","title":"Description","titles":[null,"deal"]},"703":{"href":"/reference/cheatcodes/deal#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> alice </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> makeAddr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;alice&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log_uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice.balance); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1000000000000000000</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> alice </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> makeAddr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;alice&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(DAI), alice, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// import StdUtils.sol first</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log_uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(DAI).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice)); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1000000000000000000</span></span></code></pre>\n","isPage":false,"text":"\naddress alice = makeAddr(&quot;alice&quot;);\nemit log_address(alice);\nvm.deal(alice, 1 ether);\nlog_uint256(alice.balance); // 1000000000000000000\naddress alice = makeAddr(&quot;alice&quot;);\nemit log_address(alice);\ndeal(address(DAI), alice, 1 ether); // import StdUtils.sol first\nlog_uint256(address(DAI).balanceOf(alice)); // 1000000000000000000\n","title":"Examples","titles":[null,"deal"]},"704":{"href":"/reference/cheatcodes/deal#see-also","html":"\n<p>Forge Standard Library</p>\n<p><a href=\"/reference/forge-std/deal.mdx\"><code>deal</code></a>, <a href=\"/reference/forge-std/hoax.mdx\"><code>hoax</code></a>, <a href=\"/reference/forge-std/startHoax.mdx\"><code>startHoax</code></a></p>","isPage":false,"text":"\nForge Standard Library\ndeal, hoax, startHoax","title":"SEE ALSO","titles":[null,"deal"]},"705":{"href":"/reference/cheatcodes/derive-key#derivekey","html":"\n","isPage":true,"text":"\n","title":"deriveKey","titles":[null]},"706":{"href":"/reference/cheatcodes/derive-key#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deriveKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> mnemonic</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  uint32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> index</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deriveKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> mnemonic</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> path</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  uint32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> index</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction deriveKey(\n  string calldata mnemonic,\n  uint32 index\n) external returns (uint256);\nfunction deriveKey(\n  string calldata mnemonic,\n  string calldata path,\n  uint32 index\n) external returns (uint256);\n","title":"Signature","titles":[null,"deriveKey"]},"707":{"href":"/reference/cheatcodes/derive-key#description","html":"\n<p>Derive a private key from a given mnemonic or mnemonic file path.</p>\n<p>The first signature derives at the derivation path <code>m/44&#x27;/60&#x27;/0&#x27;/0/{index}</code>.\nThe second signature allows you to specify the derivation path as the second parameter.</p>\n","isPage":false,"text":"\nDerive a private key from a given mnemonic or mnemonic file path.\nThe first signature derives at the derivation path m/44&#x27;/60&#x27;/0&#x27;/0/{index}.\nThe second signature allows you to specify the derivation path as the second parameter.\n","title":"Description","titles":[null,"deriveKey"]},"708":{"href":"/reference/cheatcodes/derive-key#examples","html":"\n<p>Derive the private key from the test mnemonic at path <code>m/44&#x27;/60&#x27;/0&#x27;/0/0</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mnemonic </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;test test test test test test test test test test test junk&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> privateKey </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deriveKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(mnemonic, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>Derive the private key from the test mnemonic at path <code>m/44&#x27;/60&#x27;/0&#x27;/1/0</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mnemonic </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;test test test test test test test test test test test junk&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> privateKey </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deriveKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(mnemonic, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;m/44&#x27;/60&#x27;/0&#x27;/1/&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nDerive the private key from the test mnemonic at path m/44&#x27;/60&#x27;/0&#x27;/0/0:\nstring memory mnemonic = &quot;test test test test test test test test test test test junk&quot;;\nuint256 privateKey = vm.deriveKey(mnemonic, 0);\nDerive the private key from the test mnemonic at path m/44&#x27;/60&#x27;/0&#x27;/1/0:\nstring memory mnemonic = &quot;test test test test test test test test test test test junk&quot;;\nuint256 privateKey = vm.deriveKey(mnemonic, &quot;m/44&#x27;/60&#x27;/0&#x27;/1/&quot;, 0);\n","title":"Examples","titles":[null,"deriveKey"]},"709":{"href":"/reference/cheatcodes/derive-key#see-also","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/remember-key.mdx\">rememberKey</a></li>\n</ul>\n<p>Forge Standard Library:</p>\n<ul>\n<li><a href=\"/reference/forge-std/derive-remember-key.mdx\">deriveRememberKey</a></li>\n</ul>","isPage":false,"text":"\n\nrememberKey\n\nForge Standard Library:\n\nderiveRememberKey\n","title":"SEE ALSO","titles":[null,"deriveKey"]},"710":{"href":"/reference/cheatcodes/difficulty#difficulty","html":"\n","isPage":true,"text":"\n","title":"difficulty","titles":[null]},"711":{"href":"/reference/cheatcodes/difficulty#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> difficulty</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction difficulty(uint256) external;\n","title":"Signature","titles":[null,"difficulty"]},"712":{"href":"/reference/cheatcodes/difficulty#description","html":"\n<p>Sets <code>block.difficulty</code>.</p>\n<p>If used with a post-merge EVM version (Paris and onwards), it will revert. In that case, use <a href=\"./prevrandao.md\"><code>vm.prevrandao</code></a> instead.</p>\n","isPage":false,"text":"\nSets block.difficulty.\nIf used with a post-merge EVM version (Paris and onwards), it will revert. In that case, use vm.prevrandao instead.\n","title":"Description","titles":[null,"difficulty"]},"713":{"href":"/reference/cheatcodes/difficulty#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">difficulty</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">25</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.difficulty); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 25</span></span></code></pre>","isPage":false,"text":"\nvm.difficulty(25);\nemit log_uint(block.difficulty); // 25","title":"Examples","titles":[null,"difficulty"]},"714":{"href":"/reference/cheatcodes/env-address#envaddress","html":"\n","isPage":true,"text":"\n","title":"envAddress","titles":[null]},"715":{"href":"/reference/cheatcodes/env-address#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> delimiter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> values</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction envAddress(string calldata key) external returns (address value);\nfunction envAddress(string calldata key, string calldata delimiter) external returns (address[] memory values);\n","title":"Signature","titles":[null,"envAddress"]},"716":{"href":"/reference/cheatcodes/env-address#description","html":"\n<p>Read an environment variable as <code>address</code> or <code>address[]</code>.</p>\n","isPage":false,"text":"\nRead an environment variable as address or address[].\n","title":"Description","titles":[null,"envAddress"]},"717":{"href":"/reference/cheatcodes/env-address#tips","html":"\n<ul>\n<li>For arrays, you can specify the delimiter used to separate the values with the <code>delimiter</code> parameter.</li>\n</ul>\n","isPage":false,"text":"\n\nFor arrays, you can specify the delimiter used to separate the values with the delimiter parameter.\n\n","title":"Tips","titles":[null,"envAddress"]},"718":{"href":"/reference/cheatcodes/env-address#examples","html":"\n","isPage":false,"text":"\n","title":"Examples","titles":[null,"envAddress"]},"719":{"href":"/reference/cheatcodes/env-address#single-value","html":"\n<p>With environment variable <code>ADDRESS_VALUE=0x7109709ECfa91a80626fF3989D68f67F5b1DD12D</code>,</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;ADDRESS_VALUE&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> output </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">envAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(output </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected);</span></span></code></pre>\n","isPage":false,"text":"\nWith environment variable ADDRESS_VALUE=0x7109709ECfa91a80626fF3989D68f67F5b1DD12D,\nstring memory key = &quot;ADDRESS_VALUE&quot;;\naddress expected = 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D;\naddress output = vm.envAddress(key);\nassert(output == expected);\n","title":"Single Value","titles":[null,"envAddress","Examples"]},"720":{"href":"/reference/cheatcodes/env-address#array","html":"\n<p>With environment variable <code>ADDRESS_VALUES=0x7109709ECfa91a80626fF3989D68f67F5b1DD12D,0x0000000000000000000000000000000000000000</code>,</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;ADDRESS_VALUES&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> delimiter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;,&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    0x7109709ECfa91a80626fF3989D68f67F5b1DD12D</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    0x0000000000000000000000000000000000000000</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">];</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> output </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">envAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key, delimiter);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((output))) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((expected))));</span></span></code></pre>","isPage":false,"text":"\nWith environment variable ADDRESS_VALUES=0x7109709ECfa91a80626fF3989D68f67F5b1DD12D,0x0000000000000000000000000000000000000000,\nstring memory key = &quot;ADDRESS_VALUES&quot;;\nstring memory delimiter = &quot;,&quot;;\naddress[2] memory expected = [\n    0x7109709ECfa91a80626fF3989D68f67F5b1DD12D,\n    0x0000000000000000000000000000000000000000\n];\naddress[] memory output = vm.envAddress(key, delimiter);\nassert(keccak256(abi.encodePacked((output))) == keccak256(abi.encodePacked((expected))));","title":"Array","titles":[null,"envAddress","Examples"]},"721":{"href":"/reference/cheatcodes/env-bool#envbool","html":"\n","isPage":true,"text":"\n","title":"envBool","titles":[null]},"722":{"href":"/reference/cheatcodes/env-bool#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envBool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envBool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> delimiter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> values</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction envBool(string calldata key) external returns (bool value);\nfunction envBool(string calldata key, string calldata delimiter) external returns (bool[] memory values);\n","title":"Signature","titles":[null,"envBool"]},"723":{"href":"/reference/cheatcodes/env-bool#description","html":"\n<p>Read an environment variable as <code>bool</code> or <code>bool[]</code>.</p>\n","isPage":false,"text":"\nRead an environment variable as bool or bool[].\n","title":"Description","titles":[null,"envBool"]},"724":{"href":"/reference/cheatcodes/env-bool#tips","html":"\n<ul>\n<li>For <code>true</code>, use either &quot;true&quot; or &quot;True&quot; for the environment variable value.</li>\n<li>For <code>false</code>, use either &quot;false&quot; or &quot;False&quot; for the environment variable value.</li>\n<li>For arrays, you can specify the delimiter used to separate the values with the <code>delimiter</code> parameter.</li>\n</ul>\n","isPage":false,"text":"\n\nFor true, use either &quot;true&quot; or &quot;True&quot; for the environment variable value.\nFor false, use either &quot;false&quot; or &quot;False&quot; for the environment variable value.\nFor arrays, you can specify the delimiter used to separate the values with the delimiter parameter.\n\n","title":"Tips","titles":[null,"envBool"]},"725":{"href":"/reference/cheatcodes/env-bool#examples","html":"\n","isPage":false,"text":"\n","title":"Examples","titles":[null,"envBool"]},"726":{"href":"/reference/cheatcodes/env-bool#single-value","html":"\n<p>With environment variable <code>BOOL_VALUE=true</code>,</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;BOOL_VALUE&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> output </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">envBool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(output </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected);</span></span></code></pre>\n","isPage":false,"text":"\nWith environment variable BOOL_VALUE=true,\nstring memory key = &quot;BOOL_VALUE&quot;;\nbool expected = true;\nbool output = cheats.envBool(key);\nassert(output == expected);\n","title":"Single Value","titles":[null,"envBool","Examples"]},"727":{"href":"/reference/cheatcodes/env-bool#array","html":"\n<p>With environment variable <code>BOOL_VALUES=true,false,True,False</code>,</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;BOOL_VALUES&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> delimiter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;,&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">];</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> output </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">envBool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key, delimiter);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((output))) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((expected))));</span></span></code></pre>","isPage":false,"text":"\nWith environment variable BOOL_VALUES=true,false,True,False,\nstring memory key = &quot;BOOL_VALUES&quot;;\nstring memory delimiter = &quot;,&quot;;\nbool[4] memory expected = [true, false, true, false];\nbool[] memory output = cheats.envBool(key, delimiter);\nassert(keccak256(abi.encodePacked((output))) == keccak256(abi.encodePacked((expected))));","title":"Array","titles":[null,"envBool","Examples"]},"728":{"href":"/reference/cheatcodes/env-bytes#envbytes","html":"\n","isPage":true,"text":"\n","title":"envBytes","titles":[null]},"729":{"href":"/reference/cheatcodes/env-bytes#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> delimiter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> values</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction envBytes(bytes calldata key) external returns (bytes value);\nfunction envBytes(bytes calldata key, bytes calldata delimiter) external returns (bytes[] memory values);\n","title":"Signature","titles":[null,"envBytes"]},"730":{"href":"/reference/cheatcodes/env-bytes#description","html":"\n<p>Read an environment variable as <code>bytes</code> or <code>bytes[]</code>.</p>\n","isPage":false,"text":"\nRead an environment variable as bytes or bytes[].\n","title":"Description","titles":[null,"envBytes"]},"731":{"href":"/reference/cheatcodes/env-bytes#tips","html":"\n<ul>\n<li>For arrays, you can specify the delimiter used to separate the values with the <code>delimiter</code> parameter.</li>\n</ul>\n","isPage":false,"text":"\n\nFor arrays, you can specify the delimiter used to separate the values with the delimiter parameter.\n\n","title":"Tips","titles":[null,"envBytes"]},"732":{"href":"/reference/cheatcodes/env-bytes#examples","html":"\n","isPage":false,"text":"\n","title":"Examples","titles":[null,"envBytes"]},"733":{"href":"/reference/cheatcodes/env-bytes#single-value","html":"\n<p>With environment variable <code>BYTES_VALUE=0x7109709ECfa91a80626fF3989D68f67F5b1DD12D</code>;</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;BYTES_VALUE&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> hex</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;7109709ECfa91a80626fF3989D68f67F5b1DD12D&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> output </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">envBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(output, expected);</span></span></code></pre>\n","isPage":false,"text":"\nWith environment variable BYTES_VALUE=0x7109709ECfa91a80626fF3989D68f67F5b1DD12D;\nbytes memory key = &quot;BYTES_VALUE&quot;;\nbytes expected = hex&quot;7109709ECfa91a80626fF3989D68f67F5b1DD12D&quot;;\nbytes output = cheats.envBytes(key);\nassertEq(output, expected);\n","title":"Single Value","titles":[null,"envBytes","Examples"]},"734":{"href":"/reference/cheatcodes/env-bytes#array","html":"\n<p>With environment variable <code>BYTES_VALUE=0x7109709ECfa91a80626fF3989D68f67F5b1DD12D,0x00</code>;</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;BYTES_VALUES&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> delimiter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;,&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[](</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">expected[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> hex</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;7109709ECfa91a80626fF3989D68f67F5b1DD12D&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">expected[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> hex</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;00&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> output </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">envBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key, delimiter);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected.length; </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">i) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((output[i]))) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((expected[i]))));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nWith environment variable BYTES_VALUE=0x7109709ECfa91a80626fF3989D68f67F5b1DD12D,0x00;\nbytes memory key = &quot;BYTES_VALUES&quot;;\nbytes memory delimiter = &quot;,&quot;;\nbytes[] memory expected = new bytes[](2);\nexpected[0] = hex&quot;7109709ECfa91a80626fF3989D68f67F5b1DD12D&quot;;\nexpected[1] = hex&quot;00&quot;;\nbytes[] memory output = cheats.envBytes(key, delimiter);\nfor (uint i = 0; i &lt; expected.length; ++i) {\n    assert(keccak256(abi.encodePacked((output[i]))) == keccak256(abi.encodePacked((expected[i]))));\n}","title":"Array","titles":[null,"envBytes","Examples"]},"735":{"href":"/reference/cheatcodes/env-bytes32#envbytes32","html":"\n","isPage":true,"text":"\n","title":"envBytes32","titles":[null]},"736":{"href":"/reference/cheatcodes/env-bytes32#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envBytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envBytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> delimiter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> values</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction envBytes32(string calldata key) external returns (bytes32 value);\nfunction envBytes32(string calldata key, string calldata delimiter) external returns (bytes32[] memory values);\n","title":"Signature","titles":[null,"envBytes32"]},"737":{"href":"/reference/cheatcodes/env-bytes32#description","html":"\n<p>Read an environment variable as <code>bytes32</code> or <code>address[]</code>.</p>\n","isPage":false,"text":"\nRead an environment variable as bytes32 or address[].\n","title":"Description","titles":[null,"envBytes32"]},"738":{"href":"/reference/cheatcodes/env-bytes32#tips","html":"\n<ul>\n<li>For arrays, you can specify the delimiter used to separate the values with the <code>delimiter</code> parameter.</li>\n</ul>\n","isPage":false,"text":"\n\nFor arrays, you can specify the delimiter used to separate the values with the delimiter parameter.\n\n","title":"Tips","titles":[null,"envBytes32"]},"739":{"href":"/reference/cheatcodes/env-bytes32#examples","html":"\n","isPage":false,"text":"\n","title":"Examples","titles":[null,"envBytes32"]},"740":{"href":"/reference/cheatcodes/env-bytes32#single-value","html":"\n<p>With environment variable <code>BYTES32_VALUE=0x00</code>,</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;BYTES32_VALUE&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0x0000000000000000000000000000000000000000000000000000000000000000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> output </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">envBytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(output </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected);</span></span></code></pre>\n","isPage":false,"text":"\nWith environment variable BYTES32_VALUE=0x00,\nstring memory key = &quot;BYTES32_VALUE&quot;;\nbytes32 expected = bytes32(0x0000000000000000000000000000000000000000000000000000000000000000);\nbytes32 output = vm.envBytes32(key);\nassert(output == expected);\n","title":"Single Value","titles":[null,"envBytes32","Examples"]},"741":{"href":"/reference/cheatcodes/env-bytes32#array","html":"\n<p>With environment variable <code>BYTES32_VALUES=0x7109709ECfa91a80626fF3989D68f67F5b1DD12D,0x00</code>,</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;BYTES32_VALUES&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> delimiter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;,&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0x7109709ECfa91a80626fF3989D68f67F5b1DD12D000000000000000000000000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0x0000000000000000000000000000000000000000000000000000000000000000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">];</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> output </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">envBytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key, delimiter);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((output))) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((expected))));</span></span></code></pre>","isPage":false,"text":"\nWith environment variable BYTES32_VALUES=0x7109709ECfa91a80626fF3989D68f67F5b1DD12D,0x00,\nstring memory key = &quot;BYTES32_VALUES&quot;;\nstring memory delimiter = &quot;,&quot;;\nbytes32[2] memory expected = [\n    bytes32(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D000000000000000000000000),\n    bytes32(0x0000000000000000000000000000000000000000000000000000000000000000)\n];\nbytes32[] memory output = vm.envBytes32(key, delimiter);\nassert(keccak256(abi.encodePacked((output))) == keccak256(abi.encodePacked((expected))));","title":"Array","titles":[null,"envBytes32","Examples"]},"742":{"href":"/reference/cheatcodes/env-int#envint","html":"\n","isPage":true,"text":"\n","title":"envInt","titles":[null]},"743":{"href":"/reference/cheatcodes/env-int#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> delimiter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> values</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction envInt(string calldata key) external returns (int256 value);\nfunction envInt(string calldata key, string calldata delimiter) external returns (int256[] memory values);\n","title":"Signature","titles":[null,"envInt"]},"744":{"href":"/reference/cheatcodes/env-int#description","html":"\n<p>Read an environment variable as <code>int256</code> or <code>int256[]</code>.</p>\n","isPage":false,"text":"\nRead an environment variable as int256 or int256[].\n","title":"Description","titles":[null,"envInt"]},"745":{"href":"/reference/cheatcodes/env-int#tips","html":"\n<ul>\n<li>If the value starts with <code>0x</code>, <code>-0x</code> or <code>+0x</code>, it will be interpreted as a hex value, otherwise,\nit will be treated as a decimal number.</li>\n<li>For arrays, you can specify the delimiter used to separate the values with the <code>delimiter</code> parameter.</li>\n</ul>\n","isPage":false,"text":"\n\nIf the value starts with 0x, -0x or +0x, it will be interpreted as a hex value, otherwise,\nit will be treated as a decimal number.\nFor arrays, you can specify the delimiter used to separate the values with the delimiter parameter.\n\n","title":"Tips","titles":[null,"envInt"]},"746":{"href":"/reference/cheatcodes/env-int#examples","html":"\n","isPage":false,"text":"\n","title":"Examples","titles":[null,"envInt"]},"747":{"href":"/reference/cheatcodes/env-int#single-value","html":"\n<p>With environment variable <code>INT_VALUE=-57896044618658097711785492504343953926634992332820282019728792003956564819968</code>,</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;INT_VALUE&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).min;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> output </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">envInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(output </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected);</span></span></code></pre>\n","isPage":false,"text":"\nWith environment variable INT_VALUE=-57896044618658097711785492504343953926634992332820282019728792003956564819968,\nstring memory key = &quot;INT_VALUE&quot;;\nint256 expected = type(int256).min;\nint256 output = cheats.envInt(key);\nassert(output == expected);\n","title":"Single Value","titles":[null,"envInt","Examples"]},"748":{"href":"/reference/cheatcodes/env-int#array","html":"\n<p>With environment variable <code>INT_VALUES=-0x8000000000000000000000000000000000000000000000000000000000000000,+0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</code>,</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;INT_VALUES&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> delimiter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;,&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).min, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).max];</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> output </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">envInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key, delimiter);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((output))) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((expected))));</span></span></code></pre>","isPage":false,"text":"\nWith environment variable INT_VALUES=-0x8000000000000000000000000000000000000000000000000000000000000000,+0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,\nstring memory key = &quot;INT_VALUES&quot;;\nstring memory delimiter = &quot;,&quot;;\nint256[2] memory expected = [type(int256).min, type(int256).max];\nint256[] memory output = cheats.envInt(key, delimiter);\nassert(keccak256(abi.encodePacked((output))) == keccak256(abi.encodePacked((expected))));","title":"Array","titles":[null,"envInt","Examples"]},"749":{"href":"/reference/cheatcodes/env-or#envor","html":"\n","isPage":true,"text":"\n","title":"envOr","titles":[null]},"750":{"href":"/reference/cheatcodes/env-or#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> defaultValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> defaultValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> defaultValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> defaultValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> defaultValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> defaultValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> defaultValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> delimiter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> defaultValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> delimiter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> defaultValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> delimiter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> defaultValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> delimiter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> defaultValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> delimiter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> defaultValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> delimiter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> defaultValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> delimiter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> defaultValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction envOr(string calldata key, bool defaultValue) external returns (bool value);\nfunction envOr(string calldata key, uint256 defaultValue) external returns (uint256 value);\nfunction envOr(string calldata key, int256 defaultValue) external returns (int256 value);\nfunction envOr(string calldata key, address defaultValue) external returns (address value);\nfunction envOr(string calldata key, bytes32 defaultValue) external returns (bytes32 value);\nfunction envOr(string calldata key, string calldata defaultValue) external returns (string memory value);\nfunction envOr(string calldata key, bytes calldata defaultValue) external returns (bytes memory value);\nfunction envOr(string calldata key, string calldata delimiter, bool[] calldata defaultValue) external returns (bool[] memory value);\nfunction envOr(string calldata key, string calldata delimiter, uint256[] calldata defaultValue) external returns (uint256[] memory value);\nfunction envOr(string calldata key, string calldata delimiter, int256[] calldata defaultValue) external returns (int256[] memory value);\nfunction envOr(string calldata key, string calldata delimiter, address[] calldata defaultValue) external returns (address[] memory value);\nfunction envOr(string calldata key, string calldata delimiter, bytes32[] calldata defaultValue) external returns (bytes32[] memory value);\nfunction envOr(string calldata key, string calldata delimiter, string[] calldata defaultValue) external returns (string[] memory value);\nfunction envOr(string calldata key, string calldata delimiter, bytes[] calldata defaultValue) external returns (bytes[] memory value);\n","title":"Signature","titles":[null,"envOr"]},"751":{"href":"/reference/cheatcodes/env-or#description","html":"\n<p>A non-failing way to read an environment variable of any type: if the requested environment key does not exist, <code>envOr()</code> will return a default value instead of reverting (works with arrays too).</p>\n<p>The returned type is determined by the type of <code>defaultValue</code> parameter passed.</p>\n","isPage":false,"text":"\nA non-failing way to read an environment variable of any type: if the requested environment key does not exist, envOr() will return a default value instead of reverting (works with arrays too).\nThe returned type is determined by the type of defaultValue parameter passed.\n","title":"Description","titles":[null,"envOr"]},"752":{"href":"/reference/cheatcodes/env-or#tips","html":"\n<ul>\n<li>Use <code>envOr(key, defaultValue)</code> to read a single value</li>\n<li>Use <code>envOr(key, delimiter, defaultValue[])</code> to read an array with delimiter</li>\n<li>The parsing of the environment variable will be done according to the type of <code>defaultValue</code> (e.g. if the default value type is <code>uint</code> - the environment variable will be also parsed as <code>uint</code>)</li>\n<li>Use explicit casting for literals to specify type of default variable: <code>uint(69)</code> will return an <code>uint</code> but <code>int(69)</code> will return an <code>int</code></li>\n<li>Same with: <code>string(&quot;&quot;)</code> and <code>bytes(&quot;&quot;)</code> - these will return <code>string</code> and <code>bytes</code> accordingly</li>\n<li>Use dynamic arrays (<code>bool[]</code>) instead of fixed-size arrays (<code>bool[4]</code>) when providing default values (only dynamic arrays are supported)</li>\n</ul>\n","isPage":false,"text":"\n\nUse envOr(key, defaultValue) to read a single value\nUse envOr(key, delimiter, defaultValue[]) to read an array with delimiter\nThe parsing of the environment variable will be done according to the type of defaultValue (e.g. if the default value type is uint - the environment variable will be also parsed as uint)\nUse explicit casting for literals to specify type of default variable: uint(69) will return an uint but int(69) will return an int\nSame with: string(&quot;&quot;) and bytes(&quot;&quot;) - these will return string and bytes accordingly\nUse dynamic arrays (bool[]) instead of fixed-size arrays (bool[4]) when providing default values (only dynamic arrays are supported)\n\n","title":"Tips","titles":[null,"envOr"]},"753":{"href":"/reference/cheatcodes/env-or#examples","html":"\n","isPage":false,"text":"\n","title":"Examples","titles":[null,"envOr"]},"754":{"href":"/reference/cheatcodes/env-or#single-value","html":"\n<p>If the environment variable <code>FORK</code> is not set, you can specify it to be <code>false</code> by default:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fork </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">envOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;FORK&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> owner;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  owner </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">envOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;OWNER&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nIf the environment variable FORK is not set, you can specify it to be false by default:\nbool fork = vm.envOr(&quot;FORK&quot;, false);\nor\naddress owner;\n \nfunction setUp() {\n  owner = vm.envOr(&quot;OWNER&quot;, address(this));\n}\n","title":"Single Value","titles":[null,"envOr","Examples"]},"755":{"href":"/reference/cheatcodes/env-or#array","html":"\n<p>If the environment variable <code>BAD_TOKENS</code> is not set, you can specify the default to be an empty array:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] badTokens;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envBadTokens</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  badTokens </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">envOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;BAD_TOKENS&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;,&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, badTokens);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>or</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envBadTokens</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> defaultBadTokens </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[](</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> badTokens </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">envOr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;BAD_TOKENS&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;,&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, defaultBadTokens);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nIf the environment variable BAD_TOKENS is not set, you can specify the default to be an empty array:\naddress[] badTokens;\n \nfunction envBadTokens() public {\n  badTokens = vm.envOr(&quot;BAD_TOKENS&quot;, &quot;,&quot;, badTokens);\n}\nor\nfunction envBadTokens() public {\n  address[] memory defaultBadTokens = new address[](0);\n  address[] memory badTokens = vm.envOr(&quot;BAD_TOKENS&quot;, &quot;,&quot;, defaultBadTokens);\n}","title":"Array","titles":[null,"envOr","Examples"]},"756":{"href":"/reference/cheatcodes/env-string#envstring","html":"\n","isPage":true,"text":"\n","title":"envString","titles":[null]},"757":{"href":"/reference/cheatcodes/env-string#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> delimiter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> values</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction envString(string calldata key) external returns (string value);\nfunction envString(string calldata key, string calldata delimiter) external returns (string[] memory values);\n","title":"Signature","titles":[null,"envString"]},"758":{"href":"/reference/cheatcodes/env-string#description","html":"\n<p>Read an environment variable as <code>string</code> or <code>string[]</code>. In case the environment variable is not defined, Forge will fail\nwith the following error message:</p>\n<blockquote>\n<p>[FAIL. Reason: Failed to get environment variable <code>FOO</code> as type <code>string</code>: environment variable not found]</p>\n</blockquote>\n","isPage":false,"text":"\nRead an environment variable as string or string[]. In case the environment variable is not defined, Forge will fail\nwith the following error message:\n\n[FAIL. Reason: Failed to get environment variable FOO as type string: environment variable not found]\n\n","title":"Description","titles":[null,"envString"]},"759":{"href":"/reference/cheatcodes/env-string#tips","html":"\n<ul>\n<li>You can put your environment variables in a <code>.env</code> file. Forge will automatically load them when running <code>forge test</code>.</li>\n<li>For arrays, you can specify the delimiter used to separate the values with the <code>delimiter</code> parameter.</li>\n<li>Choose a delimiter that doesn&#x27;t appear in the string values, so that they can be correctly separated.</li>\n</ul>\n","isPage":false,"text":"\n\nYou can put your environment variables in a .env file. Forge will automatically load them when running forge test.\nFor arrays, you can specify the delimiter used to separate the values with the delimiter parameter.\nChoose a delimiter that doesn&#x27;t appear in the string values, so that they can be correctly separated.\n\n","title":"Tips","titles":[null,"envString"]},"760":{"href":"/reference/cheatcodes/env-string#examples","html":"\n","isPage":false,"text":"\n","title":"Examples","titles":[null,"envString"]},"761":{"href":"/reference/cheatcodes/env-string#single-value","html":"\n<p>With environment variable <code>STRING_VALUE=hello, world!</code>,</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;STRING_VALUE&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;hello, world!&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> output </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">envString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(output, expected);</span></span></code></pre>\n","isPage":false,"text":"\nWith environment variable STRING_VALUE=hello, world!,\nstring memory key = &quot;STRING_VALUE&quot;;\nstring memory expected = &quot;hello, world!&quot;;\nstring memory output = vm.envString(key);\nassertEq(output, expected);\n","title":"Single Value","titles":[null,"envString","Examples"]},"762":{"href":"/reference/cheatcodes/env-string#array","html":"\n<p>With environment variable <code>STRING_VALUES=hello, world!|0x7109709ECfa91a80626fF3989D68f67F5b1DD12D</code>;</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;STRING_VALUES&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> delimiter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;|&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;hello, world!&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &quot;0x7109709ECfa91a80626fF3989D68f67F5b1DD12D&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">];</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> output </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">envString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key, delimiter);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected.length; </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">i) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((output[i]))) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((expected[i]))));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nWith environment variable STRING_VALUES=hello, world!|0x7109709ECfa91a80626fF3989D68f67F5b1DD12D;\nstring memory key = &quot;STRING_VALUES&quot;;\nstring memory delimiter = &quot;|&quot;;\nstring[2] memory expected = [\n    &quot;hello, world!&quot;,\n    &quot;0x7109709ECfa91a80626fF3989D68f67F5b1DD12D&quot;\n];\nstring[] memory output = vm.envString(key, delimiter);\nfor (uint i = 0; i &lt; expected.length; ++i) {\n    assert(keccak256(abi.encodePacked((output[i]))) == keccak256(abi.encodePacked((expected[i]))));\n}","title":"Array","titles":[null,"envString","Examples"]},"763":{"href":"/reference/cheatcodes/env-uint#envuint","html":"\n","isPage":true,"text":"\n","title":"envUint","titles":[null]},"764":{"href":"/reference/cheatcodes/env-uint#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envUint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> envUint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> delimiter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> values</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction envUint(string calldata key) external returns (uint256 value);\nfunction envUint(string calldata key, string calldata delimiter) external returns (uint256[] memory values);\n","title":"Signature","titles":[null,"envUint"]},"765":{"href":"/reference/cheatcodes/env-uint#description","html":"\n<p>Read an environment variable as <code>uint256</code> or <code>uint256[]</code>.</p>\n","isPage":false,"text":"\nRead an environment variable as uint256 or uint256[].\n","title":"Description","titles":[null,"envUint"]},"766":{"href":"/reference/cheatcodes/env-uint#tips","html":"\n<ul>\n<li>If the value starts with <code>0x</code>, it will be interpreted as a hex value, otherwise, it will be\ntreated as a decimal number.</li>\n<li>For arrays, you can specify the delimiter used to separate the values with the <code>delimiter</code> parameter.</li>\n</ul>\n","isPage":false,"text":"\n\nIf the value starts with 0x, it will be interpreted as a hex value, otherwise, it will be\ntreated as a decimal number.\nFor arrays, you can specify the delimiter used to separate the values with the delimiter parameter.\n\n","title":"Tips","titles":[null,"envUint"]},"767":{"href":"/reference/cheatcodes/env-uint#examples","html":"\n","isPage":false,"text":"\n","title":"Examples","titles":[null,"envUint"]},"768":{"href":"/reference/cheatcodes/env-uint#single-value","html":"\n<p>With environment variable <code>UINT_VALUE=115792089237316195423570985008687907853269984665640564039457584007913129639935</code>,</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;UINT_VALUE&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).max;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> output </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">envUint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(output </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected);</span></span></code></pre>\n","isPage":false,"text":"\nWith environment variable UINT_VALUE=115792089237316195423570985008687907853269984665640564039457584007913129639935,\nstring memory key = &quot;UINT_VALUE&quot;;\nuint256 expected = type(uint256).max;\nuint256 output = cheats.envUint(key);\nassert(output == expected);\n","title":"Single Value","titles":[null,"envUint","Examples"]},"769":{"href":"/reference/cheatcodes/env-uint#array","html":"\n<p>With environment variable <code>UINT_VALUES=0,0x0000000000000000000000000000000000000000000000000000000000000000</code>,</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;UINT_VALUES&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> delimiter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;,&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expected </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).min, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).min];</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> output </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">envUint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key, delimiter);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((output))) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((expected))));</span></span></code></pre>","isPage":false,"text":"\nWith environment variable UINT_VALUES=0,0x0000000000000000000000000000000000000000000000000000000000000000,\nstring memory key = &quot;UINT_VALUES&quot;;\nstring memory delimiter = &quot;,&quot;;\nuint256[2] memory expected = [type(uint256).min, type(uint256).min];\nuint256[] memory output = cheats.envUint(key, delimiter);\nassert(keccak256(abi.encodePacked((output))) == keccak256(abi.encodePacked((expected))));","title":"Array","titles":[null,"envUint","Examples"]},"770":{"href":"/reference/cheatcodes/environment#environment","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/warp.mdx\"><code>warp</code></a></li>\n<li><a href=\"/reference/cheatcodes/roll.mdx\"><code>roll</code></a></li>\n<li><a href=\"/reference/cheatcodes/fee.mdx\"><code>fee</code></a></li>\n<li><a href=\"/reference/cheatcodes/difficulty.mdx\"><code>difficulty</code></a></li>\n<li><a href=\"/reference/cheatcodes/prevrandao.mdx\"><code>prevrandao</code></a></li>\n<li><a href=\"/reference/cheatcodes/chain-id.mdx\"><code>chainId</code></a></li>\n<li><a href=\"/reference/cheatcodes/store.mdx\"><code>store</code></a></li>\n<li><a href=\"/reference/cheatcodes/load.mdx\"><code>load</code></a></li>\n<li><a href=\"/reference/cheatcodes/etch.mdx\"><code>etch</code></a></li>\n<li><a href=\"/reference/cheatcodes/deal.mdx\"><code>deal</code></a></li>\n<li><a href=\"/reference/cheatcodes/prank.mdx\"><code>prank</code></a></li>\n<li><a href=\"/reference/cheatcodes/start-prank.mdx\"><code>startPrank</code></a></li>\n<li><a href=\"/reference/cheatcodes/stop-prank.mdx\"><code>stopPrank</code></a></li>\n<li><a href=\"/reference/cheatcodes/read-callers.mdx\"><code>readCallers</code></a></li>\n<li><a href=\"/reference/cheatcodes/record.mdx\"><code>record</code></a></li>\n<li><a href=\"/reference/cheatcodes/accesses.mdx\"><code>accesses</code></a></li>\n<li><a href=\"/reference/cheatcodes/record-logs.mdx\"><code>recordLogs</code></a></li>\n<li><a href=\"/reference/cheatcodes/get-recorded-logs.mdx\"><code>getRecordedLogs</code></a></li>\n<li><a href=\"/reference/cheatcodes/set-nonce.mdx\"><code>setNonce</code></a></li>\n<li><a href=\"/reference/cheatcodes/get-nonce.mdx\"><code>getNonce</code></a></li>\n<li><a href=\"/reference/cheatcodes/mock-call.mdx\"><code>mockCall</code></a></li>\n<li><a href=\"/reference/cheatcodes/mock-calls.mdx\"><code>mockCalls</code></a></li>\n<li><a href=\"/reference/cheatcodes/mock-call-revert.mdx\"><code>mockCallRevert</code></a></li>\n<li><a href=\"/reference/cheatcodes/mock-function.mdx\"><code>mockFunction</code></a></li>\n<li><a href=\"/reference/cheatcodes/clear-mocked-calls.mdx\"><code>clearMockedCalls</code></a></li>\n<li><a href=\"/reference/cheatcodes/coinbase.mdx\"><code>coinbase</code></a></li>\n<li><a href=\"/reference/cheatcodes/broadcast.mdx\"><code>broadcast</code></a></li>\n<li><a href=\"/reference/cheatcodes/start-broadcast.mdx\"><code>startBroadcast</code></a></li>\n<li><a href=\"/reference/cheatcodes/stop-broadcast.mdx\"><code>stopBroadcast</code></a></li>\n<li><a href=\"/reference/cheatcodes/pause-gas-metering.mdx\"><code>pauseGasMetering</code></a></li>\n<li><a href=\"/reference/cheatcodes/reset-gas-metering.mdx\"><code>resetGasMetering</code></a></li>\n<li><a href=\"/reference/cheatcodes/resume-gas-metering.mdx\"><code>resumeGasMetering</code></a></li>\n<li><a href=\"/reference/cheatcodes/tx-gas-price.mdx\"><code>txGasPrice</code></a></li>\n<li><a href=\"/reference/cheatcodes/start-state-diff-recording.mdx\"><code>startStateDiffRecording</code></a></li>\n<li><a href=\"/reference/cheatcodes/stop-and-return-state-diff.mdx\"><code>stopAndReturnStateDiff</code></a></li>\n<li><a href=\"/reference/cheatcodes/is-context.mdx\"><code>isContext</code></a></li>\n</ul>","isPage":true,"text":"\n\nwarp\nroll\nfee\ndifficulty\nprevrandao\nchainId\nstore\nload\netch\ndeal\nprank\nstartPrank\nstopPrank\nreadCallers\nrecord\naccesses\nrecordLogs\ngetRecordedLogs\nsetNonce\ngetNonce\nmockCall\nmockCalls\nmockCallRevert\nmockFunction\nclearMockedCalls\ncoinbase\nbroadcast\nstartBroadcast\nstopBroadcast\npauseGasMetering\nresetGasMetering\nresumeGasMetering\ntxGasPrice\nstartStateDiffRecording\nstopAndReturnStateDiff\nisContext\n","title":"Environment","titles":[null]},"771":{"href":"/reference/cheatcodes/etch#etch","html":"\n","isPage":true,"text":"\n","title":"etch","titles":[null]},"772":{"href":"/reference/cheatcodes/etch#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> etch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> who</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> code</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction etch(address who, bytes calldata code) external;\n","title":"Signature","titles":[null,"etch"]},"773":{"href":"/reference/cheatcodes/etch#description","html":"\n<p>Sets the bytecode of an address <code>who</code> to <code>code</code>.</p>\n","isPage":false,"text":"\nSets the bytecode of an address who to code.\n","title":"Description","titles":[null,"etch"]},"774":{"href":"/reference/cheatcodes/etch#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> code </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(awesomeContract).code;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> targetAddr </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> makeAddr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;target&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">etch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(targetAddr, code);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log_bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(targetAddr).code); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 0x6080604052348015610010...</span></span></code></pre>\n","isPage":false,"text":"\nbytes memory code = address(awesomeContract).code;\naddress targetAddr = makeAddr(&quot;target&quot;);\nvm.etch(targetAddr, code);\nlog_bytes(address(targetAddr).code); // 0x6080604052348015610010...\n","title":"Examples","titles":[null,"etch"]},"775":{"href":"/reference/cheatcodes/etch#using-vmetch-for-enabling-custom-precompiles","html":"\n<p>Some chains, like Blast or Arbitrum, run with custom precompiles. Foundry is operating on vanilla EVM and is not aware of those. If you are encountering reverts due to not available precompile, you can use <code>vm.etch</code> cheatcode to inject mock of the missing precompile to the address it is expected to appear at.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// SPDX-License-Identifier: UNLICENSED</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.8.10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/Test.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Firstly, we implement a mock emulating the actual precompile behavior</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> YieldMock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> private</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> constant</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> blastContract </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x4300000000000000000000000000000000000002</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    mapping</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> uint8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> getConfiguration;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> configure</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> contractAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint8</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> flags</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">msg.sender</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ==</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> blastContract);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        getConfiguration[contractAddress] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flags;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> claim</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getClaimableAmount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SomeBlastTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createSelectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;blastRpcUrl&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Deploy mock of the precompile</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        YieldMock yieldMock </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> YieldMock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Set mock bytecode to the expected precompile address</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">etch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0x0000000000000000000000000000000000000100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(yieldMock).code);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testSomething</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Now we can interact with Blast contracts without reverts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<div class=\"warning\"><p>Injecting mocks of precompiles might be tricky as such mocks will not fully emulate the actual precompile behavior on-chain.</p><p>Mock in the case above will not cause the actual yield to be accrued if any yield mode is configured.</p></div>\n","isPage":false,"text":"\nSome chains, like Blast or Arbitrum, run with custom precompiles. Foundry is operating on vanilla EVM and is not aware of those. If you are encountering reverts due to not available precompile, you can use vm.etch cheatcode to inject mock of the missing precompile to the address it is expected to appear at.\n// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.10;\n \nimport {Test} from &quot;forge-std/Test.sol&quot;;\n \n// Firstly, we implement a mock emulating the actual precompile behavior\ncontract YieldMock {\n    address private constant blastContract = 0x4300000000000000000000000000000000000002;\n \n    mapping(address =&gt; uint8) public getConfiguration;\n \n    function configure(address contractAddress, uint8 flags) external returns (uint256) {\n        require(msg.sender == blastContract);\n \n        getConfiguration[contractAddress] = flags;\n        return 0;\n    }\n \n    function claim(address, address, uint256) external pure returns (uint256) {\n        return 0;\n    }\n \n    function getClaimableAmount(address) external pure returns (uint256) {\n        return 0;\n    }\n}\n \ncontract SomeBlastTest is Test {\n    function setUp() public {\n        vm.createSelectFork(&quot;blastRpcUrl&quot;);\n        // Deploy mock of the precompile\n        YieldMock yieldMock = new YieldMock();\n        // Set mock bytecode to the expected precompile address\n        vm.etch(0x0000000000000000000000000000000000000100, address(yieldMock).code);\n    }\n \n    function testSomething() public {\n        // Now we can interact with Blast contracts without reverts\n    }\n}\nInjecting mocks of precompiles might be tricky as such mocks will not fully emulate the actual precompile behavior on-chain.Mock in the case above will not cause the actual yield to be accrued if any yield mode is configured.\n","title":"Using vm.etch for enabling custom precompiles","titles":[null,"etch","Examples"]},"776":{"href":"/reference/cheatcodes/etch#see-also","html":"\n<p>Forge Standard Library</p>\n<ul>\n<li><a href=\"/reference/forge-std/deployCode.mdx\"><code>deployCode</code></a></li>\n<li><a href=\"/reference/forge-std/deployCodeTo.mdx\"><code>deployCodeTo</code></a></li>\n</ul>","isPage":false,"text":"\nForge Standard Library\n\ndeployCode\ndeployCodeTo\n","title":"SEE ALSO","titles":[null,"etch"]},"777":{"href":"/reference/cheatcodes/expect-call#expectcall","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> expectCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> callee</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> expectCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> callee</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint64</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> count</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> expectCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> callee</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> expectCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> callee</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint64</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> count</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":true,"text":"\nfunction expectCall(address callee, bytes calldata data) external;\nfunction expectCall(address callee, bytes calldata data, uint64 count) external;\nfunction expectCall(\n    address callee,\n    uint256 value,\n    bytes calldata data\n) external;\nfunction expectCall(\n    address callee,\n    uint256 value,\n    bytes calldata data,\n    uint64 count\n) external;\n","title":"expectCall","titles":[null]},"778":{"href":"/reference/cheatcodes/expect-call#description","html":"\n<p>Expects a call to a specified address <code>callee</code>, where the call data either strictly or loosely matches <code>data</code>. The cheatcode can be called in two ways:</p>\n<ul>\n<li>If no <code>count</code> parameter is specified, the call will be expected to be made at least the amount of times the cheatcode was called. For the same calldata, you cannot call the cheatcode with no <code>count</code> and then pass in a <code>count</code> parameter.</li>\n<li>If <code>count</code> is specified, the call will be expected to be made strictly <code>count</code> times. For the same calldata, the <code>count</code> value cannot be overwritten with another cheatcode call, nor it can be increment by calling the cheatcode without a <code>count</code> parameter.</li>\n</ul>\n<p><code>count</code> can also be set to 0 to assert that a call is not made.</p>\n<p>When a call is made to <code>callee</code> the call data is first checked to see if it matches in its entirety with <code>data</code>. If not, the call data is checked to see if there is a partial match, with the match starting at the first byte of the call data.</p>\n<p><strong>Using the second signature</strong> we can also check if the call was made with the expected <code>msg.value</code>.</p>\n<p>If the test terminates without the call being made, the test fails.</p>\n<blockquote>\n<p>ℹ️ <strong>Internal calls</strong></p>\n<p>This cheatcode does not currently work on internal calls. See issue <a href=\"https://github.com/foundry-rs/foundry/issues/432\">#432</a>.</p>\n</blockquote>\n","isPage":false,"text":"\nExpects a call to a specified address callee, where the call data either strictly or loosely matches data. The cheatcode can be called in two ways:\n\nIf no count parameter is specified, the call will be expected to be made at least the amount of times the cheatcode was called. For the same calldata, you cannot call the cheatcode with no count and then pass in a count parameter.\nIf count is specified, the call will be expected to be made strictly count times. For the same calldata, the count value cannot be overwritten with another cheatcode call, nor it can be increment by calling the cheatcode without a count parameter.\n\ncount can also be set to 0 to assert that a call is not made.\nWhen a call is made to callee the call data is first checked to see if it matches in its entirety with data. If not, the call data is checked to see if there is a partial match, with the match starting at the first byte of the call data.\nUsing the second signature we can also check if the call was made with the expected msg.value.\nIf the test terminates without the call being made, the test fails.\n\nℹ️ Internal calls\nThis cheatcode does not currently work on internal calls. See issue #432.\n\n","title":"Description","titles":[null,"expectCall"]},"779":{"href":"/reference/cheatcodes/expect-call#examples","html":"\n<p>Expect that <code>transfer</code> is called on a token <code>MyToken</code> one time:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> alice </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> makeAddr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;alice&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token.transfer, (alice, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// [PASS]</span></span></code></pre>\n<p>Expect that <code>transfer</code> is called on a token <code>MyToken</code> <em>at least</em> two times:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> alice </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> makeAddr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;alice&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token.transfer, (alice, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token.transfer, (alice, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// [PASS]</span></span></code></pre>\n<p>Expect that <code>transfer</code> is not called on a token <code>MyToken</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> alice </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> makeAddr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;alice&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token.transfer, (alice, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transferFrom</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// [PASS]</span></span></code></pre>\n<p>Expect that <code>transfer</code> with any calldata is called on a token <code>MyToken</code> 2 times:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> alice </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> makeAddr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;alice&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeWithSelector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token.transfer.selector), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// [PASS]</span></span></code></pre>\n<p>Expect that <code>pay</code> is called on a <code>Contract</code> with a specific <code>msg.value</code> and <code>calldata</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Contract target </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">            address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(target),</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">            1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">            abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeWithSelector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(target.pay.selector, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">target.pay{value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// [PASS]</span></span></code></pre>\n<p>Expect that <code>pay</code> is called on a <code>Contract</code> with a specific <code>msg.value</code> and <code>calldata</code> 3 times:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Contract target </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">            address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(target),</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">            1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">            abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeWithSelector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(target.pay.selector, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">            3</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">target.pay{value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">target.pay{value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">target.pay{value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// [PASS]</span></span></code></pre>","isPage":false,"text":"\nExpect that transfer is called on a token MyToken one time:\naddress alice = makeAddr(&quot;alice&quot;);\nemit log_address(alice);\nvm.expectCall(\n  address(token), abi.encodeCall(token.transfer, (alice, 10))\n);\ntoken.transfer(alice, 10);\n// [PASS]\nExpect that transfer is called on a token MyToken at least two times:\naddress alice = makeAddr(&quot;alice&quot;);\nemit log_address(alice);\nvm.expectCall(\n  address(token), abi.encodeCall(token.transfer, (alice, 10))\n);\nvm.expectCall(\n  address(token), abi.encodeCall(token.transfer, (alice, 10))\n);\ntoken.transfer(alice, 10);\ntoken.transfer(alice, 10);\ntoken.transfer(alice, 10);\n// [PASS]\nExpect that transfer is not called on a token MyToken:\naddress alice = makeAddr(&quot;alice&quot;);\nemit log_address(alice);\nvm.expectCall(\n  address(token), abi.encodeCall(token.transfer, (alice, 10)), 0\n);\ntoken.transferFrom(alice, address(0), 10);\n// [PASS]\nExpect that transfer with any calldata is called on a token MyToken 2 times:\naddress alice = makeAddr(&quot;alice&quot;);\nemit log_address(alice);\nvm.expectCall(\n  address(token), abi.encodeWithSelector(token.transfer.selector), 2\n);\ntoken.transfer(alice, 10);\ntoken.transfer(alice, 10);\n// [PASS]\nExpect that pay is called on a Contract with a specific msg.value and calldata:\nContract target = new Contract();\nvm.expectCall(\n            address(target),\n            1,\n            abi.encodeWithSelector(target.pay.selector, 2)\n        );\ntarget.pay{value: 1}(2);\n// [PASS]\nExpect that pay is called on a Contract with a specific msg.value and calldata 3 times:\nContract target = new Contract();\nvm.expectCall(\n            address(target),\n            1,\n            abi.encodeWithSelector(target.pay.selector, 2),\n            3\n        );\ntarget.pay{value: 1}(2);\ntarget.pay{value: 1}(2);\ntarget.pay{value: 1}(2);\n// [PASS]","title":"Examples","titles":[null,"expectCall"]},"780":{"href":"/reference/cheatcodes/expect-emit#expectemit","html":"\n","isPage":true,"text":"\n","title":"expectEmit","titles":[null]},"781":{"href":"/reference/cheatcodes/expect-emit#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> expectEmit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> expectEmit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> checkTopic1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> checkTopic2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> checkTopic3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> checkData</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> expectEmit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> emitter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> expectEmit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> checkTopic1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> checkTopic2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> checkTopic3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> checkData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> emitter</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction expectEmit() external;\nfunction expectEmit(\n    bool checkTopic1,\n    bool checkTopic2,\n    bool checkTopic3,\n    bool checkData\n) external;\nfunction expectEmit(address emitter) external;\nfunction expectEmit(\n    bool checkTopic1,\n    bool checkTopic2,\n    bool checkTopic3,\n    bool checkData,\n    address emitter\n) external;\n","title":"Signature","titles":[null,"expectEmit"]},"782":{"href":"/reference/cheatcodes/expect-emit#description","html":"\n<p>Asserts that a specific log is emitted during the next call.</p>\n<ol>\n<li>Call the cheat code, specifying whether we should check the first, second or third topic, and the log data (<code>expectEmit()</code> checks them all). Topic 0 is always checked.</li>\n<li>Emit the event we are supposed to see during the next call.</li>\n<li>Perform the call.</li>\n</ol>\n<p>You can perform steps 1 and 2 multiple times to match a <em>sequence</em> of events in the next call.</p>\n<p>If the event is not available in the current scope (e.g. if we are using an interface, or an external smart contract), we can define the event ourselves with an identical event signature.</p>\n<p>There are 2 varieties of <code>expectEmit</code>:</p>\n<ul>\n<li><strong>Without checking the emitter address</strong>: Asserts the topics match <strong>without</strong> checking the emitting address.</li>\n<li><strong>With <code>address</code></strong>: Asserts the topics match and that the emitting address matches.</li>\n</ul>\n<blockquote>\n<p>ℹ️ <strong>Matching sequences</strong></p>\n<p>In functions that emit a lot of events, it&#x27;s possible to &quot;skip&quot; events and only match a specific sequence,\nbut this sequence must always be in order. As an example, let&#x27;s say a\nfunction emits events: <code>A, B, C, D, E, F, F, G</code>.</p>\n<p><code>expectEmit</code> will be able to match ranges with and without skipping events in between:</p>\n<ul>\n<li><code>[A, B, C]</code> is valid.</li>\n<li><code>[B, D, F]</code> is valid.</li>\n<li><code>[G]</code> or any other single event combination is valid.</li>\n<li><code>[B, A]</code> or similar out-of-order combinations are <strong>invalid</strong> (events must be in order).</li>\n<li><code>[C, F, F]</code> is valid.</li>\n<li><code>[F, F, C]</code> is <strong>invalid</strong> (out of order).</li>\n</ul>\n</blockquote>\n","isPage":false,"text":"\nAsserts that a specific log is emitted during the next call.\n\nCall the cheat code, specifying whether we should check the first, second or third topic, and the log data (expectEmit() checks them all). Topic 0 is always checked.\nEmit the event we are supposed to see during the next call.\nPerform the call.\n\nYou can perform steps 1 and 2 multiple times to match a sequence of events in the next call.\nIf the event is not available in the current scope (e.g. if we are using an interface, or an external smart contract), we can define the event ourselves with an identical event signature.\nThere are 2 varieties of expectEmit:\n\nWithout checking the emitter address: Asserts the topics match without checking the emitting address.\nWith address: Asserts the topics match and that the emitting address matches.\n\n\nℹ️ Matching sequences\nIn functions that emit a lot of events, it&#x27;s possible to &quot;skip&quot; events and only match a specific sequence,\nbut this sequence must always be in order. As an example, let&#x27;s say a\nfunction emits events: A, B, C, D, E, F, F, G.\nexpectEmit will be able to match ranges with and without skipping events in between:\n\n[A, B, C] is valid.\n[B, D, F] is valid.\n[G] or any other single event combination is valid.\n[B, A] or similar out-of-order combinations are invalid (events must be in order).\n[C, F, F] is valid.\n[F, F, C] is invalid (out of order).\n\n\n","title":"Description","titles":[null,"expectEmit"]},"783":{"href":"/reference/cheatcodes/expect-emit#examples","html":"\n<p>This does not check the emitting address.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> indexed</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> indexed</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> to</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> amount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testERC20EmitsTransfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectEmit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // We emit the event we expect to see.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    emit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> MyToken.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // We perform the call.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    myToken.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>This does check the emitting address.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> indexed</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> indexed</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> to</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> amount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testERC20EmitsTransfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // We check that the token is the event emitter by passing the address.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectEmit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(myToken));</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    emit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> MyToken.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // We perform the call.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    myToken.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>We can also assert that multiple events are emitted in a single call.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testERC20EmitsBatchTransfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // We declare multiple expected transfer events</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> users.length; i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Here we use the longer signature for demonstration purposes. This call checks</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // topic0 (always checked), topic1 (true), topic2 (true), NOT topic3 (false), and data (true).</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectEmit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), users[i], </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // We also expect a custom `BatchTransfer(uint256 numberOfTransfers)` event.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectEmit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> BatchTransfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(users.length);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // We perform the call.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    myToken.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">batchTransfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(users, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>This example fails, as the expected event is not emitted on the next call.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> indexed</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> indexed</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> to</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> amount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testERC20EmitsTransfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // We check that the token is the event emitter by passing the address as the fifth argument.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectEmit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(myToken));</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    emit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> MyToken.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // We perform an unrelated call that won&#x27;t emit the intended event,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // making the cheatcode fail.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    myToken.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">approve</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1e18</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // We perform the call, but it will have no effect as the cheatcode has already failed.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    myToken.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nThis does not check the emitting address.\nevent Transfer(address indexed from, address indexed to, uint256 amount);\n \nfunction testERC20EmitsTransfer() public {\n    vm.expectEmit();\n \n    // We emit the event we expect to see.\n    emit MyToken.Transfer(address(this), address(1), 10);\n \n    // We perform the call.\n    myToken.transfer(address(1), 10);\n}\nThis does check the emitting address.\nevent Transfer(address indexed from, address indexed to, uint256 amount);\n \nfunction testERC20EmitsTransfer() public {\n    // We check that the token is the event emitter by passing the address.\n    vm.expectEmit(address(myToken));\n    emit MyToken.Transfer(address(this), address(1), 10);\n \n    // We perform the call.\n    myToken.transfer(address(1), 10);\n}\nWe can also assert that multiple events are emitted in a single call.\nfunction testERC20EmitsBatchTransfer() public {\n    // We declare multiple expected transfer events\n    for (uint256 i = 0; i &lt; users.length; i++) {\n        // Here we use the longer signature for demonstration purposes. This call checks\n        // topic0 (always checked), topic1 (true), topic2 (true), NOT topic3 (false), and data (true).\n        vm.expectEmit(true, true, false, true);\n        emit Transfer(address(this), users[i], 10);\n    }\n \n    // We also expect a custom `BatchTransfer(uint256 numberOfTransfers)` event.\n    vm.expectEmit(false, false, false, true);\n    emit BatchTransfer(users.length);\n \n    // We perform the call.\n    myToken.batchTransfer(users, 10);\n}\nThis example fails, as the expected event is not emitted on the next call.\nevent Transfer(address indexed from, address indexed to, uint256 amount);\n \nfunction testERC20EmitsTransfer() public {\n    // We check that the token is the event emitter by passing the address as the fifth argument.\n    vm.expectEmit(true, true, false, true, address(myToken));\n    emit MyToken.Transfer(address(this), address(1), 10);\n \n    // We perform an unrelated call that won&#x27;t emit the intended event,\n    // making the cheatcode fail.\n    myToken.approve(address(this), 1e18);\n    // We perform the call, but it will have no effect as the cheatcode has already failed.\n    myToken.transfer(address(1), 10);\n}","title":"Examples","titles":[null,"expectEmit"]},"784":{"href":"/reference/cheatcodes/expect-revert#expectrevert","html":"\n","isPage":true,"text":"\n","title":"expectRevert","titles":[null]},"785":{"href":"/reference/cheatcodes/expect-revert#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes4</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> revertData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes4</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> revertData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> reverter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes4</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> revertData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint64</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> count</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes4</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> revertData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> reverter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint64</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> count</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> revertData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> revertData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> reverter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> revertData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint64</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> count</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> revertData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> reverter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint64</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> count</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> reverter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint64</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> count</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> reverter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint64</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> count</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> expectPartialRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes4</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> revertData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> expectPartialRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes4</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> revertData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> reverter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction expectRevert() external;\nfunction expectRevert(bytes4 revertData) external;\nfunction expectRevert(bytes4 revertData, address reverter) external;\nfunction expectRevert(bytes4 revertData, uint64 count) external;\nfunction expectRevert(bytes4 revertData, address reverter, uint64 count) external;\nfunction expectRevert(bytes calldata revertData) external;\nfunction expectRevert(bytes calldata revertData, address reverter) external;\nfunction expectRevert(bytes calldata revertData, uint64 count) external;\nfunction expectRevert(bytes calldata revertData, address reverter, uint64 count) external;\nfunction expectRevert(address reverter) external;\nfunction expectRevert(uint64 count) external;\nfunction expectRevert(address reverter, uint64 count) external;\nfunction expectPartialRevert(bytes4 revertData) external;\nfunction expectPartialRevert(bytes4 revertData, address reverter) external;\n","title":"Signature","titles":[null,"expectRevert"]},"786":{"href":"/reference/cheatcodes/expect-revert#error","html":"\n<blockquote>\n<p>❌ <strong>Error</strong></p>\n<p>If you see the following error:</p>\n<p><code>[FAIL: call didn&#x27;t revert at a lower depth than cheatcode call depth]</code></p>\n<p>Carefully read the next sections!</p>\n</blockquote>\n<p>To understand why you are getting this error you first have to understand what <code>call depth</code> means.</p>\n<p>You can think of call depth in a similar way to function scoping. When you are entering an <strong>external</strong> call the call depth is increased by <code>1</code>.\nWhen you exit the external call the call depth is decreased by <code>1</code>. If you have nested calls it looks as follows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">0 → Contract A (calls B) → 1 → Contract B (calls C) → 2 → Contract C (returns) → 1 → Contract B (returns) → 0</span></span></code></pre>\n<p><strong>Internal</strong> functions on the other hand do <strong>NOT</strong> increase the call depth. It is not actually making <em>calls</em> but rather <em>jumping</em> to the target location.</p>\n<p>When testing <strong>internal</strong> functions with <code>vm.expectRevert</code> at the same call depth <strong>ONLY</strong> the <strong>FIRST</strong> <code>vm.expectRevert</code> is executed.</p>\n<p>The following example shows where the footgun occurs. There are two <code>vm.expectRevert</code>&#x27;s that exist at the same call depth hence only the <strong>FIRST</strong> one is executed and the test returns a <strong>SUCCESS</strong>. This is likely different behavior from what you may assume.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// DO NOT IMPLEMENT AS FOLLOWS! THIS IS AN INCORRECT USE.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testMultipleReverts</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    revert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console2.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Does not revert&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n\n❌ Error\nIf you see the following error:\n[FAIL: call didn&#x27;t revert at a lower depth than cheatcode call depth]\nCarefully read the next sections!\n\nTo understand why you are getting this error you first have to understand what call depth means.\nYou can think of call depth in a similar way to function scoping. When you are entering an external call the call depth is increased by 1.\nWhen you exit the external call the call depth is decreased by 1. If you have nested calls it looks as follows:\n0 → Contract A (calls B) → 1 → Contract B (calls C) → 2 → Contract C (returns) → 1 → Contract B (returns) → 0\nInternal functions on the other hand do NOT increase the call depth. It is not actually making calls but rather jumping to the target location.\nWhen testing internal functions with vm.expectRevert at the same call depth ONLY the FIRST vm.expectRevert is executed.\nThe following example shows where the footgun occurs. There are two vm.expectRevert&#x27;s that exist at the same call depth hence only the FIRST one is executed and the test returns a SUCCESS. This is likely different behavior from what you may assume.\n// DO NOT IMPLEMENT AS FOLLOWS! THIS IS AN INCORRECT USE.\nfunction testMultipleReverts() public {\n    vm.expectRevert();\n    revert();\n \n    vm.expectRevert();\n    console2.log(&quot;Does not revert&quot;);\n}\n","title":"Error","titles":[null,"expectRevert"]},"787":{"href":"/reference/cheatcodes/expect-revert#description","html":"\n<p>If the <strong>next call</strong> does not revert with the expected data <code>message</code>, then <code>expectRevert</code> will.</p>\n<blockquote>\n<p>⚠️ <strong>Usage</strong></p>\n<p>By default, <code>expectRevert*</code> cheatcodes work only for calls with greater depth than test depth (see <a href=\"https://github.com/foundry-rs/foundry/issues/3437\">#3437</a> foundry issue).\nExpecting reverts at the same depth as test depth can be enabled by setting <code>allow_internal_expect_revert</code> to <code>true</code> as follows:</p>\n<p>Selectively by using an inline configuration entry where it is <strong>DEEMED SAFE</strong>:</p>\n<p>Add <code>/// forge-config: default.allow_internal_expect_revert = true</code> above the test function.</p>\n<p>Or globally, this is discouraged:</p>\n<p>Add <code>allow_internal_expect_revert = true</code> to <code>foundry.toml</code>.</p>\n</blockquote>\n<p>As long as you are not using <code>vm.expectRevert</code> on multiple internal functions in a single test function body it is generally considered safe.</p>\n<p>You are recommended to apply this rule in a similar manner one would when tagging assembly blocks as <code>memory-safe</code>.</p>\n<blockquote>\n<strong>Note</strong>\n<p>For a call like <code>stable.donate(sUSD.balanceOf(user))</code>, the next call expected to revert is <code>sUSD.balanceOf(user)</code> and not <code>stable.donate()</code>.</p>\n</blockquote>\n<p>After calling <code>expectRevert</code>, calls to other cheatcodes before the reverting call are ignored.</p>\n<p>This means, for example, we can call <a href=\"/reference/cheatcodes/prank.mdx\"><code>prank</code></a> immediately before the reverting call.</p>\n<p>There are several signatures for <code>expectRevert</code>:</p>\n<ul>\n<li><strong>Without parameters</strong>: Asserts that the next call reverts, regardless of the message.</li>\n<li><strong>With <code>bytes4</code> message</strong>: Asserts that the next call reverts with the specified 4 bytes and exact match of revert data.</li>\n<li><strong>With <code>bytes</code> message</strong>: Asserts that the next call reverts with the specified bytes.</li>\n<li><strong>With <code>address</code> reverter</strong>: Asserts that the next call is reverted by the specified address.</li>\n<li><strong>With <code>uint64</code> count</strong>: Expects an exact number of reverts from the upcoming calls. If set to 0, it can be used to assert that a revert is not made.</li>\n</ul>\n<p>and two signatures for <code>expectPartialRevert</code>:</p>\n<ul>\n<li><strong><code>bytes4</code> message</strong>: Asserts that the next call reverts and the specified 4 bytes match the first 4 bytes of revert data.</li>\n<li><strong><code>bytes4</code> message and reverter <code>address</code></strong>: Asserts that the next call is reverted by specified address and the specified 4 bytes match the first 4 bytes of revert data.</li>\n</ul>\n<blockquote>\n<p>ℹ️ <strong>Note:</strong></p>\n<p>Custom errors can have arguments that sometimes are difficult to calculate in a testing environment or they may be unrelated to the test at hand (e.g. a value computed in the internal function of a third-party contract). In such cases, <code>expectPartialRevert</code> can be used to ignore arguments and match only on the selector of custom error. For example, testing a function that reverts with <code>WrongNumber(uint256 number)</code> custom error:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> count</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    revert</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> WrongNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>should pass when using <code>expectPartialRevert</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectPartialRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Counter.WrongNumber.selector);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">count</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n<p>but fails if exact match expected:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Counter.WrongNumber.selector);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">count</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n</blockquote>\n<blockquote>\n<p>⚠️ <strong>Gotcha: Usage with low-level calls</strong></p>\n<p>Normally, a call that succeeds returns a status of <code>true</code> (along with any return data) and a call that reverts returns <code>false</code>.</p>\n<p>The Solidity compiler will insert checks that ensures that the call succeeded, and revert if it did not.</p>\n<p>On low level calls, the <code>expectRevert</code> cheatcode works by making the <code>status</code> boolean returned by the low level call correspond to whether the <code>expectRevert</code> succeeded or not, NOT whether or not the low-level call succeeds. Therefore, <code>status</code> being false corresponds to the cheatcode failing.</p>\n<p>Apart from this, <code>expectRevert</code> also mangles return data on low level calls, and is not usable.</p>\n<p>See the following example. For clarity, <code>status</code> has been renamed to <code>revertsAsExpected</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testLowLevelCallRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;error message&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> revertsAsExpected, ) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(myContract).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(myCalldata);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertTrue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(revertsAsExpected, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;expectRevert: call did not revert&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n</blockquote>\n","isPage":false,"text":"\nIf the next call does not revert with the expected data message, then expectRevert will.\n\n⚠️ Usage\nBy default, expectRevert* cheatcodes work only for calls with greater depth than test depth (see #3437 foundry issue).\nExpecting reverts at the same depth as test depth can be enabled by setting allow_internal_expect_revert to true as follows:\nSelectively by using an inline configuration entry where it is DEEMED SAFE:\nAdd /// forge-config: default.allow_internal_expect_revert = true above the test function.\nOr globally, this is discouraged:\nAdd allow_internal_expect_revert = true to foundry.toml.\n\nAs long as you are not using vm.expectRevert on multiple internal functions in a single test function body it is generally considered safe.\nYou are recommended to apply this rule in a similar manner one would when tagging assembly blocks as memory-safe.\n\nNote\nFor a call like stable.donate(sUSD.balanceOf(user)), the next call expected to revert is sUSD.balanceOf(user) and not stable.donate().\n\nAfter calling expectRevert, calls to other cheatcodes before the reverting call are ignored.\nThis means, for example, we can call prank immediately before the reverting call.\nThere are several signatures for expectRevert:\n\nWithout parameters: Asserts that the next call reverts, regardless of the message.\nWith bytes4 message: Asserts that the next call reverts with the specified 4 bytes and exact match of revert data.\nWith bytes message: Asserts that the next call reverts with the specified bytes.\nWith address reverter: Asserts that the next call is reverted by the specified address.\nWith uint64 count: Expects an exact number of reverts from the upcoming calls. If set to 0, it can be used to assert that a revert is not made.\n\nand two signatures for expectPartialRevert:\n\nbytes4 message: Asserts that the next call reverts and the specified 4 bytes match the first 4 bytes of revert data.\nbytes4 message and reverter address: Asserts that the next call is reverted by specified address and the specified 4 bytes match the first 4 bytes of revert data.\n\n\nℹ️ Note:\nCustom errors can have arguments that sometimes are difficult to calculate in a testing environment or they may be unrelated to the test at hand (e.g. a value computed in the internal function of a third-party contract). In such cases, expectPartialRevert can be used to ignore arguments and match only on the selector of custom error. For example, testing a function that reverts with WrongNumber(uint256 number) custom error:\nfunction count() public {\n    revert WrongNumber(0);\n}\nshould pass when using expectPartialRevert:\nvm.expectPartialRevert(Counter.WrongNumber.selector);\ncounter.count();\nbut fails if exact match expected:\nvm.expectRevert(Counter.WrongNumber.selector);\ncounter.count();\n\n\n⚠️ Gotcha: Usage with low-level calls\nNormally, a call that succeeds returns a status of true (along with any return data) and a call that reverts returns false.\nThe Solidity compiler will insert checks that ensures that the call succeeded, and revert if it did not.\nOn low level calls, the expectRevert cheatcode works by making the status boolean returned by the low level call correspond to whether the expectRevert succeeded or not, NOT whether or not the low-level call succeeds. Therefore, status being false corresponds to the cheatcode failing.\nApart from this, expectRevert also mangles return data on low level calls, and is not usable.\nSee the following example. For clarity, status has been renamed to revertsAsExpected:\nfunction testLowLevelCallRevert() public {\n    vm.expectRevert(bytes(&quot;error message&quot;));\n    (bool revertsAsExpected, ) = address(myContract).call(myCalldata);\n    assertTrue(revertsAsExpected, &quot;expectRevert: call did not revert&quot;);\n}\n\n","title":"Description","titles":[null,"expectRevert"]},"788":{"href":"/reference/cheatcodes/expect-revert#examples","html":"\n<p>To use <code>expectRevert</code> with a <code>string</code>, pass it as a string literal.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;error message&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>To use <code>expectRevert</code> with a custom <a href=\"https://docs.soliditylang.org/en/v0.8.11/contracts.html#errors\">error type</a> without parameters, use its selector.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(CustomError.selector);</span></span></code></pre>\n<p>To use <code>expectRevert</code> with a custom <a href=\"https://docs.soliditylang.org/en/v0.8.11/contracts.html#errors\">error type</a> with parameters, ABI encode the error type.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeWithSelector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(CustomError.selector, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>If you need to assert that a function reverts <em>without</em> a message, you can do so with <code>expectRevert(bytes(&quot;&quot;))</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testExpectRevertNoReason</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Reverter reverter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Reverter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    reverter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">revertWithoutReason</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Message-less reverts happen when there is an EVM error, such as when the transaction consumes more than the block&#x27;s gas limit.</p>\n<p>If you need to assert that a function reverts a four character message, e.g. <code>AAAA</code>, you can do so with:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testFourLetterMessage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;AAAA&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>If used <code>expectRevert(&quot;AAAA&quot;)</code>, the compiler would throw an error because it wouldn&#x27;t know which overload to use.</p>\n<p>Finally, you can also have multiple <code>expectRevert()</code> checks in a single test.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testMultipleExpectReverts</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;INVALID_AMOUNT&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vault.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(user, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;INVALID_ADDRESS&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vault.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">200</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>To use <code>expectPartialRevert</code> with a custom <a href=\"https://docs.soliditylang.org/en/v0.8.11/contracts.html#errors\">error type</a>, use its selector.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectPartialRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(CustomError.selector);</span></span></code></pre>\n","isPage":false,"text":"\nTo use expectRevert with a string, pass it as a string literal.\nvm.expectRevert(&quot;error message&quot;);\nTo use expectRevert with a custom error type without parameters, use its selector.\nvm.expectRevert(CustomError.selector);\nTo use expectRevert with a custom error type with parameters, ABI encode the error type.\nvm.expectRevert(\n    abi.encodeWithSelector(CustomError.selector, 1, 2)\n);\nIf you need to assert that a function reverts without a message, you can do so with expectRevert(bytes(&quot;&quot;)).\nfunction testExpectRevertNoReason() public {\n    Reverter reverter = new Reverter();\n    vm.expectRevert(bytes(&quot;&quot;));\n    reverter.revertWithoutReason();\n}\nMessage-less reverts happen when there is an EVM error, such as when the transaction consumes more than the block&#x27;s gas limit.\nIf you need to assert that a function reverts a four character message, e.g. AAAA, you can do so with:\nfunction testFourLetterMessage() public {\n    vm.expectRevert(bytes(&quot;AAAA&quot;));\n}\nIf used expectRevert(&quot;AAAA&quot;), the compiler would throw an error because it wouldn&#x27;t know which overload to use.\nFinally, you can also have multiple expectRevert() checks in a single test.\nfunction testMultipleExpectReverts() public {\n    vm.expectRevert(&quot;INVALID_AMOUNT&quot;);\n    vault.send(user, 0);\n \n    vm.expectRevert(&quot;INVALID_ADDRESS&quot;);\n    vault.send(address(0), 200);\n}\nTo use expectPartialRevert with a custom error type, use its selector.\nvm.expectPartialRevert(CustomError.selector);\n","title":"Examples","titles":[null,"expectRevert"]},"789":{"href":"/reference/cheatcodes/expect-revert#see-also","html":"\n<p>Forge Standard Library</p>\n<p><a href=\"/reference/forge-std/std-errors.mdx\">Std Errors</a></p>","isPage":false,"text":"\nForge Standard Library\nStd Errors","title":"SEE ALSO","titles":[null,"expectRevert"]},"790":{"href":"/reference/cheatcodes/external#external","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/ffi.mdx\"><code>ffi</code></a></li>\n<li><a href=\"/reference/cheatcodes/prompt.mdx\"><code>prompt</code></a></li>\n<li><a href=\"/reference/cheatcodes/project-root.mdx\"><code>projectRoot</code></a></li>\n<li><a href=\"/reference/cheatcodes/get-code.mdx\"><code>getCode</code></a></li>\n<li><a href=\"/reference/cheatcodes/get-deployed-code.mdx\"><code>getDeployedCode</code></a></li>\n<li><a href=\"/reference/cheatcodes/sleep.mdx\"><code>sleep</code></a></li>\n<li><a href=\"/reference/cheatcodes/unix-time.mdx\"><code>unixTime</code></a></li>\n<li><a href=\"/reference/cheatcodes/set-env.mdx\"><code>setEnv</code></a></li>\n<li><a href=\"/reference/cheatcodes/env-or.mdx\"><code>envOr</code></a></li>\n<li><a href=\"/reference/cheatcodes/env-bool.mdx\"><code>envBool</code></a></li>\n<li><a href=\"/reference/cheatcodes/env-uint.mdx\"><code>envUint</code></a></li>\n<li><a href=\"/reference/cheatcodes/env-int.mdx\"><code>envInt</code></a></li>\n<li><a href=\"/reference/cheatcodes/env-address.mdx\"><code>envAddress</code></a></li>\n<li><a href=\"/reference/cheatcodes/env-bytes32.mdx\"><code>envBytes32</code></a></li>\n<li><a href=\"/reference/cheatcodes/env-string.mdx\"><code>envString</code></a></li>\n<li><a href=\"/reference/cheatcodes/env-bytes.mdx\"><code>envBytes</code></a></li>\n<li><a href=\"/reference/cheatcodes/parse-json.mdx\"><code>parseJson</code></a></li>\n<li><a href=\"/reference/cheatcodes/fs.mdx\"><code>fs</code></a></li>\n</ul>","isPage":true,"text":"\n\nffi\nprompt\nprojectRoot\ngetCode\ngetDeployedCode\nsleep\nunixTime\nsetEnv\nenvOr\nenvBool\nenvUint\nenvInt\nenvAddress\nenvBytes32\nenvString\nenvBytes\nparseJson\nfs\n","title":"External","titles":[null]},"791":{"href":"/reference/cheatcodes/fee#fee","html":"\n","isPage":true,"text":"\n","title":"fee","titles":[null]},"792":{"href":"/reference/cheatcodes/fee#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fee</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction fee(uint256) external;\n","title":"Signature","titles":[null,"fee"]},"793":{"href":"/reference/cheatcodes/fee#description","html":"\n<p>Sets <code>block.basefee</code>.</p>\n","isPage":false,"text":"\nSets block.basefee.\n","title":"Description","titles":[null,"fee"]},"794":{"href":"/reference/cheatcodes/fee#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fee</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">25</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gwei</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.basefee); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 25000000000</span></span></code></pre>","isPage":false,"text":"\nvm.fee(25 gwei);\nemit log_uint(block.basefee); // 25000000000","title":"Examples","titles":[null,"fee"]},"795":{"href":"/reference/cheatcodes/ffi#ffi","html":"\n","isPage":true,"text":"\n","title":"ffi","titles":[null]},"796":{"href":"/reference/cheatcodes/ffi#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ffi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">calldata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction ffi(string[] calldata) external returns (bytes memory);\n","title":"Signature","titles":[null,"ffi"]},"797":{"href":"/reference/cheatcodes/ffi#description","html":"\n<p>Calls an arbitrary command if <a href=\"/config/reference/testing#ffi\"><code>ffi</code></a> is enabled.</p>\n<p>It is generally advised to use this cheat code as a last resort, and to not enable it by default, as anyone who can change the tests of a project will be able to execute arbitrary commands on devices that run the tests.</p>\n","isPage":false,"text":"\nCalls an arbitrary command if ffi is enabled.\nIt is generally advised to use this cheat code as a last resort, and to not enable it by default, as anyone who can change the tests of a project will be able to execute arbitrary commands on devices that run the tests.\n","title":"Description","titles":[null,"ffi"]},"798":{"href":"/reference/cheatcodes/ffi#tips","html":"\n<ul>\n<li>By default the <code>ffi</code> cheatcode assumes the output of the command is a hex encoded value (e.g. a hex string of an ABI encoded value). If hex decoding fails, it will return the output as UTF8 bytes that you can cast to a string.</li>\n<li>Make sure that the output does not include a <code>\\n</code> newline character. (e.g in Rust use <code>print!</code> vs <code>println!</code>)</li>\n<li>Remember that the script will be executed from the top-level directory of your project, not inside <code>test</code></li>\n<li>Make sure that the inputs array does not have empty elements. They will be handled as inputs by the script, instead of space</li>\n<li>Use the cheatcode <code>toString</code> to easily convert arbitrary data to strings, so that you can pass them as command-line arguments</li>\n<li>On Windows some commands like <code>npm</code> or <code>npx</code> fail to execute with <code>program not found</code> error message. To avoid such make sure the command contains file extension as well, like <code>npm.cmd</code> or <code>npx.cmd</code>. These commands can be configured and read as environment variables, so tests doesn&#x27;t need to be changed when running on different operating systems.</li>\n</ul>\n","isPage":false,"text":"\n\nBy default the ffi cheatcode assumes the output of the command is a hex encoded value (e.g. a hex string of an ABI encoded value). If hex decoding fails, it will return the output as UTF8 bytes that you can cast to a string.\nMake sure that the output does not include a \\n newline character. (e.g in Rust use print! vs println!)\nRemember that the script will be executed from the top-level directory of your project, not inside test\nMake sure that the inputs array does not have empty elements. They will be handled as inputs by the script, instead of space\nUse the cheatcode toString to easily convert arbitrary data to strings, so that you can pass them as command-line arguments\nOn Windows some commands like npm or npx fail to execute with program not found error message. To avoid such make sure the command contains file extension as well, like npm.cmd or npx.cmd. These commands can be configured and read as environment variables, so tests doesn&#x27;t need to be changed when running on different operating systems.\n\n","title":"Tips","titles":[null,"ffi"]},"799":{"href":"/reference/cheatcodes/ffi#examples","html":"\n<p>ABI encoded output</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> inputs </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[](</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">inputs[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;echo&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">inputs[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;-n&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ABI encoded &quot;gm&quot;, as a hex string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">inputs[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002676d000000000000000000000000000000000000000000000000000000000000&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> res </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ffi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(inputs);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> output </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">decode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(res, (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(output, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;gm&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>UTF8 string output</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> inputs </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[](</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">inputs[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;echo&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">inputs[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;-n&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">inputs[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;gm&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> res </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ffi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(inputs);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(res), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;gm&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>","isPage":false,"text":"\nABI encoded output\nstring[] memory inputs = new string[](3);\ninputs[0] = &quot;echo&quot;;\ninputs[1] = &quot;-n&quot;;\n// ABI encoded &quot;gm&quot;, as a hex string\ninputs[2] = &quot;0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002676d000000000000000000000000000000000000000000000000000000000000&quot;;\n \nbytes memory res = vm.ffi(inputs);\nstring memory output = abi.decode(res, (string));\nassertEq(output, &quot;gm&quot;);\nUTF8 string output\nstring[] memory inputs = new string[](3);\ninputs[0] = &quot;echo&quot;;\ninputs[1] = &quot;-n&quot;;\ninputs[2] = &quot;gm&quot;;\n \nbytes memory res = vm.ffi(inputs);\nassertEq(string(res), &quot;gm&quot;);","title":"Examples","titles":[null,"ffi"]},"800":{"href":"/reference/cheatcodes/forking#forking","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/create-fork.mdx\"><code>createFork</code></a></li>\n<li><a href=\"/reference/cheatcodes/select-fork.mdx\"><code>selectFork</code></a></li>\n<li><a href=\"/reference/cheatcodes/create-select-fork.mdx\"><code>createSelectFork</code></a></li>\n<li><a href=\"/reference/cheatcodes/active-fork.mdx\"><code>activeFork</code></a></li>\n<li><a href=\"/reference/cheatcodes/roll-fork.mdx\"><code>rollFork</code></a></li>\n<li><a href=\"/reference/cheatcodes/make-persistent.mdx\"><code>makePersistent</code></a></li>\n<li><a href=\"/reference/cheatcodes/revoke-persistent.mdx\"><code>revokePersistent</code></a></li>\n<li><a href=\"/reference/cheatcodes/is-persistent.mdx\"><code>isPersistent</code></a></li>\n<li><a href=\"/reference/cheatcodes/allow-cheatcodes.mdx\"><code>allowCheatcodes</code></a></li>\n<li><a href=\"/reference/cheatcodes/transact.mdx\"><code>transact</code></a></li>\n</ul>","isPage":true,"text":"\n\ncreateFork\nselectFork\ncreateSelectFork\nactiveFork\nrollFork\nmakePersistent\nrevokePersistent\nisPersistent\nallowCheatcodes\ntransact\n","title":"Forking","titles":[null]},"801":{"href":"/reference/cheatcodes/fs#file-cheat-codes","html":"\n","isPage":true,"text":"\n","title":"File cheat codes","titles":[null]},"802":{"href":"/reference/cheatcodes/fs#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Reads the entire content of file to string, (path) =&gt; (data)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> readFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Reads the entire content of file as binary. `path` is relative to the project root.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> readFileBinary</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> path</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> view</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Reads the directory at the given path recursively, up to `maxDepth`.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// `maxDepth` defaults to 1, meaning only the direct children of the given directory will be returned.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Follows symbolic links if `followLinks` is true.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> readDir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> path</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> view</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">DirEntry</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> entries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Reads next line of file to string, (path) =&gt; (line)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> readLine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Reads a symbolic link, returning the path that the link points to.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// This cheatcode will revert in the following situations, but is not limited to just these cases:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// - `path` is not a symbolic link.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// - `path` does not exist.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> readLink</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> linkPath</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> view</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> targetPath</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// (path, data) =&gt; ()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> writeFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Writes line to file, creating a file if it does not exist.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// (path, data) =&gt; ()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> writeLine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Closes file for reading, resetting the offset and allowing to read it from beginning with readLine.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// (path) =&gt; ()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> closeFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Removes file. This cheatcode will revert in the following situations, but is not limited to just these cases:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// - Path points to a directory.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// - The file doesn&#x27;t exist.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// - The user lacks permissions to remove the file.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// (path) =&gt; ()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> removeFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns true if the given path points to an existing entity, else returns false</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// (path) =&gt; (bool)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> exists</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns true if the path exists on disk and is pointing at a regular file, else returns false</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// (path) =&gt; (bool)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> isFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns true if the path exists on disk and is pointing at a directory, else returns false</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// (path) =&gt; (bool)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> isDir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\n// Reads the entire content of file to string, (path) =&gt; (data)\nfunction readFile(string calldata) external returns (string memory);\n/// Reads the entire content of file as binary. `path` is relative to the project root.\nfunction readFileBinary(string calldata path) external view returns (bytes memory data);\n/// Reads the directory at the given path recursively, up to `maxDepth`.\n/// `maxDepth` defaults to 1, meaning only the direct children of the given directory will be returned.\n/// Follows symbolic links if `followLinks` is true.\nfunction readDir(string calldata path) external view returns (DirEntry[] memory entries);\n// Reads next line of file to string, (path) =&gt; (line)\nfunction readLine(string calldata) external returns (string memory);\n/// Reads a symbolic link, returning the path that the link points to.\n/// This cheatcode will revert in the following situations, but is not limited to just these cases:\n/// - `path` is not a symbolic link.\n/// - `path` does not exist.\nfunction readLink(string calldata linkPath) external view returns (string memory targetPath);\n// Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does.\n// (path, data) =&gt; ()\nfunction writeFile(string calldata, string calldata) external;\n// Writes line to file, creating a file if it does not exist.\n// (path, data) =&gt; ()\nfunction writeLine(string calldata, string calldata) external;\n// Closes file for reading, resetting the offset and allowing to read it from beginning with readLine.\n// (path) =&gt; ()\nfunction closeFile(string calldata) external;\n// Removes file. This cheatcode will revert in the following situations, but is not limited to just these cases:\n// - Path points to a directory.\n// - The file doesn&#x27;t exist.\n// - The user lacks permissions to remove the file.\n// (path) =&gt; ()\nfunction removeFile(string calldata) external;\n// Returns true if the given path points to an existing entity, else returns false\n// (path) =&gt; (bool)\nfunction exists(string calldata) external returns (bool);\n// Returns true if the path exists on disk and is pointing at a regular file, else returns false\n// (path) =&gt; (bool)\nfunction isFile(string calldata) external returns (bool);\n// Returns true if the path exists on disk and is pointing at a directory, else returns false\n// (path) =&gt; (bool)\nfunction isDir(string calldata) external returns (bool);\n","title":"Signature","titles":[null,"File cheat codes"]},"803":{"href":"/reference/cheatcodes/fs#description","html":"\n<p>These cheatcodes provided by <a href=\"https://github.com/foundry-rs/forge-std\">forge-std</a> can be used for filesystem manipulation operations.</p>\n<p>By default, filesystem access is disallowed and requires the <code>fs_permissions</code> setting in <code>foundry.toml</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># Configures permissions for cheatcodes that touch the filesystem like `vm.writeFile`</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># `access` restricts how the `path` can be accessed via cheatcodes</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#    `read-write` | `true`   =&gt; `read` + `write` access allowed (`vm.readFile` + `vm.writeFile`)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#    `none`| `false` =&gt; no access</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#    `read` =&gt; only read access (`vm.readFile`)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#    `write` =&gt; only write access (`vm.writeFile`)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># The `allowed_paths` further lists the paths that are considered, e.g. `./` represents the project root directory</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># By default _no_ fs access permission is granted, and _no_ paths are allowed</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># following example enables read access for the project dir _only_:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">#       `fs_permissions = [{ access = &quot;read&quot;, path = &quot;./&quot;}]`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">fs_permissions = [] </span><span style=\"color:#6A737D;--shiki-dark:#768390\"># default: all file cheat codes are disabled</span></span></code></pre>\n","isPage":false,"text":"\nThese cheatcodes provided by forge-std can be used for filesystem manipulation operations.\nBy default, filesystem access is disallowed and requires the fs_permissions setting in foundry.toml:\n# Configures permissions for cheatcodes that touch the filesystem like `vm.writeFile`\n# `access` restricts how the `path` can be accessed via cheatcodes\n#    `read-write` | `true`   =&gt; `read` + `write` access allowed (`vm.readFile` + `vm.writeFile`)\n#    `none`| `false` =&gt; no access\n#    `read` =&gt; only read access (`vm.readFile`)\n#    `write` =&gt; only write access (`vm.writeFile`)\n# The `allowed_paths` further lists the paths that are considered, e.g. `./` represents the project root directory\n# By default _no_ fs access permission is granted, and _no_ paths are allowed\n# following example enables read access for the project dir _only_:\n#       `fs_permissions = [{ access = &quot;read&quot;, path = &quot;./&quot;}]`\nfs_permissions = [] # default: all file cheat codes are disabled\n","title":"Description","titles":[null,"File cheat codes"]},"804":{"href":"/reference/cheatcodes/fs#examples","html":"\n<p>Append a line to a file, this will create the file if it does not exist yet</p>\n<p>This requires read access to the file / project root</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">fs_permissions = [{ access = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;read&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, path = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;./&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}]</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> path </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;output.txt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> line1 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;first line&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">writeLine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(path, line1);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> line2 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;second line&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">writeLine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(path, line2);</span></span></code></pre>\n<p>Write to and read from a file</p>\n<p>This requires read-write access to file / project root:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">fs_permissions = [{ access = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;read-write&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, path = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;./&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}]</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> path </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;file.txt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;hello world&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">writeFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(path, data);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">readFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(path), data);</span></span></code></pre>\n<p>Remove a file</p>\n<p>This requires write access to file / project root:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">fs_permissions = [{ access = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;write&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, path = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;./&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}]</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> path </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;file.txt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">removeFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(path);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertFalse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">exists</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validPath));</span></span></code></pre>\n<p>Verify that a filesystem path is valid</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Verify that path &#x27;foo/files/bar.txt&#x27; exists</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> validPath </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;foo/files/bar.txt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertTrue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">exists</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validPath));</span></span></code></pre>\n<p>Verify that a filesystem path points to a file or directory</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Verify that path &#x27;foo/file/bar.txt&#x27; points to a file</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> validFilePath </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;foo/files/bar.txt&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertTrue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validFilePath));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Verify that &#x27;foo/file&#x27; points to a directory</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> validDirPath </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;foo/files&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertTrue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isDir</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(validDirPath));</span></span></code></pre>","isPage":false,"text":"\nAppend a line to a file, this will create the file if it does not exist yet\nThis requires read access to the file / project root\nfs_permissions = [{ access = &quot;read&quot;, path = &quot;./&quot;}]\nstring memory path = &quot;output.txt&quot;;\n \nstring memory line1 = &quot;first line&quot;;\nvm.writeLine(path, line1);\n \nstring memory line2 = &quot;second line&quot;;\nvm.writeLine(path, line2);\nWrite to and read from a file\nThis requires read-write access to file / project root:\nfs_permissions = [{ access = &quot;read-write&quot;, path = &quot;./&quot;}]\nstring memory path = &quot;file.txt&quot;;\nstring memory data = &quot;hello world&quot;;\nvm.writeFile(path, data);\n \nassertEq(vm.readFile(path), data);\nRemove a file\nThis requires write access to file / project root:\nfs_permissions = [{ access = &quot;write&quot;, path = &quot;./&quot;}]\nstring memory path = &quot;file.txt&quot;;\nvm.removeFile(path);\n \nassertFalse(vm.exists(validPath));\nVerify that a filesystem path is valid\n// Verify that path &#x27;foo/files/bar.txt&#x27; exists\nstring memory validPath = &quot;foo/files/bar.txt&quot;;\nassertTrue(vm.exists(validPath));\nVerify that a filesystem path points to a file or directory\n// Verify that path &#x27;foo/file/bar.txt&#x27; points to a file\nstring memory validFilePath = &quot;foo/files/bar.txt&quot;;\nassertTrue(vm.isFile(validFilePath));\n \n// Verify that &#x27;foo/file&#x27; points to a directory\nstring memory validDirPath = &quot;foo/files&quot;;\nassertTrue(vm.isDir(validDirPath));","title":"Examples","titles":[null,"File cheat codes"]},"805":{"href":"/reference/cheatcodes/fuzzer#fuzzer","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/assume.mdx\"><code>assume</code></a></li>\n<li><a href=\"/reference/cheatcodes/assume-no-revert.mdx\"><code>assumeNoRevert</code></a></li>\n</ul>","isPage":true,"text":"\n\nassume\nassumeNoRevert\n","title":"Fuzzer","titles":[null]},"806":{"href":"/reference/cheatcodes/gas-snapshots#snapshotgas-cheatcodes","html":"\n","isPage":true,"text":"\n","title":"snapshotGas cheatcodes","titles":[null]},"807":{"href":"/reference/cheatcodes/gas-snapshots#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Start a snapshot capture of the current gas usage by name.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// The group name is derived from the contract name.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> startSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Start a snapshot capture of the current gas usage by name in a group.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> startSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> group</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Stop the snapshot capture of the current gas by latest snapshot name, capturing the gas used since the start.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> stopSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> gasUsed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Stop the snapshot capture of the current gas usage by name, capturing the gas used since the start.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// The group name is derived from the contract name.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> stopSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> gasUsed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Stop the snapshot capture of the current gas usage by name in a group, capturing the gas used since the start.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> stopSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> group</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> gasUsed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Snapshot capture an arbitrary numerical value by name.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// The group name is derived from the contract name.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> snapshotValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Snapshot capture an arbitrary numerical value by name in a group.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> snapshotValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> group</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Snapshot capture the gas usage of the last call by name from the callee perspective.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> snapshotGasLastCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> gasUsed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Snapshot capture the gas usage of the last call by name in a group from the callee perspective.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> snapshotGasLastCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> group</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> gasUsed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\n/// Start a snapshot capture of the current gas usage by name.\n/// The group name is derived from the contract name.\nfunction startSnapshotGas(string calldata name) external;\n \n/// Start a snapshot capture of the current gas usage by name in a group.\nfunction startSnapshotGas(string calldata group, string calldata name) external;\n \n/// Stop the snapshot capture of the current gas by latest snapshot name, capturing the gas used since the start.\nfunction stopSnapshotGas() external returns (uint256 gasUsed);\n \n/// Stop the snapshot capture of the current gas usage by name, capturing the gas used since the start.\n/// The group name is derived from the contract name.\nfunction stopSnapshotGas(string calldata name) external returns (uint256 gasUsed);\n \n/// Stop the snapshot capture of the current gas usage by name in a group, capturing the gas used since the start.\nfunction stopSnapshotGas(string calldata group, string calldata name) external returns (uint256 gasUsed);\n \n/// Snapshot capture an arbitrary numerical value by name.\n/// The group name is derived from the contract name.\nfunction snapshotValue(string calldata name, uint256 value) external;\n \n/// Snapshot capture an arbitrary numerical value by name in a group.\nfunction snapshotValue(string calldata group, string calldata name, uint256 value) external;\n \n/// Snapshot capture the gas usage of the last call by name from the callee perspective.\nfunction snapshotGasLastCall(string calldata name) external returns (uint256 gasUsed);\n \n/// Snapshot capture the gas usage of the last call by name in a group from the callee perspective.\nfunction snapshotGasLastCall(string calldata group, string calldata name) external returns (uint256 gasUsed);\n","title":"Signature","titles":[null,"snapshotGas cheatcodes"]},"808":{"href":"/reference/cheatcodes/gas-snapshots#description","html":"\n<p><code>snapshotGas*</code> cheatcodes allow you to capture gas usage in your tests. This can be useful to track how much gas your logic is consuming. You can capture the gas usage of the last call by name, capture an arbitrary numerical value by name, or start and stop a snapshot capture of the current gas usage by name.</p>\n<p>In order to strictly compare gas usage across test runs you can set one of the following:</p>\n<ul>\n<li>Set the <code>FORGE_SNAPSHOT_CHECK=true</code> environment variable</li>\n<li>Set <code>gas_snapshot_check = true</code> in <code>foundry.toml</code></li>\n<li>Pass <code>--gas-snapshot-check=true</code></li>\n</ul>\n<p>By default this is <strong>not enabled</strong> and passing <code>--gas-snapshot-check=false</code> will override all others.</p>\n<p>This will compare the gas usage of your tests against the last snapshot and fail if the gas usage has changed.</p>\n<p>It is intended that the <code>snapshots</code> directory created when using the <code>snapshotGas*</code> cheatcodes is checked into version control. This allows you to track changes in gas usage over time and compare gas usage during code reviews.</p>\n<p>To disable the emitting of gas snapshots you can set one of the following:</p>\n<ul>\n<li>Set the <code>FORGE_SNAPSHOT_EMIT=false</code> environment variable.</li>\n<li>Set <code>gas_snapshot_emit = false</code> in <code>foundry.toml</code>.</li>\n<li>Pass <code>--gas-snapshot-emit=false</code></li>\n</ul>\n<p>By default this is <strong>enabled</strong> and gas snapshots are written to disk.</p>\n<blockquote>\n<p>ℹ️ <strong>Isolated tests</strong></p>\n<p>These cheatcodes are not accurate if not using isolated test mode.</p>\n<p>You can enable isolation mode by passing the <code>--isolate</code> flag or\ntag the test function with the following inline configuration:</p>\n<p><code>/// forge-config: default.isolate = true</code></p>\n</blockquote>\n","isPage":false,"text":"\nsnapshotGas* cheatcodes allow you to capture gas usage in your tests. This can be useful to track how much gas your logic is consuming. You can capture the gas usage of the last call by name, capture an arbitrary numerical value by name, or start and stop a snapshot capture of the current gas usage by name.\nIn order to strictly compare gas usage across test runs you can set one of the following:\n\nSet the FORGE_SNAPSHOT_CHECK=true environment variable\nSet gas_snapshot_check = true in foundry.toml\nPass --gas-snapshot-check=true\n\nBy default this is not enabled and passing --gas-snapshot-check=false will override all others.\nThis will compare the gas usage of your tests against the last snapshot and fail if the gas usage has changed.\nIt is intended that the snapshots directory created when using the snapshotGas* cheatcodes is checked into version control. This allows you to track changes in gas usage over time and compare gas usage during code reviews.\nTo disable the emitting of gas snapshots you can set one of the following:\n\nSet the FORGE_SNAPSHOT_EMIT=false environment variable.\nSet gas_snapshot_emit = false in foundry.toml.\nPass --gas-snapshot-emit=false\n\nBy default this is enabled and gas snapshots are written to disk.\n\nℹ️ Isolated tests\nThese cheatcodes are not accurate if not using isolated test mode.\nYou can enable isolation mode by passing the --isolate flag or\ntag the test function with the following inline configuration:\n/// forge-config: default.isolate = true\n\n","title":"Description","titles":[null,"snapshotGas cheatcodes"]},"809":{"href":"/reference/cheatcodes/gas-snapshots#examples","html":"\n<p>Capturing the gas usage of a section of code that calls an external contract:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SnapshotGasTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Flare </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flare;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flare </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Flare</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;externalA&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flare.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gasUsed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Capturing the gas usage of multiple sections of code that modify the internal state:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SnapshotGasTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> slot0;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// Writes to `snapshots/SnapshotGasTest.json` group with name `internalA`, `internalB`, and `internalC`.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;internalA&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        slot0 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;internalB&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        slot0 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;internalC&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        slot0 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Capturing the gas usage of a section of code that modifies both the internal state and calls an external contract:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SnapshotGasTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> slot0;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Flare </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flare;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flare </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Flare</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// Writes to `snapshots/SnapshotGasTest.json` group with name `combinedA`.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;combinedA&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flare.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        slot0 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Capturing an arbitrary numerical value (such as the bytecode size of a contract):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SnapshotGasTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> slot0;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// Writes to `snapshots/SnapshotGasTest.json` group with name `valueA`, `valueB`, and `valueC`.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testSnapshotValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 123</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 456</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> c </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 789</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">snapshotValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valueA&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, a);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">snapshotValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valueB&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, b);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">snapshotValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;valueC&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, c);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Capturing the gas usage of the last call from the callee perspective:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SnapshotGasTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Flare </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> flare;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flare </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Flare</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// Writes to `snapshots/SnapshotGasTest.json` group with name `lastCallA`.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testSnapshotGasLastCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        flare.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">snapshotGasLastCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;lastCallA&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>For each of the above examples you can also use the <code>group</code> variant of the cheatcodes to group the snapshots together in a custom group.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SnapshotGasTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> slot0;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// Writes to `snapshots/CustomGroup.json` group with name `internalA`, `internalB`, and `internalC`.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;CustomGroup&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;internalA&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        slot0 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;CustomGroup&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;internalB&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        slot0 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;CustomGroup&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;internalC&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        slot0 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopSnapshotGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nCapturing the gas usage of a section of code that calls an external contract:\ncontract SnapshotGasTest is Test {\n    Flare public flare;\n \n    function setUp() public {\n        flare = new Flare();\n    }\n \n    function testSnapshotGas() public {\n        vm.startSnapshotGas(&quot;externalA&quot;);\n        flare.run(256);\n        uint256 gasUsed = vm.stopSnapshotGas();\n    }\n}\nCapturing the gas usage of multiple sections of code that modify the internal state:\ncontract SnapshotGasTest is Test {\n    uint256 public slot0;\n \n    /// Writes to `snapshots/SnapshotGasTest.json` group with name `internalA`, `internalB`, and `internalC`.\n    function testSnapshotGas() public {\n        vm.startSnapshotGas(&quot;internalA&quot;);\n        slot0 = 1;\n        vm.stopSnapshotGas();\n \n        vm.startSnapshotGas(&quot;internalB&quot;);\n        slot0 = 2;\n        vm.stopSnapshotGas();\n \n        vm.startSnapshotGas(&quot;internalC&quot;);\n        slot0 = 0;\n        vm.stopSnapshotGas();\n    }\n}\nCapturing the gas usage of a section of code that modifies both the internal state and calls an external contract:\ncontract SnapshotGasTest is Test {\n    uint256 public slot0;\n    Flare public flare;\n \n    function setUp() public {\n        flare = new Flare();\n    }\n \n    /// Writes to `snapshots/SnapshotGasTest.json` group with name `combinedA`.\n    function testSnapshotGas() public {\n        vm.startSnapshotGas(&quot;combinedA&quot;);\n        flare.run(256);\n        slot0 = 1;\n        vm.stopSnapshotGas();\n    }\n}\nCapturing an arbitrary numerical value (such as the bytecode size of a contract):\ncontract SnapshotGasTest is Test {\n    uint256 public slot0;\n \n    /// Writes to `snapshots/SnapshotGasTest.json` group with name `valueA`, `valueB`, and `valueC`.\n    function testSnapshotValue() public {\n        uint256 a = 123;\n        uint256 b = 456;\n        uint256 c = 789;\n \n        vm.snapshotValue(&quot;valueA&quot;, a);\n        vm.snapshotValue(&quot;valueB&quot;, b);\n        vm.snapshotValue(&quot;valueC&quot;, c);\n    }\n}\nCapturing the gas usage of the last call from the callee perspective:\ncontract SnapshotGasTest is Test {\n    Flare public flare;\n \n    function setUp() public {\n        flare = new Flare();\n    }\n \n    /// Writes to `snapshots/SnapshotGasTest.json` group with name `lastCallA`.\n    function testSnapshotGasLastCall() public {\n        flare.run(1);\n        vm.snapshotGasLastCall(&quot;lastCallA&quot;);\n    }\n}\nFor each of the above examples you can also use the group variant of the cheatcodes to group the snapshots together in a custom group.\ncontract SnapshotGasTest is Test {\n    uint256 public slot0;\n \n    /// Writes to `snapshots/CustomGroup.json` group with name `internalA`, `internalB`, and `internalC`.\n    function testSnapshotGas() public {\n        vm.startSnapshotGas(&quot;CustomGroup&quot;, &quot;internalA&quot;);\n        slot0 = 1;\n        vm.stopSnapshotGas();\n \n        vm.startSnapshotGas(&quot;CustomGroup&quot;, &quot;internalB&quot;);\n        slot0 = 2;\n        vm.stopSnapshotGas();\n \n        vm.startSnapshotGas(&quot;CustomGroup&quot;, &quot;internalC&quot;);\n        slot0 = 0;\n        vm.stopSnapshotGas();\n    }\n}","title":"Examples","titles":[null,"snapshotGas cheatcodes"]},"810":{"href":"/reference/cheatcodes/get-block-number#getblocknumber","html":"\n","isPage":true,"text":"\n","title":"getBlockNumber","titles":[null]},"811":{"href":"/reference/cheatcodes/get-block-number#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getBlockNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> view</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> height</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction getBlockNumber() external view returns (uint256 height);\n","title":"Signature","titles":[null,"getBlockNumber"]},"812":{"href":"/reference/cheatcodes/get-block-number#description","html":"\n<p>Gets the current <code>block.number</code>. This is useful in cases where <code>vm.roll</code> along with <code>--via-ir</code> compilation is used, as <code>block.number</code> is assumed to be a constant during a transaction. This means that on every forge test, multiple calls to <code>block.number</code> would get optimized to just returning a constant value, instead of actually accessing the current <code>block.number</code>. <code>vm.getBlockNumber()</code> avoids this optimization and returns the current <code>block.number</code>.</p>\n","isPage":false,"text":"\nGets the current block.number. This is useful in cases where vm.roll along with --via-ir compilation is used, as block.number is assumed to be a constant during a transaction. This means that on every forge test, multiple calls to block.number would get optimized to just returning a constant value, instead of actually accessing the current block.number. vm.getBlockNumber() avoids this optimization and returns the current block.number.\n","title":"Description","titles":[null,"getBlockNumber"]},"813":{"href":"/reference/cheatcodes/get-block-number#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> height </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlockNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(height, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.number));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">roll</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlockNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>","isPage":false,"text":"\nuint256 height = vm.getBlockNumber();\nassertEq(height, uint256(block.number));\nvm.roll(10);\nassertEq(vm.getBlockNumber(), 10);","title":"Examples","titles":[null,"getBlockNumber"]},"814":{"href":"/reference/cheatcodes/get-block-timestamp#getblocktimestamp","html":"\n","isPage":true,"text":"\n","title":"getBlockTimestamp","titles":[null]},"815":{"href":"/reference/cheatcodes/get-block-timestamp#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getBlockTimestamp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> view</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> timestamp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction getBlockTimestamp() external view returns (uint256 timestamp);\n","title":"Signature","titles":[null,"getBlockTimestamp"]},"816":{"href":"/reference/cheatcodes/get-block-timestamp#description","html":"\n<p>Gets the current <code>block.timestamp</code>. This is useful in cases where <code>vm.warp</code> along with <code>--via-ir</code> compilation is used, as <code>block.timestamp</code> is assumed to be a constant during a transaction. This means that in every forge test, multiple calls to <code>block.timestamp</code> would get optimized to just returning a constant value, instead of actually accessing the current <code>block.timestamp</code>. <code>vm.getBlockTimestamp()</code> avoids this optimization and returns the current <code>block.timestamp</code>.</p>\n","isPage":false,"text":"\nGets the current block.timestamp. This is useful in cases where vm.warp along with --via-ir compilation is used, as block.timestamp is assumed to be a constant during a transaction. This means that in every forge test, multiple calls to block.timestamp would get optimized to just returning a constant value, instead of actually accessing the current block.timestamp. vm.getBlockTimestamp() avoids this optimization and returns the current block.timestamp.\n","title":"Description","titles":[null,"getBlockTimestamp"]},"817":{"href":"/reference/cheatcodes/get-block-timestamp#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlockTimestamp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;timestamp should be 1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">warp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlockTimestamp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;warp failed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>","isPage":false,"text":"\nassertEq(vm.getBlockTimestamp(), 1, &quot;timestamp should be 1&quot;);\nvm.warp(10);\nassertEq(vm.getBlockTimestamp(), 10, &quot;warp failed&quot;);","title":"Examples","titles":[null,"getBlockTimestamp"]},"818":{"href":"/reference/cheatcodes/get-code#getcode","html":"\n","isPage":true,"text":"\n","title":"getCode","titles":[null]},"819":{"href":"/reference/cheatcodes/get-code#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction getCode(string calldata) external returns (bytes memory);\n","title":"Signature","titles":[null,"getCode"]},"820":{"href":"/reference/cheatcodes/get-code#description","html":"\n<p>Returns the <strong>creation</strong> bytecode for a contract in the project given the path to the contract.</p>\n<p>The calldata parameter can either be in the form <code>ContractFile.sol</code> (if the filename and contract name are the same), <code>ContractFile.sol:ContractName</code>, or the path to an artifact, relative to the root of your project.</p>\n<blockquote>\n<p>ℹ️ <strong>Note</strong></p>\n<p><code>getCode</code> requires read permission for the output directory, see <a href=\"/reference/cheatcodes/fs.mdx\">file cheatcodes</a>.</p>\n<p>To grant read access set <code>fs_permissions = [{ access = &quot;read&quot;, path = &quot;./out&quot;}]</code> in your <code>foundry.toml</code>.</p>\n</blockquote>\n","isPage":false,"text":"\nReturns the creation bytecode for a contract in the project given the path to the contract.\nThe calldata parameter can either be in the form ContractFile.sol (if the filename and contract name are the same), ContractFile.sol:ContractName, or the path to an artifact, relative to the root of your project.\n\nℹ️ Note\ngetCode requires read permission for the output directory, see file cheatcodes.\nTo grant read access set fs_permissions = [{ access = &quot;read&quot;, path = &quot;./out&quot;}] in your foundry.toml.\n\n","title":"Description","titles":[null,"getCode"]},"821":{"href":"/reference/cheatcodes/get-code#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">MyContract myContract </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> MyContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(arg1, arg2);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Let&#x27;s do the same thing with `getCode`</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> args </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(arg1, arg2);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bytecode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MyContract.sol:MyContract&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), args);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> anotherAddress;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">assembly</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    anotherAddress </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> create</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(bytecode, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0x20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mload</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(bytecode))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(myContract).code, anotherAddress.code); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// [PASS]</span></span></code></pre>\n<p>Deploy a contract to an arbitrary address by combining <code>getCode</code> and <a href=\"/reference/cheatcodes/etch.mdx\"><code>etch</code></a></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Deploy</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> args </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(arg1, arg2);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bytecode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MyContract.sol:MyContract&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), args);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> deployed;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">assembly</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    deployed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> create</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(bytecode, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0x20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mload</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(bytecode))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set the bytecode of an arbitrary address</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">etch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(targetAddr, deployed.code);</span></span></code></pre>\n","isPage":false,"text":"\nMyContract myContract = new MyContract(arg1, arg2);\n \n// Let&#x27;s do the same thing with `getCode`\nbytes memory args = abi.encode(arg1, arg2);\nbytes memory bytecode = abi.encodePacked(vm.getCode(&quot;MyContract.sol:MyContract&quot;), args);\naddress anotherAddress;\nassembly {\n    anotherAddress := create(0, add(bytecode, 0x20), mload(bytecode))\n}\n \nassertEq0(address(myContract).code, anotherAddress.code); // [PASS]\nDeploy a contract to an arbitrary address by combining getCode and etch\n// Deploy\nbytes memory args = abi.encode(arg1, arg2);\nbytes memory bytecode = abi.encodePacked(vm.getCode(&quot;MyContract.sol:MyContract&quot;), args);\naddress deployed;\nassembly {\n    deployed := create(0, add(bytecode, 0x20), mload(bytecode))\n}\n \n// Set the bytecode of an arbitrary address\nvm.etch(targetAddr, deployed.code);\n","title":"Examples","titles":[null,"getCode"]},"822":{"href":"/reference/cheatcodes/get-code#supported-formats","html":"\n<p>You can fetch artifacts by either contract path or contract name. Fetching artifacts for a specific version is also supported. If not provided, cheatcode will default to the version of a test being executed or the only version artifact was compiled with.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MyContract.sol:MyContract&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MyContract&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MyContract.sol:0.8.18&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MyContract:0.8.18&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nYou can fetch artifacts by either contract path or contract name. Fetching artifacts for a specific version is also supported. If not provided, cheatcode will default to the version of a test being executed or the only version artifact was compiled with.\nvm.getCode(&quot;MyContract.sol:MyContract&quot;);\nvm.getCode(&quot;MyContract&quot;);\nvm.getCode(&quot;MyContract.sol:0.8.18&quot;);\nvm.getCode(&quot;MyContract:0.8.18&quot;);\n","title":"Supported formats","titles":[null,"getCode"]},"823":{"href":"/reference/cheatcodes/get-code#see-also","html":"\n<p><a href=\"/reference/cheatcodes/get-deployed-code.mdx\"><code>getDeployedCode</code></a>\n<a href=\"/reference/cheatcodes/etch.mdx\"><code>etch</code></a></p>\n<p>Forge Standard Library</p>\n<p><a href=\"/reference/forge-std/deployCode.mdx\"><code>deployCode</code></a>\n<a href=\"/reference/forge-std/deployCodeTo.mdx\"><code>deployCodeTo</code></a></p>","isPage":false,"text":"\ngetDeployedCode\netch\nForge Standard Library\ndeployCode\ndeployCodeTo","title":"SEE ALSO","titles":[null,"getCode"]},"824":{"href":"/reference/cheatcodes/get-deployed-code#getdeployedcode","html":"\n","isPage":true,"text":"\n","title":"getDeployedCode","titles":[null]},"825":{"href":"/reference/cheatcodes/get-deployed-code#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getDeployedCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction getDeployedCode(string calldata) external returns (bytes memory);\n","title":"Signature","titles":[null,"getDeployedCode"]},"826":{"href":"/reference/cheatcodes/get-deployed-code#description","html":"\n<p>This cheatcode works similar to <a href=\"/reference/cheatcodes/get-code.mdx\"><code>getCode</code></a> but only returns the <strong>deployed</strong> bytecode (aka runtime\nbytecode) for a contract in the project given the path to the contract.</p>\n<p>The main use case for this cheat code is as a shortcut to deploy stateless contracts to arbitrary addresses.</p>\n<p>The calldata parameter can either be in the form <code>ContractFile.sol</code> (if the filename and contract name are the same)\n, <code>ContractFile.sol:ContractName</code>, or the path to an artifact, relative to the root of your project.</p>\n<blockquote>\n<p>ℹ️ <strong>Note</strong></p>\n<p><code>getDeployedCode</code> requires read permission for the output directory, see <a href=\"/reference/cheatcodes/fs.mdx\">file cheatcodes</a>.</p>\n<p>To grant read access set <code>fs_permissions = [{ access = &quot;read&quot;, path = &quot;./out&quot;}]</code> in your <code>foundry.toml</code>.</p>\n</blockquote>\n","isPage":false,"text":"\nThis cheatcode works similar to getCode but only returns the deployed bytecode (aka runtime\nbytecode) for a contract in the project given the path to the contract.\nThe main use case for this cheat code is as a shortcut to deploy stateless contracts to arbitrary addresses.\nThe calldata parameter can either be in the form ContractFile.sol (if the filename and contract name are the same)\n, ContractFile.sol:ContractName, or the path to an artifact, relative to the root of your project.\n\nℹ️ Note\ngetDeployedCode requires read permission for the output directory, see file cheatcodes.\nTo grant read access set fs_permissions = [{ access = &quot;read&quot;, path = &quot;./out&quot;}] in your foundry.toml.\n\n","title":"Description","titles":[null,"getDeployedCode"]},"827":{"href":"/reference/cheatcodes/get-deployed-code#examples","html":"\n<p>Deploy a stateless contract at an arbitrary address using <code>getDeployedCode</code> and <a href=\"/reference/cheatcodes/etch.mdx\"><code>etch</code></a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// A stateless contract that we want deployed at a specific address</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Override</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Payload</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> target</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> emitPayload</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> target</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> message</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> payable</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Payload</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">msg.sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, target, message);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// get the **deployedBytecode**</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> code </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getDeployedCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Override.sol:Override&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// set the code of an arbitrary address</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> overrideAddress </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">etch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(overrideAddress, code);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(overrideAddress.code, code);</span></span></code></pre>\n","isPage":false,"text":"\nDeploy a stateless contract at an arbitrary address using getDeployedCode and etch.\n// A stateless contract that we want deployed at a specific address\ncontract Override {\n    event Payload(address sender, address target, bytes data);\n \n    function emitPayload(\n        address target, bytes calldata message\n    ) external payable returns (uint256) {\n        emit Payload(msg.sender, target, message);\n        return 0;\n    }\n}\n \n// get the **deployedBytecode**\nbytes memory code = vm.getDeployedCode(&quot;Override.sol:Override&quot;);\n \n// set the code of an arbitrary address\naddress overrideAddress = address(64);\nvm.etch(overrideAddress, code);\nassertEq(overrideAddress.code, code);\n","title":"Examples","titles":[null,"getDeployedCode"]},"828":{"href":"/reference/cheatcodes/get-deployed-code#supported-formats","html":"\n<p>You can fetch artifacts by either contract path or contract name. Fetching artifacts for a specific version is also supported. If not provided, cheatcode will default to the version of a test being executed or the only version artifact was compiled with.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getDeployedCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MyContract.sol:MyContract&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getDeployedCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MyContract&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getDeployedCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MyContract.sol:0.8.18&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getDeployedCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MyContract:0.8.18&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nYou can fetch artifacts by either contract path or contract name. Fetching artifacts for a specific version is also supported. If not provided, cheatcode will default to the version of a test being executed or the only version artifact was compiled with.\nvm.getDeployedCode(&quot;MyContract.sol:MyContract&quot;);\nvm.getDeployedCode(&quot;MyContract&quot;);\nvm.getDeployedCode(&quot;MyContract.sol:0.8.18&quot;);\nvm.getDeployedCode(&quot;MyContract:0.8.18&quot;);\n","title":"Supported formats","titles":[null,"getDeployedCode"]},"829":{"href":"/reference/cheatcodes/get-deployed-code#see-also","html":"\n<p>Forge Standard Library</p>\n<p><a href=\"/reference/cheatcodes/get-code.mdx\"><code>getCode</code></a>\n<a href=\"/reference/cheatcodes/etch.mdx\"><code>etch</code></a></p>","isPage":false,"text":"\nForge Standard Library\ngetCode\netch","title":"SEE ALSO","titles":[null,"getDeployedCode"]},"830":{"href":"/reference/cheatcodes/get-label#getlabel","html":"\n","isPage":true,"text":"\n","title":"getLabel","titles":[null]},"831":{"href":"/reference/cheatcodes/get-label#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getLabel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction getLabel(address) external returns (string memory);\n","title":"Signature","titles":[null,"getLabel"]},"832":{"href":"/reference/cheatcodes/get-label#description","html":"\n<p>Retrieves the label for an address if it was previously labeled. If not, it returns the address prefixed with <code>unlabeled:</code>.</p>","isPage":false,"text":"\nRetrieves the label for an address if it was previously labeled. If not, it returns the address prefixed with unlabeled:.","title":"Description","titles":[null,"getLabel"]},"833":{"href":"/reference/cheatcodes/get-nonce#getnonce","html":"\n","isPage":true,"text":"\n","title":"getNonce","titles":[null]},"834":{"href":"/reference/cheatcodes/get-nonce#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getNonce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> account</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getNonce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">Wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> wallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction getNonce(address account) external returns (uint64);\nfunction getNonce(Wallet memory wallet) external returns (uint64);\n","title":"Signature","titles":[null,"getNonce"]},"835":{"href":"/reference/cheatcodes/get-nonce#description","html":"\n<p>Gets the nonce of the given account or <a href=\"/reference/cheatcodes/create-wallet.mdx\">Wallet</a>.</p>\n","isPage":false,"text":"\nGets the nonce of the given account or Wallet.\n","title":"Description","titles":[null,"getNonce"]},"836":{"href":"/reference/cheatcodes/get-nonce#examples","html":"\n","isPage":false,"text":"\n","title":"Examples","titles":[null,"getNonce"]},"837":{"href":"/reference/cheatcodes/get-nonce#address","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> nonce </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getNonce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(nonce); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 0</span></span></code></pre>\n","isPage":false,"text":"\nuint256 nonce = vm.getNonce(address(100));\nemit log_uint(nonce); // 0\n","title":"address","titles":[null,"getNonce","Examples"]},"838":{"href":"/reference/cheatcodes/get-nonce#wallet","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Wallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> alice </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;alice&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> nonce </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getNonce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(nonce); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 0</span></span></code></pre>","isPage":false,"text":"\nWallet memory alice = vm.createWallet(&quot;alice&quot;);\nuint256 nonce = vm.getNonce(alice);\nemit log_uint(nonce); // 0","title":"Wallet","titles":[null,"getNonce","Examples"]},"839":{"href":"/reference/cheatcodes/get-recorded-logs#getrecordedlogs","html":"\n","isPage":true,"text":"\n","title":"getRecordedLogs","titles":[null]},"840":{"href":"/reference/cheatcodes/get-recorded-logs#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] topics;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> emitter;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getRecordedLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  Log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nstruct Log {\n  bytes32[] topics;\n  bytes data;\n  address emitter;\n}\n \nfunction getRecordedLogs()\nexternal\nreturns (\n  Log[] memory\n);\n","title":"Signature","titles":[null,"getRecordedLogs"]},"841":{"href":"/reference/cheatcodes/get-recorded-logs#description","html":"\n<p>Gets the emitted events recorded by <a href=\"/reference/cheatcodes/record-logs.mdx\"><code>recordLogs</code></a>.</p>\n<p>This function will consume the recorded logs when called.</p>\n","isPage":false,"text":"\nGets the emitted events recorded by recordLogs.\nThis function will consume the recorded logs when called.\n","title":"Description","titles":[null,"getRecordedLogs"]},"842":{"href":"/reference/cheatcodes/get-recorded-logs#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// event LogTopic1(</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">///   uint256 indexed topic1,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">///   bytes data</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// );</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// event LogTopic12(</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">///   uint256 indexed topic1,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">///   uint256 indexed topic2,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">///   bytes data</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// );</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// bytes memory testData0 = &quot;Some data&quot;;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// bytes memory testData1 = &quot;Other data&quot;;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Start the recorder</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">recordLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> LogTopic1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, testData0);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> LogTopic12</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">30</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, testData1);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Notice that your entries are &lt;Interface&gt;.Log[]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// as opposed to &lt;instance&gt;.Log[]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Vm.Log[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> entries </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getRecordedLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(entries.length, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Recall that topics[0] is the event signature</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(entries[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].topics.length, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(entries[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].topics[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;LogTopic1(uint256,bytes)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(entries[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].topics[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)));</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// assertEq won&#x27;t compare bytes variables. Try with strings instead.</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">decode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(entries[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].data, (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(testData0));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(entries[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].topics.length, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(entries[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].topics[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;LogTopic12(uint256,uint256,bytes)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(entries[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].topics[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(entries[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].topics[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">30</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">decode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(entries[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].data, (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(testData1));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Emit another event</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> LogTopic1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">40</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, testData0);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Your last read consumed the recorded logs,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// you will only get the latest emitted even after that call</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">entries </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getRecordedLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(entries.length, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(entries[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].topics.length, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(entries[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].topics[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;LogTopic1(uint256,bytes)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(entries[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].topics[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">40</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">decode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(entries[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].data, (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(testData0));</span></span></code></pre>","isPage":false,"text":"\n/// event LogTopic1(\n///   uint256 indexed topic1,\n///   bytes data\n/// );\n \n/// event LogTopic12(\n///   uint256 indexed topic1,\n///   uint256 indexed topic2,\n///   bytes data\n/// );\n \n/// bytes memory testData0 = &quot;Some data&quot;;\n/// bytes memory testData1 = &quot;Other data&quot;;\n \n \n// Start the recorder\nvm.recordLogs();\n \nemit LogTopic1(10, testData0);\nemit LogTopic12(20, 30, testData1);\n \n// Notice that your entries are &lt;Interface&gt;.Log[]\n// as opposed to &lt;instance&gt;.Log[]\nVm.Log[] memory entries = vm.getRecordedLogs();\n \nassertEq(entries.length, 2);\n \n// Recall that topics[0] is the event signature\nassertEq(entries[0].topics.length, 2);\nassertEq(entries[0].topics[0], keccak256(&quot;LogTopic1(uint256,bytes)&quot;));\nassertEq(entries[0].topics[1], bytes32(uint256(10)));\n// assertEq won&#x27;t compare bytes variables. Try with strings instead.\nassertEq(abi.decode(entries[0].data, (string)), string(testData0));\n \nassertEq(entries[1].topics.length, 3);\nassertEq(entries[1].topics[0], keccak256(&quot;LogTopic12(uint256,uint256,bytes)&quot;));\nassertEq(entries[1].topics[1], bytes32(uint256(20)));\nassertEq(entries[1].topics[2], bytes32(uint256(30)));\nassertEq(abi.decode(entries[1].data, (string)), string(testData1));\n \n// Emit another event\nemit LogTopic1(40, testData0);\n \n// Your last read consumed the recorded logs,\n// you will only get the latest emitted even after that call\nentries = vm.getRecordedLogs();\n \nassertEq(entries.length, 1);\n \nassertEq(entries[0].topics.length, 2);\nassertEq(entries[0].topics[0], keccak256(&quot;LogTopic1(uint256,bytes)&quot;));\nassertEq(entries[0].topics[1], bytes32(uint256(40)));\nassertEq(abi.decode(entries[0].data, (string)), string(testData0));","title":"Examples","titles":[null,"getRecordedLogs"]},"843":{"href":"/reference/cheatcodes/is-context#iscontext","html":"\n","isPage":true,"text":"\n","title":"isContext","titles":[null]},"844":{"href":"/reference/cheatcodes/is-context#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">enum</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ForgeContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Test group execution context (test, coverage or snapshot).</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    TestGroup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // `forge test` execution context.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // `forge coverage` execution context.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    Coverage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // `forge snapshot` execution context.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    Snapshot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Script group execution context (dry run, broadcast or resume).</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    ScriptGroup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // `forge script` execution context.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    ScriptDryRun</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // `forge script --broadcast` execution context.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    ScriptBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // `forge script --resume` execution context.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    ScriptResume</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Unknown `forge` execution context.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    Unknown</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> isContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">ForgeContext</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> context</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> view</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nenum ForgeContext {\n    // Test group execution context (test, coverage or snapshot).\n    TestGroup,\n    // `forge test` execution context.\n    Test,\n    // `forge coverage` execution context.\n    Coverage,\n    // `forge snapshot` execution context.\n    Snapshot,\n    // Script group execution context (dry run, broadcast or resume).\n    ScriptGroup,\n    // `forge script` execution context.\n    ScriptDryRun,\n    // `forge script --broadcast` execution context.\n    ScriptBroadcast,\n    // `forge script --resume` execution context.\n    ScriptResume,\n    // Unknown `forge` execution context.\n    Unknown\n}\n \nfunction isContext(ForgeContext context) external view returns (bool result);\n","title":"Signature","titles":[null,"isContext"]},"845":{"href":"/reference/cheatcodes/is-context#description","html":"\n<p>Checks the current <code>forge</code> execution context.</p>\n","isPage":false,"text":"\nChecks the current forge execution context.\n","title":"Description","titles":[null,"isContext"]},"846":{"href":"/reference/cheatcodes/is-context#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">VmSafe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/Vm.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(VmSafe.ForgeContext.ScriptDryRun)) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // execute specific script dry run logic</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(VmSafe.ForgeContext.ScriptBroadcast)) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // execute specific script broadcast logic</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isContext</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(VmSafe.ForgeContext.ScriptResume)) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // execute specific script resume logic</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nimport {VmSafe} from &quot;forge-std/Vm.sol&quot;;\n \nif (vm.isContext(VmSafe.ForgeContext.ScriptDryRun)) {\n    // execute specific script dry run logic\n}\n \nif (vm.isContext(VmSafe.ForgeContext.ScriptBroadcast)) {\n    // execute specific script broadcast logic\n}\n \nif (vm.isContext(VmSafe.ForgeContext.ScriptResume)) {\n    // execute specific script resume logic\n}","title":"Examples","titles":[null,"isContext"]},"847":{"href":"/reference/cheatcodes/is-persistent#ispersistent","html":"\n","isPage":true,"text":"\n","title":"isPersistent","titles":[null]},"848":{"href":"/reference/cheatcodes/is-persistent#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> isPersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction isPersistent(address) external returns (bool);\n","title":"Signature","titles":[null,"isPersistent"]},"849":{"href":"/reference/cheatcodes/is-persistent#description","html":"\n<p>Returns whether an account is marked as persistent (<a href=\"/reference/cheatcodes/make-persistent.mdx\"><code>makePersistent</code></a>).</p>\n","isPage":false,"text":"\nReturns whether an account is marked as persistent (makePersistent).\n","title":"Description","titles":[null,"isPersistent"]},"850":{"href":"/reference/cheatcodes/is-persistent#examples","html":"\n<p>Check default status of <code>msg.sender</code> and the current test account</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// By default the `sender` and the test contract itself are persistent</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isPersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">msg.sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isPersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)));</span></span></code></pre>\n","isPage":false,"text":"\nCheck default status of msg.sender and the current test account\n// By default the `sender` and the test contract itself are persistent\nassert(cheats.isPersistent(msg.sender));\nassert(cheats.isPersistent(address(this)));\n","title":"Examples","titles":[null,"isPersistent"]},"851":{"href":"/reference/cheatcodes/is-persistent#see-also","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/make-persistent.mdx\">makePersistent</a></li>\n<li><a href=\"/reference/cheatcodes/revoke-persistent.mdx\">revokePersistent</a></li>\n</ul>","isPage":false,"text":"\n\nmakePersistent\nrevokePersistent\n","title":"SEE ALSO","titles":[null,"isPersistent"]},"852":{"href":"/reference/cheatcodes/key-exists-json#keyexistsjson","html":"\n","isPage":true,"text":"\n","title":"keyExistsJson","titles":[null]},"853":{"href":"/reference/cheatcodes/key-exists-json#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Check if a key exists in a JSON string.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">keyExistsJson</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> json, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\n// Check if a key exists in a JSON string.\nvm.keyExistsJson(string memory json, string memory key) returns (bool)\n","title":"Signature","titles":[null,"keyExistsJson"]},"854":{"href":"/reference/cheatcodes/key-exists-json#description","html":"\n<p>Checks if a key exists in a JSON string.</p>\n","isPage":false,"text":"\nChecks if a key exists in a JSON string.\n","title":"Description","titles":[null,"keyExistsJson"]},"855":{"href":"/reference/cheatcodes/key-exists-json#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> path </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;./path/to/jsonfile.json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> json </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">readFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(path);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> exists </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">keyExistsJson</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(json, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;.key&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertTrue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(exists);</span></span></code></pre>","isPage":false,"text":"\nstring memory path = &quot;./path/to/jsonfile.json&quot;;\nstring memory json = vm.readFile(path);\nbool exists = vm.keyExistsJson(json, &quot;.key&quot;);\nassertTrue(exists);","title":"Examples","titles":[null,"keyExistsJson"]},"856":{"href":"/reference/cheatcodes/key-exists-toml#keyexiststoml","html":"\n","isPage":true,"text":"\n","title":"keyExistsToml","titles":[null]},"857":{"href":"/reference/cheatcodes/key-exists-toml#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Check if a key exists in a TOML table.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">keyExistsToml</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> toml, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\n// Check if a key exists in a TOML table.\nvm.keyExistsToml(string memory toml, string memory key) returns (bool)\n","title":"Signature","titles":[null,"keyExistsToml"]},"858":{"href":"/reference/cheatcodes/key-exists-toml#description","html":"\n<p>Checks if a key exists in a TOML table.</p>\n","isPage":false,"text":"\nChecks if a key exists in a TOML table.\n","title":"Description","titles":[null,"keyExistsToml"]},"859":{"href":"/reference/cheatcodes/key-exists-toml#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> path </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;./path/to/tomlfile.toml&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> toml </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">readFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(path);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> exists </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">keyExistsToml</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(toml, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;.key&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertTrue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(exists);</span></span></code></pre>","isPage":false,"text":"\nstring memory path = &quot;./path/to/tomlfile.toml&quot;;\nstring memory toml = vm.readFile(path);\nbool exists = vm.keyExistsToml(toml, &quot;.key&quot;);\nassertTrue(exists);","title":"Examples","titles":[null,"keyExistsToml"]},"860":{"href":"/reference/cheatcodes/key-exists#keyexists","html":"\n","isPage":true,"text":"\n","title":"keyExists","titles":[null]},"861":{"href":"/reference/cheatcodes/key-exists#status","html":"\n<p><code>keyExists</code> is being deprecated in favor of <code>keyExistsJson</code>. It will be removed in future versions.</p>\n","isPage":false,"text":"\nkeyExists is being deprecated in favor of keyExistsJson. It will be removed in future versions.\n","title":"Status","titles":[null,"keyExists"]},"862":{"href":"/reference/cheatcodes/key-exists#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Check if a key exists in a JSON string.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">keyExists</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> json, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\n// Check if a key exists in a JSON string.\nvm.keyExists(string memory json, string memory key) returns (bool)\n","title":"Signature","titles":[null,"keyExists"]},"863":{"href":"/reference/cheatcodes/key-exists#description","html":"\n<p>Checks if a key exists in a JSON string.</p>\n","isPage":false,"text":"\nChecks if a key exists in a JSON string.\n","title":"Description","titles":[null,"keyExists"]},"864":{"href":"/reference/cheatcodes/key-exists#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> path </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;./path/to/jsonfile.json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> json </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">readFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(path);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> exists </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">keyExists</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(json, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;.key&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertTrue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(exists);</span></span></code></pre>","isPage":false,"text":"\nstring memory path = &quot;./path/to/jsonfile.json&quot;;\nstring memory json = vm.readFile(path);\nbool exists = vm.keyExists(json, &quot;.key&quot;);\nassertTrue(exists);","title":"Examples","titles":[null,"keyExists"]},"865":{"href":"/reference/cheatcodes/label#label","html":"\n","isPage":true,"text":"\n","title":"label","titles":[null]},"866":{"href":"/reference/cheatcodes/label#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> label</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> addr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> label</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction label(address addr, string calldata label) external;\n","title":"Signature","titles":[null,"label"]},"867":{"href":"/reference/cheatcodes/label#description","html":"\n<p>Sets a label <code>label</code> for <code>addr</code> in test traces.</p>\n<p>If an address is labelled, the label will show up in test traces instead of the address.</p>","isPage":false,"text":"\nSets a label label for addr in test traces.\nIf an address is labelled, the label will show up in test traces instead of the address.","title":"Description","titles":[null,"label"]},"868":{"href":"/reference/cheatcodes/load#load","html":"\n","isPage":true,"text":"\n","title":"load","titles":[null]},"869":{"href":"/reference/cheatcodes/load#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> load</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> account</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> slot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction load(address account, bytes32 slot) external returns (bytes32);\n","title":"Signature","titles":[null,"load"]},"870":{"href":"/reference/cheatcodes/load#description","html":"\n<p>Loads the value from storage slot <code>slot</code> on account <code>account</code>.</p>\n","isPage":false,"text":"\nLoads the value from storage slot slot on account account.\n","title":"Description","titles":[null,"load"]},"871":{"href":"/reference/cheatcodes/load#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// contract LeetContract {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">///     uint256 private leet = 1337; // slot 0</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> leet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">load</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(leetContract), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)));</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(leet)); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1337</span></span></code></pre>\n","isPage":false,"text":"\n/// contract LeetContract {\n///     uint256 private leet = 1337; // slot 0\n/// }\n \nbytes32 leet = vm.load(address(leetContract), bytes32(uint256(0)));\nemit log_uint(uint256(leet)); // 1337\n","title":"Examples","titles":[null,"load"]},"872":{"href":"/reference/cheatcodes/load#see-also","html":"\n<p>Forge Standard Library</p>\n<p><a href=\"/reference/forge-std/std-storage.mdx\">Std Storage</a></p>","isPage":false,"text":"\nForge Standard Library\nStd Storage","title":"SEE ALSO","titles":[null,"load"]},"873":{"href":"/reference/cheatcodes/make-persistent#makepersistent","html":"\n","isPage":true,"text":"\n","title":"makePersistent","titles":[null]},"874":{"href":"/reference/cheatcodes/make-persistent#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> makePersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> account</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> makePersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> account0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> account1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> makePersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> account0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> account1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> account2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> makePersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> accounts</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction makePersistent(address account) external;\nfunction makePersistent(address account0, address account1) external;\nfunction makePersistent(address account0, address account1, address account2) external;\nfunction makePersistent(address[] calldata accounts) external;\n","title":"Signature","titles":[null,"makePersistent"]},"875":{"href":"/reference/cheatcodes/make-persistent#description","html":"\n<p>Each fork (<a href=\"/reference/cheatcodes/create-fork.mdx\"><code>createFork</code></a>) has its own independent storage, which is also replaced when another fork is selected (<a href=\"/reference/cheatcodes/select-fork.mdx\"><code>selectFork</code></a>).\nBy default, only the test contract account and the caller are persistent across forks, which means that changes to the state of the test contract (variables) are preserved when different forks are selected. This way data can be shared by storing it in the contract&#x27;s variables.</p>\n<p>However, with this cheatcode, it is possible to mark the specified accounts as persistent, which means that their state is available regardless of which fork is currently active.</p>\n","isPage":false,"text":"\nEach fork (createFork) has its own independent storage, which is also replaced when another fork is selected (selectFork).\nBy default, only the test contract account and the caller are persistent across forks, which means that changes to the state of the test contract (variables) are preserved when different forks are selected. This way data can be shared by storing it in the contract&#x27;s variables.\nHowever, with this cheatcode, it is possible to mark the specified accounts as persistent, which means that their state is available regardless of which fork is currently active.\n","title":"Description","titles":[null,"makePersistent"]},"876":{"href":"/reference/cheatcodes/make-persistent#examples","html":"\n<p>Mark a new contract as persistent</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SimpleStorageContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _value) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _value;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testMarkPersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // by default the `sender` and the contract itself are persistent</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isPersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">msg.sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isPersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // select a specific fork</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">selectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(mainnetFork);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // create a new contract that&#x27;s stored in the `mainnetFork` storage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    SimpleStorageContract simple </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SimpleStorageContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // `simple` is not marked as persistent</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isPersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(simple)));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // contract can be used</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expectedValue </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 99</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    simple.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(expectedValue);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(simple.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), expectedValue);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // mark as persistent</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">makePersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(simple));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // select a different fork</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">selectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(optimismFork);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // ensure contract is still persistent</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isPersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(simple)));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // value is set as expected</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(simple.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), expectedValue);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nMark a new contract as persistent\ncontract SimpleStorageContract {\n    string public value;\n \n    function set(uint256 _value) public {\n        value = _value;\n    }\n}\n \nfunction testMarkPersistent() public {\n    // by default the `sender` and the contract itself are persistent\n    assert(cheats.isPersistent(msg.sender));\n    assert(cheats.isPersistent(address(this)));\n \n    // select a specific fork\n    cheats.selectFork(mainnetFork);\n \n    // create a new contract that&#x27;s stored in the `mainnetFork` storage\n    SimpleStorageContract simple = new SimpleStorageContract();\n \n    // `simple` is not marked as persistent\n    assert(!cheats.isPersistent(address(simple)));\n \n    // contract can be used\n    uint256 expectedValue = 99;\n    simple.set(expectedValue);\n    assertEq(simple.value(), expectedValue);\n \n    // mark as persistent\n    cheats.makePersistent(address(simple));\n \n    // select a different fork\n    cheats.selectFork(optimismFork);\n \n    // ensure contract is still persistent\n    assert(cheats.isPersistent(address(simple)));\n \n    // value is set as expected\n    assertEq(simple.value(), expectedValue);\n}\n","title":"Examples","titles":[null,"makePersistent"]},"877":{"href":"/reference/cheatcodes/make-persistent#see-also","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/is-persistent.mdx\">isPersistent</a></li>\n<li><a href=\"/reference/cheatcodes/revoke-persistent.mdx\">revokePersistent</a></li>\n<li><a href=\"/reference/cheatcodes/create-fork.mdx\">createFork</a></li>\n<li><a href=\"/reference/cheatcodes/select-fork.mdx\">selectFork</a></li>\n</ul>","isPage":false,"text":"\n\nisPersistent\nrevokePersistent\ncreateFork\nselectFork\n","title":"SEE ALSO","titles":[null,"makePersistent"]},"878":{"href":"/reference/cheatcodes/mock-call-revert#mockcallrevert","html":"\n","isPage":true,"text":"\n","title":"mockCallRevert","titles":[null]},"879":{"href":"/reference/cheatcodes/mock-call-revert#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> mockCallRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> where</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> retdata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> mockCallRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> where</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> retdata</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction mockCallRevert(address where, bytes calldata data, bytes calldata retdata) external;\nfunction mockCallRevert(\n    address where,\n    uint256 value,\n    bytes calldata data,\n    bytes calldata retdata\n) external;\n","title":"Signature","titles":[null,"mockCallRevert"]},"880":{"href":"/reference/cheatcodes/mock-call-revert#description","html":"\n<p>Reverts all calls to an address <code>where</code> if the call data either strictly or loosely matches <code>data</code> and returns <code>retdata</code>.</p>\n<p><code>retdata</code> can be a raw return message or a custom error.</p>\n<p>When a call is made to <code>where</code> the call data is first checked to see if it matches in its entirety with <code>data</code>.\nIf not, the call data is checked to see if there is a partial match, with the match starting at the first byte of the call data.</p>\n<p>If a match is found, then the call is reverted and <code>retdata</code> is returned.</p>\n<p><strong>Using the second signature</strong> we can mock the calls with a specific <code>msg.value</code>. <code>Calldata</code> match takes precedence over <code>msg.value</code> in case of ambiguity.</p>\n<p>Reverted mock calls are in effect until <a href=\"/reference/cheatcodes/clear-mocked-calls.mdx\"><code>clearMockedCalls</code></a> is called.</p>\n<blockquote>\n<p>ℹ️ <strong>Internal calls</strong></p>\n<p>This cheatcode does not currently work on internal calls. See issue <a href=\"https://github.com/foundry-rs/foundry/issues/432\">#432</a>.</p>\n</blockquote>\n","isPage":false,"text":"\nReverts all calls to an address where if the call data either strictly or loosely matches data and returns retdata.\nretdata can be a raw return message or a custom error.\nWhen a call is made to where the call data is first checked to see if it matches in its entirety with data.\nIf not, the call data is checked to see if there is a partial match, with the match starting at the first byte of the call data.\nIf a match is found, then the call is reverted and retdata is returned.\nUsing the second signature we can mock the calls with a specific msg.value. Calldata match takes precedence over msg.value in case of ambiguity.\nReverted mock calls are in effect until clearMockedCalls is called.\n\nℹ️ Internal calls\nThis cheatcode does not currently work on internal calls. See issue #432.\n\n","title":"Description","titles":[null,"mockCallRevert"]},"881":{"href":"/reference/cheatcodes/mock-call-revert#examples","html":"\n<p>Reverting an exact call with a raw error message:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testMockCallRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mockCallRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeWithSelector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(MyToken.balanceOf.selector, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;REVERT_MESSAGE&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;REVERT_MESSAGE&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    IERC20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Reverting a call with a custom error:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testMockCallRevertWithCustomError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> customError </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeWithSelector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(TestError.selector, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ERROR_MESSAGE&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mockCallRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeWithSelector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(MyToken.balanceOf.selector, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        customError</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(customError);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    IERC20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Mocking a call with a given <code>msg.value</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testMockCallRevertWithValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(example.pay{value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(example.pay{value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mockCallRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(example),</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeWithSelector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(example.pay.selector),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;ERROR_MESSAGE&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(example.pay{value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ERROR_MESSAGE&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(example.pay{value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">99</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nReverting an exact call with a raw error message:\nfunction testMockCallRevert() public {\n    vm.mockCallRevert(\n        address(0),\n        abi.encodeWithSelector(MyToken.balanceOf.selector, address(1)),\n        &quot;REVERT_MESSAGE&quot;\n    );\n    vm.expectRevert(&quot;REVERT_MESSAGE&quot;);\n    IERC20(address(0)).balanceOf(address(1));\n}\nReverting a call with a custom error:\nfunction testMockCallRevertWithCustomError() public {\n    bytes memory customError = abi.encodeWithSelector(TestError.selector, &quot;ERROR_MESSAGE&quot;);\n    vm.mockCallRevert(\n        address(0),\n        abi.encodeWithSelector(MyToken.balanceOf.selector, address(1)),\n        customError\n    );\n    vm.expectRevert(customError);\n    IERC20(address(0)).balanceOf(address(1));\n}\nMocking a call with a given msg.value:\nfunction testMockCallRevertWithValue() public {\n    assertEq(example.pay{value: 10}(1), 1);\n    assertEq(example.pay{value: 1}(2), 2);\n    vm.mockCallRevert(\n        address(example),\n        10,\n        abi.encodeWithSelector(example.pay.selector),\n        &quot;ERROR_MESSAGE&quot;\n    );\n    assertEq(example.pay{value: 1}(2), 2);\n    vm.expectRevert(&quot;ERROR_MESSAGE&quot;);\n    assertEq(example.pay{value: 10}(1), 99);\n}","title":"Examples","titles":[null,"mockCallRevert"]},"882":{"href":"/reference/cheatcodes/mock-call#mockcall","html":"\n","isPage":true,"text":"\n","title":"mockCall","titles":[null]},"883":{"href":"/reference/cheatcodes/mock-call#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> mockCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> where</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> retdata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> mockCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> where</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> retdata</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction mockCall(address where, bytes calldata data, bytes calldata retdata) external;\nfunction mockCall(\n    address where,\n    uint256 value,\n    bytes calldata data,\n    bytes calldata retdata\n) external;\n","title":"Signature","titles":[null,"mockCall"]},"884":{"href":"/reference/cheatcodes/mock-call#description","html":"\n<p>Mocks all calls to an address <code>where</code> if the call data either strictly or loosely matches <code>data</code> and returns <code>retdata</code>.</p>\n<p>When a call is made to <code>where</code> the call data is first checked to see if it matches in its entirety with <code>data</code>.\nIf not, the call data is checked to see if there is a partial match, with the match starting at the first byte of the call data.</p>\n<p>If a match is found, then <code>retdata</code> is returned from the call.</p>\n<p><strong>Using the second signature</strong> we can mock the calls with a specific <code>msg.value</code>. <code>Calldata</code> match takes precedence over <code>msg.value</code> in case of ambiguity.</p>\n<p>Mocked calls are in effect until <a href=\"/reference/cheatcodes/clear-mocked-calls.mdx\"><code>clearMockedCalls</code></a> is called.</p>\n<blockquote>\n<p>ℹ️ <strong>Note</strong></p>\n<p>Calls to mocked addresses may revert if there is no code on the address.\nThis is because Solidity inserts an <code>extcodesize</code> check before some contract calls.</p>\n<p>To circumvent this, use the <a href=\"/reference/cheatcodes/etch.mdx\"><code>etch</code></a> cheatcode if the mocked address has no code.</p>\n</blockquote>\n<blockquote>\n<p>ℹ️ <strong>Internal calls</strong></p>\n<p>This cheatcode does not currently work on internal calls. See issue <a href=\"https://github.com/foundry-rs/foundry/issues/432\">#432</a>.</p>\n</blockquote>\n","isPage":false,"text":"\nMocks all calls to an address where if the call data either strictly or loosely matches data and returns retdata.\nWhen a call is made to where the call data is first checked to see if it matches in its entirety with data.\nIf not, the call data is checked to see if there is a partial match, with the match starting at the first byte of the call data.\nIf a match is found, then retdata is returned from the call.\nUsing the second signature we can mock the calls with a specific msg.value. Calldata match takes precedence over msg.value in case of ambiguity.\nMocked calls are in effect until clearMockedCalls is called.\n\nℹ️ Note\nCalls to mocked addresses may revert if there is no code on the address.\nThis is because Solidity inserts an extcodesize check before some contract calls.\nTo circumvent this, use the etch cheatcode if the mocked address has no code.\n\n\nℹ️ Internal calls\nThis cheatcode does not currently work on internal calls. See issue #432.\n\n","title":"Description","titles":[null,"mockCall"]},"885":{"href":"/reference/cheatcodes/mock-call#examples","html":"\n<p>Mocking an exact call:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testMockCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mockCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeWithSelector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(MyToken.balanceOf.selector, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)),</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IERC20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Mocking an entire function:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testMockCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mockCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeWithSelector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(MyToken.balanceOf.selector),</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IERC20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IERC20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Mocking a call with a given <code>msg.value</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testMockCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(example.pay{value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(example.pay{value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mockCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(example),</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeWithSelector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(example.pay.selector),</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">99</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(example.pay{value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">99</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(example.pay{value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Mocking a public variable:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Example</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> number </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ExampleTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Example </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> example;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        example </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Example</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testMockPublicVariable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(example.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mockCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">            address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(example),</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">            abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeWithSelector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes4</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;number()&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))),</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">            abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        );</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(example.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nMocking an exact call:\nfunction testMockCall() public {\n    vm.mockCall(\n        address(0),\n        abi.encodeWithSelector(MyToken.balanceOf.selector, address(1)),\n        abi.encode(10)\n    );\n    assertEq(IERC20(address(0)).balanceOf(address(1)), 10);\n}\nMocking an entire function:\nfunction testMockCall() public {\n    vm.mockCall(\n        address(0),\n        abi.encodeWithSelector(MyToken.balanceOf.selector),\n        abi.encode(10)\n    );\n    assertEq(IERC20(address(0)).balanceOf(address(1)), 10);\n    assertEq(IERC20(address(0)).balanceOf(address(2)), 10);\n}\nMocking a call with a given msg.value:\nfunction testMockCall() public {\n    assertEq(example.pay{value: 10}(1), 1);\n    assertEq(example.pay{value: 1}(2), 2);\n    vm.mockCall(\n        address(example),\n        10,\n        abi.encodeWithSelector(example.pay.selector),\n        abi.encode(99)\n    );\n    assertEq(example.pay{value: 10}(1), 99);\n    assertEq(example.pay{value: 1}(2), 2);\n}\nMocking a public variable:\ncontract Example {\n    uint256 public number = 10;\n}\n \ncontract ExampleTest is Test {\n    Example public example;\n \n    function setUp() public {\n        example = new Example();\n    }\n \n    function testMockPublicVariable() public {\n        assertEq(example.number(), 10);\n        vm.mockCall(\n            address(example),\n            abi.encodeWithSelector(bytes4(keccak256(&quot;number()&quot;))),\n            abi.encode(5)\n        );\n        assertEq(example.number(), 5);\n    }\n}","title":"Examples","titles":[null,"mockCall"]},"886":{"href":"/reference/cheatcodes/mock-calls#mockcalls","html":"\n","isPage":true,"text":"\n","title":"mockCalls","titles":[null]},"887":{"href":"/reference/cheatcodes/mock-calls#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> mockCalls</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> where</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> retdata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> mockCalls</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> where</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> retdata</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction mockCalls(address where, bytes calldata data, bytes[] calldata retdata) external;\nfunction mockCalls(\n    address where,\n    uint256 value,\n    bytes calldata data,\n    bytes[] calldata retdata\n) external;\n","title":"Signature","titles":[null,"mockCalls"]},"888":{"href":"/reference/cheatcodes/mock-calls#description","html":"\n<p>Mocks all calls to an address <code>where</code> if the call data either strictly or loosely\nmatches <code>data</code> and returns different data for each call based on the <code>retdata</code>\narray values.</p>\n<p>See <a href=\"/reference/cheatcodes/mock-call.mdx\"><code>mockCall</code></a> for more information on mocking calls and\nmatching precedence.</p>\n<blockquote>\n<p>ℹ️ <strong>Note</strong></p>\n<p>Any invocation of the mocked call beyond the number of elements in <code>retdata</code>\nwill receive the last <code>retdata</code> element in response. <code>clearMockedCalls</code> can be\ncalled to clear the mock</p>\n</blockquote>\n","isPage":false,"text":"\nMocks all calls to an address where if the call data either strictly or loosely\nmatches data and returns different data for each call based on the retdata\narray values.\nSee mockCall for more information on mocking calls and\nmatching precedence.\n\nℹ️ Note\nAny invocation of the mocked call beyond the number of elements in retdata\nwill receive the last retdata element in response. clearMockedCalls can be\ncalled to clear the mock\n\n","title":"Description","titles":[null,"mockCalls"]},"889":{"href":"/reference/cheatcodes/mock-calls#examples","html":"\n<p>Mocking multiple <code>balanceOf(address)</code> calls:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testMockCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mocks </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[](</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mocks[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mocks[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mockCalls</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeWithSelector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(IERC20.balanceOf.selector, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        mocks</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IERC20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">IERC20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Mocking multiple calls with <code>msg.value</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testMockCallsWithMsgValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mocks </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[](</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mocks[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mocks[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mockCalls</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeWithSelector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(DexPool.swapETHForToken.selector),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        mocks</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tokenAmount1 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> DexPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)).swapETHForToken{value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tokenAmount2 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> DexPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)).swapETHForToken{value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tokenAmount1, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tokenAmount2, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nMocking multiple balanceOf(address) calls:\nfunction testMockCall() public {\n    bytes[] memory mocks = new bytes[](2);\n    mocks[0] = abi.encode(2 ether);\n    mocks[1] = abi.encode(1 ether);\n \n    vm.mockCalls(\n        address(0),\n        abi.encodeWithSelector(IERC20.balanceOf.selector, address(1)),\n        mocks\n    );\n \n    assertEq(IERC20(address(0)).balanceOf(address(1)), 2 ether);\n    assertEq(IERC20(address(0)).balanceOf(address(1)), 1 ether);\n}\nMocking multiple calls with msg.value:\nfunction testMockCallsWithMsgValue() public {\n    bytes[] memory mocks = new bytes[](2);\n    mocks[0] = abi.encode(2 ether);\n    mocks[1] = abi.encode(1 ether);\n \n    vm.mockCalls(\n        address(0),\n        1 ether,\n        abi.encodeWithSelector(DexPool.swapETHForToken.selector),\n        mocks\n    );\n \n    uint tokenAmount1 = DexPool(address(0)).swapETHForToken{value: 1 ether}();\n    uint tokenAmount2 = DexPool(address(0)).swapETHForToken{value: 1 ether}();\n \n    assertEq(tokenAmount1, 2 ether);\n    assertEq(tokenAmount2, 1 ether);\n}","title":"Examples","titles":[null,"mockCalls"]},"890":{"href":"/reference/cheatcodes/mock-function#mockfunction","html":"\n","isPage":true,"text":"\n","title":"mockFunction","titles":[null]},"891":{"href":"/reference/cheatcodes/mock-function#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> mockFunction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> callee</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> target</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction mockFunction(address callee, address target, bytes calldata data) external;\n","title":"Signature","titles":[null,"mockFunction"]},"892":{"href":"/reference/cheatcodes/mock-function#description","html":"\n<p>Executes calls to an address <code>callee</code> with bytecode of address <code>target</code> if the call data either strictly or loosely matches <code>data</code>.</p>\n<p>When a call is made to <code>callee</code> the call data is first checked to see if it matches in its entirety with <code>data</code>.\nIf not, the call data is checked to see if there is a partial match on function selector.</p>\n<p>If a match is found, then call is executed using the bytecode of <code>target</code> address.</p>\n<blockquote>\n<p>ℹ️ <strong>Isolated tests</strong></p>\n<p>This cheatcode does not currently work if using isolated test mode.</p>\n</blockquote>\n","isPage":false,"text":"\nExecutes calls to an address callee with bytecode of address target if the call data either strictly or loosely matches data.\nWhen a call is made to callee the call data is first checked to see if it matches in its entirety with data.\nIf not, the call data is checked to see if there is a partial match on function selector.\nIf a match is found, then call is executed using the bytecode of target address.\n\nℹ️ Isolated tests\nThis cheatcode does not currently work if using isolated test mode.\n\n","title":"Description","titles":[null,"mockFunction"]},"893":{"href":"/reference/cheatcodes/mock-function#examples","html":"\n<p>For two contracts (with same storage layout):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Counter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> count</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> x</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 321</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> +</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> x;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ModelCounter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> count</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> x</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 123</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> +</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> x;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Mocking an exact call to <code>count</code> function:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testMockFunction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mockFunction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(counter),</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(model),</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeWithSelector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Counter.count.selector, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">456</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">count</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">456</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">123</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> +</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 456</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">count</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">567</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">321</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> +</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 567</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Mocking all calls to <code>count</code> function:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testMockCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mockFunction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(counter),</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(model),</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeWithSelector</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Counter.count.selector)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">count</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">678</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">123</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> +</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 678</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">count</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">789</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">123</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> +</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 789</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nFor two contracts (with same storage layout):\ncontract Counter {\n    uint256 public a;\n \n    function count(uint256 x) public {\n        a = 321 + x;\n    }\n}\n \ncontract ModelCounter {\n    uint256 public a;\n \n    function count(uint256 x) public {\n        a = 123 + x;\n    }\n}\nMocking an exact call to count function:\nfunction testMockFunction() public {\n    vm.mockFunction(\n        address(counter),\n        address(model),\n        abi.encodeWithSelector(Counter.count.selector, 456)\n    );\n    counter.count(456);\n    assertEq(counter.a(), 123 + 456);\n    counter.count(567);\n    assertEq(counter.a(), 321 + 567);\n}\nMocking all calls to count function:\nfunction testMockCall() public {\n    vm.mockFunction(\n        address(counter),\n        address(model),\n        abi.encodeWithSelector(Counter.count.selector)\n    );\n    counter.count(678);\n    assertEq(counter.a(), 123 + 678);\n    counter.count(789);\n    assertEq(counter.a(), 123 + 789);\n}","title":"Examples","titles":[null,"mockFunction"]},"894":{"href":"/reference/cheatcodes/overview#cheatcodes-reference","html":"\n<p>Cheatcodes give you powerful assertions, the ability to alter the state of the EVM, mock data, and more.</p>\n<p>Cheatcodes are made available through use of the cheatcode address (<code>0x7109709ECfa91a80626fF3989D68f67F5b1DD12D</code>).</p>\n<blockquote>\n<p>ℹ️ <strong>Note</strong></p>\n<p>If you encounter errors for this address when using fuzzed addresses in your tests, you may wish to\nexclude it from your fuzz tests by using the following line:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assume</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address_ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n</blockquote>\n<p>You can also access cheatcodes easily via <code>vm</code> available in Forge Standard Library&#x27;s <a href=\"/reference/forge-std/overview\"><code>Test</code></a> contract.</p>\n","isPage":true,"text":"\nCheatcodes give you powerful assertions, the ability to alter the state of the EVM, mock data, and more.\nCheatcodes are made available through use of the cheatcode address (0x7109709ECfa91a80626fF3989D68f67F5b1DD12D).\n\nℹ️ Note\nIf you encounter errors for this address when using fuzzed addresses in your tests, you may wish to\nexclude it from your fuzz tests by using the following line:\nvm.assume(address_ != 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);\n\nYou can also access cheatcodes easily via vm available in Forge Standard Library&#x27;s Test contract.\n","title":"Cheatcodes Reference","titles":[null]},"895":{"href":"/reference/cheatcodes/overview#forge-standard-library-cheatcodes","html":"\n<p>Forge Std implements wrappers around cheatcodes, which combine multiple standard cheatcodes to improve development experience. These are not technically cheatcodes, but rather compositions of Forge&#x27;s cheatcodes.</p>\n<p>You can view the list of Forge Standard Library&#x27;s cheatcode wrappers <a href=\"/reference/forge-std/std-cheats.mdx\">in the references section</a>. You can reference the <a href=\"https://github.com/foundry-rs/forge-std/blob/master/src/Test.sol\">Forge Std source code</a> to learn more about how the wrappers work under the hood.</p>\n","isPage":false,"text":"\nForge Std implements wrappers around cheatcodes, which combine multiple standard cheatcodes to improve development experience. These are not technically cheatcodes, but rather compositions of Forge&#x27;s cheatcodes.\nYou can view the list of Forge Standard Library&#x27;s cheatcode wrappers in the references section. You can reference the Forge Std source code to learn more about how the wrappers work under the hood.\n","title":"Forge Standard Library Cheatcodes","titles":[null,"Cheatcodes Reference"]},"896":{"href":"/reference/cheatcodes/overview#cheatcode-types","html":"\n<p>Below are some subsections for the different Forge cheatcodes.</p>\n<ul>\n<li><a href=\"/reference/cheatcodes/environment.mdx\">Environment</a>: Cheatcodes that alter the state of the EVM.</li>\n<li><a href=\"/reference/cheatcodes/assertions.mdx\">Assertions</a>: Cheatcodes that are powerful assertions</li>\n<li><a href=\"/reference/cheatcodes/fuzzer.mdx\">Fuzzer</a>: Cheatcodes that configure the fuzzer</li>\n<li><a href=\"/reference/cheatcodes/external.mdx\">External</a>: Cheatcodes that interact with external state (files, commands, ...)</li>\n<li><a href=\"/reference/cheatcodes/signing.mdx\">Signing</a>: Cheatcodes for signing</li>\n<li><a href=\"/reference/cheatcodes/utilities.mdx\">Utilities</a>: Smaller utility cheatcodes</li>\n<li><a href=\"/reference/cheatcodes/forking.mdx\">Forking</a>: Forking mode cheatcodes</li>\n<li><a href=\"/reference/cheatcodes/state-snapshots.mdx\">State snapshots</a>: State snapshot cheatcodes</li>\n<li><a href=\"/reference/cheatcodes/rpc.mdx\">RPC</a>: RPC related cheatcodes</li>\n<li><a href=\"/reference/cheatcodes/fs.mdx\">File</a>: Cheatcodes for working with files</li>\n</ul>\n","isPage":false,"text":"\nBelow are some subsections for the different Forge cheatcodes.\n\nEnvironment: Cheatcodes that alter the state of the EVM.\nAssertions: Cheatcodes that are powerful assertions\nFuzzer: Cheatcodes that configure the fuzzer\nExternal: Cheatcodes that interact with external state (files, commands, ...)\nSigning: Cheatcodes for signing\nUtilities: Smaller utility cheatcodes\nForking: Forking mode cheatcodes\nState snapshots: State snapshot cheatcodes\nRPC: RPC related cheatcodes\nFile: Cheatcodes for working with files\n\n","title":"Cheatcode Types","titles":[null,"Cheatcodes Reference"]},"897":{"href":"/reference/cheatcodes/overview#add-a-new-cheatcode","html":"\n<p>If you need a new feature, consider <a href=\"https://github.com/foundry-rs/foundry\">contributing to the Foundry&#x27;s codebase</a> to add the cheatcode.</p>\n","isPage":false,"text":"\nIf you need a new feature, consider contributing to the Foundry&#x27;s codebase to add the cheatcode.\n","title":"Add a new cheatcode","titles":[null,"Cheatcodes Reference"]},"898":{"href":"/reference/cheatcodes/overview#cheatcodes-interface","html":"\n<p>This is a Solidity interface for all of the cheatcodes present in Forge.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// [!include ~/snippets/output/vm/Vm.sol:3]</span></span></code></pre>","isPage":false,"text":"\nThis is a Solidity interface for all of the cheatcodes present in Forge.\n// [!include ~/snippets/output/vm/Vm.sol:3]","title":"Cheatcodes Interface","titles":[null,"Cheatcodes Reference"]},"899":{"href":"/reference/cheatcodes/parse-address#parseaddress","html":"\n","isPage":true,"text":"\n","title":"parseAddress","titles":[null]},"900":{"href":"/reference/cheatcodes/parse-address#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> stringifiedValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> parsedValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction parseAddress(string calldata stringifiedValue) external pure returns (address parsedValue);\n","title":"Signature","titles":[null,"parseAddress"]},"901":{"href":"/reference/cheatcodes/parse-address#description","html":"\n<p>Parses the value of <code>string</code> into <code>address</code></p>\n","isPage":false,"text":"\nParses the value of string into address\n","title":"Description","titles":[null,"parseAddress"]},"902":{"href":"/reference/cheatcodes/parse-address#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> addressAsString </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0x0000000000000000000000000000000000000000&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stringToAddress </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(addressAsString); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 0x0000000000000000000000000000000000000000</span></span></code></pre>","isPage":false,"text":"\nstring memory addressAsString = &quot;0x0000000000000000000000000000000000000000&quot;;\naddress stringToAddress = vm.parseAddress(addressAsString); // 0x0000000000000000000000000000000000000000","title":"Examples","titles":[null,"parseAddress"]},"903":{"href":"/reference/cheatcodes/parse-bool#parsebool","html":"\n","isPage":true,"text":"\n","title":"parseBool","titles":[null]},"904":{"href":"/reference/cheatcodes/parse-bool#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseBool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> stringifiedValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> parsedValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction parseBool(string calldata stringifiedValue) external pure returns (bool parsedValue);\n","title":"Signature","titles":[null,"parseBool"]},"905":{"href":"/reference/cheatcodes/parse-bool#description","html":"\n<p>Parses the value of <code>string</code> into <code>bool</code></p>\n","isPage":false,"text":"\nParses the value of string into bool\n","title":"Description","titles":[null,"parseBool"]},"906":{"href":"/reference/cheatcodes/parse-bool#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> boolAsString </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;false&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stringToBool </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseBool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(boolAsString); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// false</span></span></code></pre>","isPage":false,"text":"\nstring memory boolAsString = &quot;false&quot;;\nbool stringToBool = vm.parseBool(boolAsString); // false","title":"Examples","titles":[null,"parseBool"]},"907":{"href":"/reference/cheatcodes/parse-bytes#parsebytes","html":"\n","isPage":true,"text":"\n","title":"parseBytes","titles":[null]},"908":{"href":"/reference/cheatcodes/parse-bytes#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> stringifiedValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> parsedValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction parseBytes(string calldata stringifiedValue) external pure returns (bytes memory parsedValue);\n","title":"Signature","titles":[null,"parseBytes"]},"909":{"href":"/reference/cheatcodes/parse-bytes#description","html":"\n<p>Parses the value of <code>string</code> into <code>bytes</code></p>\n","isPage":false,"text":"\nParses the value of string into bytes\n","title":"Description","titles":[null,"parseBytes"]},"910":{"href":"/reference/cheatcodes/parse-bytes#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bytesAsString </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0x00000000000000000000000000000000&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stringToBytes </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(bytesAsString); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 0x00000000000000000000000000000000</span></span></code></pre>","isPage":false,"text":"\nstring memory bytesAsString = &quot;0x00000000000000000000000000000000&quot;;\nbytes memory stringToBytes = vm.parseBytes(bytesAsString); // 0x00000000000000000000000000000000","title":"Examples","titles":[null,"parseBytes"]},"911":{"href":"/reference/cheatcodes/parse-bytes32#parsebytes32","html":"\n","isPage":true,"text":"\n","title":"parseBytes32","titles":[null]},"912":{"href":"/reference/cheatcodes/parse-bytes32#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseBytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> stringifiedValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> parsedValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction parseBytes32(string calldata stringifiedValue) external pure returns (bytes32 parsedValue);\n","title":"Signature","titles":[null,"parseBytes32"]},"913":{"href":"/reference/cheatcodes/parse-bytes32#description","html":"\n<p>Parses the value of <code>string</code> into <code>bytes32</code></p>\n","isPage":false,"text":"\nParses the value of string into bytes32\n","title":"Description","titles":[null,"parseBytes32"]},"914":{"href":"/reference/cheatcodes/parse-bytes32#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bytes32AsString </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stringToBytes32 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseBytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(bytes32AsString); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 0x0000000000000000000000000000000000000000000000000000000000000000</span></span></code></pre>","isPage":false,"text":"\nstring memory bytes32AsString = &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;;\nbytes32 stringToBytes32 = vm.parseBytes32(bytes32AsString); // 0x0000000000000000000000000000000000000000000000000000000000000000","title":"Examples","titles":[null,"parseBytes32"]},"915":{"href":"/reference/cheatcodes/parse-int#parseint","html":"\n","isPage":true,"text":"\n","title":"parseInt","titles":[null]},"916":{"href":"/reference/cheatcodes/parse-int#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> stringifiedValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> parsedValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction parseInt(string calldata stringifiedValue) external pure returns (int256 parsedValue);\n","title":"Signature","titles":[null,"parseInt"]},"917":{"href":"/reference/cheatcodes/parse-int#description","html":"\n<p>Parses the value of <code>string</code> into <code>int256</code></p>\n","isPage":false,"text":"\nParses the value of string into int256\n","title":"Description","titles":[null,"parseInt"]},"918":{"href":"/reference/cheatcodes/parse-int#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> intAsString </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;-12345&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stringToInt </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(intAsString); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// -12345</span></span></code></pre>","isPage":false,"text":"\nstring memory intAsString = &quot;-12345&quot;;\nint256 stringToInt = vm.parseInt(intAsString); // -12345","title":"Examples","titles":[null,"parseInt"]},"919":{"href":"/reference/cheatcodes/parse-json-keys#parsejsonkeys","html":"\n","isPage":true,"text":"\n","title":"parseJsonKeys","titles":[null]},"920":{"href":"/reference/cheatcodes/parse-json-keys#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get list of keys present in a JSON string</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseJsonKeys</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> keys</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\n// Get list of keys present in a JSON string\nfunction parseJsonKeys(string calldata json, string calldata key) external pure returns (string[] memory keys);\n","title":"Signature","titles":[null,"parseJsonKeys"]},"921":{"href":"/reference/cheatcodes/parse-json-keys#description","html":"\n<p>Gets list of keys present in a JSON string</p>\n","isPage":false,"text":"\nGets list of keys present in a JSON string\n","title":"Description","titles":[null,"parseJsonKeys"]},"922":{"href":"/reference/cheatcodes/parse-json-keys#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> json </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{&quot;key&quot;: {&quot;a&quot;: 1, &quot;b&quot;: 2}}&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> keys </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseJsonKeys</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(json, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;.key&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// [&quot;a&quot;, &quot;b&quot;]</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> json </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{&quot;key&quot;: &quot;something&quot;}&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> keys </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseJsonKeys</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(json, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;$&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// [&quot;key&quot;]</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> json </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{&quot;root_key&quot;: [{&quot;a&quot;: 1, &quot;b&quot;: 2}]}&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> keys </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseJsonKeys</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(json, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;.root_key[0]&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// [&quot;a&quot;, &quot;b&quot;]</span></span></code></pre>","isPage":false,"text":"\nstring memory json = &#x27;{&quot;key&quot;: {&quot;a&quot;: 1, &quot;b&quot;: 2}}&#x27;;\nstring[] memory keys = vm.parseJsonKeys(json, &quot;.key&quot;); // [&quot;a&quot;, &quot;b&quot;]\nstring memory json = &#x27;{&quot;key&quot;: &quot;something&quot;}&#x27;;\nstring[] memory keys = vm.parseJsonKeys(json, &quot;$&quot;); // [&quot;key&quot;]\nstring memory json = &#x27;{&quot;root_key&quot;: [{&quot;a&quot;: 1, &quot;b&quot;: 2}]}&#x27;;\nstring[] memory keys = vm.parseJsonKeys(json, &quot;.root_key[0]&quot;); // [&quot;a&quot;, &quot;b&quot;]","title":"Examples","titles":[null,"parseJsonKeys"]},"923":{"href":"/reference/cheatcodes/parse-json#parsejson","html":"\n","isPage":true,"text":"\n","title":"parseJson","titles":[null]},"924":{"href":"/reference/cheatcodes/parse-json#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Return the value(s) that correspond to &#x27;key&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseJson</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> json, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Return the entire JSON file</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseJson</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> json);</span></span></code></pre>\n","isPage":false,"text":"\n// Return the value(s) that correspond to &#x27;key&#x27;\nvm.parseJson(string memory json, string memory key)\n// Return the entire JSON file\nvm.parseJson(string memory json);\n","title":"Signature","titles":[null,"parseJson"]},"925":{"href":"/reference/cheatcodes/parse-json#description","html":"\n<p>These cheatcodes are used to parse JSON files in the form of strings. Usually, it&#x27;s coupled with <code>vm.readFile()</code> which returns an entire file in the form of a string.</p>\n<p>You can use <code>stdJson</code> from <code>forge-std</code>, as a helper library for better UX.</p>\n<p>The cheatcode accepts either a <code>key</code> to search for a specific value in the JSON, or no key to return the entire JSON. It returns the value as an abi-encoded <code>bytes</code> array. That means that you will have to <code>abi.decode()</code> to the appropriate type for it to function properly, else it will <code>revert</code>.</p>\n","isPage":false,"text":"\nThese cheatcodes are used to parse JSON files in the form of strings. Usually, it&#x27;s coupled with vm.readFile() which returns an entire file in the form of a string.\nYou can use stdJson from forge-std, as a helper library for better UX.\nThe cheatcode accepts either a key to search for a specific value in the JSON, or no key to return the entire JSON. It returns the value as an abi-encoded bytes array. That means that you will have to abi.decode() to the appropriate type for it to function properly, else it will revert.\n","title":"Description","titles":[null,"parseJson"]},"926":{"href":"/reference/cheatcodes/parse-json#jsonpath-key","html":"\n<p><code>parseJson</code> uses a syntax called JSONpath to form arbitrary keys for arbitrary JSON files. The same syntax (or rather a dialect) is used by the tool <a href=\"https://stedolan.github.io/jq/\"><code>jq</code></a>.</p>\n<p>To read more about the syntax, you can visit the <a href=\"https://crates.io/crates/jsonpath-rust\">README</a> of the rust library that we use under the hood to implement the feature. That way you can be certain that you are using the correct dialect of jsonPath.</p>\n","isPage":false,"text":"\nparseJson uses a syntax called JSONpath to form arbitrary keys for arbitrary JSON files. The same syntax (or rather a dialect) is used by the tool jq.\nTo read more about the syntax, you can visit the README of the rust library that we use under the hood to implement the feature. That way you can be certain that you are using the correct dialect of jsonPath.\n","title":"JSONpath Key","titles":[null,"parseJson"]},"927":{"href":"/reference/cheatcodes/parse-json#json-encoding-rules","html":"\n<p>We use the terms <code>number</code>, <code>string</code>, <code>object</code>, <code>array</code>, <code>boolean</code>, <code>null</code> as they are defined in the <a href=\"https://www.w3schools.com/js/js_json_datatypes.asp\">JSON spec</a>.</p>\n<strong>Encoding Rules</strong>\n<ul>\n<li><code>null</code> is encoded as <code>bytes32(0)</code></li>\n<li>Numbers &gt;= 0 are encoded as <code>uint256</code></li>\n<li>Negative numbers are encoded as <code>int256</code></li>\n<li>Floating point numbers with decimal digitals are not allowed.</li>\n<li>Floating point numbers using the scientific notation can be <code>uint256</code> or <code>int256</code> depending on the value.</li>\n<li>A string that can be decoded into a type of <code>H160</code> and starts with <code>0x</code> is encoded as an <code>address</code>. In other words, if it can be decoded into an address, it&#x27;s probably an address</li>\n<li>A string that starts with <code>0x</code> is encoded as <code>bytes32</code> if it has a length of <code>66</code> or else to <code>bytes</code></li>\n<li>A string that is neither an <code>address</code>, a <code>bytes32</code> or <code>bytes</code>, is encoded as a <code>string</code></li>\n<li>An array is encoded as a dynamic array of the type of its first element</li>\n<li>An object (<code>{}</code>) is encoded as a <code>tuple</code></li>\n</ul>\n","isPage":false,"text":"\nWe use the terms number, string, object, array, boolean, null as they are defined in the JSON spec.\nEncoding Rules\n\nnull is encoded as bytes32(0)\nNumbers &gt;= 0 are encoded as uint256\nNegative numbers are encoded as int256\nFloating point numbers with decimal digitals are not allowed.\nFloating point numbers using the scientific notation can be uint256 or int256 depending on the value.\nA string that can be decoded into a type of H160 and starts with 0x is encoded as an address. In other words, if it can be decoded into an address, it&#x27;s probably an address\nA string that starts with 0x is encoded as bytes32 if it has a length of 66 or else to bytes\nA string that is neither an address, a bytes32 or bytes, is encoded as a string\nAn array is encoded as a dynamic array of the type of its first element\nAn object ({}) is encoded as a tuple\n\n","title":"JSON Encoding Rules","titles":[null,"parseJson"]},"928":{"href":"/reference/cheatcodes/parse-json#type-coercion","html":"\n<p>As described above, <code>parseJson</code> needs to deduce the type of JSON value and that has some inherent limitations. For that reason, there is a sub-family of <code>parseJson*</code> cheatcodes that coerce the type of the returned value.</p>\n<p>For example <code>vm.parseJsonUint(json, key)</code> will coerce the value to a <code>uint256</code>. That means that it can parse all the following values and return them as a <code>uint256</code>. That includes a number as type <code>number</code>, a stringified number as a <code>string</code> and of course it&#x27;s hex representation.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;hexUint&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x12C980&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;stringUint&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;115792089237316195423570985008687907853269984665640564039457584007913129639935&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;numberUint&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">115792089237316195423570985008687907853269984665640564039457584007913129639935</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Similarly, there are cheatcodes for all types (including <code>bytes</code> and <code>bytes32</code>) and their arrays (<code>vm.parseJsonUintArray</code>).</p>\n","isPage":false,"text":"\nAs described above, parseJson needs to deduce the type of JSON value and that has some inherent limitations. For that reason, there is a sub-family of parseJson* cheatcodes that coerce the type of the returned value.\nFor example vm.parseJsonUint(json, key) will coerce the value to a uint256. That means that it can parse all the following values and return them as a uint256. That includes a number as type number, a stringified number as a string and of course it&#x27;s hex representation.\n{\n  &quot;hexUint&quot;: &quot;0x12C980&quot;,\n  &quot;stringUint&quot;: &quot;115792089237316195423570985008687907853269984665640564039457584007913129639935&quot;,\n  &quot;numberUint&quot;: 115792089237316195423570985008687907853269984665640564039457584007913129639935\n}\nSimilarly, there are cheatcodes for all types (including bytes and bytes32) and their arrays (vm.parseJsonUintArray).\n","title":"Type Coercion","titles":[null,"parseJson"]},"929":{"href":"/reference/cheatcodes/parse-json#decoding-json-objects-into-solidity-structs","html":"\n<p>JSON objects are encoded as tuples, and can be decoded via tuples or structs. That means that you can define a <code>struct</code> in Solidity and it will decode the entire JSON object into that <code>struct</code>.</p>\n<p>For example:</p>\n<p>The following JSON:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;a&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">43</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;b&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;sigma&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>will be decoded into:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>As the values are returned as an abi-encoded tuple, the exact name of the attributes of the struct don&#x27;t need to match the names of the keys in the JSON. The above json file could also be decoded as:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> apple;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> pineapple;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>What matters is the alphabetical order. As the JSON object is an unordered data structure but the tuple is an ordered one, we had to somehow give order to the JSON. The easiest way was to order the keys by alphabetical order. That means that in order to decode the JSON object correctly, you will need to define attributes of the struct with <strong>types</strong> that correspond to the values of the alphabetical order of the keys of the JSON.</p>\n<ul>\n<li>The struct is interpreted serially. That means that the tuple&#x27;s first item will be decoded based on the first item of the struct definition (no alphabetical order).</li>\n<li>The JSON will parsed alphabetically, not serially.</li>\n<li>Note that this parsing uses Rust&#x27;s BTreeMap crate under the hood, meaning that uppercase and lowercase strings are treated differently. Uppercase characters <em>precede</em> lowercase in this lexicographical ordering, ie &quot;Zebra&quot; would precede &quot;apple&quot;.</li>\n</ul>\n<p>Thus, the first (in alphabetical order) value of the JSON, will be abi-encoded and then tried to be abi-decoded, based on the type of the first attribute of the <code>struct</code>.</p>\n<p>The above JSON would not be able to be decoded with the struct below:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>The reason is that it would try to decode the string <code>&quot;sigma&quot;</code> as a uint. To be exact, it would be decoded, but it would result to a wrong number, since it would interpret the bytes incorrectly.</p>\n<p>Another example, given the following JSON:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;apples&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;sweetness&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">7</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;sourness&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;color&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Red&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;sweetness&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;sourness&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;color&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Green&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;sweetness&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">9</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;sourness&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;color&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Yellow&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Fresh Fruit&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>And Solidity structs defined as follows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Apple</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> color;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sourness;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sweetness;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FruitStall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Apple[] apples;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> name;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>One would decode the JSON as follows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> root </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">projectRoot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> path </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">concat</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(root, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;/src/test/fixtures/fruitstall.json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> json </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">readFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(path);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseJson</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(json);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FruitStall </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fruitstall </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">decode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data, (FruitStall));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Logs: Welcome to Fresh Fruit</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console2.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Welcome to&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fruitstall.name);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fruitstall.apples.length; i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Apple </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> apple </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fruitstall.apples[i];</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Logs:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Color: Red, Sourness: 3, Sweetness: 7</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Color: Green, Sourness: 5, Sweetness: 5</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Color: Yellow, Sourness: 1, Sweetness: 9</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console2.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;Color: %s, Sourness: %d, Sweetness: %d&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        apple.color,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        apple.sourness,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        apple.sweetness</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nJSON objects are encoded as tuples, and can be decoded via tuples or structs. That means that you can define a struct in Solidity and it will decode the entire JSON object into that struct.\nFor example:\nThe following JSON:\n{\n  &quot;a&quot;: 43,\n  &quot;b&quot;: &quot;sigma&quot;\n}\nwill be decoded into:\nstruct Json {\n    uint256 a;\n    string b;\n}\nAs the values are returned as an abi-encoded tuple, the exact name of the attributes of the struct don&#x27;t need to match the names of the keys in the JSON. The above json file could also be decoded as:\nstruct Json {\n    uint256 apple;\n    string pineapple;\n}\nWhat matters is the alphabetical order. As the JSON object is an unordered data structure but the tuple is an ordered one, we had to somehow give order to the JSON. The easiest way was to order the keys by alphabetical order. That means that in order to decode the JSON object correctly, you will need to define attributes of the struct with types that correspond to the values of the alphabetical order of the keys of the JSON.\n\nThe struct is interpreted serially. That means that the tuple&#x27;s first item will be decoded based on the first item of the struct definition (no alphabetical order).\nThe JSON will parsed alphabetically, not serially.\nNote that this parsing uses Rust&#x27;s BTreeMap crate under the hood, meaning that uppercase and lowercase strings are treated differently. Uppercase characters precede lowercase in this lexicographical ordering, ie &quot;Zebra&quot; would precede &quot;apple&quot;.\n\nThus, the first (in alphabetical order) value of the JSON, will be abi-encoded and then tried to be abi-decoded, based on the type of the first attribute of the struct.\nThe above JSON would not be able to be decoded with the struct below:\nstruct Json {\n    uint256 b;\n    uint256 a;\n}\nThe reason is that it would try to decode the string &quot;sigma&quot; as a uint. To be exact, it would be decoded, but it would result to a wrong number, since it would interpret the bytes incorrectly.\nAnother example, given the following JSON:\n{\n  &quot;apples&quot;: [\n    {\n      &quot;sweetness&quot;: 7,\n      &quot;sourness&quot;: 3,\n      &quot;color&quot;: &quot;Red&quot;\n    },\n    {\n      &quot;sweetness&quot;: 5,\n      &quot;sourness&quot;: 5,\n      &quot;color&quot;: &quot;Green&quot;\n    },\n    {\n      &quot;sweetness&quot;: 9,\n      &quot;sourness&quot;: 1,\n      &quot;color&quot;: &quot;Yellow&quot;\n    }\n  ],\n  &quot;name&quot;: &quot;Fresh Fruit&quot;\n}\nAnd Solidity structs defined as follows:\nstruct Apple {\n    string color;\n    uint8 sourness;\n    uint8 sweetness;\n}\n \nstruct FruitStall {\n    Apple[] apples;\n    string name;\n}\nOne would decode the JSON as follows:\nstring memory root = vm.projectRoot();\nstring memory path = string.concat(root, &quot;/src/test/fixtures/fruitstall.json&quot;);\nstring memory json = vm.readFile(path);\nbytes memory data = vm.parseJson(json);\nFruitStall memory fruitstall = abi.decode(data, (FruitStall));\n \n// Logs: Welcome to Fresh Fruit\nconsole2.log(&quot;Welcome to&quot;, fruitstall.name);\n \nfor (uint256 i = 0; i &lt; fruitstall.apples.length; i++) {\n    Apple memory apple = fruitstall.apples[i];\n \n    // Logs:\n    // Color: Red, Sourness: 3, Sweetness: 7\n    // Color: Green, Sourness: 5, Sweetness: 5\n    // Color: Yellow, Sourness: 1, Sweetness: 9\n    console2.log(\n        &quot;Color: %s, Sourness: %d, Sweetness: %d&quot;,\n        apple.color,\n        apple.sourness,\n        apple.sweetness\n    );\n}\n","title":"Decoding JSON objects into Solidity structs","titles":[null,"parseJson"]},"930":{"href":"/reference/cheatcodes/parse-json#decoding-json-objects-a-tip","html":"\n<p>If your JSON object has <code>hex numbers</code>, they will be encoded as bytes. The way to decode them as <code>uint</code> for better UX, is to define two <code>struct</code>, one intermediary with the definition of these values as <code>bytes</code> and then a final <code>struct</code> that will be consumed by the user.</p>\n<ol>\n<li>Decode the JSON into the intermediary <code>struct</code></li>\n<li>Convert the intermediary struct to the final one, by converting the <code>bytes</code> to <code>uint</code>. We have a helper function in <code>forge-std</code> to do this</li>\n<li>Give the final <code>struct</code> to the user for consumption</li>\n</ol>\n","isPage":false,"text":"\nIf your JSON object has hex numbers, they will be encoded as bytes. The way to decode them as uint for better UX, is to define two struct, one intermediary with the definition of these values as bytes and then a final struct that will be consumed by the user.\n\nDecode the JSON into the intermediary struct\nConvert the intermediary struct to the final one, by converting the bytes to uint. We have a helper function in forge-std to do this\nGive the final struct to the user for consumption\n\n","title":"Decoding JSON Objects, a tip","titles":[null,"parseJson"]},"931":{"href":"/reference/cheatcodes/parse-json#how-to-use-stdjson","html":"\n<ol>\n<li>Import the library <code>import {stdJson} from &quot;forge-std/StdJson.sol&quot;;</code></li>\n<li>Define its usage with <code>string</code>: <code>using stdJson for string;</code></li>\n<li>If you want to parse simple values (numbers, address, etc.) use the helper functions</li>\n<li>If you want to parse entire JSON objects:\n<ol>\n<li>Define the <code>struct</code> in Solidity. Make sure to follow the alphabetical order -- it&#x27;s hard to debug</li>\n<li>Use the <code>parseRaw()</code> helper function to return abi-encoded <code>bytes</code> and then decode them to your struct</li>\n</ol>\n</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> root </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">projectRoot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> path </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">concat</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(root, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;/src/test/fixtures/broadcast.log.json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> json </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">readFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(path);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> transactionDetails </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> json.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseRaw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;.transactions[0].tx&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">RawTx1559Detail </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rawTxDetail </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">decode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transactionDetails, (RawTx1559Detail));</span></span></code></pre>\n","isPage":false,"text":"\n\nImport the library import {stdJson} from &quot;forge-std/StdJson.sol&quot;;\nDefine its usage with string: using stdJson for string;\nIf you want to parse simple values (numbers, address, etc.) use the helper functions\nIf you want to parse entire JSON objects:\n\nDefine the struct in Solidity. Make sure to follow the alphabetical order -- it&#x27;s hard to debug\nUse the parseRaw() helper function to return abi-encoded bytes and then decode them to your struct\n\n\n\nstring memory root = vm.projectRoot();\nstring memory path = string.concat(root, &quot;/src/test/fixtures/broadcast.log.json&quot;);\nstring memory json = vm.readFile(path);\nbytes memory transactionDetails = json.parseRaw(&quot;.transactions[0].tx&quot;);\nRawTx1559Detail memory rawTxDetail = abi.decode(transactionDetails, (RawTx1559Detail));\n","title":"How to use StdJson","titles":[null,"parseJson"]},"932":{"href":"/reference/cheatcodes/parse-json#forge-script-artifacts","html":"\n<p>We have gone ahead and created a handful of helper struct and functions to read the artifacts from broadcasting a forge script.</p>\n<p>Currently, we only support artifacts produced by EIP1559-compatible chains and we <strong>don&#x27;t</strong> support yet the parsing of the entire <code>broadcast.json</code> artifact. You will need to parse for individual values such as the <code>transactions</code>, the <code>receipts</code>, etc.</p>\n<p>To read the transactions, it&#x27;s as easy as doing:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testReadEIP1559Transactions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> root </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">projectRoot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> path </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">concat</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(root, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;/src/test/fixtures/broadcast.log.json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Tx1559[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> transactions </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> readTx1559s</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(path);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>and then you can access their various fields in these structs:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Tx1559</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] arguments;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contractAddress;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contractName;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> functionSig;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Tx1559Detail txDetail;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> opcode;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Tx1559Detail</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    AccessList[] accessList;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> from;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gas;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> nonce;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> to;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txType;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nWe have gone ahead and created a handful of helper struct and functions to read the artifacts from broadcasting a forge script.\nCurrently, we only support artifacts produced by EIP1559-compatible chains and we don&#x27;t support yet the parsing of the entire broadcast.json artifact. You will need to parse for individual values such as the transactions, the receipts, etc.\nTo read the transactions, it&#x27;s as easy as doing:\nfunction testReadEIP1559Transactions() public {\n    string memory root = vm.projectRoot();\n    string memory path = string.concat(root, &quot;/src/test/fixtures/broadcast.log.json&quot;);\n    Tx1559[] memory transactions = readTx1559s(path);\n}\nand then you can access their various fields in these structs:\nstruct Tx1559 {\n    string[] arguments;\n    address contractAddress;\n    string contractName;\n    string functionSig;\n    bytes32 hash;\n    Tx1559Detail txDetail;\n    string opcode;\n}\n \nstruct Tx1559Detail {\n    AccessList[] accessList;\n    bytes data;\n    address from;\n    uint256 gas;\n    uint256 nonce;\n    address to;\n    uint256 txType;\n    uint256 value;\n}\n","title":"Forge script artifacts","titles":[null,"parseJson"]},"933":{"href":"/reference/cheatcodes/parse-json#troubleshooting","html":"\n","isPage":false,"text":"\n","title":"Troubleshooting","titles":[null,"parseJson"]},"934":{"href":"/reference/cheatcodes/parse-json#cannot-read-file","html":"\n<blockquote>\n<p>FAIL. Reason: The path <code>&lt;file-path&gt;</code> is not allowed to be accessed for read operations</p>\n</blockquote>\n<p>If you receive this error, make sure that you enable read permissions in <code>foundry.toml</code> using the <a href=\"/reference/cheatcodes/fs.mdx\"><code>fs_permissions</code> key</a></p>\n","isPage":false,"text":"\n\nFAIL. Reason: The path &lt;file-path&gt; is not allowed to be accessed for read operations\n\nIf you receive this error, make sure that you enable read permissions in foundry.toml using the fs_permissions key\n","title":"Cannot read file","titles":[null,"parseJson","Troubleshooting"]},"935":{"href":"/reference/cheatcodes/parse-json#references","html":"\n<ul>\n<li>Helper Library: <a href=\"https://github.com/foundry-rs/forge-std/blob/master/src/StdJson.sol\">stdJson.sol</a></li>\n<li>Usage examples: <a href=\"https://github.com/foundry-rs/forge-std/blob/ca8d6e00ea9cb035f6856ff732203c9a3c48b966/src/test/StdCheats.t.sol#L206\">stdCheats.t.sol</a></li>\n<li><a href=\"/reference/cheatcodes/fs.mdx\">File Cheatcodes</a>: cheatcodes for working with files</li>\n</ul>","isPage":false,"text":"\n\nHelper Library: stdJson.sol\nUsage examples: stdCheats.t.sol\nFile Cheatcodes: cheatcodes for working with files\n","title":"References","titles":[null,"parseJson"]},"936":{"href":"/reference/cheatcodes/parse-toml-keys#parsetomlkeys","html":"\n","isPage":true,"text":"\n","title":"parseTomlKeys","titles":[null]},"937":{"href":"/reference/cheatcodes/parse-toml-keys#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get list of keys present in a TOML string</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseTomlKeys</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> toml</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> keys</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\n// Get list of keys present in a TOML string\nfunction parseTomlKeys(string calldata toml, string calldata key) external pure returns (string[] memory keys);\n","title":"Signature","titles":[null,"parseTomlKeys"]},"938":{"href":"/reference/cheatcodes/parse-toml-keys#description","html":"\n<p>Gets list of keys present in a TOML string</p>\n","isPage":false,"text":"\nGets list of keys present in a TOML string\n","title":"Description","titles":[null,"parseTomlKeys"]},"939":{"href":"/reference/cheatcodes/parse-toml-keys#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// [key]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// a = 1</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// b = 2</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> toml </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;[key]\\n a = 1\\n b = 2&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> keys </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseTomlKeys</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(toml, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;.key&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// [&quot;a&quot;, &quot;b&quot;]</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// key = &quot;something&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> toml </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;key = \\&quot;something\\&quot;&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> keys </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseTomlKeys</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(toml, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;$&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// [&quot;key&quot;]</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// [[root_key]]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// a = 1</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// b = 2</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> toml </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;[[root_key]]\\n a = 1\\n b = 2&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> keys </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseTomlKeys</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(toml, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;.root_key.0&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// [&quot;a&quot;, &quot;b&quot;]</span></span></code></pre>","isPage":false,"text":"\n// [key]\n// a = 1\n// b = 2\n \nstring memory toml = &#x27;[key]\\n a = 1\\n b = 2&#x27;;\nstring[] memory keys = vm.parseTomlKeys(toml, &quot;.key&quot;); // [&quot;a&quot;, &quot;b&quot;]\n// key = &quot;something&quot;\n \nstring memory toml = &#x27;key = \\&quot;something\\&quot;&#x27;;\nstring[] memory keys = vm.parseTomlKeys(toml, &quot;$&quot;); // [&quot;key&quot;]\n// [[root_key]]\n// a = 1\n// b = 2\n \nstring memory toml = &#x27;[[root_key]]\\n a = 1\\n b = 2&#x27;;\nstring[] memory keys = vm.parseTomlKeys(toml, &quot;.root_key.0&quot;); // [&quot;a&quot;, &quot;b&quot;]","title":"Examples","titles":[null,"parseTomlKeys"]},"940":{"href":"/reference/cheatcodes/parse-toml#parsetoml","html":"\n","isPage":true,"text":"\n","title":"parseToml","titles":[null]},"941":{"href":"/reference/cheatcodes/parse-toml#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Return the value(s) that correspond to &#x27;key&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseToml</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> toml, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Return the entire TOML file</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseToml</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> toml);</span></span></code></pre>\n","isPage":false,"text":"\n// Return the value(s) that correspond to &#x27;key&#x27;\nvm.parseToml(string memory toml, string memory key)\n// Return the entire TOML file\nvm.parseToml(string memory toml);\n","title":"Signature","titles":[null,"parseToml"]},"942":{"href":"/reference/cheatcodes/parse-toml#description","html":"\n<p>These cheatcodes are used to parse TOML files in the form of strings after converting to JSON. Usually, it&#x27;s coupled with <code>vm.readFile()</code> which returns an entire file in the form of a string.</p>\n<p>You can use <code>stdToml</code> from <code>forge-std</code>, as a helper library for better UX.</p>\n<p>The cheatcode accepts either a <code>key</code> to search for a specific value in the TOML, or no key to return the entire TOML. It returns the value as an abi-encoded <code>bytes</code> array. That means that you will have to <code>abi.decode()</code> to the appropriate type for it to function properly, else it will <code>revert</code>.</p>\n","isPage":false,"text":"\nThese cheatcodes are used to parse TOML files in the form of strings after converting to JSON. Usually, it&#x27;s coupled with vm.readFile() which returns an entire file in the form of a string.\nYou can use stdToml from forge-std, as a helper library for better UX.\nThe cheatcode accepts either a key to search for a specific value in the TOML, or no key to return the entire TOML. It returns the value as an abi-encoded bytes array. That means that you will have to abi.decode() to the appropriate type for it to function properly, else it will revert.\n","title":"Description","titles":[null,"parseToml"]},"943":{"href":"/reference/cheatcodes/parse-toml#jsonpath-key","html":"\n<p><code>parseToml</code> uses a syntax called JSONpath to form arbitrary keys for arbitrary JSON files. The same syntax (or rather a dialect) is used by the tool <a href=\"https://stedolan.github.io/jq/\"><code>jq</code></a>.</p>\n<p>To read more about the syntax, you can visit the <a href=\"https://crates.io/crates/jsonpath-rust\">README</a> of the rust library that we use under the hood to implement the feature. That way you can be certain that you are using the correct dialect of jsonPath.</p>\n","isPage":false,"text":"\nparseToml uses a syntax called JSONpath to form arbitrary keys for arbitrary JSON files. The same syntax (or rather a dialect) is used by the tool jq.\nTo read more about the syntax, you can visit the README of the rust library that we use under the hood to implement the feature. That way you can be certain that you are using the correct dialect of jsonPath.\n","title":"JSONpath Key","titles":[null,"parseToml"]},"944":{"href":"/reference/cheatcodes/parse-toml#encoding-rules","html":"\n<p>We use the terms <code>string</code>, <code>integer</code>, <code>float</code>, <code>boolean</code>, <code>array</code>, <code>datetime</code>, <code>inline-table</code> as they are defined in the <a href=\"https://www.w3schools.io/file/toml-datatypes/\">TOML spec</a>.</p>\n<p>We use the terms <code>number</code>, <code>string</code>, <code>object</code>, <code>array</code>, <code>boolean</code>, <code>null</code> as they are defined in the <a href=\"https://www.w3schools.com/js/js_json_datatypes.asp\">JSON spec</a>.</p>\n<strong>TOML Encoding Rules</strong>\n<ul>\n<li><code>float</code> is limited to 32 bits (i.e. <code>+1.5</code>). It is recommended to use strings to prevent precision loss</li>\n<li><code>integer</code> is limited to 64 bits (i.e. <code>9223372036854775807</code>). It is recommended to use strings to encode large values</li>\n<li>Array values cannot have mixed types (i.e. <code>[256, &quot;b&quot;]</code>, only <code>[256, 512]</code> or <code>[&quot;a&quot;, &quot;b&quot;]</code>)</li>\n<li><code>datetime</code> is encoded as a <code>string</code> upon conversion</li>\n<li><code>float</code> is encoded as a <code>number</code> upon conversion</li>\n<li><code>integer</code> is encoded as a <code>number</code> upon conversion</li>\n<li><code>inline-table</code> (or <code>table</code>) is encoded as <code>object</code> upon conversion</li>\n<li><code>null</code> is encoded as a <code>&quot;null&quot;</code> string</li>\n</ul>\n<strong>JSON Encoding Rules</strong>\n<ul>\n<li><code>null</code> is encoded as <code>bytes32(0)</code> or <code>&quot;&quot;</code></li>\n<li>Numbers &gt;= 0 are encoded as <code>uint256</code></li>\n<li>Negative numbers are encoded as <code>int256</code></li>\n<li>Floating point numbers with decimal digits are not allowed</li>\n<li>Floating point numbers using the scientific notation can be <code>uint256</code> or <code>int256</code> depending on the value</li>\n<li>A string that can be decoded into a type of <code>H160</code> and starts with <code>0x</code> is encoded as an <code>address</code>. In other words, if it can be decoded into an address, it&#x27;s probably an address</li>\n<li>A string that starts with <code>0x</code> is encoded as <code>bytes32</code> if it has a length of <code>66</code> or else to <code>bytes</code></li>\n<li>A string that is neither an <code>address</code>, a <code>bytes32</code> or <code>bytes</code>, is encoded as a <code>string</code></li>\n<li>An array is encoded as a dynamic array of the type of its first element</li>\n<li>An object (<code>{}</code>) is encoded as a <code>tuple</code></li>\n</ul>\n","isPage":false,"text":"\nWe use the terms string, integer, float, boolean, array, datetime, inline-table as they are defined in the TOML spec.\nWe use the terms number, string, object, array, boolean, null as they are defined in the JSON spec.\nTOML Encoding Rules\n\nfloat is limited to 32 bits (i.e. +1.5). It is recommended to use strings to prevent precision loss\ninteger is limited to 64 bits (i.e. 9223372036854775807). It is recommended to use strings to encode large values\nArray values cannot have mixed types (i.e. [256, &quot;b&quot;], only [256, 512] or [&quot;a&quot;, &quot;b&quot;])\ndatetime is encoded as a string upon conversion\nfloat is encoded as a number upon conversion\ninteger is encoded as a number upon conversion\ninline-table (or table) is encoded as object upon conversion\nnull is encoded as a &quot;null&quot; string\n\nJSON Encoding Rules\n\nnull is encoded as bytes32(0) or &quot;&quot;\nNumbers &gt;= 0 are encoded as uint256\nNegative numbers are encoded as int256\nFloating point numbers with decimal digits are not allowed\nFloating point numbers using the scientific notation can be uint256 or int256 depending on the value\nA string that can be decoded into a type of H160 and starts with 0x is encoded as an address. In other words, if it can be decoded into an address, it&#x27;s probably an address\nA string that starts with 0x is encoded as bytes32 if it has a length of 66 or else to bytes\nA string that is neither an address, a bytes32 or bytes, is encoded as a string\nAn array is encoded as a dynamic array of the type of its first element\nAn object ({}) is encoded as a tuple\n\n","title":"Encoding Rules","titles":[null,"parseToml"]},"945":{"href":"/reference/cheatcodes/parse-toml#type-coercion","html":"\n<p>As described above, <code>parseToml</code> needs to deduce the type of TOML value and that has some inherent limitations. For that reason, there is a sub-family of <code>parseToml*</code> cheatcodes that coerce the type of the returned value.</p>\n<p>For example <code>vm.parseTomlUint(toml, key)</code> will coerce the value to a <code>uint256</code>. That means that it can parse all the following values and return them as a <code>uint256</code>. That includes a number as type <code>number</code>, a stringified number as a <code>string</code> and of course it&#x27;s hex representation.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">hexUint = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x12C980&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stringUint = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;115792089237316195423570985008687907853269984665640564039457584007913129639935&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">numberUint = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">9223372036854775807</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> # TOML is limited to 64-bit integers</span></span></code></pre>\n<p>Similarly, there are cheatcodes for all types (including <code>bytes</code> and <code>bytes32</code>) and their arrays (<code>vm.parseTomlUintArray</code>).</p>\n","isPage":false,"text":"\nAs described above, parseToml needs to deduce the type of TOML value and that has some inherent limitations. For that reason, there is a sub-family of parseToml* cheatcodes that coerce the type of the returned value.\nFor example vm.parseTomlUint(toml, key) will coerce the value to a uint256. That means that it can parse all the following values and return them as a uint256. That includes a number as type number, a stringified number as a string and of course it&#x27;s hex representation.\nhexUint = &quot;0x12C980&quot;\nstringUint = &quot;115792089237316195423570985008687907853269984665640564039457584007913129639935&quot;\nnumberUint = 9223372036854775807 # TOML is limited to 64-bit integers\nSimilarly, there are cheatcodes for all types (including bytes and bytes32) and their arrays (vm.parseTomlUintArray).\n","title":"Type Coercion","titles":[null,"parseToml"]},"946":{"href":"/reference/cheatcodes/parse-toml#decoding-toml-tables-into-solidity-structs","html":"\n<p>TOML tables are converted to JSON objects. JSON objects are encoded as tuples, and can be decoded via tuples or structs. That means that you can define a <code>struct</code> in Solidity and it will decode the entire JSON object into that <code>struct</code>.</p>\n<p>For example:</p>\n<p>The following TOML:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">a = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">43</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">b = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;sigma&quot;</span></span></code></pre>\n<p>will be converted into the following JSON:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;a&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">43</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;b&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;sigma&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>will be decoded into:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>As the values are returned as an abi-encoded tuple, the exact name of the attributes of the struct don&#x27;t need to match the names of the keys in the JSON. The above json file could also be decoded as:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> apple;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> pineapple;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>What matters is the alphabetical order. As the JSON object is an unordered data structure but the tuple is an ordered one, we had to somehow give order to the JSON. The easiest way was to order the keys by alphabetical order. That means that in order to decode the JSON object correctly, you will need to define attributes of the struct with <strong>types</strong> that correspond to the values of the alphabetical order of the keys of the JSON.</p>\n<ul>\n<li>The struct is interpreted serially. That means that the tuple&#x27;s first item will be decoded based on the first item of the struct definition (no alphabetical order).</li>\n<li>The JSON will parsed alphabetically, not serially.</li>\n<li>Note that this parsing uses Rust&#x27;s BTreeMap crate under the hood, meaning that uppercase and lowercase strings are treated differently. Uppercase characters <em>precede</em> lowercase in this lexicographical ordering, ie &quot;Zebra&quot; would precede &quot;apple&quot;.</li>\n</ul>\n<p>Thus, the first (in alphabetical order) value of the JSON, will be abi-encoded and then tried to be abi-decoded, based on the type of the first attribute of the <code>struct</code>.</p>\n<p>The above TOML would not be able to be decoded with the struct below:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>The reason is that it would try to decode the string <code>&quot;sigma&quot;</code> as a uint. To be exact, it would be decoded, but it would result to a wrong number, since it would interpret the bytes incorrectly.</p>\n<p>Another example, given the following TOML:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">name = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Fresh Fruit&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">apples</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sweetness = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">7</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sourness = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">color = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Red&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">apples</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sweetness = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sourness = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">color = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Green&quot;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">apples</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sweetness = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">9</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sourness = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">color = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Yellow&quot;</span></span></code></pre>\n<p>will be converted into the following JSON:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;apples&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;sweetness&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">7</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;sourness&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;color&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Red&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;sweetness&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;sourness&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;color&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Green&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;sweetness&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">9</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;sourness&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;color&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Yellow&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;name&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Fresh Fruit&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>And Solidity structs defined as follows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Apple</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> color;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sourness;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sweetness;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FruitStall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Apple[] apples;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> name;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>One would decode the TOML as follows:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> root </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">projectRoot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> path </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">concat</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(root, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;/src/test/fixtures/fruitstall.toml&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> toml </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">readFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(path);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseToml</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(toml);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">FruitStall </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fruitstall </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">decode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data, (FruitStall));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Logs: Welcome to Fresh Fruit</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console2.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Welcome to&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, fruitstall.name);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fruitstall.apples.length; i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Apple </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> apple </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fruitstall.apples[i];</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Logs:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Color: Red, Sourness: 3, Sweetness: 7</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Color: Green, Sourness: 5, Sweetness: 5</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Color: Yellow, Sourness: 1, Sweetness: 9</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console2.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">        &quot;Color: %s, Sourness: %d, Sweetness: %d&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        apple.color,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        apple.sourness,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        apple.sweetness</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTOML tables are converted to JSON objects. JSON objects are encoded as tuples, and can be decoded via tuples or structs. That means that you can define a struct in Solidity and it will decode the entire JSON object into that struct.\nFor example:\nThe following TOML:\na = 43\nb = &quot;sigma&quot;\nwill be converted into the following JSON:\n{\n  &quot;a&quot;: 43,\n  &quot;b&quot;: &quot;sigma&quot;\n}\nwill be decoded into:\nstruct Json {\n    uint256 a;\n    string b;\n}\nAs the values are returned as an abi-encoded tuple, the exact name of the attributes of the struct don&#x27;t need to match the names of the keys in the JSON. The above json file could also be decoded as:\nstruct Json {\n    uint256 apple;\n    string pineapple;\n}\nWhat matters is the alphabetical order. As the JSON object is an unordered data structure but the tuple is an ordered one, we had to somehow give order to the JSON. The easiest way was to order the keys by alphabetical order. That means that in order to decode the JSON object correctly, you will need to define attributes of the struct with types that correspond to the values of the alphabetical order of the keys of the JSON.\n\nThe struct is interpreted serially. That means that the tuple&#x27;s first item will be decoded based on the first item of the struct definition (no alphabetical order).\nThe JSON will parsed alphabetically, not serially.\nNote that this parsing uses Rust&#x27;s BTreeMap crate under the hood, meaning that uppercase and lowercase strings are treated differently. Uppercase characters precede lowercase in this lexicographical ordering, ie &quot;Zebra&quot; would precede &quot;apple&quot;.\n\nThus, the first (in alphabetical order) value of the JSON, will be abi-encoded and then tried to be abi-decoded, based on the type of the first attribute of the struct.\nThe above TOML would not be able to be decoded with the struct below:\nstruct Json {\n    uint256 b;\n    uint256 a;\n}\nThe reason is that it would try to decode the string &quot;sigma&quot; as a uint. To be exact, it would be decoded, but it would result to a wrong number, since it would interpret the bytes incorrectly.\nAnother example, given the following TOML:\nname = &quot;Fresh Fruit&quot;\n \n[[apples]]\nsweetness = 7\nsourness = 3\ncolor = &quot;Red&quot;\n \n[[apples]]\nsweetness = 5\nsourness = 5\ncolor = &quot;Green&quot;\n \n[[apples]]\nsweetness = 9\nsourness = 1\ncolor = &quot;Yellow&quot;\nwill be converted into the following JSON:\n{\n  &quot;apples&quot;: [\n    {\n      &quot;sweetness&quot;: 7,\n      &quot;sourness&quot;: 3,\n      &quot;color&quot;: &quot;Red&quot;\n    },\n    {\n      &quot;sweetness&quot;: 5,\n      &quot;sourness&quot;: 5,\n      &quot;color&quot;: &quot;Green&quot;\n    },\n    {\n      &quot;sweetness&quot;: 9,\n      &quot;sourness&quot;: 1,\n      &quot;color&quot;: &quot;Yellow&quot;\n    }\n  ],\n  &quot;name&quot;: &quot;Fresh Fruit&quot;\n}\nAnd Solidity structs defined as follows:\nstruct Apple {\n    string color;\n    uint8 sourness;\n    uint8 sweetness;\n}\n \nstruct FruitStall {\n    Apple[] apples;\n    string name;\n}\nOne would decode the TOML as follows:\nstring memory root = vm.projectRoot();\nstring memory path = string.concat(root, &quot;/src/test/fixtures/fruitstall.toml&quot;);\nstring memory toml = vm.readFile(path);\nbytes memory data = vm.parseToml(toml);\nFruitStall memory fruitstall = abi.decode(data, (FruitStall));\n \n// Logs: Welcome to Fresh Fruit\nconsole2.log(&quot;Welcome to&quot;, fruitstall.name);\n \nfor (uint256 i = 0; i &lt; fruitstall.apples.length; i++) {\n    Apple memory apple = fruitstall.apples[i];\n \n    // Logs:\n    // Color: Red, Sourness: 3, Sweetness: 7\n    // Color: Green, Sourness: 5, Sweetness: 5\n    // Color: Yellow, Sourness: 1, Sweetness: 9\n    console2.log(\n        &quot;Color: %s, Sourness: %d, Sweetness: %d&quot;,\n        apple.color,\n        apple.sourness,\n        apple.sweetness\n    );\n}\n","title":"Decoding TOML tables into Solidity structs","titles":[null,"parseToml"]},"947":{"href":"/reference/cheatcodes/parse-toml#how-to-use-stdtoml","html":"\n<ol>\n<li>Import the library <code>import {stdToml} from &quot;forge-std/StdToml.sol&quot;;</code></li>\n<li>Define its usage with <code>string</code>: <code>using stdToml for string;</code></li>\n<li>If you want to parse simple values (numbers, address, etc.) use the helper functions</li>\n<li>If you want to parse entire TOML tables:\n<ol>\n<li>Define the <code>struct</code> in Solidity. Make sure to follow the alphabetical order -- it&#x27;s hard to debug</li>\n<li>Use the <code>parseRaw()</code> helper function to return abi-encoded <code>bytes</code> and then decode them to your struct</li>\n</ol>\n</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> root </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">projectRoot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> path </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">concat</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(root, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;/src/test/fixtures/config.toml&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> toml </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">readFile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(path);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> toml.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseRaw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;.&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Config </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> config </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">decode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data, (Config))</span></span></code></pre>\n","isPage":false,"text":"\n\nImport the library import {stdToml} from &quot;forge-std/StdToml.sol&quot;;\nDefine its usage with string: using stdToml for string;\nIf you want to parse simple values (numbers, address, etc.) use the helper functions\nIf you want to parse entire TOML tables:\n\nDefine the struct in Solidity. Make sure to follow the alphabetical order -- it&#x27;s hard to debug\nUse the parseRaw() helper function to return abi-encoded bytes and then decode them to your struct\n\n\n\nstring memory root = vm.projectRoot();\nstring memory path = string.concat(root, &quot;/src/test/fixtures/config.toml&quot;);\nstring memory toml = vm.readFile(path);\nbytes memory data = toml.parseRaw(&quot;.&quot;);\nConfig memory config = abi.decode(data, (Config))\n","title":"How to use StdToml","titles":[null,"parseToml"]},"948":{"href":"/reference/cheatcodes/parse-toml#troubleshooting","html":"\n","isPage":false,"text":"\n","title":"Troubleshooting","titles":[null,"parseToml"]},"949":{"href":"/reference/cheatcodes/parse-toml#cannot-read-file","html":"\n<blockquote>\n<p>FAIL. Reason: The path <code>&lt;file-path&gt;</code> is not allowed to be accessed for read operations</p>\n</blockquote>\n<p>If you receive this error, make sure that you enable read permissions in <code>foundry.toml</code> using the <a href=\"/reference/cheatcodes/fs.mdx\"><code>fs_permissions</code> key</a></p>\n","isPage":false,"text":"\n\nFAIL. Reason: The path &lt;file-path&gt; is not allowed to be accessed for read operations\n\nIf you receive this error, make sure that you enable read permissions in foundry.toml using the fs_permissions key\n","title":"Cannot read file","titles":[null,"parseToml","Troubleshooting"]},"950":{"href":"/reference/cheatcodes/parse-toml#references","html":"\n<ul>\n<li>Helper Library: <a href=\"https://github.com/foundry-rs/forge-std/blob/master/src/StdToml.sol\">stdToml.sol</a></li>\n<li><a href=\"/reference/cheatcodes/fs.mdx\">File Cheatcodes</a>: cheatcodes for working with files</li>\n</ul>","isPage":false,"text":"\n\nHelper Library: stdToml.sol\nFile Cheatcodes: cheatcodes for working with files\n","title":"References","titles":[null,"parseToml"]},"951":{"href":"/reference/cheatcodes/parse-uint#parseuint","html":"\n","isPage":true,"text":"\n","title":"parseUint","titles":[null]},"952":{"href":"/reference/cheatcodes/parse-uint#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseUint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> stringifiedValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> parsedValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction parseUint(string calldata stringifiedValue) external pure returns (uint256 parsedValue);\n","title":"Signature","titles":[null,"parseUint"]},"953":{"href":"/reference/cheatcodes/parse-uint#description","html":"\n<p>Parses the value of <code>string</code> into <code>uint256</code></p>\n","isPage":false,"text":"\nParses the value of string into uint256\n","title":"Description","titles":[null,"parseUint"]},"954":{"href":"/reference/cheatcodes/parse-uint#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> uintAsString </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;12345&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stringToUint </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseUint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(uintAsString); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 12345</span></span></code></pre>","isPage":false,"text":"\nstring memory uintAsString = &quot;12345&quot;;\nuint256 stringToUint = vm.parseUint(uintAsString); // 12345","title":"Examples","titles":[null,"parseUint"]},"955":{"href":"/reference/cheatcodes/pause-gas-metering#pausegasmetering","html":"\n","isPage":true,"text":"\n","title":"pauseGasMetering","titles":[null]},"956":{"href":"/reference/cheatcodes/pause-gas-metering#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> pauseGasMetering</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction pauseGasMetering() external;\n","title":"Signature","titles":[null,"pauseGasMetering"]},"957":{"href":"/reference/cheatcodes/pause-gas-metering#description","html":"\n<p>Pauses gas metering (i.e. <code>gasleft()</code> does not decrease as operations are executed).</p>\n<p>This can be useful for getting a better sense of gas costs, by turning off gas metering for unnecessary code, as well as long-running scripts that would otherwise run out of gas.</p>\n<blockquote>\n<p>ℹ️ <strong>Note</strong></p>\n<p><code>pauseGasMetering</code> <em>turns off DoS protections</em> that come from metering gas usage.</p>\n<p>Exposing a service that assumes a particular instance of the EVM will complete due to gas usage no longer is true, and a timeout should be enabled in that case.</p>\n</blockquote>","isPage":false,"text":"\nPauses gas metering (i.e. gasleft() does not decrease as operations are executed).\nThis can be useful for getting a better sense of gas costs, by turning off gas metering for unnecessary code, as well as long-running scripts that would otherwise run out of gas.\n\nℹ️ Note\npauseGasMetering turns off DoS protections that come from metering gas usage.\nExposing a service that assumes a particular instance of the EVM will complete due to gas usage no longer is true, and a timeout should be enabled in that case.\n","title":"Description","titles":[null,"pauseGasMetering"]},"958":{"href":"/reference/cheatcodes/prank#prank","html":"\n","isPage":true,"text":"\n","title":"prank","titles":[null]},"959":{"href":"/reference/cheatcodes/prank#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> prank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> msgSender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> prank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> msgSender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> delegateCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> prank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> msgSender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> txOrigin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> prank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> msgSender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> txOrigin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> delegateCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction prank(address msgSender) external;\nfunction prank(address msgSender, bool delegateCall) external;\nfunction prank(address msgSender, address txOrigin) external;\nfunction prank(address msgSender, address txOrigin, bool delegateCall) external;\n","title":"Signature","titles":[null,"prank"]},"960":{"href":"/reference/cheatcodes/prank#description","html":"\n<ul>\n<li><code>prank(address msgSender)</code>: sets <code>msg.sender</code> to the specified address <strong>for the next call</strong>. &quot;The next call&quot; includes static calls as well, but not delegate calls or calls to the cheat code address.</li>\n<li><code>prank(address msgSender, address txOrigin)</code>: sets <code>msg.sender</code> and the <code>tx.origin</code> addresses <strong>for the next call</strong>.</li>\n<li><code>prank(address msgSender, bool delegateCall)</code>: if <code>delegateCall</code> value is <code>true</code> then sets <code>msg.sender</code> to the specified address <strong>for the next delegate call</strong>.</li>\n<li><code>prank(address msgSender, address txOrigin, bool delegateCall)</code>: if <code>delegateCall</code> value is <code>true</code> then sets <code>msg.sender</code> and the <code>tx.origin</code> addresses <strong>for the next delegate call</strong>.</li>\n</ul>\n<blockquote>\n<p>ℹ️ <strong>Note</strong></p>\n<p>The delegate calls cannot be pranked from an EOA.</p>\n</blockquote>\n","isPage":false,"text":"\n\nprank(address msgSender): sets msg.sender to the specified address for the next call. &quot;The next call&quot; includes static calls as well, but not delegate calls or calls to the cheat code address.\nprank(address msgSender, address txOrigin): sets msg.sender and the tx.origin addresses for the next call.\nprank(address msgSender, bool delegateCall): if delegateCall value is true then sets msg.sender to the specified address for the next delegate call.\nprank(address msgSender, address txOrigin, bool delegateCall): if delegateCall value is true then sets msg.sender and the tx.origin addresses for the next delegate call.\n\n\nℹ️ Note\nThe delegate calls cannot be pranked from an EOA.\n\n","title":"Description","titles":[null,"prank"]},"961":{"href":"/reference/cheatcodes/prank#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// function withdraw() public {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">///     require(msg.sender == owner);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">prank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(owner);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">myContract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">withdraw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// [PASS]</span></span></code></pre>\n","isPage":false,"text":"\n/// function withdraw() public {\n///     require(msg.sender == owner);\n \nvm.prank(owner);\nmyContract.withdraw(); // [PASS]\n","title":"Examples","titles":[null,"prank"]},"962":{"href":"/reference/cheatcodes/prank#see-also","html":"\n<p>Forge Standard Library</p>\n<p><a href=\"/reference/forge-std/hoax.mdx\"><code>hoax</code></a></p>","isPage":false,"text":"\nForge Standard Library\nhoax","title":"SEE ALSO","titles":[null,"prank"]},"963":{"href":"/reference/cheatcodes/prevrandao#prevrandao","html":"\n","isPage":true,"text":"\n","title":"prevrandao","titles":[null]},"964":{"href":"/reference/cheatcodes/prevrandao#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> prevrandao</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction prevrandao(bytes32) external;\n","title":"Signature","titles":[null,"prevrandao"]},"965":{"href":"/reference/cheatcodes/prevrandao#description","html":"\n<p>Sets <code>block.prevrandao</code>.</p>\n<p>If used with an EVM version previous to the Paris hard fork, it will revert. In that case, use <a href=\"./difficulty.md\"><code>vm.difficulty</code></a> instead.</p>\n","isPage":false,"text":"\nSets block.prevrandao.\nIf used with an EVM version previous to the Paris hard fork, it will revert. In that case, use vm.difficulty instead.\n","title":"Description","titles":[null,"prevrandao"]},"966":{"href":"/reference/cheatcodes/prevrandao#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">prevrandao</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">42</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)));</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.prevrandao); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 42</span></span></code></pre>","isPage":false,"text":"\nvm.prevrandao(bytes32(uint256(42)));\nemit log_uint(block.prevrandao); // 42","title":"Examples","titles":[null,"prevrandao"]},"967":{"href":"/reference/cheatcodes/project-root#projectroot","html":"\n","isPage":true,"text":"\n","title":"projectRoot","titles":[null]},"968":{"href":"/reference/cheatcodes/project-root#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> projectRoot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction projectRoot() external returns (string memory);\n","title":"Signature","titles":[null,"projectRoot"]},"969":{"href":"/reference/cheatcodes/project-root#description","html":"\n<p>Returns the root directory of the current Foundry project.</p>","isPage":false,"text":"\nReturns the root directory of the current Foundry project.","title":"Description","titles":[null,"projectRoot"]},"970":{"href":"/reference/cheatcodes/prompt#prompt","html":"\n","isPage":true,"text":"\n","title":"prompt","titles":[null]},"971":{"href":"/reference/cheatcodes/prompt#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> prompt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> promptText</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> input</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> promptSecret</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> promptText</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> input</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> promptSecretUint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> promptText</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction prompt(string calldata promptText) external returns (string memory input);\nfunction promptSecret(string calldata promptText) external returns (string memory input);\nfunction promptSecretUint(string calldata promptText) external returns (uint256);\n","title":"Signature","titles":[null,"prompt"]},"972":{"href":"/reference/cheatcodes/prompt#description","html":"\n<p>Display an interactive prompt to the user for inserting arbitrary data.</p>\n<p><code>vm.prompt</code> displays an interactive input, while <code>vm.promptSecret</code> &amp; <code>vm.promptSecretUint</code> display a\nhidden input, used for passwords and other secret information that should not\nleak to the terminal.</p>\n<blockquote>\n<p>ℹ️ <strong>Note</strong></p>\n<p>This cheatcode is meant to be used in scripts ― not tests. It is also advised to\nfollow the best practices below for testing scripts that use <code>vm.prompt</code> and\nhandling timeouts, since scripts might otherwise hang or revert. This cheatcode\nreverts when running in a non-interactive shell.</p>\n</blockquote>\n","isPage":false,"text":"\nDisplay an interactive prompt to the user for inserting arbitrary data.\nvm.prompt displays an interactive input, while vm.promptSecret &amp; vm.promptSecretUint display a\nhidden input, used for passwords and other secret information that should not\nleak to the terminal.\n\nℹ️ Note\nThis cheatcode is meant to be used in scripts ― not tests. It is also advised to\nfollow the best practices below for testing scripts that use vm.prompt and\nhandling timeouts, since scripts might otherwise hang or revert. This cheatcode\nreverts when running in a non-interactive shell.\n\n","title":"Description","titles":[null,"prompt"]},"973":{"href":"/reference/cheatcodes/prompt#configuration","html":"\n<p>In order to prevent unwanted hangups, <code>vm.prompt</code> has a timeout configuration.</p>\n<p>In your <code>foundry.toml</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">prompt_timeout = </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">120</span></span></code></pre>\n<p>Default value is <code>120</code> and values are in seconds.</p>\n","isPage":false,"text":"\nIn order to prevent unwanted hangups, vm.prompt has a timeout configuration.\nIn your foundry.toml:\nprompt_timeout = 120\nDefault value is 120 and values are in seconds.\n","title":"Configuration","titles":[null,"prompt"]},"974":{"href":"/reference/cheatcodes/prompt#best-practices","html":"\n","isPage":false,"text":"\n","title":"Best practices","titles":[null,"prompt"]},"975":{"href":"/reference/cheatcodes/prompt#testing-scripts-that-use-vmprompt","html":"\n<p>When testing scripts containing <code>vm.prompt</code> it is recommended to use the\nfollowing pattern:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> myUint </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseUint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">prompt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;enter uint&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(myUint);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> myUint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // actual logic</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>That way, we are keeping the UX gain (don&#x27;t have to provide <code>--sig</code> argument\nwhen running the script), but tests can set any value to <code>myUint</code> and not just\na hardcoded default.</p>\n","isPage":false,"text":"\nWhen testing scripts containing vm.prompt it is recommended to use the\nfollowing pattern:\ncontract Script {\n    function run() public {\n        uint256 myUint = vm.parseUint(vm.prompt(&quot;enter uint&quot;));\n        run(myUint);\n    }\n \n    function run(uint256 myUint) public {\n        // actual logic\n    }\n}\nThat way, we are keeping the UX gain (don&#x27;t have to provide --sig argument\nwhen running the script), but tests can set any value to myUint and not just\na hardcoded default.\n","title":"Testing scripts that use vm.prompt","titles":[null,"prompt","Best practices"]},"976":{"href":"/reference/cheatcodes/prompt#handling-timeouts","html":"\n<p>When a user fails to provide an input before the timeout expires, the\n<code>vm.prompt</code> cheatcode reverts. If you&#x27;d like, timeouts can be handled by using\n<code>try/catch</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> input;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">prompt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Username&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> res</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    input </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> res;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    input </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Anonymous&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nWhen a user fails to provide an input before the timeout expires, the\nvm.prompt cheatcode reverts. If you&#x27;d like, timeouts can be handled by using\ntry/catch:\nstring memory input;\n \ntry vm.prompt(&quot;Username&quot;) returns (string memory res) {\n    input = res;\n}\ncatch (bytes memory) {\n    input = &quot;Anonymous&quot;;\n}\n","title":"Handling timeouts","titles":[null,"prompt","Best practices"]},"977":{"href":"/reference/cheatcodes/prompt#examples","html":"\n","isPage":false,"text":"\n","title":"Examples","titles":[null,"prompt"]},"978":{"href":"/reference/cheatcodes/prompt#choose-rpc-endpoint","html":"\n<p>Provide an option to choose the RPC/chain to run on.</p>\n<p>In your <code>foundry.toml</code> file:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">rpc_endpoints</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://eth.llamarpc.com&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">polygon = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://polygon.llamarpc.com&quot;</span></span></code></pre>\n<p>In your script:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rpcEndpoint </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">prompt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;RPC endpoint&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createSelectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rpcEndpoint);</span></span></code></pre>\n","isPage":false,"text":"\nProvide an option to choose the RPC/chain to run on.\nIn your foundry.toml file:\n[rpc_endpoints]\nmainnet = &quot;https://eth.llamarpc.com&quot;\npolygon = &quot;https://polygon.llamarpc.com&quot;\nIn your script:\nstring memory rpcEndpoint = vm.prompt(&quot;RPC endpoint&quot;);\nvm.createSelectFork(rpcEndpoint);\n","title":"Choose RPC endpoint","titles":[null,"prompt","Examples"]},"979":{"href":"/reference/cheatcodes/prompt#parse-user-input-into-native-types","html":"\n<p>We can use the string parsing cheatcodes to parse the responses from users:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> privateKey </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">promptSecretUint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Private key&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> to </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">prompt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Send to&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseUint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">prompt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Amount (wei)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">broadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(privateKey);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">payable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(to).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(amount);</span></span></code></pre>","isPage":false,"text":"\nWe can use the string parsing cheatcodes to parse the responses from users:\nuint privateKey = vm.promptSecretUint(&quot;Private key&quot;);\naddress to = vm.parseAddress(vm.prompt(&quot;Send to&quot;));\nuint amount = vm.parseUint(vm.prompt(&quot;Amount (wei)&quot;));\nvm.broadcast(privateKey);\npayable(to).transfer(amount);","title":"Parse user input into native types","titles":[null,"prompt","Examples"]},"980":{"href":"/reference/cheatcodes/read-callers#readcallers","html":"\n","isPage":true,"text":"\n","title":"readCallers","titles":[null]},"981":{"href":"/reference/cheatcodes/read-callers#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">enum</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CallerMode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    None</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    Broadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    RecurrentBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    Prank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    RecurrentPrank</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> readCallers</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">CallerMode</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> callerMode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> msgSender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> txOrigin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nenum CallerMode {\n    None,\n    Broadcast,\n    RecurrentBroadcast,\n    Prank,\n    RecurrentPrank\n}\n \nfunction readCallers()\nexternal\nreturns (CallerMode callerMode, address msgSender, address txOrigin);\n","title":"Signature","titles":[null,"readCallers"]},"982":{"href":"/reference/cheatcodes/read-callers#description","html":"\n<p>Reads the current <code>CallerMode</code>, <code>msg.sender</code>, and <code>tx.origin</code>.</p>\n<p>The <code>CallerMode</code> enum indicates if there is an active caller modification and the type.</p>\n<ul>\n<li>\n<p>If there is an active prank:</p>\n<ul>\n<li><code>callerMode</code> will be equal to:\n<ul>\n<li><code>CallerMode.Prank</code> if the prank has been set with <a href=\"/reference/cheatcodes/prank.mdx\"><code>prank</code></a>.</li>\n<li><code>CallerMode.RecurrentPrank</code> if the prank has been set with <a href=\"/reference/cheatcodes/start-prank.mdx\"><code>startPrank</code></a>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>If there is an active broadcast:</p>\n<ul>\n<li><code>callerMode</code> will be equal to:\n<ul>\n<li><code>CallerMode.Broadcast</code> if the broadcast has been set with <a href=\"/reference/cheatcodes/broadcast.mdx\"><code>broadcast</code></a>.</li>\n<li><code>CallerMode.RecurrentBroadcast</code> if the broadcast has been set with <a href=\"/reference/cheatcodes/start-broadcast.mdx\"><code>startBroadcast</code></a>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>If no caller modification is active:</p>\n<ul>\n<li><code>callerMode</code> will be equal to <code>CallerMode.None</code>.</li>\n</ul>\n</li>\n</ul>\n","isPage":false,"text":"\nReads the current CallerMode, msg.sender, and tx.origin.\nThe CallerMode enum indicates if there is an active caller modification and the type.\n\n\nIf there is an active prank:\n\ncallerMode will be equal to:\n\nCallerMode.Prank if the prank has been set with prank.\nCallerMode.RecurrentPrank if the prank has been set with startPrank.\n\n\n\n\n\nIf there is an active broadcast:\n\ncallerMode will be equal to:\n\nCallerMode.Broadcast if the broadcast has been set with broadcast.\nCallerMode.RecurrentBroadcast if the broadcast has been set with startBroadcast.\n\n\n\n\n\nIf no caller modification is active:\n\ncallerMode will be equal to CallerMode.None.\n\n\n\n","title":"Description","titles":[null,"readCallers"]},"983":{"href":"/reference/cheatcodes/read-callers#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">CallerMode callerMode;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> msgSender;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txOrigin;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Example 1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(callerMode, msgSender, txOrigin) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">readCallers</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(callerMode, CallerMode.None);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msgSender, defaultSenderAddress);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txOrigin, defaultOriginAddress);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Example 2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">prank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(senderPrankAddress);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(callerMode, msgSender, txOrigin) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">readCallers</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(callerMode, CallerMode.Prank);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msgSender, senderPrankAddress);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txOrigin, defaultOriginAddress);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Example 3</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">prank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(senderPrankAddress, originPrankAddress);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(callerMode, msgSender, txOrigin) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">readCallers</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(callerMode, CallerMode.Prank);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msgSender, senderPrankAddress);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txOrigin, originPrankAddress);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Example 4</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">broadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(broadcastAddress);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(callerMode, msgSender, txOrigin) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">readCallers</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(callerMode, CallerMode.Broadcast);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(msgSender, broadcastAddress);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txOrigin, broadcastAddress);</span></span></code></pre>\n","isPage":false,"text":"\nCallerMode callerMode;\naddress msgSender;\naddress txOrigin;\n \n// Example 1\n(callerMode, msgSender, txOrigin) = vm.readCallers();\nassertEq(callerMode, CallerMode.None);\nassertEq(msgSender, defaultSenderAddress);\nassertEq(txOrigin, defaultOriginAddress);\n \n// Example 2\nvm.prank(senderPrankAddress);\n(callerMode, msgSender, txOrigin) = vm.readCallers();\nassertEq(callerMode, CallerMode.Prank);\nassertEq(msgSender, senderPrankAddress);\nassertEq(txOrigin, defaultOriginAddress);\n \n// Example 3\nvm.prank(senderPrankAddress, originPrankAddress);\n(callerMode, msgSender, txOrigin) = vm.readCallers();\nassertEq(callerMode, CallerMode.Prank);\nassertEq(msgSender, senderPrankAddress);\nassertEq(txOrigin, originPrankAddress);\n \n// Example 4\nvm.broadcast(broadcastAddress);\n(callerMode, msgSender, txOrigin) = vm.readCallers();\nassertEq(callerMode, CallerMode.Broadcast);\nassertEq(msgSender, broadcastAddress);\nassertEq(txOrigin, broadcastAddress);\n","title":"Examples","titles":[null,"readCallers"]},"984":{"href":"/reference/cheatcodes/read-callers#see-also","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/prank.mdx\">prank</a></li>\n<li><a href=\"/reference/cheatcodes/start-prank.mdx\">startPrank</a></li>\n<li><a href=\"/reference/cheatcodes/broadcast.mdx\">broadcast</a></li>\n<li><a href=\"/reference/cheatcodes/start-broadcast.mdx\">startBroadcast</a></li>\n</ul>","isPage":false,"text":"\n\nprank\nstartPrank\nbroadcast\nstartBroadcast\n","title":"SEE ALSO","titles":[null,"readCallers"]},"985":{"href":"/reference/cheatcodes/record-logs#recordlogs","html":"\n","isPage":true,"text":"\n","title":"recordLogs","titles":[null]},"986":{"href":"/reference/cheatcodes/record-logs#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> recordLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction recordLogs() external;\n","title":"Signature","titles":[null,"recordLogs"]},"987":{"href":"/reference/cheatcodes/record-logs#description","html":"\n<p>Tells the VM to start recording all the emitted events. To access them, use <a href=\"/reference/cheatcodes/get-recorded-logs.mdx\"><code>getRecordedLogs</code></a>.</p>\n","isPage":false,"text":"\nTells the VM to start recording all the emitted events. To access them, use getRecordedLogs.\n","title":"Description","titles":[null,"recordLogs"]},"988":{"href":"/reference/cheatcodes/record-logs#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// event LogCompleted(</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">///   uint256 indexed topic1,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">///   bytes data</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// );</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">recordLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> LogCompleted</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;operation completed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Vm.Log[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> entries </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getRecordedLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(entries.length, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(entries[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].topics[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;LogCompleted(uint256,bytes)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(entries[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].topics[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">decode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(entries[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].data, (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;operation completed&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>","isPage":false,"text":"\n/// event LogCompleted(\n///   uint256 indexed topic1,\n///   bytes data\n/// );\n \nvm.recordLogs();\n \nemit LogCompleted(10, &quot;operation completed&quot;);\n \nVm.Log[] memory entries = vm.getRecordedLogs();\n \nassertEq(entries.length, 1);\nassertEq(entries[0].topics[0], keccak256(&quot;LogCompleted(uint256,bytes)&quot;));\nassertEq(entries[0].topics[1], bytes32(uint256(10)));\nassertEq(abi.decode(entries[0].data, (string)), &quot;operation completed&quot;);","title":"Examples","titles":[null,"recordLogs"]},"989":{"href":"/reference/cheatcodes/record#record","html":"\n","isPage":true,"text":"\n","title":"record","titles":[null]},"990":{"href":"/reference/cheatcodes/record#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> record</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction record() external;\n","title":"Signature","titles":[null,"record"]},"991":{"href":"/reference/cheatcodes/record#description","html":"\n<p>Tell the VM to start recording all storage reads and writes. To access the reads and writes, use <a href=\"/reference/cheatcodes/accesses.mdx\"><code>accesses</code></a>.</p>\n<blockquote>\n<p>ℹ️ <strong>Note</strong></p>\n<p>Every write also counts as an additional read.</p>\n</blockquote>\n","isPage":false,"text":"\nTell the VM to start recording all storage reads and writes. To access the reads and writes, use accesses.\n\nℹ️ Note\nEvery write also counts as an additional read.\n\n","title":"Description","titles":[null,"record"]},"992":{"href":"/reference/cheatcodes/record#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// contract NumsContract {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">///     uint256 public num1 = 100; // slot 0</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">///     uint256 public num2 = 200; // slot 1</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">record</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">numsContract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">num2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> reads, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> writes) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">accesses</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(numsContract)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(reads[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1</span></span></code></pre>\n","isPage":false,"text":"\n/// contract NumsContract {\n///     uint256 public num1 = 100; // slot 0\n///     uint256 public num2 = 200; // slot 1\n/// }\n \nvm.record();\nnumsContract.num2();\n(bytes32[] memory reads, bytes32[] memory writes) = vm.accesses(\n  address(numsContract)\n);\nemit log_uint(uint256(reads[0])); // 1\n","title":"Examples","titles":[null,"record"]},"993":{"href":"/reference/cheatcodes/record#see-also","html":"\n<p>Forge Standard Library</p>\n<p><a href=\"/reference/forge-std/startHoax.mdx\">Std Storage</a></p>","isPage":false,"text":"\nForge Standard Library\nStd Storage","title":"SEE ALSO","titles":[null,"record"]},"994":{"href":"/reference/cheatcodes/remember-key#rememberkey","html":"\n","isPage":true,"text":"\n","title":"rememberKey","titles":[null]},"995":{"href":"/reference/cheatcodes/remember-key#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> rememberKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> privateKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction rememberKey(uint256 privateKey) external returns (address);\n","title":"Signature","titles":[null,"rememberKey"]},"996":{"href":"/reference/cheatcodes/remember-key#description","html":"\n<p>Stores a private key in forge&#x27;s local wallet and returns the corresponding address which can later be used for <a href=\"/reference/cheatcodes/broadcast.mdx\">broadcasting</a>.</p>\n","isPage":false,"text":"\nStores a private key in forge&#x27;s local wallet and returns the corresponding address which can later be used for broadcasting.\n","title":"Description","titles":[null,"rememberKey"]},"997":{"href":"/reference/cheatcodes/remember-key#examples","html":"\n<p>Derive the private key from the test mnemonic at path <code>m/44&#x27;/60&#x27;/0&#x27;/0/0</code>, remember it in forge&#x27;s wallet and use it to start broadcasting transactions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mnemonic </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;test test test test test test test test test test test junk&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> privateKey </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deriveKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(mnemonic, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> deployer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">rememberKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(privateKey);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(deployer);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n<p>Load a private key from the <code>PRIVATE_KEY</code> environment variable and use it to start broadcasting transactions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> deployer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">rememberKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">envUint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;PRIVATE_KEY&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(deployer);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n","isPage":false,"text":"\nDerive the private key from the test mnemonic at path m/44&#x27;/60&#x27;/0&#x27;/0/0, remember it in forge&#x27;s wallet and use it to start broadcasting transactions:\nstring memory mnemonic = &quot;test test test test test test test test test test test junk&quot;;\nuint256 privateKey = vm.deriveKey(mnemonic, 0);\naddress deployer = vm.rememberKey(privateKey);\n \nvm.startBroadcast(deployer);\n...\nvm.stopBroadcast();\nLoad a private key from the PRIVATE_KEY environment variable and use it to start broadcasting transactions:\naddress deployer = vm.rememberKey(vm.envUint(&quot;PRIVATE_KEY&quot;));\n \nvm.startBroadcast(deployer);\n...\nvm.stopBroadcast();\n","title":"Examples","titles":[null,"rememberKey"]},"998":{"href":"/reference/cheatcodes/remember-key#see-also","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/derive-key.mdx\">deriveKey</a></li>\n</ul>\n<p>Forge Standard Library:</p>\n<ul>\n<li><a href=\"/reference/forge-std/derive-remember-key.mdx\">deriveRememberKey</a></li>\n</ul>","isPage":false,"text":"\n\nderiveKey\n\nForge Standard Library:\n\nderiveRememberKey\n","title":"SEE ALSO","titles":[null,"rememberKey"]},"999":{"href":"/reference/cheatcodes/reset-gas-metering#resetgasmetering","html":"\n","isPage":true,"text":"\n","title":"resetGasMetering","titles":[null]},"1000":{"href":"/reference/cheatcodes/reset-gas-metering#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> resetGasMetering</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction resetGasMetering() external;\n","title":"Signature","titles":[null,"resetGasMetering"]},"1001":{"href":"/reference/cheatcodes/reset-gas-metering#description","html":"\n<p>Resets gas metering to the gas limit of current execution frame (i.e. <code>gasleft()</code> will be restored to initial value).</p>","isPage":false,"text":"\nResets gas metering to the gas limit of current execution frame (i.e. gasleft() will be restored to initial value).","title":"Description","titles":[null,"resetGasMetering"]},"1002":{"href":"/reference/cheatcodes/resume-gas-metering#resumegasmetering","html":"\n","isPage":true,"text":"\n","title":"resumeGasMetering","titles":[null]},"1003":{"href":"/reference/cheatcodes/resume-gas-metering#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> resumeGasMetering</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction resumeGasMetering() external;\n","title":"Signature","titles":[null,"resumeGasMetering"]},"1004":{"href":"/reference/cheatcodes/resume-gas-metering#description","html":"\n<p>Resumes gas metering (i.e. <code>gasleft()</code> will decrease as operations are executed). Gas usage will resume at the same amount at which it was paused.</p>","isPage":false,"text":"\nResumes gas metering (i.e. gasleft() will decrease as operations are executed). Gas usage will resume at the same amount at which it was paused.","title":"Description","titles":[null,"resumeGasMetering"]},"1005":{"href":"/reference/cheatcodes/revoke-persistent#revokepersistent","html":"\n","isPage":true,"text":"\n","title":"revokePersistent","titles":[null]},"1006":{"href":"/reference/cheatcodes/revoke-persistent#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> revokePersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> revokePersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">calldata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction revokePersistent(address) external;\nfunction revokePersistent(address[] calldata) external;\n","title":"Signature","titles":[null,"revokePersistent"]},"1007":{"href":"/reference/cheatcodes/revoke-persistent#description","html":"\n<p>The counterpart of <a href=\"/reference/cheatcodes/make-persistent.mdx\"><code>makePersistent</code></a>, that makes the given contract not persistent across fork swaps</p>\n","isPage":false,"text":"\nThe counterpart of makePersistent, that makes the given contract not persistent across fork swaps\n","title":"Description","titles":[null,"revokePersistent"]},"1008":{"href":"/reference/cheatcodes/revoke-persistent#examples","html":"\n<p>Revoke a persistent status of a contract</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SimpleStorageContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _value) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        value </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _value;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testRevokePersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // select a specific fork</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">selectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(mainnetFork);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // create a new contract that&#x27;s stored in the `mainnetFork` storage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    SimpleStorageContract simple </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SimpleStorageContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // `simple` is not marked as persistent</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isPersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(simple)));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // make it persistent</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">makePersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(simple));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // ensure it is persistent</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isPersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(simple)));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // revoke it</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">revokePersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(simple));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // contract no longer persistent</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isPersistent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(simple)));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nRevoke a persistent status of a contract\ncontract SimpleStorageContract {\n    string public value;\n \n    function set(uint256 _value) public {\n        value = _value;\n    }\n}\n \nfunction testRevokePersistent() public {\n    // select a specific fork\n    cheats.selectFork(mainnetFork);\n \n    // create a new contract that&#x27;s stored in the `mainnetFork` storage\n    SimpleStorageContract simple = new SimpleStorageContract();\n \n    // `simple` is not marked as persistent\n    assert(!cheats.isPersistent(address(simple)));\n \n    // make it persistent\n    cheats.makePersistent(address(simple));\n \n    // ensure it is persistent\n    assert(cheats.isPersistent(address(simple)));\n \n    // revoke it\n    cheats.revokePersistent(address(simple));\n \n    // contract no longer persistent\n    assert(!cheats.isPersistent(address(simple)));\n}\n","title":"Examples","titles":[null,"revokePersistent"]},"1009":{"href":"/reference/cheatcodes/revoke-persistent#see-also","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/is-persistent.mdx\">isPersistent</a></li>\n<li><a href=\"/reference/cheatcodes/revoke-persistent.mdx\">revokePersistent</a></li>\n<li><a href=\"/reference/cheatcodes/create-fork.mdx\">createFork</a></li>\n<li><a href=\"/reference/cheatcodes/select-fork.mdx\">selectFork</a></li>\n</ul>","isPage":false,"text":"\n\nisPersistent\nrevokePersistent\ncreateFork\nselectFork\n","title":"SEE ALSO","titles":[null,"revokePersistent"]},"1010":{"href":"/reference/cheatcodes/roll-fork#rollfork","html":"\n","isPage":true,"text":"\n","title":"rollFork","titles":[null]},"1011":{"href":"/reference/cheatcodes/roll-fork#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// roll the _active_ fork to the given block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> rollFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> blockNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// roll the _active_ fork to the block in which the transaction was mined it and replays all previously executed transactions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> rollFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Same as `rollFork(uint256 blockNumber)` but uses the fork corresponding to the `forkId`</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> rollFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> forkId</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> blockNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Same as `rollFork(bytes32 transaction)` but uses the fork corresponding to the `forkId`</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> rollFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> forkId</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\n// roll the _active_ fork to the given block\nfunction rollFork(uint256 blockNumber) external;\n// roll the _active_ fork to the block in which the transaction was mined it and replays all previously executed transactions\nfunction rollFork(bytes32 transaction) external;\n// Same as `rollFork(uint256 blockNumber)` but uses the fork corresponding to the `forkId`\nfunction rollFork(uint256 forkId, uint256 blockNumber) external;\n// Same as `rollFork(bytes32 transaction)` but uses the fork corresponding to the `forkId`\nfunction rollFork(uint256 forkId, bytes32 transaction) external;\n","title":"Signature","titles":[null,"rollFork"]},"1012":{"href":"/reference/cheatcodes/roll-fork#description","html":"\n<p>Sets <code>block.number</code>. If a fork identifier is passed as an argument, it will update that fork, otherwise it will update the currently active fork.</p>\n<p>If a transaction hash is provided, it will roll the fork to the block the transaction was mined in and replays all previously executed transactions.</p>\n","isPage":false,"text":"\nSets block.number. If a fork identifier is passed as an argument, it will update that fork, otherwise it will update the currently active fork.\nIf a transaction hash is provided, it will roll the fork to the block the transaction was mined in and replays all previously executed transactions.\n","title":"Description","titles":[null,"rollFork"]},"1013":{"href":"/reference/cheatcodes/roll-fork#examples","html":"\n<p>Set <code>block.number</code> for the currently active fork:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> forkId </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(MAINNET_RPC_URL);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">selectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(forkId);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.number, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">15_171_037</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// as of time of writing, 2022-07-19 04:55:27 UTC</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">rollFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">15_171_057</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.number, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">15_171_057</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>Set <code>block.number</code> for the fork identified by the passed <code>forkId</code> argument:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> optimismForkId </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(OPTIMISM_RPC_URL);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">rollFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(optimismForkId, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1_337_000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">selectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(optimismForkId);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.number, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1_337_000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nSet block.number for the currently active fork:\nuint256 forkId = vm.createFork(MAINNET_RPC_URL);\nvm.selectFork(forkId);\n \nassertEq(block.number, 15_171_037); // as of time of writing, 2022-07-19 04:55:27 UTC\n \nvm.rollFork(15_171_057);\n \nassertEq(block.number, 15_171_057);\nSet block.number for the fork identified by the passed forkId argument:\nuint256 optimismForkId = vm.createFork(OPTIMISM_RPC_URL);\n \nvm.rollFork(optimismForkId, 1_337_000);\n \nvm.selectFork(optimismForkId);\n \nassertEq(block.number, 1_337_000);\n","title":"Examples","titles":[null,"rollFork"]},"1014":{"href":"/reference/cheatcodes/roll-fork#see-also","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/roll.mdx\">roll</a></li>\n<li><a href=\"/reference/cheatcodes/create-fork.mdx\">createFork</a></li>\n<li><a href=\"/reference/cheatcodes/select-fork.mdx\">selectFork</a></li>\n<li><a href=\"/reference/cheatcodes/active-fork.mdx\">activeFork</a></li>\n</ul>","isPage":false,"text":"\n\nroll\ncreateFork\nselectFork\nactiveFork\n","title":"SEE ALSO","titles":[null,"rollFork"]},"1015":{"href":"/reference/cheatcodes/roll#roll","html":"\n","isPage":true,"text":"\n","title":"roll","titles":[null]},"1016":{"href":"/reference/cheatcodes/roll#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> roll</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction roll(uint256) external;\n","title":"Signature","titles":[null,"roll"]},"1017":{"href":"/reference/cheatcodes/roll#description","html":"\n<p>Sets <code>block.number</code>.</p>\n","isPage":false,"text":"\nSets block.number.\n","title":"Description","titles":[null,"roll"]},"1018":{"href":"/reference/cheatcodes/roll#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">roll</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.number); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 100</span></span></code></pre>\n","isPage":false,"text":"\nvm.roll(100);\nemit log_uint(block.number); // 100\n","title":"Examples","titles":[null,"roll"]},"1019":{"href":"/reference/cheatcodes/roll#see-also","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/roll-fork.mdx\">rollFork</a></li>\n</ul>","isPage":false,"text":"\n\nrollFork\n","title":"SEE ALSO","titles":[null,"roll"]},"1020":{"href":"/reference/cheatcodes/rpc#rpc-related-cheatcodes","html":"\n","isPage":true,"text":"\n","title":"RPC related cheatcodes","titles":[null]},"1021":{"href":"/reference/cheatcodes/rpc#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns the URL for a configured alias</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> rpcUrl</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> alias</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns all configured (alias, URL) pairs</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> rpcUrls</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">][] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Performs an Ethereum JSON-RPC request to the current fork URL.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> rpc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> method</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> params</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\n// Returns the URL for a configured alias\nfunction rpcUrl(string calldata alias) external returns (string memory);\n// Returns all configured (alias, URL) pairs\nfunction rpcUrls() external returns(string[2][] memory);\n/// Performs an Ethereum JSON-RPC request to the current fork URL.\nfunction rpc(string calldata method, string calldata params) external returns (bytes memory data);\n","title":"Signature","titles":[null,"RPC related cheatcodes"]},"1022":{"href":"/reference/cheatcodes/rpc#description","html":"\n<p>Provides cheatcodes to access all RPC endpoints configured in the <code>rpc_endpoints</code> object of the <code>foundry.toml</code>, and the ability to make <code>rpc</code> calls using the configured fork URL.</p>\n","isPage":false,"text":"\nProvides cheatcodes to access all RPC endpoints configured in the rpc_endpoints object of the foundry.toml, and the ability to make rpc calls using the configured fork URL.\n","title":"Description","titles":[null,"RPC related cheatcodes"]},"1023":{"href":"/reference/cheatcodes/rpc#examples","html":"\n<p>The following <code>rpc_endpoints</code> in <code>foundry.toml</code> registers two RPC aliases:</p>\n<ul>\n<li><code>optimism</code> references the URL directly</li>\n<li><code>mainnet</code> references the <code>RPC_MAINNET</code> environment value that is expected to contain the actual URL</li>\n</ul>\n<p><em>Env variables need to be wrapped in <code>${}</code></em></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># --snip--</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">rpc_endpoints</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">optimism = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://optimism.alchemyapi.io/v2/...&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;${RPC_MAINNET}&quot;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> url </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">rpcUrl</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;optimism&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(url, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://optimism.alchemyapi.io/v2/...&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>If a ENV var is missing, <code>rpcUrl()</code> will revert:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Failed to resolve env var `${RPC_MAINNET}` in `RPC_MAINNET`: environment variable not found&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> url </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">rpcUrl</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;mainnet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>Retrieve all available alias -&gt; URL pairs</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">][] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> allUrls </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">rpcUrls</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(allUrls.length, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> val </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> allUrls[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">];</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(val[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;optimism&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> env </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> allUrls[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">];</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(env[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;mainnet&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>Make an RPC call to <code>eth_getBalance</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// balance at block &lt;https://etherscan.io/block/18332681&gt;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">rpc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;eth_getBalance&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;[\\&quot;0x8D97689C9818892B700e27F316cc3E41e17fBeb9\\&quot;, \\&quot;0x117BC09\\&quot;]&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(hex</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;10b7c11bcb51e6&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result);</span></span></code></pre>\n","isPage":false,"text":"\nThe following rpc_endpoints in foundry.toml registers two RPC aliases:\n\noptimism references the URL directly\nmainnet references the RPC_MAINNET environment value that is expected to contain the actual URL\n\nEnv variables need to be wrapped in ${}\n# --snip--\n[rpc_endpoints]\noptimism = &quot;https://optimism.alchemyapi.io/v2/...&quot;\nmainnet = &quot;${RPC_MAINNET}&quot;\nstring memory url = vm.rpcUrl(&quot;optimism&quot;);\nassertEq(url, &quot;https://optimism.alchemyapi.io/v2/...&quot;);\nIf a ENV var is missing, rpcUrl() will revert:\nvm.expectRevert(&quot;Failed to resolve env var `${RPC_MAINNET}` in `RPC_MAINNET`: environment variable not found&quot;);\nstring memory url = vm.rpcUrl(&quot;mainnet&quot;);\nRetrieve all available alias -&gt; URL pairs\nstring[2][] memory allUrls = vm.rpcUrls();\nassertEq(allUrls.length, 2);\n \nstring[2] memory val = allUrls[0];\nassertEq(val[0], &quot;optimism&quot;);\n \nstring[2] memory env = allUrls[1];\nassertEq(env[0], &quot;mainnet&quot;);\nMake an RPC call to eth_getBalance\n// balance at block &lt;https://etherscan.io/block/18332681&gt;\nbytes memory result = vm.rpc(&quot;eth_getBalance&quot;, &quot;[\\&quot;0x8D97689C9818892B700e27F316cc3E41e17fBeb9\\&quot;, \\&quot;0x117BC09\\&quot;]&quot;)\nassertEq(hex&quot;10b7c11bcb51e6&quot;, result);\n","title":"Examples","titles":[null,"RPC related cheatcodes"]},"1024":{"href":"/reference/cheatcodes/rpc#see-also","html":"\n<p>Forge Config</p>\n<p><a href=\"/config/reference/testing#rpc_endpoints\">Config Reference</a></p>","isPage":false,"text":"\nForge Config\nConfig Reference","title":"SEE ALSO","titles":[null,"RPC related cheatcodes"]},"1025":{"href":"/reference/cheatcodes/select-fork#selectfork","html":"\n","isPage":true,"text":"\n","title":"selectFork","titles":[null]},"1026":{"href":"/reference/cheatcodes/select-fork#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> selectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> forkId</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction selectFork(uint256 forkId) external;\n","title":"Signature","titles":[null,"selectFork"]},"1027":{"href":"/reference/cheatcodes/select-fork#description","html":"\n<p>Takes a fork identifier created by <code>createFork</code> and sets the corresponding forked state as active.</p>\n","isPage":false,"text":"\nTakes a fork identifier created by createFork and sets the corresponding forked state as active.\n","title":"Description","titles":[null,"selectFork"]},"1028":{"href":"/reference/cheatcodes/select-fork#examples","html":"\n<p>Select a previously created fork:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> forkId </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(MAINNET_RPC_URL);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">selectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(forkId);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">activeFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), forkId);</span></span></code></pre>\n","isPage":false,"text":"\nSelect a previously created fork:\nuint256 forkId = vm.createFork(MAINNET_RPC_URL);\n \nvm.selectFork(forkId);\n \nassertEq(vm.activeFork(), forkId);\n","title":"Examples","titles":[null,"selectFork"]},"1029":{"href":"/reference/cheatcodes/select-fork#see-also","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/create-fork.mdx\">createFork</a></li>\n<li><a href=\"/reference/cheatcodes/active-fork.mdx\">activeFork</a></li>\n</ul>","isPage":false,"text":"\n\ncreateFork\nactiveFork\n","title":"SEE ALSO","titles":[null,"selectFork"]},"1030":{"href":"/reference/cheatcodes/serialize-json#serializejson","html":"\n","isPage":true,"text":"\n","title":"serializeJson","titles":[null]},"1031":{"href":"/reference/cheatcodes/serialize-json#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> serializeJson</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> objectKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    external</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> serializeBool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> objectKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> valueKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    external</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> serializeUint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> objectKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> valueKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    external</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> serializeInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> objectKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> valueKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    external</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> serializeAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> objectKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> valueKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    external</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> serializeBytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> objectKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> valueKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    external</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> serializeString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> objectKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> valueKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    external</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> serializeBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> objectKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> valueKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    external</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> serializeBool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> objectKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> valueKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> values</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    external</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> serializeUint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> objectKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> valueKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> values</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    external</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> serializeInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> objectKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> valueKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> values</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    external</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> serializeAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> objectKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> valueKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> values</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    external</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> serializeBytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> objectKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> valueKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> values</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    external</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> serializeString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> objectKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> valueKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> values</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    external</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> serializeBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> objectKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> valueKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> values</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    external</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction serializeJson(string calldata objectKey, string calldata value)\n    external\n    returns (string memory json);\n \nfunction serializeBool(string calldata objectKey, string calldata valueKey, bool value)\n    external\n    returns (string memory json);\n \nfunction serializeUint(string calldata objectKey, string calldata valueKey, uint256 value)\n    external\n    returns (string memory json);\n \nfunction serializeInt(string calldata objectKey, string calldata valueKey, int256 value)\n    external\n    returns (string memory json);\n \nfunction serializeAddress(string calldata objectKey, string calldata valueKey, address value)\n    external\n    returns (string memory json);\n \nfunction serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32 value)\n    external\n    returns (string memory json);\n \nfunction serializeString(string calldata objectKey, string calldata valueKey, string calldata value)\n    external\n    returns (string memory json);\n \nfunction serializeBytes(string calldata objectKey, string calldata valueKey, bytes calldata value)\n    external\n    returns (string memory json);\n \nfunction serializeBool(string calldata objectKey, string calldata valueKey, bool[] calldata values)\n    external\n    returns (string memory json);\n \nfunction serializeUint(string calldata objectKey, string calldata valueKey, uint256[] calldata values)\n    external\n    returns (string memory json);\n \nfunction serializeInt(string calldata objectKey, string calldata valueKey, int256[] calldata values)\n    external\n    returns (string memory json);\n \nfunction serializeAddress(string calldata objectKey, string calldata valueKey, address[] calldata values)\n    external\n    returns (string memory json);\n \nfunction serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32[] calldata values)\n    external\n    returns (string memory json);\n \nfunction serializeString(string calldata objectKey, string calldata valueKey, string[] calldata values)\n    external\n    returns (string memory json);\n \nfunction serializeBytes(string calldata objectKey, string calldata valueKey, bytes[] calldata values)\n    external\n    returns (string memory json);\n","title":"Signature","titles":[null,"serializeJson"]},"1032":{"href":"/reference/cheatcodes/serialize-json#description","html":"\n<p>Serializes values as a stringified JSON object.</p>\n","isPage":false,"text":"\nSerializes values as a stringified JSON object.\n","title":"Description","titles":[null,"serializeJson"]},"1033":{"href":"/reference/cheatcodes/serialize-json#how-it-works","html":"\n<p>The idea is that the user serializes the values of the JSON file and finally writes that object to a file. The user needs to pass:</p>\n<ul>\n<li>A key for the <em>object</em> to which the value should be serialized to. This enables the user to serialize multiple objects in parallel</li>\n<li>A key for the <em>value</em> which will be its key in the JSON file</li>\n<li>The value to be serialized</li>\n</ul>\n<p>An exception to this is the <code>serializeJson</code> function, which only receives an <code>objectKey</code> and a json string <code>value</code>. This allows the user to serialize an existing json object and directly assign it to the provided <code>objectKey</code>. If the <code>objectKey</code> is already in use, the whole serialized json is overwritten.</p>\n<p>The keys do not need to be of some specific form. They are of type <code>string</code> to enable for intuitive human interpretation. Semantically, they are not important other than to be used as keys.</p>\n<p>The cheatcodes return the JSON object that is being serialized <strong>up to that point</strong>. That way the user can serialize inner JSON objects and then serialize them in bigger JSON objects, enabling the user to create arbitrary JSON objects.</p>\n<p>Finally, the user writes the JSON object to a JSON file by using <a href=\"/reference/cheatcodes/write-json.mdx\">writeJson</a>.\nAlternatively, the user can write the JSON object to TOML file by using <a href=\"/reference/cheatcodes/write-toml.mdx\">writeToml</a>.</p>\n<p><strong>Remember:</strong> The file path needs to be in the allowed paths. Read more in <a href=\"/reference/cheatcodes/fs.mdx\">File cheatcodes</a>.</p>\n","isPage":false,"text":"\nThe idea is that the user serializes the values of the JSON file and finally writes that object to a file. The user needs to pass:\n\nA key for the object to which the value should be serialized to. This enables the user to serialize multiple objects in parallel\nA key for the value which will be its key in the JSON file\nThe value to be serialized\n\nAn exception to this is the serializeJson function, which only receives an objectKey and a json string value. This allows the user to serialize an existing json object and directly assign it to the provided objectKey. If the objectKey is already in use, the whole serialized json is overwritten.\nThe keys do not need to be of some specific form. They are of type string to enable for intuitive human interpretation. Semantically, they are not important other than to be used as keys.\nThe cheatcodes return the JSON object that is being serialized up to that point. That way the user can serialize inner JSON objects and then serialize them in bigger JSON objects, enabling the user to create arbitrary JSON objects.\nFinally, the user writes the JSON object to a JSON file by using writeJson.\nAlternatively, the user can write the JSON object to TOML file by using writeToml.\nRemember: The file path needs to be in the allowed paths. Read more in File cheatcodes.\n","title":"How it works","titles":[null,"serializeJson"]},"1034":{"href":"/reference/cheatcodes/serialize-json#example","html":"\n<p>Let&#x27;s assume we want to write the following JSON to a file:</p>\n<p><code>{ &quot;boolean&quot;: true, &quot;number&quot;: 342, &quot;object&quot;: { &quot;title&quot;: &quot;finally json serialization&quot; } }</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> obj1 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;some key&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">serializeBool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(obj1, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;boolean&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">serializeUint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(obj1, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;number&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">342</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> obj2 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;some other key&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> output </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">serializeString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(obj2, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;title&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;finally json serialization&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// IMPORTANT: This works because `serializeString` first tries to interpret `output` as</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   a stringified JSON object. If the parsing fails, then it treats it as a normal</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   string instead.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   For instance, an `output` equal to &#x27;{ &quot;ok&quot;: &quot;asd&quot; }&#x27; will produce an object, but</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   an output equal to &#x27;&quot;ok&quot;: &quot;asd&quot; }&#x27; will just produce a normal string.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> finalJson </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">serializeString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(obj1, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;object&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, output);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">writeJson</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(finalJson, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;./output/example.json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nLet&#x27;s assume we want to write the following JSON to a file:\n{ &quot;boolean&quot;: true, &quot;number&quot;: 342, &quot;object&quot;: { &quot;title&quot;: &quot;finally json serialization&quot; } }\nstring memory obj1 = &quot;some key&quot;;\nvm.serializeBool(obj1, &quot;boolean&quot;, true);\nvm.serializeUint(obj1, &quot;number&quot;, uint256(342));\n \nstring memory obj2 = &quot;some other key&quot;;\nstring memory output = vm.serializeString(obj2, &quot;title&quot;, &quot;finally json serialization&quot;);\n \n// IMPORTANT: This works because `serializeString` first tries to interpret `output` as\n//   a stringified JSON object. If the parsing fails, then it treats it as a normal\n//   string instead.\n//   For instance, an `output` equal to &#x27;{ &quot;ok&quot;: &quot;asd&quot; }&#x27; will produce an object, but\n//   an output equal to &#x27;&quot;ok&quot;: &quot;asd&quot; }&#x27; will just produce a normal string.\nstring memory finalJson = vm.serializeString(obj1, &quot;object&quot;, output);\n \nvm.writeJson(finalJson, &quot;./output/example.json&quot;);\n","title":"Example","titles":[null,"serializeJson"]},"1035":{"href":"/reference/cheatcodes/serialize-json#see-also","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/write-json.mdx\">writeJson</a></li>\n</ul>","isPage":false,"text":"\n\nwriteJson\n","title":"SEE ALSO","titles":[null,"serializeJson"]},"1036":{"href":"/reference/cheatcodes/set-arbitrary-storage#setarbitrarystorage","html":"\n","isPage":true,"text":"\n","title":"setArbitraryStorage","titles":[null]},"1037":{"href":"/reference/cheatcodes/set-arbitrary-storage#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setArbitraryStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> target</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction setArbitraryStorage(address target) external;\n","title":"Signature","titles":[null,"setArbitraryStorage"]},"1038":{"href":"/reference/cheatcodes/set-arbitrary-storage#description","html":"\n<p>Utility cheatcode to make the storage of the given address fully symbolic.\nAny subsequent <code>SLOAD</code> to target storage reads an arbitrary value which is memorized and returned if the same slot is loaded again.\nIf the storage slot is explicitly written (before or after first load), then the written value is returned.</p>\n","isPage":false,"text":"\nUtility cheatcode to make the storage of the given address fully symbolic.\nAny subsequent SLOAD to target storage reads an arbitrary value which is memorized and returned if the same slot is loaded again.\nIf the storage slot is explicitly written (before or after first load), then the written value is returned.\n","title":"Description","titles":[null,"setArbitraryStorage"]},"1039":{"href":"/reference/cheatcodes/set-arbitrary-storage#examples","html":"\n<p>For a contract with following storage layout:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Counter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> owners;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getOwner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> pos</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> view</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> owners[pos];</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setOwner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> pos</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> owner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        owners[pos] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> owner;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>using <code>setArbitraryStorage</code> cheatcode ensures that arbitrary values are returned:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ArbitraryStorageTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testArbitraryStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Counter counter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Counter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setArbitraryStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(counter));</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Next call would fail with array out of bounds without arbitrary storage</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> owner </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getOwner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">55</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Subsequent calls to same slot returns same value</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getOwner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">55</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), owner);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // The new value is returned if explicitly written</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setOwner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">55</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">111</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(counter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getOwner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">55</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">111</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nFor a contract with following storage layout:\ncontract Counter {\n    address[] public owners;\n \n    function getOwner(uint256 pos) public view returns (address) {\n        return owners[pos];\n    }\n \n    function setOwner(uint256 pos, address owner) public {\n        owners[pos] = owner;\n    }\n}\nusing setArbitraryStorage cheatcode ensures that arbitrary values are returned:\ncontract ArbitraryStorageTest is Test {\n    function testArbitraryStorage() public {\n        Counter counter = new Counter();\n        vm.setArbitraryStorage(address(counter));\n        // Next call would fail with array out of bounds without arbitrary storage\n        address owner = counter.getOwner(55);\n        // Subsequent calls to same slot returns same value\n        assertEq(counter.getOwner(55), owner);\n        // The new value is returned if explicitly written\n        counter.setOwner(55, address(111));\n        assertEq(counter.getOwner(55), address(111));\n    }\n}","title":"Examples","titles":[null,"setArbitraryStorage"]},"1040":{"href":"/reference/cheatcodes/set-env#setenv","html":"\n","isPage":true,"text":"\n","title":"setEnv","titles":[null]},"1041":{"href":"/reference/cheatcodes/set-env#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setEnv</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction setEnv(string calldata key, string calldata value) external;\n","title":"Signature","titles":[null,"setEnv"]},"1042":{"href":"/reference/cheatcodes/set-env#description","html":"\n<p>Set an environment variable <code>key=value</code>.</p>\n<blockquote>\n<p>ℹ️ <strong>Note</strong></p>\n<p>Environment variables set by a process are only accessible by itself and its child\nprocesses. Thus, calling <code>setEnv</code> will only modify environment variables of the currently running\n<code>forge</code> process, and won&#x27;t affect the shell (<code>forge</code>&#x27;s parent process), i.e., the they won&#x27;t persist\nafter the <code>forge</code> process exit.</p>\n</blockquote>\n","isPage":false,"text":"\nSet an environment variable key=value.\n\nℹ️ Note\nEnvironment variables set by a process are only accessible by itself and its child\nprocesses. Thus, calling setEnv will only modify environment variables of the currently running\nforge process, and won&#x27;t affect the shell (forge&#x27;s parent process), i.e., the they won&#x27;t persist\nafter the forge process exit.\n\n","title":"Description","titles":[null,"setEnv"]},"1043":{"href":"/reference/cheatcodes/set-env#tips","html":"\n<ul>\n<li>The environment variable key can&#x27;t be empty.</li>\n<li>The environment variable key can&#x27;t contain the equal sign <code>=</code> or the NUL character <code>\\0</code>.</li>\n<li>The environment variable value can&#x27;t contain the NUL character <code>\\0</code>.</li>\n</ul>\n","isPage":false,"text":"\n\nThe environment variable key can&#x27;t be empty.\nThe environment variable key can&#x27;t contain the equal sign = or the NUL character \\0.\nThe environment variable value can&#x27;t contain the NUL character \\0.\n\n","title":"Tips","titles":[null,"setEnv"]},"1044":{"href":"/reference/cheatcodes/set-env#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;hello&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> val </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;world&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setEnv</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key, val);</span></span></code></pre>","isPage":false,"text":"\nstring memory key = &quot;hello&quot;;\nstring memory val = &quot;world&quot;;\ncheats.setEnv(key, val);","title":"Examples","titles":[null,"setEnv"]},"1045":{"href":"/reference/cheatcodes/set-nonce#setnonce","html":"\n","isPage":true,"text":"\n","title":"setNonce","titles":[null]},"1046":{"href":"/reference/cheatcodes/set-nonce#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setNonce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> account</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint64</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> nonce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction setNonce(address account, uint64 nonce) external;\n","title":"Signature","titles":[null,"setNonce"]},"1047":{"href":"/reference/cheatcodes/set-nonce#description","html":"\n<p>Sets the nonce of the given account.</p>\n<p>The new nonce must be higher than the current nonce of the account.</p>\n","isPage":false,"text":"\nSets the nonce of the given account.\nThe new nonce must be higher than the current nonce of the account.\n","title":"Description","titles":[null,"setNonce"]},"1048":{"href":"/reference/cheatcodes/set-nonce#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setNonce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1234</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>","isPage":false,"text":"\nvm.setNonce(address(100), 1234);","title":"Examples","titles":[null,"setNonce"]},"1049":{"href":"/reference/cheatcodes/sign-delegation#signdelegation","html":"\n","isPage":true,"text":"\n","title":"signDelegation","titles":[null]},"1050":{"href":"/reference/cheatcodes/sign-delegation#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Holds a signed EIP-7702 authorization for an authority account to delegate to an implementation.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SignedDelegation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // The y-parity of the recovered secp256k1 signature (0 or 1).</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> v;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // First 32 bytes of the signature.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> r;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Second 32 bytes of the signature.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> s;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // The current nonce of the authority account at signing time.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Used to ensure signature can&#x27;t be replayed after account nonce changes.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> nonce;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Address of the contract implementation that will be delegated to.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Gets encoded into delegation code: 0xef0100 || implementation.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> implementation;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Sign an EIP-7702 authorization for delegation.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> signDelegation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> implementation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> privateKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    external</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">SignedDelegation</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> signedDelegation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Designate the next call as an EIP-7702 transaction.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> attachDelegation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">SignedDelegation</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> signedDelegation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Sign an EIP-7702 authorization and designate the next call as an EIP-7702 transaction.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> signAndAttachDelegation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> implementation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> privateKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    external</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">SignedDelegation</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> signedDelegation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\n/// Holds a signed EIP-7702 authorization for an authority account to delegate to an implementation.\nstruct SignedDelegation {\n    // The y-parity of the recovered secp256k1 signature (0 or 1).\n    uint8 v;\n    // First 32 bytes of the signature.\n    bytes32 r;\n    // Second 32 bytes of the signature.\n    bytes32 s;\n    // The current nonce of the authority account at signing time.\n    // Used to ensure signature can&#x27;t be replayed after account nonce changes.\n    uint64 nonce;\n    // Address of the contract implementation that will be delegated to.\n    // Gets encoded into delegation code: 0xef0100 || implementation.\n    address implementation;\n}\n/// Sign an EIP-7702 authorization for delegation.\nfunction signDelegation(address implementation, uint256 privateKey)\n    external\n    returns (SignedDelegation memory signedDelegation);\n/// Designate the next call as an EIP-7702 transaction.\nfunction attachDelegation(SignedDelegation calldata signedDelegation) external;\n/// Sign an EIP-7702 authorization and designate the next call as an EIP-7702 transaction.\nfunction signAndAttachDelegation(address implementation, uint256 privateKey)\n    external\n    returns (SignedDelegation memory signedDelegation);\n","title":"Signature","titles":[null,"signDelegation"]},"1051":{"href":"/reference/cheatcodes/sign-delegation#description","html":"\n<p>Signs an <a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-7702.md\">EIP-7702</a> authorization for delegation.</p>\n<p>To use the cheatcodes you need to set your <code>evm_version</code> to at least the <code>prague</code> hardfork in your <code>foundry.toml</code>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">evm_version = </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;prague&quot;</span></span></code></pre>\n<p>EIP-7702 sets the account code of an Externally Owned Account (EOA) through a delegation transaction, enabling EOAs to behave like smart contracts.</p>\n<p>The <code>signDelegation</code> cheatcode generates a signed authorization for an implementation contract to be delegated to, ensuring that only authorized implementations can execute transactions on behalf of the authority account. The signature includes the authority account&#x27;s nonce to prevent replay attacks.</p>\n<p>The <code>attachDelegation</code> cheatcode designates the next transaction as an EIP-7702 delegation by attaching the signed authorization.</p>\n<p>The <code>signAndAttachDelegation</code> function combines both signing and attaching into a single step, simplifying the delegation process.</p>\n","isPage":false,"text":"\nSigns an EIP-7702 authorization for delegation.\nTo use the cheatcodes you need to set your evm_version to at least the prague hardfork in your foundry.toml.\nevm_version = &quot;prague&quot;\nEIP-7702 sets the account code of an Externally Owned Account (EOA) through a delegation transaction, enabling EOAs to behave like smart contracts.\nThe signDelegation cheatcode generates a signed authorization for an implementation contract to be delegated to, ensuring that only authorized implementations can execute transactions on behalf of the authority account. The signature includes the authority account&#x27;s nonce to prevent replay attacks.\nThe attachDelegation cheatcode designates the next transaction as an EIP-7702 delegation by attaching the signed authorization.\nThe signAndAttachDelegation function combines both signing and attaching into a single step, simplifying the delegation process.\n","title":"Description","titles":[null,"signDelegation"]},"1052":{"href":"/reference/cheatcodes/sign-delegation#examples","html":"\n<p>Let&#x27;s first define a <code>SimpleDelegateContract</code> and a dummy <code>ERC20</code> to be used:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// SPDX-License-Identifier: MIT</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ^0.8.17</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SimpleDelegateContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Executed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> indexed</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> to</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> to;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> execute</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">Call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> calls</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> payable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> calls.length; i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            Call </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> call </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> calls[i];</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> success, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> call.to.call{value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> call.value}(call.data);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(success, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result));</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">            emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Executed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(call.to, call.value, call.data);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    receive</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> payable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ERC20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> minter;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    mapping</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">private</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _balances;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    constructor</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _minter) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        minter </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _minter;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> mint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> amount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> to</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        _mint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(to, amount);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> account</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> view</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _balances[account];</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> _mint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> account</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> amount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">msg.sender</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ==</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> minter, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ERC20: msg.sender is not minter&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(account </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ERC20: mint to the zero address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        unchecked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            _balances[account] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Next, to use the cheatcodes with <code>forge test</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SignDelegationTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Alice&#x27;s address and private key (EOA with no initial contract code).</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> payable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ALICE_ADDRESS </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> payable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0x70997970C51812dc3A010C7d01b50e0d17dc79C8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> constant</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ALICE_PK </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Bob&#x27;s address and private key (Bob will execute transactions on Alice&#x27;s behalf).</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> constant</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> BOB_ADDRESS </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> constant</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> BOB_PK </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // The contract that Alice will delegate execution to.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    SimpleDelegateContract </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> implementation;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // ERC-20 token contract for minting test tokens.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ERC20 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Deploy the delegation contract (Alice will delegate calls to this contract).</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        implementation </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SimpleDelegateContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Deploy an ERC-20 token contract where Alice is the minter.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        token </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ERC20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ALICE_ADDRESS);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testSignDelegationAndThenAttachDelegation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Construct a single transaction call: Mint 100 tokens to Bob.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        SimpleDelegateContract.Call[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> calls </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> SimpleDelegateContract.Call[](</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ERC20.mint, (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, BOB_ADDRESS));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        calls[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> SimpleDelegateContract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({to</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token), data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data, value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Alice signs a delegation allowing `implementation` to execute transactions on her behalf.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Vm.SignedDelegation </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signedDelegation </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signDelegation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(implementation), ALICE_PK);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Bob attaches the signed delegation from Alice and broadcasts it.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">broadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(BOB_PK);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">attachDelegation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(signedDelegation);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Verify that Alice&#x27;s account now behaves as a smart contract.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> code </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ALICE_ADDRESS).code;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(code.length </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;no code written to Alice&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // As Bob, execute the transaction via Alice&#x27;s assigned contract.</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        SimpleDelegateContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ALICE_ADDRESS).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">execute</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(calls);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Verify Bob successfully received 100 tokens.</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(BOB_ADDRESS), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testSignAndAttachDelegation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Construct a single transaction call: Mint 100 tokens to Bob.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        SimpleDelegateContract.Call[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> calls </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> SimpleDelegateContract.Call[](</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ERC20.mint, (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, BOB_ADDRESS));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        calls[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> SimpleDelegateContract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({to</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token), data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data, value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Alice signs and attaches the delegation in one step (eliminating the need for separate signing).</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signAndAttachDelegation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(implementation), ALICE_PK);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Verify that Alice&#x27;s account now behaves as a smart contract.</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> code </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ALICE_ADDRESS).code;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(code.length </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;no code written to Alice&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // As Bob, execute the transaction via Alice&#x27;s assigned contract.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">broadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(BOB_PK);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        SimpleDelegateContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ALICE_ADDRESS).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">execute</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(calls);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Verify Bob successfully received 100 tokens.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(BOB_ADDRESS), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Or alternatively, let&#x27;s use the cheatcodes in <code>forge script</code> against an <code>EIP-7702</code> compatible Anvil instance:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">anvil</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --hardfork</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> prague</span></span></code></pre>\n<p>Next, to use the cheatcodes in <code>forge script</code>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// SPDX-License-Identifier: MIT</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ^0.8.17</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SignDelegationScript</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Alice&#x27;s address and private key (EOA with no initial contract code).</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> payable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ALICE_ADDRESS </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> payable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0x70997970C51812dc3A010C7d01b50e0d17dc79C8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> constant</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ALICE_PK </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Bob&#x27;s address and private key (Bob will execute transactions on Alice&#x27;s behalf).</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> constant</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> BOB_ADDRESS </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> constant</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> BOB_PK </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Deployer&#x27;s address and private key (used to deploy contracts).</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> private</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> constant</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> DEPLOYER_ADDRESS </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0xa0Ee7A142d267C1f36714E4a8F75612F20a79720</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> private</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> constant</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> DEPLOYER_PK </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0x2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // The contract that Alice will delegate execution to.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    SimpleDelegateContract </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> implementation;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // ERC-20 token contract for minting test tokens.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ERC20 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Step 1: Deploy delegation and ERC-20 contracts using the Deployer&#x27;s key.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">broadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(DEPLOYER_PK);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        implementation </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SimpleDelegateContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        token </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ERC20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ALICE_ADDRESS);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Construct a single transaction call: Mint 100 tokens to Bob.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        SimpleDelegateContract.Call[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> calls </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> SimpleDelegateContract.Call[](</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ERC20.mint, (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, BOB_ADDRESS));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        calls[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> SimpleDelegateContract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({to</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token), data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data, value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">});</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Alice signs a delegation allowing `implementation` to execute transactions on her behalf.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        Vm.SignedDelegation </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signedDelegation </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signDelegation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(implementation), ALICE_PK);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Bob attaches the signed delegation from Alice and broadcasts it.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">broadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(BOB_PK);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">attachDelegation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(signedDelegation);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // As Bob, execute the transaction via Alice&#x27;s assigned contract.</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        SimpleDelegateContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ALICE_ADDRESS).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">execute</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(calls);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Verify balance</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(BOB_ADDRESS), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>To run the script:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">forge</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> script</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> script/SignDelegation.s.sol</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --rpc-url</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> http://localhost:8545</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --broadcast</span></span></code></pre>","isPage":false,"text":"\nLet&#x27;s first define a SimpleDelegateContract and a dummy ERC20 to be used:\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n \ncontract SimpleDelegateContract {\n    event Executed(address indexed to, uint256 value, bytes data);\n \n    struct Call {\n        bytes data;\n        address to;\n        uint256 value;\n    }\n \n    function execute(Call[] memory calls) external payable {\n        for (uint256 i = 0; i &lt; calls.length; i++) {\n            Call memory call = calls[i];\n            (bool success, bytes memory result) = call.to.call{value: call.value}(call.data);\n            require(success, string(result));\n            emit Executed(call.to, call.value, call.data);\n        }\n    }\n \n    receive() external payable {}\n}\n \ncontract ERC20 {\n    address public minter;\n    mapping(address =&gt; uint256) private _balances;\n \n    constructor(address _minter) {\n        minter = _minter;\n    }\n \n    function mint(uint256 amount, address to) public {\n        _mint(to, amount);\n    }\n \n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n \n    function _mint(address account, uint256 amount) internal {\n        require(msg.sender == minter, &quot;ERC20: msg.sender is not minter&quot;);\n        require(account != address(0), &quot;ERC20: mint to the zero address&quot;);\n        unchecked {\n            _balances[account] += amount;\n        }\n    }\n}\nNext, to use the cheatcodes with forge test:\ncontract SignDelegationTest is Test {\n    // Alice&#x27;s address and private key (EOA with no initial contract code).\n    address payable ALICE_ADDRESS = payable(0x70997970C51812dc3A010C7d01b50e0d17dc79C8);\n    uint256 constant ALICE_PK = 0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d;\n \n    // Bob&#x27;s address and private key (Bob will execute transactions on Alice&#x27;s behalf).\n    address constant BOB_ADDRESS = 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC;\n    uint256 constant BOB_PK = 0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a;\n \n    // The contract that Alice will delegate execution to.\n    SimpleDelegateContract public implementation;\n \n    // ERC-20 token contract for minting test tokens.\n    ERC20 public token;\n \n    function setUp() public {\n        // Deploy the delegation contract (Alice will delegate calls to this contract).\n        implementation = new SimpleDelegateContract();\n \n        // Deploy an ERC-20 token contract where Alice is the minter.\n        token = new ERC20(ALICE_ADDRESS);\n    }\n \n    function testSignDelegationAndThenAttachDelegation() public {\n        // Construct a single transaction call: Mint 100 tokens to Bob.\n        SimpleDelegateContract.Call[] memory calls = new SimpleDelegateContract.Call[](1);\n        bytes memory data = abi.encodeCall(ERC20.mint, (100, BOB_ADDRESS));\n        calls[0] = SimpleDelegateContract.Call({to: address(token), data: data, value: 0});\n \n        // Alice signs a delegation allowing `implementation` to execute transactions on her behalf.\n        Vm.SignedDelegation memory signedDelegation = vm.signDelegation(address(implementation), ALICE_PK);\n \n        // Bob attaches the signed delegation from Alice and broadcasts it.\n        vm.broadcast(BOB_PK);\n        vm.attachDelegation(signedDelegation);\n \n        // Verify that Alice&#x27;s account now behaves as a smart contract.\n        bytes memory code = address(ALICE_ADDRESS).code;\n        require(code.length &gt; 0, &quot;no code written to Alice&quot;);\n \n        // As Bob, execute the transaction via Alice&#x27;s assigned contract.\n        SimpleDelegateContract(ALICE_ADDRESS).execute(calls);\n \n        // Verify Bob successfully received 100 tokens.\n        assertEq(token.balanceOf(BOB_ADDRESS), 100);\n    }\n \n    function testSignAndAttachDelegation() public {\n        // Construct a single transaction call: Mint 100 tokens to Bob.\n        SimpleDelegateContract.Call[] memory calls = new SimpleDelegateContract.Call[](1);\n        bytes memory data = abi.encodeCall(ERC20.mint, (100, BOB_ADDRESS));\n        calls[0] = SimpleDelegateContract.Call({to: address(token), data: data, value: 0});\n \n        // Alice signs and attaches the delegation in one step (eliminating the need for separate signing).\n        vm.signAndAttachDelegation(address(implementation), ALICE_PK);\n \n        // Verify that Alice&#x27;s account now behaves as a smart contract.\n        bytes memory code = address(ALICE_ADDRESS).code;\n        require(code.length &gt; 0, &quot;no code written to Alice&quot;);\n \n        // As Bob, execute the transaction via Alice&#x27;s assigned contract.\n        vm.broadcast(BOB_PK);\n        SimpleDelegateContract(ALICE_ADDRESS).execute(calls);\n \n        // Verify Bob successfully received 100 tokens.\n        vm.assertEq(token.balanceOf(BOB_ADDRESS), 100);\n    }\n}\nOr alternatively, let&#x27;s use the cheatcodes in forge script against an EIP-7702 compatible Anvil instance:\nanvil --hardfork prague\nNext, to use the cheatcodes in forge script:\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n \ncontract SignDelegationScript is Script {\n    // Alice&#x27;s address and private key (EOA with no initial contract code).\n    address payable ALICE_ADDRESS = payable(0x70997970C51812dc3A010C7d01b50e0d17dc79C8);\n    uint256 constant ALICE_PK = 0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d;\n \n    // Bob&#x27;s address and private key (Bob will execute transactions on Alice&#x27;s behalf).\n    address constant BOB_ADDRESS = 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC;\n    uint256 constant BOB_PK = 0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a;\n \n    // Deployer&#x27;s address and private key (used to deploy contracts).\n    address private constant DEPLOYER_ADDRESS = 0xa0Ee7A142d267C1f36714E4a8F75612F20a79720;\n    uint256 private constant DEPLOYER_PK = 0x2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6;\n \n    // The contract that Alice will delegate execution to.\n    SimpleDelegateContract public implementation;\n \n    // ERC-20 token contract for minting test tokens.\n    ERC20 public token;\n \n    function run() external {\n        // Step 1: Deploy delegation and ERC-20 contracts using the Deployer&#x27;s key.\n        vm.broadcast(DEPLOYER_PK);\n        implementation = new SimpleDelegateContract();\n        token = new ERC20(ALICE_ADDRESS);\n \n        // Construct a single transaction call: Mint 100 tokens to Bob.\n        SimpleDelegateContract.Call[] memory calls = new SimpleDelegateContract.Call[](1);\n        bytes memory data = abi.encodeCall(ERC20.mint, (100, BOB_ADDRESS));\n        calls[0] = SimpleDelegateContract.Call({to: address(token), data: data, value: 0});\n \n        // Alice signs a delegation allowing `implementation` to execute transactions on her behalf.\n        Vm.SignedDelegation memory signedDelegation = vm.signDelegation(address(implementation), ALICE_PK);\n \n        // Bob attaches the signed delegation from Alice and broadcasts it.\n        vm.broadcast(BOB_PK);\n        vm.attachDelegation(signedDelegation);\n \n        // As Bob, execute the transaction via Alice&#x27;s assigned contract.\n        SimpleDelegateContract(ALICE_ADDRESS).execute(calls);\n \n        // Verify balance\n        vm.assertEq(token.balanceOf(BOB_ADDRESS), 100);\n    }\n}\nTo run the script:\nforge script script/SignDelegation.s.sol --rpc-url http://localhost:8545 --broadcast","title":"Examples","titles":[null,"signDelegation"]},"1053":{"href":"/reference/cheatcodes/sign#sign","html":"\n","isPage":true,"text":"\n","title":"sign","titles":[null]},"1054":{"href":"/reference/cheatcodes/sign#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> sign</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> privateKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> digest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint8</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> v</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> r</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> s</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> sign</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">Wallet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> wallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> digest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint8</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> v</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> r</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> s</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction sign(uint256 privateKey, bytes32 digest) external returns (uint8 v, bytes32 r, bytes32 s);\nfunction sign(Wallet memory wallet, bytes32 digest) external returns (uint8 v, bytes32 r, bytes32 s);\n","title":"Signature","titles":[null,"sign"]},"1055":{"href":"/reference/cheatcodes/sign#description","html":"\n<p>Signs a digest <code>digest</code> with private key <code>privateKey</code> or <a href=\"/reference/cheatcodes/create-wallet\"><code>Wallet</code></a>, returning <code>(v, r, s)</code>.</p>\n<p>This is useful for testing functions that take signed data and perform an <code>ecrecover</code> to verify the signer.</p>\n","isPage":false,"text":"\nSigns a digest digest with private key privateKey or Wallet, returning (v, r, s).\nThis is useful for testing functions that take signed data and perform an ecrecover to verify the signer.\n","title":"Description","titles":[null,"sign"]},"1056":{"href":"/reference/cheatcodes/sign#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> alice, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> alicePk) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> makeAddrAndKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;alice&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Signed by Alice&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> v, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> r, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> s) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sign</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alicePk, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">hash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ecrecover</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">hash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, v, r, s);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice, signer); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// [PASS]</span></span></code></pre>\n<p>This is useful for testing functions that require a signature:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// SPDX-License-Identifier: UNLICENSED</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">pragma</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\"> solidity</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.8.17</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ECDSA</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;@openzeppelin/contracts/utils/cryptography/ECDSA.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SigningExample</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Ownable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    using</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ECDSA</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> for</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> systemAddress;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setSystemAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _address) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> onlyOwner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        systemAddress </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _address;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> purchase</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _amount, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _nonce, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _signature) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> payable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isValidSignature</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            systemAddress,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">            keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">msg.sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, _amount, _nonce)),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            _signature</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            ), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Invalid Signature&quot;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        );</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // mint tokens</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> isValidSignature</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _systemAddress, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> signature</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> view</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(_systemAddress </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Missing System Address&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signedHash </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toEthSignedMessageHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signedHash.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">recover</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(signature) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _systemAddress;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SigningExampleTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    using</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ECDSA</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> for</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    SigningExample </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signingExample;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> userPrivateKey;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signerPrivateKey;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        signingExample </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> SigningExample</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        userPrivateKey </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0xa11ce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        signerPrivateKey </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0xabc123</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">addr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(signerPrivateKey);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        signingExample.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setSystemAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(signer);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testPurchase</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> user </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">addr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(userPrivateKey);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">addr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(signerPrivateKey);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> nonce </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;QSfd8gQE4WYzO29&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startPrank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(signer);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> digest </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(user, amount, nonce)).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toEthSignedMessageHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> v, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> r, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> s) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sign</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(signerPrivateKey, digest);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signature </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(r, s, v); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">note</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> the order here is different from line above.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopPrank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startPrank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(user);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Give the user some ETH, just for good measure</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(user, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        signingExample.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">purchase</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            amount,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            nonce,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            signature</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        );</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopPrank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n(address alice, uint256 alicePk) = makeAddrAndKey(&quot;alice&quot;);\nemit log_address(alice);\nbytes32 hash = keccak256(&quot;Signed by Alice&quot;);\n(uint8 v, bytes32 r, bytes32 s) = vm.sign(alicePk, hash);\naddress signer = ecrecover(hash, v, r, s);\nassertEq(alice, signer); // [PASS]\nThis is useful for testing functions that require a signature:\n// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.17;\n \nimport { ECDSA } from &quot;@openzeppelin/contracts/utils/cryptography/ECDSA.sol&quot;;\n \ncontract SigningExample is Ownable {\n    using ECDSA for bytes32;\n \n    address public systemAddress;\n \n    function setSystemAddress(address _address) external onlyOwner {\n        systemAddress = _address;\n    }\n \n    function purchase(uint256 _amount, string calldata _nonce, bytes calldata _signature) external payable {\n        require(isValidSignature(\n            systemAddress,\n            keccak256(abi.encodePacked(msg.sender, _amount, _nonce)),\n            _signature\n            ), &quot;Invalid Signature&quot;\n        );\n \n        // mint tokens\n    }\n \n    function isValidSignature(address _systemAddress, bytes32 hash, bytes memory signature) internal view returns (bool) {\n        require(_systemAddress != address(0), &quot;Missing System Address&quot;);\n \n        bytes32 signedHash = hash.toEthSignedMessageHash();\n        return signedHash.recover(signature) == _systemAddress;\n    }\n \n}\n \ncontract SigningExampleTest is Test {\n    using ECDSA for bytes32;\n \n    SigningExample public signingExample;\n \n    uint256 internal userPrivateKey;\n    uint256 internal signerPrivateKey;\n \n    function setUp() public {\n        signingExample = new SigningExample();\n \n        userPrivateKey = 0xa11ce;\n        signerPrivateKey = 0xabc123;\n \n        address signer = vm.addr(signerPrivateKey);\n        signingExample.setSystemAddress(signer);\n    }\n \n    function testPurchase() public {\n        address user = vm.addr(userPrivateKey);\n        address signer = vm.addr(signerPrivateKey);\n \n        uint256 amount = 2;\n        string memory nonce = &#x27;QSfd8gQE4WYzO29&#x27;;\n \n        vm.startPrank(signer);\n        bytes32 digest = keccak256(abi.encodePacked(user, amount, nonce)).toEthSignedMessageHash();\n        (uint8 v, bytes32 r, bytes32 s) = vm.sign(signerPrivateKey, digest);\n        bytes memory signature = abi.encodePacked(r, s, v); // note the order here is different from line above.\n        vm.stopPrank();\n \n        vm.startPrank(user);\n        // Give the user some ETH, just for good measure\n        vm.deal(user, 1 ether);\n \n        signingExample.purchase(\n            amount,\n            nonce,\n            signature\n        );\n        vm.stopPrank();\n    }\n}\n","title":"Examples","titles":[null,"sign"]},"1057":{"href":"/reference/cheatcodes/sign#wallet","html":"\n<p>The Wallet overload is a simple wrapper that uses the wallet&#x27;s private key to sign the digest</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Wallet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> alice </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createWallet</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;alice&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Signed by Alice&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> v, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> r, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> s) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sign</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">hash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ecrecover</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">hash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, v, r, s);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice.addr, signer); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// [PASS]</span></span></code></pre>","isPage":false,"text":"\nThe Wallet overload is a simple wrapper that uses the wallet&#x27;s private key to sign the digest\nWallet memory alice = vm.createWallet(&quot;alice&quot;);\nbytes32 hash = keccak256(&quot;Signed by Alice&quot;);\n(uint8 v, bytes32 r, bytes32 s) = vm.sign(alice, hash);\naddress signer = ecrecover(hash, v, r, s);\nassertEq(alice.addr, signer); // [PASS]","title":"Wallet","titles":[null,"sign","Examples"]},"1058":{"href":"/reference/cheatcodes/signing#signing","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/sign.mdx\"><code>sign</code></a></li>\n<li><a href=\"/reference/cheatcodes/sign-delegation.mdx\"><code>signDelegation</code></a></li>\n</ul>","isPage":true,"text":"\n\nsign\nsignDelegation\n","title":"Signing","titles":[null]},"1059":{"href":"/reference/cheatcodes/skip#skip","html":"\n","isPage":true,"text":"\n","title":"skip","titles":[null]},"1060":{"href":"/reference/cheatcodes/skip#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> skip</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> skip</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction skip(bool skip) external;\n","title":"Signature","titles":[null]},"1061":{"href":"/reference/cheatcodes/skip#description","html":"\n<p>Marks a test as skipped, conditionally. It must be called at the top of the test to ensure it is skipped without any execution.</p>\n<p>If <code>skip</code> is called with a false boolean, it will not skip the test.</p>\n<p>Tests marked as skipped will appear with a <code>[SKIPPED]</code> label on the test runner and on the summary, to easily identify skipped tests.</p>\n","isPage":false,"text":"\nMarks a test as skipped, conditionally. It must be called at the top of the test to ensure it is skipped without any execution.\nIf skip is called with a false boolean, it will not skip the test.\nTests marked as skipped will appear with a [SKIPPED] label on the test runner and on the summary, to easily identify skipped tests.\n","title":"Description","titles":[null]},"1062":{"href":"/reference/cheatcodes/skip#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testSkip</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">skip</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// This revert will not be reached as this test will be skipped.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    revert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Should not reach this revert&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testNotSkip</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">skip</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// This revert will be reached as this test will not be skipped, and the test will fail.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    revert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Should reach this revert&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\n \nfunction testSkip() public {\n    vm.skip(true);\n    /// This revert will not be reached as this test will be skipped.\n    revert(&quot;Should not reach this revert&quot;);\n}\n \nfunction testNotSkip() public {\n    vm.skip(false);\n    /// This revert will be reached as this test will not be skipped, and the test will fail.\n    revert(&quot;Should reach this revert&quot;);\n}","title":"Examples","titles":[null,"Description"]},"1063":{"href":"/reference/cheatcodes/sleep#sleep","html":"\n","isPage":true,"text":"\n","title":"sleep","titles":[null]},"1064":{"href":"/reference/cheatcodes/sleep#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> sleep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> milliseconds</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction sleep(uint256 milliseconds) external;\n","title":"Signature","titles":[null,"sleep"]},"1065":{"href":"/reference/cheatcodes/sleep#description","html":"\n<p>Sleeps for a given amount of milliseconds.</p>\n","isPage":false,"text":"\nSleeps for a given amount of milliseconds.\n","title":"Description","titles":[null,"sleep"]},"1066":{"href":"/reference/cheatcodes/sleep#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sleep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10_000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Halts execution for 10 seconds</span></span></code></pre>","isPage":false,"text":"\nvm.sleep(10_000); // Halts execution for 10 seconds","title":"Examples","titles":[null,"sleep"]},"1067":{"href":"/reference/cheatcodes/start-broadcast#startbroadcast","html":"\n","isPage":true,"text":"\n","title":"startBroadcast","titles":[null]},"1068":{"href":"/reference/cheatcodes/start-broadcast#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> startBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> startBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> who</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> startBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> privateKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction startBroadcast() external;\nfunction startBroadcast(address who) external;\nfunction startBroadcast(uint256 privateKey) external;\n","title":"Signature","titles":[null,"startBroadcast"]},"1069":{"href":"/reference/cheatcodes/start-broadcast#description","html":"\n<p>Using the address that calls the test contract or the address / private key provided\nas the sender, has all subsequent calls (at this call depth only and excluding cheatcode calls) create\ntransactions that can later be signed and sent onchain.</p>\n","isPage":false,"text":"\nUsing the address that calls the test contract or the address / private key provided\nas the sender, has all subsequent calls (at this call depth only and excluding cheatcode calls) create\ntransactions that can later be signed and sent onchain.\n","title":"Description","titles":[null,"startBroadcast"]},"1070":{"href":"/reference/cheatcodes/start-broadcast#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;here&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deployOther</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(ACCOUNT_A);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Test test </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // will trigger a transaction</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    test.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // broadcast again, this time using a private key from your environment variables</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">envUint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;PRIVATE_KEY&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    test.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">t</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nfunction t(uint256 a) public returns (uint256) {\n    uint256 b = 0;\n    emit log_string(&quot;here&quot;);\n    return b;\n}\n \nfunction deployOther() public {\n    vm.startBroadcast(ACCOUNT_A);\n    Test test = new Test();\n \n    // will trigger a transaction\n    test.t(1);\n \n    vm.stopBroadcast();\n \n    // broadcast again, this time using a private key from your environment variables\n    vm.startBroadcast(vm.envUint(&quot;PRIVATE_KEY&quot;));\n    test.t(3);\n    vm.stopBroadcast();\n}\n","title":"Examples","titles":[null,"startBroadcast"]},"1071":{"href":"/reference/cheatcodes/start-broadcast#see-also","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/broadcast.mdx\">broadcast</a></li>\n<li><a href=\"/reference/cheatcodes/stop-broadcast.mdx\">stopBroadcast</a></li>\n</ul>","isPage":false,"text":"\n\nbroadcast\nstopBroadcast\n","title":"SEE ALSO","titles":[null,"startBroadcast"]},"1072":{"href":"/reference/cheatcodes/start-prank#startprank","html":"\n","isPage":true,"text":"\n","title":"startPrank","titles":[null]},"1073":{"href":"/reference/cheatcodes/start-prank#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> startPrank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> msgSender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> startPrank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> msgSender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> delegateCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> startPrank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> msgSender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> txOrigin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> startPrank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> msgSender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> txOrigin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> delegateCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction startPrank(address msgSender) external;\nfunction startPrank(address msgSender, bool delegateCall) external;\nfunction startPrank(address msgSender, address txOrigin) external;\nfunction startPrank(address msgSender, address txOrigin, bool delegateCall) external;\n","title":"Signature","titles":[null,"startPrank"]},"1074":{"href":"/reference/cheatcodes/start-prank#description","html":"\n<ul>\n<li><code>startPrank(address msgSender)</code>: sets <code>msg.sender</code> <strong>for all subsequent calls</strong> until <a href=\"/reference/cheatcodes/stop-prank.mdx\"><code>stopPrank</code></a> is called.</li>\n<li><code>startPrank(address msgSender, address txOrigin)</code>: sets <code>msg.sender</code> and <code>tx.origin</code> <strong>for all subsequent calls</strong> until <a href=\"/reference/cheatcodes/stop-prank.mdx\"><code>stopPrank</code></a> is called.</li>\n<li><code>startPrank(address msgSender, bool delegateCall)</code>: if <code>delegateCall</code> value is <code>true</code> then sets <code>msg.sender</code> <strong>for all subsequent delegate calls</strong> until <a href=\"/reference/cheatcodes/stop-prank.mdx\"><code>stopPrank</code></a> is called.</li>\n<li><code>startPrank(address msgSender, address txOrigin, bool delegateCall)</code>: if <code>delegateCall</code> value is <code>true</code> then sets <code>msg.sender</code> and <code>tx.origin</code> <strong>for all subsequent delegate calls</strong> until <a href=\"/reference/cheatcodes/stop-prank.mdx\"><code>stopPrank</code></a> is called.</li>\n</ul>\n<blockquote>\n<p>ℹ️ <strong>Note</strong></p>\n<p>The delegate calls cannot be pranked from an EOA.</p>\n</blockquote>\n","isPage":false,"text":"\n\nstartPrank(address msgSender): sets msg.sender for all subsequent calls until stopPrank is called.\nstartPrank(address msgSender, address txOrigin): sets msg.sender and tx.origin for all subsequent calls until stopPrank is called.\nstartPrank(address msgSender, bool delegateCall): if delegateCall value is true then sets msg.sender for all subsequent delegate calls until stopPrank is called.\nstartPrank(address msgSender, address txOrigin, bool delegateCall): if delegateCall value is true then sets msg.sender and tx.origin for all subsequent delegate calls until stopPrank is called.\n\n\nℹ️ Note\nThe delegate calls cannot be pranked from an EOA.\n\n","title":"Description","titles":[null,"startPrank"]},"1075":{"href":"/reference/cheatcodes/start-prank#examples","html":"\n<ul>\n<li>prank delegate call and record state diffs</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ImplementationTest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> num;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sender;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setNum</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _num) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        num </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _num;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ProxyTest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> num;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sender;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FoundryIssue</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ProxyTest proxy </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ProxyTest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        ImplementationTest impl </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ImplementationTest</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">label</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(proxy), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;proxy&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">label</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(impl), </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Impl&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> num </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 42</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startPrank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(proxy), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startStateDiffRecording</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> successTwo,) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(impl).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">delegatecall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeWithSignature</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;setNum(uint256)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, num));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        VmSafe.AccountAccess[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> accountAccesses </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopAndReturnStateDiff</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;accountAccesses.kind&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(accountAccesses[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].kind));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;accountAccesses.accessor&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getLabel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(accountAccesses[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].accessor));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;accountAccesses.account&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getLabel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(accountAccesses[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].account));</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">logBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(accountAccesses[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].data);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">==</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Logs</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> ==</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">  accountAccesses.kind</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">  accountAccesses.accessor</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> proxy</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">  accountAccesses.account</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> Impl</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">  0xcd16ecbf000000000000000000000000000000000000000000000000000000000000002a</span></span></code></pre>\n","isPage":false,"text":"\n\nprank delegate call and record state diffs\n\ncontract ImplementationTest {\n    uint public num;\n    address public sender;\n \n    function setNum(uint _num) public {\n        num = _num;\n    }\n}\n \ncontract ProxyTest {\n    uint public num;\n    address public sender;\n}\n \ncontract FoundryIssue is Script {\n    function run() public {\n        ProxyTest proxy = new ProxyTest();\n        ImplementationTest impl = new ImplementationTest();\n \n        vm.label(address(proxy), &#x27;proxy&#x27;);\n        vm.label(address(impl), &#x27;Impl&#x27;);\n \n        uint num = 42;\n        vm.startPrank(address(proxy), true);\n        vm.startStateDiffRecording();\n        (bool successTwo,) = address(impl).delegatecall(abi.encodeWithSignature(&#x27;setNum(uint256)&#x27;, num));\n \n        VmSafe.AccountAccess[] memory accountAccesses = vm.stopAndReturnStateDiff();\n        console.log(&#x27;accountAccesses.kind&#x27;, uint8(accountAccesses[0].kind));\n        console.log(&#x27;accountAccesses.accessor&#x27;, vm.getLabel(accountAccesses[0].accessor));\n        console.log(&#x27;accountAccesses.account&#x27;, vm.getLabel(accountAccesses[0].account));\n        console.logBytes(accountAccesses[0].data);\n    }\n}\n== Logs ==\n  accountAccesses.kind 1\n  accountAccesses.accessor proxy\n  accountAccesses.account Impl\n  0xcd16ecbf000000000000000000000000000000000000000000000000000000000000002a\n","title":"Examples","titles":[null,"startPrank"]},"1076":{"href":"/reference/cheatcodes/start-prank#see-also","html":"\n<p>Forge Standard Library</p>\n<p><a href=\"/reference/forge-std/startHoax.mdx\"><code>startHoax</code></a>, <a href=\"/reference/forge-std/change-prank.mdx\"><code>changePrank</code></a></p>","isPage":false,"text":"\nForge Standard Library\nstartHoax, changePrank","title":"SEE ALSO","titles":[null,"startPrank"]},"1077":{"href":"/reference/cheatcodes/start-state-diff-recording#startstatediffrecording","html":"\n","isPage":true,"text":"\n","title":"startStateDiffRecording","titles":[null]},"1078":{"href":"/reference/cheatcodes/start-state-diff-recording#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> startStateDiffRecording</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nfunction startStateDiffRecording()\n","title":"Signature","titles":[null,"startStateDiffRecording"]},"1079":{"href":"/reference/cheatcodes/start-state-diff-recording#description","html":"\n<p>Records all state changes as part of CREATE, CALL or SELFDESTRUCT opcodes in order,\nalong with the context of the calls.\nRefer to <a href=\"/reference/cheatcodes/stop-and-return-state-diff.mdx\"><code>stopAndReturnStateDiff</code></a> for more details on how to access and interpret the recorded state changes.</p>","isPage":false,"text":"\nRecords all state changes as part of CREATE, CALL or SELFDESTRUCT opcodes in order,\nalong with the context of the calls.\nRefer to stopAndReturnStateDiff for more details on how to access and interpret the recorded state changes.","title":"Description","titles":[null,"startStateDiffRecording"]},"1080":{"href":"/reference/cheatcodes/state-snapshots#snapshotstate-cheatcodes","html":"\n","isPage":true,"text":"\n","title":"snapshotState cheatcodes","titles":[null]},"1081":{"href":"/reference/cheatcodes/state-snapshots#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Snapshot the current state of the evm.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Returns the ID of the snapshot that was created.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// To revert a snapshot use `revertToState`.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> snapshotState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> snapshotId</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Revert the state of the EVM to a previous snapshot</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Takes the snapshot ID to revert to.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Returns `true` if the snapshot was successfully reverted.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Returns `false` if the snapshot does not exist.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// **</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">Note</span><span style=\"color:#6A737D;--shiki-dark:#768390\">:** This does not automatically delete the snapshot. To delete the snapshot use `deleteStateSnapshot`.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> revertToState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> snapshotId</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> success</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Revert the state of the EVM to a previous snapshot and automatically deletes the snapshots</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Takes the snapshot ID to revert to.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Returns `true` if the snapshot was successfully reverted and deleted.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Returns `false` if the snapshot does not exist.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> revertToStateAndDelete</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> snapshotId</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> success</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Removes the snapshot with the given ID created by `snapshot`.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Takes the snapshot ID to delete.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Returns `true` if the snapshot was successfully deleted.</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Returns `false` if the snapshot does not exist.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deleteStateSnapshot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> snapshotId</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> success</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// Removes _all_ snapshots previously created by `snapshot`.</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deleteStateSnapshots</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\n/// Snapshot the current state of the evm.\n/// Returns the ID of the snapshot that was created.\n/// To revert a snapshot use `revertToState`.\nfunction snapshotState() external returns (uint256 snapshotId);\n \n/// Revert the state of the EVM to a previous snapshot\n/// Takes the snapshot ID to revert to.\n/// Returns `true` if the snapshot was successfully reverted.\n/// Returns `false` if the snapshot does not exist.\n/// **Note:** This does not automatically delete the snapshot. To delete the snapshot use `deleteStateSnapshot`.\nfunction revertToState(uint256 snapshotId) external returns (bool success);\n \n/// Revert the state of the EVM to a previous snapshot and automatically deletes the snapshots\n/// Takes the snapshot ID to revert to.\n/// Returns `true` if the snapshot was successfully reverted and deleted.\n/// Returns `false` if the snapshot does not exist.\nfunction revertToStateAndDelete(uint256 snapshotId) external returns (bool success);\n \n/// Removes the snapshot with the given ID created by `snapshot`.\n/// Takes the snapshot ID to delete.\n/// Returns `true` if the snapshot was successfully deleted.\n/// Returns `false` if the snapshot does not exist.\nfunction deleteStateSnapshot(uint256 snapshotId) external returns (bool success);\n \n/// Removes _all_ snapshots previously created by `snapshot`.\nfunction deleteStateSnapshots() external;\n","title":"Signature","titles":[null,"snapshotState cheatcodes"]},"1082":{"href":"/reference/cheatcodes/state-snapshots#description","html":"\n<p><code>snapshotState</code> takes a snapshot of the state of the blockchain and returns the identifier of the created snapshot.</p>\n<p><code>revertToState</code> reverts the state of the blockchain to the given state snapshot. This deletes the given snapshot, as well as any snapshots taken after (e.g.: reverting to id 2 will delete snapshots with ids 2, 3, 4, etc.).</p>\n","isPage":false,"text":"\nsnapshotState takes a snapshot of the state of the blockchain and returns the identifier of the created snapshot.\nrevertToState reverts the state of the blockchain to the given state snapshot. This deletes the given snapshot, as well as any snapshots taken after (e.g.: reverting to id 2 will delete snapshots with ids 2, 3, 4, etc.).\n","title":"Description","titles":[null,"snapshotState cheatcodes"]},"1083":{"href":"/reference/cheatcodes/state-snapshots#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Storage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> slot0;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> slot1;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SnapshotStateTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Storage store;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> timestamp;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setUp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        store.slot0 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        store.slot1 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);            </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// balance = 5 ether</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        timestamp </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.timestamp;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testSnapshotState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> snapshot </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">snapshotState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();      </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// saves the state</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        // let&#x27;s change the state</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        store.slot0 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 300</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        store.slot1 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 400</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">500</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">warp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">12345</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);                             </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// block.timestamp = 12345</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(store.slot0, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">300</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(store.slot1, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">400</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).balance, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">500</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.timestamp, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">12345</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">revertToState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(snapshot);                 </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// restores the state</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(store.slot0, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;snapshot revert for slot 0 unsuccessful&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(store.slot1, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;snapshot revert for slot 1 unsuccessful&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).balance, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;snapshot revert for balance unsuccessful&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">        assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.timestamp, timestamp, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;snapshot revert for timestamp unsuccessful&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nstruct Storage {\n    uint slot0;\n    uint slot1;\n}\n \ncontract SnapshotStateTest is Test {\n    Storage store;\n    uint256 timestamp;\n \n    function setUp() public {\n        store.slot0 = 10;\n        store.slot1 = 20;\n        vm.deal(address(this), 5 ether);            // balance = 5 ether\n        timestamp = block.timestamp;\n    }\n \n    function testSnapshotState() public {\n        uint256 snapshot = vm.snapshotState();      // saves the state\n \n        // let&#x27;s change the state\n        store.slot0 = 300;\n        store.slot1 = 400;\n        vm.deal(address(this), 500 ether);\n        vm.warp(12345);                             // block.timestamp = 12345\n \n        assertEq(store.slot0, 300);\n        assertEq(store.slot1, 400);\n        assertEq(address(this).balance, 500 ether);\n        assertEq(block.timestamp, 12345);\n \n        vm.revertToState(snapshot);                 // restores the state\n \n        assertEq(store.slot0, 10, &quot;snapshot revert for slot 0 unsuccessful&quot;);\n        assertEq(store.slot1, 20, &quot;snapshot revert for slot 1 unsuccessful&quot;);\n        assertEq(address(this).balance, 5 ether, &quot;snapshot revert for balance unsuccessful&quot;);\n        assertEq(block.timestamp, timestamp, &quot;snapshot revert for timestamp unsuccessful&quot;);\n    }\n}","title":"Examples","titles":[null,"snapshotState cheatcodes"]},"1084":{"href":"/reference/cheatcodes/stop-and-return-state-diff#stopandreturnstatediff","html":"\n","isPage":true,"text":"\n","title":"stopAndReturnStateDiff","titles":[null]},"1085":{"href":"/reference/cheatcodes/stop-and-return-state-diff#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">enum</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> AccountAccessKind</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    Call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    DelegateCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    CallCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    StaticCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    Create</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    SelfDestruct</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    Resume</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    Balance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    Extcodesize</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    Extcodehash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    Extcodecopy</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ChainInfo</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> forkId;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chainId;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> AccountAccess</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ChainInfo chainInfo;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    AccountAccessKind kind;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> account;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> accessor;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> initialized;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> oldBalance;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> newBalance;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> deployedCode;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> value;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> reverted;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    StorageAccess[] storageAccesses;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint64</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> depth;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> StorageAccess</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> account;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> slot;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> isWrite;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> previousValue;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> newValue;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> reverted;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> stopAndReturnStateDiff</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">AccountAccess</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> accesses</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nenum AccountAccessKind {\n    Call,\n    DelegateCall,\n    CallCode,\n    StaticCall,\n    Create,\n    SelfDestruct,\n    Resume,\n    Balance,\n    Extcodesize,\n    Extcodehash,\n    Extcodecopy\n}\n \nstruct ChainInfo {\n    uint256 forkId;\n    uint256 chainId;\n}\n \nstruct AccountAccess {\n    ChainInfo chainInfo;\n    AccountAccessKind kind;\n    address account;\n    address accessor;\n    bool initialized;\n    uint256 oldBalance;\n    uint256 newBalance;\n    bytes deployedCode;\n    uint256 value;\n    bytes data;\n    bool reverted;\n    StorageAccess[] storageAccesses;\n    uint64 depth;\n}\n \nstruct StorageAccess {\n    address account;\n    bytes32 slot;\n    bool isWrite;\n    bytes32 previousValue;\n    bytes32 newValue;\n    bool reverted;\n}\n \nfunction stopAndReturnStateDiff() external returns (AccountAccess[] memory accesses);\n","title":"Signature","titles":[null,"stopAndReturnStateDiff"]},"1086":{"href":"/reference/cheatcodes/stop-and-return-state-diff#description","html":"\n<p>Retrieves state changes recorded after a call to <a href=\"/reference/cheatcodes/start-state-diff-recording.mdx\"><code>startStateDiffRecording</code></a>. This function will consume the recorded state diffs when called and disable state diff recording. One may call <code>startStateDiffRecording</code> to resume recording.</p>\n<p>There are two types of state change records; account accesses and storage accesses represented as <code>AccountAccess</code> and <code>StorageAccess</code>.</p>\n<p>Account state changes (<code>AccountAccess</code>) are recorded at the start of a new EVM context; i.e. induced by the various CREATE, CALL and SELFDESTRUCT operations.\nAn <code>AccountAccess</code> record contain storage accesses, represented as <code>StorageAccess</code>, that occurred before it was preempted via sub-calls or create operations.</p>\n<p>The ordering of <code>AccountAccess</code> records reflect the EVM execution order of their associated operations. An <code>AccountAccess</code> is created whenever an EVM context is created or resumed.\nIf a sub-context is created, a <code>Resume</code> <code>AccountAccess</code> is recorded to indicate that a previous <code>AccountAccess</code> that was pre-emptied has been resumed.</p>\n","isPage":false,"text":"\nRetrieves state changes recorded after a call to startStateDiffRecording. This function will consume the recorded state diffs when called and disable state diff recording. One may call startStateDiffRecording to resume recording.\nThere are two types of state change records; account accesses and storage accesses represented as AccountAccess and StorageAccess.\nAccount state changes (AccountAccess) are recorded at the start of a new EVM context; i.e. induced by the various CREATE, CALL and SELFDESTRUCT operations.\nAn AccountAccess record contain storage accesses, represented as StorageAccess, that occurred before it was preempted via sub-calls or create operations.\nThe ordering of AccountAccess records reflect the EVM execution order of their associated operations. An AccountAccess is created whenever an EVM context is created or resumed.\nIf a sub-context is created, a Resume AccountAccess is recorded to indicate that a previous AccountAccess that was pre-emptied has been resumed.\n","title":"Description","titles":[null,"stopAndReturnStateDiff"]},"1087":{"href":"/reference/cheatcodes/stop-and-return-state-diff#accountaccesskind","html":"\n<p>The kind of account access that determines the <code>account</code> that was accessed. This is typically designated by the EVM operation that initiated the account&#x27;s execution context.\nIf kind is <code>Call</code>, <code>DelegateCall</code>, <code>StaticCall</code> or <code>CallCode</code>, then the <code>account</code> is the callee.\nIf kind is Create, then the account is the newly created account.\nIf kind is SelfDestruct, then the account is the selfdestruct recipient.\nIf kind is a Resume, then account represents an execution context that had resumed.</p>\n<ul>\n<li><code>Call</code> - The account was called</li>\n<li><code>DelegateCall</code> - The account was called via delegate call</li>\n<li><code>CallCode</code> - The account was called via callcode</li>\n<li><code>StaticCall</code> - The account was called via staticcall</li>\n<li><code>Create</code> - The account was created</li>\n<li><code>SelfDestruct</code> - The account was selfdestructed</li>\n<li><code>Resume</code> - Indicates that a previously pre-emptied account access was resumed</li>\n<li><code>Balance</code> - The account&#x27;s balance was read</li>\n<li><code>Extcodesize</code> - The account&#x27;s codesize was read</li>\n<li><code>Extcodehash</code> - The account&#x27;s codehash was read</li>\n<li><code>Extcodecopy</code> - The account&#x27;s code was copied</li>\n</ul>\n","isPage":false,"text":"\nThe kind of account access that determines the account that was accessed. This is typically designated by the EVM operation that initiated the account&#x27;s execution context.\nIf kind is Call, DelegateCall, StaticCall or CallCode, then the account is the callee.\nIf kind is Create, then the account is the newly created account.\nIf kind is SelfDestruct, then the account is the selfdestruct recipient.\nIf kind is a Resume, then account represents an execution context that had resumed.\n\nCall - The account was called\nDelegateCall - The account was called via delegate call\nCallCode - The account was called via callcode\nStaticCall - The account was called via staticcall\nCreate - The account was created\nSelfDestruct - The account was selfdestructed\nResume - Indicates that a previously pre-emptied account access was resumed\nBalance - The account&#x27;s balance was read\nExtcodesize - The account&#x27;s codesize was read\nExtcodehash - The account&#x27;s codehash was read\nExtcodecopy - The account&#x27;s code was copied\n\n","title":"AccountAccessKind","titles":[null,"stopAndReturnStateDiff"]},"1088":{"href":"/reference/cheatcodes/stop-and-return-state-diff#accountaccess","html":"\n<ul>\n<li><code>chainInfo</code> - The chain and fork the accessed occurred.</li>\n<li><code>kind</code> - The kind of account access. This determines how to interpret the <code>AccountAccess</code></li>\n<li><code>account</code> - The account that was accessed. It&#x27;s the account created for <code>AccountAccessKind.Create</code>.\nIn the case of an <code>AccountAccessKind.SelfDestruct</code>, it&#x27;s the selfdestruct recipient.\nFor all other types of <code>AccountAccessKind</code>, it&#x27;s the account of the current EVM context.</li>\n<li><code>accessor</code> - What accessed <code>account</code>. That is either the account creator, caller or the account being selfdestructed.</li>\n<li><code>initialized</code> - If the account was initialized or empty prior to the access.\nAn account is considered initialized if it has code, a\nnon-zero nonce, or a non-zero balance.</li>\n<li><code>oldBalance</code>: The previous balance of the accessed <code>account</code>.</li>\n<li><code>newBalance</code> - The potential new balance of the accessed account.\nThat is, all balance changes are recorded here, even if reverts occurred.</li>\n<li><code>deployedCode</code> - Code of the <code>account</code> deployed in the case of <code>AccountAccessKind.Create</code>. This field is empty For all other account access kinds.</li>\n<li><code>value</code> - The value passed along with the account access.</li>\n<li><code>data</code> - Input data provided (i.e. <code>msg.data</code>) in the case of a <code>CREATE</code> or <code>CALL</code> type access.</li>\n<li><code>reverted</code> - If this access reverted in either the current or parent context.</li>\n<li><code>storageAccesses</code> - An ordered list of storage accesses made while the account access is non-preemptive.</li>\n<li><code>depth</code> - Call depth traversed during the recording of state differences.</li>\n</ul>\n","isPage":false,"text":"\n\nchainInfo - The chain and fork the accessed occurred.\nkind - The kind of account access. This determines how to interpret the AccountAccess\naccount - The account that was accessed. It&#x27;s the account created for AccountAccessKind.Create.\nIn the case of an AccountAccessKind.SelfDestruct, it&#x27;s the selfdestruct recipient.\nFor all other types of AccountAccessKind, it&#x27;s the account of the current EVM context.\naccessor - What accessed account. That is either the account creator, caller or the account being selfdestructed.\ninitialized - If the account was initialized or empty prior to the access.\nAn account is considered initialized if it has code, a\nnon-zero nonce, or a non-zero balance.\noldBalance: The previous balance of the accessed account.\nnewBalance - The potential new balance of the accessed account.\nThat is, all balance changes are recorded here, even if reverts occurred.\ndeployedCode - Code of the account deployed in the case of AccountAccessKind.Create. This field is empty For all other account access kinds.\nvalue - The value passed along with the account access.\ndata - Input data provided (i.e. msg.data) in the case of a CREATE or CALL type access.\nreverted - If this access reverted in either the current or parent context.\nstorageAccesses - An ordered list of storage accesses made while the account access is non-preemptive.\ndepth - Call depth traversed during the recording of state differences.\n\n","title":"AccountAccess","titles":[null,"stopAndReturnStateDiff"]},"1089":{"href":"/reference/cheatcodes/stop-and-return-state-diff#storageaccess","html":"\n<p>The storage accesses made during an <code>AccountAccess</code>. <code>StorageAccess</code> cannot exist without an associated <code>AccountAccess</code>. This means that when state diffs begins on the given context, storage accesses made during that context are not recorded as the context (but not its sub-contexts) isn&#x27;t recorded.</p>\n<p><code>StorageAccess</code> contains the following fields:</p>\n<ul>\n<li><code>account</code> - A account whose storage was accessed</li>\n<li><code>slot</code> - The slot that was accessed</li>\n<li><code>isWrite</code> - If the access was a write</li>\n<li><code>previousValue</code> - The value of the slot prior to this storage access</li>\n<li><code>newValue</code> - The value of the slot after this storage access</li>\n<li><code>reverted</code> - If this access was reverted</li>\n</ul>\n","isPage":false,"text":"\nThe storage accesses made during an AccountAccess. StorageAccess cannot exist without an associated AccountAccess. This means that when state diffs begins on the given context, storage accesses made during that context are not recorded as the context (but not its sub-contexts) isn&#x27;t recorded.\nStorageAccess contains the following fields:\n\naccount - A account whose storage was accessed\nslot - The slot that was accessed\nisWrite - If the access was a write\npreviousValue - The value of the slot prior to this storage access\nnewValue - The value of the slot after this storage access\nreverted - If this access was reverted\n\n","title":"StorageAccess","titles":[null,"stopAndReturnStateDiff"]},"1090":{"href":"/reference/cheatcodes/stop-and-return-state-diff#resumed-accountaccess","html":"\n<p>This type of AccountAccess is generated when a sub-context returns to its parent context. It retains the same values as the original context, including <code>accessor</code>, <code>account</code>, <code>initialized</code>, <code>storageAccesses</code>, and <code>reverted</code>.\nThe following control flow table illustrate how Resume AccountAccesses are recorded.</p>\n<table><thead><tr><th>Step in Contract A&#x27;s <code>alpha()</code></th><th>Step in Contract B&#x27;s <code>beta()</code></th><th>AccountAccess Records State</th></tr></thead><tbody><tr><td>Call A.alpha()</td><td></td><td>[A.call]</td></tr><tr><td>Access state</td><td></td><td>[A.call[A.access]]</td></tr><tr><td>Call B.beta()</td><td>B.beta() begins</td><td>[A.call[A.access], B.call]</td></tr><tr><td>(Execution Paused)</td><td>Access state</td><td>[A.call[A.access], B.call[B.access]]</td></tr><tr><td></td><td>Return</td><td></td></tr><tr><td>Resume execution</td><td>(Return to A.alpha())</td><td>[A.call[A.access], B.call[B.access]]</td></tr><tr><td>Access state</td><td></td><td>[<br/> A.call[A.access], <br/> B.call[B.access], <br/> A.resume[A.access&#x27;]<br/>]</td></tr></tbody></table>\n<blockquote>\n<p>ℹ️ <strong>Note</strong></p>\n<p>A Resumed AccountAccess is created only if storage accesses occurred after a context was resumed.</p>\n</blockquote>\n","isPage":false,"text":"\nThis type of AccountAccess is generated when a sub-context returns to its parent context. It retains the same values as the original context, including accessor, account, initialized, storageAccesses, and reverted.\nThe following control flow table illustrate how Resume AccountAccesses are recorded.\nStep in Contract A&#x27;s alpha()Step in Contract B&#x27;s beta()AccountAccess Records StateCall A.alpha()[A.call]Access state[A.call[A.access]]Call B.beta()B.beta() begins[A.call[A.access], B.call](Execution Paused)Access state[A.call[A.access], B.call[B.access]]ReturnResume execution(Return to A.alpha())[A.call[A.access], B.call[B.access]]Access state[ A.call[A.access],  B.call[B.access],  A.resume[A.access&#x27;]]\n\nℹ️ Note\nA Resumed AccountAccess is created only if storage accesses occurred after a context was resumed.\n\n","title":"Resumed AccountAccess","titles":[null,"stopAndReturnStateDiff"]},"1091":{"href":"/reference/cheatcodes/stop-and-return-state-diff#example-recording-storage-state-changes-during-a-create-operation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _reserved;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    constructor</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _data) payable { data </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _data; }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startStateDiffRecording</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Contract </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Contract{value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Vm.AccountAccess[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> records </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopAndReturnStateDiff</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(records.length, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(records[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].kind, Vm.AccountAccessKind.Create);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(records[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].account, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(records[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].accessor, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(records[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].initialized, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(records[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].oldBalance, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(records[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].newBalance, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(records[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].deployedCode, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).code);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(records[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].value, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ether</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(records[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].data, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodePacked</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Contract).creationCode, (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(records[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].reverted, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(records[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].storageAccesses.length, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(records[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].storageAccesses[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].account, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(records[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].storageAccesses[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].slot, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(records[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].storageAccesses[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].isWrite, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(records[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].storageAccesses[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].previousValue, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(records[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].storageAccesses[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].newValue, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(records[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].storageAccesses[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].reverted, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>Note that there are no <code>Resume</code> account accesses in this example.</p>\n","isPage":false,"text":"\ncontract Contract {\n    uint256 internal _reserved;\n    uint256 public data;\n    constructor(uint _data) payable { data = _data; }\n}\n \nvm.startStateDiffRecording();\nContract contract = new Contract{value: 1 ether}(100);\nVm.AccountAccess[] memory records = vm.stopAndReturnStateDiff();\n \nassertEq(records.length, 1);\nassertEq(records[0].kind, Vm.AccountAccessKind.Create);\nassertEq(records[0].account, address(contract));\nassertEq(records[0].accessor, address(this));\nassertEq(records[0].initialized, true);\nassertEq(records[0].oldBalance, 0);\nassertEq(records[0].newBalance, 1 ether);\nassertEq(records[0].deployedCode, address(contract).code);\nassertEq(records[0].value, 1 ether);\nassertEq(records[0].data, abi.encodePacked(type(Contract).creationCode, (uint(100))));\nassertEq(records[0].reverted, false);\n \nassertEq(records[0].storageAccesses.length, 1);\nassertEq(records[0].storageAccesses[0].account, address(contract));\nassertEq(records[0].storageAccesses[0].slot, bytes32(uint256(1)));\nassertEq(records[0].storageAccesses[0].isWrite, true);\nassertEq(records[0].storageAccesses[0].previousValue, bytes32(uint(0)));\nassertEq(records[0].storageAccesses[0].newValue, bytes32(uint(100)));\nassertEq(records[0].storageAccesses[0].reverted, false);\nNote that there are no Resume account accesses in this example.\n","title":"Example: Recording storage state changes during a CREATE operation","titles":[null,"stopAndReturnStateDiff"]},"1092":{"href":"/reference/cheatcodes/stop-and-return-state-diff#example-resumed-account-access","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Foo</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Bar b;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> val;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    constructor</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">Bar</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _b) { b </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _b; }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        val </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> val </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        b.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        val </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> val </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Bar</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Bar bar </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Bar</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Foo foo </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Foo</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(bar);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startStateDiffRecording</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">foo.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">run</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Vm.AccountAccess[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> records </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopAndReturnStateDiff</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(records.length, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Vm.AccountAccess </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fooCall </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> records[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">];</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fooCall.kind, Vm.AccountAccessKind.Call);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fooCall.account, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(foo));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fooCall.accessor, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">));</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// foo.val increment</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fooCall.storageAccesses.length, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fooCall.storageAccesses[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].isWrite, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fooCall.storageAccesses[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].isWrite, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fooCall.storageAccesses[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].oldValue, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fooCall.storageAccesses[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].newValue, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// bar.run CALL</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Vm.AccountAccess </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> barCall </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> records[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">];</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(barCall.kind, Vm.AccountAccessKind.Call);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(barCall.account, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(bar));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(barCall.accessor, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(foo));</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// foo.run RESUME</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Vm.AccountAccess </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fooResume </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> records[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">];</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fooResume.kind, Vm.AccountAccessKind.Resume);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// foo.val increment</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fooResume.storageAccesses.length, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fooResume.storageAccesses[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].isWrite, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fooResume.storageAccesses[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].isWrite, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fooResume.storageAccesses[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].oldValue, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)));</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fooResume.storageAccesses[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].newValue, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)));</span></span></code></pre>","isPage":false,"text":"\ncontract Foo {\n    Bar b;\n    uint256 public val;\n    constructor(Bar _b) { b = _b; }\n    function run() external {\n        val = val + 1;\n        b.run();\n        val = val + 1;\n    }\n}\ncontract Bar {\n    function run() external {}\n}\n \nBar bar = new Bar();\nFoo foo = new Foo(bar);\n \nvm.startStateDiffRecording();\nfoo.run();\nVm.AccountAccess[] memory records = vm.stopAndReturnStateDiff();\n \nassertEq(records.length, 3);\nVm.AccountAccess memory fooCall = records[0];\nassertEq(fooCall.kind, Vm.AccountAccessKind.Call);\nassertEq(fooCall.account, address(foo));\nassertEq(fooCall.accessor, address(this));\n// foo.val increment\nassertEq(fooCall.storageAccesses.length, 2);\nassertEq(fooCall.storageAccesses[0].isWrite, false);\nassertEq(fooCall.storageAccesses[1].isWrite, true);\nassertEq(fooCall.storageAccesses[1].oldValue, bytes32(uint(0)));\nassertEq(fooCall.storageAccesses[1].newValue, bytes32(uint(1)));\n \n// bar.run CALL\nVm.AccountAccess memory barCall = records[1];\nassertEq(barCall.kind, Vm.AccountAccessKind.Call);\nassertEq(barCall.account, address(bar));\nassertEq(barCall.accessor, address(foo));\n \n// foo.run RESUME\nVm.AccountAccess memory fooResume = records[2];\nassertEq(fooResume.kind, Vm.AccountAccessKind.Resume);\n// foo.val increment\nassertEq(fooResume.storageAccesses.length, 2);\nassertEq(fooResume.storageAccesses[0].isWrite, false);\nassertEq(fooResume.storageAccesses[1].isWrite, true);\nassertEq(fooResume.storageAccesses[1].oldValue, bytes32(uint(1)));\nassertEq(fooResume.storageAccesses[1].newValue, bytes32(uint(2)));","title":"Example: Resumed Account Access","titles":[null,"stopAndReturnStateDiff"]},"1093":{"href":"/reference/cheatcodes/stop-broadcast#stopbroadcast","html":"\n","isPage":true,"text":"\n","title":"stopBroadcast","titles":[null]},"1094":{"href":"/reference/cheatcodes/stop-broadcast#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> stopBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction stopBroadcast() external;\n","title":"Signature","titles":[null,"stopBroadcast"]},"1095":{"href":"/reference/cheatcodes/stop-broadcast#description","html":"\n<p>Stops collecting transactions for later on-chain broadcasting.</p>\n","isPage":false,"text":"\nStops collecting transactions for later on-chain broadcasting.\n","title":"Description","titles":[null,"stopBroadcast"]},"1096":{"href":"/reference/cheatcodes/stop-broadcast#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deployNoArgs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // broadcast the next call</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">broadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Test test1 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // broadcast all calls between this line and `stopBroadcast`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    Test test2 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nfunction deployNoArgs() public {\n    // broadcast the next call\n    cheats.broadcast();\n    Test test1 = new Test();\n \n    // broadcast all calls between this line and `stopBroadcast`\n    cheats.startBroadcast();\n    Test test2 = new Test();\n    cheats.stopBroadcast();\n}","title":"Examples","titles":[null,"stopBroadcast"]},"1097":{"href":"/reference/cheatcodes/stop-prank#stopprank","html":"\n","isPage":true,"text":"\n","title":"stopPrank","titles":[null]},"1098":{"href":"/reference/cheatcodes/stop-prank#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> stopPrank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction stopPrank() external;\n","title":"Signature","titles":[null,"stopPrank"]},"1099":{"href":"/reference/cheatcodes/stop-prank#description","html":"\n<p>Stops an active prank started by <a href=\"/reference/cheatcodes/start-prank.mdx\"><code>startPrank</code></a>, resetting <code>msg.sender</code> and <code>tx.origin</code> to the values before <code>startPrank</code> was called.</p>","isPage":false,"text":"\nStops an active prank started by startPrank, resetting msg.sender and tx.origin to the values before startPrank was called.","title":"Description","titles":[null,"stopPrank"]},"1100":{"href":"/reference/cheatcodes/store#store","html":"\n","isPage":true,"text":"\n","title":"store","titles":[null]},"1101":{"href":"/reference/cheatcodes/store#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> store</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> account</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> slot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction store(address account, bytes32 slot, bytes32 value) external;\n","title":"Signature","titles":[null,"store"]},"1102":{"href":"/reference/cheatcodes/store#description","html":"\n<p>Stores the value <code>value</code> in storage slot <code>slot</code> on account <code>account</code>.</p>\n","isPage":false,"text":"\nStores the value value in storage slot slot on account account.\n","title":"Description","titles":[null,"store"]},"1103":{"href":"/reference/cheatcodes/store#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// contract LeetContract {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">///     uint256 private leet = 1337; // slot 0</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">/// }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">store</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(leetContract), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">31337</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)));</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> leet </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">load</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(leetContract), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)));</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(leet)); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 31337</span></span></code></pre>\n","isPage":false,"text":"\n/// contract LeetContract {\n///     uint256 private leet = 1337; // slot 0\n/// }\n \nvm.store(address(leetContract), bytes32(uint256(0)), bytes32(uint256(31337)));\nbytes32 leet = vm.load(address(leetContract), bytes32(uint256(0)));\nemit log_uint(uint256(leet)); // 31337\n","title":"Examples","titles":[null,"store"]},"1104":{"href":"/reference/cheatcodes/store#see-also","html":"\n<p>Forge Standard Library</p>\n<p><a href=\"/reference/forge-std/std-storage.mdx\">Std Storage</a></p>","isPage":false,"text":"\nForge Standard Library\nStd Storage","title":"SEE ALSO","titles":[null,"store"]},"1105":{"href":"/reference/cheatcodes/to-string#tostring","html":"\n","isPage":true,"text":"\n","title":"toString","titles":[null]},"1106":{"href":"/reference/cheatcodes/to-string#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction toString(address) external returns (string memory);\nfunction toString(bool) external returns (string memory);\nfunction toString(uint256) external returns (string memory);\nfunction toString(int256) external returns (string memory);\nfunction toString(bytes32) external returns (string memory);\nfunction toString(bytes) external returns (string memory);\n","title":"Signature","titles":[null,"toString"]},"1107":{"href":"/reference/cheatcodes/to-string#description","html":"\n<p>Convert any type to its string version. Very useful for operations that demand strings, such as the cheatcode <code>ffi</code>.</p>\n<p>Bytes are converted to a string of their hex representation with <code>0x</code> at the start, signifying that they are encoded in hex.</p>\n","isPage":false,"text":"\nConvert any type to its string version. Very useful for operations that demand strings, such as the cheatcode ffi.\nBytes are converted to a string of their hex representation with 0x at the start, signifying that they are encoded in hex.\n","title":"Description","titles":[null,"toString"]},"1108":{"href":"/reference/cheatcodes/to-string#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> number </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 420</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stringNumber </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(number);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(stringNumber, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;420&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> testBytes </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> hex</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;7109709ECfa91a80626fF3989D68f67F5b1DD12D&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stringBytes </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(testBytes);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x7109709ecfa91a80626ff3989d68f67f5b1dd12d&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, stringBytes);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> testAddress </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  0x7109709ECfa91a80626fF3989D68f67F5b1DD12D</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stringAddress </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> cheats.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(testAddress);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x7109709ECfa91a80626fF3989D68f67F5b1DD12D&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, stringAddress);</span></span></code></pre>","isPage":false,"text":"\nuint256 number = 420;\nstring memory stringNumber = vm.toString(number);\nvm.assertEq(stringNumber, &quot;420&quot;);\nbytes memory testBytes = hex&quot;7109709ECfa91a80626fF3989D68f67F5b1DD12D&quot;;\nstring memory stringBytes = cheats.toString(testBytes);\nassertEq(&quot;0x7109709ecfa91a80626ff3989d68f67f5b1dd12d&quot;, stringBytes);\naddress testAddress =  0x7109709ECfa91a80626fF3989D68f67F5b1DD12D;\nstring memory stringAddress = cheats.toString(testAddress);\nassertEq(&quot;0x7109709ECfa91a80626fF3989D68f67F5b1DD12D&quot;, stringAddress);","title":"Examples","titles":[null,"toString"]},"1109":{"href":"/reference/cheatcodes/transact#transact","html":"\n","isPage":true,"text":"\n","title":"transact","titles":[null]},"1110":{"href":"/reference/cheatcodes/transact#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Fetches the given transaction from the active fork and executes it on the current state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> transact</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> txHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Fetches the given transaction from the given fork and executes it on the current state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> transact</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> forkId</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> txHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\n// Fetches the given transaction from the active fork and executes it on the current state\nfunction transact(bytes32 txHash) external;\n// Fetches the given transaction from the given fork and executes it on the current state\nfunction transact(uint256 forkId, bytes32 txHash) external;\n","title":"Signature","titles":[null,"transact"]},"1111":{"href":"/reference/cheatcodes/transact#description","html":"\n<p>In forking mode, fetches the Transaction from the provider and executes it on the current state</p>\n","isPage":false,"text":"\nIn forking mode, fetches the Transaction from the provider and executes it on the current state\n","title":"Description","titles":[null,"transact"]},"1112":{"href":"/reference/cheatcodes/transact#examples","html":"\n<p>Enter forking mode and execute a transaction:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Enter forking mode at block: https://etherscan.io/block/15596646</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> fork </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(MAINNET_RPC_URL, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">15596646</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">selectFork</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fork);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// a random transfer transaction in the block: https://etherscan.io/tx/0xaba74f25a17cf0d95d1c6d0085d6c83fb8c5e773ffd2573b99a953256f989c89</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0xaba74f25a17cf0d95d1c6d0085d6c83fb8c5e773ffd2573b99a953256f989c89</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sender </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0xa98218cdc4f63aCe91ddDdd24F7A580FD383865b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> recipient </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0x0C124046Fa7202f98E4e251B50488e34416Fc306</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(sender.balance, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5764124000000000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(recipient.balance, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3936000000000000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// transfer amount: 0.003936 Ether</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> transferAmount </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 3936000000000000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// expected balance changes once the transaction is executed</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expectedRecipientBalance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> recipient.balance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> transferAmount;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expectedSenderBalance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> sender.balance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> transferAmount;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// execute the transaction</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transact</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">tx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// recipient received transfer</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(recipient.balance, expectedRecipientBalance);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// sender&#x27;s balance decreased by transferAmount and gas</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">assert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(sender.balance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> expectedSenderBalance);</span></span></code></pre>\n","isPage":false,"text":"\nEnter forking mode and execute a transaction:\n// Enter forking mode at block: https://etherscan.io/block/15596646\nuint256 fork = vm.createFork(MAINNET_RPC_URL, 15596646);\nvm.selectFork(fork);\n \n// a random transfer transaction in the block: https://etherscan.io/tx/0xaba74f25a17cf0d95d1c6d0085d6c83fb8c5e773ffd2573b99a953256f989c89\nbytes32 tx = 0xaba74f25a17cf0d95d1c6d0085d6c83fb8c5e773ffd2573b99a953256f989c89;\n \naddress sender = address(0xa98218cdc4f63aCe91ddDdd24F7A580FD383865b);\naddress recipient = address(0x0C124046Fa7202f98E4e251B50488e34416Fc306);\n \nassertEq(sender.balance, 5764124000000000);\nassertEq(recipient.balance, 3936000000000000);\n \n// transfer amount: 0.003936 Ether\nuint256 transferAmount = 3936000000000000;\n \n// expected balance changes once the transaction is executed\nuint256 expectedRecipientBalance = recipient.balance + transferAmount;\nuint256 expectedSenderBalance = sender.balance - transferAmount;\n \n// execute the transaction\nvm.transact(tx);\n \n// recipient received transfer\nassertEq(recipient.balance, expectedRecipientBalance);\n \n// sender&#x27;s balance decreased by transferAmount and gas\nassert(sender.balance &lt; expectedSenderBalance);\n","title":"Examples","titles":[null,"transact"]},"1113":{"href":"/reference/cheatcodes/transact#see-also","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/roll.mdx\">roll</a></li>\n<li><a href=\"/reference/cheatcodes/create-fork.mdx\">createFork</a></li>\n<li><a href=\"/reference/cheatcodes/select-fork.mdx\">selectFork</a></li>\n<li><a href=\"/reference/cheatcodes/active-fork.mdx\">activeFork</a></li>\n</ul>","isPage":false,"text":"\n\nroll\ncreateFork\nselectFork\nactiveFork\n","title":"SEE ALSO","titles":[null,"transact"]},"1114":{"href":"/reference/cheatcodes/tx-gas-price#txgasprice","html":"\n","isPage":true,"text":"\n","title":"txGasPrice","titles":[null]},"1115":{"href":"/reference/cheatcodes/tx-gas-price#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> txGasPrice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> txGasPrice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> newGasPrice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction txGasPrice(uint256) external;\nfunction txGasPrice(uint256 newGasPrice) external;\n","title":"Signature","titles":[null,"txGasPrice"]},"1116":{"href":"/reference/cheatcodes/tx-gas-price#description","html":"\n<p>Sets <code>tx.gasprice</code> <strong>for the rest of the transaction</strong>.</p>\n","isPage":false,"text":"\nSets tx.gasprice for the rest of the transaction.\n","title":"Description","titles":[null,"txGasPrice"]},"1117":{"href":"/reference/cheatcodes/tx-gas-price#examples","html":"\n<p>We can use this to get accurate gas usage for a transaction.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testCalculateGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">txGasPrice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gasStart </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasleft</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    myContract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">doStuff</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gasEnd </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasleft</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gasUsed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (gasStart </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gasEnd) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.gasprice; </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// tx.gasprice is now 2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nWe can use this to get accurate gas usage for a transaction.\nfunction testCalculateGas() public {\n    vm.txGasPrice(2);\n    uint256 gasStart = gasleft();\n    myContract.doStuff();\n    uint256 gasEnd = gasleft();\n    uint256 gasUsed = (gasStart - gasEnd) * tx.gasprice; // tx.gasprice is now 2\n}","title":"Examples","titles":[null,"txGasPrice"]},"1118":{"href":"/reference/cheatcodes/unix-time#unixtime","html":"\n","isPage":true,"text":"\n","title":"unixTime","titles":[null]},"1119":{"href":"/reference/cheatcodes/unix-time#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> unixTime</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> milliseconds</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction unixTime() external returns (uint milliseconds);\n","title":"Signature","titles":[null,"unixTime"]},"1120":{"href":"/reference/cheatcodes/unix-time#description","html":"\n<p>Returns the time since unix epoch in milliseconds.</p>\n","isPage":false,"text":"\nReturns the time since unix epoch in milliseconds.\n","title":"Description","titles":[null,"unixTime"]},"1121":{"href":"/reference/cheatcodes/unix-time#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> start </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">unixTime</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sleep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10_000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Halts execution for 10 seconds</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> end </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">unixTime</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(end </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> start, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10_000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>","isPage":false,"text":"\nuint start = vm.unixTime();\nvm.sleep(10_000); // Halts execution for 10 seconds\nuint end = vm.unixTime();\nassertEq(end - start, 10_000);","title":"Examples","titles":[null,"unixTime"]},"1122":{"href":"/reference/cheatcodes/utilities#utilities","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/addr.mdx\"><code>addr</code></a></li>\n<li><a href=\"/reference/cheatcodes/label.mdx\"><code>label</code></a></li>\n<li><a href=\"/reference/cheatcodes/get-label.mdx\"><code>getLabel</code></a></li>\n<li><a href=\"/reference/cheatcodes/derive-key.mdx\"><code>deriveKey</code></a></li>\n<li><a href=\"/reference/cheatcodes/remember-key.mdx\"><code>rememberKey</code></a></li>\n<li><a href=\"/reference/cheatcodes/to-string.mdx\"><code>toString</code></a></li>\n<li><a href=\"/reference/cheatcodes/breakpoint.mdx\"><code>breakpoint</code></a></li>\n<li><a href=\"/reference/cheatcodes/create-wallet.mdx\"><code>createWallet</code></a></li>\n<li><a href=\"/reference/cheatcodes/copy-storage.mdx\"><code>copyStorage</code></a></li>\n<li><a href=\"/reference/cheatcodes/set-arbitrary-storage.mdx\"><code>setArbitraryStorage</code></a></li>\n</ul>","isPage":true,"text":"\n\naddr\nlabel\ngetLabel\nderiveKey\nrememberKey\ntoString\nbreakpoint\ncreateWallet\ncopyStorage\nsetArbitraryStorage\n","title":"Utilities","titles":[null]},"1123":{"href":"/reference/cheatcodes/warp#warp","html":"\n","isPage":true,"text":"\n","title":"warp","titles":[null]},"1124":{"href":"/reference/cheatcodes/warp#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> warp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction warp(uint256) external;\n","title":"Signature","titles":[null,"warp"]},"1125":{"href":"/reference/cheatcodes/warp#description","html":"\n<p>Sets <code>block.timestamp</code>.</p>\n","isPage":false,"text":"\nSets block.timestamp.\n","title":"Description","titles":[null,"warp"]},"1126":{"href":"/reference/cheatcodes/warp#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">warp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1641070800</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.timestamp); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1641070800</span></span></code></pre>\n","isPage":false,"text":"\nvm.warp(1641070800);\nemit log_uint(block.timestamp); // 1641070800\n","title":"Examples","titles":[null,"warp"]},"1127":{"href":"/reference/cheatcodes/warp#see-also","html":"\n<p>Forge Standard Library</p>\n<p><a href=\"/reference/forge-std/skip.mdx\"><code>skip</code></a>, <a href=\"/reference/forge-std/rewind.mdx\"><code>rewind</code></a></p>","isPage":false,"text":"\nForge Standard Library\nskip, rewind","title":"SEE ALSO","titles":[null,"warp"]},"1128":{"href":"/reference/cheatcodes/write-json#writejson","html":"\n","isPage":true,"text":"\n","title":"writeJson","titles":[null]},"1129":{"href":"/reference/cheatcodes/write-json#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> writeJson</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> path</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> writeJson</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> path</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> valueKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction writeJson(string calldata json, string calldata path) external;\n \nfunction writeJson(string calldata json, string calldata path, string calldata valueKey) external;\n","title":"Signature","titles":[null,"writeJson"]},"1130":{"href":"/reference/cheatcodes/write-json#description","html":"\n<p>Writes a serialized JSON object to a file.</p>\n<p>The argument <code>json</code> must be a JSON object in stringified form. For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>{ &quot;boolean&quot;: true, &quot;number&quot;: 342, &quot;object&quot;: { &quot;title&quot;: &quot;finally json serialization&quot; } }</span></span></code></pre>\n<p>This is usually built through <a href=\"/reference/cheatcodes/serialize-json.mdx\">serializeJson</a>.</p>\n<p>The argument <code>path</code> is the path of the JSON file to write to.</p>\n<p>If no <code>valueKey</code> is provided, then the JSON object will be written to a new file. If the file already exists, it will be overwritten.</p>\n<p>If a <code>valueKey</code> is provided, then the file must already exist and be a valid JSON file. The object in that file will be updated by replacing the value at the <em>JSON path</em> <code>valueKey</code> with the JSON object <code>json</code>.</p>\n<p>This is useful to replace some values in a JSON file without having to first parse and then reserialize it. Note that the JSON path must indicate an existing key, so it&#x27;s not possible to add new keys this way.</p>\n<p><strong>Remember:</strong> The file path <code>path</code> needs to be in the allowed paths. Read more in <a href=\"/reference/cheatcodes/fs.mdx\">File cheatcodes</a>.</p>\n","isPage":false,"text":"\nWrites a serialized JSON object to a file.\nThe argument json must be a JSON object in stringified form. For example:\n{ &quot;boolean&quot;: true, &quot;number&quot;: 342, &quot;object&quot;: { &quot;title&quot;: &quot;finally json serialization&quot; } }\nThis is usually built through serializeJson.\nThe argument path is the path of the JSON file to write to.\nIf no valueKey is provided, then the JSON object will be written to a new file. If the file already exists, it will be overwritten.\nIf a valueKey is provided, then the file must already exist and be a valid JSON file. The object in that file will be updated by replacing the value at the JSON path valueKey with the JSON object json.\nThis is useful to replace some values in a JSON file without having to first parse and then reserialize it. Note that the JSON path must indicate an existing key, so it&#x27;s not possible to add new keys this way.\nRemember: The file path path needs to be in the allowed paths. Read more in File cheatcodes.\n","title":"Description","titles":[null,"writeJson"]},"1131":{"href":"/reference/cheatcodes/write-json#json-paths","html":"\n<p>Let&#x27;s consider the following JSON object:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;boolean&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;number&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">342</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;obj1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;aNumber&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">123</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;obj2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;aNumber&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">123</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;obj3&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;veryDeep&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">13371337</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>The root object is always assumed, so we can refer to one of its children by starting the path with a dot (<code>.</code>). For instance, <code>.boolean</code>, <code>.number</code>, and <code>.obj1</code>.\nWe can go as deep as we want: <code>.obj1.aNumber</code>, or <code>.obj1.obj2.aNumber</code>.\nWe can even search for a key in a subtree: <code>.obj1..veryDeep</code>, or just <code>..veryDeep</code> since there&#x27;s no ambiguity.</p>\n<p>See the examples to see this in action.</p>\n","isPage":false,"text":"\nLet&#x27;s consider the following JSON object:\n{\n  &quot;boolean&quot;: true,\n  &quot;number&quot;: 342,\n  &quot;obj1&quot;: {\n    &quot;aNumber&quot;: 123,\n    &quot;obj2&quot;: {\n      &quot;aNumber&quot;: 123,\n      &quot;obj3&quot;: {\n        &quot;veryDeep&quot;: 13371337\n      }\n    }\n  }\n}\nThe root object is always assumed, so we can refer to one of its children by starting the path with a dot (.). For instance, .boolean, .number, and .obj1.\nWe can go as deep as we want: .obj1.aNumber, or .obj1.obj2.aNumber.\nWe can even search for a key in a subtree: .obj1..veryDeep, or just ..veryDeep since there&#x27;s no ambiguity.\nSee the examples to see this in action.\n","title":"JSON Paths","titles":[null,"writeJson","Description"]},"1132":{"href":"/reference/cheatcodes/write-json#examples","html":"\n","isPage":false,"text":"\n","title":"Examples","titles":[null,"writeJson"]},"1133":{"href":"/reference/cheatcodes/write-json#a-simple-example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> jsonObj </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{ &quot;boolean&quot;: true, &quot;number&quot;: 342, &quot;myObject&quot;: { &quot;title&quot;: &quot;finally json serialization&quot; } }&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">writeJson</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(jsonObj, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;./output/example.json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// replaces the value of `myObject` with a new object</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> newJsonObj </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{ &quot;aNumber&quot;: 123, &quot;aString&quot;: &quot;asd&quot; }&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">writeJson</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(newJsonObj, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;./output/example.json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;.myObject&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// replaces the value of `aString` in the new object</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">writeJson</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;my new string&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;./output/example.json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;.myObject.aString&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Here&#x27;s example.json:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   &quot;boolean&quot;: true,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   &quot;number&quot;: 342,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   &quot;myObject&quot;: {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//     &quot;aNumber&quot;: 123,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//     &quot;aString&quot;: &quot;my new string&quot;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// }</span></span></code></pre>\n","isPage":false,"text":"\nstring memory jsonObj = &#x27;{ &quot;boolean&quot;: true, &quot;number&quot;: 342, &quot;myObject&quot;: { &quot;title&quot;: &quot;finally json serialization&quot; } }&#x27;;\nvm.writeJson(jsonObj, &quot;./output/example.json&quot;);\n \n// replaces the value of `myObject` with a new object\nstring memory newJsonObj = &#x27;{ &quot;aNumber&quot;: 123, &quot;aString&quot;: &quot;asd&quot; }&#x27;;\nvm.writeJson(newJsonObj, &quot;./output/example.json&quot;, &quot;.myObject&quot;);\n \n// replaces the value of `aString` in the new object\nvm.writeJson(&quot;my new string&quot;, &quot;./output/example.json&quot;, &quot;.myObject.aString&quot;);\n \n// Here&#x27;s example.json:\n//\n// {\n//   &quot;boolean&quot;: true,\n//   &quot;number&quot;: 342,\n//   &quot;myObject&quot;: {\n//     &quot;aNumber&quot;: 123,\n//     &quot;aString&quot;: &quot;my new string&quot;\n//   }\n// }\n","title":"A simple example","titles":[null,"writeJson","Examples"]},"1134":{"href":"/reference/cheatcodes/write-json#a-more-complex-example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> jsonObj </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{ &quot;boolean&quot;: true, &quot;number&quot;: 342, &quot;obj1&quot;: { &quot;foo&quot;: &quot;bar&quot; } }&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">writeJson</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(jsonObj, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;./output/example2.json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> jsonObj2 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{ &quot;aNumber&quot;: 123, &quot;obj2&quot;: {} }&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">writeJson</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(jsonObj2, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;./output/example2.json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;.obj1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> jsonObj3 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{ &quot;aNumber&quot;: 123, &quot;obj3&quot;: { &quot;veryDeep&quot;: 3 } }&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">writeJson</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(jsonObj3, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;./output/example2.json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;.obj1.obj2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Here&#x27;s example2.json so far:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   &quot;boolean&quot;: true,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   &quot;number&quot;: 342,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   &quot;obj1&quot;: {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//     &quot;aNumber&quot;: 123,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//     &quot;obj2&quot;: {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//       &quot;aNumber&quot;: 123,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//       &quot;obj3&quot;: {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//         &quot;veryDeep&quot;: 3</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//       }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//     }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">Note</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> that the JSON object is just the value 13371337 in this case.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">writeJson</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;13371337&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;./output/example2.json&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;..veryDeep&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Here&#x27;s the final example2.json:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   &quot;boolean&quot;: true,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   &quot;number&quot;: 342,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   &quot;obj1&quot;: {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//     &quot;aNumber&quot;: 123,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//     &quot;obj2&quot;: {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//       &quot;aNumber&quot;: 123,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//       &quot;obj3&quot;: {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//         &quot;veryDeep&quot;: 13371337</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//       }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//     }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//   }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// }</span></span></code></pre>\n","isPage":false,"text":"\nstring memory jsonObj = &#x27;{ &quot;boolean&quot;: true, &quot;number&quot;: 342, &quot;obj1&quot;: { &quot;foo&quot;: &quot;bar&quot; } }&#x27;;\nvm.writeJson(jsonObj, &quot;./output/example2.json&quot;);\n \nstring memory jsonObj2 = &#x27;{ &quot;aNumber&quot;: 123, &quot;obj2&quot;: {} }&#x27;;\nvm.writeJson(jsonObj2, &quot;./output/example2.json&quot;, &quot;.obj1&quot;);\n \nstring memory jsonObj3 = &#x27;{ &quot;aNumber&quot;: 123, &quot;obj3&quot;: { &quot;veryDeep&quot;: 3 } }&#x27;;\nvm.writeJson(jsonObj3, &quot;./output/example2.json&quot;, &quot;.obj1.obj2&quot;);\n \n// Here&#x27;s example2.json so far:\n//\n// {\n//   &quot;boolean&quot;: true,\n//   &quot;number&quot;: 342,\n//   &quot;obj1&quot;: {\n//     &quot;aNumber&quot;: 123,\n//     &quot;obj2&quot;: {\n//       &quot;aNumber&quot;: 123,\n//       &quot;obj3&quot;: {\n//         &quot;veryDeep&quot;: 3\n//       }\n//     }\n//   }\n// }\n \n// Note that the JSON object is just the value 13371337 in this case.\nvm.writeJson(&quot;13371337&quot;, &quot;./output/example2.json&quot;, &quot;..veryDeep&quot;);\n \n// Here&#x27;s the final example2.json:\n//\n// {\n//   &quot;boolean&quot;: true,\n//   &quot;number&quot;: 342,\n//   &quot;obj1&quot;: {\n//     &quot;aNumber&quot;: 123,\n//     &quot;obj2&quot;: {\n//       &quot;aNumber&quot;: 123,\n//       &quot;obj3&quot;: {\n//         &quot;veryDeep&quot;: 13371337\n//       }\n//     }\n//   }\n// }\n","title":"A more complex example","titles":[null,"writeJson","Examples"]},"1135":{"href":"/reference/cheatcodes/write-json#see-also","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/serialize-json.mdx\">serializeJson</a></li>\n</ul>","isPage":false,"text":"\n\nserializeJson\n","title":"SEE ALSO","titles":[null,"writeJson"]},"1136":{"href":"/reference/cheatcodes/write-toml#writetoml","html":"\n","isPage":true,"text":"\n","title":"writeToml","titles":[null]},"1137":{"href":"/reference/cheatcodes/write-toml#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> writeToml</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> path</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> writeToml</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> json</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> path</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> calldata</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> valueKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction writeToml(string calldata json, string calldata path) external;\n \nfunction writeToml(string calldata json, string calldata path, string calldata valueKey) external;\n","title":"Signature","titles":[null,"writeToml"]},"1138":{"href":"/reference/cheatcodes/write-toml#description","html":"\n<p>Writes a serialized JSON object to a TOML file after conversion.</p>\n<p>The argument <code>json</code> must be a JSON object in stringified form. For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span>{ &quot;boolean&quot;: true, &quot;number&quot;: 342, &quot;object&quot;: { &quot;title&quot;: &quot;finally json serialization&quot; } }</span></span></code></pre>\n<p>This is usually built through <a href=\"/reference/cheatcodes/serialize-json.mdx\">serializeJson</a>.</p>\n<p>The argument <code>path</code> is the path of the TOML file to write to.</p>\n<p>If no <code>valueKey</code> is provided, then the TOML object will be written to a new file. If the file already exists, it will be overwritten.</p>\n<p>If a <code>valueKey</code> is provided, then the file must already exist and be a valid TOML file. The object in that file will be updated by replacing the value at the <em>JSON path</em> <code>valueKey</code> with the JSON object <code>json</code> after TOML conversion.</p>\n<p>This is useful to replace some values in a TOML file without having to first parse and then reserialize it. Note that the TOML path must indicate an existing key, so it&#x27;s not possible to add new keys this way.</p>\n<p><strong>Remember:</strong> The file path <code>path</code> needs to be in the allowed paths. Read more in <a href=\"/reference/cheatcodes/fs.mdx\">File cheatcodes</a>.</p>\n","isPage":false,"text":"\nWrites a serialized JSON object to a TOML file after conversion.\nThe argument json must be a JSON object in stringified form. For example:\n{ &quot;boolean&quot;: true, &quot;number&quot;: 342, &quot;object&quot;: { &quot;title&quot;: &quot;finally json serialization&quot; } }\nThis is usually built through serializeJson.\nThe argument path is the path of the TOML file to write to.\nIf no valueKey is provided, then the TOML object will be written to a new file. If the file already exists, it will be overwritten.\nIf a valueKey is provided, then the file must already exist and be a valid TOML file. The object in that file will be updated by replacing the value at the JSON path valueKey with the JSON object json after TOML conversion.\nThis is useful to replace some values in a TOML file without having to first parse and then reserialize it. Note that the TOML path must indicate an existing key, so it&#x27;s not possible to add new keys this way.\nRemember: The file path path needs to be in the allowed paths. Read more in File cheatcodes.\n","title":"Description","titles":[null,"writeToml"]},"1139":{"href":"/reference/cheatcodes/write-toml#json-paths","html":"\n<p>Let&#x27;s consider the following JSON object:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;boolean&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;number&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">342</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">  &quot;obj1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;aNumber&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">123</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">    &quot;obj2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;aNumber&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">123</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">      &quot;obj3&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">        &quot;veryDeep&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">13371337</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>The root object is always assumed, so we can refer to one of its children by starting the path with a dot (<code>.</code>). For instance, <code>.boolean</code>, <code>.number</code>, and <code>.obj1</code>.\nWe can go as deep as we want: <code>.obj1.aNumber</code>, or <code>.obj1.obj2.aNumber</code>.\nWe can even search for a key in a subtree: <code>.obj1..veryDeep</code>, or just <code>..veryDeep</code> since there&#x27;s no ambiguity.</p>\n<p>See the examples to see this in action.</p>\n","isPage":false,"text":"\nLet&#x27;s consider the following JSON object:\n{\n  &quot;boolean&quot;: true,\n  &quot;number&quot;: 342,\n  &quot;obj1&quot;: {\n    &quot;aNumber&quot;: 123,\n    &quot;obj2&quot;: {\n      &quot;aNumber&quot;: 123,\n      &quot;obj3&quot;: {\n        &quot;veryDeep&quot;: 13371337\n      }\n    }\n  }\n}\nThe root object is always assumed, so we can refer to one of its children by starting the path with a dot (.). For instance, .boolean, .number, and .obj1.\nWe can go as deep as we want: .obj1.aNumber, or .obj1.obj2.aNumber.\nWe can even search for a key in a subtree: .obj1..veryDeep, or just ..veryDeep since there&#x27;s no ambiguity.\nSee the examples to see this in action.\n","title":"JSON Paths","titles":[null,"writeToml","Description"]},"1140":{"href":"/reference/cheatcodes/write-toml#examples","html":"\n","isPage":false,"text":"\n","title":"Examples","titles":[null,"writeToml"]},"1141":{"href":"/reference/cheatcodes/write-toml#a-simple-example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> jsonObj </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{ &quot;boolean&quot;: true, &quot;number&quot;: 342, &quot;myObject&quot;: { &quot;title&quot;: &quot;finally json serialization&quot; } }&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">writeToml</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(jsonObj, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;./output/example.toml&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// replaces the value of `myObject` with a new object</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> newJsonObj </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{ &quot;aNumber&quot;: 123, &quot;aString&quot;: &quot;asd&quot; }&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">writeToml</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(newJsonObj, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;./output/example.toml&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;.myObject&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// replaces the value of `aString` in the new object</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">writeToml</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;my new string&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;./output/example.toml&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;.myObject.aString&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Here&#x27;s example.toml:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// boolean = true</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// number = 342</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// [myObject]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// aNumber = 123</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// aString = &quot;my new string&quot;</span></span></code></pre>\n","isPage":false,"text":"\nstring memory jsonObj = &#x27;{ &quot;boolean&quot;: true, &quot;number&quot;: 342, &quot;myObject&quot;: { &quot;title&quot;: &quot;finally json serialization&quot; } }&#x27;;\nvm.writeToml(jsonObj, &quot;./output/example.toml&quot;);\n \n// replaces the value of `myObject` with a new object\nstring memory newJsonObj = &#x27;{ &quot;aNumber&quot;: 123, &quot;aString&quot;: &quot;asd&quot; }&#x27;;\nvm.writeToml(newJsonObj, &quot;./output/example.toml&quot;, &quot;.myObject&quot;);\n \n// replaces the value of `aString` in the new object\nvm.writeToml(&quot;my new string&quot;, &quot;./output/example.toml&quot;, &quot;.myObject.aString&quot;);\n \n// Here&#x27;s example.toml:\n//\n// boolean = true\n// number = 342\n \n// [myObject]\n// aNumber = 123\n// aString = &quot;my new string&quot;\n","title":"A simple example","titles":[null,"writeToml","Examples"]},"1142":{"href":"/reference/cheatcodes/write-toml#a-more-complex-example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> jsonObj </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{ &quot;boolean&quot;: true, &quot;number&quot;: 342, &quot;obj1&quot;: { &quot;foo&quot;: &quot;bar&quot; } }&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">writeToml</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(jsonObj, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;./output/example2.toml&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> jsonObj2 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{ &quot;aNumber&quot;: 123, &quot;obj2&quot;: {} }&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">writeToml</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(jsonObj2, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;./output/example2.toml&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;.obj1&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> jsonObj3 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;{ &quot;aNumber&quot;: 123, &quot;obj3&quot;: { &quot;veryDeep&quot;: 3 } }&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">writeToml</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(jsonObj3, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;./output/example2.toml&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;.obj1.obj2&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Here&#x27;s example2.toml so far:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// boolean = true</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// number = 342</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// [obj1]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// aNumber = 123</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// [obj1.obj2]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// aNumber = 123</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// [obj1.obj2.obj3]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// veryDeep = 3</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">Note</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> that the JSON object is just the value 13371337 in this case.</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">writeToml</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;13371337&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;./output/example2.toml&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;..veryDeep&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Here&#x27;s the final example2.toml:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// boolean = true</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// number = 342</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// [obj1]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// aNumber = 123</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// [obj1.obj2]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// aNumber = 123</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">//</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// [obj1.obj2.obj3]</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// veryDeep = 13371337</span></span></code></pre>\n","isPage":false,"text":"\nstring memory jsonObj = &#x27;{ &quot;boolean&quot;: true, &quot;number&quot;: 342, &quot;obj1&quot;: { &quot;foo&quot;: &quot;bar&quot; } }&#x27;;\nvm.writeToml(jsonObj, &quot;./output/example2.toml&quot;);\n \nstring memory jsonObj2 = &#x27;{ &quot;aNumber&quot;: 123, &quot;obj2&quot;: {} }&#x27;;\nvm.writeToml(jsonObj2, &quot;./output/example2.toml&quot;, &quot;.obj1&quot;);\n \nstring memory jsonObj3 = &#x27;{ &quot;aNumber&quot;: 123, &quot;obj3&quot;: { &quot;veryDeep&quot;: 3 } }&#x27;;\nvm.writeToml(jsonObj3, &quot;./output/example2.toml&quot;, &quot;.obj1.obj2&quot;);\n \n// Here&#x27;s example2.toml so far:\n//\n// boolean = true\n// number = 342\n//\n// [obj1]\n// aNumber = 123\n//\n// [obj1.obj2]\n// aNumber = 123\n//\n// [obj1.obj2.obj3]\n// veryDeep = 3\n \n// Note that the JSON object is just the value 13371337 in this case.\nvm.writeToml(&quot;13371337&quot;, &quot;./output/example2.toml&quot;, &quot;..veryDeep&quot;);\n \n// Here&#x27;s the final example2.toml:\n//\n// boolean = true\n// number = 342\n//\n// [obj1]\n// aNumber = 123\n//\n// [obj1.obj2]\n// aNumber = 123\n//\n// [obj1.obj2.obj3]\n// veryDeep = 13371337\n","title":"A more complex example","titles":[null,"writeToml","Examples"]},"1143":{"href":"/reference/cheatcodes/write-toml#see-also","html":"\n<ul>\n<li><a href=\"/reference/cheatcodes/serialize-json.mdx\">serializeJson</a></li>\n</ul>","isPage":false,"text":"\n\nserializeJson\n","title":"SEE ALSO","titles":[null,"writeToml"]},"1144":{"href":"/reference/forge-std/abs#abs","html":"\n","isPage":true,"text":"\n","title":"abs","titles":[null]},"1145":{"href":"/reference/forge-std/abs#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> abs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nfunction abs(int256 a) internal pure returns (uint256)\n","title":"Signature","titles":[null,"abs"]},"1146":{"href":"/reference/forge-std/abs#description","html":"\n<p>Returns the absolute value of a number.</p>\n","isPage":false,"text":"\nReturns the absolute value of a number.\n","title":"Description","titles":[null,"abs"]},"1147":{"href":"/reference/forge-std/abs#example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ten </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stdMath.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">abs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>","isPage":false,"text":"\nuint256 ten = stdMath.abs(-10);","title":"Example","titles":[null,"abs"]},"1148":{"href":"/reference/forge-std/arithmeticError#arithmeticerror","html":"\n","isPage":true,"text":"\n","title":"arithmeticError","titles":[null]},"1149":{"href":"/reference/forge-std/arithmeticError#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stdError.arithmeticError</span></span></code></pre>\n","isPage":false,"text":"\nstdError.arithmeticError\n","title":"Signature","titles":[null,"arithmeticError"]},"1150":{"href":"/reference/forge-std/arithmeticError#description","html":"\n<p>The internal Solidity error when an arithmetic operation fails, e.g. underflow and overflow.</p>\n","isPage":false,"text":"\nThe internal Solidity error when an arithmetic operation fails, e.g. underflow and overflow.\n","title":"Description","titles":[null,"arithmeticError"]},"1151":{"href":"/reference/forge-std/arithmeticError#example","html":"\n<p>Assume we have a basic vault contract that can store some token (<code>wmdToken</code>):</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> BasicVault</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    IERC20 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> immutable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wmdToken;   </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    mapping</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> balances;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Deposited</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> indexed</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> amount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Withdrawal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> indexed</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> amount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    constructor</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">IERC20</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> wmdToken_</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">){</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        wmdToken </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wmdToken_;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deposit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> amount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {    </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        balances[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">msg.sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> success </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wmdToken.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transferFrom</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">msg.sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), amount);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(success, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Deposit failed!&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">); </span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Deposited</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">msg.sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, amount);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> withdraw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> amount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {      </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        balances[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">msg.sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> success </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> wmdToken.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">msg.sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, amount);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        require</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(success, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Withdrawal failed!&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Withdrawal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">msg.sender</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, amount);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>We have a test function to ensure that a user is unable to withdraw tokens in excess of his deposit, like so:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testUserCannotWithdrawExcessOfDeposit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">prank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(user);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">expectRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(stdError.arithmeticError);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vault.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">withdraw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(userTokens </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">**</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">18</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<ol>\n<li>User has tokens of amount <code>userTokens</code> deposited in a Vault contract.</li>\n<li>User attempts to withdraw tokens of amount in excess of his deposits.</li>\n<li>This leads to an underflow error, resulting from: <code>balances[msg.sender] -= amount;</code> as it would evaluate into a negative value.</li>\n</ol>\n<p>To catch the error &quot;Arithmetic over/underflow&quot;, we insert <code>vm.expectRevert(stdError.arithmeticError)</code> just before the function call that is expected to result in an underflow.</p>","isPage":false,"text":"\nAssume we have a basic vault contract that can store some token (wmdToken):\ncontract BasicVault {\n \n    IERC20 public immutable wmdToken;   \n    mapping(address =&gt; uint) public balances;\n \n    event Deposited(address indexed from, uint amount);\n    event Withdrawal(address indexed from, uint amount);\n \n    constructor(IERC20 wmdToken_){\n        wmdToken = wmdToken_;\n    }\n \n    function deposit(uint amount) external {    \n        balances[msg.sender] += amount;\n        bool success = wmdToken.transferFrom(msg.sender, address(this), amount);\n        require(success, &quot;Deposit failed!&quot;); \n        emit Deposited(msg.sender, amount);\n    }\n \n    function withdraw(uint amount) external {      \n        balances[msg.sender] -= amount;\n        bool success = wmdToken.transfer(msg.sender, amount);\n        require(success, &quot;Withdrawal failed!&quot;);\n        emit Withdrawal(msg.sender, amount);\n    }\n}\nWe have a test function to ensure that a user is unable to withdraw tokens in excess of his deposit, like so:\nfunction testUserCannotWithdrawExcessOfDeposit() public {\n    vm.prank(user);\n    vm.expectRevert(stdError.arithmeticError);\n    vault.withdraw(userTokens + 100*10**18);\n}\n\nUser has tokens of amount userTokens deposited in a Vault contract.\nUser attempts to withdraw tokens of amount in excess of his deposits.\nThis leads to an underflow error, resulting from: balances[msg.sender] -= amount; as it would evaluate into a negative value.\n\nTo catch the error &quot;Arithmetic over/underflow&quot;, we insert vm.expectRevert(stdError.arithmeticError) just before the function call that is expected to result in an underflow.","title":"Example","titles":[null,"arithmeticError"]},"1152":{"href":"/reference/forge-std/assertApproxEqAbs#assertapproxeqabs","html":"\n","isPage":true,"text":"\n","title":"assertApproxEqAbs","titles":[null]},"1153":{"href":"/reference/forge-std/assertApproxEqAbs#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertApproxEqAbs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> maxDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertApproxEqAbs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> maxDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertApproxEqAbs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> maxDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertApproxEqAbs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> maxDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) internal;\nfunction assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string memory err) internal;\nfunction assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) internal;\nfunction assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string memory err) internal;\n","title":"Signature","titles":[null,"assertApproxEqAbs"]},"1154":{"href":"/reference/forge-std/assertApproxEqAbs#description","html":"\n<p>Asserts <code>left</code> is approximately equal to <code>right</code> with delta in absolute value.</p>\n<p>Optionally includes an error message in the revert string.</p>\n","isPage":false,"text":"\nAsserts left is approximately equal to right with delta in absolute value.\nOptionally includes an error message in the revert string.\n","title":"Description","titles":[null,"assertApproxEqAbs"]},"1155":{"href":"/reference/forge-std/assertApproxEqAbs#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 200</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertApproxEqAbs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a, b, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">90</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[FAIL: assertion failed: 100 !~= 200 (max delta: 90, real delta: 100)] testRevert() (gas: 23884)</span></span></code></pre>\n","isPage":false,"text":"\nfunction testRevert() external {\n    uint256 a = 100;\n    uint256 b = 200;\n \n    assertApproxEqAbs(a, b, 90);\n}\n[FAIL: assertion failed: 100 !~= 200 (max delta: 90, real delta: 100)] testRevert() (gas: 23884)\n","title":"Examples","titles":[null,"assertApproxEqAbs"]},"1156":{"href":"/reference/forge-std/assertApproxEqAbs#see-also","html":"\n<ul>\n<li><a href=\"/reference/forge-std/assertApproxEqAbsDecimal.mdx\"><code>assertApproxEqAbsDecimal</code></a></li>\n<li><a href=\"/reference/forge-std/assertApproxEqRel.mdx\"><code>assertApproxEqRel</code></a></li>\n</ul>","isPage":false,"text":"\n\nassertApproxEqAbsDecimal\nassertApproxEqRel\n","title":"SEE ALSO","titles":[null,"assertApproxEqAbs"]},"1157":{"href":"/reference/forge-std/assertApproxEqAbsDecimal#assertapproxeqabsdecimal","html":"\n","isPage":true,"text":"\n","title":"assertApproxEqAbsDecimal","titles":[null]},"1158":{"href":"/reference/forge-std/assertApproxEqAbsDecimal#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertApproxEqAbsDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> maxDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertApproxEqAbsDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> maxDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertApproxEqAbsDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> maxDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertApproxEqAbsDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> maxDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals) internal;\nfunction assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals, string memory err) internal;\nfunction assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals) internal;\nfunction assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals, string memory err) internal;\n","title":"Signature","titles":[null,"assertApproxEqAbsDecimal"]},"1159":{"href":"/reference/forge-std/assertApproxEqAbsDecimal#description","html":"\n<p>Asserts <code>left</code> is approximately equal to <code>right</code> with delta in absolute value.</p>\n<p><code>left</code> and <code>right</code> are formatted with decimals in the revert string.</p>\n<p>Optionally includes an error message in the revert string.</p>\n","isPage":false,"text":"\nAsserts left is approximately equal to right with delta in absolute value.\nleft and right are formatted with decimals in the revert string.\nOptionally includes an error message in the revert string.\n","title":"Description","titles":[null,"assertApproxEqAbsDecimal"]},"1160":{"href":"/reference/forge-std/assertApproxEqAbsDecimal#see-also","html":"\n<ul>\n<li><a href=\"/reference/forge-std/assertApproxEqAbs.mdx\"><code>assertApproxEqAbs</code></a></li>\n</ul>","isPage":false,"text":"\n\nassertApproxEqAbs\n","title":"SEE ALSO","titles":[null,"assertApproxEqAbsDecimal"]},"1161":{"href":"/reference/forge-std/assertApproxEqRel#assertapproxeqrel","html":"\n","isPage":true,"text":"\n","title":"assertApproxEqRel","titles":[null]},"1162":{"href":"/reference/forge-std/assertApproxEqRel#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertApproxEqRel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> maxPercentDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertApproxEqRel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> maxPercentDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertApproxEqRel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> maxPercentDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertApproxEqRel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> maxPercentDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta) internal;\nfunction assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta, string memory err) internal;\nfunction assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) internal;\nfunction assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta, string memory err) internal;\n","title":"Signature","titles":[null,"assertApproxEqRel"]},"1163":{"href":"/reference/forge-std/assertApproxEqRel#description","html":"\n<p>Asserts <code>left</code> is approximately equal to <code>right</code> with delta in percentage, where <code>1e18</code> is 100%.</p>\n<p>Optionally includes an error message in the revert string.</p>\n","isPage":false,"text":"\nAsserts left is approximately equal to right with delta in percentage, where 1e18 is 100%.\nOptionally includes an error message in the revert string.\n","title":"Description","titles":[null,"assertApproxEqRel"]},"1164":{"href":"/reference/forge-std/assertApproxEqRel#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testRevert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 200</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    assertApproxEqRel</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a, b, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4e18</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[FAIL: assertion failed: 100 !~= 200 (max delta: 40.0000000000000000%, real delta: 50.0000000000000000%)] testRevert() (gas: 23884)</span></span></code></pre>\n","isPage":false,"text":"\nfunction testRevert() external {\n    uint256 a = 100;\n    uint256 b = 200;\n    assertApproxEqRel(a, b, 0.4e18);\n}\n[FAIL: assertion failed: 100 !~= 200 (max delta: 40.0000000000000000%, real delta: 50.0000000000000000%)] testRevert() (gas: 23884)\n","title":"Examples","titles":[null,"assertApproxEqRel"]},"1165":{"href":"/reference/forge-std/assertApproxEqRel#see-also","html":"\n<ul>\n<li><a href=\"/reference/forge-std/assertApproxEqRelDecimal.mdx\"><code>assertApproxEqRelDecimal</code></a></li>\n<li><a href=\"/reference/forge-std/assertApproxEqAbs.mdx\"><code>assertApproxEqAbs</code></a></li>\n</ul>","isPage":false,"text":"\n\nassertApproxEqRelDecimal\nassertApproxEqAbs\n","title":"SEE ALSO","titles":[null,"assertApproxEqRel"]},"1166":{"href":"/reference/forge-std/assertApproxEqRelDecimal#assertapproxeqreldecimal","html":"\n","isPage":true,"text":"\n","title":"assertApproxEqRelDecimal","titles":[null]},"1167":{"href":"/reference/forge-std/assertApproxEqRelDecimal#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertApproxEqRelDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> maxPercentDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertApproxEqRelDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> maxPercentDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertApproxEqRelDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> maxPercentDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertApproxEqRelDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> maxPercentDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals) internal;\nfunction assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals, string memory err) internal;\nfunction assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals) internal;\nfunction assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals, string memory err) internal;\n","title":"Signature","titles":[null,"assertApproxEqRelDecimal"]},"1168":{"href":"/reference/forge-std/assertApproxEqRelDecimal#description","html":"\n<p>Asserts <code>left</code> is approximately equal to <code>right</code> with delta in percentage, where <code>1e18</code> is 100%.</p>\n<p><code>left</code> and <code>right</code> are formatted with decimals in the revert string.</p>\n<p>Optionally includes an error message in the revert string.</p>\n","isPage":false,"text":"\nAsserts left is approximately equal to right with delta in percentage, where 1e18 is 100%.\nleft and right are formatted with decimals in the revert string.\nOptionally includes an error message in the revert string.\n","title":"Description","titles":[null,"assertApproxEqRelDecimal"]},"1169":{"href":"/reference/forge-std/assertApproxEqRelDecimal#see-also","html":"\n<ul>\n<li><a href=\"/reference/forge-std/assertApproxEqRel.mdx\"><code>assertApproxEqRel</code></a></li>\n</ul>","isPage":false,"text":"\n\nassertApproxEqRel\n","title":"SEE ALSO","titles":[null,"assertApproxEqRelDecimal"]},"1170":{"href":"/reference/forge-std/assertEq#asserteq","html":"\n","isPage":true,"text":"\n","title":"assertEq","titles":[null]},"1171":{"href":"/reference/forge-std/assertEq#signature","html":"\n","isPage":false,"text":"\n","title":"Signature","titles":[null,"assertEq"]},"1172":{"href":"/reference/forge-std/assertEq#bool","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertEq(bool left, bool right) internal;\nfunction assertEq(bool left, bool right, string memory err) internal;\n","title":"bool","titles":[null,"assertEq","Signature"]},"1173":{"href":"/reference/forge-std/assertEq#uint256","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertEq(uint256 left, uint256 right) internal;\nfunction assertEq(uint256 left, uint256 right, string memory err) internal;\n","title":"uint256","titles":[null,"assertEq","Signature"]},"1174":{"href":"/reference/forge-std/assertEq#int256","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertEq(int256 left, int256 right) internal;\nfunction assertEq(int256 left, int256 right, string memory err) internal;\n","title":"int256","titles":[null,"assertEq","Signature"]},"1175":{"href":"/reference/forge-std/assertEq#address","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertEq(address left, address right) internal;\nfunction assertEq(address left, address right, string memory err) internal;\n","title":"address","titles":[null,"assertEq","Signature"]},"1176":{"href":"/reference/forge-std/assertEq#bytes32","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertEq(bytes32 left, bytes32 right) internal;\nfunction assertEq(bytes32 left, bytes32 right, string memory err) internal;\n","title":"bytes32","titles":[null,"assertEq","Signature"]},"1177":{"href":"/reference/forge-std/assertEq#string","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertEq(string memory left, string memory right) internal;\nfunction assertEq(string memory left, string memory right, string memory err) internal;\n","title":"string","titles":[null,"assertEq","Signature"]},"1178":{"href":"/reference/forge-std/assertEq#bytes","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertEq(bytes memory left, bytes memory right) internal;\nfunction assertEq(bytes memory left, bytes memory right, string memory err) internal;\n","title":"bytes","titles":[null,"assertEq","Signature"]},"1179":{"href":"/reference/forge-std/assertEq#bool-1","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertEq(bool[] memory left, bool[] memory right) internal;\nfunction assertEq(bool[] memory left, bool[] memory right, string memory err) internal;\n","title":"bool[]","titles":[null,"assertEq","Signature"]},"1180":{"href":"/reference/forge-std/assertEq#uint256-1","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertEq(uint256[] memory left, uint256[] memory right) internal;\nfunction assertEq(uint256[] memory left, uint256[] memory right, string memory err) internal;\n","title":"uint256[]","titles":[null,"assertEq","Signature"]},"1181":{"href":"/reference/forge-std/assertEq#int256-1","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertEq(int256[] memory left, int256[] memory right) internal;\nfunction assertEq(int256[] memory left, int256[] memory right, string memory err) internal;\n","title":"int256[]","titles":[null,"assertEq","Signature"]},"1182":{"href":"/reference/forge-std/assertEq#address-1","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertEq(address[] memory left, address[] memory right) internal;\nfunction assertEq(address[] memory left, address[] memory right, string memory err) internal;\n","title":"address[]","titles":[null,"assertEq","Signature"]},"1183":{"href":"/reference/forge-std/assertEq#bytes32-1","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertEq(bytes32[] memory left, bytes32[] memory right) internal;\nfunction assertEq(bytes32[] memory left, bytes32[] memory right, string memory err) internal;\n","title":"bytes32[]","titles":[null,"assertEq","Signature"]},"1184":{"href":"/reference/forge-std/assertEq#string-1","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertEq(string[] memory left, string[] memory right) internal;\nfunction assertEq(string[] memory left, string[] memory right, string memory err) internal;\n","title":"string[]","titles":[null,"assertEq","Signature"]},"1185":{"href":"/reference/forge-std/assertEq#bytes-1","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertEq(bytes[] memory left, bytes[] memory right) internal;\nfunction assertEq(bytes[] memory left, bytes[] memory right, string memory err) internal;\n","title":"bytes[]","titles":[null,"assertEq","Signature"]},"1186":{"href":"/reference/forge-std/assertEq#legacy","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// legacy helper for asserting two uints shorter than 256 bits: `assertEqUint(uint8(1), uint128(1));`</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEqUint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEq32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\n// legacy helper for asserting two uints shorter than 256 bits: `assertEqUint(uint8(1), uint128(1));`\nfunction assertEqUint(uint256 a, uint256 b) internal;\nfunction assertEq32(bytes32 left, bytes32 right) internal;\nfunction assertEq32(bytes32 left, bytes32 right, string memory err) internal;\n","title":"Legacy","titles":[null,"assertEq","Signature"]},"1187":{"href":"/reference/forge-std/assertEq#description","html":"\n<p>Asserts <code>left</code> is equal to <code>right</code>.</p>\n<p>Optionally includes an error message in the revert string.</p>\n","isPage":false,"text":"\nAsserts left is equal to right.\nOptionally includes an error message in the revert string.\n","title":"Description","titles":[null,"assertEq"]},"1188":{"href":"/reference/forge-std/assertEq#see-also","html":"\n<ul>\n<li><a href=\"/reference/forge-std/assertEqDecimal.mdx\"><code>assertEqDecimal</code></a></li>\n<li><a href=\"/reference/forge-std/assertNotEq.mdx\"><code>assertNotEq</code></a></li>\n</ul>","isPage":false,"text":"\n\nassertEqDecimal\nassertNotEq\n","title":"SEE ALSO","titles":[null,"assertEq"]},"1189":{"href":"/reference/forge-std/assertEqDecimal#asserteqdecimal","html":"\n","isPage":true,"text":"\n","title":"assertEqDecimal","titles":[null]},"1190":{"href":"/reference/forge-std/assertEqDecimal#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEqDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEqDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEqDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertEqDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertEqDecimal(uint256 left, uint256 right, uint256 decimals) internal\nfunction assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal;\nfunction assertEqDecimal(int256 left, int256 right, uint256 decimals) internal;\nfunction assertEqDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal;\n","title":"Signature","titles":[null,"assertEqDecimal"]},"1191":{"href":"/reference/forge-std/assertEqDecimal#description","html":"\n<p>Asserts <code>left</code> is equal to <code>right</code>.</p>\n<p><code>left</code> and <code>right</code> are formatted with decimals in the revert string.</p>\n<p>Optionally includes an error message in the revert string.</p>\n","isPage":false,"text":"\nAsserts left is equal to right.\nleft and right are formatted with decimals in the revert string.\nOptionally includes an error message in the revert string.\n","title":"Description","titles":[null,"assertEqDecimal"]},"1192":{"href":"/reference/forge-std/assertEqDecimal#see-also","html":"\n<ul>\n<li><a href=\"/reference/forge-std/assertEq.mdx\"><code>assertEq</code></a></li>\n</ul>","isPage":false,"text":"\n\nassertEq\n","title":"SEE ALSO","titles":[null,"assertEqDecimal"]},"1193":{"href":"/reference/forge-std/assertFalse#assertfalse","html":"\n","isPage":true,"text":"\n","title":"assertFalse","titles":[null]},"1194":{"href":"/reference/forge-std/assertFalse#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertFalse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertFalse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertFalse(bool data) internal;\nfunction assertFalse(bool data, string memory err) internal;\n","title":"Signature","titles":[null,"assertFalse"]},"1195":{"href":"/reference/forge-std/assertFalse#description","html":"\n<p>Asserts <code>data</code> is false.</p>\n<p>Optionally includes an error message in the revert string.</p>\n","isPage":false,"text":"\nAsserts data is false.\nOptionally includes an error message in the revert string.\n","title":"Description","titles":[null,"assertFalse"]},"1196":{"href":"/reference/forge-std/assertFalse#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> failure </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fun</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertFalse</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(failure);</span></span></code></pre>\n","isPage":false,"text":"\nbool failure = contract.fun();\nassertFalse(failure);\n","title":"Examples","titles":[null,"assertFalse"]},"1197":{"href":"/reference/forge-std/assertFalse#see-also","html":"\n<ul>\n<li><a href=\"/reference/forge-std/assertTrue.mdx\"><code>assertTrue</code></a></li>\n</ul>","isPage":false,"text":"\n\nassertTrue\n","title":"SEE ALSO","titles":[null,"assertFalse"]},"1198":{"href":"/reference/forge-std/assertGe#assertge","html":"\n","isPage":true,"text":"\n","title":"assertGe","titles":[null]},"1199":{"href":"/reference/forge-std/assertGe#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertGe(uint256 left, uint256 right) internal;\nfunction assertGe(uint256 left, uint256 right, string memory err) internal;\nfunction assertGe(int256 left, int256 right) internal;\nfunction assertGe(int256 left, int256 right, string memory err) internal;\n","title":"Signature","titles":[null,"assertGe"]},"1200":{"href":"/reference/forge-std/assertGe#description","html":"\n<p>Asserts <code>left</code> is greater than or equal to <code>right</code>.</p>\n<p>Optionally includes an error message in the revert string.</p>\n","isPage":false,"text":"\nAsserts left is greater than or equal to right.\nOptionally includes an error message in the revert string.\n","title":"Description","titles":[null,"assertGe"]},"1201":{"href":"/reference/forge-std/assertGe#see-also","html":"\n<ul>\n<li><a href=\"/reference/forge-std/assertGeDecimal.mdx\"><code>assertGeDecimal</code></a></li>\n<li><a href=\"/reference/forge-std/assertGt.mdx\"><code>assertGt</code></a></li>\n</ul>","isPage":false,"text":"\n\nassertGeDecimal\nassertGt\n","title":"SEE ALSO","titles":[null,"assertGe"]},"1202":{"href":"/reference/forge-std/assertGeDecimal#assertgedecimal","html":"\n","isPage":true,"text":"\n","title":"assertGeDecimal","titles":[null]},"1203":{"href":"/reference/forge-std/assertGeDecimal#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGeDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGeDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGeDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGeDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertGeDecimal(uint256 left, uint256 right, uint256 decimals) internal\nfunction assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal;\nfunction assertGeDecimal(int256 left, int256 right, uint256 decimals) internal;\nfunction assertGeDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal;\n","title":"Signature","titles":[null,"assertGeDecimal"]},"1204":{"href":"/reference/forge-std/assertGeDecimal#description","html":"\n<p>Asserts <code>left</code> is greater than or equal to <code>right</code>.</p>\n<p><code>left</code> and <code>right</code> are formatted with decimals in the revert string.</p>\n<p>Optionally includes an error message in the revert string.</p>\n","isPage":false,"text":"\nAsserts left is greater than or equal to right.\nleft and right are formatted with decimals in the revert string.\nOptionally includes an error message in the revert string.\n","title":"Description","titles":[null,"assertGeDecimal"]},"1205":{"href":"/reference/forge-std/assertGeDecimal#see-also","html":"\n<ul>\n<li><a href=\"/reference/forge-std/assertGe.mdx\"><code>assertGe</code></a></li>\n</ul>","isPage":false,"text":"\n\nassertGe\n","title":"SEE ALSO","titles":[null,"assertGeDecimal"]},"1206":{"href":"/reference/forge-std/assertGt#assertgt","html":"\n","isPage":true,"text":"\n","title":"assertGt","titles":[null]},"1207":{"href":"/reference/forge-std/assertGt#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertGt(uint256 left, uint256 right) internal;\nfunction assertGt(uint256 left, uint256 right, string memory err) internal;\nfunction assertGt(int256 left, int256 right) internal;\nfunction assertGt(int256 left, int256 right, string memory err) internal;\n","title":"Signature","titles":[null,"assertGt"]},"1208":{"href":"/reference/forge-std/assertGt#description","html":"\n<p>Asserts <code>left</code> is strictly greater than <code>right</code>.</p>\n<p>Optionally includes an error message in the revert string.</p>\n","isPage":false,"text":"\nAsserts left is strictly greater than right.\nOptionally includes an error message in the revert string.\n","title":"Description","titles":[null,"assertGt"]},"1209":{"href":"/reference/forge-std/assertGt#see-also","html":"\n<ul>\n<li><a href=\"/reference/forge-std/assertGtDecimal.mdx\"><code>assertGtDecimal</code></a></li>\n<li><a href=\"/reference/forge-std/assertGe.mdx\"><code>assertGe</code></a></li>\n</ul>","isPage":false,"text":"\n\nassertGtDecimal\nassertGe\n","title":"SEE ALSO","titles":[null,"assertGt"]},"1210":{"href":"/reference/forge-std/assertGtDecimal#assertgtdecimal","html":"\n","isPage":true,"text":"\n","title":"assertGtDecimal","titles":[null]},"1211":{"href":"/reference/forge-std/assertGtDecimal#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGtDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGtDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGtDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertGtDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertGtDecimal(uint256 left, uint256 right, uint256 decimals) internal\nfunction assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal;\nfunction assertGtDecimal(int256 left, int256 right, uint256 decimals) internal;\nfunction assertGtDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal;\n","title":"Signature","titles":[null,"assertGtDecimal"]},"1212":{"href":"/reference/forge-std/assertGtDecimal#description","html":"\n<p>Asserts <code>left</code> is strictly greater than <code>right</code>.</p>\n<p><code>left</code> and <code>right</code> are formatted with decimals in the revert string.</p>\n<p>Optionally includes an error message in the revert string.</p>\n","isPage":false,"text":"\nAsserts left is strictly greater than right.\nleft and right are formatted with decimals in the revert string.\nOptionally includes an error message in the revert string.\n","title":"Description","titles":[null,"assertGtDecimal"]},"1213":{"href":"/reference/forge-std/assertGtDecimal#see-also","html":"\n<ul>\n<li><a href=\"/reference/forge-std/assertGt.mdx\"><code>assertGt</code></a></li>\n</ul>","isPage":false,"text":"\n\nassertGt\n","title":"SEE ALSO","titles":[null,"assertGtDecimal"]},"1214":{"href":"/reference/forge-std/assertLe#assertle","html":"\n","isPage":true,"text":"\n","title":"assertLe","titles":[null]},"1215":{"href":"/reference/forge-std/assertLe#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertLe(uint256 left, uint256 right) internal;\nfunction assertLe(uint256 left, uint256 right, string memory err) internal;\nfunction assertLe(int256 left, int256 right) internal;\nfunction assertLe(int256 left, int256 right, string memory err) internal;\n","title":"Signature","titles":[null,"assertLe"]},"1216":{"href":"/reference/forge-std/assertLe#description","html":"\n<p>Asserts <code>left</code> is less than or equal to <code>right</code>.</p>\n<p>Optionally includes an error message in the revert string.</p>\n","isPage":false,"text":"\nAsserts left is less than or equal to right.\nOptionally includes an error message in the revert string.\n","title":"Description","titles":[null,"assertLe"]},"1217":{"href":"/reference/forge-std/assertLe#see-also","html":"\n<ul>\n<li><a href=\"/reference/forge-std/assertLeDecimal.mdx\"><code>assertLeDecimal</code></a></li>\n<li><a href=\"/reference/forge-std/assertLt.mdx\"><code>assertLt</code></a></li>\n</ul>","isPage":false,"text":"\n\nassertLeDecimal\nassertLt\n","title":"SEE ALSO","titles":[null,"assertLe"]},"1218":{"href":"/reference/forge-std/assertLeDecimal#assertledecimal","html":"\n","isPage":true,"text":"\n","title":"assertLeDecimal","titles":[null]},"1219":{"href":"/reference/forge-std/assertLeDecimal#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLeDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLeDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLeDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLeDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertLeDecimal(uint256 left, uint256 right, uint256 decimals) internal\nfunction assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal;\nfunction assertLeDecimal(int256 left, int256 right, uint256 decimals) internal;\nfunction assertLeDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal;\n","title":"Signature","titles":[null,"assertLeDecimal"]},"1220":{"href":"/reference/forge-std/assertLeDecimal#description","html":"\n<p>Asserts <code>left</code> is less than or equal to <code>right</code>.</p>\n<p><code>left</code> and <code>right</code> are formatted with decimals in the revert string.</p>\n<p>Optionally includes an error message in the revert string.</p>\n","isPage":false,"text":"\nAsserts left is less than or equal to right.\nleft and right are formatted with decimals in the revert string.\nOptionally includes an error message in the revert string.\n","title":"Description","titles":[null,"assertLeDecimal"]},"1221":{"href":"/reference/forge-std/assertLeDecimal#see-also","html":"\n<ul>\n<li><a href=\"/reference/forge-std/assertLe.mdx\"><code>assertLe</code></a></li>\n</ul>","isPage":false,"text":"\n\nassertLe\n","title":"SEE ALSO","titles":[null,"assertLeDecimal"]},"1222":{"href":"/reference/forge-std/assertLt#assertlt","html":"\n","isPage":true,"text":"\n","title":"assertLt","titles":[null]},"1223":{"href":"/reference/forge-std/assertLt#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertLt(uint256 left, uint256 right) internal;\nfunction assertLt(uint256 left, uint256 right, string memory err) internal;\nfunction assertLt(int256 left, int256 right) internal;\nfunction assertLt(int256 left, int256 right, string memory err) internal;\n","title":"Signature","titles":[null,"assertLt"]},"1224":{"href":"/reference/forge-std/assertLt#description","html":"\n<p>Asserts <code>left</code> is strictly less than <code>right</code>.</p>\n<p>Optionally includes an error message in the revert string.</p>\n","isPage":false,"text":"\nAsserts left is strictly less than right.\nOptionally includes an error message in the revert string.\n","title":"Description","titles":[null,"assertLt"]},"1225":{"href":"/reference/forge-std/assertLt#see-also","html":"\n<ul>\n<li><a href=\"/reference/forge-std/assertLtDecimal.mdx\"><code>assertLtDecimal</code></a></li>\n<li><a href=\"/reference/forge-std/assertLe.mdx\"><code>assertLe</code></a></li>\n</ul>","isPage":false,"text":"\n\nassertLtDecimal\nassertLe\n","title":"SEE ALSO","titles":[null,"assertLt"]},"1226":{"href":"/reference/forge-std/assertLtDecimal#assertltdecimal","html":"\n","isPage":true,"text":"\n","title":"assertLtDecimal","titles":[null]},"1227":{"href":"/reference/forge-std/assertLtDecimal#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLtDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLtDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLtDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertLtDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertLtDecimal(uint256 left, uint256 right, uint256 decimals) internal\nfunction assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal;\nfunction assertLtDecimal(int256 left, int256 right, uint256 decimals) internal;\nfunction assertLtDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal;\n","title":"Signature","titles":[null,"assertLtDecimal"]},"1228":{"href":"/reference/forge-std/assertLtDecimal#description","html":"\n<p>Asserts <code>left</code> is strictly less than <code>right</code>.</p>\n<p><code>left</code> and <code>right</code> are formatted with decimals in the revert string.</p>\n<p>Optionally includes an error message in the revert string.</p>\n","isPage":false,"text":"\nAsserts left is strictly less than right.\nleft and right are formatted with decimals in the revert string.\nOptionally includes an error message in the revert string.\n","title":"Description","titles":[null,"assertLtDecimal"]},"1229":{"href":"/reference/forge-std/assertLtDecimal#see-also","html":"\n<ul>\n<li><a href=\"/reference/forge-std/assertLt.mdx\"><code>assertLt</code></a></li>\n</ul>","isPage":false,"text":"\n\nassertLt\n","title":"SEE ALSO","titles":[null,"assertLtDecimal"]},"1230":{"href":"/reference/forge-std/assertNotEq#assertnoteq","html":"\n","isPage":true,"text":"\n","title":"assertNotEq","titles":[null]},"1231":{"href":"/reference/forge-std/assertNotEq#signature","html":"\n","isPage":false,"text":"\n","title":"Signature","titles":[null,"assertNotEq"]},"1232":{"href":"/reference/forge-std/assertNotEq#bool","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertNotEq(bool left, bool right) internal;\nfunction assertNotEq(bool left, bool right, string memory err) internal;\n","title":"bool","titles":[null,"assertNotEq","Signature"]},"1233":{"href":"/reference/forge-std/assertNotEq#uint256","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertNotEq(uint256 left, uint256 right) internal;\nfunction assertNotEq(uint256 left, uint256 right, string memory err) internal;\n","title":"uint256","titles":[null,"assertNotEq","Signature"]},"1234":{"href":"/reference/forge-std/assertNotEq#int256","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertNotEq(int256 left, int256 right) internal;\nfunction assertNotEq(int256 left, int256 right, string memory err) internal;\n","title":"int256","titles":[null,"assertNotEq","Signature"]},"1235":{"href":"/reference/forge-std/assertNotEq#address","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertNotEq(address left, address right) internal;\nfunction assertNotEq(address left, address right, string memory err) internal;\n","title":"address","titles":[null,"assertNotEq","Signature"]},"1236":{"href":"/reference/forge-std/assertNotEq#bytes32","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertNotEq(bytes32 left, bytes32 right) internal;\nfunction assertNotEq(bytes32 left, bytes32 right, string memory err) internal;\n","title":"bytes32","titles":[null,"assertNotEq","Signature"]},"1237":{"href":"/reference/forge-std/assertNotEq#string","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertNotEq(string memory left, string memory right) internal;\nfunction assertNotEq(string memory left, string memory right, string memory err) internal;\n","title":"string","titles":[null,"assertNotEq","Signature"]},"1238":{"href":"/reference/forge-std/assertNotEq#bytes","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertNotEq(bytes memory left, bytes memory right) internal;\nfunction assertNotEq(bytes memory left, bytes memory right, string memory err) internal;\n","title":"bytes","titles":[null,"assertNotEq","Signature"]},"1239":{"href":"/reference/forge-std/assertNotEq#bool-1","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertNotEq(bool[] memory left, bool[] memory right) internal;\nfunction assertNotEq(bool[] memory left, bool[] memory right, string memory err) internal;\n","title":"bool[]","titles":[null,"assertNotEq","Signature"]},"1240":{"href":"/reference/forge-std/assertNotEq#uint256-1","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertNotEq(uint256[] memory left, uint256[] memory right) internal;\nfunction assertNotEq(uint256[] memory left, uint256[] memory right, string memory err) internal;\n","title":"uint256[]","titles":[null,"assertNotEq","Signature"]},"1241":{"href":"/reference/forge-std/assertNotEq#int256-1","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertNotEq(int256[] memory left, int256[] memory right) internal;\nfunction assertNotEq(int256[] memory left, int256[] memory right, string memory err) internal;\n","title":"int256[]","titles":[null,"assertNotEq","Signature"]},"1242":{"href":"/reference/forge-std/assertNotEq#address-1","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertNotEq(address[] memory left, address[] memory right) internal;\nfunction assertNotEq(address[] memory left, address[] memory right, string memory err) internal;\n","title":"address[]","titles":[null,"assertNotEq","Signature"]},"1243":{"href":"/reference/forge-std/assertNotEq#bytes32-1","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertNotEq(bytes32[] memory left, bytes32[] memory right) internal;\nfunction assertNotEq(bytes32[] memory left, bytes32[] memory right, string memory err) internal;\n","title":"bytes32[]","titles":[null,"assertNotEq","Signature"]},"1244":{"href":"/reference/forge-std/assertNotEq#string-1","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertNotEq(string[] memory left, string[] memory right) internal;\nfunction assertNotEq(string[] memory left, string[] memory right, string memory err) internal;\n","title":"string[]","titles":[null,"assertNotEq","Signature"]},"1245":{"href":"/reference/forge-std/assertNotEq#bytes-1","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertNotEq(bytes[] memory left, bytes[] memory right) internal;\nfunction assertNotEq(bytes[] memory left, bytes[] memory right, string memory err) internal;\n","title":"bytes[]","titles":[null,"assertNotEq","Signature"]},"1246":{"href":"/reference/forge-std/assertNotEq#legacy","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEq32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertNotEq32(bytes32 left, bytes32 right) internal;\nfunction assertNotEq32(bytes32 left, bytes32 right, string memory err) internal;\n","title":"Legacy","titles":[null,"assertNotEq","Signature"]},"1247":{"href":"/reference/forge-std/assertNotEq#description","html":"\n<p>Asserts <code>left</code> is not equal to <code>right</code>.</p>\n<p>Optionally includes an error message in the revert string.</p>\n","isPage":false,"text":"\nAsserts left is not equal to right.\nOptionally includes an error message in the revert string.\n","title":"Description","titles":[null,"assertNotEq"]},"1248":{"href":"/reference/forge-std/assertNotEq#see-also","html":"\n<ul>\n<li><a href=\"/reference/forge-std/assertNotEqDecimal.mdx\"><code>assertNotEqDecimal</code></a></li>\n<li><a href=\"/reference/forge-std/assertEq.mdx\"><code>assertEq</code></a></li>\n</ul>","isPage":false,"text":"\n\nassertNotEqDecimal\nassertEq\n","title":"SEE ALSO","titles":[null,"assertNotEq"]},"1249":{"href":"/reference/forge-std/assertNotEqDecimal#assertnoteqdecimal","html":"\n","isPage":true,"text":"\n","title":"assertNotEqDecimal","titles":[null]},"1250":{"href":"/reference/forge-std/assertNotEqDecimal#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEqDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEqDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEqDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertNotEqDecimal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> left</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> right</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) internal\nfunction assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string memory err) internal;\nfunction assertNotEqDecimal(int256 left, int256 right, uint256 decimals) internal;\nfunction assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string memory err) internal;\n","title":"Signature","titles":[null,"assertNotEqDecimal"]},"1251":{"href":"/reference/forge-std/assertNotEqDecimal#description","html":"\n<p>Asserts <code>left</code> is not equal to <code>right</code>.</p>\n<p><code>left</code> and <code>right</code> are formatted with decimals in the revert string.</p>\n<p>Optionally includes an error message in the revert string.</p>\n","isPage":false,"text":"\nAsserts left is not equal to right.\nleft and right are formatted with decimals in the revert string.\nOptionally includes an error message in the revert string.\n","title":"Description","titles":[null,"assertNotEqDecimal"]},"1252":{"href":"/reference/forge-std/assertNotEqDecimal#see-also","html":"\n<ul>\n<li><a href=\"/reference/forge-std/assertNotEq.mdx\"><code>assertNotEq</code></a></li>\n</ul>","isPage":false,"text":"\n\nassertNotEq\n","title":"SEE ALSO","titles":[null,"assertNotEqDecimal"]},"1253":{"href":"/reference/forge-std/assertTrue#asserttrue","html":"\n","isPage":true,"text":"\n","title":"assertTrue","titles":[null]},"1254":{"href":"/reference/forge-std/assertTrue#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertTrue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assertTrue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assertTrue(bool data) internal;\nfunction assertTrue(bool data, string memory err) internal;\n","title":"Signature","titles":[null,"assertTrue"]},"1255":{"href":"/reference/forge-std/assertTrue#description","html":"\n<p>Asserts <code>data</code> is true.</p>\n<p>Optionally includes an error message in the revert string.</p>\n","isPage":false,"text":"\nAsserts data is true.\nOptionally includes an error message in the revert string.\n","title":"Description","titles":[null,"assertTrue"]},"1256":{"href":"/reference/forge-std/assertTrue#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> success </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fun</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertTrue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(success);</span></span></code></pre>\n","isPage":false,"text":"\nbool success = contract.fun();\nassertTrue(success);\n","title":"Examples","titles":[null,"assertTrue"]},"1257":{"href":"/reference/forge-std/assertTrue#see-also","html":"\n<ul>\n<li><a href=\"/reference/forge-std/assertFalse.mdx\"><code>assertFalse</code></a></li>\n</ul>","isPage":false,"text":"\n\nassertFalse\n","title":"SEE ALSO","titles":[null,"assertTrue"]},"1258":{"href":"/reference/forge-std/assertionError#assertionerror","html":"\n","isPage":true,"text":"\n","title":"assertionError","titles":[null]},"1259":{"href":"/reference/forge-std/assertionError#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stdError.assertionError</span></span></code></pre>\n","isPage":false,"text":"\nstdError.assertionError\n","title":"Signature","titles":[null,"assertionError"]},"1260":{"href":"/reference/forge-std/assertionError#description","html":"\n<p>The internal Solidity error when an <code>assert</code> fails.</p>","isPage":false,"text":"\nThe internal Solidity error when an assert fails.","title":"Description","titles":[null,"assertionError"]},"1261":{"href":"/reference/forge-std/assume-no-precompiles#assumenotprecompile","html":"\n","isPage":true,"text":"\n","title":"assumeNotPrecompile","titles":[null]},"1262":{"href":"/reference/forge-std/assume-no-precompiles#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assumeNotPrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> addr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assumeNotPrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> addr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> chainid</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assumeNotPrecompile(address addr) public;\nfunction assumeNotPrecompile(address addr, uint256 chainid) public;\n","title":"Signature","titles":[null,"assumeNotPrecompile"]},"1263":{"href":"/reference/forge-std/assume-no-precompiles#description","html":"\n<p>Uses <a href=\"/reference/cheatcodes/assume.mdx\"><code>assume</code></a> to filter precompile addresses from the fuzz tests.</p>\n<p>Optionally, a <code>chainid</code> may be specified to filter known precompiles on the respective chain.</p>\n","isPage":false,"text":"\nUses assume to filter precompile addresses from the fuzz tests.\nOptionally, a chainid may be specified to filter known precompiles on the respective chain.\n","title":"Description","titles":[null,"assumeNotPrecompile"]},"1264":{"href":"/reference/forge-std/assume-no-precompiles#registry","html":"\n<p>These are all the precompile addresses known to the <code>assumeNotPrecompile</code> functions.</p>\n<table><thead><tr><th>Chain ID</th><th>Address</th><th>Name</th></tr></thead><tbody><tr><td>ALL</td><td><code>0x01</code></td><td>ECRecover</td></tr><tr><td>ALL</td><td><code>0x02</code></td><td>SHA-256</td></tr><tr><td>ALL</td><td><code>0x03</code></td><td>RIPEMD-160</td></tr><tr><td>ALL</td><td><code>0x04</code></td><td>Identity</td></tr><tr><td>ALL</td><td><code>0x05</code></td><td>ModExp</td></tr><tr><td>ALL</td><td><code>0x06</code></td><td>ECAdd</td></tr><tr><td>ALL</td><td><code>0x07</code></td><td>ECMul</td></tr><tr><td>ALL</td><td><code>0x08</code></td><td>ECPairing</td></tr><tr><td>ALL</td><td><code>0x09</code></td><td>Blake2F</td></tr><tr><td>ALL</td><td><code>0x0a</code></td><td>PointEvaluation</td></tr><tr><td>10, 420</td><td><code>0x4200000000000000000000000000000000000016</code></td><td>L2ToL1MessagePasser</td></tr><tr><td>10, 420</td><td><code>0x4200000000000000000000000000000000000002</code></td><td>DeployerWhitelist</td></tr><tr><td>10, 420</td><td><code>0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000</code></td><td>LegacyERC20ETH</td></tr><tr><td>10, 420</td><td><code>0x4200000000000000000000000000000000000006</code></td><td>WETH9</td></tr><tr><td>10, 420</td><td><code>0x4200000000000000000000000000000000000007</code></td><td>L2CrossDomainMessenger</td></tr><tr><td>10, 420</td><td><code>0x4200000000000000000000000000000000000010</code></td><td>L2StandardBridge</td></tr><tr><td>10, 420</td><td><code>0x4200000000000000000000000000000000000011</code></td><td>SequencerFeeVault</td></tr><tr><td>10, 420</td><td><code>0x4200000000000000000000000000000000000012</code></td><td>OptimismMintableERC20Factory</td></tr><tr><td>10, 420</td><td><code>0x4200000000000000000000000000000000000013</code></td><td>L1BlockNumber</td></tr><tr><td>10, 420</td><td><code>0x420000000000000000000000000000000000000F</code></td><td>GasPriceOracle</td></tr><tr><td>10, 420</td><td><code>0x4200000000000000000000000000000000000015</code></td><td>L1Block</td></tr><tr><td>10, 420</td><td><code>0x4200000000000000000000000000000000000042</code></td><td>GovernanceToken</td></tr><tr><td>10, 420</td><td><code>0x4200000000000000000000000000000000000000</code></td><td>LegacyMessagePasser</td></tr><tr><td>10, 420</td><td><code>0x4200000000000000000000000000000000000014</code></td><td>L2ERC721Bridge</td></tr><tr><td>10, 420</td><td><code>0x4200000000000000000000000000000000000017</code></td><td>OptimismMintableERC721Factory</td></tr><tr><td>10, 420</td><td><code>0x4200000000000000000000000000000000000018</code></td><td>ProxyAdmin</td></tr><tr><td>42161, 421613</td><td><code>0x0000000000000000000000000000000000000064</code></td><td>ArbSys</td></tr><tr><td>42161, 421613</td><td><code>0x000000000000000000000000000000000000006E</code></td><td>ArbRetryableTx</td></tr><tr><td>42161, 421613</td><td><code>0x000000000000000000000000000000000000006C</code></td><td>ArbGasInfo</td></tr><tr><td>42161, 421613</td><td><code>0x0000000000000000000000000000000000000066</code></td><td>ArbAddressTable</td></tr><tr><td>42161, 421613</td><td><code>0x000000000000000000000000000000000000006F</code></td><td>ArbStatistics</td></tr><tr><td>42161, 421613</td><td><code>0x00000000000000000000000000000000000000C8</code></td><td>NodeInterface</td></tr><tr><td>42161, 421613</td><td><code>0x0000000000000000000000000000000000000067</code></td><td>ArbBLS</td></tr><tr><td>42161, 421613</td><td><code>0x0000000000000000000000000000000000000065</code></td><td>ArbInfo</td></tr><tr><td>42161, 421613</td><td><code>0x000000000000000000000000000000000000006D</code></td><td>ArbAggregator</td></tr><tr><td>42161, 421613</td><td><code>0x0000000000000000000000000000000000000068</code></td><td>ArbFunctionTable</td></tr><tr><td>433114, 43113</td><td><code>0x0200000000000000000000000000000000000000</code></td><td>ContractDeployerAllowListAddress</td></tr><tr><td>433114, 43113</td><td><code>0x0200000000000000000000000000000000000001</code></td><td>ContractNativeMinterAddress</td></tr><tr><td>433114, 43113</td><td><code>0x0200000000000000000000000000000000000002</code></td><td>TxAllowListAddress</td></tr><tr><td>433114, 43113</td><td><code>0x0200000000000000000000000000000000000003</code></td><td>FeeConfigManagerAddress</td></tr><tr><td>ALL</td><td><code>0x4e59b44847b379578588920cA78FbF26c0B4956C</code></td><td>(Foundry) Create2Deployer</td></tr><tr><td>ALL</td><td><code>0x7109709ECfa91a80626fF3989D68f67F5b1DD12D</code></td><td>(Foundry) VM</td></tr><tr><td>ALL</td><td><code>0x000000000000000000636F6e736F6c652e6c6f67</code></td><td>(Foundry) Console</td></tr></tbody></table>\n","isPage":false,"text":"\nThese are all the precompile addresses known to the assumeNotPrecompile functions.\nChain IDAddressNameALL0x01ECRecoverALL0x02SHA-256ALL0x03RIPEMD-160ALL0x04IdentityALL0x05ModExpALL0x06ECAddALL0x07ECMulALL0x08ECPairingALL0x09Blake2FALL0x0aPointEvaluation10, 4200x4200000000000000000000000000000000000016L2ToL1MessagePasser10, 4200x4200000000000000000000000000000000000002DeployerWhitelist10, 4200xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000LegacyERC20ETH10, 4200x4200000000000000000000000000000000000006WETH910, 4200x4200000000000000000000000000000000000007L2CrossDomainMessenger10, 4200x4200000000000000000000000000000000000010L2StandardBridge10, 4200x4200000000000000000000000000000000000011SequencerFeeVault10, 4200x4200000000000000000000000000000000000012OptimismMintableERC20Factory10, 4200x4200000000000000000000000000000000000013L1BlockNumber10, 4200x420000000000000000000000000000000000000FGasPriceOracle10, 4200x4200000000000000000000000000000000000015L1Block10, 4200x4200000000000000000000000000000000000042GovernanceToken10, 4200x4200000000000000000000000000000000000000LegacyMessagePasser10, 4200x4200000000000000000000000000000000000014L2ERC721Bridge10, 4200x4200000000000000000000000000000000000017OptimismMintableERC721Factory10, 4200x4200000000000000000000000000000000000018ProxyAdmin42161, 4216130x0000000000000000000000000000000000000064ArbSys42161, 4216130x000000000000000000000000000000000000006EArbRetryableTx42161, 4216130x000000000000000000000000000000000000006CArbGasInfo42161, 4216130x0000000000000000000000000000000000000066ArbAddressTable42161, 4216130x000000000000000000000000000000000000006FArbStatistics42161, 4216130x00000000000000000000000000000000000000C8NodeInterface42161, 4216130x0000000000000000000000000000000000000067ArbBLS42161, 4216130x0000000000000000000000000000000000000065ArbInfo42161, 4216130x000000000000000000000000000000000000006DArbAggregator42161, 4216130x0000000000000000000000000000000000000068ArbFunctionTable433114, 431130x0200000000000000000000000000000000000000ContractDeployerAllowListAddress433114, 431130x0200000000000000000000000000000000000001ContractNativeMinterAddress433114, 431130x0200000000000000000000000000000000000002TxAllowListAddress433114, 431130x0200000000000000000000000000000000000003FeeConfigManagerAddressALL0x4e59b44847b379578588920cA78FbF26c0B4956C(Foundry) Create2DeployerALL0x7109709ECfa91a80626fF3989D68f67F5b1DD12D(Foundry) VMALL0x000000000000000000636F6e736F6c652e6c6f67(Foundry) Console\n","title":"Registry","titles":[null,"assumeNotPrecompile"]},"1265":{"href":"/reference/forge-std/assume-no-precompiles#reserved-ranges","html":"\n<p>Some chains also include reserved ranges for precompile contracts.</p>\n<table><thead><tr><th>Chain ID</th><th>Start</th><th>Stop</th></tr></thead><tbody><tr><td>ALL</td><td><code>0x00</code></td><td><code>0xff</code></td></tr><tr><td>433114, 43113</td><td><code>0x0100000000000000000000000000000000000000</code></td><td><code>0x01000000000000000000000000000000000000ff</code></td></tr><tr><td>433114, 43113</td><td><code>0x0200000000000000000000000000000000000000</code></td><td><code>0x02000000000000000000000000000000000000ff</code></td></tr><tr><td>433114, 43113</td><td><code>0x0300000000000000000000000000000000000000</code></td><td><code>0x03000000000000000000000000000000000000ff</code></td></tr></tbody></table>","isPage":false,"text":"\nSome chains also include reserved ranges for precompile contracts.\nChain IDStartStopALL0x000xff433114, 431130x01000000000000000000000000000000000000000x01000000000000000000000000000000000000ff433114, 431130x02000000000000000000000000000000000000000x02000000000000000000000000000000000000ff433114, 431130x03000000000000000000000000000000000000000x03000000000000000000000000000000000000ff","title":"Reserved Ranges","titles":[null,"assumeNotPrecompile"]},"1266":{"href":"/reference/forge-std/assume-payable#assumepayable","html":"\n","isPage":true,"text":"\n","title":"assumePayable","titles":[null]},"1267":{"href":"/reference/forge-std/assume-payable#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> assumePayable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> addr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction assumePayable(address addr) public;\n","title":"Signature","titles":[null,"assumePayable"]},"1268":{"href":"/reference/forge-std/assume-payable#description","html":"\n<p>Uses <a href=\"/reference/cheatcodes/assume.mdx\"><code>assume</code></a> to filter addresses that reject Ether transfers.</p>\n<p>This makes an external call to the specified <code>addr</code> with a no calldata and checks <code>assume</code> against the success of the call.</p>","isPage":false,"text":"\nUses assume to filter addresses that reject Ether transfers.\nThis makes an external call to the specified addr with a no calldata and checks assume against the success of the call.","title":"Description","titles":[null,"assumePayable"]},"1269":{"href":"/reference/forge-std/bound#bound","html":"\n","isPage":true,"text":"\n","title":"bound","titles":[null]},"1270":{"href":"/reference/forge-std/bound#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> bound</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> x</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> min</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> max</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction bound(uint256 x, uint256 min, uint256 max) public returns (uint256 result);\n","title":"Signature","titles":[null,"bound"]},"1271":{"href":"/reference/forge-std/bound#description","html":"\n<p>A mathematical function for wrapping inputs of fuzz tests into a certain range.</p>\n<p>You can use it instead of the <code>assume</code> cheatcode to get better performance in some cases. Read more <a href=\"/reference/cheatcodes/assume.mdx\">here</a>.</p>\n","isPage":false,"text":"\nA mathematical function for wrapping inputs of fuzz tests into a certain range.\nYou can use it instead of the assume cheatcode to get better performance in some cases. Read more here.\n","title":"Description","titles":[null,"bound"]},"1272":{"href":"/reference/forge-std/bound#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">input </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> bound</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(input, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">99</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">101</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>Returns <code>99</code> for input <code>0</code>.</p>\n<br/>\n<p>Returns <code>100</code> for input <code>1</code>.</p>\n<br/>\n<p>Returns <code>101</code> for input <code>2</code>.</p>\n<br/>\n<p>Returns <code>99</code> for input <code>3</code>.</p>\n<br/>\n<p>And so on.</p>","isPage":false,"text":"\ninput = bound(input, 99, 101);\nReturns 99 for input 0.\n\nReturns 100 for input 1.\n\nReturns 101 for input 2.\n\nReturns 99 for input 3.\n\nAnd so on.","title":"Examples","titles":[null,"bound"]},"1273":{"href":"/reference/forge-std/change-prank#changeprank","html":"\n","isPage":true,"text":"\n","title":"changePrank","titles":[null]},"1274":{"href":"/reference/forge-std/change-prank#status","html":"\n<p><code>changePrank</code> is deprecated.</p>\n","isPage":false,"text":"\nchangePrank is deprecated.\n","title":"Status","titles":[null,"changePrank"]},"1275":{"href":"/reference/forge-std/change-prank#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> changePrank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> who</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction changePrank(address who) internal;\n","title":"Signature","titles":[null,"changePrank"]},"1276":{"href":"/reference/forge-std/change-prank#description","html":"\n<p>Stops the active prank with <code>stopPrank</code> and passes address to <code>startPrank</code>.</p>\n<p>Useful for starting a global prank in the <code>setUp</code> function and deactivating it in certain tests.</p>","isPage":false,"text":"\nStops the active prank with stopPrank and passes address to startPrank.\nUseful for starting a global prank in the setUp function and deactivating it in certain tests.","title":"Description","titles":[null,"changePrank"]},"1277":{"href":"/reference/forge-std/checked_write#checked_write","html":"\n","isPage":true,"text":"\n","title":"checked_write","titles":[null]},"1278":{"href":"/reference/forge-std/checked_write#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> checked_write</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> who</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> checked_write</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> amt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> checked_write</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> write</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> checked_write</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> checked_write_int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> val</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction checked_write(StdStorage storage self, address who) internal;\nfunction checked_write(StdStorage storage self, uint256 amt) internal;\nfunction checked_write(StdStorage storage self, bool write) internal;\nfunction checked_write(StdStorage storage self, bytes32 set) internal;\nfunction checked_write_int(StdStorage storage self, int256 val) internal;\n","title":"Signature","titles":[null,"checked_write"]},"1279":{"href":"/reference/forge-std/checked_write#description","html":"\n<p>Sets the data to be written to the storage slot(s).</p>\n<p>Reverts with a message if unsuccessful.</p>","isPage":false,"text":"\nSets the data to be written to the storage slot(s).\nReverts with a message if unsuccessful.","title":"Description","titles":[null,"checked_write"]},"1280":{"href":"/reference/forge-std/compute-create-address#computecreateaddress","html":"\n","isPage":true,"text":"\n","title":"computeCreateAddress","titles":[null]},"1281":{"href":"/reference/forge-std/compute-create-address#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> computeCreateAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> deployer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> nonce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nfunction computeCreateAddress(address deployer, uint256 nonce) internal pure returns (address)\n","title":"Signature","titles":[null,"computeCreateAddress"]},"1282":{"href":"/reference/forge-std/compute-create-address#description","html":"\n<p>Compute the address a contract will be deployed at for a given deployer address and nonce. Useful to precalculate the address a contract <strong>will</strong> be deployed at.</p>\n","isPage":false,"text":"\nCompute the address a contract will be deployed at for a given deployer address and nonce. Useful to precalculate the address a contract will be deployed at.\n","title":"Description","titles":[null,"computeCreateAddress"]},"1283":{"href":"/reference/forge-std/compute-create-address#example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> governanceAddress </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> computeCreateAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// this contract requires a governance contract which hasn&#x27;t been deployed yet</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Contract </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(governanceAddress);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// now we deploy it</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Governance governance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Governance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// assuming `contract` has a `governance()` accessor</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(governanceAddress, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(governance)); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// [PASS]</span></span></code></pre>","isPage":false,"text":"\naddress governanceAddress = computeCreateAddress(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266, 1);\n \n// this contract requires a governance contract which hasn&#x27;t been deployed yet\nContract contract = new Contract(governanceAddress);\n// now we deploy it\nGovernance governance = new Governance(contract);\n \n// assuming `contract` has a `governance()` accessor\nassertEq(governanceAddress, address(governance)); // [PASS]","title":"Example","titles":[null,"computeCreateAddress"]},"1284":{"href":"/reference/forge-std/console-log#console-logging","html":"\n<ul>\n<li>Similar to Hardhat&#x27;s console functions.</li>\n<li>You can use it in calls and transactions. It also works with view and pure functions.</li>\n<li>It always works, regardless of the call or transaction failing or being successful.</li>\n<li>To use it you need import it:\n<ul>\n<li><code>import {console} from &quot;forge-std/console.sol&quot;;</code></li>\n</ul>\n</li>\n<li>You can call console.log with up to 4 parameters in any order of following types:\n<ul>\n<li><code>uint</code></li>\n<li><code>string</code></li>\n<li><code>bool</code></li>\n<li><code>address</code></li>\n</ul>\n</li>\n<li>There&#x27;s also the single parameter API for the types above, and additionally bytes, bytes1... up to bytes32:\n<ul>\n<li><code>console.logInt(int i)</code></li>\n<li><code>console.logUint(uint i)</code></li>\n<li><code>console.logString(string memory s)</code></li>\n<li><code>console.logBool(bool b)</code></li>\n<li><code>console.logAddress(address a)</code></li>\n<li><code>console.logBytes(bytes memory b)</code></li>\n<li><code>console.logBytes1(bytes1 b)</code></li>\n<li><code>console.logBytes2(bytes2 b)</code></li>\n<li>...</li>\n<li><code>console.logBytes32(bytes32 b)</code></li>\n</ul>\n</li>\n<li>console.log implements the same formatting options that can be found in Hardhat&#x27;s console.log.\n<ul>\n<li>Example: <code>console.log(&quot;Changing owner from %s to %s&quot;, currentOwner, newOwner)</code></li>\n</ul>\n</li>\n<li>console.log is implemented in standard Solidity and it is compatible Anvil and Hardhat Networks.</li>\n<li>console.log calls can run in other networks, like mainnet, kovan, ropsten, etc. They do nothing in those networks, but do spend a minimal amount of gas.</li>\n</ul>\n","isPage":true,"text":"\n\nSimilar to Hardhat&#x27;s console functions.\nYou can use it in calls and transactions. It also works with view and pure functions.\nIt always works, regardless of the call or transaction failing or being successful.\nTo use it you need import it:\n\nimport {console} from &quot;forge-std/console.sol&quot;;\n\n\nYou can call console.log with up to 4 parameters in any order of following types:\n\nuint\nstring\nbool\naddress\n\n\nThere&#x27;s also the single parameter API for the types above, and additionally bytes, bytes1... up to bytes32:\n\nconsole.logInt(int i)\nconsole.logUint(uint i)\nconsole.logString(string memory s)\nconsole.logBool(bool b)\nconsole.logAddress(address a)\nconsole.logBytes(bytes memory b)\nconsole.logBytes1(bytes1 b)\nconsole.logBytes2(bytes2 b)\n...\nconsole.logBytes32(bytes32 b)\n\n\nconsole.log implements the same formatting options that can be found in Hardhat&#x27;s console.log.\n\nExample: console.log(&quot;Changing owner from %s to %s&quot;, currentOwner, newOwner)\n\n\nconsole.log is implemented in standard Solidity and it is compatible Anvil and Hardhat Networks.\nconsole.log calls can run in other networks, like mainnet, kovan, ropsten, etc. They do nothing in those networks, but do spend a minimal amount of gas.\n\n","title":"Console Logging","titles":[null]},"1285":{"href":"/reference/forge-std/console-log#consolelogformatargs","html":"\n<p>The <code>console.log()</code> method prints a formatted string using the first argument as a printf-like format string which can contain zero or more format specifiers. Each specifier is replaced with the converted value from the corresponding argument. Supported specifiers are:</p>\n<ul>\n<li><code>%s</code>: String will be used to convert all values to a human-readable string. <code>uint256</code>, <code>int256</code> and <code>bytes</code> values are converted to their <code>0x</code> hex encoded values.</li>\n<li><code>%d</code>: Number will be used to convert all values to a human-readable string. This is identical to <code>%s</code>.</li>\n<li><code>%i</code>: Works the same way as <code>%d</code>.</li>\n<li><code>%e</code>: The exponential representation of a number. For <code>uint256</code> and <code>int256</code> types.</li>\n<li><code>%x</code>: The hexadecimal representation of a number. For <code>uint256</code> and <code>int256</code> types.</li>\n<li><code>%o</code>: Object. A string representation of an object with generic JavaScript-styled object formatting. For solidity types, this basically surround the string representation of the value in single-quotes.</li>\n<li><code>%%</code>: single percent sign (&#x27;%&#x27;). This does not consume an argument.</li>\n<li>Returns: <code>&lt;string&gt;</code> The formatted string</li>\n</ul>\n<p>If a specifier does not have a corresponding argument, it is not replaced:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;%s:%s&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;foo&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns: &quot;foo:%s&quot;</span></span></code></pre>\n<p>Values that are not part of the format string are formatted using as a human-readable string representation.</p>\n<p>If there are more arguments passed to the console.log() method than the number of specifiers, the extra arguments are concatenated to the returned string, separated by spaces:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;%s:%s&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;foo&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;bar&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;baz&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns: &quot;foo:bar baz&quot;</span></span></code></pre>\n<p>If only one argument is passed to console.log(), it is returned as it is without any formatting:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;%% %s&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Returns: &quot;%% %s&quot;</span></span></code></pre>\n<p>The String format specifier (<code>%s</code>) should be used in most cases unless specific functionality is needed from other format specifiers.</p>","isPage":false,"text":"\nThe console.log() method prints a formatted string using the first argument as a printf-like format string which can contain zero or more format specifiers. Each specifier is replaced with the converted value from the corresponding argument. Supported specifiers are:\n\n%s: String will be used to convert all values to a human-readable string. uint256, int256 and bytes values are converted to their 0x hex encoded values.\n%d: Number will be used to convert all values to a human-readable string. This is identical to %s.\n%i: Works the same way as %d.\n%e: The exponential representation of a number. For uint256 and int256 types.\n%x: The hexadecimal representation of a number. For uint256 and int256 types.\n%o: Object. A string representation of an object with generic JavaScript-styled object formatting. For solidity types, this basically surround the string representation of the value in single-quotes.\n%%: single percent sign (&#x27;%&#x27;). This does not consume an argument.\nReturns: &lt;string&gt; The formatted string\n\nIf a specifier does not have a corresponding argument, it is not replaced:\nconsole.log(&quot;%s:%s&quot;, &quot;foo&quot;);\n// Returns: &quot;foo:%s&quot;\nValues that are not part of the format string are formatted using as a human-readable string representation.\nIf there are more arguments passed to the console.log() method than the number of specifiers, the extra arguments are concatenated to the returned string, separated by spaces:\nconsole.log(&quot;%s:%s&quot;, &quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;);\n// Returns: &quot;foo:bar baz&quot;\nIf only one argument is passed to console.log(), it is returned as it is without any formatting:\nconsole.log(&quot;%% %s&quot;);\n// Returns: &quot;%% %s&quot;\nThe String format specifier (%s) should be used in most cases unless specific functionality is needed from other format specifiers.","title":"console.log(format[,...args])","titles":[null,"Console Logging"]},"1286":{"href":"/reference/forge-std/deal#deal","html":"\n","isPage":true,"text":"\n","title":"deal","titles":[null]},"1287":{"href":"/reference/forge-std/deal#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> to</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> give</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> token</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> to</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> give</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> token</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> to</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> give</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> adjust</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction deal(address to, uint256 give) public;\nfunction deal(address token, address to, uint256 give) public;\nfunction deal(address token, address to, uint256 give, bool adjust) public;\n","title":"Signature","titles":[null,"deal"]},"1288":{"href":"/reference/forge-std/deal#description","html":"\n<p>A wrapper around the <a href=\"/reference/cheatcodes/deal.mdx\"><code>deal</code></a> cheatcode that also works for most ERC-20 tokens.</p>\n<p>If the alternative signature of <code>deal</code> is used, adjusts the token&#x27;s total supply after setting the balance.</p>\n","isPage":false,"text":"\nA wrapper around the deal cheatcode that also works for most ERC-20 tokens.\nIf the alternative signature of deal is used, adjusts the token&#x27;s total supply after setting the balance.\n","title":"Description","titles":[null,"deal"]},"1289":{"href":"/reference/forge-std/deal#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(dai), alice, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10000e18</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(dai.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10000e18</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>","isPage":false,"text":"\ndeal(address(dai), alice, 10000e18);\nassertEq(dai.balanceOf(alice), 10000e18);","title":"Examples","titles":[null,"deal"]},"1290":{"href":"/reference/forge-std/delta#delta","html":"\n","isPage":true,"text":"\n","title":"delta","titles":[null]},"1291":{"href":"/reference/forge-std/delta#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> delta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> delta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nfunction delta(uint256 a, uint256 b) internal pure returns (uint256)\nfunction delta(int256 a, int256 b) internal pure returns (uint256)\n","title":"Signature","titles":[null,"delta"]},"1292":{"href":"/reference/forge-std/delta#description","html":"\n<p>Returns the difference between two numbers in absolute value.</p>\n","isPage":false,"text":"\nReturns the difference between two numbers in absolute value.\n","title":"Description","titles":[null,"delta"]},"1293":{"href":"/reference/forge-std/delta#example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> four </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stdMath.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">delta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>","isPage":false,"text":"\nuint256 four = stdMath.delta(-1, 3);","title":"Example","titles":[null,"delta"]},"1294":{"href":"/reference/forge-std/deployCode#deploycode","html":"\n","isPage":true,"text":"\n","title":"deployCode","titles":[null]},"1295":{"href":"/reference/forge-std/deployCode#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deployCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> what</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deployCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> what</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> args</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deployCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> what</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> val</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deployCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> what</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> args</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> val</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction deployCode(string memory what) public returns (address);\nfunction deployCode(string memory what, bytes memory args) public returns (address);\nfunction deployCode(string memory what, uint256 val) public returns (address);\nfunction deployCode(string memory what, bytes memory args, uint256 val) public returns (address);\n","title":"Signature","titles":[null,"deployCode"]},"1296":{"href":"/reference/forge-std/deployCode#description","html":"\n<p>Deploys a contract by fetching the contract bytecode from the artifacts directory.</p>\n<p>The calldata parameter can either be in the form <code>ContractFile.sol</code> (if the filename and contract name are the same), <code>ContractFile.sol:ContractName</code>, or the path to an artifact, relative to the root of your project.</p>\n<p>Values can also be passed by using the <code>val</code> parameter. This is necessary if you need to send ETH on construction.</p>\n","isPage":false,"text":"\nDeploys a contract by fetching the contract bytecode from the artifacts directory.\nThe calldata parameter can either be in the form ContractFile.sol (if the filename and contract name are the same), ContractFile.sol:ContractName, or the path to an artifact, relative to the root of your project.\nValues can also be passed by using the val parameter. This is necessary if you need to send ETH on construction.\n","title":"Description","titles":[null,"deployCode"]},"1297":{"href":"/reference/forge-std/deployCode#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> deployment </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deployCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MyContract.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(arg1, arg2));</span></span></code></pre>\n","isPage":false,"text":"\naddress deployment = deployCode(&quot;MyContract.sol&quot;, abi.encode(arg1, arg2));\n","title":"Examples","titles":[null,"deployCode"]},"1298":{"href":"/reference/forge-std/deployCode#see-also","html":"\n<p>Forge Standard Library</p>\n<ul>\n<li><a href=\"/reference/forge-std/deployCodeTo.mdx\"><code>deployCodeTo</code></a></li>\n</ul>","isPage":false,"text":"\nForge Standard Library\n\ndeployCodeTo\n","title":"SEE ALSO","titles":[null,"deployCode"]},"1299":{"href":"/reference/forge-std/deployCodeTo#deploycodeto","html":"\n","isPage":true,"text":"\n","title":"deployCodeTo","titles":[null]},"1300":{"href":"/reference/forge-std/deployCodeTo#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deployCodeTo</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> what</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> where</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> virtual</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deployCodeTo</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> what</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> args</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> where</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> virtual</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deployCodeTo</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> what</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> args</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> where</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> virtual</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction deployCodeTo(string memory what, address where) internal virtual;\nfunction deployCodeTo(string memory what, bytes memory args, address where) internal virtual;\nfunction deployCodeTo(string memory what, bytes memory args, uint256 value, address where) internal virtual;\n","title":"Signature","titles":[null,"deployCodeTo"]},"1301":{"href":"/reference/forge-std/deployCodeTo#description","html":"\n<p>Pseudo-deploys a contract to an arbitrary address by fetching the contract bytecode from the artifacts directory. This can be used to recreate the production environment.</p>\n<p>The calldata parameter can either be in the form <code>ContractFile.sol</code> (if the filename and contract name are the same), <code>ContractFile.sol:ContractName</code>, or the path to an artifact, relative to the root of your project.</p>\n<p>Values can also be passed by using the <code>value</code> parameter. This is necessary if you need to send ETH on construction.</p>\n","isPage":false,"text":"\nPseudo-deploys a contract to an arbitrary address by fetching the contract bytecode from the artifacts directory. This can be used to recreate the production environment.\nThe calldata parameter can either be in the form ContractFile.sol (if the filename and contract name are the same), ContractFile.sol:ContractName, or the path to an artifact, relative to the root of your project.\nValues can also be passed by using the value parameter. This is necessary if you need to send ETH on construction.\n","title":"Description","titles":[null,"deployCodeTo"]},"1302":{"href":"/reference/forge-std/deployCodeTo#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deployCodeTo</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;MyContract.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">abi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(arg1, arg2), arbitraryAddr);</span></span></code></pre>\n","isPage":false,"text":"\ndeployCodeTo(&quot;MyContract.sol&quot;, abi.encode(arg1, arg2), arbitraryAddr);\n","title":"Examples","titles":[null,"deployCodeTo"]},"1303":{"href":"/reference/forge-std/deployCodeTo#see-also","html":"\n<p>Forge Standard Library</p>\n<ul>\n<li><a href=\"/reference/forge-std/deployCode.mdx\"><code>deployCode</code></a></li>\n</ul>","isPage":false,"text":"\nForge Standard Library\n\ndeployCode\n","title":"SEE ALSO","titles":[null,"deployCodeTo"]},"1304":{"href":"/reference/forge-std/depth#depth","html":"\n","isPage":true,"text":"\n","title":"depth","titles":[null]},"1305":{"href":"/reference/forge-std/depth#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> depth</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _depth) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage);\n","title":"Signature","titles":[null,"depth"]},"1306":{"href":"/reference/forge-std/depth#description","html":"\n<p>Sets the position of the value in the <code>tuple</code> (e.g. inside a <code>struct</code>).</p>\n<p>Default value: <code>uint256(0)</code></p>","isPage":false,"text":"\nSets the position of the value in the tuple (e.g. inside a struct).\nDefault value: uint256(0)","title":"Description","titles":[null,"depth"]},"1307":{"href":"/reference/forge-std/derive-remember-key#deriverememberkey","html":"\n","isPage":true,"text":"\n","title":"deriveRememberKey","titles":[null]},"1308":{"href":"/reference/forge-std/derive-remember-key#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deriveRememberKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> mnemonic</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> index</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> who</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> privateKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nfunction deriveRememberKey(string memory mnemonic, uint32 index) internal returns (address who, uint256 privateKey)\n","title":"Signature","titles":[null,"deriveRememberKey"]},"1309":{"href":"/reference/forge-std/derive-remember-key#description","html":"\n<p>Derive a private key from a mnemonic and also store it in forge&#x27;s local wallet. Returns the address and private key.</p>\n","isPage":false,"text":"\nDerive a private key from a mnemonic and also store it in forge&#x27;s local wallet. Returns the address and private key.\n","title":"Description","titles":[null,"deriveRememberKey"]},"1310":{"href":"/reference/forge-std/derive-remember-key#example","html":"\n<p>Get a private key and address from the test mnemonic at path <code>m/44&#x27;/60&#x27;/0&#x27;/0/0</code>. Use them to sign some data and start broadcasting transactions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mnemonic </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;test test test test test test test test test test test junk&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> deployer, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> privateKey) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deriveRememberKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(mnemonic, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Signed by deployer&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> v, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> r, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> s) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sign</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(privateKey, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">hash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(deployer);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n<p>Get an address from the test mnemonic at path <code>m/44&#x27;/60&#x27;/0&#x27;/0/0</code> to start broadcasting transactions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> mnemonic </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;test test test test test test test test test test test junk&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> deployer, ) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deriveRememberKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(mnemonic, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(deployer);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopBroadcast</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n","isPage":false,"text":"\nGet a private key and address from the test mnemonic at path m/44&#x27;/60&#x27;/0&#x27;/0/0. Use them to sign some data and start broadcasting transactions:\nstring memory mnemonic = &quot;test test test test test test test test test test test junk&quot;;\n \n(address deployer, uint256 privateKey) = deriveRememberKey(mnemonic, 0);\n \nbytes32 hash = keccak256(&quot;Signed by deployer&quot;);\n(uint8 v, bytes32 r, bytes32 s) = vm.sign(privateKey, hash);\n \nvm.startBroadcast(deployer);\n...\nvm.stopBroadcast();\nGet an address from the test mnemonic at path m/44&#x27;/60&#x27;/0&#x27;/0/0 to start broadcasting transactions:\nstring memory mnemonic = &quot;test test test test test test test test test test test junk&quot;;\n \n(address deployer, ) = deriveRememberKey(mnemonic, 0);\n \nvm.startBroadcast(deployer);\n...\nvm.stopBroadcast();\n","title":"Example","titles":[null,"deriveRememberKey"]},"1311":{"href":"/reference/forge-std/derive-remember-key#see-also","html":"\n<p>Cheatcodes:</p>\n<ul>\n<li><a href=\"/reference/cheatcodes/derive-key.mdx\">deriveKey</a></li>\n<li><a href=\"/reference/cheatcodes/remember-key.mdx\">rememberKey</a></li>\n</ul>","isPage":false,"text":"\nCheatcodes:\n\nderiveKey\nrememberKey\n","title":"SEE ALSO","titles":[null,"deriveRememberKey"]},"1312":{"href":"/reference/forge-std/divisionError#divisionerror","html":"\n","isPage":true,"text":"\n","title":"divisionError","titles":[null]},"1313":{"href":"/reference/forge-std/divisionError#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stdError.divisionError</span></span></code></pre>\n","isPage":false,"text":"\nstdError.divisionError\n","title":"Signature","titles":[null,"divisionError"]},"1314":{"href":"/reference/forge-std/divisionError#description","html":"\n<p>The internal Solidity error when a division fails, e.g. division by zero.</p>","isPage":false,"text":"\nThe internal Solidity error when a division fails, e.g. division by zero.","title":"Description","titles":[null,"divisionError"]},"1315":{"href":"/reference/forge-std/enable_packed_slots#enable_packed_slots","html":"\n","isPage":true,"text":"\n","title":"enable_packed_slots","titles":[null]},"1316":{"href":"/reference/forge-std/enable_packed_slots#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> enable_packed_slots</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction enable_packed_slots(StdStorage storage self) internal returns (StdStorage storage);\n","title":"Signature","titles":[null,"enable_packed_slots"]},"1317":{"href":"/reference/forge-std/enable_packed_slots#description","html":"\n<p>Enables the usage of packed storage slots</p>\n","isPage":false,"text":"\nEnables the usage of packed storage slots\n","title":"Description","titles":[null,"enable_packed_slots"]},"1318":{"href":"/reference/forge-std/enable_packed_slots#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Write arbitrary balances even on gas-optimized contracts like AUSD</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stdstore</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">enable_packed_slots</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">target</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(_tokenAddress)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;balanceOf(address)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">with_key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(_to)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">checked_write</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        _amount</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    );</span></span></code></pre>","isPage":false,"text":"\n// Write arbitrary balances even on gas-optimized contracts like AUSD\nstdstore\n    .enable_packed_slots()\n    .target(_tokenAddress)\n    .sig(&quot;balanceOf(address)&quot;)\n    .with_key(_to)\n    .checked_write(\n        _amount\n    );","title":"Examples","titles":[null,"enable_packed_slots"]},"1319":{"href":"/reference/forge-std/encodeStorageError#encodestorageerror","html":"\n","isPage":true,"text":"\n","title":"encodeStorageError","titles":[null]},"1320":{"href":"/reference/forge-std/encodeStorageError#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stdError.encodeStorageError</span></span></code></pre>\n","isPage":false,"text":"\nstdError.encodeStorageError\n","title":"Signature","titles":[null,"encodeStorageError"]},"1321":{"href":"/reference/forge-std/encodeStorageError#description","html":"\n<p>The internal Solidity error when trying to access data in storage that is corrupted. Data cannot be corrupted unless assembly had been used.</p>","isPage":false,"text":"\nThe internal Solidity error when trying to access data in storage that is corrupted. Data cannot be corrupted unless assembly had been used.","title":"Description","titles":[null,"encodeStorageError"]},"1322":{"href":"/reference/forge-std/enumConversionError#enumconversionerror","html":"\n","isPage":true,"text":"\n","title":"enumConversionError","titles":[null]},"1323":{"href":"/reference/forge-std/enumConversionError#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stdError.enumConversionError</span></span></code></pre>\n","isPage":false,"text":"\nstdError.enumConversionError\n","title":"Signature","titles":[null,"enumConversionError"]},"1324":{"href":"/reference/forge-std/enumConversionError#description","html":"\n<p>The internal Solidity error when trying to convert a number to a variant of an enum, if the number is larger than the number of variants in the enum (counting from 0).</p>","isPage":false,"text":"\nThe internal Solidity error when trying to convert a number to a variant of an enum, if the number is larger than the number of variants in the enum (counting from 0).","title":"Description","titles":[null,"enumConversionError"]},"1325":{"href":"/reference/forge-std/fail#fail","html":"\n","isPage":true,"text":"\n","title":"fail","titles":[null]},"1326":{"href":"/reference/forge-std/fail#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fail</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> err</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> virtual</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction fail(string memory err) internal virtual;\n","title":"Signature","titles":[null,"fail"]},"1327":{"href":"/reference/forge-std/fail#description","html":"\n<p>Fail a test with a message if a certain branch or execution point is hit.</p>\n","isPage":false,"text":"\nFail a test with a message if a certain branch or execution point is hit.\n","title":"Description","titles":[null,"fail"]},"1328":{"href":"/reference/forge-std/fail#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> place; place </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">i){</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(game.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">leaderboard</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(place) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    fail</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Not in the top 10.&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>","isPage":false,"text":"\nfunction test() external {\n    for(uint256 place; place &lt; 10; ++i){\n        if(game.leaderboard(place) == address(this)) return;\n    }\n    fail(&quot;Not in the top 10.&quot;);\n}","title":"Examples","titles":[null,"fail"]},"1329":{"href":"/reference/forge-std/find#find","html":"\n","isPage":true,"text":"\n","title":"find","titles":[null]},"1330":{"href":"/reference/forge-std/find#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> find</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction find(StdStorage storage self) internal returns (uint256);\n","title":"Signature","titles":[null,"find"]},"1331":{"href":"/reference/forge-std/find#description","html":"\n<p>Finds an arbitrary storage slot given <a href=\"/reference/forge-std/target.mdx\"><code>target</code></a>, <a href=\"/reference/forge-std/sig.mdx\"><code>sig</code></a>, <a href=\"/reference/forge-std/with_key.mdx\"><code>with_key</code></a>(s), and <a href=\"/reference/forge-std/depth.mdx\"><code>depth</code></a>.</p>\n<p>Reverts with a message if unsuccessful.</p>","isPage":false,"text":"\nFinds an arbitrary storage slot given target, sig, with_key(s), and depth.\nReverts with a message if unsuccessful.","title":"Description","titles":[null,"find"]},"1332":{"href":"/reference/forge-std/hoax#hoax","html":"\n","isPage":true,"text":"\n","title":"hoax","titles":[null]},"1333":{"href":"/reference/forge-std/hoax#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> hoax</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> who</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> hoax</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> who</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> give</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> hoax</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> who</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> origin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> hoax</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> who</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> origin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> give</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction hoax(address who) public;\nfunction hoax(address who, uint256 give) public;\nfunction hoax(address who, address origin) public;\nfunction hoax(address who, address origin, uint256 give) public;\n","title":"Signature","titles":[null,"hoax"]},"1334":{"href":"/reference/forge-std/hoax#description","html":"\n<p>Sets up a <a href=\"/reference/cheatcodes/prank.mdx\"><code>prank</code></a> from an address that has some ether.</p>\n<p>If the balance is not specified, it will be set to 2^128 wei.</p>","isPage":false,"text":"\nSets up a prank from an address that has some ether.\nIf the balance is not specified, it will be set to 2^128 wei.","title":"Description","titles":[null,"hoax"]},"1335":{"href":"/reference/forge-std/indexOOBError#indexooberror","html":"\n","isPage":true,"text":"\n","title":"indexOOBError","titles":[null]},"1336":{"href":"/reference/forge-std/indexOOBError#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stdError.indexOOBError</span></span></code></pre>\n","isPage":false,"text":"\nstdError.indexOOBError\n","title":"Signature","titles":[null,"indexOOBError"]},"1337":{"href":"/reference/forge-std/indexOOBError#description","html":"\n<p>The internal Solidity error when trying to access an element of an array that is out of bounds.</p>\n<p>Will not work for empty arrays in external contracts. For those, use <code>expectRevert</code> without any arguments.</p>","isPage":false,"text":"\nThe internal Solidity error when trying to access an element of an array that is out of bounds.\nWill not work for empty arrays in external contracts. For those, use expectRevert without any arguments.","title":"Description","titles":[null,"indexOOBError"]},"1338":{"href":"/reference/forge-std/make-addr-and-key#makeaddrandkey","html":"\n","isPage":true,"text":"\n","title":"makeAddrAndKey","titles":[null]},"1339":{"href":"/reference/forge-std/make-addr-and-key#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> makeAddrAndKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> addr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> privateKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction makeAddrAndKey(string memory name) internal returns(address addr, uint256 privateKey);\n","title":"Signature","titles":[null,"makeAddrAndKey"]},"1340":{"href":"/reference/forge-std/make-addr-and-key#description","html":"\n<p>Creates an address and private key derived from the provided <code>name</code>.</p>\n<p>A <a href=\"/reference/cheatcodes/label.mdx\"><code>label</code></a> is created for the derived address with the provided <code>name</code> used as the label value.</p>\n","isPage":false,"text":"\nCreates an address and private key derived from the provided name.\nA label is created for the derived address with the provided name used as the label value.\n","title":"Description","titles":[null,"makeAddrAndKey"]},"1341":{"href":"/reference/forge-std/make-addr-and-key#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> alice, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> key) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> makeAddrAndKey</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;alice&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 0x328809bc894f92807417d2dad6b7c998c1afdac6</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 70564938991660933374592024341600875602376452319261984317470407481576058979585</span></span></code></pre>","isPage":false,"text":"\n(address alice, uint256 key) = makeAddrAndKey(&quot;alice&quot;);\nemit log_address(alice); // 0x328809bc894f92807417d2dad6b7c998c1afdac6\nemit log_uint(key); // 70564938991660933374592024341600875602376452319261984317470407481576058979585","title":"Examples","titles":[null,"makeAddrAndKey"]},"1342":{"href":"/reference/forge-std/make-addr#makeaddr","html":"\n","isPage":true,"text":"\n","title":"makeAddr","titles":[null]},"1343":{"href":"/reference/forge-std/make-addr#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> makeAddr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> addr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction makeAddr(string memory name) internal returns(address addr);\n","title":"Signature","titles":[null,"makeAddr"]},"1344":{"href":"/reference/forge-std/make-addr#description","html":"\n<p>Creates an address derived from the provided <code>name</code>.</p>\n<p>A <a href=\"/reference/cheatcodes/label.mdx\"><code>label</code></a> is created for the derived address with the provided <code>name</code> used as the label value.</p>\n","isPage":false,"text":"\nCreates an address derived from the provided name.\nA label is created for the derived address with the provided name used as the label value.\n","title":"Description","titles":[null,"makeAddr"]},"1345":{"href":"/reference/forge-std/make-addr#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> alice </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> makeAddr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;alice&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 0x328809bc894f92807417d2dad6b7c998c1afdac6</span></span></code></pre>","isPage":false,"text":"\naddress alice = makeAddr(&quot;alice&quot;);\nemit log_address(alice); // 0x328809bc894f92807417d2dad6b7c998c1afdac6","title":"Examples","titles":[null,"makeAddr"]},"1346":{"href":"/reference/forge-std/memOverflowError#memoverflowerror","html":"\n","isPage":true,"text":"\n","title":"memOverflowError","titles":[null]},"1347":{"href":"/reference/forge-std/memOverflowError#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stdError.memOverflowError</span></span></code></pre>\n","isPage":false,"text":"\nstdError.memOverflowError\n","title":"Signature","titles":[null,"memOverflowError"]},"1348":{"href":"/reference/forge-std/memOverflowError#description","html":"\n<p>The internal Solidity error when trying to allocate a dynamic memory array with more than 2^64-1 items.</p>","isPage":false,"text":"\nThe internal Solidity error when trying to allocate a dynamic memory array with more than 2^64-1 items.","title":"Description","titles":[null,"memOverflowError"]},"1349":{"href":"/reference/forge-std/noGasMetering#nogasmetering","html":"\n","isPage":true,"text":"\n","title":"noGasMetering","titles":[null]},"1350":{"href":"/reference/forge-std/noGasMetering#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">modifier</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> noGasMetering</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n","isPage":false,"text":"\nmodifier noGasMetering();\n","title":"Signature","titles":[null,"noGasMetering"]},"1351":{"href":"/reference/forge-std/noGasMetering#description","html":"\n<p>A function modifier that turns off gas metering for the life of the function.</p>\n<p>Note, there is some gas associated with calling the cheatcode, so you will see some gas usage (albeit small) when using this modifier.</p>\n","isPage":false,"text":"\nA function modifier that turns off gas metering for the life of the function.\nNote, there is some gas associated with calling the cheatcode, so you will see some gas usage (albeit small) when using this modifier.\n","title":"Description","titles":[null,"noGasMetering"]},"1352":{"href":"/reference/forge-std/noGasMetering#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> addInLoop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        b </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> addInLoopNoGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> noGasMetering</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> addInLoop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> testFunc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gas_start </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasleft</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  addInLoop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gas_used </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gas_start </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasleft</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gas_start_no_metering </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasleft</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  addInLoopNoGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gas_used_no_metering </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gas_start_no_metering </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasleft</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_named_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Gas Metering&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, gas_used);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_named_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;No Gas Metering&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, gas_used_no_metering);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;text-decoration:underline;--shiki-dark:#96D0FF;--shiki-dark-text-decoration:inherit\">PASS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] testFunc() (gas: 1887191)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">Logs:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  Gas Metering: 1880082</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  No Gas Metering: 3024</span></span></code></pre>","isPage":false,"text":"\nfunction addInLoop() internal returns (uint256) {\n    uint256 b;\n    for (uint256 i; i &lt; 10000; i++) {\n        b + i;\n    }\n    return b;\n}\n \nfunction addInLoopNoGas() internal noGasMetering returns (uint256) {\n    return addInLoop();\n}\n \nfunction testFunc() external {\n  uint256 gas_start = gasleft();\n  addInLoop();\n  uint256 gas_used = gas_start - gasleft();\n \n  uint256 gas_start_no_metering = gasleft();\n  addInLoopNoGas();\n  uint256 gas_used_no_metering = gas_start_no_metering - gasleft();\n \n  emit log_named_uint(&quot;Gas Metering&quot;, gas_used);\n  emit log_named_uint(&quot;No Gas Metering&quot;, gas_used_no_metering);\n}\n[PASS] testFunc() (gas: 1887191)\nLogs:\n  Gas Metering: 1880082\n  No Gas Metering: 3024","title":"Examples","titles":[null,"noGasMetering"]},"1353":{"href":"/reference/forge-std/overview#forge-standard-library-reference","html":"\n<p>Forge Standard Library (Forge Std for short) is a collection of helpful contracts that make writing tests easier, faster, and more user-friendly.</p>\n<p>Using Forge Std is the preferred way of writing tests with Foundry.</p>\n<p>What&#x27;s included:</p>\n<ul>\n<li>\n<p><code>Vm.sol</code>: Up-to-date <a href=\"/reference/cheatcodes/overview#cheatcodes-interface\">cheatcodes interface</a></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Vm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/Vm.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n</li>\n<li>\n<p><a href=\"/reference/forge-std/console-log.mdx\"><code>console.sol</code></a> and <code>console2.sol</code>: Hardhat-style logging functionality</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">console</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/console.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p><strong>Note:</strong> <code>console2.sol</code> contains patches to <code>console.sol</code> that allow Forge to decode traces for calls to the console, but it is not compatible with Hardhat.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">console2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/console2.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n</li>\n<li>\n<p><code>Script.sol</code>: Basic utilities for <a href=\"/guides/scripting-with-solidity\">Solidity scripting</a></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/Script.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n</li>\n<li>\n<p><code>Test.sol</code>: The complete Forge Std experience (more details <a href=\"#forge-stds-test\">below</a>)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/Test.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n</li>\n</ul>\n","isPage":true,"text":"\nForge Standard Library (Forge Std for short) is a collection of helpful contracts that make writing tests easier, faster, and more user-friendly.\nUsing Forge Std is the preferred way of writing tests with Foundry.\nWhat&#x27;s included:\n\n\nVm.sol: Up-to-date cheatcodes interface\nimport {Vm} from &quot;forge-std/Vm.sol&quot;;\n\n\nconsole.sol and console2.sol: Hardhat-style logging functionality\nimport {console} from &quot;forge-std/console.sol&quot;;\nNote: console2.sol contains patches to console.sol that allow Forge to decode traces for calls to the console, but it is not compatible with Hardhat.\nimport {console2} from &quot;forge-std/console2.sol&quot;;\n\n\nScript.sol: Basic utilities for Solidity scripting\nimport {Script} from &quot;forge-std/Script.sol&quot;;\n\n\nTest.sol: The complete Forge Std experience (more details below)\nimport {Test} from &quot;forge-std/Test.sol&quot;;\n\n\n","title":"Forge Standard Library Reference","titles":[null]},"1354":{"href":"/reference/forge-std/overview#forge-stds-test","html":"\n<p>The <code>Test</code> contract in <code>Test.sol</code> provides all the essential functionality you need to get started writing tests.</p>\n<p>Simply import <code>Test.sol</code> and inherit from <code>Test</code> in your test contract:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/Test.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ContractTest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> is</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ...</span></span></code></pre>\n<p>What&#x27;s included:</p>\n<ul>\n<li>\n<p>Std Libraries</p>\n<ul>\n<li><a href=\"/reference/forge-std/std-logs.mdx\">Std Logs</a>: Expand upon the logging events from the DSTest library.</li>\n<li><a href=\"/reference/forge-std/std-assertions.mdx\">Std Assertions</a>: Expand upon the assertion functions from the DSTest library.</li>\n<li><a href=\"/reference/forge-std/std-cheats.mdx\">Std Cheats</a>: Wrappers around Forge cheatcodes for improved safety and DX.</li>\n<li><a href=\"/reference/forge-std/std-errors.mdx\">Std Errors</a>: Wrappers around common internal Solidity errors and reverts.</li>\n<li><a href=\"/reference/forge-std/std-storage.mdx\">Std Storage</a>: Utilities for storage manipulation.</li>\n<li><a href=\"/reference/forge-std/std-math.mdx\">Std Math</a>: Useful mathematical functions.</li>\n<li><a href=\"/reference/forge-std/script-utils.mdx\">Script Utils</a>: Utility functions which can be accessed in tests and scripts.</li>\n<li><a href=\"/reference/forge-std/console-log.mdx\">Console Logging</a>: Console logging functions.</li>\n</ul>\n</li>\n<li>\n<p>A cheatcodes instance <code>vm</code>, from which you invoke Forge cheatcodes (see <a href=\"/reference/cheatcodes/overview\">Cheatcodes Reference</a>)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">startPrank</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice);</span></span></code></pre>\n</li>\n<li>\n<p>All Hardhat <code>console</code> functions for logging (see <a href=\"/reference/forge-std/console-log.mdx\">Console Logging</a>)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice.balance); </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// or `console2`</span></span></code></pre>\n</li>\n<li>\n<p>All Dappsys Test functions for asserting and logging (see <a href=\"/reference/ds-test.md\">Dappsys Test reference</a>)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(dai.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10000e18</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n</li>\n<li>\n<p>Utility functions also included in <code>Script.sol</code> (see <a href=\"/reference/forge-std/script-utils.mdx\">Script Utils</a>)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Compute the address a contract will be deployed at for a given deployer address and nonce</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> futureContract </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> computeCreateAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(alice, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n</li>\n</ul>","isPage":false,"text":"\nThe Test contract in Test.sol provides all the essential functionality you need to get started writing tests.\nSimply import Test.sol and inherit from Test in your test contract:\nimport {Test} from &quot;forge-std/Test.sol&quot;;\n \ncontract ContractTest is Test { ...\nWhat&#x27;s included:\n\n\nStd Libraries\n\nStd Logs: Expand upon the logging events from the DSTest library.\nStd Assertions: Expand upon the assertion functions from the DSTest library.\nStd Cheats: Wrappers around Forge cheatcodes for improved safety and DX.\nStd Errors: Wrappers around common internal Solidity errors and reverts.\nStd Storage: Utilities for storage manipulation.\nStd Math: Useful mathematical functions.\nScript Utils: Utility functions which can be accessed in tests and scripts.\nConsole Logging: Console logging functions.\n\n\n\nA cheatcodes instance vm, from which you invoke Forge cheatcodes (see Cheatcodes Reference)\nvm.startPrank(alice);\n\n\nAll Hardhat console functions for logging (see Console Logging)\nconsole.log(alice.balance); // or `console2`\n\n\nAll Dappsys Test functions for asserting and logging (see Dappsys Test reference)\nassertEq(dai.balanceOf(alice), 10000e18);\n\n\nUtility functions also included in Script.sol (see Script Utils)\n// Compute the address a contract will be deployed at for a given deployer address and nonce\naddress futureContract = computeCreateAddress(alice, 1);\n\n","title":"Forge Std&#x27;s Test","titles":[null,"Forge Standard Library Reference"]},"1355":{"href":"/reference/forge-std/percentDelta#percentdelta","html":"\n","isPage":true,"text":"\n","title":"percentDelta","titles":[null]},"1356":{"href":"/reference/forge-std/percentDelta#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> percentDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> percentDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nfunction percentDelta(uint256 a, uint256 b) internal pure returns (uint256)\nfunction percentDelta(int256 a, int256 b) internal pure returns (uint256)\n","title":"Signature","titles":[null,"percentDelta"]},"1357":{"href":"/reference/forge-std/percentDelta#description","html":"\n<p>Returns the difference between two numbers in percentage, where <code>1e18</code> is 100%.\nMore precisely, <code>percentDelta(a, b)</code> computes <code>abs((a-b) / b) * 1e18</code>.</p>\n","isPage":false,"text":"\nReturns the difference between two numbers in percentage, where 1e18 is 100%.\nMore precisely, percentDelta(a, b) computes abs((a-b) / b) * 1e18.\n","title":"Description","titles":[null,"percentDelta"]},"1358":{"href":"/reference/forge-std/percentDelta#example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> percent150 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stdMath.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">percentDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">125</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">50</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> percent60 </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stdMath.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">percentDelta</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">50</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">125</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>","isPage":false,"text":"\nuint256 percent150 = stdMath.percentDelta(uint256(125), 50);\nuint256 percent60 = stdMath.percentDelta(uint256(50), 125);","title":"Example","titles":[null,"percentDelta"]},"1359":{"href":"/reference/forge-std/popError#poperror","html":"\n","isPage":true,"text":"\n","title":"popError","titles":[null]},"1360":{"href":"/reference/forge-std/popError#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stdError.popError</span></span></code></pre>\n","isPage":false,"text":"\nstdError.popError\n","title":"Signature","titles":[null,"popError"]},"1361":{"href":"/reference/forge-std/popError#description","html":"\n<p>The internal Solidity error when trying to pop an element off of an empty array.</p>","isPage":false,"text":"\nThe internal Solidity error when trying to pop an element off of an empty array.","title":"Description","titles":[null,"popError"]},"1362":{"href":"/reference/forge-std/read#read","html":"\n","isPage":true,"text":"\n","title":"read","titles":[null]},"1363":{"href":"/reference/forge-std/read#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> read_bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> read_bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> read_address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> read_uint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> read_int</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction read_bytes32(StdStorage storage self) internal returns (bytes32);\nfunction read_bool(StdStorage storage self) internal returns (bool);\nfunction read_address(StdStorage storage self) internal returns (address);\nfunction read_uint(StdStorage storage self) internal returns (uint256);\nfunction read_int(StdStorage storage self) internal returns (int256);\n","title":"Signature","titles":[null,"read"]},"1364":{"href":"/reference/forge-std/read#description","html":"\n<p>Reads the value from the storage slot as <code>bytes32</code>, <code>bool</code>, <code>address</code>, <code>uint256</code>, or <code>int256</code>.</p>\n<p>Reverts with a message if unsuccessful.</p>","isPage":false,"text":"\nReads the value from the storage slot as bytes32, bool, address, uint256, or int256.\nReverts with a message if unsuccessful.","title":"Description","titles":[null,"read"]},"1365":{"href":"/reference/forge-std/rewind#rewind","html":"\n","isPage":true,"text":"\n","title":"rewind","titles":[null]},"1366":{"href":"/reference/forge-std/rewind#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> rewind</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction rewind(uint256 time) public;\n","title":"Signature","titles":[null,"rewind"]},"1367":{"href":"/reference/forge-std/rewind#description","html":"\n<p>Rewinds <code>block.timestamp</code> by the specified number of seconds.</p>\n","isPage":false,"text":"\nRewinds block.timestamp by the specified number of seconds.\n","title":"Description","titles":[null,"rewind"]},"1368":{"href":"/reference/forge-std/rewind#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.timestamp, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3600</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">rewind</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3600</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.timestamp, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>","isPage":false,"text":"\nassertEq(block.timestamp, 3600);\nrewind(3600);\nassertEq(block.timestamp, 0);","title":"Examples","titles":[null,"rewind"]},"1369":{"href":"/reference/forge-std/script-utils#script-utils","html":"\n<ul>\n<li><a href=\"/reference/forge-std/compute-create-address.mdx\"><code>computeCreateAddress</code></a></li>\n<li><a href=\"/reference/forge-std/derive-remember-key.mdx\"><code>deriveRememberKey</code></a></li>\n</ul>","isPage":true,"text":"\n\ncomputeCreateAddress\nderiveRememberKey\n","title":"Script Utils","titles":[null]},"1370":{"href":"/reference/forge-std/sig#sig","html":"\n","isPage":true,"text":"\n","title":"sig","titles":[null]},"1371":{"href":"/reference/forge-std/sig#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> sig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes4</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _sig) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> sig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> memory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _sig) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage);\nfunction sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage);\n","title":"Signature","titles":[null,"sig"]},"1372":{"href":"/reference/forge-std/sig#description","html":"\n<p>Sets the 4-byte selector of the function to static call.</p>\n<p>Default value: <code>hex&quot;00000000&quot;</code></p>\n","isPage":false,"text":"\nSets the 4-byte selector of the function to static call.\nDefault value: hex&quot;00000000&quot;\n","title":"Description","titles":[null,"sig"]},"1373":{"href":"/reference/forge-std/sig#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> slot </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stdstore</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">target</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(addr)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(addr.fun.selector)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">with_key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">find</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> slot </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stdstore</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">target</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(addr)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;fun(uint256)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">with_key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">find</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>","isPage":false,"text":"\nuint256 slot = stdstore\n    .target(addr)\n    .sig(addr.fun.selector)\n    .with_key(1)\n    .find();\nuint256 slot = stdstore\n    .target(addr)\n    .sig(&quot;fun(uint256)&quot;)\n    .with_key(1)\n    .find();","title":"Examples","titles":[null,"sig"]},"1374":{"href":"/reference/forge-std/skip#skip","html":"\n","isPage":true,"text":"\n","title":"skip","titles":[null]},"1375":{"href":"/reference/forge-std/skip#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> skip</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> time</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction skip(uint256 time) public;\n","title":"Signature","titles":[null,"skip"]},"1376":{"href":"/reference/forge-std/skip#description","html":"\n<p>Skips forward <code>block.timestamp</code> by the specified number of seconds.</p>\n","isPage":false,"text":"\nSkips forward block.timestamp by the specified number of seconds.\n","title":"Description","titles":[null,"skip"]},"1377":{"href":"/reference/forge-std/skip#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.timestamp, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">skip</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3600</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">assertEq</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.timestamp, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3600</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>","isPage":false,"text":"\nassertEq(block.timestamp, 0);\nskip(3600);\nassertEq(block.timestamp, 3600);","title":"Examples","titles":[null,"skip"]},"1378":{"href":"/reference/forge-std/startHoax#starthoax","html":"\n","isPage":true,"text":"\n","title":"startHoax","titles":[null]},"1379":{"href":"/reference/forge-std/startHoax#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> startHoax</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> who</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> startHoax</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> who</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> give</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> startHoax</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> who</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> origin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> startHoax</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> who</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> origin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> give</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n","isPage":false,"text":"\nfunction startHoax(address who) public;\nfunction startHoax(address who, uint256 give) public;\nfunction startHoax(address who, address origin) public;\nfunction startHoax(address who, address origin, uint256 give) public;\n","title":"Signature","titles":[null,"startHoax"]},"1380":{"href":"/reference/forge-std/startHoax#description","html":"\n<p>Start a <a href=\"/reference/cheatcodes/start-prank.mdx\">perpetual <code>prank</code></a> from an address that has some ether.</p>\n<p>If the balance is not specified, it will be set to 2^128 wei.</p>","isPage":false,"text":"\nStart a perpetual prank from an address that has some ether.\nIf the balance is not specified, it will be set to 2^128 wei.","title":"Description","titles":[null,"startHoax"]},"1381":{"href":"/reference/forge-std/std-assertions#std-assertions","html":"\n<ul>\n<li><a href=\"/reference/forge-std/fail.mdx\"><code>fail</code></a></li>\n<li><a href=\"/reference/forge-std/assertTrue.mdx\"><code>assertTrue</code></a></li>\n<li><a href=\"/reference/forge-std/assertFalse.mdx\"><code>assertFalse</code></a></li>\n<li><a href=\"/reference/forge-std/assertEq.mdx\"><code>assertEq</code></a></li>\n<li><a href=\"/reference/forge-std/assertEqDecimal.mdx\"><code>assertEqDecimal</code></a></li>\n<li><a href=\"/reference/forge-std/assertNotEq.mdx\"><code>assertNotEq</code></a></li>\n<li><a href=\"/reference/forge-std/assertNotEqDecimal.mdx\"><code>assertNotEqDecimal</code></a></li>\n<li><a href=\"/reference/forge-std/assertLt.mdx\"><code>assertLt</code></a></li>\n<li><a href=\"/reference/forge-std/assertLtDecimal.mdx\"><code>assertLtDecimal</code></a></li>\n<li><a href=\"/reference/forge-std/assertGt.mdx\"><code>assertGt</code></a></li>\n<li><a href=\"/reference/forge-std/assertGtDecimal.mdx\"><code>assertGtDecimal</code></a></li>\n<li><a href=\"/reference/forge-std/assertLe.mdx\"><code>assertLe</code></a></li>\n<li><a href=\"/reference/forge-std/assertLeDecimal.mdx\"><code>assertLeDecimal</code></a></li>\n<li><a href=\"/reference/forge-std/assertGe.mdx\"><code>assertGe</code></a></li>\n<li><a href=\"/reference/forge-std/assertGeDecimal.mdx\"><code>assertGeDecimal</code></a></li>\n<li><a href=\"/reference/forge-std/assertApproxEqAbs.mdx\"><code>assertApproxEqAbs</code></a></li>\n<li><a href=\"/reference/forge-std/assertApproxEqAbsDecimal.mdx\"><code>assertApproxEqAbsDecimal</code></a></li>\n<li><a href=\"/reference/forge-std/assertApproxEqRel.mdx\"><code>assertApproxEqRel</code></a></li>\n<li><a href=\"/reference/forge-std/assertApproxEqRelDecimal.mdx\"><code>assertApproxEqRelDecimal</code></a></li>\n</ul>","isPage":true,"text":"\n\nfail\nassertTrue\nassertFalse\nassertEq\nassertEqDecimal\nassertNotEq\nassertNotEqDecimal\nassertLt\nassertLtDecimal\nassertGt\nassertGtDecimal\nassertLe\nassertLeDecimal\nassertGe\nassertGeDecimal\nassertApproxEqAbs\nassertApproxEqAbsDecimal\nassertApproxEqRel\nassertApproxEqRelDecimal\n","title":"Std Assertions","titles":[null]},"1382":{"href":"/reference/forge-std/std-cheats#std-cheats","html":"\n<ul>\n<li><a href=\"/reference/forge-std/skip.mdx\"><code>skip</code></a></li>\n<li><a href=\"/reference/forge-std/rewind.mdx\"><code>rewind</code></a></li>\n<li><a href=\"/reference/forge-std/hoax.mdx\"><code>hoax</code></a></li>\n<li><a href=\"/reference/forge-std/startHoax.mdx\"><code>startHoax</code></a></li>\n<li><a href=\"/reference/forge-std/deal.mdx\"><code>deal</code></a></li>\n<li><a href=\"/reference/forge-std/deployCode.mdx\"><code>deployCode</code></a></li>\n<li><a href=\"/reference/forge-std/deployCodeTo.mdx\"><code>deployCodeTo</code></a></li>\n<li><a href=\"/reference/forge-std/bound.mdx\"><code>bound</code></a></li>\n<li><a href=\"/reference/forge-std/change-prank.mdx\"><code>changePrank</code></a></li>\n<li><a href=\"/reference/forge-std/make-addr.mdx\"><code>makeAddr</code></a></li>\n<li><a href=\"/reference/forge-std/make-addr-and-key.mdx\"><code>makeAddrAndKey</code></a></li>\n<li><a href=\"/reference/forge-std/noGasMetering.mdx\"><code>noGasMetering</code></a></li>\n</ul>","isPage":true,"text":"\n\nskip\nrewind\nhoax\nstartHoax\ndeal\ndeployCode\ndeployCodeTo\nbound\nchangePrank\nmakeAddr\nmakeAddrAndKey\nnoGasMetering\n","title":"Std Cheats","titles":[null]},"1383":{"href":"/reference/forge-std/std-errors#std-errors","html":"\n<ul>\n<li><a href=\"/reference/forge-std/assertionError.mdx\"><code>assertionError</code></a></li>\n<li><a href=\"/reference/forge-std/arithmeticError.mdx\"><code>arithmeticError</code></a></li>\n<li><a href=\"/reference/forge-std/divisionError.mdx\"><code>divisionError</code></a></li>\n<li><a href=\"/reference/forge-std/enumConversionError.mdx\"><code>enumConversionError</code></a></li>\n<li><a href=\"/reference/forge-std/encodeStorageError.mdx\"><code>encodeStorageError</code></a></li>\n<li><a href=\"/reference/forge-std/popError.mdx\"><code>popError</code></a></li>\n<li><a href=\"/reference/forge-std/indexOOBError.mdx\"><code>indexOOBError</code></a></li>\n<li><a href=\"/reference/forge-std/memOverflowError.mdx\"><code>memOverflowError</code></a></li>\n<li><a href=\"/reference/forge-std/zeroVarError.mdx\"><code>zeroVarError</code></a></li>\n</ul>","isPage":true,"text":"\n\nassertionError\narithmeticError\ndivisionError\nenumConversionError\nencodeStorageError\npopError\nindexOOBError\nmemOverflowError\nzeroVarError\n","title":"Std Errors","titles":[null]},"1384":{"href":"/reference/forge-std/std-logs#std-logs","html":"\n<p>Std Logs expand upon the logging events from the <a href=\"../ds-test.md#logging\"><code>DSTest</code></a> library.</p>\n","isPage":true,"text":"\nStd Logs expand upon the logging events from the DSTest library.\n","title":"Std Logs","titles":[null]},"1385":{"href":"/reference/forge-std/std-logs#events","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log_array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">val</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log_array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">val</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log_named_array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">val</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log_named_array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">int256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">val</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nevent log_array(uint256[] val);\nevent log_array(int256[] val);\nevent log_named_array(string key, uint256[] val);\nevent log_named_array(string key, int256[] val);\n","title":"Events","titles":[null,"Std Logs"]},"1386":{"href":"/reference/forge-std/std-logs#usage","html":"\n<p>This section provides usage examples.</p>\n","isPage":false,"text":"\nThis section provides usage examples.\n","title":"Usage","titles":[null,"Std Logs"]},"1387":{"href":"/reference/forge-std/std-logs#log_array","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log_array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(&lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;[] </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">val</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>Where <code>&lt;type&gt;</code> can be <code>int256</code>, <code>uint256</code>, <code>address</code>.</p>\n","isPage":false,"text":"\nevent log_array(&lt;type&gt;[] val);\nWhere &lt;type&gt; can be int256, uint256, address.\n","title":"log_array","titles":[null,"Std Logs","Usage"]},"1388":{"href":"/reference/forge-std/std-logs#example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Assuming storage</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// uint256[] data = [10, 20, 30, 40, 50]; </span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data);</span></span></code></pre>\n","isPage":false,"text":"\n// Assuming storage\n// uint256[] data = [10, 20, 30, 40, 50]; \n \nemit log_array(data);\n","title":"Example","titles":[null,"Std Logs","Usage","log_array"]},"1389":{"href":"/reference/forge-std/std-logs#log_named_array","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">event</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> log_named_array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, &lt;</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;[] </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">val</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<p>Where <code>&lt;type&gt;</code> can be <code>int256</code>, <code>uint256</code>, <code>address</code>.</p>\n","isPage":false,"text":"\nevent log_named_array(string key, &lt;type&gt;[] val);\nWhere &lt;type&gt; can be int256, uint256, address.\n","title":"log_named_array","titles":[null,"Std Logs","Usage"]},"1390":{"href":"/reference/forge-std/std-logs#example-1","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Assuming storage</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// uint256[] data = [10, 20, 30, 40, 50]; </span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">emit</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> log_named_array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;Data&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, data);</span></span></code></pre>","isPage":false,"text":"\n// Assuming storage\n// uint256[] data = [10, 20, 30, 40, 50]; \n \nemit log_named_array(&quot;Data&quot;, data);","title":"Example","titles":[null,"Std Logs","Usage","log_named_array"]},"1391":{"href":"/reference/forge-std/std-math#std-math","html":"\n<ul>\n<li><a href=\"/reference/forge-std/abs.mdx\"><code>abs</code></a></li>\n<li><a href=\"/reference/forge-std/delta.mdx\"><code>delta</code></a></li>\n<li><a href=\"/reference/forge-std/percentDelta.mdx\"><code>percentDelta</code></a></li>\n</ul>","isPage":true,"text":"\n\nabs\ndelta\npercentDelta\n","title":"Std Math","titles":[null]},"1392":{"href":"/reference/forge-std/std-storage#std-storage","html":"\n<p>Std Storage is a library that makes manipulating storage easy.</p>\n<p>To use Std Storage, import the following in your test contract:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">stdStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">StdStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;forge-std/Test.sol&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Add the following line in your test contract:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">using</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> stdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> for</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> StdStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span></code></pre>\n<p>Then, access Std Storage via the <code>stdstore</code> instance.</p>\n","isPage":true,"text":"\nStd Storage is a library that makes manipulating storage easy.\nTo use Std Storage, import the following in your test contract:\nimport {stdStorage, StdStorage} from &quot;forge-std/Test.sol&quot;;\nAdd the following line in your test contract:\nusing stdStorage for StdStorage;\nThen, access Std Storage via the stdstore instance.\n","title":"Std Storage","titles":[null]},"1393":{"href":"/reference/forge-std/std-storage#functions","html":"\n<p>Query functions:</p>\n<ul>\n<li><a href=\"/reference/forge-std/target.mdx\"><code>target</code></a>: Set the address of the target contract</li>\n<li><a href=\"/reference/forge-std/sig.mdx\"><code>sig</code></a>: Set the 4-byte selector of the function to static call</li>\n<li><a href=\"/reference/forge-std/with_key.mdx\"><code>with_key</code></a>: Pass an argument to the function (can be used multiple times)</li>\n<li><a href=\"/reference/forge-std/depth.mdx\"><code>depth</code></a>: Set the position of the value in the <code>tuple</code> (e.g. inside a <code>struct</code>)</li>\n<li><a href=\"/reference/forge-std/enable_packed_slots.mdx\"><code>enable_packed_slots</code></a>: Allow the use of packed storage slots</li>\n</ul>\n<p>Terminator functions:</p>\n<ul>\n<li><a href=\"/reference/forge-std/find.mdx\"><code>find</code></a>: Return the slot number</li>\n<li><a href=\"/reference/forge-std/checked_write.mdx\"><code>checked_write</code></a>: Set the data to be written to the storage slot(s)</li>\n<li><a href=\"/reference/forge-std/read.mdx\"><code>read_&lt;type&gt;</code></a>: Read the value from the storage slot as <code>&lt;type&gt;</code></li>\n</ul>\n","isPage":false,"text":"\nQuery functions:\n\ntarget: Set the address of the target contract\nsig: Set the 4-byte selector of the function to static call\nwith_key: Pass an argument to the function (can be used multiple times)\ndepth: Set the position of the value in the tuple (e.g. inside a struct)\nenable_packed_slots: Allow the use of packed storage slots\n\nTerminator functions:\n\nfind: Return the slot number\nchecked_write: Set the data to be written to the storage slot(s)\nread_&lt;type&gt;: Read the value from the storage slot as &lt;type&gt;\n\n","title":"Functions","titles":[null,"Std Storage"]},"1394":{"href":"/reference/forge-std/std-storage#simple-example","html":"\n<p><code>playerToCharacter</code> tracks info about players&#x27; characters.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// MetaRPG.sol</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Character</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> name;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> level;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">mapping</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Character) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">public</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> playerToCharacter;</span></span></code></pre>\n<p>Let&#x27;s say we want to set the level of our character to 120.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// MetaRPG.t.sol</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stdstore</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">target</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(metaRpg))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;playerToCharacter(address)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">with_key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">depth</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">checked_write</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">120</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nplayerToCharacter tracks info about players&#x27; characters.\n// MetaRPG.sol\n \nstruct Character {\n    string name;\n    uint256 level;\n}\n \nmapping (address =&gt; Character) public playerToCharacter;\nLet&#x27;s say we want to set the level of our character to 120.\n// MetaRPG.t.sol\n \nstdstore\n    .target(address(metaRpg))\n    .sig(&quot;playerToCharacter(address)&quot;)\n    .with_key(address(this))\n    .depth(1)\n    .checked_write(120);\n","title":"Simple Example","titles":[null,"Std Storage"]},"1395":{"href":"/reference/forge-std/std-storage#packed-slot-example","html":"\n<p><code>balanceOf()</code> returns the balance of a user in a gas-optimized ERC20 implementation.\n<code>enable_packed_slots()</code> also works with <a href=\"https://eips.ethereum.org/EIPS/eip-7201\">ERC7201 Namespaced Storage Slots</a>, proxy patterns, and packed slots as shown in the example below:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// AgoraDollar.sol</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">contract</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> AgoraDollar</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">@notice</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> The Erc20AccountData struct</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">@param</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> isFrozen</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> A boolean to indicate if the account is frozen</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">@param</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> balance</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> A uint248 to store the balance of the account</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Erc20AccountData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> isFrozen;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        uint248</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> balance;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">@notice</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> The Erc20CoreStorage struct</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">@param</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> accountData</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> A mapping of address to Erc20AccountData to store account data</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">@custom:storage</span><span style=\"color:#6A737D;--shiki-dark:#768390\">-location erc7201:AgoraDollarErc1967Proxy.Erc20CoreStorage</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    struct</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Erc20CoreStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        /// </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">@dev</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> _account The account whose data we are accessing</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        /// </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">@dev</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> _accountData The account data for the account</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        mapping</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _account </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Erc20AccountData _accountData) accountData;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">@notice</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> The ```ERC20_CORE_STORAGE_SLOT_``` is the storage slot for the Erc20CoreStorage struct</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">@dev</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> keccak256(abi.encode(uint256(keccak256(&quot;AgoraDollarErc1967Proxy.Erc20CoreStorage&quot;)) - 1)) &amp; ~bytes32(uint256(0xff))</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    bytes32</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> constant</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ERC20_CORE_STORAGE_SLOT_ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">        0x455730fed596673e69db1907be2e521374ba893f1a04cc5f5dd931616cd6b700</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">@notice</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> The ```getPointerToErc20CoreStorage``` function returns a pointer to the Erc20CoreStorage struct</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">@return</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> $ A pointer to the Erc20CoreStorage struct</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getPointerToErc20CoreStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> pure</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">Erc20CoreStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">        /// @solidity memory-safe-assembly</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        assembly</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            $.slot </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ERC20_CORE_STORAGE_SLOT_</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">@notice</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> The ```balanceOf``` function returns the token balance of a given account</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">@param</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _account</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> The account to check the balance of</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">@return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> The</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> balance of the account</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _account) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">external</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> view</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getPointerToErc20CoreStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().accountData[_account].balance;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Let&#x27;s say we want a function to set the balance of an address to some amount on the AUSD contract.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// TestAgoraDollar.t.sol</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> seedUserWithAusd</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _to, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint248</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _amount) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    stdstore</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">enable_packed_slots</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">target</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Constants.Mainnet.AUSD_ERC20)) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">//0x00000000eFE302BEAA2b3e6e1b18d08D69a9012a</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;balanceOf(address)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">with_key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(_to)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">checked_write</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(_amount);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nbalanceOf() returns the balance of a user in a gas-optimized ERC20 implementation.\nenable_packed_slots() also works with ERC7201 Namespaced Storage Slots, proxy patterns, and packed slots as shown in the example below:\n// AgoraDollar.sol\ncontract AgoraDollar {\n    /// @notice The Erc20AccountData struct\n    /// @param isFrozen A boolean to indicate if the account is frozen\n    /// @param balance A uint248 to store the balance of the account\n    struct Erc20AccountData {\n        bool isFrozen;\n        uint248 balance;\n    }\n \n    /// @notice The Erc20CoreStorage struct\n    /// @param accountData A mapping of address to Erc20AccountData to store account data\n    /// @custom:storage-location erc7201:AgoraDollarErc1967Proxy.Erc20CoreStorage\n    struct Erc20CoreStorage {\n        /// @dev _account The account whose data we are accessing\n        /// @dev _accountData The account data for the account\n        mapping(address _account =&gt; Erc20AccountData _accountData) accountData;\n    }\n \n    /// @notice The ```ERC20_CORE_STORAGE_SLOT_``` is the storage slot for the Erc20CoreStorage struct\n    /// @dev keccak256(abi.encode(uint256(keccak256(&quot;AgoraDollarErc1967Proxy.Erc20CoreStorage&quot;)) - 1)) &amp; ~bytes32(uint256(0xff))\n    bytes32 internal constant ERC20_CORE_STORAGE_SLOT_ =\n        0x455730fed596673e69db1907be2e521374ba893f1a04cc5f5dd931616cd6b700;\n \n    /// @notice The ```getPointerToErc20CoreStorage``` function returns a pointer to the Erc20CoreStorage struct\n    /// @return $ A pointer to the Erc20CoreStorage struct\n    function getPointerToErc20CoreStorage() internal pure returns (Erc20CoreStorage storage $) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            $.slot := ERC20_CORE_STORAGE_SLOT_\n        }\n    }\n \n    /// @notice The ```balanceOf``` function returns the token balance of a given account\n    /// @param _account The account to check the balance of\n    /// @return The balance of the account\n    function balanceOf(address _account) external view returns (uint256) {\n        return getPointerToErc20CoreStorage().accountData[_account].balance;\n    }\n}\nLet&#x27;s say we want a function to set the balance of an address to some amount on the AUSD contract.\n// TestAgoraDollar.t.sol\n \nfunction seedUserWithAusd(address _to, uint248 _amount) internal {\n    stdstore\n        .enable_packed_slots()\n        .target(address(Constants.Mainnet.AUSD_ERC20)) //0x00000000eFE302BEAA2b3e6e1b18d08D69a9012a\n        .sig(&quot;balanceOf(address)&quot;)\n        .with_key(_to)\n        .checked_write(_amount);\n}\n","title":"Packed-Slot Example","titles":[null,"Std Storage"]},"1396":{"href":"/reference/forge-std/std-storage#known-issues","html":"\n<ul>\n<li>Slot(s) may not be found if the <code>tuple</code> contains types shorter than 32 bytes</li>\n</ul>","isPage":false,"text":"\n\nSlot(s) may not be found if the tuple contains types shorter than 32 bytes\n","title":"Known issues","titles":[null,"Std Storage"]},"1397":{"href":"/reference/forge-std/target#target","html":"\n","isPage":true,"text":"\n","title":"target","titles":[null]},"1398":{"href":"/reference/forge-std/target#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> target</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> _target) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction target(StdStorage storage self, address _target) internal returns (StdStorage storage);\n","title":"Signature","titles":[null,"target"]},"1399":{"href":"/reference/forge-std/target#description","html":"\n<p>Sets the address of the contract.</p>\n<p>Default value: <code>address(0)</code></p>","isPage":false,"text":"\nSets the address of the contract.\nDefault value: address(0)","title":"Description","titles":[null,"target"]},"1400":{"href":"/reference/forge-std/with_key#with_key","html":"\n","isPage":true,"text":"\n","title":"with_key","titles":[null]},"1401":{"href":"/reference/forge-std/with_key#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> with_key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> who</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> with_key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> amt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> with_key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> self</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bytes32</span><span style=\"color:#E36209;--shiki-dark:#F69D50\"> key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> returns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">StdStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> storage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span></code></pre>\n","isPage":false,"text":"\nfunction with_key(StdStorage storage self, address who) internal returns (StdStorage storage);\nfunction with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage);\nfunction with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage);\n","title":"Signature","titles":[null,"with_key"]},"1402":{"href":"/reference/forge-std/with_key#description","html":"\n<p>Passes an argument to the function.</p>\n<p>Can be used multiple times to pass multiple arguments. The order matters.</p>\n","isPage":false,"text":"\nPasses an argument to the function.\nCan be used multiple times to pass multiple arguments. The order matters.\n","title":"Description","titles":[null,"with_key"]},"1403":{"href":"/reference/forge-std/with_key#examples","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">uint256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> slot </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stdstore</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">target</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(addr)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;fun(uint256,address)&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">with_key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">with_key</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">this</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">find</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">();</span></span></code></pre>","isPage":false,"text":"\nuint256 slot = stdstore\n    .target(addr)\n    .sig(&quot;fun(uint256,address)&quot;)\n    .with_key(1)\n    .with_key(address(this))\n    .find();","title":"Examples","titles":[null,"with_key"]},"1404":{"href":"/reference/forge-std/zeroVarError#zerovarerror","html":"\n","isPage":true,"text":"\n","title":"zeroVarError","titles":[null]},"1405":{"href":"/reference/forge-std/zeroVarError#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stdError.zeroVarError</span></span></code></pre>\n","isPage":false,"text":"\nstdError.zeroVarError\n","title":"Signature","titles":[null,"zeroVarError"]},"1406":{"href":"/reference/forge-std/zeroVarError#description","html":"\n<p>The internal Solidity error when trying to call a function via a function pointer that has not been initialized.</p>","isPage":false,"text":"\nThe internal Solidity error when trying to call a function via a function pointer that has not been initialized.","title":"Description","titles":[null,"zeroVarError"]}},"dirtCount":0,"index":[["❌",{"2":{"786":1}}],["⠢",{"2":{"393":1}}],["╰───────────────────────┴─────────────────┴────────┴────────┴────────┴─────────╯",{"2":{"284":3}}],["╞═══════════════════════╪═════════════════╪════════╪════════╪════════╪═════════╡",{"2":{"284":3}}],["┆",{"2":{"284":175}}],["╭───────────────────────┬─────────────────┬────────┬────────┬────────┬─────────╮",{"2":{"284":3}}],["📚",{"2":{"259":2,"263":2}}],["💡",{"2":{"45":1,"357":1}}],["✓",{"2":{"152":1}}],["✅",{"2":{"95":2,"96":2}}],["→",{"2":{"95":2,"786":8}}],["←",{"2":{"95":5,"355":7}}],["│",{"2":{"95":3,"123":2,"172":36,"188":6,"284":70,"355":4,"402":12}}],["✔",{"2":{"88":1}}],["μ",{"2":{"56":1,"85":1,"257":2,"258":1,"347":1,"394":1}}],["⠒",{"2":{"56":1,"393":1}}],["⠔",{"2":{"56":1}}],["⠊",{"2":{"56":3,"95":1,"96":1,"393":1}}],["ℹ️",{"2":{"45":1,"58":1,"107":1,"151":1,"194":1,"197":1,"246":1,"262":1,"267":1,"491":1,"496":1,"497":1,"536":1,"574":1,"633":1,"646":1,"778":1,"782":1,"787":1,"808":1,"820":1,"826":1,"880":1,"884":2,"888":1,"892":1,"894":1,"957":1,"960":1,"972":1,"991":1,"1042":1,"1074":1,"1090":1}}],["⚠️",{"2":{"37":1,"356":1,"414":1,"416":1,"787":2}}],["$xdg",{"2":{"187":1}}],["$mainnet",{"2":{"184":1}}],["$sepolia",{"2":{"95":1}}],["$path",{"2":{"158":1}}],["$private",{"2":{"86":1,"129":1,"130":1,"138":1,"144":1}}],["$pwd",{"2":{"84":1}}],["$rpc",{"2":{"84":1,"86":1,"129":1,"130":1}}],["$unlucky",{"2":{"81":4}}],["$alice",{"2":{"81":3}}],["$dai",{"2":{"81":5}}],["$infura",{"2":{"80":1}}],["$",{"2":{"44":4,"45":1,"93":2,"133":1,"145":1,"152":1,"172":10,"421":1,"428":1,"446":1,"447":1,"561":2,"922":1,"939":1,"1023":2,"1395":3}}],["$editor",{"2":{"35":1}}],["$home",{"2":{"23":1,"100":2,"112":5,"113":4,"187":2,"543":1}}],["qsfd8gqe4wyzo29",{"2":{"1056":1}}],["qvinzi0wiu",{"2":{"133":1}}],["qmnbefwaqxctfqpk6u7tpga8sthxflpuz7uebz2fvbchsc",{"2":{"62":1}}],["q",{"2":{"35":2,"39":1}}],["quality",{"2":{"171":1}}],["quadrant",{"2":{"37":4}}],["quadrants",{"2":{"37":1}}],["queuelength",{"2":{"392":1}}],["queue`",{"2":{"95":1}}],["question",{"2":{"175":1}}],["questions",{"2":{"170":1,"172":1,"175":1}}],["querying",{"2":{"387":1}}],["query",{"0":{"601":1},"2":{"27":1,"117":1,"148":1,"264":1,"387":1,"1393":1}}],["quick",{"2":{"116":1}}],["quicknode",{"2":{"92":1}}],["quickly",{"2":{"33":1,"384":1,"387":1,"432":1}}],["quit",{"2":{"35":4,"39":1}}],["quotes",{"2":{"439":2,"1285":1}}],["quote",{"0":{"439":1},"2":{"421":1,"439":2}}],["quotation",{"2":{"421":1,"439":2}}],["quot",{"0":{"47":2,"85":2,"86":2},"2":{"3":2,"25":56,"27":4,"33":2,"34":2,"36":6,"43":6,"44":16,"45":12,"51":2,"57":2,"59":6,"62":154,"72":2,"74":2,"76":6,"77":8,"78":8,"81":10,"84":40,"86":4,"88":4,"93":4,"94":8,"106":22,"107":2,"115":4,"117":12,"120":8,"121":12,"122":6,"123":6,"125":2,"126":8,"127":4,"128":4,"129":4,"133":6,"138":2,"143":2,"144":2,"154":2,"158":2,"172":90,"181":2,"183":4,"185":2,"188":12,"189":2,"192":154,"197":4,"202":2,"206":2,"208":2,"212":2,"214":2,"224":2,"226":4,"249":6,"252":2,"254":4,"257":2,"258":6,"260":12,"264":4,"266":4,"271":8,"272":2,"273":2,"275":2,"278":2,"280":4,"283":6,"284":8,"307":2,"308":14,"309":6,"311":2,"313":2,"314":2,"315":2,"316":2,"317":2,"319":2,"328":8,"329":8,"344":6,"345":8,"346":4,"352":2,"353":2,"355":4,"356":6,"357":2,"367":4,"368":2,"376":2,"379":6,"384":6,"390":2,"392":4,"393":34,"396":2,"397":8,"407":20,"408":6,"410":20,"412":10,"421":22,"428":12,"430":12,"431":10,"439":1,"441":4,"450":2,"473":4,"481":4,"484":2,"487":8,"499":6,"507":6,"508":2,"536":2,"542":2,"545":6,"546":2,"561":4,"565":2,"567":2,"601":14,"602":8,"660":2,"665":2,"697":6,"698":6,"699":8,"703":4,"708":6,"719":2,"720":4,"724":8,"726":2,"727":4,"733":4,"734":8,"740":2,"741":4,"747":2,"748":4,"752":4,"754":4,"755":8,"761":4,"762":8,"768":2,"769":4,"774":2,"775":4,"779":8,"782":2,"786":2,"787":4,"788":14,"799":18,"803":4,"804":30,"809":30,"817":4,"820":4,"821":4,"822":8,"826":4,"827":2,"828":8,"838":2,"842":10,"846":2,"855":4,"859":4,"864":4,"881":10,"885":2,"902":2,"906":2,"910":2,"914":2,"918":2,"922":32,"928":10,"929":48,"931":6,"932":2,"939":20,"944":10,"945":4,"946":58,"947":6,"954":2,"960":2,"975":2,"976":4,"978":6,"979":6,"988":6,"997":4,"1023":26,"1034":34,"1044":4,"1051":2,"1052":8,"1056":10,"1057":4,"1062":4,"1070":4,"1083":8,"1108":8,"1130":10,"1131":16,"1133":40,"1134":68,"1138":10,"1139":16,"1141":30,"1142":36,"1151":6,"1284":4,"1285":20,"1297":2,"1302":2,"1310":6,"1318":2,"1328":2,"1341":2,"1345":2,"1352":4,"1353":10,"1354":2,"1372":2,"1373":2,"1390":2,"1392":2,"1394":2,"1395":4,"1403":2}}],["\turl",{"2":{"95":1}}],["\tguid",{"2":{"95":1}}],["\tresponse",{"2":{"95":1}}],["\t",{"2":{"35":18}}],["⚒️",{"2":{"35":1}}],["kovan",{"2":{"1284":1}}],["kib",{"2":{"393":1}}],["kind",{"2":{"62":2,"365":1,"1075":3,"1085":1,"1087":5,"1088":2,"1091":1,"1092":3}}],["kinds",{"2":{"34":1,"384":1,"1088":1}}],["knife",{"2":{"132":1,"142":1}}],["knowing",{"2":{"416":1}}],["knowledge",{"2":{"172":1}}],["knows",{"2":{"107":1}}],["know",{"0":{"180":1},"2":{"85":1,"248":1,"342":1,"345":1,"356":1,"378":1,"788":1}}],["known",{"0":{"53":1,"253":1,"1396":1},"1":{"54":1},"2":{"57":1,"157":1,"248":1,"253":1,"328":2,"392":1,"481":1,"1263":1,"1264":1}}],["k",{"2":{"40":1,"41":1,"42":1,"172":1}}],["kept",{"2":{"384":1}}],["keccak",{"2":{"172":2,"618":1}}],["keccak256",{"0":{"319":1},"2":{"27":1,"34":1,"62":1,"65":4,"72":1,"73":1,"74":1,"172":3,"260":4,"319":5,"697":3,"698":2,"699":3,"720":2,"727":2,"734":2,"741":2,"748":2,"762":2,"769":2,"842":3,"885":1,"988":1,"1056":3,"1057":1,"1310":1,"1395":2}}],["keeping",{"2":{"485":1,"975":1}}],["keeps",{"2":{"485":1}}],["keep",{"2":{"20":1,"83":1,"158":1,"282":1,"342":2,"384":1,"430":2}}],["keyexists",{"0":{"860":1},"1":{"861":1,"862":1,"863":1,"864":1},"2":{"861":1,"862":1,"864":1}}],["keyexiststoml",{"0":{"856":1},"1":{"857":1,"858":1,"859":1},"2":{"857":1,"859":1}}],["keyexistsjson",{"0":{"852":1},"1":{"853":1,"854":1,"855":1},"2":{"853":1,"855":1,"861":1}}],["keywords",{"2":{"356":1}}],["keyword",{"2":{"131":1,"434":2}}],["key=value",{"2":{"1042":1}}],["key=0x",{"2":{"172":1}}],["key=your",{"2":{"172":1}}],["key=",{"2":{"93":1,"138":1,"144":1}}],["keypair",{"2":{"92":2}}],["key",{"0":{"52":1,"360":1,"548":1,"926":1,"943":1,"1400":1},"1":{"361":1,"362":1,"363":1,"1401":1,"1402":1,"1403":1},"2":{"17":1,"43":7,"44":6,"45":6,"47":1,"50":1,"64":1,"65":1,"80":1,"86":2,"90":1,"92":6,"93":3,"94":4,"95":4,"96":4,"129":2,"130":2,"133":4,"138":3,"144":3,"162":1,"172":14,"203":8,"211":1,"213":1,"325":4,"340":5,"344":4,"345":4,"360":2,"362":8,"363":5,"393":2,"421":2,"428":5,"459":3,"479":1,"499":1,"548":3,"561":1,"609":1,"622":5,"625":5,"629":5,"642":1,"664":1,"665":2,"694":1,"707":1,"708":2,"715":2,"719":2,"720":2,"722":2,"726":2,"727":2,"729":2,"733":2,"734":2,"736":2,"740":2,"741":2,"743":2,"747":2,"748":2,"750":14,"751":1,"752":2,"757":2,"761":2,"762":2,"764":2,"768":2,"769":2,"853":2,"854":1,"855":1,"857":2,"858":1,"859":1,"862":2,"863":1,"864":1,"920":1,"922":6,"924":2,"925":2,"928":1,"934":1,"937":1,"939":9,"941":2,"942":2,"945":1,"949":1,"979":1,"996":1,"997":4,"1033":3,"1034":2,"1041":1,"1043":2,"1044":2,"1052":6,"1055":1,"1057":1,"1069":1,"1070":2,"1130":1,"1131":1,"1138":1,"1139":1,"1309":2,"1310":1,"1318":1,"1331":1,"1340":1,"1341":2,"1373":2,"1385":2,"1389":1,"1393":1,"1394":1,"1395":1,"1401":4,"1403":2}}],["keystores",{"2":{"158":2,"624":4,"628":2}}],["keystore",{"0":{"363":1,"624":1,"628":1},"2":{"94":1,"95":1,"624":5,"628":7}}],["keys",{"0":{"362":1,"460":1},"2":{"1":1,"52":2,"80":1,"94":1,"96":1,"162":1,"289":2,"361":1,"422":1,"428":3,"429":1,"448":1,"460":2,"498":1,"625":4,"629":4,"920":2,"921":1,"922":3,"926":1,"929":3,"937":2,"938":1,"939":3,"943":1,"946":3,"1033":2,"1130":1,"1138":1}}],["~bytes32",{"2":{"1395":1}}],["~=",{"2":{"1155":1,"1164":1}}],["~",{"2":{"31":2,"35":4,"51":1,"56":1,"85":1,"97":2,"111":1,"187":2,"257":2,"258":1,"339":1,"347":1,"351":1,"352":1,"353":1,"394":1,"416":1,"457":1,"624":1,"628":1,"898":1}}],["~25kb",{"2":{"19":1}}],["^0",{"2":{"27":1,"43":1,"76":1,"94":2,"172":1,"271":1,"307":1,"308":1,"309":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"478":1,"1052":2}}],["└──",{"2":{"123":4,"172":15,"394":1,"396":1,"402":6}}],["└─",{"2":{"95":5,"267":2,"355":7}}],["└",{"2":{"27":1,"35":2,"148":2}}],["├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤",{"2":{"284":29}}],["├──",{"2":{"123":4,"172":23,"188":11,"394":3,"396":3,"402":13}}],["├─",{"2":{"95":3,"267":3,"355":4}}],["├",{"2":{"27":2,"148":2}}],["=node",{"2":{"473":1}}],["=0",{"2":{"192":1}}],["==",{"2":{"130":1,"172":3,"248":2,"252":1,"265":1,"271":2,"273":1,"280":3,"357":2,"376":1,"719":1,"720":1,"726":1,"727":1,"734":1,"740":1,"741":1,"747":1,"748":1,"762":1,"768":1,"769":1,"775":1,"961":1,"1052":1,"1056":1,"1075":2,"1328":1}}],["=============",{"2":{"35":1}}],["==========================",{"2":{"95":4,"96":3}}],["==================",{"2":{"1":7,"96":2}}],["=project",{"2":{"123":1}}],["=lib",{"2":{"62":1,"117":2,"123":1,"172":3,"198":2,"397":4,"398":3}}],["=",{"2":{"27":3,"31":2,"34":2,"35":1,"44":6,"59":4,"62":2,"64":1,"65":4,"77":5,"78":10,"85":1,"93":3,"94":2,"102":2,"106":7,"108":3,"122":1,"125":1,"126":2,"127":1,"128":4,"130":3,"148":1,"172":77,"183":1,"185":1,"188":1,"194":2,"195":2,"210":1,"212":1,"214":1,"218":1,"220":2,"222":2,"226":2,"228":2,"230":2,"232":2,"234":2,"236":2,"238":2,"240":2,"242":2,"244":2,"246":2,"248":1,"249":5,"251":13,"252":5,"254":9,"257":5,"260":7,"267":1,"270":2,"271":13,"272":1,"273":1,"274":2,"275":7,"276":4,"280":3,"284":3,"307":3,"308":4,"309":2,"311":1,"313":1,"314":1,"315":3,"316":4,"317":1,"319":2,"323":1,"328":5,"336":1,"344":7,"345":8,"346":2,"352":1,"353":1,"356":5,"357":4,"358":3,"369":1,"378":1,"379":3,"397":1,"407":16,"408":3,"410":16,"412":5,"413":1,"418":1,"421":101,"428":10,"433":2,"434":2,"444":3,"445":3,"446":4,"447":4,"473":1,"481":1,"484":1,"487":1,"497":5,"499":2,"507":8,"508":3,"536":1,"561":2,"573":2,"601":1,"634":3,"638":3,"643":1,"655":5,"665":2,"681":3,"685":2,"690":2,"697":1,"698":1,"699":1,"703":2,"708":4,"719":3,"720":4,"726":3,"727":4,"733":3,"734":7,"740":3,"741":4,"747":3,"748":4,"754":2,"755":3,"761":3,"762":5,"768":3,"769":4,"774":2,"775":4,"779":6,"783":1,"787":3,"788":1,"799":11,"802":9,"803":8,"804":18,"808":3,"809":14,"813":1,"820":3,"821":7,"826":3,"827":2,"837":1,"838":2,"842":4,"855":3,"859":3,"864":3,"871":2,"876":3,"881":1,"885":2,"889":8,"893":2,"894":1,"902":2,"906":2,"910":2,"914":2,"918":2,"922":6,"927":1,"929":7,"931":5,"932":3,"939":16,"944":1,"945":3,"946":19,"947":5,"954":2,"973":1,"975":1,"976":2,"978":3,"979":3,"983":4,"988":1,"992":3,"997":4,"1008":2,"1013":2,"1023":8,"1028":1,"1034":4,"1039":3,"1043":1,"1044":2,"1051":1,"1052":33,"1056":18,"1057":4,"1070":2,"1075":6,"1083":8,"1091":3,"1092":9,"1096":2,"1103":2,"1108":6,"1112":7,"1117":3,"1121":2,"1133":2,"1134":3,"1141":6,"1142":13,"1147":1,"1151":6,"1155":2,"1164":2,"1196":1,"1256":1,"1272":1,"1283":3,"1293":1,"1297":1,"1310":6,"1341":1,"1345":1,"1352":4,"1354":1,"1358":2,"1373":2,"1388":1,"1390":1,"1394":1,"1395":3,"1403":1}}],["➜",{"2":{"27":2,"35":6,"148":4}}],["zebra",{"2":{"929":1,"946":1}}],["zerovarerror",{"0":{"1404":1},"1":{"1405":1,"1406":1},"2":{"1383":1,"1405":1}}],["zero",{"2":{"102":1,"271":3,"272":1,"311":2,"421":1,"506":1,"555":1,"618":1,"1052":1,"1088":2,"1285":1,"1314":1}}],["zeros",{"2":{"25":1}}],["zip",{"2":{"408":3,"415":1,"416":1,"419":1}}],["z46ytl8n5msgkg6dst5hwwhh0000gn",{"2":{"396":1}}],["zhan4987",{"2":{"393":3}}],["z3",{"2":{"187":2,"497":1,"504":1}}],["z",{"2":{"40":1,"289":2,"384":2}}],["zshrc",{"2":{"111":1,"158":1}}],["zsh",{"0":{"111":1},"2":{"22":1,"23":3,"110":1,"111":12}}],["jq",{"2":{"926":1,"943":1}}],["jsgeneratedroot",{"2":{"251":2}}],["jsresult",{"2":{"251":2}}],["js",{"2":{"106":5,"107":1}}],["jsonobj3",{"2":{"1134":2,"1142":2}}],["jsonobj2",{"2":{"1134":2,"1142":2}}],["jsonobj",{"2":{"1133":2,"1134":2,"1141":2,"1142":2}}],["jsonpath",{"0":{"926":1,"943":1},"2":{"926":2,"943":2}}],["jsonfile",{"2":{"855":1,"864":1}}],["json`",{"2":{"77":1,"78":1,"809":5}}],["json",{"0":{"25":1,"70":1,"145":1,"379":1,"927":1,"929":1,"930":1,"1131":1,"1139":1},"1":{"72":1,"73":1,"74":1},"2":{"17":1,"18":1,"20":1,"25":1,"35":6,"70":2,"72":1,"74":1,"76":1,"95":2,"96":2,"106":1,"115":5,"117":6,"120":1,"121":1,"123":1,"141":1,"145":1,"172":4,"188":2,"190":1,"302":1,"303":2,"304":2,"379":4,"393":1,"402":1,"421":1,"486":1,"507":2,"597":1,"599":1,"621":2,"853":2,"854":1,"855":3,"862":2,"863":1,"864":3,"920":2,"921":1,"922":6,"924":3,"925":3,"926":1,"927":1,"928":2,"929":20,"930":2,"931":4,"932":2,"942":1,"943":1,"944":2,"946":16,"1021":1,"1031":15,"1032":1,"1033":12,"1034":5,"1129":2,"1130":12,"1131":1,"1133":5,"1134":7,"1137":2,"1138":7,"1139":1,"1141":1,"1142":1}}],["javascript",{"0":{"188":1},"2":{"89":1,"250":2,"251":1,"1285":1}}],["job",{"2":{"285":1}}],["job2",{"2":{"262":1}}],["job1",{"2":{"262":1}}],["jobs",{"2":{"87":1,"99":1,"101":1,"262":2}}],["journey",{"2":{"57":1}}],["j",{"2":{"40":1,"41":1,"42":1,"621":1}}],["juanblanco",{"2":{"121":1}}],["justified",{"2":{"172":1}}],["just",{"0":{"105":1},"2":{"14":1,"51":1,"70":1,"86":1,"94":4,"119":1,"254":1,"257":1,"359":1,"367":1,"374":1,"384":1,"386":1,"399":1,"400":1,"407":1,"411":1,"414":2,"802":2,"812":1,"816":1,"975":1,"1034":1,"1056":1,"1131":1,"1134":1,"1139":1,"1142":1,"1151":1}}],["jumpdestremover",{"2":{"495":1}}],["jumpdest",{"2":{"40":1}}],["jumping",{"2":{"786":1}}],["jumpi",{"2":{"40":1}}],["jump",{"2":{"14":1,"40":1,"659":1}}],["junk",{"2":{"1":1,"708":2,"997":1,"1310":2}}],["+1",{"2":{"944":1}}],["+0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",{"2":{"748":1}}],["+0x",{"2":{"745":1}}],["+=",{"2":{"128":1,"172":3,"270":4,"271":3,"273":1,"274":1,"275":2,"276":2,"357":1,"1052":1,"1151":1}}],["++i",{"2":{"254":1,"734":1,"762":1,"1328":1}}],["++",{"2":{"65":3}}],["+",{"2":{"14":1,"40":3,"41":2,"62":1,"73":1,"74":2,"78":3,"88":1,"128":1,"130":1,"148":1,"172":3,"257":2,"270":2,"280":1,"384":1,"803":2,"893":6,"1092":2,"1112":1,"1151":1,"1352":1}}],["wmdtoken",{"2":{"1151":7}}],["w",{"2":{"327":1,"601":1,"608":1}}],["wrapping",{"2":{"1271":1}}],["wrapper",{"2":{"1057":1,"1288":1}}],["wrappers",{"2":{"333":1,"334":1,"895":3,"1354":2}}],["wrapped",{"2":{"561":1,"1023":1}}],["wrap",{"0":{"442":1},"2":{"421":1,"435":1,"442":3}}],["wrongnumber",{"2":{"787":4}}],["wrong",{"2":{"280":1,"376":1,"386":1,"929":1,"946":1}}],["written",{"2":{"37":2,"89":1,"94":1,"134":1,"249":1,"285":1,"323":1,"344":1,"345":1,"347":1,"351":1,"356":1,"384":1,"459":1,"483":1,"486":6,"533":1,"633":1,"808":1,"1038":2,"1039":1,"1052":2,"1130":1,"1138":1,"1279":1,"1393":1}}],["writetoml",{"0":{"1136":1},"1":{"1137":1,"1138":1,"1139":1,"1140":1,"1141":1,"1142":1,"1143":1},"2":{"1033":1,"1137":2,"1141":3,"1142":4}}],["writejson",{"0":{"1128":1},"1":{"1129":1,"1130":1,"1131":1,"1132":1,"1133":1,"1134":1,"1135":1},"2":{"1033":1,"1034":1,"1035":1,"1129":2,"1133":3,"1134":4}}],["write`",{"2":{"803":1}}],["writeline",{"2":{"802":1,"804":2}}],["writefile`",{"2":{"803":3}}],["writefile",{"2":{"802":1,"804":1}}],["write",{"0":{"371":1,"1277":1},"1":{"1278":1,"1279":1},"2":{"33":1,"89":1,"128":1,"130":1,"131":1,"172":4,"189":1,"289":1,"328":1,"335":2,"342":1,"364":6,"365":1,"371":1,"376":1,"384":1,"390":1,"397":2,"421":1,"431":1,"633":1,"803":1,"804":5,"991":1,"1033":1,"1034":1,"1089":1,"1130":1,"1138":1,"1278":6,"1318":2,"1393":1,"1394":1,"1395":1}}],["writes",{"2":{"13":1,"20":1,"342":1,"355":1,"632":1,"633":1,"634":1,"802":2,"809":5,"991":2,"992":1,"1033":2,"1130":1,"1138":1}}],["writing",{"0":{"94":1,"356":1},"1":{"357":1,"358":1},"2":{"27":1,"33":1,"94":1,"162":3,"171":1,"257":1,"329":3,"356":2,"376":1,"388":1,"391":1,"685":1,"690":1,"1013":1,"1353":2,"1354":1}}],["wsl",{"2":{"151":1}}],["won",{"2":{"62":1,"64":1,"83":1,"262":1,"356":1,"357":1,"665":1,"783":1,"842":1,"1042":2}}],["world",{"2":{"67":1,"133":1,"761":2,"762":2,"804":1,"1044":1}}],["workaround",{"0":{"392":1},"2":{"392":2}}],["workarounds",{"2":{"131":1,"178":1}}],["workload",{"2":{"154":1}}],["workflows",{"2":{"138":1,"139":1,"152":2,"162":1,"172":2}}],["workflow",{"2":{"99":1,"100":1,"101":1,"152":2,"168":1,"172":3}}],["workspaces",{"2":{"475":1}}],["workspace",{"2":{"188":4}}],["works",{"0":{"1033":1},"2":{"94":1,"102":1,"105":1,"183":1,"192":1,"257":1,"269":1,"270":1,"325":1,"342":1,"395":1,"446":1,"629":1,"751":1,"787":1,"826":1,"1034":1,"1284":2,"1285":1,"1288":1,"1395":1}}],["workdir",{"2":{"85":1,"86":1}}],["worked",{"2":{"81":1,"84":1}}],["work",{"0":{"104":1},"2":{"67":1,"80":1,"90":1,"92":1,"95":1,"103":1,"106":1,"107":1,"126":1,"127":1,"253":1,"337":1,"341":1,"407":1,"416":1,"444":1,"507":1,"778":1,"787":1,"880":1,"884":1,"892":1,"895":1,"1337":1}}],["working",{"2":{"33":1,"68":1,"88":1,"89":1,"106":1,"107":1,"172":1,"303":1,"323":1,"392":1,"896":1,"935":1,"950":1}}],["words",{"2":{"37":5,"328":3,"342":1,"604":1,"608":2,"609":2,"927":1,"944":1}}],["word",{"2":{"27":1,"148":1}}],["wouldn",{"2":{"788":1}}],["would",{"2":{"18":1,"34":1,"43":1,"77":1,"78":1,"185":1,"256":1,"271":1,"272":3,"282":1,"283":1,"284":1,"311":1,"328":1,"333":1,"365":1,"376":1,"392":1,"394":1,"397":2,"398":1,"399":1,"412":1,"415":1,"419":1,"444":3,"452":1,"456":1,"787":1,"788":1,"812":1,"816":1,"929":7,"946":7,"957":1,"1039":1,"1151":1}}],["weth9",{"2":{"393":7}}],["week",{"2":{"387":1}}],["weight",{"0":{"567":1,"579":1},"2":{"260":3,"421":4,"567":3,"574":1,"579":3}}],["wei",{"2":{"220":1,"222":1,"228":1,"230":1,"232":1,"234":1,"236":1,"238":1,"240":1,"242":1,"257":1,"292":2,"421":2,"533":1,"537":1,"538":1,"613":2,"979":1,"1334":1,"1380":1}}],["weird",{"2":{"189":1}}],["were",{"2":{"37":1,"95":1,"117":2,"152":1,"193":1,"198":2,"253":1,"266":1,"307":1,"338":1,"419":1}}],["welcome",{"2":{"35":1,"929":2,"946":2}}],["well",{"2":{"14":3,"33":1,"37":1,"108":1,"129":1,"171":1,"250":1,"265":1,"270":1,"274":1,"276":1,"328":1,"364":1,"384":1,"413":1,"507":1,"695":1,"702":1,"798":1,"957":1,"960":1,"1082":1}}],["we",{"2":{"34":1,"43":1,"45":1,"59":1,"62":2,"65":1,"75":2,"76":2,"80":1,"81":3,"83":1,"84":6,"85":3,"86":4,"92":2,"93":1,"94":7,"95":1,"102":1,"104":2,"128":1,"150":1,"192":1,"248":3,"249":1,"254":1,"257":10,"328":21,"345":1,"356":1,"378":3,"392":1,"396":2,"397":3,"399":2,"409":1,"414":1,"416":1,"419":1,"421":2,"444":1,"507":4,"702":1,"775":2,"778":1,"782":4,"783":13,"787":1,"827":1,"880":1,"884":1,"926":1,"927":1,"929":1,"930":1,"932":3,"943":1,"944":2,"946":1,"975":1,"979":1,"1034":1,"1117":1,"1131":4,"1139":4,"1151":3,"1283":1,"1394":1,"1395":2}}],["web2",{"2":{"386":1}}],["website",{"2":{"157":1,"408":2,"416":1}}],["websocket",{"2":{"9":1}}],["web3",{"2":{"12":2,"254":1}}],["width",{"0":{"436":1},"2":{"421":1,"436":2}}],["wide",{"2":{"138":1}}],["wiki",{"2":{"115":4}}],["window",{"2":{"96":2}}],["windows",{"2":{"17":1,"151":1,"154":1,"158":1,"798":1}}],["wish",{"2":{"56":1,"64":2,"84":1,"151":1,"481":1,"894":1}}],["withdrawal",{"2":{"1151":3}}],["withdrawing",{"2":{"257":1}}],["withdraw",{"2":{"172":1,"173":1,"257":12,"961":2,"1151":4}}],["withdrawsum",{"2":{"172":3}}],["withfixtures",{"2":{"172":1}}],["within",{"0":{"24":1},"1":{"25":1},"2":{"26":1,"27":1,"29":1,"31":1,"35":2,"75":1,"84":1,"85":1,"86":1,"132":1,"266":2,"273":1,"307":1,"308":1,"309":1,"311":2,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"356":2,"376":1,"384":2,"410":1,"432":3,"507":1,"654":1}}],["without",{"2":{"10":2,"17":1,"33":1,"64":1,"102":2,"172":1,"194":1,"199":1,"260":1,"418":1,"481":1,"507":1,"536":1,"775":1,"778":2,"782":3,"787":1,"788":2,"1039":1,"1061":1,"1089":1,"1130":1,"1138":1,"1285":1,"1337":1}}],["with",{"0":{"54":1,"79":1,"89":1,"103":1,"118":1,"145":1,"156":1,"157":1,"500":1,"1400":1},"1":{"104":1,"105":1,"106":1,"107":1,"119":1,"120":1,"121":1,"122":1,"123":1,"1401":1,"1402":1,"1403":1},"2":{"8":1,"13":1,"14":2,"17":1,"24":1,"25":2,"31":3,"33":2,"34":1,"35":4,"36":1,"37":2,"40":2,"43":1,"45":9,"47":1,"52":1,"55":1,"56":1,"57":2,"58":1,"62":1,"67":4,"68":1,"71":1,"73":1,"75":3,"76":1,"77":1,"78":2,"79":1,"80":2,"82":2,"84":2,"87":2,"89":2,"94":1,"95":1,"97":1,"99":2,"102":4,"103":1,"104":1,"106":2,"107":1,"115":2,"116":1,"118":1,"121":1,"122":1,"126":1,"128":1,"129":1,"130":1,"131":2,"132":1,"134":2,"138":3,"140":1,"141":2,"142":1,"154":4,"155":1,"157":1,"159":1,"161":2,"162":3,"163":1,"164":1,"165":1,"166":2,"167":1,"168":4,"171":2,"172":19,"173":5,"179":2,"181":1,"183":1,"191":1,"192":4,"194":2,"195":1,"198":1,"200":1,"215":2,"243":1,"245":1,"248":2,"249":1,"257":3,"260":5,"262":2,"266":1,"267":3,"268":1,"270":2,"272":5,"275":2,"277":1,"278":1,"279":3,"280":3,"281":1,"282":1,"283":3,"284":1,"285":1,"289":1,"297":1,"302":1,"304":2,"309":1,"311":1,"315":1,"325":1,"327":1,"328":1,"329":4,"333":1,"334":1,"335":1,"336":1,"337":2,"338":2,"339":1,"340":1,"341":1,"342":5,"345":2,"346":1,"347":8,"353":2,"355":1,"356":5,"357":1,"358":1,"359":2,"361":1,"362":1,"363":3,"364":2,"367":1,"370":1,"373":1,"375":1,"378":1,"384":4,"386":2,"387":3,"388":1,"390":1,"393":2,"394":4,"395":1,"396":1,"398":1,"402":3,"405":1,"407":1,"412":2,"414":1,"416":1,"419":1,"421":1,"425":1,"428":1,"430":3,"431":3,"433":1,"458":1,"459":1,"473":1,"507":9,"521":1,"522":1,"523":1,"524":1,"525":1,"526":1,"561":1,"562":1,"594":1,"599":1,"604":1,"609":1,"623":1,"624":1,"625":1,"626":1,"628":1,"629":2,"630":1,"654":1,"683":3,"685":2,"690":2,"712":1,"717":1,"719":1,"720":1,"724":1,"726":1,"727":1,"731":1,"733":1,"734":1,"738":1,"740":1,"741":1,"745":2,"747":1,"748":1,"751":1,"752":2,"758":1,"759":1,"761":1,"762":1,"766":2,"768":1,"769":1,"775":2,"778":5,"779":3,"782":3,"786":1,"787":11,"788":7,"798":1,"802":1,"808":1,"809":5,"812":1,"816":1,"821":1,"822":1,"828":1,"832":1,"842":1,"875":1,"880":3,"881":3,"884":3,"885":1,"889":1,"892":2,"893":1,"896":2,"925":1,"927":3,"929":2,"930":1,"931":1,"935":1,"942":1,"944":3,"946":2,"947":1,"950":1,"965":1,"982":4,"1039":2,"1052":3,"1055":1,"1061":2,"1079":1,"1081":1,"1082":1,"1088":1,"1107":1,"1130":1,"1131":1,"1133":1,"1138":1,"1139":1,"1141":1,"1154":1,"1159":2,"1163":1,"1168":2,"1191":1,"1204":1,"1212":1,"1220":1,"1228":1,"1251":1,"1268":1,"1276":1,"1279":1,"1284":2,"1285":2,"1318":1,"1327":1,"1331":2,"1340":1,"1344":1,"1348":1,"1351":1,"1353":2,"1364":1,"1373":2,"1393":1,"1394":1,"1395":2,"1401":3,"1403":2}}],["will",{"2":{"8":3,"13":2,"14":1,"18":1,"20":1,"21":1,"26":1,"27":1,"34":3,"35":12,"36":1,"37":1,"42":1,"43":1,"44":1,"45":2,"51":1,"58":1,"59":1,"64":1,"67":2,"69":1,"75":2,"76":1,"80":2,"81":1,"83":1,"84":2,"90":5,"92":1,"94":5,"95":2,"96":1,"104":3,"106":4,"107":4,"115":3,"117":1,"125":1,"127":1,"131":1,"134":1,"151":3,"183":1,"186":1,"187":1,"188":1,"190":2,"198":1,"257":2,"258":1,"265":1,"266":1,"267":2,"270":7,"271":1,"272":2,"277":1,"280":2,"281":2,"282":1,"283":2,"285":2,"289":1,"291":1,"323":1,"325":3,"327":2,"328":2,"337":1,"345":3,"347":3,"355":3,"356":3,"359":3,"361":1,"362":1,"365":1,"376":1,"378":2,"386":2,"397":1,"398":1,"407":3,"408":2,"409":1,"410":2,"411":2,"413":1,"414":1,"415":1,"416":2,"417":1,"419":1,"421":3,"425":1,"426":1,"430":4,"432":1,"433":3,"434":2,"435":1,"474":1,"479":1,"480":3,"481":1,"483":1,"492":4,"497":4,"499":1,"507":2,"543":1,"567":1,"574":5,"601":2,"646":1,"650":1,"654":3,"659":1,"660":1,"665":2,"684":3,"689":3,"712":1,"745":2,"751":1,"752":5,"758":1,"759":1,"766":2,"775":2,"778":2,"782":1,"783":1,"787":2,"797":1,"798":3,"802":3,"804":1,"808":2,"822":1,"828":1,"841":1,"842":1,"861":1,"867":1,"888":1,"925":2,"928":1,"929":6,"930":2,"932":1,"942":2,"945":1,"946":8,"957":1,"965":1,"982":3,"1001":1,"1004":2,"1012":3,"1023":1,"1033":1,"1034":2,"1042":1,"1050":1,"1052":5,"1061":2,"1062":5,"1070":1,"1082":1,"1086":1,"1130":3,"1138":3,"1282":2,"1285":2,"1334":1,"1337":1,"1351":1,"1354":1,"1380":1}}],["warp",{"0":{"1123":1},"1":{"1124":1,"1125":1,"1126":1,"1127":1},"2":{"770":1,"816":1,"817":2,"1083":1,"1124":1,"1126":1}}],["warns",{"2":{"307":1,"308":1,"309":1,"311":1}}],["warnings",{"0":{"481":1,"483":1},"2":{"199":1,"289":1,"414":1,"421":2,"481":9,"482":2,"483":3,"497":1}}],["warning",{"2":{"95":1,"414":3,"416":1,"452":1,"530":1}}],["waiting",{"2":{"95":1,"393":1}}],["wait",{"2":{"95":1,"562":1}}],["ways",{"2":{"84":1,"171":1,"257":1,"264":1,"285":1,"384":1,"778":1}}],["way",{"2":{"56":1,"65":1,"69":1,"89":1,"130":1,"154":1,"257":1,"262":1,"265":1,"272":1,"274":1,"275":1,"282":1,"285":1,"329":1,"338":1,"356":3,"361":1,"362":2,"376":1,"391":1,"444":1,"751":1,"786":1,"875":1,"926":1,"929":1,"930":1,"943":1,"946":1,"975":1,"1033":1,"1130":1,"1138":1,"1285":1,"1353":1}}],["watched",{"2":{"327":1}}],["watch",{"0":{"327":1,"349":1},"2":{"45":3,"84":2,"85":1,"327":2,"349":2,"378":1}}],["was",{"2":{"27":1,"35":1,"45":2,"77":1,"78":1,"84":1,"86":1,"90":1,"94":1,"117":1,"188":1,"198":1,"199":3,"200":4,"262":1,"268":1,"272":1,"307":1,"328":1,"363":2,"386":1,"646":1,"659":1,"660":1,"683":1,"684":1,"689":1,"778":2,"822":1,"828":1,"832":1,"929":1,"946":1,"1004":1,"1011":1,"1012":1,"1081":4,"1086":2,"1087":12,"1088":2,"1089":4,"1090":1,"1099":1}}],["wanted",{"2":{"399":1}}],["want",{"0":{"404":1},"2":{"8":1,"14":1,"34":1,"35":2,"36":1,"44":1,"45":1,"51":1,"82":1,"105":1,"119":1,"126":1,"127":1,"158":1,"179":2,"182":1,"183":1,"252":1,"257":1,"260":1,"262":1,"291":1,"325":1,"327":1,"328":3,"349":1,"382":1,"384":3,"392":1,"394":1,"396":1,"407":1,"409":1,"414":3,"415":1,"417":1,"419":2,"476":1,"609":1,"827":1,"931":2,"947":2,"1034":1,"1131":1,"1139":1,"1394":1,"1395":1}}],["wallets",{"2":{"361":1,"363":1,"623":1,"629":1}}],["wallet",{"0":{"361":1,"619":1,"623":2,"624":1,"625":1,"626":1,"627":2,"628":1,"629":1,"630":1,"838":1,"1057":1},"2":{"1":1,"92":2,"94":2,"95":1,"172":6,"280":8,"361":4,"362":3,"363":7,"604":1,"605":1,"609":1,"619":8,"623":2,"627":2,"629":1,"693":4,"694":1,"695":1,"697":9,"698":12,"699":11,"834":2,"835":1,"838":1,"996":1,"997":1,"1054":2,"1055":1,"1057":3,"1309":1}}],["why",{"0":{"87":1,"104":1,"180":1},"2":{"87":1,"172":1,"180":1,"383":1,"386":1,"454":1,"786":1}}],["whilst",{"2":{"62":1}}],["while",{"2":{"45":1,"95":1,"131":1,"141":1,"171":1,"250":1,"309":2,"327":1,"337":1,"342":1,"345":2,"394":1,"432":1,"507":2,"654":1,"972":1,"1088":1}}],["whichever",{"2":{"36":1}}],["which",{"2":{"8":1,"14":1,"15":1,"21":1,"35":1,"43":1,"68":1,"89":1,"102":1,"106":1,"108":3,"152":1,"172":1,"181":1,"184":1,"192":2,"193":1,"199":1,"267":1,"276":1,"278":1,"279":1,"284":1,"291":1,"303":2,"307":1,"319":1,"328":2,"335":1,"337":2,"338":1,"342":2,"355":1,"356":3,"357":1,"365":1,"377":1,"384":1,"387":1,"395":1,"398":1,"402":1,"403":1,"416":1,"421":1,"428":1,"449":1,"454":1,"481":1,"497":3,"507":3,"583":1,"608":1,"788":1,"875":4,"895":1,"925":1,"942":1,"996":1,"1004":1,"1011":1,"1033":3,"1038":1,"1283":1,"1285":1,"1354":2}}],["whatever",{"2":{"257":1}}],["what",{"0":{"417":1},"2":{"42":1,"51":1,"85":1,"89":1,"90":1,"94":2,"109":1,"133":1,"183":1,"257":1,"277":1,"328":1,"342":1,"356":1,"365":1,"367":1,"383":1,"387":1,"393":1,"394":2,"415":1,"416":1,"444":1,"499":1,"544":1,"545":1,"546":1,"786":2,"929":1,"946":1,"1088":1,"1295":4,"1300":3,"1353":1,"1354":1}}],["whole",{"2":{"265":1,"446":1,"565":3,"1033":1}}],["whose",{"2":{"90":1,"253":1,"476":1,"1089":1,"1395":1}}],["who",{"2":{"25":1,"79":1,"257":1,"328":1,"419":1,"663":1,"701":1,"702":1,"772":1,"773":1,"797":1,"1068":1,"1275":1,"1278":1,"1308":1,"1333":4,"1379":4,"1401":1}}],["whether",{"2":{"363":1,"412":3,"421":15,"430":1,"432":1,"433":1,"434":1,"437":1,"442":1,"446":1,"467":1,"470":1,"491":1,"503":1,"530":1,"556":1,"568":1,"569":1,"573":1,"580":1,"581":1,"586":1,"782":1,"787":2,"849":1}}],["where",{"2":{"8":1,"24":1,"36":1,"51":1,"57":2,"65":1,"107":1,"120":1,"158":1,"172":1,"188":1,"196":1,"209":1,"211":1,"213":1,"215":1,"219":1,"221":1,"227":1,"229":1,"231":1,"233":1,"235":1,"237":1,"239":1,"241":1,"243":1,"245":2,"260":2,"272":1,"307":3,"308":1,"309":1,"357":1,"363":1,"365":1,"368":2,"384":1,"386":1,"400":1,"401":1,"402":2,"412":1,"421":4,"435":1,"439":2,"452":1,"561":1,"571":1,"585":1,"609":1,"660":1,"778":1,"786":1,"787":1,"812":1,"816":1,"879":2,"880":2,"883":2,"884":2,"887":2,"888":1,"1052":1,"1163":1,"1168":1,"1300":3,"1357":1,"1387":1,"1389":1}}],["whenever",{"2":{"84":1,"413":1,"1086":1}}],["when",{"0":{"177":1,"190":1},"2":{"3":2,"10":1,"13":2,"14":1,"17":1,"35":2,"37":1,"44":1,"62":1,"64":1,"65":1,"68":1,"76":2,"87":1,"89":1,"94":2,"102":1,"104":1,"108":1,"157":1,"171":1,"172":3,"188":2,"193":1,"195":1,"198":1,"199":1,"257":2,"260":3,"262":1,"266":1,"267":1,"268":1,"272":1,"307":1,"308":1,"309":1,"319":1,"327":2,"328":2,"338":1,"342":2,"345":2,"349":1,"353":1,"357":2,"359":2,"363":3,"365":1,"368":1,"371":1,"374":1,"384":3,"386":1,"388":1,"392":1,"398":1,"412":2,"413":1,"416":1,"418":1,"421":2,"427":1,"431":1,"433":2,"434":3,"443":1,"446":1,"447":1,"451":1,"452":1,"481":1,"496":1,"497":2,"507":1,"578":1,"694":1,"752":1,"759":1,"778":1,"786":3,"787":2,"788":2,"798":1,"808":1,"841":1,"875":2,"880":1,"884":1,"892":1,"894":1,"972":1,"975":2,"976":1,"1086":1,"1089":1,"1090":1,"1150":1,"1260":1,"1314":1,"1321":1,"1324":1,"1337":1,"1348":1,"1351":1,"1361":1,"1406":1}}],["dx",{"2":{"333":1,"1354":1}}],["dylib",{"2":{"177":1}}],["dyld",{"2":{"177":1}}],["dynamic",{"0":{"102":1},"2":{"102":6,"172":7,"260":1,"279":1,"752":2,"927":1,"944":1,"1348":1}}],["dschief",{"2":{"260":1}}],["ds",{"2":{"117":2,"201":1}}],["dstestplus",{"2":{"185":1}}],["dstest",{"0":{"202":1},"1":{"203":1,"204":1,"205":1,"206":1,"207":1,"208":1,"209":1,"210":1,"211":1,"212":1,"213":1,"214":1,"215":1,"216":1,"217":1,"218":1,"219":1,"220":1,"221":1,"222":1,"223":1,"224":1,"225":1,"226":1,"227":1,"228":1,"229":1,"230":1,"231":1,"232":1,"233":1,"234":1,"235":1,"236":1,"237":1,"238":1,"239":1,"240":1,"241":1,"242":1,"243":1,"244":1,"245":1,"246":1},"2":{"37":1,"170":1,"179":1,"185":2,"202":1,"329":1,"331":1,"332":1,"356":2,"1354":2,"1384":1}}],["d",{"2":{"77":1,"78":1,"327":1,"394":1,"396":1,"620":2,"782":2,"929":2,"946":2,"976":1,"1285":2}}],["dweb",{"2":{"62":1}}],["dummy",{"2":{"1052":1}}],["dump",{"2":{"35":6}}],["dumpstate",{"2":{"13":2}}],["duplicate",{"2":{"367":1,"418":1}}],["duration",{"2":{"327":1}}],["during",{"0":{"1091":1},"2":{"149":1,"265":1,"266":1,"268":2,"270":1,"274":1,"327":1,"342":1,"344":1,"345":1,"348":1,"355":1,"421":4,"425":1,"481":1,"482":1,"484":1,"529":2,"557":1,"583":1,"782":2,"808":1,"812":1,"816":1,"1088":1,"1089":2}}],["dutch",{"0":{"255":1},"2":{"255":1,"256":1}}],["duties",{"2":{"87":1}}],["due",{"2":{"61":1,"262":1,"267":1,"355":1,"536":1,"775":1,"957":1}}],["day",{"2":{"387":1}}],["dapp",{"2":{"323":1,"431":1,"435":1,"436":1,"437":1,"438":1,"439":1,"440":1,"441":1,"442":1,"443":1,"458":10,"462":1,"463":1,"464":1,"465":1,"466":1,"467":1,"468":1,"470":1,"473":1,"474":1,"475":1,"476":1,"477":1,"478":1,"479":1,"480":1,"481":1,"482":1,"483":1,"484":1,"485":1,"488":1,"489":1,"491":1,"492":1,"493":1,"529":1,"530":1,"531":1,"532":1,"533":1,"534":1,"535":1,"536":1,"537":1,"538":1,"539":1,"540":1,"541":1,"542":1,"543":1,"547":1,"548":1,"549":1,"550":1,"551":1,"552":1,"553":1,"554":1,"557":1,"558":1,"559":1,"560":1,"564":1}}],["dapptools",{"2":{"257":1}}],["dappsys",{"2":{"202":1,"329":1,"1354":2}}],["dangerous",{"2":{"198":1}}],["datetime",{"2":{"944":2}}],["date",{"0":{"178":1},"2":{"329":1,"388":1,"1353":1}}],["datasets",{"2":{"279":2,"280":2}}],["dataset",{"2":{"278":2,"279":2,"280":2}}],["datachiselfast",{"2":{"134":1}}],["data`",{"2":{"35":1}}],["data",{"0":{"143":1,"254":1,"416":1},"2":{"25":2,"35":4,"67":1,"74":1,"75":2,"78":1,"132":1,"142":1,"143":1,"165":1,"172":5,"184":1,"187":1,"249":1,"251":2,"252":6,"254":9,"308":4,"313":3,"319":1,"328":7,"339":2,"342":2,"344":1,"355":1,"365":5,"378":2,"386":2,"387":3,"392":1,"393":1,"543":2,"777":4,"778":6,"782":1,"783":1,"787":6,"798":1,"802":5,"804":3,"827":1,"840":1,"842":7,"875":1,"879":2,"880":6,"883":2,"884":6,"887":2,"888":3,"891":1,"892":5,"894":1,"929":3,"932":1,"946":3,"947":2,"972":1,"988":2,"1021":1,"1052":13,"1055":1,"1075":1,"1085":1,"1088":3,"1091":5,"1194":2,"1195":1,"1254":2,"1255":1,"1279":1,"1310":1,"1321":2,"1388":2,"1390":3,"1393":1,"1395":3}}],["dai=0x6b175474e89094c44da98b954eedeac495271d0f",{"2":{"81":1}}],["dai",{"0":{"81":1},"2":{"79":2,"81":1,"133":1,"329":2,"378":2,"703":2,"1289":2,"1354":1}}],["darwin",{"2":{"51":2}}],["db",{"2":{"35":1}}],["draft",{"2":{"188":3}}],["dramatically",{"2":{"171":1}}],["drainers",{"2":{"3":1}}],["dry",{"0":{"415":1},"2":{"43":1,"89":1,"415":2,"416":1,"609":1,"844":1,"846":1}}],["droptransaction",{"2":{"13":1}}],["dialect",{"2":{"926":2,"943":2}}],["diagrams",{"2":{"359":1}}],["diagram",{"2":{"272":2}}],["dictionary",{"0":{"567":1,"579":1},"2":{"421":4,"567":3,"574":1,"579":3}}],["divbyzero",{"2":{"506":1}}],["div",{"0":{"500":1}}],["diversifying",{"2":{"363":1}}],["dives",{"2":{"277":1}}],["divisionerror",{"0":{"1312":1},"1":{"1313":1,"1314":1},"2":{"1313":1,"1383":1}}],["division",{"2":{"311":3,"500":1,"506":1,"1314":2}}],["dividebeforemultiply",{"2":{"311":1}}],["divide",{"0":{"311":1},"2":{"172":2,"311":1}}],["divided",{"2":{"37":1}}],["dimensions",{"2":{"262":1}}],["didn",{"2":{"195":1,"786":1}}],["did",{"2":{"185":1,"253":1,"787":2}}],["digitals",{"2":{"927":1}}],["digits",{"2":{"45":1,"51":1,"944":1}}],["digest",{"2":{"74":1,"1054":2,"1055":2,"1056":2,"1057":1}}],["direntry",{"2":{"802":1}}],["directivedescriptionscopedisable",{"2":{"453":1}}],["directive",{"2":{"452":2,"454":1}}],["directives",{"0":{"453":1},"2":{"370":1,"452":2,"453":1}}],["directly",{"2":{"84":1,"145":1,"252":1,"272":1,"319":1,"337":1,"362":2,"374":1,"444":1,"1023":1,"1033":1}}],["direct",{"2":{"72":1,"73":1,"102":1,"319":1,"802":1}}],["directories",{"2":{"54":1,"100":1,"172":1,"188":1,"303":1,"339":1,"354":1,"394":2,"396":1,"402":1,"414":1,"473":1,"475":1,"481":1,"507":2}}],["directory",{"2":{"31":1,"35":4,"84":2,"93":1,"94":1,"104":2,"106":4,"107":3,"108":1,"120":2,"158":3,"187":2,"188":1,"285":1,"303":2,"304":1,"323":4,"327":1,"339":1,"347":1,"353":1,"384":1,"393":1,"394":2,"402":2,"407":1,"414":4,"421":6,"476":1,"481":1,"486":6,"798":1,"802":4,"803":1,"804":2,"808":1,"820":1,"826":1,"969":1,"1296":1,"1301":1}}],["dirt",{"2":{"609":1}}],["dir=",{"2":{"353":1}}],["dir",{"0":{"571":1,"585":1},"2":{"35":1,"88":1,"353":3,"421":4,"571":1,"585":1,"803":1}}],["diffing",{"2":{"369":1}}],["difficult",{"2":{"25":1,"787":1}}],["difficulty",{"0":{"541":1,"710":1},"1":{"711":1,"712":1,"713":1},"2":{"25":2,"84":1,"292":3,"338":1,"421":2,"541":3,"711":1,"712":1,"713":2,"770":1,"965":1}}],["diffs",{"2":{"285":1,"1075":1,"1086":1,"1089":1}}],["differ",{"2":{"285":1,"328":1}}],["difference",{"2":{"353":1,"1292":1,"1357":1}}],["differences",{"2":{"283":1,"1088":1}}],["differentiate",{"2":{"314":1}}],["differential",{"0":{"247":1,"250":1,"251":1,"252":1,"253":1,"255":1},"1":{"248":1,"249":1,"250":1,"251":2,"252":2,"253":2,"254":2,"255":1,"256":1},"2":{"247":2,"248":6,"250":1,"251":2,"252":1,"253":1,"255":4,"277":1}}],["differently",{"2":{"258":1,"929":1,"946":1}}],["different",{"2":{"3":1,"57":2,"58":1,"89":1,"90":1,"92":1,"96":1,"109":1,"131":1,"250":1,"254":1,"257":1,"262":1,"264":3,"265":2,"276":1,"282":1,"283":1,"285":1,"337":1,"344":1,"345":1,"346":2,"353":1,"357":1,"378":2,"394":1,"398":2,"416":1,"473":1,"786":1,"798":1,"875":1,"876":1,"888":1,"896":1,"1056":1}}],["diff",{"2":{"283":5,"1086":1}}],["disallowed",{"2":{"803":1}}],["disabling",{"2":{"62":1,"454":2}}],["disabled",{"0":{"194":1,"195":1},"2":{"193":2,"195":1,"307":1,"433":1,"434":1,"582":1,"803":1}}],["disable",{"2":{"13":2,"17":2,"20":2,"35":2,"307":2,"308":2,"309":2,"311":2,"313":2,"314":2,"315":2,"316":2,"317":2,"319":2,"370":6,"452":3,"453":1,"454":2,"808":1,"1086":1}}],["disables",{"2":{"8":1,"14":1,"17":1,"18":2,"291":1,"421":3}}],["discouraged",{"2":{"787":1}}],["discourage",{"2":{"409":1}}],["discarding",{"2":{"470":1}}],["discarded",{"2":{"267":1,"651":1}}],["discard",{"2":{"257":1,"650":1,"654":1}}],["discrete",{"2":{"255":1}}],["discrepancies",{"2":{"248":2}}],["disposal",{"2":{"134":1}}],["displaying",{"2":{"573":1}}],["displayed",{"2":{"37":1,"282":1,"348":5,"529":5}}],["displays",{"2":{"31":2,"108":1,"972":1}}],["display",{"0":{"621":1},"2":{"15":1,"35":10,"172":1,"179":1,"283":2,"348":1,"359":1,"421":1,"446":1,"573":1,"586":1,"608":1,"972":2}}],["distinct",{"2":{"398":1}}],["distinguish",{"2":{"317":1,"384":1}}],["distribution",{"0":{"267":1},"2":{"173":1,"267":1,"270":1,"272":1}}],["distributed",{"2":{"152":1,"267":1}}],["dist",{"2":{"35":1}}],["disk",{"2":{"18":1,"327":1,"350":1,"483":1,"802":2,"808":1}}],["dostuff",{"2":{"1117":1}}],["dos",{"2":{"957":1}}],["dosomething",{"2":{"651":2}}],["double",{"2":{"421":1,"439":3}}],["doubt",{"2":{"363":1}}],["dot",{"2":{"414":1,"1131":1,"1139":1}}],["doing",{"2":{"387":1,"932":1}}],["domain",{"2":{"126":1,"172":1}}],["domainseparatorv4",{"2":{"172":1}}],["domainseparator",{"2":{"74":1}}],["does",{"0":{"104":1},"2":{"87":1,"90":2,"93":1,"94":2,"106":1,"131":2,"179":1,"199":1,"257":1,"325":1,"327":1,"328":1,"342":1,"345":2,"355":1,"363":1,"374":1,"383":1,"408":1,"485":1,"751":1,"778":1,"783":2,"786":1,"787":1,"798":2,"802":4,"804":1,"880":1,"884":1,"892":1,"957":1,"1081":4,"1285":2}}],["doesn",{"2":{"77":1,"78":1,"117":1,"151":1,"187":1,"265":1,"309":1,"328":1,"431":2,"759":1,"798":1,"802":1}}],["downloading",{"2":{"393":1,"421":1}}],["download",{"2":{"157":1,"407":1,"408":1,"480":1}}],["downloaded",{"2":{"150":1,"419":1}}],["down",{"2":{"40":1,"41":1,"42":1,"311":1,"654":1}}],["doc",{"2":{"326":1,"359":2,"422":1,"423":1,"424":1,"425":2,"426":1,"427":1}}],["document",{"2":{"459":1}}],["documenting",{"2":{"359":1,"375":1}}],["documents",{"2":{"193":1,"204":1,"216":1,"460":1}}],["documentation",{"0":{"160":1,"422":1},"1":{"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"423":1,"424":1,"425":1,"426":1,"427":1},"2":{"13":1,"14":2,"106":1,"115":2,"123":1,"162":1,"170":2,"172":5,"192":1,"359":1,"420":1,"422":1,"423":1,"424":1,"427":1,"497":1,"500":1,"501":1,"502":1,"503":1,"504":1}}],["doc`",{"2":{"172":1}}],["docstring",{"2":{"359":1}}],["docs",{"2":{"44":1,"117":1,"172":1,"289":2,"359":1,"398":1,"423":1,"487":1}}],["dockerfile",{"2":{"85":1,"86":1}}],["docker",{"0":{"24":1,"82":1,"84":1,"88":1,"157":1},"1":{"25":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1},"2":{"24":1,"82":2,"83":3,"84":6,"85":9,"86":5,"87":4,"88":4,"157":9,"162":1,"178":1}}],["donate",{"2":{"787":2}}],["done",{"2":{"342":1,"352":1,"393":5,"507":1,"752":1}}],["donotcheckdata",{"2":{"328":2}}],["don",{"0":{"180":1},"2":{"17":1,"20":1,"83":1,"157":1,"257":1,"362":1,"364":1,"367":1,"384":1,"386":2,"418":1,"929":1,"932":1,"946":1,"975":1}}],["do",{"0":{"181":1,"182":1,"183":1,"184":1,"185":1,"186":1},"2":{"8":2,"43":1,"48":1,"59":1,"87":1,"92":1,"115":1,"133":1,"158":1,"172":1,"175":1,"179":1,"249":1,"254":1,"289":2,"307":1,"308":1,"309":1,"325":3,"327":2,"328":2,"334":1,"338":1,"355":1,"364":1,"371":1,"388":1,"396":1,"399":1,"409":1,"414":1,"416":1,"421":4,"786":2,"788":2,"821":1,"930":1,"1033":1,"1284":2}}],["dexpool",{"2":{"889":3}}],["deemed",{"2":{"787":1}}],["deeper",{"2":{"355":1}}],["deep",{"2":{"172":1,"1131":1,"1139":1}}],["de",{"2":{"441":1}}],["deduplicate",{"2":{"495":1}}],["deduce",{"2":{"397":1,"928":1,"945":1}}],["dedicated",{"2":{"265":1,"272":1,"275":1,"383":1,"384":1}}],["debounce",{"2":{"327":1}}],["debugger",{"0":{"36":1,"37":1},"1":{"37":1,"38":1,"39":1,"40":1,"41":1,"42":1},"2":{"36":3,"37":1,"39":1,"325":4,"659":1,"660":2,"661":1}}],["debugging",{"2":{"33":1,"37":1,"83":1,"134":1,"146":1,"167":1,"171":1}}],["debug",{"2":{"12":2,"17":1,"35":2,"36":6,"134":1,"200":3,"325":1,"485":1,"931":1,"947":1}}],["deoptimizing",{"2":{"264":1}}],["deny",{"0":{"483":1},"2":{"421":1,"483":2}}],["denoting",{"2":{"355":1}}],["denoted",{"2":{"262":1}}],["denied",{"0":{"189":1},"2":{"189":1}}],["delimiter",{"2":{"715":1,"717":2,"720":2,"722":1,"724":2,"727":2,"729":1,"731":2,"734":2,"736":1,"738":2,"741":2,"743":1,"745":2,"748":2,"750":7,"752":2,"757":1,"759":3,"762":2,"764":1,"766":2,"769":2}}],["delay",{"2":{"327":6}}],["deltas",{"2":{"393":1}}],["delta",{"0":{"1290":1},"1":{"1291":1,"1292":1,"1293":1},"2":{"215":2,"243":1,"245":1,"393":2,"1154":1,"1155":2,"1159":1,"1163":1,"1164":2,"1168":1,"1291":2,"1293":1,"1391":1}}],["delegation",{"2":{"1050":2,"1051":4,"1052":7}}],["delegate",{"2":{"266":1,"268":1,"960":4,"1050":1,"1052":3,"1074":3,"1075":1,"1087":1}}],["delegatecall",{"2":{"40":1,"308":1,"959":2,"960":4,"1073":2,"1074":4,"1075":1,"1085":1,"1087":2}}],["delegated",{"2":{"3":1,"1050":1,"1051":1}}],["deleted",{"2":{"416":2,"1081":2}}],["delete",{"2":{"371":1,"416":1,"1081":3,"1082":1}}],["deletestatesnapshots",{"2":{"1081":1}}],["deletestatesnapshot",{"2":{"1081":1}}],["deletes",{"2":{"31":1,"35":1,"1081":1,"1082":1}}],["deactivating",{"2":{"1276":1}}],["deadbeef",{"2":{"441":1}}],["deadline",{"2":{"172":4}}],["deal",{"0":{"700":1,"1286":1},"1":{"701":1,"702":1,"703":1,"704":1,"1287":1,"1288":1,"1289":1},"2":{"172":2,"329":1,"701":1,"702":1,"703":2,"704":1,"770":1,"1056":1,"1083":2,"1287":3,"1288":2,"1289":1,"1382":1}}],["decoding",{"0":{"929":1,"930":1,"946":1},"2":{"798":1}}],["decodes",{"2":{"254":1}}],["decoded",{"2":{"192":1,"325":1,"927":2,"929":7,"944":2,"946":7}}],["decode",{"2":{"133":3,"172":2,"192":1,"249":1,"251":1,"254":1,"329":1,"355":1,"587":2,"799":1,"842":3,"925":1,"929":5,"930":2,"931":2,"942":1,"946":5,"947":2,"988":1,"1353":1}}],["dec",{"2":{"613":1,"620":2}}],["decreased",{"2":{"786":1,"1112":1}}],["decrease",{"2":{"609":1,"957":1,"1004":1}}],["decremented",{"2":{"274":1}}],["decrypt",{"2":{"363":1}}],["decisions",{"2":{"172":1}}],["decimals",{"2":{"43":2,"203":2,"213":1,"215":20,"221":1,"229":1,"233":1,"237":1,"241":1,"271":4,"1158":4,"1159":1,"1167":4,"1168":1,"1190":4,"1191":1,"1203":4,"1204":1,"1211":4,"1212":1,"1219":4,"1220":1,"1227":4,"1228":1,"1250":4,"1251":1}}],["decimal",{"0":{"213":1},"1":{"214":1},"2":{"27":1,"148":2,"203":2,"213":1,"214":1,"327":1,"620":2,"745":1,"766":1,"927":1,"944":1}}],["declare",{"2":{"783":1}}],["declared",{"2":{"115":3,"260":2,"262":1,"356":1}}],["declarations",{"2":{"434":1}}],["declaratively",{"2":{"89":1}}],["demonstration",{"2":{"783":1}}],["demonstrating",{"2":{"67":1}}],["demonstrated",{"2":{"276":1}}],["demonstrate",{"2":{"75":1,"344":1}}],["demand",{"2":{"8":1,"17":1,"1107":1}}],["detail",{"2":{"328":1,"356":1,"421":1,"459":1}}],["detailed",{"2":{"133":1,"134":1,"138":1,"172":1,"203":1,"215":1,"444":1}}],["details",{"0":{"495":1,"496":2},"2":{"14":1,"15":1,"76":1,"77":3,"78":8,"95":2,"172":1,"258":1,"259":1,"263":1,"305":1,"345":1,"393":1,"421":1,"495":1,"496":2,"1079":1,"1353":1}}],["detection",{"2":{"421":1,"478":1}}],["detectors",{"2":{"115":1}}],["detector",{"2":{"115":2}}],["detect",{"0":{"474":1,"479":1},"2":{"115":1,"183":1,"289":2,"407":1,"410":1,"421":5,"474":3,"479":2,"480":1}}],["detected",{"2":{"45":2,"84":1,"117":1,"480":1}}],["determinism",{"2":{"184":1}}],["deterministic",{"0":{"57":1},"2":{"57":1,"58":2,"59":1,"62":1,"65":2,"66":1,"162":1,"387":1,"388":1}}],["determine",{"2":{"75":1}}],["determines",{"2":{"65":1,"488":1,"544":1,"545":1,"546":1,"1087":1,"1088":1}}],["determined",{"2":{"65":1,"94":1,"751":1}}],["devices",{"2":{"797":1}}],["dev",{"2":{"62":1,"87":1,"88":1,"106":3,"107":1,"392":1,"409":1,"1395":3}}],["devdoc",{"2":{"62":1}}],["devnet",{"2":{"35":1}}],["develop",{"2":{"272":1}}],["developers",{"2":{"33":1,"67":1,"87":1,"414":1}}],["developer",{"2":{"3":1,"97":1,"134":1}}],["development",{"0":{"140":1,"148":1},"2":{"0":1,"48":1,"95":1,"97":2,"134":2,"139":1,"154":1,"159":1,"162":3,"164":1,"166":1,"168":1,"172":4,"363":3,"386":1,"895":1}}],["defi",{"2":{"172":1,"392":1}}],["defines",{"2":{"439":1,"561":2}}],["define",{"2":{"115":1,"265":1,"365":1,"388":1,"407":2,"782":1,"929":2,"930":1,"931":2,"946":2,"947":2,"1052":1}}],["defined",{"2":{"25":1,"35":1,"76":1,"77":2,"192":2,"198":1,"260":4,"262":4,"279":1,"438":1,"439":1,"440":1,"441":1,"456":1,"508":1,"702":1,"758":1,"927":1,"929":1,"944":2,"946":1}}],["definitely",{"2":{"328":1}}],["definition",{"0":{"279":1},"2":{"72":2,"73":1,"75":1,"76":1,"248":1,"278":1,"433":2,"929":1,"930":1,"946":1}}],["definitions",{"2":{"34":2,"69":2,"70":1,"78":1,"172":2,"367":1,"433":4}}],["defining",{"0":{"264":1},"1":{"265":1},"2":{"25":1}}],["def",{"2":{"128":3,"130":4}}],["defaultoriginaddress",{"2":{"983":2}}],["defaultbadtokens",{"2":{"755":2}}],["defaultvalue",{"2":{"750":14,"751":1,"752":3}}],["defaultformatter",{"2":{"121":1}}],["defaultsenderaddress",{"2":{"983":1}}],["defaults",{"2":{"45":1,"200":1,"266":1,"327":1,"421":1,"574":3,"608":2,"629":2,"802":1}}],["default",{"0":{"3":1,"10":1,"194":1,"195":1,"373":1,"421":1},"2":{"3":2,"8":1,"9":1,"10":1,"17":9,"18":4,"19":2,"20":2,"35":1,"45":2,"58":1,"59":1,"62":1,"64":3,"65":2,"94":3,"96":1,"102":2,"104":2,"106":3,"108":5,"109":4,"115":2,"117":2,"122":1,"172":5,"176":1,"179":1,"192":1,"193":2,"194":2,"195":3,"257":1,"258":1,"266":1,"270":3,"281":1,"283":1,"285":1,"303":1,"323":1,"327":2,"346":1,"347":1,"348":1,"349":1,"352":3,"353":3,"356":1,"373":1,"384":1,"386":1,"394":3,"395":1,"396":1,"402":3,"407":1,"410":1,"416":1,"421":3,"423":1,"425":2,"427":1,"431":2,"435":1,"436":1,"437":1,"438":2,"439":2,"440":2,"441":2,"442":1,"443":1,"444":3,"445":3,"446":3,"447":4,"449":1,"450":1,"451":1,"456":2,"459":2,"460":1,"462":1,"463":1,"464":1,"465":1,"466":1,"467":1,"468":1,"469":1,"470":1,"473":1,"474":1,"475":1,"476":2,"477":1,"478":1,"479":1,"480":1,"481":1,"482":1,"483":1,"484":1,"485":3,"486":1,"487":1,"488":2,"489":1,"491":1,"492":1,"493":1,"494":1,"495":1,"496":1,"497":2,"499":2,"500":1,"501":1,"502":1,"503":1,"504":1,"505":1,"506":3,"507":5,"510":1,"511":1,"512":1,"513":1,"514":1,"529":1,"530":1,"531":1,"532":1,"533":1,"534":1,"535":1,"536":2,"537":1,"538":1,"539":1,"540":1,"541":1,"542":1,"543":1,"545":2,"546":3,"547":1,"548":1,"549":1,"550":1,"551":1,"552":1,"553":1,"554":1,"555":1,"556":1,"557":1,"558":1,"559":1,"560":1,"561":1,"562":1,"564":1,"565":1,"566":1,"567":1,"568":1,"569":1,"570":1,"571":1,"572":1,"573":1,"574":3,"575":1,"576":1,"577":1,"578":1,"579":1,"580":1,"581":1,"582":1,"583":1,"584":1,"585":1,"586":1,"624":1,"625":2,"628":1,"646":1,"751":1,"752":3,"754":1,"755":1,"787":2,"797":1,"798":1,"803":3,"808":3,"822":1,"828":1,"850":2,"875":1,"876":1,"973":1,"975":1,"1306":1,"1372":1,"1399":1}}],["deriverememberkey",{"0":{"1307":1},"1":{"1308":1,"1309":1,"1310":1,"1311":1},"2":{"709":1,"998":1,"1308":1,"1310":2,"1369":1}}],["derives",{"2":{"707":1}}],["derivekey",{"0":{"705":1},"1":{"706":1,"707":1,"708":1,"709":1},"2":{"706":2,"708":2,"997":1,"998":1,"1122":1,"1311":1}}],["derive",{"2":{"70":1,"76":1,"694":1,"707":1,"708":2,"997":1,"1309":1}}],["derived",{"2":{"17":1,"65":1,"260":1,"363":1,"608":1,"807":3,"1340":2,"1344":2}}],["derivation",{"2":{"1":1,"17":3,"623":1,"629":2,"707":2}}],["destination",{"2":{"363":1}}],["dest",{"2":{"323":1}}],["destructs",{"2":{"15":1}}],["descending",{"2":{"282":1}}],["desc",{"2":{"282":1}}],["descriptive",{"2":{"172":2,"371":1}}],["descriptions",{"2":{"203":1,"215":1}}],["description",{"0":{"7":1,"33":1,"296":1,"302":1,"593":1,"599":1,"606":1,"633":1,"637":1,"642":1,"646":1,"650":1,"654":1,"659":1,"664":1,"669":1,"673":1,"676":1,"680":1,"684":1,"689":1,"694":1,"702":1,"707":1,"712":1,"716":1,"723":1,"730":1,"737":1,"744":1,"751":1,"758":1,"765":1,"773":1,"778":1,"782":1,"787":1,"793":1,"797":1,"803":1,"808":1,"812":1,"816":1,"820":1,"826":1,"832":1,"835":1,"841":1,"845":1,"849":1,"854":1,"858":1,"863":1,"867":1,"870":1,"875":1,"880":1,"884":1,"888":1,"892":1,"901":1,"905":1,"909":1,"913":1,"917":1,"921":1,"925":1,"938":1,"942":1,"953":1,"957":1,"960":1,"965":1,"969":1,"972":1,"982":1,"987":1,"991":1,"996":1,"1001":1,"1004":1,"1007":1,"1012":1,"1017":1,"1022":1,"1027":1,"1032":1,"1038":1,"1042":1,"1047":1,"1051":1,"1055":1,"1061":1,"1065":1,"1069":1,"1074":1,"1079":1,"1082":1,"1086":1,"1095":1,"1099":1,"1102":1,"1107":1,"1111":1,"1116":1,"1120":1,"1125":1,"1130":1,"1138":1,"1146":1,"1150":1,"1154":1,"1159":1,"1163":1,"1168":1,"1187":1,"1191":1,"1195":1,"1200":1,"1204":1,"1208":1,"1212":1,"1216":1,"1220":1,"1224":1,"1228":1,"1247":1,"1251":1,"1255":1,"1260":1,"1263":1,"1268":1,"1271":1,"1276":1,"1279":1,"1282":1,"1288":1,"1292":1,"1296":1,"1301":1,"1306":1,"1309":1,"1314":1,"1317":1,"1321":1,"1324":1,"1327":1,"1331":1,"1334":1,"1337":1,"1340":1,"1344":1,"1348":1,"1351":1,"1357":1,"1361":1,"1364":1,"1367":1,"1372":1,"1376":1,"1380":1,"1399":1,"1402":1,"1406":1},"1":{"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"1062":1,"1131":1,"1139":1},"2":{"289":2,"305":1,"379":1,"384":4,"444":1,"495":1,"496":1}}],["describes",{"2":{"459":1}}],["described",{"2":{"446":1,"447":1,"574":1,"928":1,"945":1}}],["describe",{"2":{"106":1,"384":1}}],["desktop",{"2":{"154":1}}],["designates",{"2":{"1051":1}}],["designate",{"2":{"1050":2}}],["designated",{"2":{"328":1,"1087":1}}],["designing",{"2":{"267":1}}],["designed",{"2":{"67":1,"409":1}}],["desired",{"2":{"126":2,"264":1,"265":1,"266":3,"271":1,"272":1,"275":1,"620":1}}],["despite",{"2":{"78":1,"444":1}}],["deps",{"2":{"400":2,"412":1,"413":3}}],["dep",{"2":{"399":1}}],["deposited",{"2":{"1151":3}}],["depositeth",{"2":{"347":1}}],["depositerc20",{"2":{"347":1}}],["depositor",{"2":{"276":1}}],["depositing",{"2":{"273":1}}],["deposits",{"2":{"260":1,"271":1,"382":1,"1151":1}}],["depositsum",{"2":{"172":3}}],["deposit",{"2":{"172":5,"173":1,"271":1,"272":4,"273":2,"274":3,"275":6,"276":4,"347":1,"1151":3}}],["dependency~1",{"2":{"408":1}}],["dependency",{"0":{"396":1,"406":1,"407":1,"408":1,"409":1},"1":{"407":1,"408":1,"409":1},"2":{"106":1,"120":1,"172":3,"198":1,"357":1,"369":1,"394":1,"396":1,"398":2,"399":1,"400":1,"403":1,"407":4,"408":6,"409":1,"410":1,"411":3,"413":2,"416":1,"418":1,"536":1}}],["dependencies",{"0":{"120":1,"369":1,"395":1,"397":1,"399":1,"400":1,"410":1,"411":1,"413":3,"419":1},"1":{"396":1,"397":1,"398":1,"399":1,"400":1,"401":1},"2":{"87":1,"104":2,"106":1,"107":1,"120":1,"159":1,"172":8,"248":1,"367":1,"395":1,"397":1,"398":1,"399":1,"400":1,"401":1,"402":2,"403":1,"407":6,"408":1,"409":1,"410":6,"411":1,"413":2,"418":2,"419":2,"467":1}}],["depending",{"2":{"61":1,"62":1,"375":1,"927":1,"944":1}}],["deprecated",{"2":{"52":1,"325":1,"861":1,"1274":1}}],["deploynoargs",{"2":{"1096":1}}],["deployother",{"2":{"1070":1}}],["deploycontract",{"2":{"106":1}}],["deploycodeto",{"0":{"1299":1},"1":{"1300":1,"1301":1,"1302":1,"1303":1},"2":{"776":1,"823":1,"1298":1,"1300":3,"1302":1,"1382":1}}],["deploycode",{"0":{"1294":1},"1":{"1295":1,"1296":1,"1297":1,"1298":1},"2":{"102":1,"128":2,"129":2,"507":1,"776":1,"823":1,"1295":4,"1297":1,"1303":1,"1382":1}}],["deployscript",{"2":{"172":2}}],["deploys",{"2":{"55":1,"159":1,"378":1,"1296":1,"1301":1}}],["deployment",{"2":{"44":1,"45":2,"56":1,"57":1,"61":1,"64":1,"84":1,"86":1,"87":4,"95":1,"115":1,"162":2,"172":21,"173":1,"284":6,"376":1,"421":1,"492":1,"621":1,"1297":1}}],["deployments",{"0":{"44":1,"57":1},"2":{"10":1,"35":1,"57":1,"58":1,"65":1,"66":1,"162":1,"355":1}}],["deploy",{"0":{"138":1,"290":1},"2":{"35":2,"43":6,"44":2,"57":2,"59":1,"82":1,"86":2,"87":1,"89":1,"91":1,"92":1,"94":2,"95":1,"96":1,"128":2,"129":2,"131":1,"134":1,"138":2,"172":13,"192":1,"286":1,"356":1,"358":1,"362":1,"375":1,"376":2,"378":1,"390":1,"492":1,"507":1,"665":1,"775":1,"821":2,"826":1,"827":1,"1052":4,"1283":1}}],["deployedcode",{"2":{"1085":1,"1088":1,"1091":1}}],["deployedbytecode",{"2":{"487":1,"827":1}}],["deployedaddress",{"2":{"376":1}}],["deployed",{"2":{"15":1,"43":1,"45":2,"57":1,"65":2,"86":3,"94":1,"95":2,"102":1,"172":1,"266":3,"268":3,"269":2,"270":2,"291":1,"356":2,"364":1,"386":1,"421":1,"492":1,"646":2,"821":3,"826":1,"827":1,"1088":1,"1282":2,"1283":1,"1354":1}}],["deployerprivatekey",{"2":{"172":5}}],["deployers",{"2":{"94":1}}],["deployer",{"0":{"10":1,"86":1},"2":{"10":1,"17":1,"43":1,"57":3,"58":5,"64":1,"65":5,"86":2,"92":1,"172":1,"356":2,"393":1,"421":2,"646":1,"997":4,"1052":5,"1281":1,"1282":1,"1310":5,"1354":1}}],["deploying",{"0":{"43":1,"65":1,"92":1,"95":1,"96":1,"129":1},"1":{"93":1,"94":1,"95":1,"96":1},"2":{"5":1,"7":1,"17":1,"43":1,"44":1,"65":1,"92":1,"115":1,"135":1,"164":1}}],["depthintegerthe",{"2":{"447":1}}],["depth",{"0":{"576":1,"1304":1},"1":{"1305":1,"1306":1},"2":{"1":1,"27":1,"172":2,"195":3,"262":3,"421":1,"447":1,"458":1,"576":1,"664":1,"786":9,"787":4,"1069":1,"1085":1,"1088":2,"1305":2,"1331":1,"1393":1,"1394":1}}],["oldvalue",{"2":{"1092":2}}],["oldbalance",{"2":{"1085":1,"1088":1,"1091":1}}],["older",{"2":{"61":1,"154":1,"187":1,"193":2}}],["obj3",{"2":{"1131":1,"1134":3,"1139":1,"1142":3}}],["obj2",{"2":{"1034":2,"1131":2,"1134":4,"1139":2,"1142":6}}],["obj1",{"2":{"1034":4,"1131":5,"1134":5,"1139":5,"1142":9}}],["objectkey",{"2":{"1031":15,"1033":3}}],["objects",{"0":{"929":1,"930":1},"2":{"393":4,"507":1,"929":1,"931":1,"946":2,"1033":4}}],["object",{"2":{"355":1,"927":2,"929":3,"930":1,"944":3,"946":3,"1022":1,"1032":1,"1033":6,"1034":4,"1130":6,"1131":2,"1133":2,"1134":1,"1138":6,"1139":2,"1141":2,"1142":1,"1285":3}}],["objective",{"2":{"75":1}}],["octal",{"2":{"620":1}}],["oct",{"2":{"620":1}}],["occurred",{"2":{"1086":1,"1088":2,"1090":1}}],["occurrences",{"2":{"309":1}}],["occurrence",{"2":{"307":1,"308":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1}}],["occurs",{"2":{"64":1,"250":1,"421":1,"447":1,"577":1,"786":1}}],["oog",{"2":{"355":1}}],["omit",{"2":{"351":1}}],["omitted",{"2":{"303":1,"449":1}}],["o",{"2":{"327":1,"620":1,"1285":1}}],["ozverified",{"2":{"252":2}}],["osx",{"2":{"497":1}}],["os",{"0":{"189":1},"2":{"189":1,"190":1}}],["ok",{"2":{"56":1,"257":2,"283":2,"308":2,"328":1,"347":3,"394":1,"1034":2}}],["oklink",{"2":{"45":1}}],["ourselves",{"2":{"378":1,"782":1}}],["our",{"0":{"92":1},"1":{"93":1,"94":1,"95":1,"96":1},"2":{"43":1,"56":2,"59":2,"65":2,"75":1,"81":3,"84":2,"85":7,"86":4,"91":1,"94":5,"95":2,"180":1,"257":1,"399":1,"444":1,"1394":1}}],["outofbounds",{"2":{"506":1}}],["outcome",{"2":{"325":1,"327":1}}],["outstandinginterest",{"2":{"264":1}}],["outside",{"2":{"26":1,"132":1,"188":2,"254":1,"561":1}}],["outlined",{"2":{"264":1,"268":1,"272":2}}],["out",{"0":{"104":1,"178":1,"423":1,"465":1},"2":{"18":1,"20":2,"90":1,"94":1,"101":1,"106":1,"170":1,"172":3,"189":1,"262":1,"285":1,"355":2,"364":1,"378":1,"384":1,"388":1,"394":2,"421":2,"423":1,"465":3,"506":1,"620":1,"782":2,"820":1,"826":1,"957":1,"1039":1,"1337":1}}],["outbound",{"2":{"15":2}}],["outputs",{"2":{"62":1,"69":1,"192":2,"328":1}}],["output",{"0":{"486":1,"487":1},"2":{"15":1,"20":1,"35":2,"51":1,"62":1,"115":1,"117":2,"171":1,"172":2,"248":1,"249":1,"251":1,"270":1,"282":1,"284":3,"289":4,"302":1,"304":1,"323":1,"384":1,"421":5,"423":1,"486":1,"487":3,"503":1,"620":1,"719":2,"720":2,"726":2,"727":2,"733":2,"734":2,"740":2,"741":2,"747":2,"748":2,"761":2,"762":2,"768":2,"769":2,"798":3,"799":4,"804":1,"820":1,"826":1,"898":1,"1034":4,"1133":3,"1134":4,"1141":3,"1142":4}}],["owns",{"2":{"273":1}}],["owners",{"2":{"1039":3}}],["owneruponlytest",{"2":{"328":4,"355":1}}],["owneruponly",{"2":{"328":6,"355":3}}],["owner",{"2":{"152":1,"172":12,"260":1,"271":2,"280":3,"328":6,"362":2,"382":1,"754":3,"961":2,"1039":4,"1284":1}}],["owned",{"2":{"13":1,"1051":1}}],["ownable",{"2":{"102":1,"172":1,"356":1,"1056":1}}],["own",{"0":{"185":1},"2":{"34":1,"82":1,"83":1,"84":1,"85":1,"185":2,"251":1,"277":1,"341":1,"342":1,"364":1,"384":1,"398":1,"419":1,"431":1,"875":1}}],["opposed",{"2":{"257":1,"362":1,"401":1,"842":1}}],["opt",{"2":{"111":3,"177":1,"497":1}}],["optimism",{"2":{"344":3,"345":3,"421":2,"428":1,"545":1,"561":3,"638":1,"1013":1,"1023":6}}],["optimismforkid",{"2":{"638":4,"1013":3}}],["optimismfork",{"2":{"344":5,"345":4,"876":1}}],["optimization",{"2":{"812":1,"816":1}}],["optimizations",{"0":{"318":1},"1":{"319":1},"2":{"45":5,"281":1}}],["optimized",{"2":{"168":1,"289":2,"812":1,"816":1,"1318":1,"1395":1}}],["optimize",{"2":{"138":1,"172":1,"289":1,"364":2}}],["optimizer",{"0":{"63":1,"194":1,"490":1,"491":1,"492":1,"495":1,"496":1,"512":1,"513":1,"521":1,"522":1,"523":1},"1":{"491":1,"492":1,"493":1,"494":1,"495":1,"496":1},"2":{"45":1,"62":1,"63":2,"108":3,"117":1,"172":2,"193":1,"194":8,"289":3,"421":6,"471":1,"490":1,"491":5,"492":6,"493":1,"495":2,"496":6,"508":3,"512":1,"513":1,"517":3,"521":3,"522":3,"523":3}}],["optional",{"2":{"90":3,"172":1,"356":1,"357":1,"566":1}}],["optionally",{"2":{"13":1,"83":1,"133":1,"158":1,"283":1,"1154":1,"1159":1,"1163":1,"1168":1,"1187":1,"1191":1,"1195":1,"1200":1,"1204":1,"1208":1,"1212":1,"1216":1,"1220":1,"1224":1,"1228":1,"1247":1,"1251":1,"1255":1,"1263":1}}],["option",{"2":{"24":1,"84":1,"102":1,"106":1,"115":1,"269":1,"282":3,"351":1,"362":1,"369":1,"418":1,"421":1,"430":1,"431":1,"432":2,"433":2,"434":1,"476":1,"507":2,"702":1,"978":1}}],["options",{"0":{"16":1,"17":1,"18":1,"20":1,"288":1,"289":1,"291":1,"292":1,"303":1,"323":1,"325":1,"327":1,"600":1,"601":1,"607":1,"608":1,"612":1,"620":1,"621":1,"622":1,"623":1,"624":1,"625":1,"626":1,"627":1,"628":1,"629":1,"630":1},"1":{"17":1,"18":1,"19":1,"20":1,"601":1,"608":1},"2":{"6":1,"26":1,"30":1,"94":1,"116":1,"151":1,"170":2,"283":1,"301":1,"360":1,"391":1,"412":1,"598":1,"605":1,"620":2,"1284":1}}],["opaque",{"2":{"67":1}}],["operand",{"2":{"307":2}}],["operands",{"2":{"307":2}}],["operating",{"2":{"775":1,"798":1}}],["operations",{"2":{"172":2,"307":2,"311":1,"355":1,"500":1,"803":1,"934":1,"949":1,"957":1,"1004":1,"1086":3,"1107":1}}],["operation",{"0":{"1091":1},"2":{"65":1,"365":1,"988":2,"1087":1,"1150":1}}],["operates",{"2":{"319":1}}],["operator",{"2":{"248":1,"654":1}}],["opening",{"2":{"660":1}}],["opened",{"2":{"325":1}}],["openai",{"2":{"172":1}}],["openzeppelin",{"0":{"123":1,"252":1},"2":{"123":7,"172":7,"188":2,"198":4,"250":1,"252":1,"398":8,"407":3,"410":1,"411":1,"416":2,"419":1,"473":6,"1056":1}}],["open",{"0":{"270":1},"2":{"34":1,"35":2,"36":1,"95":1,"151":1,"272":2,"325":2,"386":1,"403":1,"417":1,"419":2,"625":1,"629":1}}],["op",{"2":{"42":1}}],["opcode",{"2":{"37":5,"57":2,"61":1,"64":1,"65":2,"355":3,"492":1,"535":1,"932":1}}],["opcodes",{"2":{"37":1,"355":1,"1079":1}}],["oh",{"2":{"23":1}}],["overwritten",{"2":{"659":1,"778":1,"1033":1,"1130":1,"1138":1}}],["overwrites",{"2":{"268":1}}],["overwrite",{"2":{"13":1}}],["overridden",{"2":{"458":1}}],["overriding",{"2":{"421":1,"434":1}}],["overrideaddress",{"2":{"827":3}}],["overridebooleanoverrides",{"2":{"447":1}}],["overrides",{"2":{"18":1,"303":3,"421":2,"478":1,"507":1,"508":1,"578":1}}],["override",{"0":{"434":1,"578":1},"2":{"18":1,"421":2,"434":12,"444":1,"447":1,"578":1,"808":1,"827":3}}],["overlapping",{"2":{"367":1}}],["overload",{"2":{"788":1,"1057":1}}],["overloading",{"2":{"327":1}}],["overloads",{"2":{"131":1,"695":1}}],["overall",{"2":{"283":1,"444":1}}],["overflow",{"2":{"172":1,"271":4,"506":2,"1150":1}}],["overflows",{"2":{"172":1,"270":1}}],["overhead",{"2":{"87":1}}],["overview",{"0":{"55":1,"90":1,"159":1,"262":1,"329":1,"455":1},"1":{"56":1,"263":1,"330":1,"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"456":1,"457":1,"458":1,"459":1,"460":1},"2":{"56":1,"109":1,"133":1,"134":1,"164":1,"168":1,"203":1,"215":1,"285":2,"328":1,"336":1,"420":1}}],["over",{"2":{"18":3,"119":1,"172":1,"181":1,"264":1,"265":1,"266":1,"285":1,"291":2,"356":2,"359":1,"375":1,"382":1,"387":1,"421":1,"444":1,"808":1,"880":1,"884":1,"1151":1}}],["ots",{"2":{"15":12}}],["otterscan",{"0":{"15":1},"2":{"15":3}}],["others",{"2":{"309":1,"481":1,"808":1}}],["otherwise",{"2":{"34":1,"77":1,"78":1,"94":1,"125":1,"356":1,"392":1,"452":1,"497":1,"543":1,"684":1,"689":1,"745":1,"766":1,"957":1,"972":1,"1012":1}}],["other",{"0":{"200":1},"2":{"5":1,"7":1,"52":1,"67":1,"94":1,"108":1,"109":1,"115":1,"139":1,"141":1,"168":1,"172":1,"179":1,"193":1,"258":1,"262":2,"284":1,"314":1,"328":4,"333":1,"342":1,"345":1,"356":1,"363":2,"371":1,"378":1,"391":1,"402":1,"413":1,"418":2,"444":1,"456":1,"507":2,"574":1,"782":1,"786":1,"787":1,"842":1,"927":1,"944":1,"972":1,"1033":1,"1034":1,"1088":2,"1284":1,"1285":1}}],["org",{"2":{"398":2}}],["organizing",{"0":{"384":1}}],["organization",{"2":{"172":1,"419":2}}],["organize",{"2":{"163":1,"384":1,"432":1}}],["organized",{"2":{"138":1}}],["ordinary",{"2":{"393":1}}],["ordered",{"2":{"929":1,"946":1,"1088":1}}],["orderliterals",{"2":{"495":1}}],["ordering",{"2":{"432":1,"929":1,"946":1,"1086":1}}],["order",{"2":{"17":2,"21":1,"24":1,"45":1,"59":1,"91":1,"92":1,"94":1,"115":1,"152":1,"172":1,"177":1,"196":1,"197":1,"199":1,"267":1,"272":2,"275":1,"282":2,"307":1,"352":1,"375":1,"384":1,"407":1,"536":1,"573":1,"782":4,"808":1,"929":8,"931":1,"946":8,"947":1,"973":1,"1056":1,"1079":1,"1086":1,"1284":1,"1402":1}}],["originprankaddress",{"2":{"983":2}}],["originate",{"2":{"481":1}}],["original",{"2":{"369":1,"384":1,"392":1,"430":1,"681":3,"1090":1}}],["origin`",{"2":{"421":1}}],["origin",{"0":{"532":1},"2":{"20":3,"292":2,"421":1,"426":1,"532":3,"960":2,"982":1,"1074":2,"1099":1,"1333":2,"1379":2}}],["or",{"2":{"13":3,"14":1,"17":1,"32":1,"34":2,"35":1,"36":3,"37":2,"40":1,"43":1,"45":3,"48":1,"58":1,"60":1,"64":2,"72":1,"73":1,"83":1,"90":2,"92":2,"94":1,"95":2,"102":1,"105":1,"127":1,"132":1,"134":1,"142":1,"151":3,"171":1,"172":6,"179":2,"183":3,"187":1,"194":1,"195":2,"196":1,"215":2,"231":1,"233":1,"239":1,"241":1,"250":1,"259":1,"260":1,"263":1,"265":1,"266":1,"268":1,"279":2,"281":1,"283":1,"289":2,"303":2,"307":1,"308":2,"309":3,"314":1,"315":1,"323":1,"327":2,"329":1,"339":2,"344":1,"345":1,"352":1,"353":1,"354":1,"355":2,"356":2,"357":1,"359":1,"362":2,"363":3,"367":1,"374":1,"376":1,"377":1,"379":1,"384":4,"387":4,"392":1,"396":1,"398":2,"400":1,"407":1,"409":1,"410":1,"411":1,"412":2,"413":2,"418":3,"419":2,"421":8,"430":1,"431":2,"432":1,"434":1,"435":1,"436":1,"437":2,"438":3,"439":1,"440":1,"441":1,"442":2,"443":1,"446":1,"451":1,"452":2,"459":1,"462":1,"463":1,"464":1,"465":1,"466":1,"467":2,"468":1,"470":2,"473":1,"474":1,"475":2,"476":1,"477":1,"478":1,"479":1,"480":1,"481":2,"482":1,"483":1,"484":1,"485":1,"488":1,"489":1,"491":2,"492":1,"493":1,"497":1,"503":1,"507":2,"517":1,"529":1,"530":2,"531":1,"532":1,"533":1,"534":1,"535":1,"536":2,"537":1,"538":1,"539":1,"540":1,"541":1,"542":1,"543":1,"545":1,"546":1,"547":1,"548":1,"549":1,"550":1,"551":1,"552":1,"553":1,"554":1,"555":1,"557":1,"558":1,"559":1,"560":1,"561":1,"564":1,"567":1,"573":2,"622":1,"624":1,"628":1,"629":1,"633":1,"651":1,"654":1,"664":1,"707":1,"716":1,"723":1,"724":2,"730":1,"737":1,"744":1,"745":1,"754":1,"755":1,"758":1,"765":1,"775":1,"778":1,"782":4,"787":4,"798":2,"804":1,"808":2,"820":1,"822":2,"826":1,"828":2,"835":1,"844":2,"880":2,"884":1,"888":1,"892":1,"925":1,"926":1,"927":3,"929":1,"942":1,"943":1,"944":6,"946":1,"960":1,"972":1,"1038":1,"1043":1,"1050":1,"1052":1,"1055":1,"1069":1,"1079":1,"1086":2,"1087":1,"1088":5,"1131":2,"1139":2,"1200":1,"1204":1,"1216":1,"1220":1,"1284":2,"1285":1,"1296":1,"1301":1,"1327":1,"1354":1,"1364":1}}],["onwards",{"2":{"712":1}}],["online",{"2":{"363":1}}],["onlydisable",{"2":{"453":2}}],["onlyowner",{"2":{"356":1,"1056":1}}],["only",{"2":{"14":3,"35":1,"36":1,"43":1,"52":1,"62":1,"65":1,"82":1,"83":1,"90":1,"94":1,"107":1,"154":1,"172":4,"182":1,"187":1,"192":1,"195":1,"257":1,"265":1,"269":1,"282":2,"284":1,"303":1,"304":3,"308":1,"309":1,"325":8,"327":1,"328":3,"342":3,"345":2,"347":1,"348":1,"349":1,"351":1,"353":1,"355":2,"362":2,"367":1,"374":1,"384":1,"386":2,"387":1,"394":1,"398":1,"421":8,"428":1,"474":1,"476":1,"478":1,"494":1,"497":1,"507":2,"517":1,"546":1,"549":1,"550":1,"551":1,"552":1,"553":1,"554":1,"646":1,"659":1,"664":1,"752":1,"782":1,"786":2,"787":2,"802":1,"803":3,"822":1,"826":1,"828":1,"842":1,"875":1,"932":1,"944":1,"1033":1,"1042":2,"1051":1,"1069":1,"1090":1,"1285":1}}],["once",{"2":{"93":1,"157":1,"280":2,"327":1,"386":1,"399":1,"416":2,"507":1,"1112":1}}],["onchain",{"2":{"90":1,"95":1,"96":1,"664":1,"1069":1}}],["ones",{"2":{"14":3,"48":1,"384":1,"390":1,"485":1}}],["one",{"2":{"3":1,"36":1,"37":2,"43":2,"44":1,"45":1,"85":1,"87":2,"88":1,"92":1,"93":1,"94":1,"95":1,"96":2,"171":1,"195":1,"196":1,"199":1,"248":2,"254":1,"257":1,"279":1,"325":2,"328":1,"342":3,"355":1,"357":1,"374":1,"390":1,"394":1,"398":1,"410":1,"421":1,"431":2,"447":1,"452":1,"507":1,"574":1,"576":1,"659":1,"779":1,"786":1,"787":1,"808":2,"929":2,"930":2,"946":2,"1052":1,"1086":1,"1131":1,"1139":1,"1285":1}}],["on",{"0":{"195":1,"199":1,"577":1},"2":{"1":2,"8":1,"9":1,"12":1,"14":2,"17":4,"18":2,"20":1,"27":2,"29":1,"34":1,"35":3,"36":3,"42":1,"43":2,"44":2,"45":7,"48":1,"56":1,"57":1,"58":1,"61":1,"62":2,"64":1,"65":1,"75":1,"76":1,"77":2,"78":2,"79":1,"82":1,"83":1,"86":1,"87":2,"89":1,"90":1,"92":2,"94":1,"95":4,"96":1,"97":1,"99":2,"102":3,"107":1,"115":2,"121":1,"133":1,"151":1,"156":1,"157":1,"158":3,"171":1,"172":4,"176":1,"177":1,"180":1,"182":1,"187":4,"189":1,"192":1,"193":3,"195":1,"250":1,"259":2,"262":1,"263":2,"270":1,"272":2,"274":1,"275":2,"282":1,"291":1,"303":1,"309":1,"319":1,"325":2,"327":1,"328":3,"334":1,"338":1,"341":1,"344":1,"345":5,"349":1,"350":1,"362":3,"363":1,"375":2,"376":1,"383":1,"387":3,"388":1,"393":3,"399":1,"402":1,"416":1,"419":3,"421":4,"431":2,"442":1,"447":2,"449":1,"484":1,"497":1,"501":1,"502":1,"517":1,"530":1,"553":1,"554":1,"577":1,"602":3,"626":1,"630":1,"633":1,"646":1,"654":1,"681":2,"684":2,"689":2,"775":2,"778":1,"779":6,"783":1,"786":1,"787":4,"797":1,"798":2,"802":2,"812":1,"870":1,"880":1,"884":2,"888":2,"892":1,"927":1,"929":2,"944":1,"946":2,"978":1,"1051":1,"1052":4,"1061":2,"1079":1,"1089":1,"1095":1,"1102":1,"1110":2,"1111":1,"1263":1,"1272":1,"1296":1,"1301":1,"1318":1,"1395":1}}],["oferations",{"2":{"307":1}}],["often",{"2":{"57":1,"250":1,"267":1,"307":1,"392":1,"492":1}}],["offset",{"2":{"802":1}}],["official",{"2":{"151":1,"419":1}}],["off",{"2":{"67":1,"141":1,"421":1,"492":1,"957":2,"1351":1,"1361":1}}],["offers",{"2":{"67":1,"68":1,"71":1,"452":1}}],["offer",{"2":{"27":1,"187":1,"386":1}}],["offline",{"0":{"186":1,"480":1},"2":{"18":1,"186":2,"289":1,"421":1,"480":3}}],["of",{"0":{"82":1,"104":1,"123":1,"152":1,"178":1,"404":1,"413":1},"1":{"83":1,"84":1,"85":1,"86":1,"87":1,"88":1},"2":{"0":1,"3":2,"7":1,"8":4,"13":10,"14":10,"15":2,"17":4,"18":3,"20":1,"21":1,"25":9,"26":2,"31":1,"33":1,"34":2,"35":22,"36":1,"37":3,"40":4,"43":2,"44":1,"45":5,"48":2,"49":1,"51":2,"55":1,"56":1,"57":5,"62":5,"65":5,"67":1,"68":1,"69":1,"72":1,"73":1,"74":1,"77":3,"78":3,"79":1,"81":1,"83":5,"84":1,"85":4,"86":1,"87":4,"89":2,"92":1,"93":2,"94":1,"95":3,"96":1,"97":2,"102":4,"104":2,"106":3,"107":1,"108":1,"109":1,"115":5,"117":1,"118":1,"126":1,"132":3,"133":4,"134":2,"141":1,"142":1,"151":1,"154":3,"155":1,"161":1,"162":2,"170":1,"171":1,"172":6,"175":1,"185":2,"188":1,"192":8,"198":2,"199":1,"203":1,"215":1,"248":10,"250":3,"251":1,"253":4,"254":2,"255":1,"257":4,"258":1,"260":6,"262":7,"264":4,"265":3,"266":10,"267":2,"268":13,"269":2,"270":1,"271":3,"272":2,"273":2,"274":1,"275":1,"276":2,"277":1,"278":3,"279":1,"285":5,"289":2,"291":4,"292":2,"302":1,"303":1,"305":2,"307":4,"308":2,"309":4,"311":3,"313":2,"314":2,"315":2,"316":2,"317":2,"319":2,"323":2,"325":3,"327":1,"328":8,"329":3,"330":1,"336":2,"338":2,"341":1,"342":3,"344":3,"345":2,"347":3,"348":2,"353":1,"355":7,"356":3,"357":4,"359":5,"363":4,"365":2,"369":1,"370":1,"371":1,"376":1,"377":2,"378":9,"384":9,"386":1,"387":3,"388":2,"392":4,"393":5,"397":3,"398":2,"399":1,"400":1,"402":1,"405":2,"407":1,"416":2,"419":2,"421":35,"422":1,"427":3,"428":1,"429":2,"430":4,"431":3,"432":1,"433":4,"434":1,"436":1,"438":1,"440":1,"441":1,"443":3,"444":2,"446":3,"447":3,"448":1,"449":1,"450":2,"451":3,"452":3,"453":2,"454":1,"459":1,"462":1,"463":1,"464":1,"465":1,"466":3,"467":1,"468":1,"469":1,"471":1,"472":1,"473":2,"475":1,"476":1,"477":2,"480":1,"481":3,"482":2,"486":1,"487":2,"492":7,"495":1,"496":2,"497":1,"499":2,"502":1,"504":1,"506":3,"507":5,"508":1,"516":1,"522":1,"523":1,"525":1,"526":1,"527":1,"531":1,"532":1,"533":1,"534":1,"535":1,"536":1,"537":1,"539":1,"540":1,"541":1,"542":1,"545":2,"546":2,"547":1,"555":2,"558":1,"561":3,"562":1,"564":2,"565":1,"567":1,"570":1,"572":1,"574":1,"575":1,"576":1,"579":1,"582":1,"583":1,"584":1,"601":2,"604":1,"608":2,"620":2,"622":1,"625":1,"629":1,"650":1,"651":1,"654":1,"655":1,"680":1,"683":2,"684":1,"685":2,"689":1,"690":2,"702":2,"751":3,"752":4,"773":1,"775":4,"778":2,"782":5,"786":1,"787":8,"797":1,"798":4,"802":4,"807":7,"808":6,"809":10,"812":1,"816":1,"820":1,"821":1,"822":1,"826":1,"827":1,"828":1,"835":1,"850":1,"861":1,"867":1,"875":2,"880":2,"884":2,"888":2,"892":2,"894":2,"895":2,"896":1,"898":1,"901":1,"905":1,"909":1,"913":1,"917":1,"920":1,"921":1,"925":2,"926":2,"927":4,"928":4,"929":11,"930":1,"932":2,"937":1,"938":1,"942":2,"943":2,"944":4,"945":4,"946":11,"953":1,"957":3,"969":1,"1001":1,"1007":1,"1008":1,"1013":2,"1022":1,"1033":3,"1038":1,"1039":1,"1042":1,"1047":2,"1050":5,"1051":2,"1061":1,"1065":1,"1079":2,"1081":4,"1082":4,"1086":4,"1087":1,"1088":11,"1089":2,"1090":1,"1107":1,"1116":1,"1130":1,"1131":1,"1133":2,"1138":1,"1139":1,"1141":2,"1146":1,"1151":4,"1268":1,"1271":2,"1284":3,"1285":6,"1288":1,"1296":1,"1301":1,"1306":1,"1317":1,"1324":2,"1337":2,"1351":1,"1353":2,"1361":1,"1367":1,"1372":1,"1376":1,"1393":4,"1394":1,"1395":7,"1399":1}}],["btreemap",{"2":{"929":1,"946":1}}],["bmc",{"2":{"497":1,"501":1}}],["bzzr1",{"2":{"488":1}}],["bzz",{"2":{"62":1}}],["bscscan",{"2":{"45":1,"52":1,"428":1}}],["broad",{"2":{"654":2}}],["broadcastaddress",{"2":{"983":3}}],["broadcast`",{"2":{"844":1}}],["broadcasts",{"2":{"377":2,"378":1,"1052":2}}],["broadcaster",{"2":{"361":1}}],["broadcasting",{"2":{"90":1,"94":1,"360":1,"421":1,"932":1,"996":1,"997":2,"1095":1,"1310":2}}],["broadcast",{"0":{"377":1,"469":1,"662":1},"1":{"663":1,"664":1,"665":1,"666":1},"2":{"43":5,"44":1,"90":4,"94":5,"95":3,"96":2,"129":1,"130":1,"138":1,"172":6,"377":2,"378":2,"421":3,"469":2,"663":3,"665":3,"770":1,"844":1,"846":1,"931":1,"932":2,"979":1,"981":1,"982":5,"983":2,"984":1,"1052":5,"1070":1,"1071":1,"1096":3}}],["brief",{"2":{"384":1}}],["bracket",{"0":{"437":1},"2":{"421":1,"437":2}}],["brackets",{"2":{"355":1,"421":1,"437":1}}],["branch",{"2":{"155":1,"396":1,"409":3,"1327":1}}],["break",{"2":{"421":1,"431":1,"447":1,"576":1}}],["breakdown",{"2":{"267":1}}],["breaking",{"2":{"193":1}}],["breakpoint",{"0":{"657":1},"1":{"658":1,"659":1,"660":1,"661":1},"2":{"40":2,"658":2,"659":5,"660":2,"1122":1}}],["brew",{"2":{"177":1,"187":1}}],["blueadd",{"2":{"102":1}}],["blue",{"2":{"102":1,"355":1}}],["blastrpcurl",{"2":{"775":1}}],["blastcontract",{"2":{"775":2}}],["blast",{"2":{"609":1,"775":2}}],["blazing",{"2":{"134":1}}],["blazingly",{"2":{"102":1}}],["blank",{"2":{"35":1,"432":1,"433":2}}],["blockhash",{"2":{"81":1}}],["blockchains",{"2":{"386":1}}],["blockchain",{"2":{"14":2,"25":1,"87":1,"97":2,"134":1,"139":1,"165":1,"250":1,"328":3,"1082":2}}],["blocknumber",{"2":{"12":1,"81":1,"1011":3}}],["blockscan",{"2":{"363":1}}],["blockscout",{"2":{"43":1,"45":1}}],["blocks",{"0":{"430":1},"2":{"8":2,"13":1,"14":2,"172":1,"384":1,"430":7,"787":1}}],["block",{"0":{"445":1,"534":1,"538":1,"539":1,"540":1,"541":1,"557":1,"589":1},"2":{"1":3,"8":8,"12":1,"13":1,"14":9,"15":4,"17":5,"18":4,"19":3,"25":11,"78":3,"84":2,"95":2,"96":1,"133":2,"145":2,"172":11,"184":6,"200":1,"291":5,"292":14,"328":1,"338":8,"339":3,"342":1,"344":1,"379":1,"386":2,"388":1,"421":12,"445":1,"534":3,"538":2,"539":3,"540":3,"541":3,"543":2,"544":1,"557":3,"589":3,"669":1,"670":1,"676":1,"677":2,"683":5,"684":4,"685":4,"688":1,"689":4,"690":4,"712":1,"713":1,"788":1,"793":1,"794":1,"812":5,"813":1,"816":5,"965":1,"966":1,"1011":2,"1012":2,"1013":5,"1017":1,"1018":1,"1023":2,"1083":4,"1112":3,"1125":1,"1126":1,"1367":1,"1368":2,"1376":1,"1377":2}}],["bump",{"2":{"387":1}}],["burning",{"2":{"387":1}}],["burn",{"2":{"284":2}}],["bugs",{"2":{"194":2,"387":1}}],["bundled",{"2":{"181":1}}],["bundlerschange",{"2":{"102":1}}],["build`",{"2":{"172":1}}],["building",{"0":{"153":1,"155":1},"1":{"154":1,"155":1},"2":{"84":1,"135":1,"154":1,"157":1,"162":1,"164":1,"171":1,"178":1,"272":1}}],["builds",{"2":{"55":1,"187":3,"190":1,"421":1,"489":1}}],["build",{"0":{"85":1,"137":1,"172":1,"176":1,"190":1,"287":1},"2":{"35":2,"45":2,"56":2,"82":1,"84":1,"85":9,"86":4,"91":1,"102":3,"115":1,"137":1,"151":1,"152":2,"155":1,"157":2,"171":2,"172":4,"183":2,"188":1,"190":2,"194":2,"197":1,"198":1,"251":1,"286":1,"287":1,"289":1,"297":2,"323":4,"339":1,"354":1,"394":2,"398":1,"421":5,"470":1,"482":1,"497":1}}],["built",{"2":{"33":1,"85":1,"86":2,"102":3,"121":1,"152":1,"172":1,"285":1,"403":1,"497":1,"1130":1,"1138":1}}],["but",{"2":{"9":1,"14":2,"51":1,"61":1,"83":1,"84":1,"86":1,"92":1,"94":1,"104":1,"115":1,"131":1,"180":1,"183":2,"188":2,"194":1,"254":1,"257":1,"258":1,"265":3,"266":2,"272":2,"285":1,"308":1,"309":1,"327":1,"328":2,"329":1,"342":1,"345":3,"352":1,"355":1,"363":1,"378":1,"384":1,"386":3,"421":1,"478":1,"480":1,"492":2,"497":1,"507":1,"574":2,"659":1,"752":1,"782":1,"783":1,"786":1,"787":1,"802":2,"826":1,"895":1,"929":2,"946":2,"960":1,"975":1,"1011":2,"1034":1,"1089":1,"1284":1,"1353":1}}],["bias",{"2":{"567":1}}],["bigger",{"2":{"1033":1}}],["big",{"2":{"382":1}}],["bits",{"2":{"307":1,"944":2,"1186":1}}],["bitwise",{"2":{"307":1}}],["bit",{"2":{"86":1,"258":1,"388":1,"945":1}}],["binaries",{"0":{"150":1,"152":1},"2":{"150":1,"151":1,"152":2,"177":1}}],["binary",{"2":{"26":2,"34":1,"132":1,"152":1,"183":2,"620":1,"802":1}}],["bindings",{"2":{"70":3,"72":1,"73":1,"77":2,"78":2}}],["bind",{"0":{"70":1},"1":{"72":1,"73":1,"74":1},"2":{"72":1,"76":1,"78":1,"200":2,"326":1}}],["bin",{"0":{"31":1},"2":{"85":1,"100":1,"158":1,"187":1,"613":1,"620":1}}],["bip39",{"2":{"17":1,"606":1,"629":1}}],["body",{"2":{"787":1}}],["book",{"0":{"425":1},"2":{"425":3}}],["bootstrapped",{"2":{"265":1}}],["boolasstring",{"2":{"906":2}}],["bool",{"0":{"1172":1,"1179":1,"1232":1,"1239":1},"2":{"81":1,"215":2,"217":1,"218":1,"252":2,"271":2,"279":1,"280":1,"308":3,"309":1,"437":1,"442":1,"653":1,"658":1,"722":2,"723":2,"726":4,"727":4,"750":4,"752":2,"754":1,"781":8,"787":1,"802":6,"844":1,"848":1,"853":1,"855":1,"857":1,"859":1,"862":1,"864":1,"904":1,"905":1,"906":1,"959":2,"960":2,"1031":2,"1052":1,"1056":1,"1060":1,"1073":2,"1074":2,"1075":1,"1081":3,"1085":4,"1106":1,"1151":2,"1172":4,"1179":4,"1194":2,"1196":1,"1232":4,"1239":4,"1254":2,"1256":1,"1278":1,"1284":2,"1287":1,"1363":2,"1364":1,"1395":1}}],["booleans",{"2":{"495":1}}],["boolean",{"2":{"14":1,"200":1,"309":1,"467":1,"470":1,"474":1,"479":1,"480":1,"483":1,"489":1,"491":1,"493":1,"494":1,"500":1,"503":1,"510":1,"512":1,"519":1,"530":1,"543":1,"556":1,"559":1,"560":1,"568":1,"569":1,"573":1,"577":1,"578":1,"580":1,"581":1,"586":1,"654":1,"787":1,"927":1,"944":2,"1034":2,"1061":1,"1130":1,"1131":2,"1133":2,"1134":3,"1138":1,"1139":2,"1141":2,"1142":3,"1395":1}}],["bob",{"2":{"226":1,"698":3,"699":2,"1052":27}}],["boundary",{"2":{"567":1}}],["boundaries",{"2":{"441":1}}],["bound",{"0":{"1269":1},"1":{"1270":1,"1271":1,"1272":1},"2":{"172":8,"275":4,"276":2,"654":2,"655":2,"656":1,"1270":1,"1272":1,"1382":1}}],["bounds",{"2":{"172":1,"506":1,"1039":1,"1337":1}}],["bounded",{"0":{"275":1},"2":{"172":2,"275":3,"276":1,"501":1}}],["boilerplate",{"2":{"171":1}}],["box",{"0":{"104":1}}],["both",{"2":{"18":1,"26":1,"84":1,"102":1,"103":1,"104":1,"132":1,"154":1,"172":1,"198":1,"251":1,"339":1,"391":1,"398":1,"400":1,"402":1,"480":1,"497":1,"501":1,"629":1,"695":1,"809":1,"1051":1}}],["b",{"2":{"17":1,"34":2,"100":1,"185":3,"215":54,"219":2,"220":2,"221":2,"222":2,"223":2,"225":2,"227":2,"228":2,"229":2,"230":2,"231":2,"232":2,"233":2,"234":2,"235":2,"236":2,"237":2,"238":2,"239":2,"240":2,"241":2,"242":2,"243":2,"244":2,"245":2,"246":2,"262":2,"270":2,"280":2,"311":3,"319":4,"357":3,"412":1,"620":1,"665":2,"782":4,"786":3,"809":2,"922":4,"929":3,"939":6,"944":2,"946":4,"1070":2,"1090":10,"1092":5,"1155":2,"1164":2,"1186":1,"1284":5,"1291":2,"1352":3,"1356":2,"1357":3}}],["badtokens",{"2":{"755":4}}],["bad",{"2":{"359":1,"367":1,"755":3}}],["baz",{"2":{"284":1,"1285":2}}],["barcall",{"2":{"1092":4}}],["bar",{"2":{"284":1,"804":4,"1092":9,"1134":1,"1142":1,"1285":2}}],["batchtransfer",{"2":{"783":2}}],["batchmint",{"2":{"284":2}}],["batchburn",{"2":{"284":2}}],["basicvault",{"2":{"1151":1}}],["basically",{"2":{"384":1,"1285":1}}],["basic4626deposit",{"2":{"271":1}}],["basics",{"2":{"161":1,"356":1}}],["basic",{"2":{"87":1,"91":1,"106":2,"107":1,"172":1,"202":1,"329":1,"356":2,"1151":1,"1353":1}}],["basis",{"2":{"82":1,"259":1,"263":1,"341":1}}],["bashrc",{"2":{"158":1}}],["bash",{"0":{"113":1},"2":{"22":1,"100":1,"110":1,"113":8,"151":2}}],["basefee",{"2":{"421":1,"589":1,"793":1,"794":1}}],["basefeepergas",{"2":{"84":1}}],["basescan",{"2":{"45":1,"52":1,"428":1}}],["based",{"0":{"271":1},"1":{"272":1,"273":1,"274":1,"275":1,"276":1},"2":{"12":1,"14":1,"57":1,"107":1,"138":2,"172":4,"257":6,"271":1,"303":1,"375":1,"387":1,"449":1,"888":1,"929":2,"946":2}}],["base",{"0":{"538":1,"620":1},"2":{"1":1,"13":1,"19":3,"44":7,"84":1,"85":1,"185":4,"292":3,"338":1,"421":1,"476":1,"538":3,"613":1,"620":6}}],["background",{"0":{"248":1}}],["backup",{"2":{"158":1}}],["backwards",{"2":{"40":1}}],["backoff",{"2":{"18":3,"291":3}}],["backend",{"2":{"13":1,"89":1}}],["balanceofbatch",{"2":{"284":2}}],["balanceof",{"2":{"81":4,"143":1,"172":7,"271":6,"274":2,"275":4,"276":2,"284":2,"329":1,"703":1,"787":2,"881":4,"885":5,"889":4,"1052":4,"1289":1,"1318":1,"1354":1,"1395":3}}],["balances",{"2":{"25":1,"172":1,"264":1,"271":1,"363":1,"392":1,"1052":3,"1151":4,"1318":1}}],["balance",{"0":{"533":1},"2":{"13":1,"17":3,"21":2,"25":2,"34":1,"81":2,"92":1,"133":2,"143":2,"172":4,"257":6,"271":1,"272":1,"274":2,"291":3,"329":1,"333":1,"387":1,"421":2,"533":3,"588":1,"702":1,"703":1,"1023":1,"1052":1,"1083":4,"1085":1,"1087":2,"1088":4,"1112":8,"1288":1,"1334":1,"1354":1,"1380":1,"1395":9}}],["byte",{"2":{"62":3,"65":1,"441":1,"778":1,"880":1,"884":1,"1372":1,"1393":1}}],["bytecodehash",{"2":{"62":1}}],["bytecode",{"0":{"62":1,"488":1,"514":1,"520":1},"2":{"59":2,"62":6,"65":3,"172":1,"355":3,"407":1,"410":1,"421":4,"487":1,"488":3,"508":1,"514":1,"517":1,"520":1,"773":1,"775":1,"809":1,"820":1,"821":7,"826":2,"892":2,"1296":1,"1301":1}}],["bytes2",{"2":{"1284":1}}],["bytes1",{"2":{"1284":2}}],["bytesasstring",{"2":{"910":2}}],["bytes4",{"2":{"357":3,"785":6,"787":3,"885":1,"1371":1}}],["bytes32asstring",{"2":{"914":2}}],["bytes32",{"0":{"1176":1,"1183":1,"1236":1,"1243":1},"2":{"34":5,"35":1,"77":4,"78":4,"133":1,"172":7,"203":4,"209":1,"211":1,"215":8,"219":1,"223":2,"224":1,"251":4,"252":4,"254":4,"260":4,"319":2,"613":4,"632":2,"634":2,"683":1,"688":1,"736":2,"737":1,"740":5,"741":6,"750":4,"840":1,"842":4,"869":2,"871":2,"912":1,"913":1,"914":1,"927":3,"928":1,"932":1,"944":3,"945":1,"964":1,"966":1,"988":1,"992":2,"1011":3,"1031":2,"1050":2,"1054":6,"1056":10,"1057":3,"1085":3,"1091":3,"1092":4,"1101":2,"1103":4,"1106":1,"1110":2,"1112":1,"1176":4,"1183":4,"1186":4,"1236":4,"1243":4,"1246":4,"1278":1,"1284":2,"1310":3,"1363":2,"1364":1,"1395":1,"1401":1}}],["bytes",{"0":{"569":1,"581":1,"1178":1,"1185":1,"1238":1,"1245":1},"2":{"19":1,"34":1,"35":3,"95":2,"203":5,"207":1,"208":1,"209":1,"211":1,"215":4,"225":2,"226":2,"249":1,"251":4,"254":1,"308":3,"357":4,"421":4,"441":2,"506":1,"558":1,"569":2,"581":3,"697":2,"698":1,"699":2,"729":5,"730":2,"733":5,"734":7,"750":4,"752":2,"772":1,"774":2,"777":4,"785":4,"787":8,"788":3,"796":1,"798":1,"799":2,"802":1,"819":1,"821":4,"825":1,"827":3,"840":1,"842":8,"879":4,"881":1,"883":4,"887":4,"889":4,"891":1,"908":1,"909":1,"910":1,"925":1,"927":2,"928":1,"929":2,"930":3,"931":2,"932":1,"942":1,"944":2,"945":1,"946":2,"947":2,"976":1,"988":2,"1021":1,"1023":1,"1031":2,"1050":2,"1052":8,"1056":3,"1085":2,"1106":1,"1107":1,"1108":1,"1178":4,"1185":4,"1238":4,"1245":4,"1284":2,"1285":1,"1295":2,"1300":2,"1396":1}}],["by",{"0":{"194":1,"195":1},"2":{"8":4,"9":2,"13":1,"14":1,"15":1,"25":1,"37":4,"40":1,"43":1,"44":1,"57":1,"58":3,"62":3,"64":1,"65":2,"76":1,"77":1,"78":1,"79":3,"80":1,"84":1,"86":2,"90":2,"94":7,"96":1,"97":1,"102":4,"104":2,"106":1,"107":1,"108":1,"109":1,"115":2,"116":1,"118":1,"125":2,"127":1,"128":1,"134":1,"137":1,"152":2,"154":1,"155":1,"157":2,"161":1,"169":1,"171":1,"172":2,"178":1,"179":1,"181":1,"185":1,"189":1,"190":1,"192":1,"193":2,"194":2,"195":2,"196":3,"197":1,"198":1,"246":1,"248":1,"250":1,"251":1,"257":1,"258":2,"259":2,"260":3,"262":2,"263":2,"266":2,"272":2,"274":2,"275":2,"276":1,"279":2,"280":1,"281":1,"282":1,"283":1,"285":3,"289":1,"302":2,"303":2,"305":1,"307":6,"311":1,"323":1,"327":2,"328":4,"333":1,"339":2,"341":1,"344":1,"345":1,"347":2,"348":1,"349":1,"350":1,"352":3,"353":1,"356":1,"357":4,"358":1,"363":1,"365":2,"376":2,"378":1,"384":2,"386":2,"387":1,"391":1,"394":1,"395":1,"396":1,"397":1,"399":1,"402":1,"408":1,"409":1,"411":1,"413":2,"414":1,"416":2,"417":1,"419":1,"421":5,"428":1,"432":1,"456":1,"474":1,"475":1,"487":1,"496":1,"506":1,"507":2,"517":1,"545":1,"546":1,"624":1,"628":1,"646":2,"650":1,"654":1,"751":1,"754":1,"778":1,"783":2,"786":2,"787":7,"797":1,"798":2,"803":3,"807":9,"808":6,"821":1,"822":1,"828":1,"841":1,"850":1,"875":2,"876":1,"894":1,"926":1,"929":1,"930":2,"932":1,"943":1,"946":1,"957":1,"976":1,"1013":1,"1027":1,"1033":2,"1042":2,"1051":1,"1056":1,"1057":1,"1081":2,"1086":1,"1087":1,"1099":1,"1112":1,"1130":1,"1131":1,"1138":1,"1139":1,"1285":1,"1296":2,"1301":2,"1310":1,"1314":1,"1367":1,"1376":1}}],["behalf",{"2":{"1051":1,"1052":4}}],["behaves",{"2":{"495":1,"496":1,"1052":2}}],["behave",{"2":{"265":1,"1051":1}}],["behaviour",{"2":{"90":1,"197":1}}],["behaviors",{"2":{"172":1,"257":1}}],["behavior",{"2":{"14":1,"64":1,"146":1,"172":2,"195":1,"265":1,"308":1,"348":2,"364":1,"398":1,"402":1,"422":1,"429":1,"444":1,"448":1,"471":1,"472":1,"527":1,"775":2,"786":1}}],["benchmark",{"2":{"386":1}}],["benchmarks",{"2":{"102":1}}],["benefits",{"2":{"384":1}}],["benefit",{"2":{"274":1,"384":2}}],["beta",{"2":{"1090":3}}],["better",{"2":{"180":1,"265":1,"365":1,"370":1,"925":1,"930":1,"942":1,"957":1,"1271":1}}],["between",{"2":{"87":2,"133":1,"172":1,"272":1,"355":1,"363":1,"368":1,"378":2,"387":1,"398":1,"418":1,"421":1,"434":2,"437":1,"441":1,"453":2,"492":1,"567":1,"579":1,"782":1,"1096":1,"1292":1,"1357":1}}],["became",{"2":{"403":1}}],["because",{"2":{"57":1,"65":1,"85":2,"94":1,"106":1,"190":1,"254":1,"265":2,"271":2,"274":1,"309":1,"328":2,"342":1,"345":2,"378":1,"386":1,"410":1,"788":1,"884":1,"1034":1}}],["becomes",{"2":{"363":1,"473":1}}],["become",{"2":{"151":1}}],["belongs",{"2":{"109":1}}],["below",{"2":{"105":1,"171":1,"195":1,"196":1,"203":1,"215":1,"248":1,"264":1,"268":1,"272":2,"276":1,"342":1,"356":1,"357":1,"378":1,"379":1,"384":1,"444":1,"452":1,"478":1,"487":1,"501":1,"507":1,"896":1,"929":1,"946":1,"972":1,"1353":1,"1395":1}}],["besides",{"2":{"109":1,"393":1}}],["best",{"0":{"454":1,"974":1},"1":{"975":1,"976":1},"2":{"56":1,"57":1,"162":3,"171":2,"172":2,"173":1,"193":1,"302":1,"368":1,"371":1,"972":1}}],["beyond",{"2":{"95":1,"536":1,"888":1}}],["begin",{"2":{"684":2,"689":2}}],["beginner",{"2":{"97":1}}],["beginning",{"2":{"40":1,"802":1}}],["begins",{"2":{"47":1,"1089":1,"1090":1}}],["beforetestcalldata",{"2":{"357":6}}],["beforetestsetup",{"2":{"357":4}}],["beforebalance",{"2":{"274":2,"275":4,"276":2}}],["before",{"0":{"311":1,"357":1},"2":{"15":1,"76":1,"94":1,"95":1,"130":2,"172":2,"173":1,"260":1,"272":1,"274":1,"281":1,"311":3,"328":1,"352":1,"353":1,"356":1,"357":3,"415":1,"416":1,"433":5,"446":1,"562":1,"565":1,"683":1,"787":2,"884":1,"976":1,"1038":1,"1086":1,"1099":1,"1151":1}}],["being",{"2":{"8":1,"14":3,"25":1,"37":2,"78":1,"86":1,"260":2,"272":1,"275":2,"282":1,"283":1,"367":1,"483":1,"778":1,"787":1,"822":1,"828":1,"861":1,"1033":1,"1088":1,"1284":1}}],["be",{"2":{"5":1,"7":1,"8":1,"9":1,"13":2,"14":1,"17":1,"18":1,"25":4,"26":1,"34":4,"35":5,"37":2,"43":1,"45":4,"51":1,"52":1,"57":1,"58":2,"62":4,"65":1,"67":1,"70":1,"74":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"90":5,"93":1,"94":5,"104":3,"108":2,"115":4,"117":1,"123":1,"130":1,"131":2,"132":1,"150":1,"152":1,"157":1,"158":1,"172":1,"183":1,"188":1,"189":1,"190":1,"192":1,"195":1,"196":2,"197":3,"198":1,"199":1,"209":1,"211":1,"213":1,"219":1,"221":1,"227":1,"229":1,"231":1,"233":1,"235":1,"237":1,"239":1,"241":1,"243":1,"245":1,"247":1,"248":1,"249":1,"254":1,"258":1,"259":2,"260":13,"262":7,"263":2,"265":3,"266":9,"267":2,"269":2,"270":1,"271":2,"272":6,"273":1,"275":6,"276":2,"279":1,"280":2,"281":1,"282":1,"289":1,"291":1,"303":1,"307":5,"311":1,"319":1,"323":1,"325":1,"327":3,"328":1,"342":3,"344":1,"345":2,"346":2,"347":2,"351":1,"352":1,"353":1,"355":1,"356":3,"357":3,"360":1,"362":2,"363":2,"365":4,"367":1,"371":1,"374":3,"375":1,"378":1,"382":2,"384":6,"386":2,"387":2,"388":1,"390":1,"391":1,"392":1,"393":1,"402":1,"407":2,"409":1,"410":2,"413":1,"414":2,"416":2,"419":1,"421":6,"425":1,"428":1,"430":3,"432":1,"433":3,"434":2,"441":1,"444":1,"445":1,"446":1,"454":1,"456":1,"458":1,"476":2,"480":2,"481":2,"484":1,"486":1,"492":1,"496":1,"497":4,"500":1,"507":1,"508":1,"543":1,"547":1,"561":2,"565":1,"574":5,"583":1,"601":2,"633":1,"654":2,"664":1,"745":2,"752":2,"754":1,"755":1,"759":1,"766":2,"775":2,"778":8,"782":3,"787":4,"797":1,"798":4,"802":1,"803":2,"808":1,"812":1,"816":1,"817":1,"820":1,"826":1,"861":1,"875":1,"876":1,"880":1,"888":1,"926":1,"927":3,"929":10,"930":2,"934":1,"943":1,"944":3,"946":12,"949":1,"957":2,"960":1,"972":1,"976":1,"982":3,"996":1,"1001":1,"1023":1,"1033":6,"1043":1,"1047":1,"1050":2,"1051":1,"1052":1,"1061":1,"1062":4,"1069":1,"1074":1,"1130":6,"1138":6,"1263":1,"1279":1,"1282":2,"1284":1,"1285":3,"1296":2,"1301":3,"1321":1,"1334":1,"1354":2,"1380":1,"1387":1,"1389":1,"1393":2,"1396":1,"1402":1}}],["been",{"2":{"3":1,"52":1,"57":1,"87":2,"90":2,"189":1,"249":1,"264":1,"269":1,"311":1,"355":1,"363":1,"365":2,"403":2,"633":1,"787":1,"982":4,"1086":1,"1283":1,"1321":1,"1406":1}}],["eoas",{"2":{"1051":1}}],["eoa",{"2":{"960":1,"1051":1,"1052":2,"1074":1}}],["eof",{"2":{"355":1}}],["ef",{"2":{"441":1}}],["effect",{"2":{"783":1,"880":1,"884":1}}],["effects",{"2":{"172":1,"485":1}}],["effective",{"2":{"162":1}}],["efficiency",{"2":{"172":1}}],["efficient",{"2":{"43":1,"319":1,"492":1}}],["ewasm",{"2":{"289":2,"486":2}}],["ecrecover",{"2":{"1055":1,"1056":1,"1057":1}}],["echo",{"2":{"799":2}}],["echidna",{"2":{"35":1}}],["ecdsa",{"2":{"172":1,"1056":4}}],["emptied",{"2":{"1086":1,"1087":1}}],["empty",{"2":{"18":1,"106":1,"291":1,"394":1,"433":6,"476":1,"496":1,"506":1,"755":1,"798":1,"1043":1,"1088":2,"1337":1,"1361":1}}],["emulate",{"2":{"775":1}}],["emulating",{"2":{"775":1}}],["embedded",{"2":{"407":1}}],["emerge",{"2":{"403":1}}],["emitpayload",{"2":{"827":1}}],["emit=false",{"2":{"808":2}}],["emits",{"2":{"782":1}}],["emitting",{"2":{"782":2,"783":2,"808":1}}],["emitted",{"2":{"328":4,"348":1,"355":1,"529":1,"782":1,"783":2,"841":1,"842":1,"987":1}}],["emitter",{"2":{"328":7,"781":2,"782":1,"783":2,"840":1}}],["emitcontracttest",{"2":{"328":1}}],["emit",{"2":{"179":1,"185":1,"206":1,"208":1,"210":1,"212":1,"214":1,"328":4,"421":1,"634":1,"643":1,"670":1,"677":2,"697":4,"698":4,"699":4,"703":2,"713":1,"779":4,"782":2,"783":7,"794":1,"808":1,"827":1,"837":1,"838":1,"842":4,"871":1,"966":1,"988":1,"992":1,"1018":1,"1052":1,"1056":1,"1070":1,"1103":1,"1126":1,"1151":2,"1341":2,"1345":1,"1352":2,"1388":1,"1390":1}}],["emissions",{"2":{"172":1}}],["equality",{"2":{"248":3}}],["equal",{"2":{"106":2,"172":1,"215":5,"219":1,"221":1,"223":1,"225":1,"231":1,"233":1,"239":1,"241":1,"243":1,"245":1,"251":2,"264":1,"328":3,"384":1,"392":1,"982":3,"1034":2,"1043":1,"1154":1,"1159":1,"1163":1,"1168":1,"1187":1,"1191":1,"1200":1,"1204":1,"1216":1,"1220":1,"1247":1,"1251":1}}],["equivalent",{"2":{"24":1,"109":1,"400":2,"549":1,"550":1,"551":1,"552":1,"553":1,"554":1,"659":1}}],["eliminating",{"2":{"1052":1}}],["eliminates",{"2":{"102":1}}],["element",{"2":{"888":1,"927":1,"944":1,"1337":1,"1361":1}}],["elements",{"2":{"102":1,"798":1,"888":1}}],["eld",{"2":{"504":1}}],["else",{"2":{"378":1,"802":3,"925":1,"927":1,"942":1,"944":1}}],["elapsed",{"2":{"262":1}}],["elvish",{"2":{"22":1,"110":1}}],["edge",{"0":{"253":1},"2":{"172":3,"248":1,"253":1,"262":1}}],["educators",{"2":{"97":1}}],["editing",{"2":{"107":1,"158":1}}],["editors",{"2":{"368":1}}],["editor",{"2":{"35":3,"121":2,"168":1,"368":1}}],["edit",{"2":{"35":2,"93":1}}],["especially",{"2":{"311":1,"319":1,"338":1,"367":1}}],["establish",{"2":{"172":1}}],["estimate",{"2":{"172":3,"285":1,"617":1}}],["estimated",{"2":{"95":3,"96":3}}],["estimategas",{"2":{"12":1}}],["essential",{"2":{"134":1,"329":1,"1354":1}}],["essentially",{"2":{"90":1,"345":1}}],["early",{"2":{"172":1,"371":1}}],["earlier",{"2":{"95":1,"496":1}}],["easiest",{"2":{"154":1,"929":1,"946":1}}],["easier",{"2":{"150":1,"329":1,"368":1,"374":1,"384":3,"397":1,"410":1,"432":1,"1353":1}}],["easily",{"2":{"70":1,"104":1,"316":1,"328":1,"363":1,"419":1,"798":1,"894":1,"1061":1}}],["eases",{"2":{"87":1}}],["easy",{"2":{"67":1,"87":2,"335":1,"377":1,"932":1,"1392":1}}],["each",{"2":{"14":1,"25":1,"27":1,"35":3,"45":1,"65":1,"77":1,"109":1,"161":1,"248":1,"262":4,"267":1,"273":1,"276":1,"277":1,"278":1,"285":1,"305":1,"341":1,"342":3,"345":1,"348":1,"351":1,"355":2,"356":1,"364":1,"371":1,"374":1,"387":2,"390":1,"398":2,"419":1,"421":1,"429":1,"431":1,"432":1,"446":1,"447":1,"459":1,"481":1,"492":1,"495":1,"507":1,"536":1,"564":1,"575":1,"809":1,"875":1,"888":1,"1285":1}}],["eg",{"2":{"52":1,"90":1,"421":1}}],["erase",{"2":{"659":1}}],["erroneous",{"2":{"307":1}}],["erroring",{"2":{"367":1}}],["errorslib",{"2":{"102":1}}],["errors",{"0":{"187":1,"334":1,"1383":1},"2":{"18":1,"187":1,"191":1,"291":1,"334":3,"348":1,"483":1,"496":1,"787":1,"789":1,"894":1,"1354":2}}],["error",{"0":{"50":1,"177":1,"189":1,"191":1,"482":1,"786":1},"2":{"15":1,"34":1,"85":1,"172":3,"177":1,"178":1,"188":3,"189":2,"190":6,"191":1,"195":2,"246":1,"260":1,"265":1,"289":4,"307":2,"328":1,"334":1,"356":1,"377":1,"421":2,"482":3,"758":1,"786":3,"787":3,"788":7,"798":1,"880":1,"881":5,"934":1,"949":1,"1150":1,"1151":2,"1154":1,"1159":1,"1163":1,"1168":1,"1187":1,"1191":1,"1195":1,"1200":1,"1204":1,"1208":1,"1212":1,"1216":1,"1220":1,"1224":1,"1228":1,"1247":1,"1251":1,"1255":1,"1260":1,"1314":1,"1321":1,"1324":1,"1337":1,"1348":1,"1361":1,"1406":1}}],["err",{"2":{"215":28,"246":1,"1153":2,"1158":2,"1162":2,"1167":2,"1172":1,"1173":1,"1174":1,"1175":1,"1176":1,"1177":1,"1178":1,"1179":1,"1180":1,"1181":1,"1182":1,"1183":1,"1184":1,"1185":1,"1186":1,"1190":2,"1194":1,"1199":2,"1203":2,"1207":2,"1211":2,"1215":2,"1219":2,"1223":2,"1227":2,"1232":1,"1233":1,"1234":1,"1235":1,"1236":1,"1237":1,"1238":1,"1239":1,"1240":1,"1241":1,"1242":1,"1243":1,"1244":1,"1245":1,"1246":1,"1250":2,"1254":1,"1326":1}}],["erc7201",{"2":{"1395":2}}],["erc721",{"2":{"282":1}}],["erc4626",{"2":{"173":1}}],["erc",{"2":{"67":1,"264":1,"271":2,"272":1,"273":1,"274":1,"276":1,"1052":4,"1288":1}}],["erc20corestorage",{"2":{"1395":8}}],["erc20accountdata",{"2":{"1395":4}}],["erc20uncheckedtransfer",{"2":{"309":1}}],["erc20test",{"2":{"281":10,"283":3}}],["erc20permit",{"2":{"188":1}}],["erc20",{"0":{"309":1},"2":{"43":4,"123":3,"188":1,"283":2,"309":4,"416":2,"702":1,"1052":11,"1395":4}}],["either",{"2":{"37":1,"73":1,"92":1,"155":1,"195":1,"355":1,"356":1,"362":1,"400":1,"413":1,"459":1,"561":1,"574":1,"724":2,"778":1,"820":1,"822":1,"826":1,"828":1,"880":1,"884":1,"888":1,"892":1,"925":1,"942":1,"1088":2,"1296":1,"1301":1}}],["eip1559",{"2":{"932":1}}],["eip712structhash",{"2":{"172":1}}],["eip712typehash",{"2":{"172":1}}],["eip712test",{"2":{"172":1}}],["eip712domain",{"2":{"172":1}}],["eip712example",{"2":{"172":1}}],["eip712hashstruct",{"0":{"73":1},"2":{"75":1,"78":2,"172":1}}],["eip712hashtypeddata",{"0":{"74":1}}],["eip712hashtype",{"0":{"72":1},"2":{"73":1,"77":2,"172":1}}],["eip712",{"0":{"69":1},"2":{"69":1,"126":1,"172":1,"188":2}}],["eip",{"0":{"3":1,"48":1,"67":1,"68":1,"71":1},"1":{"69":1,"70":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1},"2":{"3":1,"19":1,"48":2,"57":1,"67":6,"68":1,"70":1,"71":1,"72":1,"74":2,"75":3,"76":1,"78":1,"162":1,"172":3,"1050":5,"1051":3,"1052":1}}],["etch",{"0":{"771":1,"775":1},"1":{"772":1,"773":1,"774":1,"775":1,"776":1},"2":{"260":2,"770":1,"772":1,"774":1,"775":2,"821":2,"823":1,"827":2,"829":1,"884":1}}],["etc",{"2":{"17":1,"54":1,"87":3,"109":1,"158":1,"254":1,"367":1,"382":1,"393":1,"431":1,"453":1,"484":1,"574":1,"931":1,"932":1,"947":1,"1082":1,"1284":1}}],["etherum",{"2":{"602":1}}],["ethers",{"2":{"106":1,"200":1}}],["etherscan",{"0":{"428":1,"548":1,"615":1,"622":1},"2":{"3":1,"35":4,"43":3,"44":3,"45":11,"52":2,"54":1,"81":1,"90":1,"92":1,"93":4,"95":2,"133":1,"172":8,"200":1,"325":4,"340":6,"344":1,"345":1,"359":1,"393":3,"420":1,"421":2,"428":8,"548":3,"615":1,"622":5,"1023":1,"1112":2}}],["ether",{"2":{"25":1,"78":2,"133":2,"143":1,"172":1,"210":1,"212":1,"214":1,"220":1,"222":1,"228":1,"230":1,"232":1,"234":1,"236":1,"238":1,"240":1,"242":1,"257":7,"307":1,"333":1,"482":1,"651":2,"703":2,"889":11,"1056":1,"1083":5,"1091":3,"1112":1,"1268":1,"1334":1,"1380":1}}],["ethereum",{"2":{"0":1,"1":3,"3":1,"25":1,"35":1,"45":1,"83":3,"92":1,"132":1,"133":4,"134":2,"137":1,"139":1,"141":2,"142":1,"143":2,"145":2,"166":1,"172":2,"184":1,"338":1,"355":1,"393":1,"1021":1}}],["eth",{"0":{"547":1},"2":{"1":11,"12":43,"14":1,"15":2,"21":1,"43":1,"92":3,"95":1,"96":4,"133":3,"143":2,"144":1,"145":1,"172":1,"333":1,"344":1,"345":1,"403":1,"419":2,"421":1,"547":2,"601":2,"602":6,"624":2,"626":1,"628":3,"630":1,"978":1,"1023":2,"1056":1,"1296":1,"1301":1}}],["e",{"2":{"17":1,"35":3,"40":1,"45":1,"72":1,"87":2,"90":1,"94":1,"109":2,"126":1,"131":1,"172":1,"183":1,"262":3,"265":2,"266":1,"291":1,"303":1,"313":1,"314":1,"315":1,"316":1,"317":1,"334":1,"342":1,"344":1,"345":2,"357":1,"368":1,"384":5,"387":1,"393":1,"407":2,"408":2,"409":1,"413":1,"416":1,"428":1,"440":1,"441":1,"450":1,"454":1,"476":1,"478":1,"485":1,"545":1,"546":1,"567":1,"578":1,"752":1,"782":2,"787":1,"788":1,"798":2,"803":1,"944":3,"957":1,"1001":1,"1004":1,"1042":1,"1082":1,"1086":1,"1088":1,"1150":1,"1285":1,"1306":1,"1314":1,"1393":1}}],["epoch",{"2":{"8":1,"1120":1}}],["enforce",{"2":{"507":1}}],["engines",{"2":{"501":2,"505":1}}],["engine",{"0":{"501":1},"2":{"497":2,"501":3}}],["english",{"2":{"384":1}}],["enumconversionerror",{"0":{"1322":1},"1":{"1323":1,"1324":1},"2":{"1323":1,"1383":1}}],["enum",{"2":{"844":1,"981":1,"982":1,"1085":1,"1324":2}}],["enumerating",{"2":{"393":1}}],["enums",{"2":{"172":1}}],["enclosed",{"2":{"430":1}}],["enclave",{"2":{"361":1}}],["encrypted",{"2":{"363":1}}],["encrypt",{"2":{"363":1}}],["encourage",{"2":{"416":1}}],["encouraging",{"2":{"414":1}}],["encountered",{"2":{"352":1,"355":1,"421":2,"583":1}}],["encounter",{"2":{"149":1,"187":1,"398":1,"496":1,"894":1}}],["encountering",{"2":{"18":1,"291":1,"775":1}}],["encoding",{"0":{"192":1,"927":1,"944":1},"2":{"72":1,"174":1,"192":1,"197":1,"927":1,"944":2}}],["encodestorageerror",{"0":{"1319":1},"1":{"1320":1,"1321":1},"2":{"1320":1,"1383":1}}],["encodewithselector",{"2":{"779":3,"788":1,"881":4,"885":4,"889":2,"893":2}}],["encodewithsignature",{"2":{"308":1,"357":1,"1075":1}}],["encodecall",{"2":{"779":4,"1052":3}}],["encoders",{"2":{"485":1}}],["encodepacked",{"2":{"251":1,"260":4,"319":1,"357":1,"720":2,"727":2,"734":2,"741":2,"748":2,"762":2,"769":2,"821":2,"1056":3,"1091":1}}],["encodedata",{"2":{"73":2}}],["encoded",{"2":{"45":1,"73":1,"192":1,"249":1,"254":1,"500":1,"798":2,"799":2,"925":1,"927":8,"929":3,"930":1,"931":1,"942":1,"944":13,"946":3,"947":1,"1050":1,"1107":1,"1285":1}}],["encode",{"2":{"34":1,"45":5,"65":1,"78":2,"128":1,"129":1,"172":5,"192":3,"587":1,"697":1,"698":1,"699":1,"788":1,"821":2,"885":4,"889":4,"944":1,"1297":1,"1302":1,"1395":1}}],["enough",{"2":{"328":1,"362":1,"497":1}}],["enhancements",{"2":{"168":1}}],["enjoy",{"2":{"105":1}}],["enabling",{"0":{"775":1},"2":{"57":1,"63":1,"102":1,"194":1,"342":1,"432":1,"530":1,"1033":1,"1051":1}}],["enabletraces",{"2":{"14":1}}],["enabled",{"2":{"13":2,"35":1,"62":1,"117":1,"179":1,"421":2,"432":1,"433":2,"434":1,"444":1,"449":1,"467":1,"474":1,"479":1,"480":1,"483":1,"491":1,"507":1,"787":1,"797":1,"808":2,"957":1}}],["enable",{"0":{"1315":1},"1":{"1316":1,"1317":1,"1318":1},"2":{"13":2,"17":2,"35":2,"102":1,"121":1,"172":3,"180":1,"187":1,"194":2,"195":1,"279":1,"401":1,"421":1,"467":1,"491":1,"496":1,"530":1,"573":1,"797":1,"808":1,"934":1,"949":1,"1033":1,"1316":1,"1318":1,"1393":1,"1395":2}}],["enablesforgebuild",{"2":{"134":1}}],["enables",{"2":{"8":1,"14":1,"18":1,"108":1,"138":1,"251":1,"266":1,"268":2,"278":1,"291":1,"421":2,"434":1,"489":1,"507":1,"803":1,"1033":1,"1317":1}}],["ens",{"0":{"614":1}}],["ensuring",{"2":{"65":1,"87":1,"262":1,"654":1,"1051":1}}],["ensures",{"2":{"275":1,"313":1,"314":1,"315":1,"316":1,"317":1,"384":1,"398":1,"787":1,"1039":1}}],["ensure",{"2":{"25":2,"67":1,"77":1,"87":2,"111":1,"187":1,"189":1,"272":2,"278":1,"309":1,"352":1,"362":1,"365":2,"383":1,"391":1,"413":1,"418":1,"419":1,"876":1,"1008":1,"1050":1,"1061":1,"1151":1}}],["enshrined",{"2":{"57":1}}],["entity",{"2":{"802":1}}],["entirety",{"2":{"355":1,"778":1,"880":1,"884":1,"892":1}}],["entirely",{"2":{"84":1,"86":1,"291":1,"339":1,"802":1}}],["entire",{"2":{"51":1,"115":1,"189":1,"337":1,"364":1,"802":2,"885":1,"924":1,"925":2,"929":1,"931":1,"932":1,"941":1,"942":2,"946":1,"947":1}}],["entries",{"2":{"280":4,"352":1,"574":4,"802":1,"842":18,"988":5}}],["entry",{"2":{"27":1,"278":1,"398":1,"411":5,"413":1,"481":1,"574":2,"787":1}}],["entrypoint",{"2":{"24":1,"86":3,"94":1}}],["entering",{"2":{"786":1}}],["enter",{"2":{"95":3,"96":3,"172":1,"341":1,"625":2,"629":2,"975":1,"1112":2}}],["envor",{"0":{"749":1},"1":{"750":1,"751":1,"752":1,"753":1,"754":1,"755":1},"2":{"750":14,"751":1,"752":2,"754":2,"755":2,"790":1}}],["envint",{"0":{"742":1},"1":{"743":1,"744":1,"745":1,"746":1,"747":1,"748":1},"2":{"743":2,"747":1,"748":1,"790":1}}],["environments",{"2":{"87":2,"162":1,"173":1}}],["environment",{"0":{"19":1,"76":1,"458":1,"770":1},"2":{"24":1,"29":1,"32":1,"33":1,"35":4,"48":1,"81":1,"82":1,"85":1,"87":1,"88":1,"108":1,"127":2,"139":1,"172":2,"254":1,"264":1,"266":1,"268":1,"323":1,"325":1,"337":2,"338":1,"340":2,"362":1,"387":1,"416":1,"423":1,"424":1,"425":1,"426":1,"427":1,"431":1,"435":1,"436":1,"437":1,"438":1,"439":1,"440":1,"441":1,"442":1,"443":1,"449":1,"450":1,"451":1,"456":1,"458":1,"462":1,"463":1,"464":1,"465":1,"466":1,"467":1,"468":1,"470":1,"473":1,"474":1,"475":1,"476":1,"477":1,"478":1,"479":1,"480":1,"481":1,"482":1,"483":1,"484":1,"485":1,"486":1,"487":1,"488":1,"489":1,"491":1,"492":1,"493":1,"499":1,"500":1,"501":1,"502":1,"503":1,"504":1,"505":1,"506":1,"529":1,"530":1,"531":1,"532":1,"533":1,"534":1,"535":1,"536":1,"537":1,"538":1,"539":1,"540":1,"541":1,"542":1,"543":1,"545":1,"546":1,"547":1,"548":1,"549":1,"550":1,"551":1,"552":1,"553":1,"554":1,"555":1,"556":1,"557":1,"558":1,"559":1,"560":1,"561":3,"562":1,"564":1,"565":1,"566":1,"567":2,"568":1,"569":1,"570":1,"571":1,"572":1,"573":1,"575":1,"576":1,"577":1,"578":1,"579":1,"580":1,"581":1,"582":1,"583":1,"584":1,"585":1,"586":1,"622":1,"624":2,"626":1,"628":3,"630":1,"660":1,"665":1,"716":1,"719":1,"720":1,"723":1,"724":2,"726":1,"727":1,"730":1,"733":1,"734":1,"737":1,"740":1,"741":1,"744":1,"747":1,"748":1,"751":2,"752":2,"754":1,"755":1,"758":4,"759":1,"761":1,"762":1,"765":1,"768":1,"769":1,"787":1,"798":1,"808":2,"896":1,"997":1,"1023":2,"1042":3,"1043":3,"1070":1,"1301":1}}],["envbadtokens",{"2":{"755":2}}],["envbytes32",{"0":{"735":1},"1":{"736":1,"737":1,"738":1,"739":1,"740":1,"741":1},"2":{"736":2,"740":1,"741":1,"790":1}}],["envbytes",{"0":{"728":1},"1":{"729":1,"730":1,"731":1,"732":1,"733":1,"734":1},"2":{"729":2,"733":1,"734":1,"790":1}}],["envbool",{"0":{"721":1},"1":{"722":1,"723":1,"724":1,"725":1,"726":1,"727":1},"2":{"722":2,"726":1,"727":1,"790":1}}],["envstring",{"0":{"756":1},"1":{"757":1,"758":1,"759":1,"760":1,"761":1,"762":1},"2":{"344":3,"345":3,"757":2,"761":1,"762":1,"790":1}}],["envaddress",{"0":{"714":1},"1":{"715":1,"716":1,"717":1,"718":1,"719":1,"720":1},"2":{"172":1,"715":2,"719":1,"720":1,"790":1}}],["envuint",{"0":{"763":1},"1":{"764":1,"765":1,"766":1,"767":1,"768":1,"769":1},"2":{"172":2,"665":1,"764":2,"768":1,"769":1,"790":1,"997":1,"1070":1}}],["env",{"2":{"43":1,"45":1,"93":3,"94":2,"95":3,"172":2,"183":1,"344":2,"345":2,"444":1,"759":1,"1023":5}}],["enddisables",{"2":{"453":1}}],["ends",{"2":{"262":1}}],["end",{"2":{"34":1,"40":1,"62":1,"74":2,"93":1,"117":1,"172":1,"262":1,"347":1,"370":1,"433":1,"453":1,"454":1,"1121":2}}],["endpoints",{"0":{"546":1,"561":1},"2":{"44":2,"93":1,"172":2,"388":1,"421":2,"543":1,"544":1,"546":2,"561":5,"978":1,"1022":2,"1023":2}}],["endpoint",{"0":{"978":1},"2":{"1":1,"17":1,"18":5,"83":1,"291":3,"388":1,"561":4,"683":3,"684":1,"689":1,"978":1}}],["evcchange",{"2":{"102":1}}],["ever",{"2":{"134":1,"365":1}}],["everyone",{"2":{"414":1,"416":1}}],["everything",{"2":{"91":1,"158":1,"362":1,"367":2,"384":1,"431":1}}],["every",{"2":{"8":1,"265":1,"272":1,"275":1,"285":1,"378":1,"387":2,"440":1,"633":1,"812":1,"816":1,"991":1}}],["even",{"2":{"57":1,"62":1,"94":1,"180":1,"198":1,"247":1,"311":1,"325":1,"328":2,"356":1,"363":1,"364":1,"371":1,"384":2,"386":1,"485":1,"842":1,"1088":1,"1131":1,"1139":1,"1318":1}}],["events",{"0":{"204":1,"1385":1},"1":{"205":1,"206":1,"207":1,"208":1,"209":1,"210":1,"211":1,"212":1,"213":1,"214":1},"2":{"172":1,"179":2,"203":1,"204":1,"314":1,"327":1,"328":3,"331":1,"384":1,"782":6,"783":2,"841":1,"987":1,"1354":1,"1384":1}}],["event",{"2":{"34":2,"172":2,"203":16,"205":1,"207":1,"209":1,"211":1,"213":1,"328":16,"384":1,"587":1,"618":1,"782":5,"783":9,"827":1,"842":4,"988":1,"1052":1,"1151":2,"1385":4,"1387":1,"1389":1}}],["evaluation",{"2":{"34":1}}],["evaluates",{"2":{"654":1}}],["evaluate",{"2":{"34":1,"1151":1}}],["evaluated",{"2":{"34":3}}],["eval",{"2":{"33":1}}],["evmerror",{"0":{"191":1},"2":{"257":1}}],["evmversion",{"2":{"62":1}}],["evm",{"0":{"18":1,"61":1,"291":1,"346":1,"484":1,"511":1,"524":1,"525":1,"526":1},"2":{"5":1,"7":1,"13":1,"14":10,"17":1,"37":1,"57":2,"58":1,"59":2,"61":1,"89":1,"90":1,"95":1,"96":1,"191":3,"247":1,"262":3,"289":4,"291":1,"342":2,"344":1,"345":1,"346":6,"355":4,"421":4,"484":6,"486":1,"487":3,"508":1,"511":1,"517":3,"524":3,"525":3,"526":3,"557":1,"558":1,"712":1,"775":1,"788":1,"894":1,"896":1,"957":1,"965":1,"1051":2,"1081":3,"1086":3,"1087":1,"1088":1}}],["excess",{"2":{"1151":2}}],["exceed",{"2":{"431":1}}],["exceptions",{"2":{"458":1}}],["exception",{"2":{"342":1,"367":1,"1033":1}}],["excellent",{"2":{"255":1}}],["excluding",{"2":{"664":1,"1069":1}}],["excludeartifact",{"2":{"268":1}}],["excludeartifacts",{"2":{"266":1}}],["excludesender",{"2":{"268":1}}],["excludeselector",{"2":{"268":1}}],["excludeselectors",{"2":{"266":1}}],["excludedartifacts",{"2":{"268":1}}],["excludedsenders",{"2":{"268":1}}],["excludedselectors",{"2":{"268":1}}],["excluded",{"2":{"268":4}}],["excludedcontracts",{"2":{"268":1}}],["excludecontracts",{"2":{"266":1,"269":1}}],["exclude",{"0":{"450":1},"2":{"172":6,"257":1,"303":1,"307":2,"308":2,"309":2,"311":2,"313":2,"314":2,"315":2,"316":2,"317":2,"319":2,"414":2,"450":2,"894":1}}],["exclusively",{"2":{"172":1}}],["exit",{"2":{"85":1,"262":1,"325":1,"371":1,"786":1,"1042":1}}],["exist",{"2":{"248":1,"345":2,"347":1,"751":1,"786":1,"802":4,"804":1,"1081":3,"1089":1,"1130":1,"1138":1}}],["existing",{"0":{"45":1},"1":{"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1},"2":{"35":1,"82":1,"107":1,"172":1,"196":2,"197":1,"283":1,"338":1,"352":1,"364":1,"384":1,"430":1,"444":1,"802":1,"1033":1,"1130":1,"1138":1}}],["exists",{"2":{"14":1,"31":2,"187":1,"345":2,"802":3,"804":3,"853":1,"854":1,"855":2,"857":1,"858":1,"859":2,"862":1,"863":1,"864":2,"1130":1,"1138":1}}],["ex",{"2":{"35":2}}],["exec",{"2":{"35":2,"113":1}}],["executables",{"2":{"247":1}}],["executing",{"2":{"33":1,"35":2,"64":2,"65":1,"291":1,"362":1}}],["execution",{"0":{"259":1,"263":1},"1":{"260":1},"2":{"14":3,"95":1,"96":1,"258":1,"259":1,"263":1,"277":1,"278":1,"291":3,"308":1,"355":1,"357":1,"360":1,"376":2,"421":2,"492":1,"556":1,"557":1,"659":1,"844":9,"845":1,"1001":1,"1052":2,"1061":1,"1066":1,"1086":1,"1087":2,"1090":2,"1121":1,"1327":1}}],["executor",{"0":{"19":1,"292":1},"2":{"85":1,"262":1}}],["executes",{"2":{"892":1,"1110":2,"1111":1}}],["executed",{"2":{"26":1,"35":1,"64":1,"94":1,"195":1,"198":1,"280":2,"342":2,"357":2,"377":1,"386":1,"421":1,"447":1,"492":1,"576":1,"684":1,"689":1,"786":2,"798":1,"822":1,"828":1,"892":1,"957":1,"1004":1,"1011":1,"1012":1,"1052":2,"1112":1}}],["execute",{"2":{"14":2,"21":1,"34":1,"35":2,"90":2,"106":1,"172":2,"249":1,"346":1,"421":1,"530":1,"575":1,"797":1,"798":1,"846":3,"1051":1,"1052":11,"1112":2}}],["expires",{"2":{"976":1}}],["expiration",{"2":{"76":1,"77":1,"78":3}}],["expressed",{"2":{"445":1}}],["expressiveness",{"2":{"337":1}}],["expression",{"2":{"34":2,"311":1,"654":1}}],["expressions",{"2":{"34":3,"262":1,"264":1,"307":1}}],["expand",{"2":{"331":1,"332":1,"1354":2,"1384":1}}],["expanded",{"2":{"15":1}}],["exponential",{"2":{"1285":1}}],["exposed",{"2":{"390":3,"421":1}}],["exposes",{"2":{"363":1}}],["expose",{"2":{"195":1,"262":2,"275":1,"362":1,"363":2,"390":1,"392":1}}],["exposing",{"2":{"94":1,"957":1}}],["exporting",{"2":{"285":1}}],["exports",{"2":{"106":1}}],["export",{"2":{"35":6,"81":4,"83":1,"100":1,"138":1,"144":1,"158":1,"190":1}}],["expensive",{"2":{"492":1}}],["expectpartialrevert",{"2":{"785":2,"787":4,"788":2}}],["expectcall",{"0":{"777":1},"1":{"778":1,"779":1},"2":{"647":1,"777":4,"779":7}}],["expecting",{"2":{"328":1,"384":1,"787":1}}],["expectemit",{"0":{"780":1},"1":{"781":1,"782":1,"783":1},"2":{"328":18,"384":3,"647":1,"781":4,"782":3,"783":5}}],["expectedsenderbalance",{"2":{"1112":2}}],["expectedstructhash",{"2":{"78":1}}],["expectedrecipientbalance",{"2":{"1112":2}}],["expectedvalue",{"2":{"876":4}}],["expected",{"2":{"77":6,"78":5,"172":6,"196":1,"264":1,"275":1,"280":2,"283":1,"328":2,"348":1,"383":1,"388":1,"719":2,"720":2,"726":2,"727":2,"733":2,"734":5,"740":2,"741":2,"747":2,"748":2,"761":2,"762":3,"768":2,"769":2,"775":2,"778":3,"783":2,"787":3,"876":1,"1023":1,"1112":1,"1151":1}}],["expectrevert",{"0":{"784":1},"1":{"785":1,"786":1,"787":1,"788":1,"789":1},"2":{"172":1,"195":6,"196":2,"328":2,"334":2,"356":3,"647":1,"785":12,"786":5,"787":11,"788":13,"881":3,"1023":1,"1151":2,"1337":1}}],["expect",{"0":{"195":1},"2":{"106":3,"193":1,"195":2,"248":1,"328":2,"334":1,"356":1,"365":1,"421":1,"779":6,"783":2,"787":3}}],["expects",{"2":{"104":2,"384":1,"778":1,"787":1}}],["experimental",{"2":{"192":1,"421":1}}],["experimenting",{"2":{"33":1}}],["experience",{"2":{"3":1,"57":1,"157":1,"895":1,"1353":1}}],["explicit",{"2":{"438":1,"752":1}}],["explicitly",{"2":{"194":2,"268":4,"291":1,"309":1,"327":1,"496":1,"646":1,"1038":1,"1039":1}}],["explain",{"2":{"172":2,"359":1,"454":1,"609":1}}],["explained",{"2":{"76":1,"262":1,"328":1,"356":1,"403":1}}],["exploring",{"2":{"146":1}}],["explore",{"2":{"116":1,"167":1,"255":1,"355":1}}],["explorers",{"2":{"45":1,"52":2,"200":1,"428":1}}],["explorer",{"2":{"45":1,"200":2}}],["extcodecopy",{"2":{"1085":1,"1087":1}}],["extcodehash",{"2":{"1085":1,"1087":1}}],["extcodesize",{"2":{"884":1,"1085":1,"1087":1}}],["extcall",{"2":{"130":2}}],["extremely",{"2":{"497":1}}],["extra",{"0":{"486":1,"487":1},"2":{"172":1,"289":4,"355":1,"377":1,"384":1,"419":1,"421":4,"486":1,"487":2,"1285":1}}],["extradata",{"2":{"25":2,"84":1}}],["extracting",{"2":{"102":1}}],["extract",{"2":{"15":2}}],["extends",{"2":{"268":1}}],["extensible",{"2":{"355":1}}],["extensions",{"2":{"168":1,"188":1,"368":1}}],["extension",{"2":{"116":1,"118":2,"120":1,"123":1,"248":1,"798":1}}],["extensive",{"2":{"7":1,"171":2}}],["externala",{"2":{"809":1}}],["external",{"0":{"790":1},"2":{"45":2,"90":2,"94":1,"115":3,"128":5,"130":1,"172":9,"195":1,"244":1,"246":1,"257":3,"265":2,"270":5,"271":5,"275":2,"276":1,"328":1,"356":1,"359":1,"390":3,"421":1,"447":1,"578":1,"632":1,"636":1,"641":1,"645":1,"649":1,"653":1,"658":2,"663":3,"668":1,"672":1,"675":1,"679":1,"683":3,"688":3,"693":3,"701":1,"706":2,"711":1,"715":2,"722":2,"729":2,"736":2,"743":2,"750":14,"757":2,"764":2,"772":1,"775":3,"777":4,"781":4,"782":1,"785":14,"786":2,"792":1,"796":1,"802":12,"807":9,"809":2,"811":1,"815":1,"819":1,"825":1,"827":1,"831":1,"834":2,"840":1,"844":1,"848":1,"866":1,"869":1,"874":4,"879":2,"883":2,"887":2,"891":1,"896":2,"900":1,"904":1,"908":1,"912":1,"916":1,"920":1,"937":1,"952":1,"956":1,"959":4,"964":1,"968":1,"971":3,"981":1,"986":1,"990":1,"995":1,"1000":1,"1003":1,"1006":2,"1011":4,"1016":1,"1021":3,"1026":1,"1031":15,"1037":1,"1041":1,"1046":1,"1050":3,"1052":3,"1054":2,"1056":2,"1060":1,"1064":1,"1068":3,"1073":4,"1081":5,"1085":1,"1092":2,"1094":1,"1098":1,"1101":1,"1106":6,"1110":2,"1115":2,"1119":1,"1124":1,"1129":2,"1137":2,"1151":2,"1155":1,"1164":1,"1268":1,"1328":1,"1337":1,"1352":1,"1395":1}}],["externally",{"2":{"13":1,"1051":1}}],["examine",{"2":{"257":1,"356":1}}],["example2",{"2":{"1134":6,"1142":6}}],["exampletest",{"2":{"885":1}}],["examplecontract1",{"2":{"270":3}}],["examples",{"0":{"21":1,"23":1,"280":1,"297":1,"304":1,"343":1,"594":1,"602":1,"609":1,"634":1,"638":1,"643":1,"651":1,"655":1,"660":1,"665":1,"670":1,"677":1,"681":1,"685":1,"690":1,"696":1,"703":1,"708":1,"713":1,"718":1,"725":1,"732":1,"739":1,"746":1,"753":1,"760":1,"767":1,"774":1,"779":1,"783":1,"788":1,"794":1,"799":1,"804":1,"809":1,"813":1,"817":1,"821":1,"827":1,"836":1,"842":1,"846":1,"850":1,"855":1,"859":1,"864":1,"871":1,"876":1,"881":1,"885":1,"889":1,"893":1,"902":1,"906":1,"910":1,"914":1,"918":1,"922":1,"939":1,"954":1,"961":1,"966":1,"977":1,"983":1,"988":1,"992":1,"997":1,"1008":1,"1013":1,"1018":1,"1023":1,"1028":1,"1039":1,"1044":1,"1048":1,"1052":1,"1056":1,"1062":1,"1066":1,"1070":1,"1075":1,"1083":1,"1096":1,"1103":1,"1108":1,"1112":1,"1117":1,"1121":1,"1126":1,"1132":1,"1140":1,"1155":1,"1164":1,"1196":1,"1256":1,"1272":1,"1289":1,"1297":1,"1302":1,"1318":1,"1328":1,"1341":1,"1345":1,"1352":1,"1368":1,"1373":1,"1377":1,"1403":1},"1":{"344":1,"345":1,"697":1,"698":1,"699":1,"719":1,"720":1,"726":1,"727":1,"733":1,"734":1,"740":1,"741":1,"747":1,"748":1,"754":1,"755":1,"761":1,"762":1,"768":1,"769":1,"775":1,"837":1,"838":1,"978":1,"979":1,"1057":1,"1133":1,"1134":1,"1141":1,"1142":1},"2":{"34":2,"87":1,"133":1,"157":1,"171":1,"172":2,"204":1,"216":1,"248":1,"264":1,"305":1,"345":1,"384":1,"409":2,"809":1,"935":1,"1131":1,"1139":1,"1386":1}}],["example",{"0":{"105":1,"123":1,"173":1,"206":1,"208":1,"210":1,"212":1,"214":1,"218":1,"220":1,"222":1,"224":1,"226":1,"228":1,"230":1,"232":1,"234":1,"236":1,"238":1,"240":1,"242":1,"244":1,"246":1,"250":1,"255":1,"1034":1,"1091":1,"1092":1,"1133":1,"1134":1,"1141":1,"1142":1,"1147":1,"1151":1,"1283":1,"1293":1,"1310":1,"1358":1,"1388":1,"1390":1,"1394":1,"1395":1},"1":{"251":1,"252":1,"253":1,"254":1},"2":{"8":2,"34":1,"35":2,"36":2,"44":1,"45":2,"56":1,"64":2,"67":1,"81":1,"84":1,"115":1,"116":1,"117":1,"152":1,"171":1,"172":3,"183":1,"184":1,"185":2,"192":3,"195":1,"196":1,"197":1,"203":1,"215":1,"248":1,"249":1,"254":1,"260":3,"262":1,"265":4,"267":1,"270":1,"273":1,"274":1,"280":1,"283":2,"284":3,"289":2,"311":1,"328":1,"342":1,"347":1,"355":1,"356":1,"357":1,"362":1,"365":1,"375":1,"376":1,"384":1,"390":1,"392":2,"398":2,"399":1,"400":1,"409":1,"410":1,"411":1,"430":1,"431":1,"433":1,"434":1,"444":1,"445":1,"446":1,"447":1,"473":1,"477":1,"481":1,"499":1,"507":2,"508":1,"517":1,"561":1,"601":1,"655":1,"782":1,"783":1,"786":1,"787":3,"803":1,"881":6,"885":14,"928":1,"929":2,"945":1,"946":2,"983":4,"1034":1,"1091":1,"1130":1,"1133":4,"1138":1,"1141":4,"1284":1,"1395":1}}],["exactly",{"2":{"51":1,"62":1,"94":1,"251":1,"355":1,"356":1,"416":1}}],["exact",{"2":{"14":1,"51":1,"86":1,"787":3,"881":1,"885":1,"893":1,"929":2,"946":2}}],["mload",{"2":{"821":2}}],["mktx",{"2":{"617":1}}],["mkdir",{"2":{"112":1,"113":1}}],["mb",{"2":{"421":1}}],["m4rio",{"2":{"419":2}}],["m1",{"2":{"157":1}}],["md",{"2":{"35":5,"172":1,"402":3}}],["myobject",{"2":{"1133":4,"1141":4}}],["myothercontracttest",{"2":{"358":1}}],["myuint",{"2":{"975":4}}],["myfuzztest",{"2":{"446":1}}],["myfunction",{"2":{"314":3,"431":2}}],["myinvarianttest",{"2":{"447":1}}],["myinternalmethod",{"2":{"390":3}}],["myimmutablevar",{"2":{"317":1}}],["myscript",{"2":{"382":2}}],["mysafe",{"2":{"378":4}}],["mystruct",{"2":{"192":10,"313":3}}],["mystatemutatingfunc",{"2":{"34":1}}],["myvariable",{"2":{"315":1}}],["myviewfunc",{"2":{"34":2}}],["myproject",{"2":{"189":1}}],["mycalldata",{"2":{"787":1}}],["myconstant",{"2":{"316":1}}],["mycontracts",{"2":{"499":1}}],["mycontractharness",{"2":{"390":1}}],["mycontractfactory",{"2":{"284":1}}],["mycontracttest",{"2":{"185":1,"358":1,"384":4}}],["mycontract",{"2":{"43":5,"172":12,"284":1,"367":5,"382":4,"384":3,"390":6,"433":1,"787":1,"821":8,"822":5,"828":5,"961":1,"1117":1,"1297":1,"1302":1}}],["mycustomassertion",{"2":{"185":1}}],["mylibrary",{"2":{"172":1,"477":2}}],["mytest",{"2":{"444":1,"445":1}}],["mythx",{"2":{"117":1}}],["myth",{"2":{"117":2}}],["mythril",{"0":{"117":1},"2":{"117":16}}],["mytoken",{"2":{"43":3,"45":3,"779":4,"783":10,"881":2,"885":2}}],["my",{"0":{"179":1,"180":1,"185":1,"191":1},"2":{"23":1,"313":1,"314":1,"316":3,"317":3,"408":2,"414":4,"415":1,"1133":2,"1141":2}}],["msgsender",{"2":{"959":4,"960":4,"981":1,"983":9,"1073":4,"1074":4}}],["msg",{"2":{"43":1,"257":1,"260":4,"266":1,"271":2,"276":1,"328":3,"342":1,"345":1,"362":2,"531":1,"775":1,"778":1,"779":2,"827":1,"850":2,"876":1,"880":2,"881":1,"884":2,"885":1,"889":1,"960":4,"961":1,"982":1,"1052":2,"1056":1,"1074":4,"1088":1,"1099":1,"1151":7}}],["mstore",{"2":{"34":2,"319":2}}],["ms",{"2":{"18":1,"327":1}}],["milliseconds",{"2":{"497":1,"505":2,"1064":1,"1065":1,"1119":1,"1120":1}}],["million",{"2":{"45":1}}],["mib",{"2":{"393":1}}],["middle",{"2":{"363":1}}],["migrated",{"2":{"196":1}}],["migrating",{"2":{"193":1}}],["migration",{"0":{"193":1},"1":{"194":1,"195":1,"196":1,"197":1,"198":1,"199":1,"200":1},"2":{"193":1}}],["might",{"2":{"90":1,"131":1,"173":1,"248":2,"258":1,"307":1,"311":2,"355":1,"384":1,"392":1,"413":1,"775":1,"972":1}}],["mit",{"2":{"172":1,"307":1,"308":1,"309":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"402":1,"1052":2}}],["mixed",{"0":{"314":1,"315":1},"2":{"314":1,"315":1,"450":1,"944":1}}],["mixedcasevariable",{"2":{"315":1}}],["mixedcasefunction",{"2":{"314":1}}],["mixedcase",{"2":{"172":2,"314":1,"315":1}}],["mixhash",{"2":{"25":2,"84":1}}],["misconception",{"2":{"492":1}}],["miscellaneous",{"0":{"174":1}}],["mismatch",{"2":{"77":2,"78":2,"172":2,"191":1,"376":1}}],["missing",{"0":{"47":1},"2":{"18":1,"194":1,"289":1,"377":1,"421":1,"426":1,"480":2,"482":1,"775":1,"1023":1,"1056":1}}],["mirrors",{"2":{"43":1}}],["mind",{"2":{"282":1,"342":2}}],["mindful",{"2":{"267":1}}],["min",{"0":{"522":1,"525":1},"2":{"117":3,"282":2,"284":3,"517":2,"521":1,"522":1,"523":1,"524":1,"525":1,"526":1,"618":1,"747":1,"748":1,"769":2,"1270":1}}],["minamountout",{"2":{"102":1}}],["minutes",{"2":{"386":1}}],["minute",{"2":{"95":1}}],["minor",{"2":{"51":1}}],["minting",{"2":{"271":1,"1052":2}}],["minter",{"2":{"172":1,"1052":7}}],["mint",{"2":{"43":1,"272":1,"273":1,"274":1,"275":2,"276":1,"284":2,"1052":10,"1056":1}}],["minimal",{"2":{"1284":1}}],["minimize",{"0":{"387":1},"2":{"454":1}}],["minimizes",{"2":{"363":1}}],["minimum",{"2":{"13":1}}],["mining",{"0":{"8":1},"2":{"7":1,"8":7,"13":1,"14":2,"17":3,"141":1,"172":1}}],["mine`",{"2":{"172":1}}],["miner",{"2":{"25":1,"84":1}}],["mines",{"2":{"13":1}}],["mine",{"2":{"8":1,"13":1,"14":2,"17":1,"25":1,"172":1}}],["mined",{"2":{"8":1,"25":1,"683":2,"684":1,"689":1,"1011":1,"1012":1}}],["mutability",{"2":{"482":1}}],["mutable",{"2":{"315":1}}],["mutation",{"2":{"117":1,"277":1}}],["mutating",{"2":{"34":1}}],["mu",{"2":{"258":1}}],["much",{"2":{"254":1,"281":1,"285":3,"371":1,"410":1,"808":1}}],["murkyverified",{"2":{"252":2}}],["murkygeneratedroot",{"2":{"251":2}}],["murky",{"2":{"250":1,"251":3,"253":1,"254":1,"256":1}}],["multiline",{"0":{"431":1},"2":{"421":2,"431":8}}],["multicall",{"2":{"387":1}}],["multiplication",{"2":{"311":2}}],["multiplier",{"2":{"172":1}}],["multiply",{"0":{"311":1},"2":{"172":2,"311":1}}],["multiple",{"2":{"7":1,"35":1,"43":3,"44":2,"57":1,"67":1,"172":1,"248":1,"262":1,"266":1,"273":1,"276":1,"279":1,"280":1,"291":1,"337":2,"341":1,"344":1,"357":1,"379":2,"382":1,"387":1,"430":2,"431":1,"476":1,"517":1,"782":1,"783":2,"787":1,"788":1,"809":1,"812":1,"816":1,"889":2,"895":1,"1033":1,"1393":1,"1402":2}}],["multi",{"0":{"44":1},"2":{"44":1,"430":3}}],["must",{"2":{"18":4,"35":1,"43":1,"45":2,"94":1,"172":1,"177":1,"181":1,"187":1,"265":2,"275":1,"325":1,"335":1,"356":1,"360":1,"384":1,"392":1,"416":1,"421":1,"446":1,"447":1,"452":1,"460":1,"484":1,"575":1,"633":1,"782":2,"1047":1,"1061":1,"1130":3,"1138":3}}],["moving",{"2":{"368":1}}],["move",{"2":{"40":7,"44":1,"86":1,"419":1}}],["mocking",{"2":{"881":1,"885":4,"888":1,"889":2,"893":2}}],["mockfunction",{"0":{"890":1},"1":{"891":1,"892":1,"893":1},"2":{"770":1,"891":1,"893":2}}],["mockcallrevert",{"0":{"878":1},"1":{"879":1,"880":1,"881":1},"2":{"770":1,"879":2,"881":3}}],["mockcalls",{"0":{"886":1},"1":{"887":1,"888":1,"889":1},"2":{"770":1,"887":2,"889":2}}],["mockcall",{"0":{"882":1},"1":{"883":1,"884":1,"885":1},"2":{"770":1,"883":2,"885":4,"888":1}}],["mocked",{"2":{"673":1,"884":3,"888":1}}],["mockerc1155",{"2":{"284":2}}],["mockerc20",{"2":{"172":2}}],["mocks",{"2":{"386":2,"775":2,"884":1,"888":1,"889":8}}],["mock",{"2":{"195":1,"249":1,"386":2,"775":5,"880":2,"884":1,"888":1,"894":1}}],["monorepo",{"2":{"507":1}}],["monorepos",{"0":{"188":1}}],["monitor",{"2":{"138":1}}],["morpho",{"2":{"102":1}}],["morphobundler",{"2":{"102":1}}],["moreover",{"2":{"45":1}}],["more",{"0":{"1134":1,"1142":1},"2":{"13":1,"35":1,"43":1,"62":1,"86":1,"89":1,"106":1,"115":1,"116":1,"117":1,"133":1,"138":2,"141":1,"145":1,"148":1,"151":1,"169":1,"180":2,"192":2,"257":1,"265":1,"266":1,"267":1,"270":1,"271":2,"272":3,"276":1,"285":2,"325":1,"327":1,"328":1,"329":1,"337":1,"345":1,"348":1,"355":4,"356":1,"365":1,"367":1,"368":1,"375":1,"383":1,"387":1,"388":1,"392":1,"393":1,"398":2,"403":1,"478":1,"492":1,"497":1,"500":1,"501":1,"502":1,"503":1,"504":1,"564":1,"646":1,"654":1,"788":1,"888":1,"894":1,"895":1,"926":1,"943":1,"1033":1,"1079":1,"1130":1,"1138":1,"1271":1,"1285":2,"1348":1,"1353":2,"1357":1}}],["mount",{"2":{"84":1}}],["mouse",{"2":{"40":2}}],["most",{"2":{"37":1,"61":1,"198":1,"285":1,"291":1,"328":1,"334":1,"356":1,"392":1,"419":1,"454":1,"1285":1,"1288":1}}],["momentarily",{"2":{"363":1}}],["moment",{"2":{"35":1,"338":1}}],["mod",{"0":{"500":1}}],["modulo",{"2":{"500":1,"654":1}}],["module",{"2":{"106":1,"497":1}}],["modules`",{"2":{"188":1}}],["modules",{"2":{"35":1,"104":2,"188":10,"270":1,"323":1,"398":3,"401":1,"402":1,"473":2}}],["modular",{"2":{"102":1,"134":1}}],["modification",{"2":{"982":2}}],["modified",{"2":{"357":2,"386":1,"418":1}}],["modifier",{"2":{"172":1,"276":2,"356":1,"434":1,"1350":1,"1351":2}}],["modifies",{"2":{"13":1,"809":1}}],["modifying",{"2":{"127":1}}],["modify",{"2":{"85":1,"94":1,"172":1,"809":1,"1042":1}}],["modern",{"2":{"172":1}}],["modelcounter",{"2":{"893":1}}],["model",{"0":{"497":1,"498":1,"499":1,"500":1,"501":1,"502":1,"503":1,"504":1,"505":1,"506":1},"1":{"498":1,"499":2,"500":2,"501":2,"502":2,"503":2,"504":2,"505":2,"506":2},"2":{"171":1,"421":2,"471":1,"497":8,"498":1,"499":2,"501":2,"502":1,"504":1,"505":1,"506":1,"893":2}}],["models",{"2":{"171":1}}],["modes",{"0":{"8":1},"2":{"7":1,"8":1}}],["mode",{"0":{"338":1,"349":1,"489":1},"1":{"339":1,"340":1},"2":{"3":1,"8":2,"18":2,"327":1,"337":2,"341":3,"342":1,"401":1,"421":1,"489":3,"646":2,"775":1,"808":2,"892":1,"896":1,"1111":1,"1112":2}}],["mental",{"2":{"371":1}}],["mentioned",{"2":{"35":1,"57":1,"94":1,"95":1,"115":2,"345":1}}],["medal",{"2":{"609":1}}],["med",{"2":{"303":1,"449":1}}],["median",{"2":{"258":1,"284":3}}],["medium",{"0":{"310":1},"1":{"311":1},"2":{"172":1}}],["mechanism",{"2":{"173":1,"255":1}}],["mev",{"2":{"172":1}}],["me",{"0":{"105":1}}],["metering",{"2":{"957":3,"1001":1,"1004":1,"1351":1,"1352":8}}],["metrics",{"0":{"586":1},"2":{"172":1,"262":1,"267":1,"421":2,"586":2}}],["methodidentifiers",{"2":{"487":1}}],["methodologies",{"2":{"172":1}}],["method",{"2":{"93":1,"172":1,"374":1,"379":1,"384":4,"390":1,"421":1,"432":1,"488":1,"520":1,"598":1,"599":1,"601":1,"654":1,"1021":1,"1285":2}}],["methods",{"0":{"11":1,"12":1,"13":1,"14":1,"15":1},"1":{"12":1,"13":1,"14":1,"15":1},"2":{"7":1,"12":1,"14":2,"62":2,"141":1,"145":1,"185":1,"269":1,"277":2,"359":1,"374":1,"391":1,"392":1,"549":1,"550":1,"551":1,"552":1,"553":1,"554":1}}],["metarpg",{"2":{"1394":3}}],["metamask",{"2":{"363":1}}],["meta",{"2":{"67":1,"393":3}}],["metadata",{"0":{"62":1},"2":{"59":1,"62":10,"66":1,"172":1,"289":2,"393":2,"421":2,"486":2,"488":1}}],["memoverflowerror",{"0":{"1346":1},"1":{"1347":1,"1348":1},"2":{"1347":1,"1383":1}}],["memorized",{"2":{"1038":1}}],["memory",{"0":{"41":1,"558":1},"2":{"34":1,"35":5,"37":3,"41":3,"43":2,"77":1,"78":4,"172":1,"192":2,"215":36,"226":2,"249":2,"251":5,"252":2,"254":3,"260":1,"268":6,"271":2,"279":2,"280":5,"308":3,"319":2,"342":1,"357":3,"379":6,"421":2,"558":3,"632":2,"634":2,"693":3,"697":1,"698":1,"699":1,"708":2,"715":1,"719":1,"720":4,"722":1,"726":1,"727":4,"729":1,"733":1,"734":4,"736":1,"740":1,"741":4,"743":1,"747":1,"748":4,"750":9,"755":2,"757":1,"761":3,"762":4,"764":1,"768":1,"769":4,"774":1,"787":1,"796":1,"799":5,"802":5,"804":9,"819":1,"821":4,"825":1,"827":1,"831":1,"834":1,"838":1,"840":1,"842":3,"853":2,"855":2,"857":2,"859":2,"862":2,"864":2,"881":1,"889":2,"902":1,"906":1,"908":1,"910":2,"914":1,"918":1,"920":1,"922":6,"924":3,"929":6,"931":5,"932":3,"937":1,"939":6,"941":3,"946":6,"947":5,"954":1,"968":1,"971":2,"976":3,"978":1,"988":1,"992":2,"997":1,"1021":3,"1023":6,"1031":15,"1034":4,"1044":2,"1050":2,"1052":13,"1054":1,"1056":3,"1057":1,"1075":1,"1085":1,"1091":1,"1092":4,"1106":6,"1108":4,"1133":2,"1134":3,"1141":2,"1142":3,"1153":2,"1158":2,"1162":2,"1167":2,"1172":1,"1173":1,"1174":1,"1175":1,"1176":1,"1177":5,"1178":5,"1179":5,"1180":5,"1181":5,"1182":5,"1183":5,"1184":5,"1185":5,"1186":1,"1190":2,"1194":1,"1199":2,"1203":2,"1207":2,"1211":2,"1215":2,"1219":2,"1223":2,"1227":2,"1232":1,"1233":1,"1234":1,"1235":1,"1236":1,"1237":5,"1238":5,"1239":5,"1240":5,"1241":5,"1242":5,"1243":5,"1244":5,"1245":5,"1246":1,"1250":2,"1254":1,"1284":2,"1295":6,"1300":5,"1308":1,"1310":2,"1326":1,"1339":1,"1343":1,"1348":1,"1371":1,"1395":1}}],["members",{"2":{"73":1,"328":1}}],["memdump",{"2":{"35":2}}],["mempool",{"2":{"17":1,"21":1}}],["meaning",{"2":{"342":2,"357":1,"802":1,"929":1,"946":1}}],["meaningfully",{"2":{"254":1}}],["mean",{"2":{"258":1,"265":1,"327":1,"397":1}}],["meant",{"2":{"34":1,"362":1,"972":1}}],["means",{"2":{"8":1,"12":1,"54":1,"62":2,"85":1,"87":1,"94":1,"257":1,"262":1,"328":2,"342":1,"355":2,"363":1,"365":2,"395":1,"492":1,"786":1,"787":1,"812":1,"816":1,"875":2,"925":1,"928":1,"929":3,"942":1,"945":1,"946":3,"1089":1}}],["measure",{"2":{"25":1,"254":1,"1056":1}}],["messages",{"2":{"67":1,"133":1,"172":1}}],["message",{"2":{"15":1,"172":4,"194":1,"246":1,"296":1,"345":1,"396":1,"593":1,"758":1,"787":7,"788":4,"798":1,"827":2,"880":1,"881":6,"1154":1,"1159":1,"1163":1,"1168":1,"1187":1,"1191":1,"1195":1,"1200":1,"1204":1,"1208":1,"1212":1,"1216":1,"1220":1,"1224":1,"1228":1,"1247":1,"1251":1,"1255":1,"1279":1,"1327":1,"1331":1,"1364":1}}],["merge",{"2":{"712":1}}],["merged",{"2":{"425":1}}],["merges",{"2":{"13":1}}],["merkleproof",{"2":{"252":3}}],["merkle",{"0":{"250":1,"252":1},"1":{"251":1,"252":1,"253":1,"254":1},"2":{"1":1,"250":5,"251":2,"254":1}}],["mario",{"2":{"403":1}}],["marks",{"2":{"421":1,"1061":1}}],["markdown",{"2":{"359":2}}],["marked",{"2":{"355":1,"849":1,"876":1,"1008":1,"1061":1}}],["mark",{"2":{"345":1,"439":2,"875":1,"876":2}}],["map",{"2":{"192":2,"456":1}}],["mapped",{"2":{"187":1,"398":1}}],["mapping",{"2":{"34":1,"172":1,"192":1,"271":1,"428":1,"507":1,"508":1,"775":1,"1052":1,"1151":1,"1394":1,"1395":2}}],["maps",{"2":{"133":1,"192":1,"199":1}}],["macosx",{"2":{"190":1}}],["macos",{"2":{"111":1,"158":1,"177":1,"187":1}}],["machine",{"2":{"35":2,"362":1,"363":1}}],["maxpercentdelta",{"2":{"215":2,"245":1,"1162":4,"1167":4}}],["maxdelta",{"2":{"215":2,"243":1,"1153":4,"1158":4}}],["max",{"0":{"523":1,"526":1,"565":1,"583":1},"2":{"102":1,"117":3,"172":3,"282":2,"284":3,"421":2,"431":1,"445":1,"446":2,"517":2,"521":1,"522":1,"523":1,"524":1,"525":1,"526":1,"536":1,"565":1,"567":1,"583":1,"618":2,"650":3,"651":1,"654":2,"748":1,"768":1,"1155":1,"1164":1,"1270":1}}],["maximum",{"2":{"25":1,"328":1,"421":4,"435":1,"446":1,"492":1,"565":1,"582":1,"583":1}}],["massive",{"2":{"102":1}}],["master",{"2":{"100":1,"155":1,"164":1,"396":1,"399":1,"407":1,"410":1}}],["mail",{"2":{"72":1}}],["mainly",{"2":{"475":1,"654":1}}],["maintenance",{"0":{"419":1},"2":{"419":1}}],["maintainers",{"2":{"419":1,"454":1}}],["maintaining",{"2":{"141":1,"317":1}}],["maintain",{"2":{"25":1,"313":1}}],["main",{"2":{"94":1,"172":2,"363":1,"476":1,"826":1}}],["mainnet`",{"2":{"1023":1}}],["mainnet2",{"2":{"428":1}}],["mainnetforkid",{"2":{"638":4}}],["mainnetfork",{"2":{"344":8,"345":5,"876":1,"1008":1}}],["mainnet",{"0":{"79":1,"141":1},"2":{"1":1,"25":1,"35":1,"44":2,"45":1,"80":2,"86":1,"87":2,"92":1,"133":2,"141":1,"162":1,"172":7,"184":1,"338":1,"344":6,"345":5,"393":1,"421":2,"428":2,"545":1,"561":4,"602":2,"638":1,"685":4,"690":4,"978":1,"1013":1,"1023":7,"1028":1,"1112":1,"1284":1,"1395":1}}],["major",{"2":{"51":1,"87":1,"384":1,"419":1}}],["matters",{"2":{"929":1,"946":1,"1402":1}}],["matter",{"2":{"328":2}}],["mathematical",{"2":{"336":1,"1271":1,"1354":1}}],["math",{"0":{"336":1,"1391":1},"2":{"172":1,"336":1,"407":1,"410":1,"1354":1}}],["maths",{"2":{"45":4}}],["matches",{"2":{"325":1,"778":2,"782":1,"880":2,"884":2,"888":1,"892":2}}],["matched",{"2":{"152":1}}],["matching",{"2":{"36":1,"172":1,"325":6,"421":3,"517":2,"520":1,"549":1,"550":1,"551":1,"552":1,"553":1,"554":1,"782":1,"888":1}}],["match",{"0":{"549":1,"550":1,"551":1,"552":1,"553":1,"554":1},"2":{"36":3,"62":3,"75":1,"87":1,"172":2,"182":3,"185":1,"282":1,"284":1,"325":14,"347":9,"355":1,"416":1,"421":11,"546":1,"549":3,"550":3,"551":3,"552":3,"553":3,"554":3,"778":2,"782":5,"787":5,"880":4,"884":4,"892":2,"929":1,"946":1}}],["may",{"2":{"43":1,"45":1,"58":1,"61":1,"62":2,"82":1,"83":1,"87":1,"94":1,"118":1,"119":1,"120":1,"157":1,"177":1,"188":1,"190":1,"252":1,"257":1,"309":1,"327":1,"338":1,"355":2,"363":1,"368":1,"375":1,"378":2,"384":3,"387":2,"398":1,"444":2,"446":1,"497":2,"565":1,"650":1,"654":1,"786":1,"787":1,"884":1,"894":1,"1086":1,"1263":1,"1396":1}}],["mangles",{"2":{"787":1}}],["manual",{"2":{"370":1}}],["manually",{"2":{"69":1,"77":1,"78":1,"116":1,"155":1,"172":1,"248":1,"269":2,"272":1,"411":1,"655":1}}],["manipulating",{"2":{"335":1,"1392":1}}],["manipulation",{"2":{"141":1,"172":1,"803":1,"1354":1}}],["manipulate",{"2":{"328":1}}],["manipulated",{"2":{"272":1,"419":1}}],["managed",{"2":{"475":1}}],["manage",{"2":{"188":1,"276":1,"337":1,"344":1,"407":1}}],["manages",{"2":{"159":1,"395":1,"412":1}}],["manager",{"0":{"403":1},"1":{"404":1,"405":1,"406":1,"407":1,"408":1,"409":1,"410":1,"411":1,"412":1,"413":1,"414":1,"415":1,"416":1,"417":1},"2":{"154":1,"403":2,"409":1,"418":1,"476":1}}],["managers",{"2":{"127":1,"188":1,"418":1}}],["management",{"0":{"276":1,"360":1},"1":{"361":1,"362":1,"363":1},"2":{"150":1,"162":1,"172":3}}],["many",{"2":{"108":1,"248":1,"262":1,"264":1,"355":2,"363":1,"384":2,"482":1,"492":1}}],["manner",{"2":{"90":1,"172":1,"787":1}}],["man",{"2":{"32":1}}],["made",{"2":{"15":1,"94":1,"262":2,"272":4,"275":2,"282":1,"327":1,"342":1,"376":1,"778":6,"787":1,"880":1,"884":1,"892":1,"894":1,"1088":1,"1089":2}}],["makerdao",{"2":{"365":1}}],["makepersistent",{"0":{"873":1},"1":{"874":1,"875":1,"876":1,"877":1},"2":{"345":2,"800":1,"849":1,"851":1,"874":4,"876":1,"1007":1,"1008":1}}],["makeaddrandkey",{"0":{"1338":1},"1":{"1339":1,"1340":1,"1341":1},"2":{"1056":1,"1339":1,"1341":1,"1382":1}}],["makeaddr",{"0":{"1342":1},"1":{"1343":1,"1344":1,"1345":1},"2":{"172":1,"260":6,"703":2,"774":1,"779":4,"1343":1,"1345":1,"1382":1}}],["makes",{"2":{"33":1,"87":1,"89":1,"254":1,"335":1,"369":1,"375":1,"384":1,"387":1,"396":1,"432":1,"1007":1,"1268":1,"1392":1}}],["make",{"2":{"14":1,"45":1,"47":1,"49":1,"50":1,"59":1,"63":1,"67":1,"85":1,"91":1,"106":1,"107":1,"118":1,"132":1,"142":1,"158":1,"172":2,"176":1,"191":1,"257":1,"260":2,"328":1,"329":1,"333":1,"349":1,"356":1,"364":1,"365":1,"368":2,"378":1,"383":1,"384":2,"397":1,"414":1,"416":1,"476":1,"798":3,"931":1,"934":1,"947":1,"949":1,"1008":1,"1022":1,"1023":1,"1038":1,"1353":1}}],["making",{"2":{"3":1,"316":1,"361":1,"362":1,"403":1,"444":1,"507":1,"783":1,"786":1,"787":1}}],["m",{"0":{"187":1,"189":1,"191":1},"2":{"1":1,"17":2,"41":1,"251":1,"252":3,"254":2,"325":1,"707":1,"708":3,"997":1,"1310":2}}],["mnemonic",{"0":{"603":1,"608":1},"1":{"604":1,"605":1,"606":1,"607":1,"608":1,"609":1,"610":1},"2":{"1":1,"3":3,"17":3,"363":2,"604":2,"605":1,"606":1,"608":2,"609":3,"625":5,"629":10,"706":2,"707":2,"708":6,"997":3,"1308":1,"1309":1,"1310":6}}],["pseudo",{"2":{"378":1,"1301":1}}],["psm3",{"2":{"102":1}}],["psmchange",{"2":{"102":1}}],["pnpm",{"0":{"188":1},"2":{"188":3,"475":1}}],["pk",{"2":{"131":1,"1052":12}}],["python3",{"2":{"127":1}}],["python",{"2":{"127":3,"250":1,"255":1}}],["pcaversaccio",{"2":{"126":1}}],["pledge",{"2":{"363":1,"609":1}}],["please",{"2":{"94":1,"173":1,"187":2,"256":1,"259":1,"263":1,"398":1,"419":1,"507":1}}],["plus",{"2":{"342":1}}],["plugins",{"2":{"106":1,"117":2}}],["plugin",{"2":{"106":2,"107":1,"117":7}}],["plan",{"2":{"387":1}}],["plantuml",{"2":{"359":1}}],["players",{"2":{"1394":1}}],["playertocharacter",{"2":{"1394":3}}],["play",{"2":{"118":1}}],["playlist",{"2":{"97":1}}],["playlists",{"2":{"97":1}}],["places",{"2":{"428":1,"659":1}}],["place",{"2":{"83":1,"119":1,"172":1,"660":2,"1328":3}}],["placed",{"2":{"57":1,"108":1,"347":1,"371":1}}],["phase",{"2":{"90":1}}],["phases",{"2":{"90":3}}],["phrases",{"2":{"361":1,"629":1}}],["phrase",{"2":{"17":1,"363":1,"606":1,"609":1}}],["pip",{"0":{"127":1},"2":{"127":1}}],["pip3",{"2":{"117":1}}],["pipeline",{"2":{"156":1,"168":1,"289":1,"421":1,"493":1,"508":1}}],["pipe",{"2":{"17":1}}],["piece",{"2":{"106":1}}],["picked",{"2":{"356":1}}],["picks",{"2":{"266":1}}],["pick",{"2":{"81":1,"96":1}}],["pineapple",{"2":{"929":1,"946":1}}],["pins",{"2":{"421":1}}],["pinning",{"2":{"386":2,"416":1}}],["pin",{"2":{"60":1,"388":1,"484":1}}],["put",{"2":{"379":1,"421":1,"465":1,"759":1}}],["pulled",{"2":{"413":1}}],["pulls",{"2":{"396":1}}],["pull",{"2":{"157":2,"399":1,"410":1}}],["pushed",{"2":{"416":1}}],["pushing",{"0":{"414":1},"1":{"415":1,"416":1},"2":{"415":1,"416":1,"419":1}}],["push0",{"2":{"355":1}}],["push",{"0":{"569":1,"581":1},"2":{"99":1,"172":1,"280":4,"363":1,"414":7,"415":2,"416":2,"417":1,"419":2,"421":4,"569":2,"581":3}}],["publish",{"2":{"414":1,"617":1}}],["publishing",{"2":{"43":1,"419":1}}],["publickeyy",{"2":{"693":1,"697":1,"698":1,"699":1}}],["publickeyx",{"2":{"693":1,"697":1,"698":1,"699":1}}],["public",{"2":{"27":1,"44":1,"77":2,"78":3,"80":1,"85":1,"87":1,"92":1,"94":3,"115":1,"128":5,"129":1,"172":14,"192":2,"195":5,"196":2,"249":1,"251":1,"252":1,"254":2,"257":5,"260":6,"262":2,"270":3,"271":9,"272":1,"273":1,"274":1,"275":1,"276":2,"279":2,"280":6,"307":2,"308":2,"309":3,"311":2,"314":3,"315":2,"319":2,"328":8,"344":6,"345":5,"356":7,"357":5,"358":2,"359":1,"374":1,"378":1,"392":1,"431":2,"434":2,"444":1,"445":1,"446":1,"447":1,"634":2,"651":2,"655":2,"660":1,"665":1,"681":3,"755":2,"775":3,"783":4,"786":1,"787":2,"788":3,"809":16,"876":3,"881":3,"885":8,"889":2,"893":6,"932":1,"961":1,"975":2,"992":2,"1008":3,"1039":4,"1052":10,"1056":4,"1062":2,"1070":2,"1075":6,"1083":2,"1091":1,"1092":1,"1096":1,"1117":1,"1151":3,"1262":2,"1267":1,"1270":1,"1287":3,"1295":4,"1333":4,"1366":1,"1375":1,"1379":4,"1394":1}}],["purchase",{"2":{"1056":2}}],["pure",{"2":{"34":1,"148":1,"192":4,"280":2,"311":2,"314":3,"319":2,"357":1,"775":2,"900":1,"904":1,"908":1,"912":1,"916":1,"920":1,"937":1,"952":1,"1145":1,"1281":1,"1284":1,"1291":2,"1356":2,"1395":1}}],["purposes",{"2":{"82":1,"363":1,"783":1}}],["purpose",{"2":{"25":1}}],["p",{"2":{"17":1,"112":1,"113":1}}],["peephole",{"2":{"495":1}}],["people",{"2":{"87":1}}],["perpetual",{"2":{"1380":1}}],["percent60",{"2":{"1358":1}}],["percent150",{"2":{"1358":1}}],["percentdelta",{"0":{"1355":1},"1":{"1356":1,"1357":1,"1358":1},"2":{"1356":2,"1357":1,"1358":2,"1391":1}}],["percent",{"2":{"1285":1}}],["percentage",{"2":{"215":1,"245":1,"1163":1,"1168":1,"1357":1}}],["perspective",{"2":{"807":2,"809":1}}],["person",{"2":{"378":1}}],["persisting",{"2":{"350":1}}],["persistent",{"0":{"345":1},"2":{"342":4,"345":5,"849":1,"850":1,"875":2,"876":5,"1007":1,"1008":5}}],["persisted",{"0":{"199":1,"354":1},"2":{"193":1,"264":1,"352":1,"353":1,"354":1}}],["persist",{"0":{"571":1,"572":1,"585":1},"2":{"34":2,"352":3,"353":3,"421":5,"571":1,"572":1,"585":1,"1042":1}}],["perhaps",{"2":{"328":1}}],["permission",{"0":{"189":1},"2":{"189":2,"803":1,"820":1,"826":1}}],["permissions",{"2":{"172":1,"356":2,"421":2,"458":3,"802":1,"803":4,"804":3,"820":1,"826":1,"934":2,"949":2}}],["permitdetails",{"2":{"76":2,"77":2,"78":7}}],["permit2",{"2":{"67":1,"75":1}}],["permithashtest",{"2":{"77":1,"78":1}}],["permithash",{"0":{"75":1},"1":{"76":1},"2":{"67":1,"75":2,"76":3,"77":2,"78":2}}],["permitsingle",{"2":{"76":1,"77":2,"78":7}}],["permits",{"2":{"67":1}}],["permit",{"2":{"67":1,"75":1,"77":4,"78":2,"172":15}}],["perfect",{"2":{"139":1,"146":1}}],["perfectly",{"2":{"67":1}}],["performs",{"2":{"1021":1}}],["performing",{"2":{"266":1,"311":2,"578":1}}],["performed",{"2":{"262":1,"351":1}}],["performance",{"2":{"254":1,"1271":1}}],["perform",{"2":{"115":1,"274":2,"276":1,"446":1,"447":1,"470":1,"564":1,"597":1,"599":1,"782":2,"783":5,"1055":1}}],["per",{"0":{"538":1},"2":{"18":3,"19":1,"74":1,"259":1,"263":1,"292":1,"338":1,"384":1,"421":2,"436":1,"444":1,"538":3}}],["period",{"2":{"8":1}}],["pending",{"2":{"14":3,"95":1}}],["potential",{"2":{"398":1,"1088":1}}],["potentially",{"2":{"307":2,"308":1}}],["pop",{"2":{"1361":1}}],["poperror",{"0":{"1359":1},"1":{"1360":1,"1361":1},"2":{"1360":1,"1383":1}}],["popemptyarray",{"2":{"506":1}}],["popping",{"2":{"506":1}}],["popped",{"2":{"37":1,"394":1}}],["popular",{"2":{"419":1}}],["popularity",{"2":{"250":1}}],["pos",{"2":{"1039":4}}],["possibility",{"2":{"265":2}}],["possible",{"2":{"24":1,"35":1,"44":1,"54":1,"103":1,"264":1,"319":1,"338":1,"339":1,"355":2,"357":1,"358":1,"371":1,"430":2,"431":1,"439":2,"444":1,"454":1,"485":2,"507":1,"782":1,"875":1,"1130":1,"1138":1}}],["position",{"2":{"280":1,"1306":1,"1393":1}}],["positions",{"2":{"262":1}}],["positives",{"2":{"265":1,"309":1,"452":1}}],["positive",{"2":{"172":1,"364":3}}],["postbalance",{"2":{"257":4}}],["post",{"2":{"172":3,"262":2,"599":1,"712":1}}],["pozzdekbrdf",{"2":{"133":1}}],["power",{"2":{"253":1}}],["powered",{"2":{"97":1,"250":1}}],["powerful",{"2":{"67":1,"262":1,"265":1,"272":1,"894":1,"896":1}}],["powershell",{"2":{"22":1,"110":1,"151":1}}],["polygon",{"2":{"172":3,"978":2}}],["polygonscan",{"2":{"45":1,"52":1,"172":2,"428":1}}],["policy",{"2":{"101":1,"152":1}}],["poll",{"2":{"45":1,"327":1}}],["pointing",{"2":{"802":2}}],["points",{"2":{"87":1,"345":1,"397":1,"802":3,"804":3}}],["pointer",{"2":{"35":2,"1395":2,"1406":1}}],["point",{"2":{"27":1,"127":1,"248":1,"365":2,"398":1,"613":2,"927":2,"944":2,"1033":1,"1327":1}}],["poolmanager",{"2":{"102":1}}],["pool",{"2":{"13":1,"264":1}}],["portable",{"2":{"134":1}}],["portability",{"2":{"87":1}}],["ports",{"2":{"88":1}}],["portions",{"2":{"83":1}}],["port",{"2":{"9":3,"17":3,"172":3}}],["prb",{"2":{"407":1,"410":1}}],["pr",{"2":{"102":1}}],["pranked",{"2":{"960":1,"1074":1}}],["prank",{"0":{"958":1},"1":{"959":1,"960":1,"961":1,"962":1},"2":{"196":2,"276":1,"328":1,"333":1,"770":1,"787":1,"959":4,"960":4,"961":1,"981":1,"982":5,"983":4,"984":1,"1075":1,"1099":1,"1151":1,"1276":2,"1334":1,"1380":1}}],["practice",{"2":{"267":1,"314":1,"356":1}}],["practices",{"0":{"364":1,"372":1,"454":1,"974":1},"1":{"365":1,"373":1,"374":1,"375":1,"376":1,"377":1,"378":1,"379":1,"975":1,"976":1},"2":{"162":3,"171":2,"172":4,"173":1,"193":1,"302":1,"356":1,"371":1,"972":1}}],["practical",{"2":{"67":1}}],["pragma",{"2":{"27":1,"43":1,"76":1,"94":3,"115":1,"172":1,"192":3,"257":1,"271":1,"307":1,"308":1,"309":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"328":2,"356":1,"482":1,"775":1,"1052":2,"1056":1}}],["prague",{"2":{"17":1,"346":1,"484":2,"511":1,"1051":2,"1052":1}}],["pruner",{"2":{"117":1}}],["prune",{"2":{"20":1}}],["preemptive",{"2":{"1088":1}}],["preempted",{"2":{"1086":1}}],["pressing",{"2":{"660":1}}],["preserving",{"2":{"432":1}}],["preserved",{"2":{"875":1}}],["preserve",{"2":{"421":1,"430":2,"438":1,"439":1,"440":2,"441":1}}],["presented",{"2":{"37":1}}],["present",{"0":{"417":1},"2":{"18":1,"93":1,"111":1,"198":1,"417":2,"898":1,"920":1,"921":1,"937":1,"938":1}}],["prebalance",{"2":{"257":4}}],["pretty",{"2":{"200":1,"587":1}}],["predates",{"2":{"388":1}}],["predecessors",{"2":{"248":1}}],["predefined",{"2":{"25":1}}],["predictable",{"2":{"162":1}}],["prevents",{"2":{"271":1}}],["prevent",{"2":{"196":1,"646":1,"944":1,"973":1,"1051":1}}],["prevention",{"2":{"162":1}}],["prevrandao",{"0":{"963":1},"1":{"964":1,"965":1,"966":1},"2":{"191":1,"712":1,"770":1,"964":1,"965":1,"966":2}}],["previousvalue",{"2":{"1085":1,"1089":1,"1091":1}}],["previous",{"2":{"14":1,"35":2,"37":1,"40":2,"90":3,"377":1,"965":1,"1081":2,"1086":1,"1088":1}}],["previously",{"2":{"13":2,"35":1,"76":1,"90":1,"94":1,"249":1,"399":1,"684":1,"689":1,"832":1,"1011":1,"1012":1,"1028":1,"1081":1,"1087":1}}],["precisely",{"2":{"1357":1}}],["precision",{"2":{"311":1,"944":1}}],["precalculate",{"2":{"1282":1}}],["precautions",{"2":{"363":1}}],["precaution",{"2":{"43":1}}],["precede",{"2":{"929":2,"946":2}}],["precedence",{"2":{"421":1,"880":1,"884":1,"888":1}}],["precompile",{"2":{"775":6,"1263":1,"1264":1,"1265":1}}],["precompiles",{"0":{"775":1},"2":{"775":2,"1263":1}}],["precompiled",{"0":{"150":1},"2":{"150":1,"151":1}}],["preprocesses",{"2":{"102":1}}],["prepare",{"2":{"78":1}}],["prerequisites",{"0":{"154":1},"2":{"92":1}}],["prefer",{"2":{"376":1,"384":1,"386":1,"388":1,"416":1}}],["preferred",{"2":{"60":1,"291":1,"329":1,"356":1,"394":1,"1353":1}}],["prefixing",{"2":{"262":2,"375":1}}],["prefixed",{"2":{"260":1,"279":1,"356":2,"458":1,"832":1}}],["prefix",{"0":{"47":1},"2":{"45":1,"65":1,"172":4,"196":1,"251":2,"260":1,"279":3,"412":2,"446":1,"447":1}}],["pre",{"0":{"45":1},"1":{"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1},"2":{"25":1,"102":1,"140":1,"172":1,"262":2,"1086":1,"1087":1}}],["preallocated",{"2":{"25":1}}],["primitives",{"2":{"259":1,"263":1}}],["primer",{"0":{"249":1}}],["primary",{"2":{"84":1}}],["privileged",{"2":{"94":1}}],["privatekey",{"2":{"641":1,"663":1,"693":1,"697":2,"698":2,"699":2,"708":2,"979":2,"995":1,"997":2,"1050":2,"1054":1,"1055":1,"1068":1,"1308":1,"1310":2,"1339":1}}],["private",{"0":{"362":1,"391":1},"2":{"1":1,"43":5,"44":2,"47":1,"50":1,"64":1,"78":1,"80":1,"86":1,"92":4,"94":4,"95":4,"96":5,"129":1,"130":1,"133":2,"138":3,"144":3,"162":1,"172":5,"356":1,"360":1,"361":1,"362":4,"363":5,"374":1,"391":2,"396":1,"609":1,"625":8,"629":8,"642":1,"664":1,"665":2,"694":1,"707":1,"708":2,"775":1,"871":1,"979":1,"996":1,"997":4,"1052":8,"1055":1,"1057":1,"1069":1,"1070":2,"1103":1,"1309":2,"1310":1,"1340":1}}],["priorities",{"2":{"266":1}}],["prioritize",{"2":{"172":1,"365":1}}],["priority",{"2":{"183":1,"198":1}}],["prior",{"2":{"87":1,"192":1,"198":1,"199":1,"1088":1,"1089":1}}],["printf",{"2":{"1285":1}}],["println",{"2":{"798":1}}],["printout",{"2":{"251":1}}],["prints",{"2":{"251":1,"288":1,"296":1,"593":1,"612":1,"1285":1}}],["printed",{"2":{"35":1,"434":1}}],["print",{"2":{"17":3,"33":1,"35":2,"291":4,"325":1,"421":3,"434":1,"437":1,"542":1,"559":1,"560":1,"621":1,"798":1}}],["price`",{"2":{"172":1}}],["price",{"0":{"537":1},"2":{"13":1,"19":3,"95":2,"96":1,"172":4,"292":3,"338":1,"421":2,"537":3,"589":1}}],["proptest",{"2":{"421":2}}],["properly",{"2":{"272":1,"359":1,"925":1,"942":1}}],["proper",{"2":{"172":6,"173":1,"346":1,"497":1}}],["properties",{"2":{"138":1,"172":1,"173":1,"502":1}}],["propertyname`",{"2":{"172":1}}],["propertyname",{"2":{"172":1}}],["property",{"2":{"85":1,"138":2,"172":3,"257":8}}],["probably",{"2":{"927":1,"944":1}}],["probability",{"0":{"267":1},"2":{"267":2,"270":1}}],["problematic",{"2":{"386":1}}],["problem",{"2":{"277":1}}],["proxies",{"2":{"266":1,"268":1}}],["proxytest",{"2":{"1075":3}}],["proxy=http",{"2":{"190":2}}],["proxy",{"2":{"10":1,"172":1,"190":1,"266":2,"1075":5,"1395":1}}],["processes",{"2":{"1042":1}}],["processing",{"2":{"262":1}}],["process",{"2":{"248":1,"481":1,"582":1,"1042":4,"1051":1}}],["professional",{"2":{"172":1}}],["profiler",{"2":{"117":1}}],["profiles",{"0":{"456":1},"2":{"108":4,"109":1,"194":1,"444":1,"456":3,"507":4,"508":3,"561":1}}],["profile",{"0":{"509":1,"510":1,"511":1,"512":1,"513":1,"514":1},"2":{"59":1,"102":1,"108":8,"109":6,"122":1,"155":5,"172":2,"194":1,"407":1,"410":1,"421":1,"446":1,"447":1,"456":7,"458":1,"460":1,"497":1,"499":1,"507":9,"508":3,"509":1,"510":1,"511":1,"512":1,"513":1,"514":1,"574":3}}],["provers",{"2":{"250":1}}],["prover",{"2":{"187":1}}],["provenance",{"0":{"152":1},"2":{"152":1}}],["proving",{"2":{"25":1}}],["provide",{"2":{"43":1,"45":2,"75":1,"115":1,"171":1,"172":2,"173":1,"199":1,"272":1,"334":1,"337":1,"362":1,"363":1,"368":1,"409":1,"426":1,"609":1,"975":1,"976":1,"978":1}}],["provided",{"2":{"35":3,"82":1,"90":4,"94":1,"141":1,"155":1,"251":1,"258":1,"260":1,"336":1,"408":1,"425":1,"432":1,"520":1,"625":2,"629":2,"664":1,"684":1,"689":1,"803":1,"822":1,"828":1,"1012":1,"1033":1,"1069":1,"1088":1,"1130":2,"1138":2,"1340":2,"1344":2}}],["provides",{"2":{"33":1,"67":1,"89":1,"91":1,"94":1,"119":1,"202":1,"204":1,"216":1,"285":1,"329":1,"335":1,"356":1,"444":1,"1022":1,"1354":1,"1386":1}}],["providers",{"2":{"87":1}}],["provider",{"2":{"18":2,"83":1,"92":1,"601":1,"1111":1}}],["providing",{"2":{"24":1,"90":1,"133":1,"246":1,"283":1,"408":1,"752":1}}],["protect",{"2":{"378":1}}],["protections",{"2":{"172":1,"957":1}}],["protection",{"2":{"172":3}}],["protected",{"2":{"95":1,"360":1}}],["protocolcondition",{"2":{"265":4}}],["protocol",{"2":{"262":1,"264":4,"265":1,"272":3,"275":2,"375":1}}],["protocols",{"2":{"172":3,"262":1,"271":1}}],["prototyping",{"2":{"134":1,"146":1,"167":1}}],["proofs",{"2":{"250":2,"254":1}}],["proof",{"0":{"252":1},"2":{"92":1,"250":2,"252":3,"588":1}}],["progress",{"0":{"556":1},"2":{"421":2,"556":2}}],["progress=plain",{"2":{"85":2,"86":1}}],["programmatically",{"2":{"248":1,"341":1}}],["programmera",{"2":{"97":1}}],["programs",{"2":{"94":1,"530":1}}],["program",{"2":{"37":1,"798":1}}],["produced",{"2":{"932":1}}],["produce",{"2":{"284":3,"345":1,"355":1,"481":1,"492":2,"1034":2}}],["produces",{"2":{"8":1}}],["producing",{"2":{"197":1}}],["productivity",{"2":{"168":1}}],["production",{"2":{"82":1,"85":1,"87":1,"94":1,"173":1,"376":1,"392":1,"1301":1}}],["promptsecretuint",{"2":{"971":1,"972":1,"979":1}}],["promptsecret",{"2":{"971":1,"972":1}}],["prompttext",{"2":{"971":3}}],["prompting",{"0":{"171":1},"1":{"172":1,"173":1}}],["prompt",{"0":{"172":1,"562":1,"970":1,"975":1},"1":{"971":1,"972":1,"973":1,"974":1,"975":1,"976":1,"977":1,"978":1,"979":1},"2":{"34":1,"95":1,"151":1,"171":2,"172":6,"173":3,"562":2,"625":1,"629":1,"790":1,"971":1,"972":3,"973":2,"975":2,"976":2,"978":1,"979":2}}],["project~1",{"2":{"414":3,"415":1}}],["project~v1",{"2":{"409":7}}],["projectroot",{"0":{"967":1},"1":{"968":1,"969":1},"2":{"379":1,"790":1,"929":1,"931":1,"932":1,"946":1,"947":1,"968":1}}],["projectchangefiles",{"2":{"102":1}}],["projects",{"2":{"102":1,"163":1,"172":2,"193":1,"194":2,"195":1,"196":1,"197":1,"198":2,"199":1,"394":1,"401":1,"403":1,"414":1,"419":1,"507":1}}],["project",{"0":{"106":1,"107":1,"123":1,"136":1,"163":1,"322":1,"323":1,"394":1,"402":1,"405":1,"461":1},"1":{"462":1,"463":1,"464":1,"465":1,"466":1,"467":1,"468":1,"469":1,"470":1},"2":{"18":1,"26":3,"35":2,"54":1,"82":1,"93":2,"95":1,"99":2,"100":1,"101":1,"103":1,"104":2,"105":1,"106":4,"107":3,"108":1,"115":4,"116":2,"117":1,"123":1,"132":1,"136":1,"159":1,"163":1,"168":1,"172":9,"173":2,"181":1,"183":2,"186":1,"189":2,"194":1,"198":4,"266":1,"277":1,"286":1,"303":5,"304":1,"307":1,"308":1,"309":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"323":2,"327":1,"347":1,"368":1,"375":1,"393":5,"394":3,"397":1,"402":2,"405":1,"414":6,"416":3,"419":2,"420":1,"461":1,"462":1,"463":1,"464":1,"465":1,"466":1,"468":1,"469":1,"478":1,"479":1,"497":1,"530":1,"797":1,"798":1,"802":1,"803":2,"804":3,"820":2,"826":2,"969":1,"1296":1,"1301":1}}],["paused",{"2":{"1004":1,"1090":1}}],["pauses",{"2":{"957":1}}],["pausegasmetering",{"0":{"955":1},"1":{"956":1,"957":1},"2":{"770":1,"956":1,"957":1}}],["payload",{"2":{"827":2}}],["pay",{"2":{"779":8,"881":5,"885":5}}],["payable",{"2":{"128":1,"257":5,"827":1,"979":1,"1052":6,"1056":1,"1091":1}}],["panic",{"2":{"334":1}}],["pack",{"2":{"393":1}}],["packed",{"0":{"1315":1,"1395":1},"1":{"1316":1,"1317":1,"1318":1},"2":{"251":2,"1316":1,"1317":1,"1318":1,"1393":2,"1395":3}}],["packages",{"2":{"127":1,"188":1,"401":1,"419":1}}],["packagedefaultdependenciesdirectory",{"2":{"120":1}}],["packagedefaultdependenciescontractsdirectory",{"2":{"120":1}}],["package",{"0":{"403":1,"417":1},"1":{"404":1,"405":1,"406":1,"407":1,"408":1,"409":1,"410":1,"411":1,"412":1,"413":1,"414":1,"415":1,"416":1,"417":1},"2":{"35":1,"106":1,"126":1,"127":2,"154":1,"188":2,"402":1,"403":1,"417":2,"476":1}}],["patrick",{"2":{"363":1}}],["patches",{"2":{"329":1,"1353":1}}],["pattern",{"2":{"172":4,"270":1,"309":1,"325":7,"347":1,"356":1,"376":1,"390":1,"392":1,"421":7,"549":1,"550":1,"551":1,"552":1,"553":1,"554":1,"975":1}}],["patterns",{"2":{"162":1,"171":1,"172":10,"427":2,"443":2,"451":3,"546":2,"1395":1}}],["path=",{"2":{"158":1}}],["path=$path",{"2":{"100":1}}],["paths`",{"2":{"803":1}}],["paths",{"0":{"54":1,"475":1,"476":1,"517":1,"1131":1,"1139":1},"2":{"115":1,"183":1,"188":4,"189":2,"303":1,"323":2,"368":4,"402":2,"421":5,"466":2,"475":4,"476":3,"481":3,"507":2,"517":1,"623":3,"624":1,"625":2,"629":4,"803":2,"1033":1,"1130":1,"1138":1}}],["path",{"0":{"468":1,"553":1,"554":1},"2":{"1":1,"17":7,"45":3,"54":3,"115":2,"116":1,"125":4,"155":6,"158":2,"172":1,"182":1,"183":4,"188":1,"265":1,"282":1,"289":2,"301":1,"303":3,"323":14,"325":3,"327":2,"347":4,"353":1,"364":1,"393":1,"400":1,"408":2,"414":1,"421":9,"423":1,"425":1,"462":1,"463":1,"464":1,"465":1,"468":3,"469":1,"476":2,"481":3,"497":1,"499":1,"517":1,"553":5,"554":5,"571":2,"585":2,"625":2,"628":1,"629":3,"706":1,"707":3,"708":2,"802":17,"803":1,"804":15,"820":3,"822":1,"826":3,"828":1,"855":3,"859":3,"864":3,"929":2,"931":2,"932":2,"934":2,"946":2,"947":2,"949":2,"997":1,"1033":1,"1129":2,"1130":6,"1131":1,"1137":2,"1138":6,"1139":1,"1296":1,"1301":1,"1310":2}}],["pairs",{"2":{"421":1,"459":1,"1021":1,"1023":1}}],["paid",{"2":{"95":2,"96":2}}],["pain",{"2":{"87":1}}],["pascal",{"0":{"313":1},"2":{"313":1}}],["pascalcasestruct",{"2":{"313":1}}],["pascalcase",{"2":{"172":3,"313":1}}],["pasting",{"2":{"172":1,"391":1}}],["paste",{"2":{"51":2,"69":1,"77":1,"78":1}}],["past",{"2":{"34":1}}],["passphrases",{"2":{"629":1}}],["passphrase",{"2":{"629":2}}],["passwords",{"2":{"624":2,"972":1}}],["password",{"2":{"95":1,"363":2,"624":1,"628":4}}],["passes",{"2":{"54":1,"257":2,"328":2,"356":1,"1276":1,"1402":1}}],["passed",{"2":{"49":1,"56":2,"84":1,"85":2,"257":6,"283":2,"325":1,"327":1,"328":2,"347":6,"394":2,"601":1,"684":1,"689":1,"751":1,"1012":1,"1013":1,"1088":1,"1285":2,"1296":1,"1301":1}}],["passing",{"2":{"24":1,"43":1,"65":1,"102":1,"323":1,"339":1,"342":1,"347":1,"348":1,"413":1,"783":2,"808":2}}],["pass",{"2":{"12":1,"18":4,"43":2,"45":1,"48":1,"56":3,"94":1,"117":1,"133":1,"183":2,"184":1,"192":1,"246":1,"257":2,"270":3,"272":1,"275":1,"283":20,"291":1,"328":1,"338":1,"340":1,"347":5,"364":1,"394":3,"401":1,"402":1,"601":1,"651":2,"655":2,"778":1,"779":6,"787":1,"788":1,"798":1,"808":2,"821":1,"961":1,"1033":1,"1056":1,"1057":1,"1283":1,"1352":1,"1393":1,"1402":1}}],["paginated",{"2":{"15":3}}],["page",{"2":{"15":1,"150":1,"459":1}}],["parity",{"2":{"1050":1}}],["paris",{"2":{"17":1,"484":2,"712":1,"965":1}}],["parsing",{"2":{"752":1,"929":1,"932":1,"946":1,"979":1,"1034":1}}],["parseuint",{"0":{"951":1},"1":{"952":1,"953":1,"954":1},"2":{"952":1,"954":1,"975":1,"979":1}}],["parsetomluintarray",{"2":{"945":1}}],["parsetomluint",{"2":{"945":1}}],["parsetoml",{"0":{"940":1},"1":{"941":1,"942":1,"943":1,"944":1,"945":1,"946":1,"947":1,"948":1,"949":1,"950":1},"2":{"941":2,"943":1,"945":2,"946":1}}],["parsetomlkeys",{"0":{"936":1},"1":{"937":1,"938":1,"939":1},"2":{"937":1,"939":3}}],["parseraw",{"2":{"931":2,"947":2}}],["parsererror",{"2":{"188":1}}],["parseint",{"0":{"915":1},"1":{"916":1,"917":1,"918":1},"2":{"916":1,"918":1}}],["parsebytes32",{"0":{"911":1},"1":{"912":1,"913":1,"914":1},"2":{"912":1,"914":1}}],["parsebytes",{"0":{"907":1},"1":{"908":1,"909":1,"910":1},"2":{"908":1,"910":1}}],["parsebool",{"0":{"903":1},"1":{"904":1,"905":1,"906":1},"2":{"904":1,"906":1}}],["parseaddress",{"0":{"899":1},"1":{"900":1,"901":1,"902":1},"2":{"900":1,"902":1,"979":1}}],["parsejsonuintarray",{"2":{"928":1}}],["parsejsonuint",{"2":{"928":1}}],["parsejsonkeys",{"0":{"919":1},"1":{"920":1,"921":1,"922":1},"2":{"920":1,"922":3}}],["parsejson",{"0":{"923":1},"1":{"924":1,"925":1,"926":1,"927":1,"928":1,"929":1,"930":1,"931":1,"932":1,"933":1,"934":1,"935":1},"2":{"790":1,"924":2,"926":1,"928":2,"929":1}}],["parses",{"2":{"327":1,"901":1,"905":1,"909":1,"913":1,"917":1,"953":1}}],["parsedvalue",{"2":{"900":1,"904":1,"908":1,"912":1,"916":1,"952":1}}],["parsed",{"2":{"70":1,"752":1,"929":1,"946":1}}],["parse",{"0":{"49":1,"979":1},"2":{"35":1,"359":1,"613":2,"925":1,"928":1,"931":2,"932":1,"942":1,"945":1,"947":2,"979":1,"1130":1,"1138":1}}],["parallel",{"2":{"106":1,"1033":1}}],["paradigm",{"2":{"100":1,"151":1,"255":1}}],["param3",{"2":{"431":2}}],["param2",{"2":{"431":2}}],["param1",{"2":{"431":2}}],["param",{"2":{"260":2,"359":1,"384":1,"482":1,"601":1,"1395":4}}],["parametric",{"2":{"257":1}}],["parametertypedescriptionrunsintegerthe",{"2":{"446":1,"447":1}}],["parameters",{"2":{"57":1,"102":1,"172":2,"258":1,"259":1,"260":1,"263":1,"272":1,"275":1,"328":1,"355":2,"421":1,"431":2,"787":1,"788":2,"1284":1}}],["parameter",{"2":{"12":1,"14":1,"65":4,"131":1,"172":2,"192":1,"246":1,"257":1,"260":3,"289":1,"323":1,"384":1,"387":1,"431":1,"492":5,"694":1,"707":1,"717":1,"724":1,"731":1,"738":1,"745":1,"751":1,"759":1,"766":1,"778":3,"820":1,"826":1,"1284":1,"1296":2,"1301":2}}],["params",{"2":{"13":1,"359":1,"421":1,"431":2,"598":1,"599":1,"601":4,"1021":1}}],["parent",{"2":{"25":2,"189":1,"434":6,"1042":1,"1088":1,"1090":1}}],["parenthash",{"2":{"25":2,"84":1}}],["party",{"2":{"83":1,"248":1,"476":1,"787":1}}],["particular",{"2":{"335":1,"337":1,"957":1}}],["particularly",{"2":{"67":1}}],["partial",{"2":{"62":1,"778":1,"880":1,"884":1,"892":1}}],["part",{"2":{"0":1,"26":1,"55":1,"57":1,"62":1,"95":1,"132":1,"365":1,"1079":1,"1285":1}}],["9302",{"2":{"482":1}}],["9223372036854775807",{"2":{"421":1,"536":1,"944":1,"945":1}}],["920",{"2":{"257":2}}],["96",{"2":{"257":1}}],["96345",{"2":{"95":2}}],["99",{"2":{"876":1,"881":1,"885":2,"1272":3}}],["9999",{"2":{"440":1}}],["999",{"2":{"133":1}}],["9974",{"2":{"117":1}}],["90167",{"2":{"281":1,"283":2}}],["90",{"2":{"117":1,"244":1,"1155":2}}],["94cd5258357da018bf911aeda60ed9f5b130dce27445669ee200313cd3389200",{"2":{"62":1}}],["91ms",{"2":{"56":1}}],["9",{"2":{"1":2,"40":2,"85":4,"102":1,"115":1,"117":2,"172":1,"280":2,"284":2,"393":1,"402":1,"409":2,"929":2,"946":3}}],["8760",{"2":{"482":1}}],["80",{"2":{"421":1,"579":1}}],["89",{"2":{"393":1}}],["8910",{"2":{"197":1,"198":1}}],["83µs",{"2":{"328":2}}],["84152",{"2":{"281":1,"283":2}}],["8446",{"2":{"117":1}}],["814",{"2":{"284":2}}],["81662",{"2":{"281":1,"283":2}}],["81034",{"2":{"281":1,"283":2}}],["88ms",{"2":{"347":1}}],["88",{"2":{"254":1}}],["8840",{"2":{"199":1}}],["8858",{"2":{"117":1}}],["8+",{"2":{"172":1}}],["865302749z",{"2":{"88":1}}],["86ms",{"2":{"56":1,"283":1}}],["8545",{"2":{"1":1,"9":1,"17":1,"88":2,"96":1,"133":1,"138":1,"172":1,"1052":1}}],["8",{"2":{"1":2,"27":1,"34":1,"43":1,"45":3,"51":3,"56":2,"62":1,"76":1,"94":2,"95":1,"106":1,"115":3,"122":2,"172":2,"187":1,"188":2,"192":3,"251":1,"254":3,"257":7,"271":1,"283":2,"284":2,"307":1,"308":1,"309":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"328":2,"347":4,"356":1,"393":2,"394":2,"407":1,"410":1,"421":1,"478":2,"497":3,"504":1,"620":1,"775":1,"822":2,"828":2,"1052":2,"1056":1}}],["70564938991660933374592024341600875602376452319261984317470407481576058979585",{"2":{"1341":1}}],["778",{"2":{"393":2}}],["7702",{"0":{"3":1},"2":{"3":1,"1050":5,"1051":3,"1052":1}}],["7e84",{"2":{"356":2}}],["79ms",{"2":{"347":2,"394":2}}],["749",{"2":{"284":8}}],["789",{"2":{"809":1,"893":2}}],["7890",{"2":{"190":2}}],["7893614a",{"2":{"62":1}}],["78",{"2":{"115":1}}],["7109709ecfa91a80626ff3989d68f67f5b1dd12d",{"2":{"733":1,"734":1,"1108":1}}],["71",{"2":{"102":1}}],["712",{"0":{"67":1,"68":1,"71":1},"1":{"69":1,"70":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1},"2":{"67":6,"68":1,"70":1,"71":1,"72":1,"74":2,"75":3,"76":1,"78":1,"162":1,"172":3}}],["73ssablier",{"2":{"102":1}}],["7200",{"2":{"78":1}}],["7",{"2":{"1":2,"95":1,"115":3,"183":3,"251":1,"386":1,"929":2,"946":3}}],["66",{"2":{"927":1,"944":1}}],["668",{"2":{"328":2}}],["6321",{"2":{"482":1}}],["678",{"2":{"893":2}}],["67ms",{"2":{"257":1}}],["67µs",{"2":{"257":2}}],["69",{"2":{"254":1,"752":2}}],["696e27",{"2":{"133":1}}],["6275",{"2":{"188":1}}],["65536",{"2":{"172":1,"421":2,"565":1,"583":1}}],["6820807456970215",{"2":{"117":1}}],["686",{"2":{"85":1}}],["618",{"2":{"347":2}}],["61ms",{"2":{"347":1,"394":1}}],["61",{"2":{"117":1,"190":1}}],["649",{"2":{"393":1}}],["64",{"2":{"34":1,"178":1,"827":1,"944":1,"945":1}}],["60473",{"2":{"281":1,"283":2}}],["6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220659fce8aadca285da9206b61f95de294d3958c409cc3011ded856f421885867464736f6c63430008100033",{"2":{"117":1}}],["608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220659fce8aadca285da9206b61f95de294d3958c409cc3011ded856f421885867464736f6c63430008100033",{"2":{"117":1}}],["60",{"2":{"1":1,"17":1,"707":1,"708":3,"997":1,"1310":2}}],["6",{"2":{"1":2,"102":1,"115":2,"172":1,"178":1,"251":1,"347":1,"407":1,"410":1}}],["512",{"2":{"944":1}}],["5764124000000000",{"2":{"1112":1}}],["57896044618658097711785492504343953926634992332820282019728792003956564819968",{"2":{"747":1}}],["5740",{"2":{"482":1}}],["573",{"2":{"257":1}}],["5815",{"2":{"482":1}}],["587",{"2":{"347":1}}],["596",{"2":{"284":12}}],["59875",{"2":{"281":1,"283":2}}],["543",{"2":{"347":1}}],["5440",{"2":{"284":3}}],["549",{"2":{"257":1}}],["52882",{"2":{"281":1,"283":2}}],["522",{"2":{"85":4}}],["55",{"2":{"685":1,"690":1,"1013":1,"1039":4}}],["5574",{"2":{"421":1,"482":1}}],["5560",{"2":{"284":3}}],["5533",{"2":{"270":2}}],["555",{"2":{"260":1}}],["500",{"2":{"444":2,"445":1,"576":1,"1083":2}}],["5000",{"2":{"421":1,"582":1}}],["50µs",{"2":{"328":1}}],["50ms",{"2":{"327":1,"393":1}}],["50",{"2":{"270":4,"272":2,"1164":1,"1358":2,"1388":1,"1390":1}}],["53ms",{"2":{"257":2}}],["53830",{"2":{"281":1,"283":2}}],["538",{"2":{"257":1}}],["53µs",{"2":{"85":1}}],["567",{"2":{"893":2}}],["5667",{"2":{"482":1}}],["5647",{"2":{"284":3}}],["56",{"2":{"117":1}}],["5",{"0":{"131":1},"2":{"1":2,"18":1,"56":3,"85":2,"128":1,"148":1,"172":2,"180":1,"187":1,"251":1,"260":1,"280":2,"291":1,"348":1,"393":2,"394":1,"396":1,"407":2,"410":1,"416":1,"529":1,"885":2,"929":4,"944":1,"946":6,"1083":3}}],["431130x03000000000000000000000000000000000000000x03000000000000000000000000000000000000ff",{"2":{"1265":1}}],["431130x01000000000000000000000000000000000000000x01000000000000000000000000000000000000ff433114",{"2":{"1265":1}}],["431130x02000000000000000000000000000000000000000x02000000000000000000000000000000000000ff433114",{"2":{"1265":1}}],["431130x0200000000000000000000000000000000000000contractdeployerallowlistaddress433114",{"2":{"1264":1}}],["431130x0200000000000000000000000000000000000003feeconfigmanageraddressall0x4e59b44847b379578588920ca78fbf26c0b4956c",{"2":{"1264":1}}],["431130x0200000000000000000000000000000000000002txallowlistaddress433114",{"2":{"1264":1}}],["431130x0200000000000000000000000000000000000001contractnativeminteraddress433114",{"2":{"1264":1}}],["432",{"2":{"778":1,"880":1,"884":1}}],["43",{"2":{"356":2,"929":1,"946":2}}],["438531",{"2":{"284":2}}],["4th",{"2":{"328":1}}],["4695fac44b2934aaa6d7150e2eaf0256fdc566a7",{"2":{"409":1}}],["461304",{"2":{"284":2}}],["4626",{"2":{"271":1,"273":1,"276":1}}],["47ms",{"2":{"283":1}}],["4e18",{"2":{"246":1,"1164":1}}],["4216130x00000000000000000000000000000000000000c8nodeinterface42161",{"2":{"1264":1}}],["4216130x0000000000000000000000000000000000000068arbfunctiontable433114",{"2":{"1264":1}}],["4216130x000000000000000000000000000000000000006darbaggregator42161",{"2":{"1264":1}}],["4216130x0000000000000000000000000000000000000065arbinfo42161",{"2":{"1264":1}}],["4216130x0000000000000000000000000000000000000067arbbls42161",{"2":{"1264":1}}],["4216130x000000000000000000000000000000000000006farbstatistics42161",{"2":{"1264":1}}],["4216130x0000000000000000000000000000000000000066arbaddresstable42161",{"2":{"1264":1}}],["4216130x000000000000000000000000000000000000006carbgasinfo42161",{"2":{"1264":1}}],["4216130x000000000000000000000000000000000000006earbretryabletx42161",{"2":{"1264":1}}],["4216130x0000000000000000000000000000000000000064arbsys42161",{"2":{"1264":1}}],["4200xdeaddeaddeaddeaddeaddeaddeaddeaddead0000legacyerc20eth10",{"2":{"1264":1}}],["4200x4200000000000000000000000000000000000042governancetoken10",{"2":{"1264":1}}],["4200x4200000000000000000000000000000000000018proxyadmin42161",{"2":{"1264":1}}],["4200x4200000000000000000000000000000000000017optimismmintableerc721factory10",{"2":{"1264":1}}],["4200x4200000000000000000000000000000000000014l2erc721bridge10",{"2":{"1264":1}}],["4200x4200000000000000000000000000000000000015l1block10",{"2":{"1264":1}}],["4200x4200000000000000000000000000000000000013l1blocknumber10",{"2":{"1264":1}}],["4200x4200000000000000000000000000000000000012optimismmintableerc20factory10",{"2":{"1264":1}}],["4200x4200000000000000000000000000000000000011sequencerfeevault10",{"2":{"1264":1}}],["4200x4200000000000000000000000000000000000010l2standardbridge10",{"2":{"1264":1}}],["4200x4200000000000000000000000000000000000016l2tol1messagepasser10",{"2":{"1264":1}}],["4200x4200000000000000000000000000000000000000legacymessagepasser10",{"2":{"1264":1}}],["4200x420000000000000000000000000000000000000fgaspriceoracle10",{"2":{"1264":1}}],["4200x4200000000000000000000000000000000000007l2crossdomainmessenger10",{"2":{"1264":1}}],["4200x4200000000000000000000000000000000000006weth910",{"2":{"1264":1}}],["4200x4200000000000000000000000000000000000002deployerwhitelist10",{"2":{"1264":1}}],["420",{"2":{"1108":2}}],["42µs",{"2":{"347":1}}],["423532",{"2":{"254":1}}],["42",{"2":{"197":2,"254":1,"356":4,"390":1,"966":2,"1075":1}}],["425",{"2":{"85":2}}],["4byte",{"2":{"133":1,"172":1,"587":3}}],["400",{"2":{"1083":2}}],["4005",{"2":{"284":6}}],["40",{"2":{"421":1,"567":1,"842":2,"1164":1,"1388":1,"1390":1}}],["40ms",{"2":{"347":1}}],["40s",{"2":{"102":1}}],["407",{"2":{"85":1}}],["49ms",{"2":{"347":1,"394":1}}],["49",{"2":{"88":1}}],["481",{"2":{"95":2,"394":1}}],["48",{"2":{"88":1}}],["4437",{"2":{"196":1}}],["44",{"2":{"1":1,"17":1,"284":3,"707":1,"708":3,"997":1,"1310":2}}],["4",{"0":{"122":1,"130":1},"2":{"1":2,"37":1,"56":1,"90":1,"108":1,"115":1,"172":1,"179":1,"251":1,"254":1,"257":1,"280":2,"291":1,"347":2,"348":1,"393":2,"407":1,"410":1,"421":1,"436":1,"497":2,"529":1,"665":1,"727":1,"752":1,"787":5,"983":1,"1082":1,"1284":1,"1372":1,"1393":1}}],["4591",{"2":{"482":1}}],["456",{"2":{"78":1,"809":1,"893":3}}],["452",{"2":{"56":1}}],["45000",{"2":{"18":1}}],["45",{"2":{"1":1}}],["3936000000000000",{"2":{"1112":2}}],["39s",{"2":{"102":1}}],["3860",{"2":{"482":1}}],["38",{"2":{"347":2,"394":2}}],["33554432",{"2":{"421":1,"558":1}}],["33",{"2":{"347":1,"394":1}}],["337",{"2":{"344":2,"685":2,"690":2,"1013":2}}],["330",{"2":{"18":1}}],["376",{"2":{"257":1}}],["342",{"2":{"1034":2,"1130":1,"1131":1,"1133":2,"1134":3,"1138":1,"1139":1,"1141":2,"1142":3}}],["3420",{"2":{"482":1}}],["3421",{"2":{"284":2}}],["345e611cd84bfb4e62c583fa1886c1928bc1a464",{"2":{"409":1}}],["34505",{"2":{"284":2}}],["3437",{"2":{"195":1,"787":1}}],["34seuler",{"2":{"102":1}}],["3628",{"2":{"482":1}}],["3696884440995286197434703193",{"2":{"133":1}}],["3616",{"2":{"102":1}}],["3600",{"2":{"78":1,"1368":2,"1377":2}}],["3rd",{"2":{"83":1,"328":1}}],["35ms",{"2":{"56":2}}],["31851",{"2":{"347":1,"394":1}}],["31965",{"2":{"347":1,"394":1}}],["31943",{"2":{"284":2}}],["31170",{"2":{"283":1}}],["31162",{"2":{"281":1,"283":3}}],["31121",{"2":{"56":1}}],["31293",{"2":{"56":1}}],["31277",{"2":{"56":1}}],["31337",{"2":{"19":1,"96":3,"421":1,"535":1,"670":2,"1103":2}}],["3024",{"2":{"1352":1}}],["309",{"2":{"102":1}}],["30",{"2":{"56":1,"842":2,"1388":1,"1390":1}}],["300",{"2":{"21":2,"1083":2}}],["300000000000000000000000",{"2":{"81":2}}],["30000000",{"2":{"1":1}}],["3a4c",{"2":{"45":1}}],["321",{"2":{"893":2}}],["32354",{"2":{"347":1,"394":1}}],["32",{"2":{"35":3,"65":1,"421":1,"492":1,"944":1,"1050":2,"1396":1}}],["3",{"0":{"121":1,"129":1},"2":{"1":2,"37":1,"88":1,"107":1,"117":1,"127":1,"133":1,"172":2,"179":1,"180":1,"251":1,"257":3,"278":1,"280":2,"284":3,"291":1,"311":2,"316":1,"328":1,"348":1,"396":1,"529":1,"665":1,"779":2,"799":2,"842":1,"898":1,"929":2,"946":3,"983":1,"1070":1,"1082":1,"1092":1,"1134":2,"1142":2,"1272":1,"1293":1}}],["1st",{"2":{"328":1}}],["1e36",{"2":{"655":2}}],["1e30",{"2":{"172":1,"275":2,"276":1}}],["1e18",{"2":{"220":1,"222":1,"228":1,"230":1,"232":1,"234":1,"240":1,"242":1,"245":1,"783":1,"1163":1,"1168":1,"1357":2}}],["19923",{"2":{"257":1}}],["19401",{"2":{"257":1}}],["19884",{"2":{"257":2}}],["19644",{"2":{"257":1}}],["19",{"2":{"106":1,"393":2,"396":1,"685":1,"690":1,"1013":1}}],["192",{"2":{"102":1}}],["111",{"2":{"1039":2}}],["11155111",{"2":{"45":3,"95":3}}],["115792089237316195423570985008687907853269984665640564039457584007913129639935",{"2":{"928":2,"945":1}}],["115792089237316195423570985008687907853269984665640564039457584007913129639934",{"2":{"257":1}}],["118859",{"2":{"284":2}}],["11970",{"2":{"284":3}}],["11ms",{"2":{"257":2}}],["11",{"2":{"102":1,"115":1,"117":1,"280":4,"402":1,"478":1}}],["14",{"2":{"497":1}}],["1489",{"2":{"393":3}}],["14606",{"2":{"281":1,"283":2}}],["146",{"2":{"102":1}}],["14s",{"2":{"102":1}}],["160all0x04identityall0x05modexpall0x06ecaddall0x07ecmulall0x08ecpairingall0x09blake2fall0x0apointevaluation10",{"2":{"1264":1}}],["1641070800",{"2":{"1126":2}}],["16",{"2":{"102":1,"254":1,"620":2}}],["165",{"2":{"102":1}}],["1391",{"2":{"393":1}}],["139557",{"2":{"284":2}}],["135",{"2":{"347":1}}],["135299",{"2":{"284":2}}],["137",{"2":{"347":1,"394":1}}],["137750",{"2":{"284":2}}],["137029",{"2":{"95":1}}],["1338",{"2":{"328":1}}],["13371337",{"2":{"1131":1,"1134":3,"1139":1,"1142":3}}],["1337",{"2":{"328":7,"871":2,"1103":1}}],["1335",{"2":{"284":2}}],["133",{"2":{"102":1}}],["13sspark",{"2":{"102":1}}],["13",{"0":{"189":1},"2":{"94":2,"115":3,"117":1,"189":1}}],["13ms",{"2":{"56":1,"347":1}}],["1880082",{"2":{"1352":1}}],["1887191",{"2":{"1352":1}}],["18332681",{"2":{"1023":1}}],["18446744073709551615",{"2":{"536":1}}],["1878",{"2":{"421":1,"482":1}}],["18",{"2":{"43":1,"45":2,"117":1,"214":1,"222":1,"230":1,"234":1,"238":1,"242":1,"284":2,"504":1,"822":2,"828":2,"1151":1}}],["150",{"2":{"328":1}}],["15052891",{"2":{"81":1}}],["157e77",{"2":{"257":1}}],["15smorpho",{"2":{"102":1}}],["156813",{"2":{"96":2}}],["15596646",{"2":{"1112":2}}],["1559",{"0":{"48":1},"2":{"48":2}}],["15",{"2":{"21":2,"95":1,"148":1,"172":1,"192":1,"254":1,"421":1,"685":1,"690":1,"1013":3}}],["171",{"2":{"685":1,"690":1,"1013":3}}],["179207",{"2":{"347":1}}],["17s",{"2":{"102":2}}],["17",{"2":{"76":1,"122":2,"271":1,"1052":2,"1056":1}}],["170",{"2":{"19":1}}],["1734014216",{"2":{"1":1}}],["101",{"2":{"1272":2}}],["1014",{"2":{"57":1}}],["10b7c11bcb51e6",{"2":{"1023":1}}],["1024",{"2":{"445":1}}],["107628",{"2":{"347":1}}],["1082720",{"2":{"284":3}}],["10800",{"2":{"78":1}}],["104781ms",{"2":{"102":1}}],["10x+",{"2":{"172":1}}],["10x",{"2":{"102":1}}],["1000e18",{"2":{"378":1}}],["1000",{"2":{"172":2,"358":1,"378":1,"440":2,"681":2}}],["10000e18",{"2":{"329":2,"1289":2,"1354":1}}],["10000`",{"2":{"172":1}}],["1000000000000000000",{"2":{"210":1,"212":1,"703":2}}],["1000000000000000000000",{"2":{"43":1,"45":2}}],["10000000",{"2":{"144":1,"184":1}}],["1000000",{"2":{"45":1}}],["10000",{"2":{"1":10,"17":1,"96":1,"270":2,"440":1,"497":1,"1352":1}}],["100",{"2":{"78":1,"106":2,"172":1,"215":1,"244":1,"245":1,"246":1,"254":3,"307":1,"333":2,"345":5,"393":4,"444":2,"446":1,"447":1,"567":1,"579":1,"634":1,"651":1,"655":2,"837":1,"992":1,"1018":2,"1048":1,"1052":11,"1091":3,"1151":1,"1155":3,"1163":1,"1164":2,"1168":1,"1272":1,"1357":1}}],["109037",{"2":{"56":1}}],["10+commit",{"2":{"45":1}}],["10",{"2":{"8":2,"17":1,"45":1,"80":1,"115":1,"140":1,"148":1,"172":1,"184":1,"257":7,"283":4,"315":1,"328":2,"335":2,"336":2,"347":4,"356":1,"421":1,"440":1,"620":2,"775":1,"779":11,"783":8,"813":2,"817":2,"842":2,"881":3,"885":10,"988":2,"1066":2,"1083":2,"1121":3,"1147":1,"1151":1,"1328":2,"1388":1,"1390":1}}],["1",{"0":{"119":1,"125":1},"1":{"126":1,"127":1},"2":{"1":4,"8":1,"34":1,"37":1,"45":1,"56":1,"62":3,"85":3,"88":3,"90":1,"95":6,"96":6,"102":1,"106":1,"115":1,"117":2,"128":2,"129":2,"130":1,"133":2,"138":1,"152":2,"172":15,"177":1,"188":1,"189":1,"190":2,"192":6,"210":1,"212":1,"214":2,"220":1,"222":1,"232":1,"234":1,"236":1,"238":1,"240":1,"242":1,"249":1,"251":2,"252":1,"254":1,"257":22,"260":1,"269":1,"276":1,"280":3,"284":2,"307":1,"311":3,"314":3,"316":1,"328":8,"338":1,"344":2,"347":8,"355":1,"357":5,"378":1,"384":2,"387":1,"393":3,"394":2,"396":3,"398":5,"407":4,"408":3,"410":4,"414":1,"421":2,"492":2,"534":1,"540":1,"608":1,"634":2,"643":1,"651":1,"655":2,"681":2,"685":2,"690":2,"697":2,"699":2,"703":2,"708":2,"734":1,"779":6,"782":1,"783":6,"786":4,"788":1,"799":2,"802":1,"809":4,"817":2,"842":9,"881":9,"885":8,"889":12,"922":2,"929":2,"939":4,"946":3,"983":1,"988":2,"992":2,"1013":2,"1023":1,"1050":1,"1052":4,"1056":1,"1070":1,"1075":1,"1083":1,"1091":6,"1092":11,"1186":2,"1272":1,"1283":1,"1293":1,"1348":1,"1354":1,"1373":2,"1394":1,"1395":1,"1403":1}}],["122",{"2":{"347":1}}],["125",{"2":{"328":1,"1358":2}}],["125081",{"2":{"284":2}}],["126910",{"2":{"284":2}}],["124",{"2":{"257":2}}],["1291",{"2":{"383":1}}],["129",{"2":{"253":1,"347":1}}],["120",{"2":{"172":1,"421":1,"435":1,"562":1,"973":2,"1394":2}}],["12+commit",{"2":{"51":2}}],["128",{"2":{"34":3}}],["1234",{"2":{"1048":1}}],["12345",{"2":{"918":2,"954":2,"1083":3}}],["1234567",{"2":{"428":1}}],["123",{"2":{"27":3,"78":1,"148":2,"257":1,"809":1,"893":4,"1131":2,"1133":2,"1134":6,"1139":2,"1141":2,"1142":6}}],["127",{"2":{"1":1,"133":1,"138":1,"190":2}}],["12t00",{"2":{"1":1}}],["12",{"2":{"1":1,"65":1,"115":1,"127":2,"280":4,"284":2,"608":1}}],["2^64",{"2":{"1348":1}}],["2^128",{"2":{"1334":1,"1380":1}}],["262",{"2":{"355":1}}],["26039",{"2":{"284":2}}],["26049293674",{"2":{"1":1}}],["2nd",{"2":{"328":1}}],["2238",{"2":{"393":2}}],["2243",{"2":{"393":4}}],["2262",{"2":{"355":1}}],["22",{"2":{"284":2}}],["22ms",{"2":{"257":2}}],["22539851",{"2":{"145":1}}],["2462",{"2":{"482":1}}],["24661",{"2":{"355":1}}],["24485",{"2":{"284":8}}],["2444",{"2":{"284":2}}],["24",{"2":{"257":2,"347":1,"609":2}}],["2486",{"2":{"194":1}}],["2e18",{"2":{"236":1,"238":1}}],["29ms",{"2":{"347":2}}],["29808",{"2":{"328":1}}],["29",{"2":{"178":1,"394":2}}],["29ssoladyadd",{"2":{"102":1}}],["2h",{"2":{"145":1}}],["25000000000",{"2":{"794":1}}],["25µs",{"2":{"347":2}}],["2584",{"2":{"284":3}}],["25",{"2":{"257":2,"713":2,"794":1}}],["257",{"2":{"257":1,"347":1}}],["2519",{"2":{"482":1}}],["251",{"2":{"102":1}}],["25s",{"2":{"102":1}}],["256all0x03ripemd",{"2":{"1264":1}}],["2561",{"2":{"284":2}}],["256",{"2":{"34":2,"56":1,"172":2,"258":1,"347":1,"394":1,"419":1,"421":4,"564":1,"570":1,"575":1,"584":1,"809":2,"944":2,"1186":1}}],["2117",{"2":{"284":4}}],["2126",{"2":{"284":3}}],["21",{"2":{"192":1}}],["21t16",{"2":{"88":1}}],["21540114973524208109322438",{"2":{"81":1}}],["21840114973524208109322438",{"2":{"81":1}}],["21387064",{"2":{"1":1}}],["27685",{"2":{"284":2}}],["27ms",{"2":{"257":1}}],["27",{"2":{"56":1,"685":1,"690":1,"1013":1}}],["2072",{"2":{"482":1}}],["2018",{"2":{"482":1}}],["2019",{"2":{"57":1}}],["2097",{"2":{"393":1}}],["20398",{"2":{"355":1}}],["203856",{"2":{"96":1}}],["2022",{"2":{"685":1,"690":1,"1013":1}}],["2023",{"2":{"97":1}}],["2025",{"2":{"88":1}}],["2024",{"2":{"1":1}}],["20",{"2":{"67":1,"108":1,"172":2,"264":1,"267":5,"271":1,"272":1,"274":1,"315":1,"842":2,"1052":4,"1083":2,"1288":1,"1388":1,"1390":1}}],["200",{"2":{"45":2,"62":1,"78":1,"117":1,"172":1,"194":1,"244":1,"246":1,"421":1,"492":1,"513":1,"634":1,"788":1,"992":1,"1155":2,"1164":2}}],["28103",{"2":{"284":2}}],["28ms",{"2":{"257":1,"394":1}}],["282",{"2":{"102":1}}],["28+commit",{"2":{"62":1}}],["28",{"2":{"27":1,"56":2,"95":1}}],["2mb",{"2":{"20":1}}],["23884",{"2":{"1155":1,"1164":1}}],["2394",{"2":{"482":1}}],["2328",{"2":{"384":1}}],["23ms",{"2":{"347":1}}],["2363",{"2":{"284":3}}],["231",{"2":{"102":1}}],["23",{"2":{"1":1,"254":1,"394":1}}],["2",{"0":{"120":1,"128":1},"2":{"1":3,"8":1,"37":1,"56":4,"64":1,"90":2,"96":1,"115":1,"172":3,"178":2,"179":1,"228":1,"230":1,"249":1,"251":1,"253":1,"254":1,"257":1,"260":1,"280":3,"283":2,"284":5,"291":1,"307":4,"311":2,"316":1,"328":3,"347":8,"348":1,"357":1,"378":1,"394":4,"398":4,"407":4,"409":2,"410":2,"416":1,"421":2,"446":2,"447":1,"492":1,"529":1,"573":1,"620":1,"665":1,"720":1,"734":1,"741":1,"748":1,"762":1,"769":1,"779":8,"782":2,"786":1,"788":1,"799":2,"809":2,"842":4,"881":4,"885":5,"889":6,"922":2,"939":4,"983":1,"1021":1,"1023":4,"1056":1,"1082":2,"1092":4,"1117":2,"1272":1}}],["057",{"2":{"1013":2}}],["05smorpho",{"2":{"102":1}}],["04",{"2":{"685":1,"690":1,"1013":1}}],["037",{"2":{"685":1,"690":1,"1013":1}}],["03ms",{"2":{"347":1}}],["07",{"2":{"393":1,"685":1,"690":1,"1013":1}}],["02",{"2":{"375":1}}],["0201",{"2":{"117":1}}],["08ms",{"2":{"328":1}}],["0892839431762695",{"2":{"117":1}}],["0`",{"2":{"172":1}}],["003936",{"2":{"1112":1}}],["00",{"2":{"734":1}}],["00ms",{"2":{"257":2}}],["00µs",{"2":{"257":1}}],["0096",{"2":{"117":1}}],["0010",{"2":{"117":2}}],["0013",{"2":{"117":2}}],["0011",{"2":{"117":4}}],["0012",{"2":{"117":1}}],["000",{"2":{"108":1,"184":2,"283":11,"344":2,"407":1,"410":1,"440":1,"651":1,"685":2,"690":2,"1013":2,"1066":1,"1121":2}}],["000156813000156813",{"2":{"96":2}}],["000407712000203856",{"2":{"96":1}}],["00000000",{"2":{"1372":1}}],["0000000000000000",{"2":{"1164":2}}],["000000000000000000",{"2":{"1":10,"96":1,"214":1}}],["000000001",{"2":{"96":3}}],["000d836201318ec6899a67540690382780743280",{"2":{"25":1}}],["01ms",{"2":{"257":1}}],["0109",{"2":{"117":1}}],["01s",{"2":{"102":1}}],["01",{"2":{"88":1,"375":1}}],["06µs",{"2":{"85":1}}],["0xef0100",{"2":{"1050":1}}],["0xea674fdde714fd979de3edf0f56aa9716b898ec8",{"2":{"677":2}}],["0x8d97689c9818892b700e27f316cc3e41e17fbeb9",{"2":{"1023":1}}],["0x8000000000000000000000000000000000000000000000000000000000000000",{"2":{"748":1}}],["0x832a3784d0a130c8a0ce3cc6dfc336a41ca7801a117eac7a3bfaace52e4d239c",{"2":{"609":1}}],["0x8b3a350cf5c34c9194ca85829a2df0ec3153be0318b5e2d3348e872092edffba",{"2":{"1":1}}],["0x328809bc894f92807417d2dad6b7c998c1afdac6",{"2":{"1341":1,"1345":1}}],["0x34644d4ec92ae1832877ce22ad9ba4b00c7397c8",{"2":{"609":1}}],["0x39c6e1aa997d18a655c6317131589fd327ae814ef84e784f5eb1ab54b9941212",{"2":{"84":1}}],["0x3c44cdddb6a900fa2b585dd299e03d12fa4293bc",{"2":{"1":1,"133":1,"1052":2}}],["0xb95343413e459a0f97461812111254163ae53467855c0d73e0f1e7c5b8442fa3",{"2":{"393":1}}],["0xb920857687476c1bcb21557c5f6196762a46038924c5f82dc66300347a1cfc01",{"2":{"84":1}}],["0xb4c",{"2":{"356":2}}],["0xb4c79dab8f259c7aee6e5b2aa729821864227e84",{"2":{"356":1}}],["0xb634241e3",{"2":{"84":1}}],["0xbf31c45f6935a0714bb4f709b5e3850ab0cc2f8bffe895fefb653d154e0aa062",{"2":{"81":1}}],["0xcd16ecbf000000000000000000000000000000000000000000000000000000000000002a",{"2":{"1075":1}}],["0xce71065d4017f316ec606fe4422e11eb2c47c246",{"2":{"345":1}}],["0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",{"2":{"78":1,"143":1,"393":4}}],["0xc8479c45ee87e0b437c09d3b8fe8ed14ccda825e",{"2":{"21":1}}],["0x",{"0":{"47":1},"2":{"47":1,"192":2,"393":1,"745":2,"766":1,"927":2,"944":2,"1107":1,"1285":1}}],["0x6080604052348015610010",{"2":{"774":1}}],["0x6000",{"2":{"19":1}}],["0x6162636400000000000000000000000000000000000000000000000000000000",{"2":{"208":1,"224":1}}],["0x676d000000000000000000000000000000000000000000000000000000000000",{"2":{"133":1}}],["0x6795deaad7fd483eda4b16af7d8b871c7f6e49beb50709ce1cf0ca81c29247d1",{"2":{"96":1}}],["0x6b175474e89094c44da98b954eedeac495271d0f",{"2":{"133":1}}],["0x6b4e0ff93a",{"2":{"43":1}}],["0x6246259b",{"2":{"84":1}}],["0x652993",{"2":{"84":1}}],["0x6a54",{"2":{"45":1}}],["0xfd88cee74f7d78697775abdae53f9da1559728e4",{"2":{"477":1}}],["0xfe",{"2":{"355":1}}],["0xf910ccaa307836354233316666386231414464306335333243453944383735313",{"2":{"254":1}}],["0xf88c68c4a03a86b0e7ecb05cae8dea36f2896cd342a6af978cab11101c6224a9",{"2":{"86":1}}],["0xfc2ee3bd619b7cfb2de2c797b96deecbd7f68e46",{"2":{"81":1}}],["0xffffffffffffffffffffffff",{"2":{"421":1,"533":1}}],["0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",{"2":{"35":1}}],["0xffffffffffffffffffffffffffffffffffffffff",{"2":{"35":1}}],["0xff",{"2":{"65":3,"1395":1}}],["0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",{"2":{"1":1,"3":1,"80":1,"96":1,"1283":1}}],["0xd8da6bf26964af9d7eed9e03e53415d37aa96045",{"2":{"143":1}}],["0xdd3309",{"2":{"84":1}}],["0xdeadbeef00000000000000000000000000000000",{"2":{"78":1}}],["0xd15e0237413d7b824b784e1bbc3926e52f4726e5e5af30418803b8b327b4f8ca",{"2":{"36":1}}],["0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544",{"2":{"25":1}}],["0xdbda1821b80551c9d65939329250298aa3472ba22feea921c0cf5d620ea67b97",{"2":{"1":1}}],["0x0c124046fa7202f98e4e251b50488e34416fc306",{"2":{"1112":1}}],["0x0d4b714990132cf0f21801e2931b78454b26aad706fc6dc16b64e04f0c14737a",{"2":{"84":1}}],["0x09277f949d59a9521708c870dc39c2c434ad8f86a5472efda6a732ef728c0053",{"2":{"62":1}}],["0x00000000efe302beaa2b3e6e1b18d08d69a9012a",{"2":{"1395":1}}],["0x00000000000000000000000000000000",{"2":{"910":2}}],["0x0000000000000000000000000000000000000100",{"2":{"775":1}}],["0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002676d000000000000000000000000000000000000000000000000000000000000",{"2":{"799":1}}],["0x000000000000000000000000000000000000000000000000000000000000007b",{"2":{"27":1,"148":1}}],["0x0000000000000000000000000000000000000000000000000000000000000000",{"2":{"25":2,"421":1,"740":1,"741":1,"769":1,"914":2}}],["0x0000000000000000000000000000000000000000",{"2":{"25":1,"421":1,"539":1,"677":1,"720":2,"902":2}}],["0x00",{"2":{"34":2,"319":2,"734":1,"741":1}}],["0x0",{"2":{"25":3}}],["0x2642e960d3150244e298d52b5b0f024782253e6d0b2c9a01dd4858f7b4665a3f",{"2":{"602":1}}],["0x2",{"2":{"266":1}}],["0x2e482bdf51572b",{"2":{"84":1}}],["0x20",{"2":{"34":1,"319":1,"821":2}}],["0x23d465eaa80ad2e5cdb1a2345e4b54edd12560d3",{"2":{"86":1}}],["0x2323",{"2":{"25":1}}],["0x23618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f",{"2":{"1":1}}],["0x2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6",{"2":{"1":1,"1052":1}}],["0x455730fed596673e69db1907be2e521374ba893f1a04cc5f5dd931616cd6b700",{"2":{"1395":1}}],["0x4300000000000000000000000000000000000002",{"2":{"775":1}}],["0x4f26ffbe5f04ed43630fdc30a87638d53d0b0876",{"2":{"393":1}}],["0x496e09fcb240c33b8fda3b4b74d81697c03b6b3d",{"2":{"86":1}}],["0x4724f3b270dcc970f141e493d8dc46aeba6fffe57688210051580ac960fe0037",{"2":{"84":1}}],["0x47e179ec197488593b187f80a00eb0da91f1b9d0b13f8733639f19c30a34926a",{"2":{"1":1}}],["0x486976656f6e20686b",{"2":{"84":1}}],["0x406010046100001198c220108002b606400029444814008210820c04012804131847150080312500300051044208430002008029880029011520380060262400001c538d00440a885a02219d49624aa110000003094500022c003600a00258009610c410323580032000849a0408a81a0a060100022505202280c61880c80020e080244400440404520d210429a0000400010089410c8408162903609c920014028a94019088681018c909980701019201808040004100000080540610a9144d050020220c10a24c01c000002005400400022420140e18100400e10254926144c43a200cc008142080854088100128844003010020c344402386a8c011819408",{"2":{"84":1}}],["0x4054415432",{"2":{"43":1}}],["0x40",{"2":{"34":1,"319":1}}],["0x400000000",{"2":{"25":1}}],["0x42",{"2":{"25":1}}],["0x4e59b44847b379578588920ca78fbf26c0b4956c",{"2":{"10":1,"58":1,"65":1,"421":1}}],["0x4bbbf85ce3377467afe5d46f804f221813b2bb87f24d81f60f1fcdbf7cbf4356",{"2":{"1":1}}],["0x7e5f4552091a69125d5dfcb7b8c2659029395bdf",{"2":{"643":1}}],["0x7109709ecfa91a80626ff3989d68f67f5b1dd12d000000000000000000000000",{"2":{"741":1}}],["0x7109709ecfa91a80626ff3989d68f67f5b1dd12d",{"2":{"130":1,"328":1,"719":1,"720":1,"762":1,"894":2,"1108":3}}],["0x7b",{"2":{"27":1,"148":1}}],["0x7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6",{"2":{"1":1}}],["0x70997970c51812dc3a010c7d01b50e0d17dc79c8",{"2":{"1":1,"144":1,"1052":2}}],["0x543d",{"2":{"358":1}}],["0x5fbdb2315678afecb367f032d93f642f64180aa3",{"2":{"96":1}}],["0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a",{"2":{"1":1,"1052":2}}],["0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d",{"2":{"1":1,"1052":2}}],["0xa98218cdc4f63ace91ddddd24f7a580fd383865b",{"2":{"1112":1}}],["0xaba74f25a17cf0d95d1c6d0085d6c83fb8c5e773ffd2573b99a953256f989c89",{"2":{"1112":2}}],["0xabc123",{"2":{"1056":1}}],["0xa11ce",{"2":{"1056":1}}],["0xa735b3c25f",{"2":{"43":1}}],["0xa57b",{"2":{"34":1}}],["0xad78ebc5ac6200000",{"2":{"25":1}}],["0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80",{"2":{"1":1,"96":1,"138":1,"144":1}}],["0xa0ee7a142d267c1f36714e4a8f75612f20a79720",{"2":{"1":1,"1052":1}}],["0x117bc09",{"2":{"1023":1}}],["0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",{"2":{"25":1}}],["0x12c980",{"2":{"928":1,"945":1}}],["0x123",{"2":{"601":2}}],["0x1",{"2":{"266":1}}],["0x1f1f897f676d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e7",{"2":{"133":1}}],["0x1804c8ab1f12e6bbf3894d4083f33e07309d1f38",{"2":{"94":1,"421":2,"531":1,"532":1}}],["0x181748772da2f968bcc91940c8523bb6218a7d57669ded06648c9a9fb6839db5",{"2":{"84":1}}],["0x1d6bb",{"2":{"84":1}}],["0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",{"2":{"84":1}}],["0x1ce6929033fbba90",{"2":{"84":1}}],["0x1c9c380",{"2":{"84":1}}],["0x1ad91ee08f21be3de0ba2ba6918e714da6b45836",{"2":{"84":1}}],["0x1388",{"2":{"25":1}}],["0x14dc79964da2c08b23698b3d3cc7ca32193d9955",{"2":{"1":1}}],["0x15d34aaf54267db7d7c367839aaf71a00a2c6a65",{"2":{"1":1}}],["0x9c32042f5e997e27e67f82583839548eb19dc78c4769ad6218657c17f2a5ed31",{"2":{"133":1}}],["0x9923da68627095fd2e7",{"2":{"84":1}}],["0x9965507d1a55bcc2695c58ba16fb37d819b0a4dc",{"2":{"1":1}}],["0x904aee789b82ac0412448bc2ea9bb3774d10c2dae4a0e5b7f6451ac2ecd0787a",{"2":{"1":1}}],["0x90f79bf6eb2c4f870365e785982e1f101e93b906",{"2":{"1":1}}],["0x92db14e403b83dfe3df233f83dfa3a0d7096f21ca9b0d6d6b8d88b2b4ec1564e",{"2":{"1":1}}],["0x976ea74026e726554db657fa54763abd0c3a0aa9",{"2":{"1":1}}],["094165202z",{"2":{"1":1}}],["0",{"0":{"193":1},"1":{"194":1,"195":1,"196":1,"197":1,"198":1,"199":1,"200":1},"2":{"1":8,"17":2,"24":3,"25":1,"34":2,"35":3,"40":2,"43":1,"45":1,"51":4,"56":6,"62":1,"81":1,"85":8,"88":5,"95":3,"96":5,"102":3,"106":2,"115":6,"117":14,"122":1,"133":2,"138":2,"172":13,"177":2,"183":5,"187":1,"190":4,"192":3,"193":2,"194":1,"195":1,"196":4,"197":4,"198":2,"199":1,"246":1,"249":1,"251":1,"254":2,"257":20,"271":4,"275":2,"276":2,"278":1,"280":1,"283":22,"307":1,"308":1,"309":1,"311":3,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"325":1,"328":8,"345":1,"347":16,"355":1,"356":1,"357":2,"358":1,"393":2,"394":6,"407":5,"408":8,"410":3,"414":8,"415":2,"416":1,"421":6,"478":2,"491":1,"529":1,"537":1,"538":1,"541":1,"567":1,"579":1,"582":1,"609":1,"625":2,"629":2,"634":2,"707":2,"708":8,"734":2,"755":1,"762":1,"775":4,"778":1,"779":2,"782":1,"783":1,"786":2,"787":2,"788":2,"799":2,"809":2,"821":2,"822":2,"827":1,"828":2,"837":1,"838":1,"842":12,"871":2,"881":4,"885":5,"889":8,"922":1,"927":2,"929":1,"931":1,"939":1,"944":2,"946":1,"988":4,"992":2,"997":4,"1023":3,"1043":2,"1050":1,"1052":10,"1056":2,"1070":1,"1075":4,"1083":1,"1091":25,"1092":4,"1103":3,"1112":1,"1164":1,"1272":1,"1306":1,"1310":8,"1324":1,"1368":1,"1377":1,"1399":1}}],["vulnerablescript",{"2":{"378":1}}],["vulnerable",{"2":{"378":1}}],["vulnerabilities",{"2":{"308":1}}],["vulnerability",{"2":{"162":1,"260":2}}],["votes",{"2":{"260":3}}],["voteslate",{"2":{"260":2}}],["vv",{"2":{"179":1,"291":1,"348":1,"529":1,"573":1}}],["vvv`",{"2":{"172":1}}],["vvv",{"2":{"99":1,"100":1,"101":1,"179":1,"180":1,"291":1,"348":1,"355":1,"529":1}}],["vvvvv",{"2":{"180":1,"348":1,"529":1}}],["vvvv",{"2":{"95":1,"172":2,"179":1,"348":1,"355":1,"529":1}}],["vy",{"2":{"129":1,"130":1}}],["vyper",{"0":{"124":1,"126":1,"127":1,"130":1},"1":{"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1},"2":{"124":1,"125":5,"126":2,"129":2,"130":1,"131":4,"168":1}}],["vscode",{"0":{"118":1},"1":{"119":1,"120":1,"121":1,"122":1,"123":1},"2":{"118":1,"120":1,"121":1,"123":1,"168":1}}],["vs",{"0":{"368":1},"2":{"116":1,"348":1,"387":1,"798":1}}],["v1",{"0":{"193":1},"1":{"194":1,"195":1,"196":1,"197":1,"198":1,"199":1,"200":1},"2":{"99":1,"102":1,"193":2,"194":1,"195":1,"196":2,"197":1,"198":2,"199":1,"278":1,"393":1,"409":1,"485":1,"507":2,"517":1}}],["v3",{"2":{"80":1,"172":1,"517":1,"602":1}}],["vectorized",{"2":{"396":3}}],["venv",{"2":{"127":1}}],["venv`",{"2":{"127":1}}],["ve",{"2":{"72":1,"86":1,"414":1}}],["verbosity",{"0":{"529":1},"2":{"108":1,"179":2,"180":1,"291":4,"348":2,"421":2,"446":1,"529":3,"573":1}}],["verbosedebug",{"2":{"485":1}}],["verbose",{"2":{"15":1,"26":1,"27":1,"29":1,"146":1,"384":1}}],["verification",{"2":{"45":4,"74":1,"85":1,"90":1,"95":6,"152":1,"172":2,"173":1,"250":2,"497":1}}],["verifier",{"2":{"45":1}}],["verifiers",{"2":{"44":1,"250":1}}],["verified`",{"2":{"95":1}}],["verified",{"0":{"393":1},"2":{"35":4,"45":1,"95":3,"133":1,"152":1,"393":1,"497":2}}],["verifyproof",{"2":{"252":1}}],["verify`",{"2":{"172":1}}],["verify",{"0":{"51":1,"152":1},"2":{"43":3,"44":2,"45":12,"75":1,"90":2,"95":2,"134":1,"152":2,"172":11,"173":1,"252":1,"290":2,"364":1,"414":1,"619":1,"804":5,"1052":5,"1055":1}}],["verifyingcontract",{"2":{"172":1}}],["verifying",{"0":{"45":1,"54":1},"1":{"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1},"2":{"43":1,"44":1,"45":2,"62":1,"95":1,"164":1}}],["verydeep",{"2":{"1131":3,"1134":4,"1139":3,"1142":4}}],["very",{"2":{"35":1,"85":2,"275":1,"361":1,"362":1,"654":1,"1107":1}}],["versioned",{"2":{"355":1}}],["versions",{"2":{"115":1,"183":1,"186":1,"187":2,"193":1,"199":1,"200":1,"289":1,"346":2,"347":1,"355":1,"358":1,"398":1,"419":2,"421":1,"478":1,"479":1,"480":2,"861":1}}],["version^0",{"2":{"115":1}}],["version",{"0":{"51":1,"60":1,"61":1,"122":1,"346":1,"414":1,"478":1,"484":1,"511":1,"518":1,"524":1,"525":1,"526":1},"1":{"415":1,"416":1},"2":{"15":1,"17":2,"45":3,"51":5,"59":3,"60":3,"61":1,"62":5,"87":1,"94":1,"95":1,"99":1,"115":3,"122":2,"151":2,"154":3,"172":3,"178":1,"183":3,"191":3,"193":2,"197":1,"200":1,"289":5,"346":4,"355":2,"396":1,"398":1,"399":2,"405":1,"407":4,"408":1,"410":4,"412":2,"414":1,"415":1,"416":5,"421":6,"478":3,"479":1,"480":1,"484":5,"497":1,"508":1,"511":1,"517":4,"518":1,"524":3,"525":4,"526":4,"712":1,"808":1,"822":3,"828":3,"965":1,"1051":2,"1107":1}}],["v2",{"2":{"52":1,"133":1,"192":1,"344":1,"345":1,"421":1,"428":1,"485":1,"561":1,"1023":2}}],["v0",{"2":{"45":2,"122":1,"396":2,"504":1}}],["virus",{"2":{"609":1}}],["virtual",{"2":{"127":2,"272":1,"273":1,"274":1,"275":1,"276":1,"482":1,"1300":3,"1326":1}}],["virtually",{"2":{"87":1}}],["violated",{"2":{"384":1}}],["vision",{"2":{"419":1}}],["visited",{"2":{"659":1}}],["visit",{"0":{"404":1},"2":{"407":1,"926":1,"943":1}}],["visibility",{"0":{"374":1},"2":{"275":1,"356":1,"482":1}}],["visually",{"2":{"433":1}}],["visual",{"2":{"118":1,"154":1}}],["vitalik",{"2":{"133":2,"143":1}}],["video",{"2":{"116":1}}],["videos",{"0":{"97":1},"2":{"97":1}}],["view",{"2":{"31":1,"35":1,"37":1,"41":2,"42":2,"62":1,"128":1,"130":1,"134":1,"172":1,"200":1,"254":1,"271":4,"307":2,"659":1,"802":3,"811":1,"815":1,"844":1,"895":1,"1039":1,"1052":1,"1056":1,"1284":1,"1395":1}}],["via",{"0":{"126":1,"127":1,"493":1,"510":1,"519":1},"2":{"25":1,"115":1,"126":1,"127":1,"129":1,"155":1,"159":1,"172":2,"183":1,"192":1,"259":1,"263":1,"284":2,"289":1,"328":1,"329":1,"337":2,"338":1,"340":1,"341":2,"342":2,"344":1,"345":1,"363":1,"390":1,"421":2,"493":2,"496":1,"507":11,"508":4,"510":1,"517":1,"519":1,"583":1,"654":1,"803":1,"812":1,"816":1,"894":1,"929":1,"946":1,"1052":3,"1086":1,"1087":3,"1392":1,"1406":1}}],["vmall0x000000000000000000636f6e736f6c652e6c6f67",{"2":{"1264":1}}],["vmsafe",{"2":{"846":4,"1075":1}}],["vm",{"0":{"72":1,"73":1,"74":1,"775":1,"975":1},"2":{"27":5,"40":1,"44":8,"73":1,"75":1,"77":2,"78":2,"90":2,"94":4,"95":2,"129":1,"130":5,"172":16,"195":6,"196":4,"249":1,"251":3,"252":2,"254":1,"257":1,"267":1,"276":2,"328":6,"329":6,"334":1,"344":15,"345":13,"356":2,"378":2,"379":3,"384":2,"507":1,"561":1,"562":1,"583":1,"634":2,"638":6,"643":1,"651":1,"655":1,"659":3,"660":1,"665":4,"670":1,"677":1,"681":1,"685":4,"690":2,"697":4,"698":4,"699":4,"703":1,"708":2,"712":1,"713":1,"719":1,"720":1,"740":1,"741":1,"754":2,"755":2,"761":1,"762":1,"774":1,"775":3,"779":7,"783":5,"786":5,"787":4,"788":8,"794":1,"799":2,"804":9,"809":20,"812":2,"813":3,"816":2,"817":3,"821":3,"822":4,"827":2,"828":4,"837":1,"838":2,"842":4,"846":4,"853":1,"855":2,"857":1,"859":2,"862":1,"864":2,"871":1,"881":6,"885":4,"889":2,"893":2,"894":2,"898":2,"902":1,"906":1,"910":1,"914":1,"918":1,"922":3,"924":2,"925":1,"928":2,"929":3,"931":2,"932":1,"939":3,"941":2,"942":1,"945":2,"946":3,"947":2,"954":1,"961":1,"965":1,"966":1,"972":4,"973":1,"975":3,"976":2,"978":2,"979":6,"983":7,"987":1,"988":3,"991":1,"992":2,"997":8,"1013":6,"1018":1,"1023":5,"1028":3,"1034":5,"1039":1,"1048":1,"1052":13,"1056":10,"1057":2,"1062":2,"1066":1,"1070":5,"1075":7,"1083":5,"1091":4,"1092":9,"1103":2,"1108":2,"1112":3,"1117":1,"1121":3,"1126":1,"1133":3,"1134":4,"1141":3,"1142":4,"1151":3,"1310":5,"1353":3,"1354":2}}],["vanilla",{"2":{"775":1}}],["vanity",{"2":{"619":1}}],["vat",{"2":{"365":1}}],["vaultinvarianttest",{"2":{"172":1}}],["vaulthandler",{"2":{"172":4}}],["vault",{"2":{"172":31,"173":3,"788":2,"1151":3}}],["varname",{"2":{"344":1,"345":1,"482":1}}],["varieties",{"2":{"782":1}}],["variety",{"2":{"355":1}}],["various",{"2":{"75":1,"94":1,"155":1,"281":1,"355":1,"428":1,"932":1,"1086":1}}],["variants",{"2":{"1324":1}}],["variant",{"2":{"809":1,"1324":1}}],["variables",{"0":{"273":1,"458":1},"2":{"35":2,"81":1,"93":1,"95":2,"101":1,"148":1,"172":6,"192":1,"273":1,"315":2,"317":1,"342":1,"344":1,"345":1,"359":1,"371":1,"384":1,"392":1,"444":1,"458":1,"665":1,"759":1,"798":1,"842":1,"875":2,"1023":1,"1042":2,"1070":1}}],["variable",{"0":{"315":1},"2":{"24":1,"27":1,"34":1,"35":4,"108":1,"183":1,"264":2,"276":1,"307":3,"315":5,"316":1,"317":1,"335":2,"340":1,"362":1,"371":1,"387":1,"416":1,"453":1,"456":1,"561":2,"716":1,"719":1,"720":1,"723":1,"724":2,"726":1,"727":1,"730":1,"733":1,"734":1,"737":1,"740":1,"741":1,"744":1,"747":1,"748":1,"751":1,"752":3,"754":1,"755":1,"758":4,"761":1,"762":1,"765":1,"768":1,"769":1,"808":2,"885":1,"997":1,"1023":1,"1042":1,"1043":3}}],["variations",{"2":{"15":1}}],["varying",{"2":{"57":1}}],["var",{"2":{"35":4,"317":3,"396":1,"482":1,"1023":2}}],["val4",{"2":{"262":1}}],["val3",{"2":{"262":1,"270":5}}],["val2",{"2":{"262":1,"265":3,"270":4}}],["val1",{"2":{"262":1,"265":3,"270":4}}],["val",{"2":{"203":8,"211":1,"213":1,"1023":2,"1044":2,"1092":7,"1278":1,"1295":2,"1296":1,"1385":4,"1387":1,"1389":1}}],["validdirpath",{"2":{"804":2}}],["validfilepath",{"2":{"804":2}}],["validpath",{"2":{"804":3}}],["validation",{"2":{"172":1,"392":1}}],["validations",{"2":{"76":1}}],["validating",{"0":{"77":1,"78":1}}],["validatepermitsingle",{"2":{"77":1,"78":1}}],["validatepermitdetails",{"2":{"77":1,"78":1}}],["validate",{"2":{"67":2,"78":1,"172":1,"364":1}}],["valid",{"2":{"34":1,"52":1,"172":1,"289":1,"328":1,"384":2,"428":1,"431":2,"438":1,"439":1,"440":1,"441":1,"452":1,"478":1,"482":1,"486":1,"487":1,"488":1,"501":1,"502":1,"504":1,"506":1,"545":1,"546":1,"561":1,"654":1,"782":4,"804":1,"1130":1,"1138":1}}],["valuekey",{"2":{"1031":14,"1129":1,"1130":3,"1137":1,"1138":3}}],["valuec",{"2":{"809":1}}],["valueb",{"2":{"809":1}}],["valuea",{"2":{"809":1}}],["value=115792089237316195423570985008687907853269984665640564039457584007913129639935",{"2":{"768":1}}],["value=hello",{"2":{"761":1}}],["value=",{"2":{"747":1}}],["value=0x00",{"2":{"740":1}}],["value=0x7109709ecfa91a80626ff3989d68f67f5b1dd12d",{"2":{"719":1,"733":1,"734":1}}],["value=true",{"2":{"726":1}}],["valuetoprove",{"2":{"252":3}}],["values=0",{"2":{"769":1}}],["values=0x7109709ecfa91a80626ff3989d68f67f5b1dd12d",{"2":{"720":1,"741":1}}],["values=hello",{"2":{"762":1}}],["values=",{"2":{"748":1}}],["values=true",{"2":{"727":1}}],["values",{"2":{"25":1,"73":1,"95":1,"96":1,"172":3,"248":1,"257":1,"260":3,"264":1,"266":1,"275":1,"279":1,"280":1,"289":1,"303":1,"338":1,"355":1,"370":1,"421":4,"430":1,"431":3,"438":1,"439":1,"440":1,"441":1,"456":1,"459":1,"482":1,"485":1,"486":1,"487":2,"488":1,"495":2,"496":2,"501":1,"502":1,"504":1,"506":1,"508":1,"517":1,"545":1,"546":1,"563":1,"564":1,"567":2,"568":1,"569":1,"574":5,"580":1,"581":1,"654":1,"715":1,"717":1,"720":1,"722":1,"724":1,"727":1,"729":1,"731":1,"734":1,"736":1,"738":1,"741":1,"743":1,"745":1,"748":1,"752":1,"757":1,"759":2,"762":1,"764":1,"766":1,"769":1,"888":1,"928":1,"929":2,"930":1,"931":1,"932":1,"944":2,"945":1,"946":2,"947":1,"973":1,"1031":7,"1032":1,"1033":1,"1039":1,"1090":1,"1099":1,"1130":1,"1138":1,"1285":5,"1296":1,"1301":1}}],["value",{"0":{"719":1,"726":1,"733":1,"740":1,"747":1,"754":1,"761":1,"768":1},"2":{"8":1,"34":3,"35":2,"65":1,"144":1,"172":4,"200":1,"215":1,"243":1,"251":1,"260":3,"264":1,"282":2,"307":1,"308":3,"309":5,"335":1,"336":1,"345":8,"355":5,"357":2,"421":2,"426":1,"459":1,"476":1,"484":1,"491":1,"492":1,"499":1,"531":1,"532":1,"534":1,"535":1,"536":1,"539":1,"540":1,"541":1,"557":1,"561":2,"601":1,"625":1,"629":1,"681":1,"715":1,"719":1,"722":1,"724":2,"726":1,"729":1,"733":1,"736":1,"740":1,"743":1,"745":2,"747":1,"750":14,"751":1,"752":2,"757":1,"761":1,"764":1,"766":2,"768":1,"777":2,"778":2,"779":6,"787":1,"798":2,"807":4,"808":1,"809":1,"812":1,"816":1,"870":1,"876":7,"879":1,"880":2,"881":5,"883":1,"884":2,"885":5,"887":1,"889":3,"901":1,"905":1,"909":1,"913":1,"917":1,"924":1,"925":2,"927":1,"928":3,"929":1,"932":1,"941":1,"942":2,"944":1,"945":3,"946":1,"953":1,"960":2,"973":1,"975":1,"1001":1,"1008":4,"1023":1,"1031":8,"1033":4,"1038":2,"1039":2,"1041":1,"1043":1,"1052":8,"1074":2,"1085":1,"1088":2,"1089":2,"1091":2,"1101":1,"1102":2,"1130":1,"1133":2,"1134":1,"1138":1,"1141":2,"1142":1,"1146":1,"1151":1,"1154":1,"1159":1,"1285":2,"1292":1,"1300":1,"1301":1,"1306":2,"1340":1,"1344":1,"1364":1,"1372":1,"1393":2,"1399":1}}],["v4",{"2":{"12":1,"99":1,"102":1,"172":1}}],["v",{"2":{"1":1,"17":1,"84":1,"88":1,"291":2,"348":1,"1050":1,"1054":2,"1055":1,"1056":4,"1057":2,"1310":1}}],["`$",{"2":{"1023":1}}],["`rpc",{"2":{"1023":1}}],["`rollfork",{"2":{"1011":2}}],["`reverttostate`",{"2":{"1081":1}}],["`read`",{"2":{"803":2}}],["`read",{"2":{"803":1}}],["`remappings",{"2":{"412":2}}],["`lastcalla`",{"2":{"809":1}}],["`libs`",{"2":{"421":1}}],["`lib",{"2":{"172":1}}],["`valuec`",{"2":{"809":1}}],["`valueb`",{"2":{"809":1}}],["`valuea`",{"2":{"809":1}}],["`vm`",{"2":{"329":1}}],["`vm",{"2":{"172":2,"421":3,"803":5}}],["`write`",{"2":{"803":2}}],["`withdrawall",{"2":{"172":1}}],["`expectrevert`",{"2":{"421":1}}],["`erc20token",{"2":{"172":1}}],["`none`|",{"2":{"803":1}}],["`notok`",{"2":{"95":1}}],["`name",{"2":{"412":1}}],["`y`",{"2":{"359":2}}],["`x`",{"2":{"359":2}}],["`1`",{"2":{"345":1}}],["`1e18`",{"2":{"215":1}}],["`governance",{"2":{"1283":1}}],["`getcode`",{"2":{"821":1}}],["`getuserbalance",{"2":{"172":1}}],["`game`",{"2":{"335":1}}],["`batchtransfer",{"2":{"783":1}}],["`build",{"2":{"421":1}}],["`block",{"2":{"344":1,"421":2}}],["`b`",{"2":{"215":7}}],["`bound",{"2":{"172":1}}],["`combineda`",{"2":{"809":1}}],["`contract`",{"2":{"1283":1}}],["`console",{"2":{"421":1}}],["`console2`",{"2":{"329":1,"1354":1}}],["`console`",{"2":{"329":1}}],["`condition`",{"2":{"215":1}}],["`cast",{"2":{"92":1,"172":18}}],["```balanceof```",{"2":{"1395":1}}],["```bash",{"2":{"172":3}}],["```getpointertoerc20corestorage```",{"2":{"1395":1}}],["```erc20",{"2":{"1395":1}}],["```solidity",{"2":{"172":5}}],["```",{"2":{"172":12,"1395":1}}],["```toml",{"2":{"172":2}}],["`fs",{"2":{"803":1}}],["`false`",{"2":{"803":1,"1081":3}}],["`failures`",{"2":{"421":1}}],["`fuzz",{"2":{"172":1}}],["`forkid`",{"2":{"1011":2}}],["`forge`",{"2":{"844":1}}],["`forge",{"2":{"77":1,"78":1,"172":25,"421":1,"844":6}}],["`followlinks`",{"2":{"802":1}}],["`foundry",{"2":{"172":1,"412":1}}],["`userinfo`",{"2":{"172":1}}],["`userbalances`",{"2":{"172":1}}],["`output`",{"2":{"1034":2}}],["`optimismfork`",{"2":{"345":1}}],["`owner`",{"2":{"172":1}}],["`ok`",{"2":{"45":1,"95":2}}],["`true`",{"2":{"803":1,"1081":3}}],["`transfer`",{"2":{"328":1}}],["`tx",{"2":{"421":1}}],["`tokentype`",{"2":{"172":1}}],["`totalsupply`",{"2":{"172":1}}],["`testfork",{"2":{"172":1}}],["`testfuzz",{"2":{"172":3}}],["`test",{"2":{"172":5}}],["`deletestatesnapshot`",{"2":{"1081":1}}],["`deposit",{"2":{"172":1}}],["`deployment",{"2":{"172":1}}],["`deploy",{"2":{"172":1}}],["`dynamic",{"2":{"172":1}}],["`astring`",{"2":{"1133":1,"1141":1}}],["`assertequint",{"2":{"1186":1}}],["`asserteq",{"2":{"172":1}}],["`allowed",{"2":{"803":1}}],["`access`",{"2":{"803":1}}],["`auto",{"2":{"421":2}}],["`address",{"2":{"345":1}}],["`a`",{"2":{"215":7}}],["`anvil",{"2":{"172":13}}],["`anvil`",{"2":{"172":1}}],["`abstractmycontract",{"2":{"172":1}}],["`a6yrbjp5prvakia6bqp5qdacczyfhkyi5j1r6qbds1js41ak1a`",{"2":{"45":1}}],["`myobject`",{"2":{"1133":1,"1141":1}}],["`myinternalmethod`",{"2":{"390":1}}],["`mycontractscript",{"2":{"172":1}}],["`mycontract",{"2":{"172":2}}],["`mainnetfork`",{"2":{"344":2,"345":2,"876":1,"1008":1}}],["`maxdepth`",{"2":{"802":2}}],["`max",{"2":{"172":1,"421":2}}],["`msg",{"2":{"35":1,"421":1}}],["`internalc`",{"2":{"809":2}}],["`internalb`",{"2":{"809":2}}],["`internala`",{"2":{"809":2}}],["`interest",{"2":{"172":1}}],["`invariant",{"2":{"172":3}}],["`implementation`",{"2":{"1052":2}}],["`import",{"2":{"172":1}}],["`imycontract",{"2":{"172":1}}],["`iat`",{"2":{"76":1}}],["`stopbroadcast`",{"2":{"1096":1}}],["`status`",{"2":{"172":1}}],["`snapshot`",{"2":{"1081":2}}],["`snapshots",{"2":{"809":5}}],["`serializestring`",{"2":{"1034":1}}],["`sender`",{"2":{"850":1,"876":1}}],["`setup",{"2":{"172":1}}],["`soldeer",{"2":{"412":1}}],["`solc",{"2":{"188":1}}],["`simple`",{"2":{"345":1,"876":1,"1008":1}}],["`score`",{"2":{"335":1}}],["`script",{"2":{"172":1}}],["`src",{"2":{"172":1}}],["`salt`",{"2":{"65":1}}],["`path`",{"2":{"802":3,"803":1}}],["`pass",{"2":{"95":1}}],["`prop",{"2":{"421":1}}],["`pooldata`",{"2":{"172":1}}],["`pending",{"2":{"95":1}}],["`permithash`",{"2":{"76":1}}],["`",{"2":{"1":1,"34":1,"35":1,"88":1,"95":4,"127":1,"172":53,"345":3,"412":1,"783":1,"803":3,"1011":2,"1023":1,"1186":1,"1283":1}}],["|0x7109709ecfa91a80626ff3989d68f67f5b1dd12d",{"2":{"762":1}}],["||",{"2":{"34":1,"280":1,"1050":1}}],["|",{"2":{"1":30,"35":33,"54":4,"88":42,"95":1,"96":1,"100":1,"111":3,"151":1,"188":2,"266":4,"393":1,"762":1,"803":1}}],["x4",{"2":{"396":1}}],["x86",{"2":{"178":1}}],["xy=k",{"2":{"264":1}}],["xy",{"2":{"172":1}}],["xyz",{"2":{"1":1,"3":1,"100":1,"133":3,"137":1,"141":1,"143":2,"145":2,"151":1,"403":1,"407":1,"414":1}}],["x01",{"2":{"74":1}}],["x19",{"2":{"74":1}}],["x",{"2":{"51":3,"85":2,"128":3,"148":2,"183":1,"248":10,"289":2,"359":1,"384":4,"419":1,"444":1,"445":1,"446":1,"681":2,"893":4,"1270":1,"1285":1}}],["x27",{"0":{"75":1,"176":1,"179":1,"180":1,"187":1,"189":1,"191":1,"252":1,"1354":1},"1":{"76":1},"2":{"0":1,"1":5,"3":1,"8":1,"12":1,"13":2,"14":1,"15":1,"17":4,"18":2,"20":1,"24":1,"25":1,"26":2,"31":1,"34":1,"35":6,"40":1,"43":1,"45":3,"55":1,"56":3,"57":3,"62":1,"64":2,"65":6,"67":3,"72":1,"73":1,"75":1,"76":1,"77":6,"78":7,"80":2,"81":6,"82":2,"83":4,"84":3,"85":2,"86":5,"87":2,"88":1,"90":2,"91":2,"94":4,"96":1,"103":1,"106":3,"107":2,"108":1,"117":1,"127":1,"128":1,"129":2,"130":4,"132":1,"134":1,"146":1,"151":3,"154":4,"157":2,"166":1,"172":5,"173":1,"176":1,"178":2,"179":1,"181":1,"185":1,"187":2,"188":1,"189":2,"190":1,"191":1,"192":2,"195":1,"196":1,"248":1,"249":1,"250":2,"251":13,"254":2,"255":1,"257":3,"262":1,"265":1,"272":1,"289":1,"303":2,"307":12,"309":1,"323":2,"327":3,"328":6,"342":2,"344":2,"345":3,"347":1,"356":7,"357":2,"362":3,"363":2,"364":3,"365":1,"367":1,"371":1,"374":1,"375":2,"378":2,"379":1,"384":4,"386":7,"387":3,"388":1,"392":1,"393":3,"394":3,"397":1,"402":1,"405":1,"409":1,"414":2,"416":4,"418":1,"421":31,"431":2,"439":1,"454":2,"455":1,"487":2,"497":8,"561":1,"573":1,"574":1,"601":2,"654":1,"659":4,"660":1,"665":1,"698":3,"699":2,"707":3,"708":9,"759":1,"782":2,"783":1,"786":2,"788":2,"798":1,"802":1,"804":6,"821":1,"842":1,"875":1,"876":1,"894":1,"895":2,"897":1,"922":6,"924":2,"925":1,"927":1,"928":1,"929":3,"931":1,"932":2,"939":6,"941":2,"942":1,"944":1,"945":1,"946":3,"947":1,"975":1,"976":1,"996":1,"997":4,"1008":1,"1034":5,"1042":3,"1043":3,"1050":1,"1051":1,"1052":15,"1056":2,"1057":1,"1075":12,"1083":1,"1087":5,"1088":3,"1089":1,"1090":3,"1112":1,"1130":1,"1131":2,"1133":5,"1134":8,"1138":1,"1139":2,"1141":5,"1142":8,"1283":1,"1284":3,"1285":2,"1288":1,"1309":1,"1310":6,"1353":1,"1354":1,"1394":2,"1395":1}}],["h160",{"2":{"927":1,"944":1}}],["hd",{"2":{"623":1}}],["hjort",{"2":{"392":1}}],["hurt",{"2":{"384":1}}],["human",{"2":{"67":1,"133":1,"1033":1,"1285":3}}],["hh",{"2":{"323":1,"401":1,"402":1}}],["hre",{"2":{"106":1}}],["his",{"2":{"1151":2}}],["history",{"2":{"20":2}}],["hidden",{"2":{"972":1}}],["hit",{"2":{"199":1,"387":1,"650":1,"651":1,"654":1,"1327":1}}],["highly",{"2":{"262":1,"264":1}}],["highlighted",{"2":{"37":1}}],["high`",{"2":{"172":1}}],["high",{"0":{"306":1},"1":{"307":1,"308":1,"309":1},"2":{"172":3,"180":1,"257":1,"303":1,"304":2,"449":1}}],["higher",{"2":{"76":1,"194":1,"536":1,"564":1,"567":1,"1047":1}}],["horn",{"2":{"501":1}}],["hoax",{"0":{"1332":1},"1":{"1333":1,"1334":1},"2":{"333":1,"704":1,"962":1,"1333":4,"1382":1}}],["hop",{"2":{"175":1}}],["hours",{"2":{"172":1}}],["homebrew",{"2":{"111":3}}],["home",{"2":{"95":2,"96":2,"108":1,"158":2,"187":1,"393":3}}],["hold",{"2":{"264":1,"265":2,"270":1,"384":1}}],["holders",{"2":{"81":1,"392":1}}],["holds",{"2":{"79":1,"264":1,"384":3,"1050":1}}],["hood",{"2":{"35":1,"895":1,"926":1,"929":1,"943":1,"946":1}}],["host",{"2":{"20":2,"24":2}}],["however",{"2":{"67":1,"84":1,"93":1,"257":1,"342":3,"355":1,"363":1,"875":1}}],["how",{"0":{"181":1,"182":1,"183":1,"184":1,"185":1,"186":1,"931":1,"947":1,"1033":1},"2":{"8":1,"17":1,"21":1,"25":1,"45":1,"67":3,"75":1,"79":1,"82":1,"86":1,"102":1,"105":1,"163":1,"173":1,"192":2,"248":1,"260":1,"262":2,"271":1,"277":1,"281":1,"285":3,"289":1,"342":1,"356":1,"364":1,"365":1,"371":1,"402":1,"419":1,"421":1,"431":1,"492":1,"495":1,"496":1,"500":1,"507":2,"803":1,"808":1,"895":1,"1079":1,"1088":1,"1090":1}}],["h",{"2":{"17":1,"35":2,"39":1,"288":1,"612":1,"620":2}}],["her",{"2":{"1052":2}}],["here",{"2":{"14":1,"25":1,"27":1,"45":1,"62":1,"81":1,"86":1,"87":1,"90":1,"94":1,"99":1,"100":1,"101":1,"115":1,"116":1,"117":1,"125":1,"133":1,"134":1,"138":1,"141":1,"145":1,"148":1,"151":1,"173":1,"175":1,"181":1,"192":1,"206":2,"249":1,"253":1,"257":1,"258":1,"262":1,"328":1,"344":1,"347":1,"355":2,"367":1,"384":1,"388":2,"403":1,"421":1,"444":1,"654":1,"783":1,"1056":1,"1070":1,"1088":1,"1133":1,"1134":2,"1141":1,"1142":2,"1271":1}}],["heavy",{"2":{"507":1}}],["headers",{"2":{"431":2}}],["header",{"0":{"431":1},"2":{"431":6}}],["heuristic",{"2":{"307":1}}],["hence",{"2":{"199":1,"786":1}}],["hello",{"2":{"133":1,"394":4,"396":1,"761":1,"762":1,"804":1,"1044":1}}],["helpercontract",{"2":{"358":3}}],["helper",{"0":{"268":1},"2":{"185":1,"268":2,"275":1,"358":1,"384":2,"925":1,"930":1,"931":2,"932":1,"935":1,"942":1,"947":2,"950":1,"1186":1}}],["helpers",{"2":{"106":1,"170":1,"376":1}}],["helps",{"2":{"171":1,"278":1,"314":1,"317":1,"432":1,"433":1}}],["helpful",{"2":{"83":1,"329":1,"364":1,"384":1,"1353":1}}],["help`",{"2":{"35":1}}],["help",{"0":{"179":1,"293":1,"590":1},"1":{"294":1,"295":1,"296":1,"297":1,"298":1,"591":1,"592":1,"593":1,"594":1,"595":1},"2":{"17":2,"27":1,"32":1,"35":3,"39":1,"58":1,"67":1,"134":2,"151":1,"169":1,"171":1,"175":1,"285":1,"288":2,"294":2,"295":1,"296":1,"297":5,"321":1,"337":1,"359":1,"392":1,"416":2,"454":1,"591":2,"592":1,"593":1,"594":5,"612":2,"616":1}}],["hevm",{"2":{"27":1,"329":1}}],["hexuint",{"2":{"928":1,"945":1}}],["hexdata",{"2":{"613":1}}],["hexadecimal",{"2":{"533":2,"566":1,"620":2,"1285":1}}],["hexadecimals",{"2":{"25":1}}],["hexencodedleaves",{"2":{"251":1}}],["hex",{"0":{"47":2,"441":1},"2":{"13":2,"27":2,"45":1,"51":1,"148":2,"441":4,"613":1,"618":1,"620":2,"733":1,"734":2,"745":1,"766":1,"798":3,"799":1,"928":1,"930":1,"945":1,"1023":1,"1107":2,"1108":1,"1285":1,"1372":1}}],["height",{"2":{"8":1,"811":1,"813":2}}],["http",{"2":{"9":1,"96":1,"133":1,"138":1,"190":1,"1052":1}}],["https",{"2":{"1":3,"3":2,"45":1,"80":1,"88":1,"95":1,"100":1,"115":2,"133":4,"137":1,"141":1,"143":2,"145":2,"151":1,"155":2,"172":2,"190":2,"344":1,"345":1,"393":1,"394":1,"396":1,"403":1,"407":1,"408":2,"409":4,"410":1,"421":1,"561":1,"602":1,"978":2,"1023":3,"1112":2}}],["halts",{"2":{"1066":1,"1121":1}}],["half",{"2":{"386":1}}],["hangups",{"2":{"973":1}}],["hang",{"2":{"972":1}}],["handful",{"2":{"932":1}}],["hand",{"2":{"786":1,"787":1}}],["handled",{"2":{"798":1,"976":1}}],["handle",{"2":{"265":1,"364":2,"403":1,"409":1,"413":1}}],["handlers",{"2":{"172":3,"173":1,"271":1,"272":1,"273":1,"275":1}}],["handler",{"0":{"271":1,"272":1,"273":1},"1":{"272":1,"273":1,"274":1,"275":1,"276":1},"2":{"172":7,"267":1,"272":3,"274":1,"275":1,"276":1}}],["handling",{"0":{"976":1},"2":{"162":1,"172":2,"972":1}}],["handy",{"2":{"64":1}}],["harness",{"2":{"390":2}}],["harnesses",{"0":{"389":1},"1":{"390":1,"391":1,"392":1},"2":{"392":1}}],["hard",{"2":{"931":1,"947":1,"965":1}}],["harder",{"2":{"254":1,"355":1}}],["hardcoded",{"2":{"975":1}}],["hardcode",{"2":{"254":1}}],["hardware",{"0":{"361":1,"623":1,"627":1},"2":{"94":1,"95":1,"361":3,"623":3,"627":2,"629":1}}],["hardfork",{"2":{"17":3,"61":2,"355":1,"421":1,"484":1,"1051":1,"1052":1}}],["hardhatuserconfig",{"2":{"106":1}}],["hardhat",{"0":{"103":1,"106":1,"107":1,"401":1},"1":{"104":1,"105":1,"106":1,"107":1},"2":{"13":2,"35":1,"48":1,"89":1,"96":2,"103":2,"104":6,"106":21,"107":8,"168":1,"179":1,"181":1,"323":1,"329":4,"401":2,"402":2,"1284":3,"1353":2,"1354":1}}],["happen",{"2":{"415":1,"788":1}}],["happening",{"2":{"274":1,"355":1,"365":1}}],["happens",{"0":{"417":1},"2":{"85":1,"188":1,"342":1,"419":1}}],["had",{"2":{"198":1,"929":1,"946":1,"1087":1,"1321":1}}],["having",{"2":{"33":1,"57":1,"83":1,"185":1,"410":1,"1130":1,"1138":1}}],["have",{"2":{"3":1,"18":1,"52":1,"62":1,"76":2,"77":1,"78":1,"82":1,"83":1,"85":1,"87":2,"90":3,"92":1,"93":1,"94":2,"95":3,"103":2,"105":1,"117":1,"118":1,"120":1,"125":1,"127":1,"134":1,"157":1,"172":1,"181":1,"183":1,"248":1,"256":1,"257":2,"258":1,"262":2,"264":2,"265":1,"267":1,"269":1,"285":1,"309":1,"311":2,"334":1,"336":1,"355":1,"356":2,"364":1,"365":1,"367":1,"378":1,"379":1,"384":2,"386":1,"394":1,"398":1,"399":1,"407":1,"408":1,"413":1,"414":1,"417":1,"446":1,"447":1,"452":1,"481":1,"507":1,"633":1,"695":1,"783":1,"786":2,"787":1,"788":1,"798":1,"925":1,"930":1,"932":1,"942":1,"944":1,"975":1,"1151":2,"1285":1}}],["haven",{"2":{"0":1,"26":1,"55":1,"57":1,"82":1,"107":1,"132":1}}],["hasn",{"2":{"1283":1}}],["has",{"2":{"35":4,"57":1,"87":2,"90":2,"94":1,"115":1,"172":1,"183":1,"185":1,"189":2,"249":1,"250":1,"264":1,"272":1,"274":1,"327":1,"328":1,"347":1,"355":1,"363":1,"365":1,"393":1,"403":2,"430":1,"476":1,"530":1,"574":1,"646":1,"664":1,"680":1,"783":1,"787":1,"808":1,"875":1,"884":1,"927":1,"928":1,"930":1,"944":1,"945":1,"973":1,"982":4,"1069":1,"1086":1,"1088":1,"1151":1,"1283":1,"1334":1,"1380":1,"1406":1}}],["hascode",{"2":{"15":1}}],["hashedval",{"2":{"319":2}}],["hashes",{"2":{"62":1,"75":2,"77":1,"78":2,"85":1}}],["hashoptimization",{"2":{"319":1}}],["hashtypeddatav4",{"2":{"172":1}}],["hashpermitdetails",{"2":{"78":1}}],["hash`",{"2":{"34":1}}],["hash64",{"2":{"34":1}}],["hashing",{"2":{"25":1,"67":3,"75":2,"319":2}}],["hash",{"0":{"488":1,"514":1,"520":1},"2":{"1":1,"15":2,"18":2,"25":1,"34":5,"43":1,"59":1,"62":5,"65":2,"67":1,"77":4,"78":3,"84":1,"86":1,"95":2,"96":1,"172":5,"260":4,"407":1,"410":1,"419":2,"421":4,"488":4,"508":1,"514":1,"517":1,"520":1,"684":1,"689":1,"932":1,"1012":1,"1056":5,"1057":3,"1310":2}}],["gm",{"2":{"799":4}}],["gnosissafeproxyfactory",{"2":{"378":3}}],["gnosis",{"2":{"378":2}}],["gnu",{"2":{"178":1}}],["gdas",{"2":{"255":2}}],["glance",{"2":{"355":1}}],["glob",{"2":{"325":4,"347":1,"421":2,"427":1,"443":1,"451":1}}],["globally",{"2":{"259":1,"263":1,"346":1,"457":1,"787":1}}],["global",{"0":{"457":1},"2":{"108":1,"259":1,"263":1,"319":1,"421":1,"444":2,"565":1,"1276":1}}],["glibc",{"0":{"178":1},"2":{"178":1}}],["ghostvariablesconsistent",{"2":{"172":1}}],["ghost",{"0":{"273":1},"2":{"172":11,"264":2,"273":1,"276":1,"392":1}}],["gh",{"2":{"152":1}}],["ghcr",{"2":{"83":1,"85":1,"86":1,"88":1,"101":1,"157":1}}],["gwei",{"2":{"95":1,"96":3,"794":1}}],["grief",{"2":{"609":1}}],["grow",{"2":{"367":1}}],["ground",{"2":{"363":1}}],["groups",{"2":{"432":4}}],["grouped",{"2":{"262":1,"285":1,"384":1}}],["group",{"2":{"192":1,"382":1,"421":1,"432":1,"575":1,"807":11,"809":8,"844":2}}],["grasp",{"2":{"355":1}}],["granular",{"2":{"276":1,"285":3}}],["granted",{"2":{"646":1,"803":1}}],["grant",{"2":{"646":1,"820":1,"826":1}}],["grants",{"2":{"188":1}}],["grantrole",{"2":{"172":1}}],["gradual",{"0":{"255":1},"2":{"255":1,"256":1}}],["grab",{"2":{"92":2}}],["great",{"2":{"376":1,"655":1}}],["greater",{"2":{"102":1,"215":2,"227":1,"229":1,"231":1,"233":1,"328":1,"356":1,"440":1,"491":1,"787":1,"1200":1,"1204":1,"1208":1,"1212":1}}],["greek",{"2":{"258":1}}],["green",{"2":{"37":1,"355":1,"929":2,"946":3}}],["guarantees",{"2":{"57":1,"76":1}}],["guidance",{"0":{"366":1,"381":1},"1":{"367":1,"368":1,"369":1,"370":1,"371":1,"382":1,"383":1,"384":1},"2":{"384":1}}],["guideline",{"2":{"313":1}}],["guidelines",{"2":{"162":1,"169":1,"171":1,"172":2}}],["guides",{"0":{"162":1},"2":{"157":1,"163":1,"170":1,"356":1}}],["guide",{"0":{"193":1,"312":1},"1":{"194":1,"195":1,"196":1,"197":1,"198":1,"199":1,"200":1,"313":1,"314":1,"315":1,"316":1,"317":1},"2":{"58":1,"67":1,"75":1,"79":1,"82":6,"83":4,"86":1,"116":1,"157":1,"193":2,"313":1,"314":1,"316":1}}],["guid",{"2":{"45":2,"95":1}}],["g",{"2":{"17":1,"40":2,"45":1,"87":2,"90":1,"94":1,"126":1,"131":1,"172":1,"183":1,"262":3,"265":2,"266":1,"291":1,"303":1,"313":1,"314":1,"315":1,"316":1,"317":1,"334":1,"344":2,"345":2,"357":1,"368":1,"384":3,"387":1,"393":1,"407":2,"408":2,"409":1,"413":1,"416":1,"428":1,"450":1,"454":1,"476":1,"545":1,"546":1,"567":1,"578":1,"752":1,"782":3,"787":1,"788":1,"798":2,"803":1,"1082":1,"1150":1,"1306":1,"1314":1,"1393":1}}],["game",{"2":{"335":2,"1328":1}}],["gain",{"2":{"180":1,"376":1,"975":1}}],["ganache",{"2":{"14":1,"48":1}}],["gasend",{"2":{"1117":2}}],["gasstart",{"2":{"1117":2}}],["gasleft",{"2":{"957":1,"1001":1,"1004":1,"1117":2,"1352":4}}],["gaslimit",{"2":{"25":2,"84":1,"557":1}}],["gasused",{"2":{"25":2,"84":1,"807":5,"809":1,"1117":1}}],["gasprice",{"2":{"12":1,"1116":1,"1117":2}}],["gas",{"0":{"281":1,"283":1,"284":1,"285":1,"318":1,"536":1,"537":1,"538":1,"542":1,"557":1,"570":1,"584":1},"1":{"282":1,"283":1,"319":1},"2":{"1":1,"13":1,"14":1,"19":7,"25":3,"37":1,"56":2,"95":7,"96":4,"138":2,"172":13,"254":1,"257":1,"258":2,"264":1,"281":17,"282":3,"283":38,"284":11,"285":21,"292":10,"303":1,"304":2,"319":1,"325":2,"328":1,"338":3,"347":4,"355":8,"384":1,"394":1,"407":1,"410":1,"421":15,"449":1,"492":1,"536":6,"537":3,"538":3,"542":3,"557":2,"570":2,"584":2,"589":1,"788":1,"807":10,"808":16,"809":4,"932":1,"957":6,"1001":2,"1004":2,"1112":1,"1117":1,"1155":1,"1164":1,"1284":1,"1318":1,"1351":3,"1352":13,"1395":1}}],["gone",{"2":{"932":1}}],["gotcha",{"2":{"787":1}}],["governance",{"2":{"1283":5}}],["governanceaddress",{"2":{"1283":3}}],["govern",{"2":{"265":1}}],["governed",{"2":{"259":1,"263":1,"272":1}}],["going",{"2":{"92":1,"95":1}}],["good",{"2":{"83":1,"84":1,"185":1,"264":1,"267":1,"273":1,"356":1,"359":1,"367":1,"391":1,"655":1,"1056":1}}],["goals",{"2":{"85":1}}],["goal",{"2":{"79":1}}],["go",{"2":{"8":1,"43":1,"44":1,"81":1,"180":1,"356":2,"414":2,"493":1,"508":1,"1131":1,"1139":1}}],["gitmodules",{"2":{"396":1}}],["gitignore",{"2":{"172":1,"414":2}}],["git",{"0":{"409":1},"2":{"101":1,"107":2,"151":1,"155":3,"172":3,"303":1,"323":1,"393":1,"394":1,"395":1,"396":1,"398":1,"402":1,"403":1,"409":28,"410":1,"418":1,"426":2}}],["gitlab",{"0":{"101":1},"2":{"101":1,"409":2}}],["githubusercontent",{"2":{"190":1}}],["github",{"0":{"99":1,"156":1},"2":{"1":1,"24":1,"88":1,"99":1,"115":3,"150":1,"152":3,"155":2,"156":1,"190":1,"363":1,"386":1,"393":1,"394":1,"395":1,"396":1,"403":1,"407":1,"409":7,"410":1,"419":2}}],["gives",{"2":{"285":1,"356":1,"387":1,"402":1,"564":1}}],["give",{"2":{"285":3,"386":1,"412":1,"894":1,"929":1,"930":1,"946":1,"1056":1,"1287":3,"1333":2,"1379":2}}],["given",{"2":{"8":1,"13":1,"14":2,"15":3,"17":2,"22":1,"43":1,"54":1,"62":1,"65":1,"90":1,"257":2,"262":1,"265":2,"266":5,"268":10,"296":1,"327":1,"421":1,"497":3,"517":1,"593":1,"599":1,"601":1,"624":1,"625":1,"628":1,"629":1,"642":1,"646":1,"681":1,"683":4,"684":1,"685":1,"689":1,"690":1,"694":1,"707":1,"802":3,"820":1,"826":1,"835":1,"881":1,"885":1,"929":1,"946":1,"1007":1,"1011":1,"1038":1,"1047":1,"1065":1,"1081":1,"1082":2,"1089":1,"1110":3,"1282":1,"1331":1,"1354":1,"1395":1}}],["giving",{"2":{"86":1}}],["geiger",{"2":{"322":1}}],["getpointertoerc20corestorage",{"2":{"1395":2}}],["getproof",{"2":{"12":1,"252":1,"254":1}}],["getowner",{"2":{"1039":4}}],["getdeployedcode",{"0":{"824":1},"1":{"825":1,"826":1,"827":1,"828":1,"829":1},"2":{"790":1,"823":1,"825":1,"826":1,"827":2,"828":4}}],["getdata",{"2":{"254":1}}],["getrecordedlogs",{"0":{"839":1},"1":{"840":1,"841":1,"842":1},"2":{"770":1,"840":1,"842":2,"987":1,"988":1}}],["getroot",{"2":{"251":1,"252":1}}],["getlabel",{"0":{"830":1},"1":{"831":1,"832":1},"2":{"697":1,"698":1,"699":1,"831":1,"1075":2,"1122":1}}],["getlogs",{"2":{"12":1}}],["getnonce",{"0":{"833":1},"1":{"834":1,"835":1,"836":1,"837":1,"838":1},"2":{"695":1,"770":1,"834":2,"837":1,"838":1}}],["getclaimableamount",{"2":{"775":1}}],["getchain",{"2":{"93":1}}],["getconfiguration",{"2":{"775":2}}],["getcontractcreator",{"2":{"15":1}}],["getcode",{"0":{"818":1},"1":{"819":1,"820":1,"821":1,"822":1,"823":1},"2":{"12":1,"358":1,"790":1,"819":1,"820":1,"821":3,"822":4,"826":1,"829":1}}],["gets",{"2":{"15":4,"419":1,"633":1,"812":1,"816":1,"835":1,"841":1,"921":1,"938":1,"1050":1}}],["getstorageat",{"2":{"12":1}}],["getinternaloperations",{"2":{"15":1}}],["getapilevel",{"2":{"15":1}}],["getautomine",{"2":{"13":1}}],["getheaderbynumber",{"2":{"145":1}}],["geth",{"2":{"14":1,"17":1,"25":1}}],["get",{"2":{"12":1,"15":1,"58":1,"77":2,"78":4,"92":3,"94":1,"118":1,"122":1,"145":1,"161":2,"172":7,"202":1,"257":1,"267":1,"275":1,"281":1,"294":1,"297":1,"328":2,"329":1,"336":1,"356":1,"367":1,"384":1,"419":1,"591":1,"594":1,"602":3,"638":1,"758":1,"812":1,"816":1,"827":1,"842":1,"920":1,"937":1,"1117":1,"1271":1,"1310":2,"1354":1}}],["getwork",{"2":{"12":1}}],["getfilterlogs",{"2":{"12":1}}],["getfilterchanges",{"2":{"12":1}}],["getunclebyblocknumberandindex",{"2":{"12":1}}],["getunclebyblockhashandindex",{"2":{"12":1}}],["getunclecountbyblocknumber",{"2":{"12":1}}],["getunclecountbyblockhash",{"2":{"12":1}}],["gettransactionerror",{"2":{"15":1}}],["gettransactionreceipt",{"2":{"12":1}}],["gettransactionbysenderandnonce",{"2":{"15":1}}],["gettransactionbyblocknumberandindex",{"2":{"12":1}}],["gettransactionbyblockhashandindex",{"2":{"12":1}}],["gettransactionbyhash",{"2":{"12":1,"602":2}}],["gettransactioncount",{"2":{"12":1}}],["getting",{"0":{"1":1,"27":1,"56":1,"58":1,"80":1,"91":1,"133":1,"134":1,"161":1,"187":1,"189":1,"191":1,"378":1},"1":{"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1},"2":{"267":1,"786":1,"957":1}}],["getblocktimestamp",{"0":{"814":1},"1":{"815":1,"816":1,"817":1},"2":{"815":1,"816":1,"817":2}}],["getblocktransactions",{"2":{"15":1}}],["getblocktransactioncountbynumber",{"2":{"12":1}}],["getblocktransactioncountbyhash",{"2":{"12":1}}],["getblocknumber",{"0":{"810":1},"1":{"811":1,"812":1,"813":1},"2":{"811":1,"812":1,"813":2}}],["getblock",{"2":{"15":1}}],["getblockdetails",{"2":{"15":1}}],["getblockbynumber",{"2":{"12":1,"601":2,"602":4}}],["getblockbyhash",{"2":{"12":1}}],["getbalance",{"2":{"12":1,"1023":2}}],["generic",{"2":{"1285":1}}],["generation",{"2":{"250":1,"425":1}}],["generating",{"2":{"17":1,"359":1,"427":1,"570":1,"584":1}}],["generators",{"2":{"250":1}}],["generator",{"0":{"422":1},"1":{"423":1,"424":1,"425":1,"426":1,"427":1},"2":{"35":1,"420":1,"422":1}}],["generate",{"2":{"23":1,"69":1,"72":1,"107":1,"110":1,"138":1,"172":7,"199":1,"251":2,"258":1,"281":3,"282":1,"284":2,"285":1,"323":1,"359":1,"362":1,"412":1,"421":1,"665":1}}],["generated",{"2":{"8":1,"70":1,"75":1,"77":1,"78":1,"172":2,"173":1,"250":1,"254":1,"262":1,"363":1,"419":1,"423":1,"424":1,"485":2,"507":1,"609":1,"1090":1}}],["generates",{"2":{"8":1,"22":1,"70":1,"72":1,"74":1,"248":1,"254":1,"260":1,"363":1,"378":1,"398":1,"412":1,"606":1,"1051":1}}],["generally",{"2":{"60":1,"61":1,"154":1,"374":1,"409":1,"787":1,"797":1}}],["general",{"0":{"17":1,"39":1,"321":1,"366":1,"381":1,"472":1,"528":1,"616":1},"1":{"367":1,"368":1,"369":1,"370":1,"371":1,"382":1,"383":1,"384":1,"473":1,"474":1,"475":1,"476":1,"477":1,"478":1,"479":1,"480":1,"481":1,"482":1,"483":1,"484":1,"485":1,"486":1,"487":1,"488":1,"489":1,"529":1,"530":1,"531":1,"532":1,"533":1,"534":1,"535":1,"536":1,"537":1,"538":1,"539":1,"540":1,"541":1,"542":1,"543":1,"544":1,"545":1,"546":1,"547":1,"548":1,"549":1,"550":1,"551":1,"552":1,"553":1,"554":1,"555":1,"556":1,"557":1,"558":1,"559":1,"560":1,"561":1,"562":1},"2":{"35":2,"257":3,"281":1,"286":1,"315":1,"342":1,"355":1,"384":1,"444":1,"461":1,"471":1,"527":1}}],["genesis",{"0":{"25":1},"2":{"1":1,"17":3,"25":6}}],["gt",{"0":{"209":1,"211":1,"213":1},"1":{"210":1,"212":1,"214":1},"2":{"1":1,"3":1,"8":1,"9":1,"17":11,"18":8,"19":6,"20":3,"23":1,"24":1,"31":4,"35":28,"36":2,"40":1,"43":5,"44":1,"45":8,"59":2,"83":1,"85":1,"92":2,"95":15,"96":1,"109":2,"111":3,"112":3,"113":3,"115":1,"119":1,"130":2,"133":2,"158":4,"172":73,"173":2,"183":4,"184":2,"188":4,"209":3,"211":3,"213":3,"219":3,"221":3,"227":3,"229":3,"231":3,"233":3,"235":3,"237":3,"239":3,"241":3,"243":3,"245":3,"251":1,"252":1,"257":1,"266":3,"271":1,"282":3,"283":2,"291":1,"292":2,"307":2,"323":2,"338":2,"339":2,"340":2,"355":14,"379":2,"390":1,"392":1,"393":1,"399":1,"400":2,"421":1,"428":1,"446":1,"452":4,"473":2,"477":3,"543":2,"549":1,"550":1,"551":1,"552":1,"553":1,"554":1,"573":1,"601":1,"629":7,"651":1,"655":1,"659":4,"775":1,"802":9,"803":4,"842":2,"927":1,"934":1,"944":1,"949":1,"1023":2,"1052":3,"1151":1,"1285":1,"1387":2,"1389":2,"1393":2,"1394":1,"1395":1}}],["rng",{"2":{"566":1}}],["rikard",{"2":{"392":1}}],["riskier",{"2":{"362":1}}],["risk",{"2":{"327":1,"363":1,"386":1,"414":1}}],["right",{"2":{"307":2,"1153":4,"1154":1,"1158":4,"1159":2,"1162":4,"1163":1,"1167":4,"1168":2,"1172":2,"1173":2,"1174":2,"1175":2,"1176":2,"1177":2,"1178":2,"1179":2,"1180":2,"1181":2,"1182":2,"1183":2,"1184":2,"1185":2,"1186":2,"1187":1,"1190":4,"1191":2,"1199":4,"1200":1,"1203":4,"1204":2,"1207":4,"1208":1,"1211":4,"1212":2,"1215":4,"1216":1,"1219":4,"1220":2,"1223":4,"1224":1,"1227":4,"1228":2,"1232":2,"1233":2,"1234":2,"1235":2,"1236":2,"1237":2,"1238":2,"1239":2,"1240":2,"1241":2,"1242":2,"1243":2,"1244":2,"1245":2,"1246":2,"1247":1,"1250":4,"1251":2}}],["r",{"2":{"323":1,"601":1,"1050":1,"1054":2,"1055":1,"1056":4,"1057":2,"1310":1}}],["ropsten",{"2":{"1284":1}}],["rotate",{"2":{"609":1}}],["roughly",{"2":{"492":1}}],["router",{"2":{"407":1,"410":1}}],["rounds",{"2":{"311":1}}],["rollfork",{"0":{"1010":1},"1":{"1011":1,"1012":1,"1013":1,"1014":1},"2":{"342":1,"344":1,"800":1,"1011":4,"1013":2,"1019":1}}],["roll",{"0":{"1015":1},"1":{"1016":1,"1017":1,"1018":1,"1019":1},"2":{"342":1,"684":1,"689":1,"770":1,"812":1,"813":1,"1011":2,"1012":1,"1014":1,"1016":1,"1018":1,"1113":1}}],["role",{"2":{"172":1}}],["roynalnaruto",{"2":{"190":1}}],["rosetta",{"2":{"187":1}}],["robust",{"2":{"162":1,"378":1}}],["roots",{"2":{"250":2,"251":1}}],["root",{"2":{"25":1,"26":1,"35":1,"84":1,"93":1,"95":1,"108":1,"115":1,"116":1,"189":1,"198":3,"250":1,"251":7,"252":3,"303":3,"323":3,"368":1,"397":1,"462":1,"463":1,"464":1,"465":1,"466":1,"468":1,"469":1,"802":1,"803":1,"804":3,"820":1,"826":1,"922":2,"929":2,"931":2,"932":2,"939":3,"946":2,"947":2,"969":1,"1131":1,"1139":1,"1296":1,"1301":1}}],["rlp",{"2":{"65":1,"613":2}}],["rule",{"2":{"307":2,"787":1}}],["rules",{"0":{"927":1,"944":1},"2":{"25":1,"75":1,"342":1,"927":1,"944":2}}],["rustup",{"2":{"117":1,"154":3,"176":2}}],["rustc",{"2":{"117":1,"302":1,"303":1}}],["rust",{"2":{"100":1,"134":1,"154":4,"176":1,"403":1,"798":1,"926":1,"929":1,"943":1,"946":1}}],["runtime",{"2":{"826":1}}],["runjsinputs",{"2":{"251":10}}],["runner",{"2":{"87":2,"421":1,"1061":1}}],["running",{"0":{"82":1,"177":1,"190":1},"1":{"83":1,"84":1,"85":1,"86":1,"87":1,"88":1},"2":{"3":1,"9":1,"13":1,"17":1,"44":1,"51":1,"64":1,"76":1,"83":1,"85":1,"88":1,"90":1,"108":1,"134":1,"151":1,"152":1,"157":2,"161":1,"162":1,"172":1,"188":1,"199":1,"257":1,"283":2,"302":1,"325":1,"327":2,"337":1,"347":1,"376":2,"399":1,"413":1,"421":1,"447":1,"451":1,"578":1,"759":1,"798":1,"957":1,"972":1,"975":1,"1042":1}}],["runs",{"0":{"492":1,"513":1,"521":1,"522":1,"523":1,"564":1,"575":1},"2":{"56":1,"62":1,"63":1,"85":1,"99":1,"108":1,"117":1,"159":1,"172":7,"194":3,"251":1,"257":3,"258":3,"262":2,"270":2,"289":3,"339":1,"347":1,"352":2,"386":1,"391":1,"394":1,"407":1,"410":1,"421":8,"444":3,"445":1,"446":2,"447":2,"458":1,"491":1,"492":5,"497":1,"501":1,"508":1,"513":1,"517":3,"521":3,"522":3,"523":3,"553":1,"554":1,"564":3,"570":1,"574":1,"575":3,"584":1,"808":1}}],["run",{"0":{"182":1,"373":1,"415":1,"582":1},"2":{"1":1,"7":1,"24":1,"27":2,"35":3,"36":3,"37":1,"43":1,"44":1,"45":1,"56":2,"83":1,"84":3,"85":4,"86":4,"88":1,"89":2,"90":1,"94":4,"95":5,"96":3,"99":2,"106":2,"107":2,"111":1,"115":2,"116":1,"119":1,"129":1,"130":3,"131":1,"133":1,"137":2,"151":3,"157":1,"172":8,"178":1,"179":2,"182":1,"187":1,"190":1,"251":3,"253":1,"257":7,"260":1,"262":5,"272":1,"281":1,"282":1,"284":1,"303":2,"325":9,"327":2,"328":2,"338":1,"339":1,"347":6,"349":4,"350":1,"351":1,"354":1,"356":2,"357":1,"362":1,"363":1,"373":1,"374":1,"375":1,"376":1,"378":1,"379":1,"386":3,"387":2,"393":1,"394":2,"396":1,"399":1,"407":1,"410":1,"414":2,"415":2,"416":3,"421":9,"444":1,"447":1,"449":1,"492":1,"497":1,"501":1,"549":1,"550":1,"551":1,"552":1,"576":1,"582":1,"583":1,"617":1,"650":1,"654":1,"775":1,"797":1,"809":3,"844":1,"846":1,"957":1,"975":3,"978":1,"1052":2,"1075":1,"1092":6,"1284":1}}],["raise",{"2":{"536":1}}],["raised",{"2":{"260":1}}],["rather",{"2":{"172":2,"454":1,"786":1,"895":1,"926":1,"943":1}}],["rate`",{"2":{"172":1}}],["rate",{"2":{"18":2,"387":1,"393":1}}],["rapid",{"2":{"134":1,"146":1,"167":1}}],["range",{"2":{"651":1,"654":1,"1271":1}}],["ranges",{"0":{"1265":1},"2":{"172":1,"782":1,"1265":1}}],["randomness",{"2":{"387":1}}],["randomized",{"2":{"138":1,"262":2}}],["random",{"2":{"81":1,"266":1,"267":1,"272":1,"606":1,"1112":1}}],["ran",{"2":{"45":1,"56":3,"87":1,"95":1,"96":1,"257":6,"328":2,"347":6,"394":2}}],["rawtxdetail",{"2":{"931":1}}],["rawtx1559detail",{"2":{"931":2}}],["rawstack",{"2":{"35":2}}],["raw",{"0":{"625":1,"629":1},"2":{"15":1,"35":9,"62":1,"115":1,"190":1,"361":1,"597":1,"601":3,"625":2,"629":2,"880":1,"881":1}}],["renamed",{"2":{"787":1}}],["reorder",{"2":{"432":1}}],["reordering",{"2":{"311":1}}],["rerun",{"0":{"351":1},"2":{"351":2,"352":1}}],["reject",{"2":{"1268":1}}],["rejection",{"2":{"650":1,"654":1}}],["rejections",{"2":{"421":1}}],["rejected",{"2":{"260":1,"446":1,"565":2}}],["rejectsintegerthe",{"2":{"446":1}}],["rejects`",{"2":{"421":2}}],["rejects",{"0":{"565":1,"583":1},"2":{"172":1,"421":3,"445":1,"446":1,"565":1,"583":2,"650":3,"651":1,"654":2}}],["rewinds",{"2":{"1367":1}}],["rewind",{"0":{"1365":1},"1":{"1366":1,"1367":1,"1368":1},"2":{"1127":1,"1366":1,"1368":1,"1382":1}}],["rewritten",{"2":{"196":1,"197":1}}],["rewrite",{"2":{"195":1,"257":1}}],["reward",{"2":{"173":1}}],["reusable",{"2":{"172":1}}],["reused",{"2":{"393":2}}],["reuse",{"2":{"102":1}}],["reentrancyguard",{"2":{"172":1}}],["reentrancy",{"2":{"172":1,"421":1,"502":2,"578":1}}],["revoke",{"2":{"1008":2}}],["revokepersistent",{"0":{"1005":1},"1":{"1006":1,"1007":1,"1008":1,"1009":1},"2":{"800":1,"851":1,"877":1,"1006":2,"1008":1,"1009":1}}],["rev",{"2":{"409":3}}],["revision",{"2":{"409":1}}],["reviews",{"2":{"808":1}}],["reviewers",{"2":{"369":1}}],["review",{"2":{"94":1,"173":1,"195":1}}],["revm",{"2":{"355":1}}],["reversed",{"2":{"307":1}}],["reverttostateanddelete",{"2":{"1081":1}}],["reverttostate",{"2":{"1081":1,"1082":1,"1083":1}}],["reverter",{"2":{"785":7,"787":2,"788":4}}],["reverted",{"2":{"356":1,"650":1,"787":2,"880":2,"1081":2,"1085":2,"1088":2,"1089":2,"1090":1,"1091":2}}],["revertdata",{"2":{"785":10}}],["revertbooleanfails",{"2":{"447":1}}],["reverting",{"2":{"267":1,"270":1,"355":1,"751":1,"787":2,"881":2,"1082":1}}],["revertsasexpected",{"2":{"787":3}}],["reverts",{"2":{"195":1,"262":1,"270":2,"272":1,"308":1,"328":1,"334":1,"356":1,"357":1,"485":1,"562":1,"637":1,"651":1,"775":2,"787":8,"788":3,"880":1,"972":1,"976":1,"1082":1,"1088":1,"1279":1,"1331":1,"1354":1,"1364":1}}],["revertwithoutreason",{"2":{"788":1}}],["revertwithcustomerror",{"2":{"195":5}}],["revertwhen",{"2":{"172":2,"196":1,"328":1}}],["revert",{"0":{"195":1,"485":1,"577":1},"2":{"14":3,"172":3,"193":1,"195":5,"257":1,"270":1,"272":1,"275":2,"289":2,"308":1,"309":2,"328":2,"345":2,"355":1,"356":2,"376":1,"384":6,"421":5,"447":2,"485":5,"577":2,"712":1,"786":3,"787":12,"802":2,"881":2,"884":1,"925":1,"942":1,"965":1,"972":1,"1023":1,"1062":6,"1081":5,"1083":4,"1154":1,"1159":2,"1163":1,"1168":2,"1187":1,"1191":2,"1195":1,"1200":1,"1204":2,"1208":1,"1212":2,"1216":1,"1220":2,"1224":1,"1228":2,"1247":1,"1251":2,"1255":1}}],["reveal",{"2":{"248":1}}],["remains",{"2":{"342":1}}],["remaining",{"2":{"95":1}}],["remap",{"2":{"397":1}}],["remapping",{"0":{"397":1,"398":1},"2":{"123":1,"198":2,"397":1,"398":3,"411":1,"412":1,"473":2}}],["remappings`",{"2":{"172":1}}],["remappings",{"0":{"119":1,"198":1,"412":1,"418":1,"473":1,"474":1},"2":{"62":1,"115":2,"117":1,"119":6,"123":2,"172":4,"193":1,"198":4,"322":1,"323":5,"368":1,"397":7,"398":5,"402":3,"411":2,"412":10,"418":3,"421":4,"458":2,"473":4,"474":5}}],["remaps",{"2":{"115":1,"473":1}}],["rememberkey",{"0":{"994":1},"1":{"995":1,"996":1,"997":1,"998":1},"2":{"709":1,"995":1,"997":2,"1122":1,"1311":1}}],["remember",{"2":{"94":1,"173":1,"334":1,"363":1,"384":1,"798":1,"997":1,"1033":1,"1130":1,"1138":1}}],["removing",{"0":{"400":1,"411":1},"2":{"411":1}}],["removefile",{"2":{"802":1,"804":1}}],["removed",{"0":{"196":1,"197":1},"2":{"158":1,"193":2,"196":1,"200":3,"265":1,"269":1,"418":1,"421":1,"861":1}}],["remove",{"0":{"354":1},"2":{"158":3,"172":2,"187":1,"322":1,"339":1,"354":1,"400":5,"411":2,"440":2,"441":3,"802":1,"804":1}}],["removeblocktimestampinterval",{"2":{"14":1}}],["removes",{"2":{"13":1,"14":1,"15":1,"197":1,"339":1,"354":1,"485":1,"802":1,"1081":2}}],["remote",{"0":{"626":1,"630":1},"2":{"18":6,"101":1,"291":2,"342":2,"386":1,"393":4,"546":3}}],["relevant",{"2":{"282":1,"284":1,"475":1}}],["released",{"2":{"177":1}}],["releases",{"2":{"150":1,"419":1}}],["release",{"2":{"102":1,"152":2,"155":5,"157":1}}],["relation",{"2":{"476":1}}],["relative",{"0":{"368":1},"2":{"54":1,"188":1,"368":3,"432":1,"462":1,"463":1,"464":1,"465":1,"466":1,"468":1,"469":1,"802":1,"820":1,"826":1,"1296":1,"1301":1}}],["related",{"0":{"1020":1},"1":{"1021":1,"1022":1,"1023":1,"1024":1},"2":{"187":1,"371":1,"384":1,"422":1,"428":1,"429":1,"448":1,"461":1,"471":1,"472":1,"490":1,"527":1,"896":1}}],["relying",{"2":{"419":1,"484":1}}],["rely",{"2":{"77":1,"78":1,"362":1}}],["relies",{"2":{"76":1,"187":1}}],["reliable",{"2":{"67":1}}],["reliably",{"2":{"59":1}}],["recreate",{"2":{"1301":1}}],["recurrentprank",{"2":{"981":1,"982":1}}],["recurrentbroadcast",{"2":{"981":1,"982":1}}],["recursively",{"2":{"421":1,"802":1}}],["recursive",{"2":{"99":1,"101":1,"413":3}}],["recall",{"2":{"842":1}}],["recipient",{"2":{"271":3,"309":4,"1087":1,"1088":1,"1112":5}}],["recover",{"2":{"1056":1}}],["recovered",{"2":{"1050":1}}],["recording",{"0":{"1091":1},"2":{"987":1,"991":1,"1086":2,"1088":1}}],["recorder",{"2":{"842":1}}],["recorded",{"2":{"94":1,"342":2,"351":1,"421":2,"571":1,"585":1,"841":2,"842":1,"1079":1,"1086":4,"1088":1,"1089":2,"1090":1}}],["recordlogs",{"0":{"985":1},"1":{"986":1,"987":1,"988":1},"2":{"770":1,"841":1,"842":1,"986":1,"988":1}}],["record",{"0":{"989":1},"1":{"990":1,"991":1,"992":1,"993":1},"2":{"421":1,"572":1,"633":1,"634":1,"770":1,"990":1,"992":1,"1075":1,"1086":1}}],["records",{"2":{"94":1,"352":1,"1079":1,"1086":2,"1090":1,"1091":19,"1092":5}}],["recompiling",{"2":{"102":2}}],["recompile",{"2":{"54":1,"84":1,"394":1}}],["recommends",{"2":{"319":1}}],["recommend",{"2":{"83":1,"150":1}}],["recommended",{"2":{"45":2,"57":1,"60":1,"61":1,"94":1,"95":1,"104":1,"115":1,"122":1,"152":1,"194":1,"195":1,"265":1,"307":1,"484":1,"497":2,"787":1,"944":2,"975":1}}],["recent",{"2":{"60":1,"61":1,"115":1,"154":1,"355":1}}],["receiving",{"2":{"393":1}}],["received",{"2":{"1052":2,"1112":1}}],["receives",{"2":{"1033":1}}],["receiver",{"2":{"271":4}}],["receive",{"2":{"29":1,"257":3,"482":1,"888":1,"934":1,"949":1,"1052":1}}],["receipts",{"2":{"95":1,"932":1}}],["receiptsroot",{"2":{"84":1}}],["receipt",{"2":{"14":1,"172":2,"617":1}}],["redeem",{"2":{"172":1}}],["reduce",{"2":{"368":1,"371":1,"387":1,"421":1}}],["reduces",{"2":{"87":1}}],["redundant",{"2":{"102":1,"371":1}}],["red",{"2":{"37":1,"87":1,"355":1,"929":2,"946":3}}],["registers",{"2":{"1023":1}}],["registry",{"0":{"1264":1},"2":{"419":1}}],["regular",{"2":{"802":1}}],["regenerated",{"2":{"565":1}}],["regenerate",{"2":{"412":1,"418":2}}],["regex",{"2":{"36":2,"325":12,"421":5,"517":1,"546":2,"549":2,"550":2,"551":2,"552":2,"553":1,"554":1}}],["regression",{"2":{"352":1}}],["regardless",{"2":{"14":1,"325":1,"453":1,"787":1,"875":1,"1284":1}}],["reproduced",{"2":{"260":1}}],["reproduce",{"2":{"260":1}}],["reproducible",{"2":{"254":1}}],["reproducibility",{"2":{"87":1}}],["represented",{"2":{"1086":2}}],["represents",{"2":{"803":1,"1087":1}}],["representation",{"2":{"77":2,"78":2,"276":1,"289":1,"421":1,"928":1,"945":1,"1107":1,"1285":5}}],["representing",{"2":{"13":1,"74":1,"192":1}}],["repos",{"2":{"367":1}}],["repositories",{"0":{"256":1}}],["repository",{"0":{"407":1,"414":1,"417":1,"426":1},"1":{"415":1,"416":1},"2":{"56":1,"107":1,"152":1,"155":2,"157":1,"255":1,"256":1,"303":1,"323":1,"393":1,"394":1,"395":1,"397":2,"403":1,"407":1,"408":1,"409":1,"410":2,"414":3,"415":1,"416":1,"417":4,"419":1,"426":2}}],["report",{"0":{"570":1,"584":1},"2":{"172":1,"284":3,"325":2,"421":4,"570":2,"584":2,"586":1}}],["reporting",{"2":{"172":1,"194":1,"195":1,"196":1}}],["reports",{"0":{"284":1,"542":1},"2":{"117":1,"138":1,"172":1,"284":10,"285":5,"384":1,"407":1,"410":1,"421":4,"542":3}}],["reported",{"2":{"37":2,"189":1}}],["repo",{"0":{"105":1},"2":{"152":2,"188":3,"251":1,"368":1}}],["replaces",{"2":{"1133":2,"1141":2}}],["replacement",{"2":{"384":1}}],["replace",{"2":{"307":1,"344":1,"345":1,"387":1,"1130":1,"1138":1}}],["replaced",{"2":{"200":1,"352":1,"353":1,"875":1,"1285":2}}],["replacing",{"2":{"102":1,"126":1,"802":1,"1130":1,"1138":1}}],["replayed",{"2":{"353":1,"421":2,"571":1,"585":1,"1050":1}}],["replays",{"2":{"352":1,"683":1,"684":1,"689":1,"1011":1,"1012":1}}],["replaying",{"0":{"350":1},"1":{"351":1,"352":1,"353":1,"354":1},"2":{"350":1}}],["replay",{"2":{"133":1,"351":1,"1051":1}}],["repl",{"0":{"147":1},"2":{"26":1,"27":3,"29":1,"31":2,"33":1,"35":2,"134":1,"146":1,"147":1,"167":1}}],["reflects",{"2":{"351":1}}],["reflect",{"2":{"338":1,"1086":1}}],["reflecting",{"2":{"25":1}}],["refused",{"0":{"190":1},"2":{"190":1}}],["refs",{"2":{"152":2}}],["refers",{"2":{"191":1,"258":1}}],["refer",{"2":{"8":1,"13":1,"121":1,"149":1,"156":1,"157":1,"259":1,"263":1,"459":1,"495":1,"496":1,"500":1,"501":1,"502":1,"503":1,"504":1,"507":1,"1079":1,"1131":1,"1139":1}}],["references",{"0":{"201":1,"935":1,"950":1},"2":{"170":2,"248":1,"365":1,"561":1,"895":1,"1023":2}}],["reference",{"0":{"170":1,"202":1,"251":1,"254":1,"256":1,"420":1,"894":1,"1353":1},"1":{"203":1,"204":1,"205":1,"206":1,"207":1,"208":1,"209":1,"210":1,"211":1,"212":1,"213":1,"214":1,"215":1,"216":1,"217":1,"218":1,"219":1,"220":1,"221":1,"222":1,"223":1,"224":1,"225":1,"226":1,"227":1,"228":1,"229":1,"230":1,"231":1,"232":1,"233":1,"234":1,"235":1,"236":1,"237":1,"238":1,"239":1,"240":1,"241":1,"242":1,"243":1,"244":1,"245":1,"246":1,"895":1,"896":1,"897":1,"898":1,"1354":1},"2":{"1":1,"12":1,"27":1,"56":1,"109":1,"115":2,"121":1,"133":1,"170":9,"201":6,"248":1,"250":1,"251":1,"252":1,"255":2,"256":1,"328":1,"336":1,"345":1,"393":1,"398":1,"407":1,"410":1,"444":1,"446":3,"447":4,"561":1,"895":1,"1024":1,"1354":2}}],["require",{"2":{"92":1,"102":1,"106":5,"107":1,"131":1,"172":1,"193":1,"271":4,"280":2,"289":1,"308":1,"309":2,"357":1,"376":2,"421":1,"651":1,"655":2,"775":1,"961":1,"1052":5,"1056":3,"1151":2}}],["requires",{"2":{"77":1,"78":1,"115":1,"200":1,"272":2,"360":1,"497":1,"522":1,"523":1,"525":1,"526":1,"651":1,"803":1,"804":3,"820":1,"826":1,"1283":1}}],["requirements",{"2":{"62":1,"172":4}}],["required",{"2":{"18":1,"60":1,"83":2,"95":1,"96":1,"178":1,"271":1,"386":1,"421":1,"480":1,"487":1}}],["requested",{"2":{"172":1,"751":1}}],["request",{"2":{"20":2,"190":1,"387":1,"597":1,"599":1,"1021":1}}],["requests",{"0":{"387":1},"2":{"18":3,"344":1,"387":2}}],["reach",{"2":{"1062":2}}],["reached",{"2":{"442":1,"1062":2}}],["reaches",{"2":{"365":1}}],["reasons",{"2":{"452":1,"484":1}}],["reasonable",{"2":{"275":1}}],["reason",{"2":{"104":1,"265":1,"289":1,"328":1,"386":1,"421":1,"444":1,"758":1,"928":1,"929":1,"934":1,"945":1,"946":1,"949":1}}],["realistic",{"2":{"276":1}}],["reality",{"2":{"272":1}}],["real",{"2":{"67":1,"79":1,"172":1,"248":1,"363":2,"1155":1,"1164":1}}],["readtx1559s",{"2":{"932":1}}],["readlink",{"2":{"802":1}}],["readline",{"2":{"802":2}}],["readdir",{"2":{"802":1}}],["readcallers",{"0":{"980":1},"1":{"981":1,"982":1,"983":1,"984":1},"2":{"770":1,"981":1,"983":4}}],["readfile`",{"2":{"803":2}}],["readfilebinary",{"2":{"802":1}}],["readfile",{"2":{"379":1,"802":1,"804":1,"855":1,"859":1,"864":1,"925":1,"929":1,"931":1,"942":1,"946":1,"947":1}}],["readinput",{"2":{"379":1}}],["reading",{"0":{"379":1},"2":{"475":1,"802":1}}],["reads",{"2":{"192":2,"254":1,"355":1,"632":1,"633":1,"634":2,"802":5,"982":1,"991":2,"992":2,"1038":1,"1364":1}}],["readability",{"2":{"172":1,"313":1,"433":1}}],["readable",{"2":{"67":1,"133":1,"1285":3}}],["readme",{"2":{"35":1,"172":1,"402":2,"926":1,"943":1}}],["read",{"0":{"143":1,"934":1,"949":1,"1362":1},"1":{"1363":1,"1364":1},"2":{"14":1,"18":1,"33":1,"37":2,"45":1,"94":1,"105":1,"143":1,"172":2,"188":1,"249":1,"291":1,"342":1,"355":1,"362":1,"374":1,"379":3,"633":2,"716":1,"723":1,"730":1,"737":1,"744":1,"751":1,"752":2,"758":1,"765":1,"786":1,"798":1,"802":1,"803":3,"804":5,"820":3,"826":3,"842":1,"926":1,"932":2,"934":2,"943":1,"949":2,"991":1,"1033":1,"1087":3,"1130":1,"1138":1,"1271":1,"1363":5,"1393":2}}],["reattain",{"2":{"13":1}}],["res",{"2":{"799":4,"976":2}}],["resort",{"2":{"797":1}}],["resolution",{"2":{"476":1}}],["resolving",{"2":{"393":1,"398":1}}],["resolved",{"2":{"189":1}}],["resolve",{"2":{"188":1,"398":1,"479":1,"614":1,"1023":1}}],["resolves",{"2":{"187":1}}],["resources",{"0":{"66":1},"2":{"170":1,"313":1,"314":1,"316":1}}],["reserialize",{"2":{"1130":1,"1138":1}}],["reserved",{"0":{"1265":1},"2":{"1091":1,"1265":1}}],["researchers",{"2":{"416":1}}],["resembling",{"2":{"178":1}}],["resetting",{"2":{"802":1,"1099":1}}],["resetgasmetering",{"0":{"999":1},"1":{"1000":1,"1001":1},"2":{"770":1,"1000":1}}],["reset`",{"2":{"172":1}}],["resets",{"2":{"35":1,"1001":1}}],["reset",{"2":{"13":2,"172":1}}],["resumed",{"0":{"1090":1,"1092":1},"2":{"1086":2,"1087":2,"1090":2}}],["resumes",{"2":{"1004":1}}],["resumegasmetering",{"0":{"1002":1},"1":{"1003":1,"1004":1},"2":{"770":1,"1003":1}}],["resume`",{"2":{"172":1,"844":1}}],["resume",{"2":{"90":1,"172":5,"844":1,"846":1,"1004":1,"1085":1,"1086":2,"1087":2,"1090":2,"1091":1,"1092":2}}],["results",{"0":{"258":1},"2":{"172":1,"265":1,"271":1,"282":5,"285":1,"302":1,"311":2,"378":1,"387":1,"564":1}}],["resulting",{"2":{"102":1,"308":1,"376":1,"651":1,"1151":1}}],["result",{"2":{"34":1,"45":1,"56":1,"57":1,"85":1,"90":1,"115":1,"172":1,"189":1,"249":2,"254":2,"257":3,"270":1,"283":2,"311":2,"328":1,"347":3,"367":1,"394":1,"467":1,"844":1,"929":1,"946":1,"1023":2,"1052":2,"1151":1,"1270":1}}],["restores",{"2":{"1083":1}}],["restored",{"2":{"1001":1}}],["restart",{"2":{"327":3}}],["restarted",{"2":{"13":1}}],["restriction",{"0":{"517":1,"518":1,"519":1,"520":1,"521":1,"522":1,"523":1,"524":1,"525":1,"526":1},"2":{"517":1}}],["restrictions",{"0":{"507":1,"515":1,"516":1},"1":{"508":1,"509":1,"510":1,"511":1,"512":1,"513":1,"514":1,"515":1,"516":1,"517":2,"518":2,"519":2,"520":2,"521":2,"522":2,"523":2,"524":2,"525":2,"526":2},"2":{"194":1,"471":1,"507":6,"516":1,"517":4}}],["restricts",{"2":{"367":1,"803":1}}],["restrict",{"2":{"257":1,"518":1,"519":1,"520":1,"521":1,"522":1,"523":1,"524":1,"525":1,"526":1}}],["restricted",{"2":{"190":1,"507":1}}],["rest",{"2":{"83":1,"270":1,"307":1,"308":1,"309":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"1116":1}}],["respected",{"2":{"414":1}}],["respective",{"2":{"281":1,"1263":1}}],["respectively",{"2":{"51":1,"106":1,"402":1,"444":1}}],["respond",{"2":{"172":1}}],["responses",{"2":{"386":3,"388":1,"979":1}}],["response",{"2":{"45":1,"95":2,"888":1}}],["responsible",{"2":{"43":1}}],["re",{"2":{"13":1,"34":1,"83":1,"84":1,"87":1,"94":1,"151":1,"154":1,"176":1,"187":1,"188":1,"190":1,"191":1,"196":1,"327":1,"349":3,"375":1,"378":1,"386":1,"387":1,"405":1,"412":1,"421":1,"454":2,"487":1}}],["retains",{"2":{"1090":1}}],["retdata",{"2":{"879":2,"880":3,"883":2,"884":2,"887":2,"888":3}}],["retrieval",{"2":{"165":1}}],["retrieved",{"2":{"342":1}}],["retrieve",{"2":{"132":1,"133":1,"134":1,"142":1,"1023":1}}],["retrieves",{"2":{"13":1,"832":1,"1086":1}}],["retries",{"2":{"18":2}}],["retry",{"2":{"18":3,"291":2}}],["returnresume",{"2":{"1090":1}}],["return",{"2":{"34":2,"35":3,"95":4,"106":1,"148":1,"172":3,"251":1,"260":2,"265":2,"271":1,"279":1,"280":1,"307":3,"308":2,"309":7,"311":2,"314":3,"319":1,"355":4,"379":1,"390":2,"430":2,"431":1,"482":2,"751":1,"752":3,"775":3,"787":2,"798":1,"827":1,"880":1,"924":2,"925":1,"928":1,"931":1,"941":2,"942":1,"945":1,"947":1,"1033":1,"1039":1,"1052":1,"1056":1,"1070":1,"1090":1,"1328":1,"1352":2,"1393":1,"1395":3}}],["returning",{"2":{"17":1,"802":1,"812":1,"816":1,"1055":1}}],["returned",{"2":{"13":1,"14":1,"361":1,"751":1,"787":1,"802":1,"880":1,"884":1,"928":1,"929":1,"945":1,"946":1,"1038":2,"1039":2,"1285":2}}],["returns",{"2":{"13":2,"14":3,"15":2,"34":1,"35":1,"128":1,"148":1,"172":2,"260":2,"271":6,"280":1,"307":2,"311":2,"314":3,"319":2,"355":1,"357":2,"359":3,"379":1,"390":2,"431":2,"632":1,"636":1,"637":1,"641":1,"683":5,"684":1,"688":3,"689":1,"693":3,"706":2,"715":2,"722":2,"729":2,"736":2,"743":2,"750":14,"757":2,"764":2,"775":3,"786":3,"787":2,"796":1,"802":14,"807":5,"811":1,"812":1,"815":1,"816":1,"819":1,"820":1,"825":1,"826":1,"827":1,"831":1,"832":1,"834":2,"840":1,"844":1,"848":1,"849":1,"853":1,"857":1,"862":1,"869":1,"880":1,"884":1,"888":1,"900":1,"904":1,"908":1,"912":1,"916":1,"920":1,"925":2,"937":1,"942":2,"952":1,"968":1,"969":1,"971":3,"976":1,"981":1,"995":1,"996":1,"1021":5,"1031":15,"1039":2,"1050":2,"1052":1,"1054":2,"1056":1,"1070":1,"1081":11,"1082":1,"1085":1,"1090":1,"1106":6,"1119":1,"1120":1,"1145":1,"1146":1,"1270":1,"1272":4,"1281":1,"1285":4,"1291":2,"1292":1,"1295":4,"1305":1,"1308":1,"1309":1,"1316":1,"1330":1,"1339":1,"1343":1,"1352":2,"1356":2,"1357":1,"1363":5,"1371":2,"1395":5,"1398":1,"1401":3}}],["reth",{"2":{"1":1,"3":1,"133":3,"137":1,"141":1,"143":2,"145":2}}],["rs",{"2":{"1":1,"35":3,"83":1,"85":1,"86":1,"88":2,"99":1,"101":1,"152":3,"154":1,"155":2,"156":1,"157":1,"383":1,"384":1,"393":1,"394":1,"407":1,"409":2,"410":1,"432":2}}],["rpcendpoint",{"2":{"978":2}}],["rpcurls",{"2":{"1021":1,"1023":1}}],["rpcurl",{"2":{"388":1,"1021":1,"1023":3}}],["rpc",{"0":{"11":1,"145":1,"387":1,"544":1,"545":1,"546":1,"547":1,"561":1,"596":1,"978":1,"1020":1},"1":{"12":1,"13":1,"14":1,"15":1,"545":1,"546":1,"597":1,"598":1,"599":1,"600":1,"601":1,"602":1,"1021":1,"1022":1,"1023":1,"1024":1},"2":{"1":2,"3":2,"7":1,"13":1,"18":2,"35":3,"43":6,"44":2,"48":1,"56":1,"81":1,"83":3,"84":1,"86":1,"90":2,"92":3,"93":4,"95":2,"129":1,"130":1,"133":8,"137":1,"138":1,"141":2,"143":4,"145":6,"172":16,"184":1,"291":3,"338":3,"339":2,"340":1,"344":9,"345":8,"386":3,"387":8,"388":3,"421":7,"543":1,"544":2,"546":1,"547":4,"548":1,"561":10,"597":2,"598":1,"599":1,"601":2,"602":4,"617":1,"626":1,"630":1,"638":2,"685":2,"690":2,"896":2,"978":3,"1013":2,"1021":2,"1022":3,"1023":8,"1028":1,"1052":1,"1112":1}}],["ux",{"2":{"925":1,"930":1,"942":1,"975":1}}],["u64",{"2":{"536":1}}],["ui",{"2":{"359":1}}],["uint248",{"2":{"1395":3}}],["uint256",{"0":{"697":1,"699":1,"1173":1,"1180":1,"1233":1,"1240":1},"2":{"27":4,"34":4,"43":1,"45":3,"56":1,"62":4,"76":1,"81":5,"85":2,"115":2,"128":7,"130":3,"131":1,"133":2,"148":6,"172":29,"192":16,"197":2,"210":1,"212":1,"214":1,"215":12,"220":2,"222":2,"228":2,"230":2,"232":2,"234":2,"236":2,"238":2,"240":2,"242":2,"243":1,"244":2,"245":1,"246":2,"252":1,"254":1,"257":6,"270":5,"271":13,"272":2,"273":2,"274":3,"275":7,"276":7,"280":5,"307":3,"311":2,"313":3,"314":3,"315":4,"316":3,"317":2,"319":4,"328":3,"336":1,"341":1,"342":1,"344":3,"345":4,"347":1,"356":1,"357":5,"394":1,"431":8,"438":1,"444":1,"445":1,"446":1,"567":1,"613":1,"634":3,"636":1,"638":2,"641":1,"651":2,"654":1,"655":2,"663":1,"665":1,"668":1,"681":2,"683":4,"685":2,"688":4,"690":2,"693":5,"697":3,"698":2,"699":3,"701":1,"703":2,"706":2,"708":2,"711":1,"750":4,"764":2,"765":2,"768":3,"769":4,"775":4,"777":2,"783":5,"787":1,"792":1,"807":7,"809":8,"811":1,"813":2,"815":1,"827":1,"837":1,"838":1,"842":11,"871":3,"876":2,"879":1,"883":1,"885":1,"887":1,"893":4,"927":2,"928":2,"929":5,"932":4,"944":2,"945":2,"946":5,"952":1,"953":1,"954":1,"966":1,"971":1,"975":2,"988":3,"992":3,"995":1,"997":1,"1008":1,"1011":5,"1013":2,"1016":1,"1026":1,"1028":1,"1031":2,"1034":1,"1039":2,"1050":2,"1052":12,"1054":1,"1056":5,"1064":1,"1068":1,"1070":3,"1075":1,"1081":4,"1083":2,"1085":5,"1091":3,"1092":1,"1103":5,"1106":1,"1108":1,"1110":1,"1112":4,"1115":2,"1117":3,"1124":1,"1145":1,"1147":1,"1153":8,"1155":2,"1158":12,"1162":8,"1164":2,"1167":12,"1173":4,"1180":4,"1186":2,"1190":8,"1199":4,"1203":8,"1207":4,"1211":8,"1215":4,"1219":8,"1223":4,"1227":8,"1233":4,"1240":4,"1250":8,"1262":1,"1270":4,"1278":1,"1281":1,"1285":3,"1287":3,"1291":4,"1293":1,"1295":2,"1300":1,"1305":1,"1306":1,"1308":1,"1310":1,"1328":1,"1330":1,"1333":2,"1339":1,"1341":1,"1352":8,"1356":4,"1358":4,"1363":1,"1364":1,"1366":1,"1373":3,"1375":1,"1379":2,"1385":2,"1387":1,"1388":1,"1389":1,"1390":1,"1394":1,"1395":3,"1401":1,"1403":2}}],["uint128",{"2":{"1186":1}}],["uint160",{"2":{"27":1,"76":1,"77":1,"78":1,"697":1,"698":1,"699":1}}],["uints",{"2":{"1186":1}}],["uintasstring",{"2":{"954":2}}],["uint64",{"2":{"307":1,"777":2,"785":6,"787":1,"834":2,"1046":1,"1050":1,"1085":1}}],["uint32",{"2":{"260":2,"706":2,"1308":1}}],["uint",{"2":{"172":1,"185":2,"203":8,"209":1,"210":1,"211":1,"212":1,"213":2,"214":1,"215":60,"219":1,"221":2,"227":1,"229":2,"231":1,"233":2,"235":1,"237":2,"239":1,"241":2,"243":1,"245":1,"254":1,"260":1,"390":2,"421":1,"438":2,"618":1,"634":1,"670":1,"697":1,"698":1,"699":1,"713":1,"734":1,"752":4,"762":1,"768":2,"769":2,"794":1,"837":1,"838":1,"871":1,"889":2,"929":1,"930":2,"946":1,"966":1,"975":1,"979":2,"992":1,"1018":1,"1075":4,"1083":2,"1091":4,"1092":4,"1103":1,"1119":1,"1121":2,"1126":1,"1151":5,"1284":2,"1341":1,"1352":2,"1363":1}}],["uint96",{"2":{"172":4,"257":4}}],["uint48",{"2":{"76":2,"77":2,"78":4}}],["uint8",{"2":{"43":1,"45":1,"271":2,"775":2,"929":2,"946":2,"1050":1,"1054":2,"1056":2,"1057":1,"1075":1,"1186":1,"1310":1}}],["uv",{"2":{"127":1}}],["u",{"2":{"111":1}}],["ubuntu",{"2":{"99":1}}],["utc",{"2":{"685":1,"690":1,"1013":1}}],["utilize",{"2":{"265":1}}],["utilizes",{"2":{"75":1}}],["utility",{"0":{"326":1,"618":1},"2":{"286":1,"680":1,"896":1,"1038":1,"1354":2}}],["utilities",{"0":{"1122":1},"2":{"67":2,"94":2,"170":1,"172":1,"329":1,"384":1,"896":1,"1353":1,"1354":1}}],["utilitarian",{"2":{"26":1,"146":1}}],["utils",{"0":{"1369":1},"2":{"45":4,"126":1,"172":1,"188":2,"252":1,"397":8,"419":1,"473":2,"1056":1,"1354":2}}],["utf8",{"2":{"41":1,"133":1,"613":1,"798":1,"799":1}}],["unwanted",{"2":{"973":1}}],["unnecessary",{"2":{"957":1}}],["unnamed",{"2":{"482":1}}],["unproved",{"0":{"503":1},"2":{"503":1}}],["unsuccessful",{"2":{"1083":4,"1279":1,"1331":1,"1364":1}}],["unsubscribe",{"2":{"12":1}}],["unsafe",{"2":{"421":1,"447":1,"578":1}}],["unzipped",{"2":{"419":1}}],["unfortunately",{"2":{"391":1}}],["unused",{"2":{"371":1,"482":3}}],["unknown",{"2":{"355":1,"428":1,"844":2}}],["until",{"2":{"325":1,"365":1,"403":1,"419":1,"880":1,"884":1,"1074":4}}],["unbounded",{"0":{"275":1},"2":{"275":2,"276":1}}],["unconventional",{"2":{"307":1}}],["uncheckedcall",{"2":{"308":1}}],["unchecked",{"0":{"308":1,"309":1},"2":{"271":2,"308":3,"309":3,"1052":1}}],["uncles",{"2":{"84":1}}],["undefined",{"2":{"355":1}}],["undesired",{"2":{"199":1}}],["underscore",{"0":{"440":1,"441":1},"2":{"421":1,"440":3,"441":3}}],["underscores",{"2":{"384":1,"421":1,"440":3,"441":3}}],["understanding",{"0":{"355":1},"2":{"180":1}}],["understand",{"2":{"56":1,"328":1,"342":1,"368":1,"374":1,"786":2}}],["underflow",{"2":{"334":1,"506":2,"1150":1,"1151":3}}],["underlying",{"2":{"35":2,"497":1,"505":1}}],["under",{"2":{"35":1,"102":1,"187":1,"282":1,"384":3,"390":1,"407":1,"410":2,"419":1,"429":1,"460":1,"507":1,"895":1,"926":1,"929":1,"943":1,"946":1}}],["unordered",{"2":{"929":1,"946":1}}],["unoptimized",{"2":{"199":1}}],["unofficial",{"2":{"97":1}}],["unavailable",{"2":{"392":1}}],["unaccounted",{"2":{"355":1}}],["unauthorized",{"2":{"196":1,"328":3}}],["unable",{"2":{"190":1,"1151":1}}],["unexpectedly",{"2":{"265":1}}],["unexpected",{"2":{"87":1,"197":1,"308":1,"398":1}}],["unlabeled",{"2":{"832":1}}],["unless",{"2":{"172":1,"418":1,"1285":1,"1321":1}}],["unlocked",{"2":{"81":1}}],["unlucky",{"2":{"81":4}}],["unlicensed",{"2":{"27":1,"43":1,"62":1,"76":1,"94":2,"271":1,"775":1,"1056":1}}],["unrelated",{"2":{"783":1,"787":1}}],["unreliable",{"2":{"65":1}}],["unreachable",{"2":{"482":1,"506":1}}],["unrecoverable",{"2":{"31":1,"35":1}}],["universal",{"2":{"407":1,"410":1}}],["unintended",{"2":{"311":1}}],["uninstall",{"2":{"158":1,"411":2}}],["uninstalling",{"0":{"158":1},"2":{"412":1}}],["uninstallfilter",{"2":{"12":1}}],["uniformly",{"2":{"267":1}}],["unit",{"2":{"172":5,"173":1,"257":2,"258":1,"357":1,"364":4,"376":1,"384":5,"391":1,"613":1}}],["units",{"2":{"18":3}}],["uniswap",{"0":{"75":1},"1":{"76":1},"2":{"67":1,"75":1,"77":3,"78":3,"102":1,"264":1,"407":1,"410":1,"419":1,"507":1}}],["uniqueness",{"2":{"65":2}}],["unique",{"2":{"25":2,"341":1,"342":1,"344":1,"345":1}}],["unixtime",{"0":{"1118":1},"1":{"1119":1,"1120":1,"1121":1},"2":{"790":1,"1119":1,"1121":2}}],["unix",{"2":{"17":1,"25":1,"1120":1}}],["uppercase",{"2":{"929":2,"946":2}}],["upcoming",{"2":{"787":1}}],["upon",{"2":{"331":1,"332":1,"944":4,"1354":2,"1384":1}}],["uponly",{"2":{"196":2,"328":7}}],["upload",{"2":{"326":1,"587":1}}],["upwards",{"2":{"187":1}}],["upgraded",{"2":{"248":1}}],["upgradeable",{"2":{"172":2}}],["upgrade",{"2":{"172":1}}],["updating",{"0":{"399":1,"410":1},"2":{"412":1}}],["updated",{"2":{"197":1,"351":1,"1130":1,"1138":1}}],["updates",{"2":{"193":1,"419":1}}],["update`",{"2":{"172":1}}],["update",{"2":{"13":1,"154":2,"172":2,"176":1,"322":1,"327":1,"386":2,"398":1,"399":4,"410":1,"413":1,"702":1,"1012":2}}],["updraftcyfrin",{"2":{"97":1}}],["updraft",{"2":{"97":3}}],["up",{"0":{"76":1},"2":{"8":1,"33":1,"34":1,"40":1,"41":1,"42":1,"51":1,"88":2,"94":1,"95":1,"96":1,"106":1,"107":1,"141":1,"156":1,"161":1,"166":1,"269":1,"329":1,"333":1,"356":1,"364":1,"394":1,"403":1,"426":1,"496":1,"497":1,"660":1,"802":1,"867":1,"1033":1,"1284":2,"1334":1,"1353":1}}],["usr",{"2":{"111":3,"177":1}}],["us",{"2":{"81":1,"86":1,"95":1,"175":1}}],["usable",{"2":{"787":1}}],["usability",{"2":{"67":1}}],["usage",{"0":{"24":1,"34":1,"173":1,"283":1,"342":1,"404":1,"1386":1},"1":{"25":1,"35":1,"1387":1,"1388":1,"1389":1,"1390":1},"2":{"37":1,"172":4,"203":1,"204":1,"215":1,"216":1,"271":1,"275":1,"276":1,"281":2,"282":1,"285":3,"355":6,"387":1,"421":1,"787":2,"807":6,"808":8,"809":4,"931":1,"935":1,"947":1,"957":2,"1004":1,"1117":1,"1317":1,"1351":1,"1386":1}}],["usages",{"2":{"7":1}}],["usually",{"2":{"45":1,"158":1,"187":1,"250":1,"347":1,"925":1,"942":1,"1130":1,"1138":1}}],["using",{"0":{"25":1,"57":1,"88":1,"123":1,"151":1,"157":1,"172":1,"361":1,"362":1,"363":1,"775":1},"1":{"152":1},"2":{"8":1,"35":1,"36":2,"44":2,"54":1,"58":2,"64":1,"65":3,"76":1,"81":4,"82":1,"83":1,"84":1,"85":1,"86":1,"88":1,"89":2,"99":1,"100":1,"101":1,"108":2,"115":1,"116":1,"117":2,"127":1,"128":1,"133":1,"150":1,"151":1,"152":2,"154":2,"157":1,"162":1,"165":1,"171":3,"172":3,"173":1,"177":1,"178":2,"180":1,"184":1,"191":1,"193":1,"194":1,"196":2,"247":1,"249":1,"250":1,"251":5,"254":2,"255":1,"257":1,"262":1,"265":1,"269":2,"270":1,"273":1,"275":1,"276":2,"280":1,"285":1,"307":1,"308":2,"309":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":2,"325":1,"327":2,"328":1,"329":2,"335":1,"346":2,"348":1,"349":1,"352":1,"353":1,"355":1,"356":2,"357":1,"359":2,"362":1,"363":3,"365":1,"376":1,"378":2,"384":2,"387":2,"394":1,"395":1,"399":1,"400":1,"402":2,"403":1,"405":1,"407":1,"409":1,"416":2,"418":1,"419":1,"421":1,"444":1,"452":2,"454":1,"476":1,"496":1,"497":1,"507":1,"655":1,"664":1,"665":1,"681":1,"778":1,"782":1,"787":3,"808":2,"827":1,"880":1,"884":1,"892":2,"894":2,"926":1,"927":1,"931":1,"934":1,"943":1,"944":1,"947":1,"949":1,"976":1,"1022":1,"1033":2,"1039":1,"1052":1,"1056":2,"1069":1,"1070":1,"1285":2,"1296":1,"1301":1,"1351":1,"1353":1,"1392":1}}],["useactor",{"2":{"172":3,"276":2}}],["uses",{"2":{"99":2,"187":1,"248":1,"307":1,"342":1,"356":1,"387":2,"412":1,"478":1,"507":1,"926":1,"929":1,"943":1,"946":1,"1011":2,"1057":1,"1263":1,"1268":1}}],["useful",{"0":{"87":1},"2":{"19":1,"33":1,"35":2,"67":1,"68":1,"74":1,"85":1,"253":1,"254":1,"275":2,"281":1,"313":1,"314":1,"316":1,"334":1,"336":1,"338":1,"359":1,"452":1,"481":1,"578":1,"646":1,"808":1,"812":1,"816":1,"957":1,"1055":1,"1056":1,"1107":1,"1130":1,"1138":1,"1276":1,"1282":1,"1354":1}}],["usertokens",{"2":{"1151":2}}],["userprivatekey",{"2":{"1056":3}}],["userdeposits",{"2":{"172":2}}],["userdoc",{"2":{"62":1}}],["username",{"2":{"158":1,"976":1}}],["user=0xfc2ee3bd619b7cfb2de2c797b96deecbd7f68e46",{"2":{"81":1}}],["user",{"0":{"979":1},"2":{"8":1,"14":1,"20":1,"57":1,"62":1,"80":1,"81":7,"89":1,"95":2,"96":2,"158":5,"172":6,"173":2,"189":1,"192":1,"258":1,"264":1,"271":1,"329":1,"365":1,"425":1,"485":2,"787":2,"788":1,"802":1,"930":2,"972":1,"976":1,"1033":8,"1056":5,"1151":4,"1353":1,"1395":1}}],["userscansupplytokens",{"2":{"384":1}}],["users",{"2":{"3":1,"67":1,"154":1,"158":2,"259":1,"263":1,"328":1,"444":2,"446":1,"447":1,"783":4,"979":1}}],["used",{"2":{"5":1,"7":1,"10":1,"15":1,"17":2,"25":3,"26":1,"45":1,"52":1,"56":1,"65":1,"72":1,"82":1,"84":1,"94":3,"95":1,"96":1,"104":2,"115":1,"123":1,"131":1,"132":1,"197":1,"247":1,"248":1,"249":1,"250":1,"254":2,"258":2,"260":5,"262":1,"266":7,"268":5,"271":1,"272":1,"275":1,"308":1,"345":1,"346":2,"351":1,"352":1,"357":1,"362":1,"363":1,"387":2,"392":1,"394":2,"412":1,"416":1,"421":2,"426":1,"428":2,"474":1,"476":2,"485":1,"495":1,"496":1,"507":1,"547":1,"561":1,"574":4,"601":1,"624":1,"625":1,"628":1,"629":1,"654":1,"702":1,"712":1,"717":1,"724":1,"731":1,"738":1,"745":1,"759":1,"766":1,"787":2,"788":1,"803":1,"807":3,"812":1,"816":1,"876":1,"925":1,"926":1,"942":1,"943":1,"965":1,"972":2,"996":1,"1033":1,"1050":1,"1052":2,"1285":3,"1288":1,"1301":1,"1321":1,"1340":1,"1344":1,"1352":4,"1393":1,"1402":1}}],["use",{"0":{"181":1,"183":1,"186":1,"373":1,"386":1,"388":1,"494":1,"931":1,"947":1,"975":1},"2":{"1":1,"3":1,"8":1,"12":1,"17":1,"24":1,"27":1,"31":1,"35":2,"43":1,"45":3,"48":2,"51":1,"54":1,"57":1,"58":1,"60":1,"61":2,"64":5,"65":2,"69":1,"75":2,"76":2,"77":2,"78":2,"82":1,"83":2,"84":1,"85":4,"86":2,"87":1,"88":1,"92":2,"94":2,"95":1,"104":3,"108":1,"109":1,"115":3,"119":2,"125":1,"138":1,"151":2,"155":1,"172":24,"181":3,"182":1,"183":7,"184":1,"185":2,"186":2,"188":1,"195":1,"197":2,"200":6,"248":1,"252":1,"266":1,"276":2,"282":4,"283":1,"284":1,"285":1,"289":2,"291":1,"329":1,"333":1,"337":4,"340":1,"341":1,"342":1,"349":1,"355":1,"356":3,"357":2,"358":2,"359":1,"361":1,"362":4,"363":2,"367":1,"369":1,"370":1,"371":1,"376":1,"379":1,"383":1,"384":1,"386":1,"388":2,"392":1,"393":1,"394":1,"398":1,"405":1,"409":2,"411":1,"414":2,"415":1,"416":1,"417":1,"418":1,"421":9,"426":1,"438":3,"439":3,"440":1,"441":1,"454":1,"456":1,"476":1,"484":1,"494":1,"529":1,"536":2,"555":1,"570":1,"573":1,"584":1,"623":3,"624":2,"625":4,"627":2,"628":2,"629":5,"712":1,"724":2,"752":4,"775":1,"783":1,"786":1,"788":7,"797":1,"798":2,"809":1,"826":1,"884":1,"894":1,"925":1,"926":1,"927":1,"931":2,"942":1,"943":1,"944":4,"947":2,"965":1,"972":1,"975":1,"979":1,"987":1,"991":1,"997":2,"1033":1,"1051":1,"1052":3,"1081":2,"1117":1,"1271":1,"1284":2,"1310":1,"1337":1,"1392":1,"1393":1}}],["urloralias",{"2":{"683":3,"688":3}}],["url|env",{"2":{"421":1}}],["urldescriptionauthorblockchain",{"2":{"97":1}}],["url=https",{"2":{"172":1}}],["url=",{"2":{"83":1,"93":1}}],["urls",{"0":{"388":1},"2":{"62":1,"190":1,"494":1,"546":1}}],["url",{"0":{"547":1},"2":{"1":3,"3":1,"13":1,"18":6,"35":5,"43":6,"44":2,"45":1,"56":1,"80":1,"83":1,"84":2,"86":2,"90":2,"92":2,"93":1,"95":2,"96":2,"129":2,"130":2,"133":5,"137":1,"138":1,"141":1,"143":2,"145":2,"172":14,"184":4,"190":2,"200":2,"291":8,"325":1,"337":1,"338":6,"339":1,"340":2,"344":9,"345":8,"388":2,"393":1,"396":1,"408":1,"421":2,"426":2,"428":2,"547":3,"601":4,"602":1,"638":2,"685":2,"690":2,"1013":2,"1021":3,"1022":1,"1023":6,"1028":1,"1052":1,"1112":1}}],["nul",{"2":{"1043":2}}],["null",{"2":{"927":2,"944":4}}],["nuking",{"2":{"189":1}}],["num2",{"2":{"634":2,"992":2}}],["num1",{"2":{"634":1,"992":1}}],["numscontract",{"2":{"634":3,"992":3}}],["numleaves",{"2":{"251":1}}],["num",{"2":{"45":3,"307":3,"625":1,"629":1,"1075":7}}],["numerical",{"2":{"35":1,"807":2,"808":1,"809":1}}],["numberuint",{"2":{"928":1,"945":1}}],["numberoftransfers",{"2":{"783":1}}],["numberis42",{"2":{"356":2}}],["number`",{"2":{"344":1,"421":1}}],["numbers",{"2":{"51":1,"384":2,"927":4,"930":1,"931":1,"944":4,"947":1,"1292":1,"1357":1}}],["number",{"0":{"440":1,"534":1},"2":{"1":1,"14":1,"17":2,"18":5,"21":1,"25":3,"40":2,"45":2,"62":1,"84":1,"85":1,"106":4,"107":1,"128":15,"130":7,"133":1,"145":2,"172":4,"184":2,"250":1,"255":1,"262":2,"277":1,"289":1,"291":4,"292":2,"307":1,"328":1,"338":3,"339":2,"342":1,"344":1,"371":1,"375":1,"386":1,"421":17,"435":1,"436":2,"440":3,"446":1,"447":1,"492":2,"505":1,"534":3,"543":1,"555":2,"562":1,"565":1,"570":1,"575":1,"576":1,"582":1,"583":1,"584":1,"589":1,"604":1,"608":1,"620":1,"625":1,"629":1,"650":1,"651":1,"654":1,"684":1,"685":4,"689":1,"690":4,"745":1,"766":1,"787":2,"812":5,"813":1,"885":4,"888":1,"927":1,"928":3,"929":1,"944":3,"945":3,"946":1,"1012":1,"1013":5,"1017":1,"1018":1,"1034":2,"1108":2,"1130":1,"1131":2,"1133":2,"1134":3,"1138":1,"1139":2,"1141":2,"1142":3,"1146":1,"1285":4,"1324":3,"1367":1,"1376":1,"1393":1}}],["nr",{"2":{"117":3}}],["npx",{"2":{"106":2,"107":1,"798":2}}],["npmjs",{"2":{"414":1,"419":1}}],["npm",{"2":{"106":3,"107":1,"251":2,"401":1,"418":1,"798":2}}],["nicely",{"2":{"118":1}}],["nice",{"2":{"85":1}}],["nightly",{"2":{"45":1,"117":2,"151":2,"200":2}}],["narrow",{"2":{"654":1}}],["nascentxyz",{"2":{"365":1}}],["naiveinterest",{"2":{"264":1}}],["naive",{"2":{"264":2}}],["natively",{"2":{"384":1}}],["native",{"0":{"979":1},"2":{"187":2,"403":2}}],["natspec",{"2":{"172":2,"359":3}}],["naming",{"0":{"375":1,"382":1,"384":1},"2":{"172":4,"315":1,"384":3}}],["namehash",{"2":{"614":1}}],["name`",{"2":{"412":1}}],["name2",{"2":{"226":2}}],["name1",{"2":{"226":2}}],["names",{"0":{"559":1},"2":{"131":1,"172":1,"313":2,"314":2,"315":1,"316":1,"317":1,"367":1,"371":1,"384":1,"421":2,"499":1,"542":1,"545":2,"559":3,"929":1,"946":1}}],["namespaced",{"2":{"108":1,"456":1,"1395":1}}],["namespace",{"2":{"13":1,"15":1,"398":2}}],["named",{"0":{"211":1,"213":1,"367":1,"1389":1},"1":{"212":1,"214":1,"1390":1},"2":{"94":1,"106":1,"108":1,"172":1,"203":8,"211":1,"212":1,"213":1,"214":1,"260":3,"279":2,"367":2,"456":2,"507":1,"561":2,"1352":2,"1385":2,"1389":1,"1390":1}}],["name",{"0":{"5":1,"29":1,"294":1,"300":1,"509":1,"591":1,"597":1,"604":1},"2":{"35":6,"43":2,"45":2,"62":5,"70":1,"72":1,"73":1,"76":1,"86":1,"88":1,"99":4,"109":1,"126":1,"172":2,"192":11,"260":2,"262":2,"271":4,"279":2,"282":1,"283":4,"284":3,"285":1,"309":1,"325":1,"339":1,"347":1,"353":2,"373":1,"384":1,"390":2,"392":1,"400":1,"416":2,"421":2,"431":2,"473":1,"484":1,"507":2,"508":3,"509":1,"517":1,"561":1,"572":1,"614":1,"622":1,"624":1,"628":1,"807":23,"808":3,"809":5,"820":1,"822":1,"826":1,"828":1,"929":4,"946":5,"1296":1,"1301":1,"1339":1,"1340":2,"1343":1,"1344":2,"1394":1}}],["navigate",{"2":{"94":1}}],["navigating",{"0":{"38":1,"40":1,"41":1,"42":1,"160":1},"1":{"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1}}],["n",{"2":{"8":2,"486":1,"487":1,"499":1,"500":1,"501":1,"502":2,"503":1,"504":2,"505":2,"506":1,"545":1,"546":1,"798":1,"799":2,"939":4}}],["neither",{"2":{"927":1,"944":1}}],["near",{"2":{"371":1}}],["nestedstructcount",{"2":{"192":2}}],["nestedstructname",{"2":{"192":2}}],["nestedstruct",{"2":{"192":5}}],["nested",{"2":{"192":4,"786":1}}],["necessary",{"2":{"172":1,"272":1,"394":1,"405":1,"413":1,"1296":1,"1301":1}}],["necessitates",{"2":{"115":1}}],["negative",{"2":{"172":1,"364":2,"927":1,"944":1,"1151":1}}],["negatively",{"2":{"3":1}}],["needed",{"2":{"252":1,"257":1,"346":1,"402":1,"414":1,"1285":1}}],["needs",{"2":{"77":1,"78":1,"134":1,"192":1,"357":1,"364":1,"928":1,"945":1,"1033":2,"1130":1,"1138":1}}],["need",{"2":{"45":1,"59":1,"61":1,"83":1,"87":2,"92":1,"93":1,"106":1,"108":1,"115":1,"117":1,"126":1,"151":1,"154":2,"173":1,"179":2,"180":1,"187":1,"197":1,"328":2,"329":1,"334":1,"338":1,"344":1,"345":1,"355":1,"365":1,"379":1,"383":1,"386":2,"403":1,"413":1,"444":1,"452":1,"507":1,"573":1,"788":2,"798":1,"897":1,"929":2,"932":1,"946":2,"1023":1,"1033":1,"1051":1,"1052":1,"1284":1,"1296":1,"1301":1,"1354":1}}],["next",{"2":{"13":1,"14":6,"40":2,"56":1,"61":1,"91":1,"94":2,"95":1,"96":1,"328":1,"334":1,"370":2,"384":1,"453":5,"650":1,"664":1,"782":3,"783":1,"786":1,"787":8,"802":1,"960":5,"1039":1,"1050":2,"1051":1,"1052":2,"1096":1}}],["never",{"2":{"8":2,"94":1,"172":1,"361":1,"363":1,"383":1}}],["newjsonobj",{"2":{"1133":2,"1141":2}}],["newgasprice",{"2":{"1115":1}}],["newvalue",{"2":{"1085":1,"1089":1,"1091":1,"1092":2}}],["newline",{"2":{"798":1}}],["newly",{"2":{"92":1,"197":1,"1087":1}}],["newbalance",{"2":{"701":1,"702":1,"1085":1,"1088":1,"1091":1}}],["newblockfilter",{"2":{"12":1}}],["newtargetedinterface",{"2":{"268":1}}],["newtargetedsender",{"2":{"268":1}}],["newtargetedselector",{"2":{"268":1}}],["newtargetedcontract",{"2":{"268":1}}],["newtargetedartifactselector",{"2":{"268":1}}],["newtargetedartifact",{"2":{"268":1}}],["newexcludedartifact",{"2":{"268":1}}],["newexcludedsender",{"2":{"268":1}}],["newexcludedselector",{"2":{"268":1}}],["newexcludedcontract",{"2":{"268":1}}],["newer",{"2":{"186":1}}],["newowner",{"2":{"102":1,"1284":1}}],["new`",{"2":{"92":1,"172":1}}],["newnumber",{"2":{"62":1,"128":1}}],["newpendingtransactionfilter",{"2":{"12":1}}],["newfilter",{"2":{"12":1}}],["new",{"0":{"136":1,"394":1,"405":1,"414":1,"433":1,"603":1,"608":1,"897":1},"1":{"415":1,"416":1,"604":1,"605":1,"606":1,"607":1,"608":1,"609":1,"610":1},"2":{"8":3,"14":2,"25":1,"44":2,"56":1,"58":1,"65":6,"82":1,"92":1,"94":2,"95":2,"108":1,"128":2,"131":2,"136":1,"172":8,"192":1,"195":1,"249":1,"251":1,"254":2,"257":2,"270":1,"280":1,"328":3,"344":1,"345":5,"352":2,"353":1,"357":1,"358":2,"362":1,"363":1,"378":3,"384":1,"393":2,"394":5,"403":1,"405":1,"414":1,"433":5,"493":1,"496":1,"508":1,"604":2,"605":1,"609":3,"619":1,"650":1,"654":1,"665":1,"681":2,"683":3,"684":1,"685":2,"689":1,"690":2,"694":1,"734":1,"755":1,"775":1,"779":2,"788":1,"799":2,"809":3,"821":1,"876":3,"885":1,"889":2,"897":1,"1008":2,"1039":2,"1047":1,"1052":7,"1056":1,"1070":1,"1075":2,"1086":1,"1088":1,"1091":1,"1092":2,"1096":2,"1130":2,"1133":4,"1138":2,"1141":4,"1283":2}}],["networkid",{"2":{"12":1}}],["networks",{"2":{"5":1,"7":1,"18":1,"57":1,"87":1,"165":1,"166":1,"1284":3}}],["network",{"0":{"184":1},"2":{"1":1,"14":1,"25":3,"35":2,"43":4,"79":1,"106":1,"172":2,"184":1,"289":1,"291":1,"338":1,"384":1,"646":1}}],["nogasmetering",{"0":{"1349":1},"1":{"1350":1,"1351":1,"1352":1},"2":{"1350":1,"1352":1,"1382":1}}],["nominee",{"2":{"609":1}}],["nomicfoundation",{"2":{"106":5,"107":2}}],["normally",{"2":{"787":1}}],["normal",{"2":{"345":1,"376":1,"393":1,"408":1,"1034":2}}],["nor",{"2":{"82":1,"778":1}}],["now",{"2":{"62":1,"85":1,"86":1,"93":1,"94":2,"107":1,"123":1,"249":1,"257":2,"328":1,"329":1,"345":2,"384":1,"394":1,"396":1,"397":1,"403":1,"412":1,"485":1,"775":1,"1052":2,"1117":1,"1283":1}}],["nothing",{"2":{"327":1,"1284":1}}],["notation",{"2":{"927":1,"944":1}}],["notably",{"2":{"257":1}}],["notactivated",{"0":{"191":2},"2":{"355":1}}],["noticed",{"2":{"258":1}}],["notice",{"2":{"27":1,"34":1,"37":1,"355":1,"359":3,"394":1,"842":1,"1395":5}}],["not",{"0":{"48":1,"104":1,"199":1,"417":1},"2":{"12":1,"13":1,"15":1,"24":1,"34":1,"35":2,"43":1,"45":7,"48":2,"54":1,"58":1,"62":1,"82":1,"83":1,"87":2,"90":3,"93":1,"104":1,"106":2,"111":1,"115":2,"131":2,"172":2,"175":1,"177":1,"178":1,"179":1,"185":1,"187":1,"188":1,"191":1,"193":1,"196":1,"198":1,"199":1,"248":1,"251":1,"252":1,"253":2,"257":1,"260":1,"262":1,"265":2,"266":1,"268":1,"270":1,"276":1,"280":1,"282":1,"285":1,"289":3,"308":2,"309":3,"315":1,"325":4,"327":2,"328":6,"329":1,"334":1,"336":1,"342":2,"345":2,"352":1,"355":4,"362":2,"363":1,"364":1,"367":1,"368":1,"374":1,"375":1,"376":1,"377":1,"378":1,"386":2,"387":2,"388":1,"392":1,"408":1,"414":1,"417":2,"418":1,"419":1,"421":10,"433":1,"437":1,"442":1,"446":1,"467":1,"470":1,"476":1,"478":1,"480":2,"485":2,"491":1,"492":1,"494":1,"497":1,"503":1,"506":1,"530":1,"543":1,"550":1,"552":1,"554":1,"555":1,"573":1,"574":2,"655":1,"680":1,"751":1,"754":1,"755":1,"758":2,"775":4,"778":3,"779":1,"782":1,"783":3,"786":4,"787":10,"797":1,"798":4,"802":6,"804":1,"808":3,"822":1,"828":1,"832":1,"876":1,"880":2,"884":2,"892":2,"895":1,"927":1,"929":2,"934":1,"944":1,"946":2,"949":1,"957":1,"960":1,"972":2,"975":1,"1007":1,"1008":1,"1023":1,"1033":2,"1052":1,"1061":1,"1062":3,"1081":4,"1089":2,"1130":1,"1138":1,"1247":1,"1251":1,"1285":4,"1328":1,"1334":1,"1337":1,"1353":1,"1380":1,"1396":1,"1406":1}}],["note",{"2":{"12":1,"37":1,"45":3,"51":1,"58":2,"94":1,"95":1,"101":1,"107":1,"115":1,"117":1,"127":1,"151":1,"187":1,"188":1,"194":1,"197":1,"248":1,"251":1,"262":1,"267":1,"309":1,"327":1,"329":1,"334":1,"335":1,"336":1,"356":2,"368":1,"384":1,"386":1,"491":1,"496":1,"497":1,"506":1,"507":1,"536":1,"573":1,"574":1,"633":2,"646":1,"787":2,"820":1,"826":1,"884":1,"888":1,"894":1,"929":1,"946":1,"957":1,"960":1,"972":1,"991":1,"1042":1,"1056":1,"1074":1,"1081":1,"1090":1,"1091":1,"1130":1,"1134":1,"1138":1,"1142":1,"1351":1,"1353":1}}],["notes",{"0":{"2":1},"1":{"3":1}}],["nonpayable",{"2":{"62":2,"130":2}}],["none",{"2":{"59":1,"62":1,"393":1,"396":1,"407":1,"410":1,"421":16,"473":1,"475":1,"476":1,"477":1,"478":1,"481":1,"482":1,"486":1,"488":1,"547":1,"548":1,"549":1,"550":1,"551":1,"552":1,"553":1,"554":1,"555":1,"557":1,"561":2,"566":1,"574":1,"981":1,"982":1,"983":1}}],["nonces",{"2":{"57":1}}],["nonce",{"2":{"13":1,"15":1,"25":2,"57":1,"65":3,"76":1,"77":1,"78":3,"84":1,"172":4,"378":2,"588":1,"835":1,"837":2,"838":2,"932":1,"1046":1,"1047":3,"1050":3,"1051":1,"1056":5,"1088":1,"1281":1,"1282":1,"1354":1}}],["non",{"0":{"123":1},"2":{"12":1,"34":1,"94":1,"247":1,"272":1,"275":1,"307":1,"311":1,"328":1,"345":1,"387":1,"421":1,"476":1,"751":1,"972":1,"1088":3}}],["no",{"0":{"383":1,"543":1,"550":1,"552":1,"554":1},"2":{"8":1,"17":1,"18":2,"20":2,"25":1,"35":2,"56":2,"82":1,"85":2,"86":2,"95":1,"96":1,"117":2,"131":1,"200":1,"269":1,"272":1,"289":1,"291":1,"325":3,"327":2,"328":2,"339":2,"347":4,"352":1,"365":1,"371":1,"391":1,"394":1,"421":5,"434":2,"497":1,"543":2,"550":3,"552":3,"554":3,"574":1,"601":1,"637":1,"778":2,"783":1,"803":3,"884":2,"925":1,"929":1,"942":1,"946":1,"957":1,"982":1,"1008":1,"1052":4,"1091":1,"1130":1,"1131":1,"1138":1,"1139":1,"1268":1,"1352":6}}],["nodejs",{"2":{"104":1}}],["nodes",{"2":{"25":1,"83":1}}],["nodeinfo",{"2":{"13":1}}],["node",{"0":{"140":1},"2":{"0":1,"5":1,"7":1,"13":2,"15":1,"18":1,"35":1,"83":4,"103":1,"104":2,"134":1,"139":1,"141":1,"166":1,"172":1,"188":11,"252":4,"323":1,"387":2,"398":3,"401":1,"402":1,"473":1}}],["lp",{"2":{"273":1,"274":2}}],["lc7oigyel",{"2":{"133":1}}],["l728",{"2":{"102":1}}],["l4801",{"2":{"102":1}}],["l4241",{"2":{"102":1}}],["l1829",{"2":{"102":1}}],["l10611",{"2":{"102":1}}],["l1071",{"2":{"102":1}}],["l1253",{"2":{"102":1}}],["llamarpc",{"2":{"978":2}}],["llms",{"2":{"171":1}}],["ll",{"2":{"85":1,"86":1,"151":1,"154":2,"327":1,"356":1,"357":1,"363":1,"387":2,"394":1,"573":1}}],["ls",{"2":{"35":3,"326":1}}],["l",{"2":{"35":2,"100":1,"151":1,"394":1,"396":1,"623":1,"627":1}}],["lot",{"2":{"782":1}}],["losing",{"2":{"362":1,"363":1}}],["lost",{"2":{"362":1}}],["loss",{"2":{"309":1,"311":1,"944":1}}],["low",{"2":{"303":1,"308":2,"449":1,"787":5}}],["lowercase",{"2":{"929":2,"946":2}}],["lower",{"2":{"195":1,"786":1}}],["longer",{"2":{"492":1,"783":1,"957":1,"1008":1}}],["longest",{"2":{"198":1}}],["long",{"2":{"262":1,"421":1,"431":1,"438":2,"497":1,"787":1,"957":1}}],["london",{"2":{"17":1,"421":1,"484":1}}],["location",{"2":{"94":1,"190":1,"412":1,"416":1,"476":1,"786":1,"1395":1}}],["located",{"2":{"158":1}}],["locate",{"2":{"94":1}}],["localvariable",{"2":{"315":1}}],["localhost",{"2":{"96":1,"172":1,"546":1,"602":2,"1052":1}}],["locally",{"2":{"10":1,"18":1,"51":1,"83":1,"157":2,"172":1,"386":2,"387":2}}],["local",{"0":{"96":1,"140":1},"2":{"0":1,"5":1,"7":1,"35":3,"48":1,"84":1,"90":2,"94":1,"96":1,"111":3,"113":4,"134":1,"138":1,"139":1,"155":1,"166":1,"172":3,"177":1,"183":1,"187":1,"289":1,"315":2,"342":1,"387":1,"421":1,"456":2,"996":1,"1309":1}}],["locked",{"2":{"155":5}}],["lockupchange",{"2":{"102":1}}],["lock",{"2":{"35":1,"102":2,"188":1,"411":1,"419":1}}],["loosely",{"2":{"778":1,"880":1,"884":1,"888":1,"892":1}}],["loop",{"2":{"33":1}}],["lookup",{"2":{"172":1,"614":1}}],["looking",{"2":{"102":1,"328":1}}],["looks",{"2":{"94":1,"115":1,"254":1,"393":1,"394":1,"402":1,"786":1}}],["look",{"2":{"14":1,"51":1,"62":1,"84":1,"106":1,"107":1,"108":1,"188":1,"270":1,"347":1,"370":1,"417":1,"421":1,"426":1}}],["loader",{"2":{"117":2}}],["loadedaddress",{"2":{"249":1}}],["loaded",{"2":{"35":1,"177":1,"1038":1}}],["loadfixture",{"2":{"106":3}}],["loading",{"2":{"94":1,"117":2}}],["loads",{"2":{"31":1,"93":2,"94":1,"870":1}}],["loadstate",{"2":{"13":1}}],["load",{"0":{"868":1},"1":{"869":1,"870":1,"871":1,"872":1},"2":{"31":1,"35":5,"95":1,"172":1,"371":1,"759":1,"770":1,"869":1,"871":1,"997":1,"1038":1,"1103":1}}],["logaddress",{"2":{"1284":1}}],["logbool",{"2":{"1284":1}}],["logbytes32",{"2":{"1284":1}}],["logbytes2",{"2":{"1284":1}}],["logbytes1",{"2":{"1284":1}}],["logbytes",{"2":{"1075":1,"1284":1}}],["logcompleted",{"2":{"988":3}}],["logtopic12",{"2":{"842":3}}],["logtopic1",{"2":{"842":5}}],["log`",{"2":{"421":1}}],["logint",{"2":{"1284":1}}],["login",{"0":{"416":1},"2":{"414":1,"416":3}}],["logically",{"2":{"382":1}}],["logical",{"2":{"307":1,"421":1,"555":1}}],["logic",{"2":{"35":1,"67":1,"102":1,"117":1,"262":2,"264":1,"265":2,"272":1,"371":1,"391":1,"574":1,"808":1,"846":3,"975":1}}],["log2ceil",{"2":{"253":1}}],["loguint",{"2":{"197":1,"1284":1}}],["log",{"0":{"181":1,"205":1,"209":1,"211":1,"213":1,"1285":1,"1387":1,"1389":1},"1":{"206":1,"210":1,"212":1,"214":1,"1388":1,"1390":1},"2":{"172":7,"179":2,"181":3,"185":1,"197":4,"203":15,"205":1,"206":1,"209":1,"210":1,"211":1,"212":1,"213":1,"214":1,"329":3,"414":1,"634":1,"643":1,"670":1,"677":2,"697":4,"698":4,"699":4,"703":4,"713":1,"774":1,"779":4,"782":2,"786":1,"794":1,"837":1,"838":1,"840":2,"842":3,"871":1,"929":2,"931":1,"932":1,"946":2,"966":1,"988":1,"992":1,"1018":1,"1056":1,"1070":1,"1075":3,"1103":1,"1126":1,"1284":6,"1285":6,"1341":2,"1345":1,"1352":2,"1354":1,"1385":4,"1387":1,"1388":1,"1389":1,"1390":1}}],["logstring",{"2":{"1284":1}}],["logsbooleanthe",{"2":{"446":1}}],["logsbloom",{"2":{"84":1}}],["logs",{"0":{"179":1,"207":1,"331":1,"348":1,"573":1,"1384":1},"1":{"208":1,"1385":1,"1386":1,"1387":1,"1388":1,"1389":1,"1390":1},"2":{"15":1,"35":1,"94":2,"172":3,"179":2,"203":1,"207":1,"208":1,"291":1,"331":1,"348":1,"355":1,"421":2,"444":1,"445":1,"446":2,"469":1,"529":1,"573":4,"617":1,"841":1,"842":1,"929":2,"946":2,"1075":1,"1352":1,"1354":1,"1384":1}}],["logging",{"0":{"203":1,"204":1,"1284":1},"1":{"205":1,"206":1,"207":1,"208":1,"209":1,"210":1,"211":1,"212":1,"213":1,"214":1,"1285":1},"2":{"13":1,"197":1,"202":1,"203":1,"204":1,"262":1,"329":1,"331":1,"356":1,"1353":1,"1354":6,"1384":1}}],["lexicographical",{"2":{"929":1,"946":1}}],["leet",{"2":{"871":3,"1103":3}}],["leetcontract",{"2":{"871":2,"1103":3}}],["ledger",{"2":{"361":2,"623":2,"627":2}}],["led",{"2":{"250":1}}],["leveraging",{"2":{"276":1,"384":1}}],["leveraged",{"2":{"271":1,"272":1}}],["leverage",{"2":{"67":1,"76":1,"265":1}}],["levels",{"2":{"291":1}}],["level",{"0":{"274":1},"2":{"87":1,"97":1,"308":2,"348":5,"421":1,"436":1,"444":1,"529":5,"787":5,"798":1,"1394":2}}],["leak",{"2":{"972":1}}],["leave",{"2":{"361":1,"496":1}}],["leaves",{"2":{"251":5,"254":4}}],["least",{"2":{"180":1,"248":1,"257":1,"387":1,"574":1,"778":1,"779":1,"1051":1}}],["learning",{"2":{"83":1}}],["learn",{"2":{"62":1,"97":1,"105":1,"106":1,"138":1,"141":1,"145":1,"148":1,"151":1,"163":1,"165":1,"169":1,"180":1,"356":1,"365":1,"392":1,"497":1,"895":1}}],["leaderboard",{"2":{"1328":1}}],["leads",{"2":{"1151":1}}],["leading",{"2":{"199":1}}],["lead",{"2":{"8":1,"188":1,"308":1,"309":1,"311":1,"398":1}}],["legacy",{"0":{"197":1,"1186":1,"1246":1},"2":{"48":2,"52":1,"170":1,"193":1,"496":1,"1186":1}}],["left",{"2":{"45":1,"307":2,"1153":4,"1154":1,"1158":4,"1159":2,"1162":4,"1163":1,"1167":4,"1168":2,"1172":2,"1173":2,"1174":2,"1175":2,"1176":2,"1177":2,"1178":2,"1179":2,"1180":2,"1181":2,"1182":2,"1183":2,"1184":2,"1185":2,"1186":2,"1187":1,"1190":4,"1191":2,"1199":4,"1200":1,"1203":4,"1204":2,"1207":4,"1208":1,"1211":4,"1212":2,"1215":4,"1216":1,"1219":4,"1220":2,"1223":4,"1224":1,"1227":4,"1228":2,"1232":2,"1233":2,"1234":2,"1235":2,"1236":2,"1237":2,"1238":2,"1239":2,"1240":2,"1241":2,"1242":2,"1243":2,"1244":2,"1245":2,"1246":2,"1247":1,"1250":4,"1251":2}}],["lesser",{"2":{"215":2,"235":1,"237":1,"239":1,"241":1}}],["less",{"2":{"35":1,"56":1,"87":1,"89":1,"267":1,"319":1,"788":1,"1216":1,"1220":1,"1224":1,"1228":1}}],["lengths",{"2":{"253":1}}],["length",{"0":{"435":1},"2":{"35":3,"172":3,"251":2,"252":2,"253":1,"254":1,"276":1,"392":1,"421":2,"430":1,"431":1,"435":3,"442":1,"734":1,"762":1,"783":2,"842":5,"927":1,"929":1,"944":1,"946":1,"988":1,"1023":1,"1052":3,"1091":2,"1092":3}}],["letter",{"2":{"258":1}}],["lets",{"2":{"81":1,"159":1}}],["let",{"2":{"1":1,"45":1,"56":3,"65":1,"78":1,"80":2,"81":4,"83":1,"84":2,"85":1,"86":2,"91":2,"94":2,"96":1,"108":1,"128":1,"175":1,"192":1,"257":2,"319":1,"328":2,"356":2,"393":1,"394":2,"397":1,"782":1,"821":1,"1034":1,"1052":2,"1083":1,"1131":1,"1139":1,"1394":1,"1395":1}}],["labelled",{"2":{"867":1}}],["labeled",{"2":{"832":1}}],["label",{"0":{"865":1},"1":{"866":1,"867":1},"2":{"832":1,"866":2,"867":3,"1061":1,"1075":2,"1122":1,"1340":2,"1344":2}}],["labels",{"2":{"42":1}}],["lacks",{"2":{"802":1}}],["lang",{"2":{"398":1}}],["language",{"2":{"62":1,"100":1,"168":1,"171":1,"250":1,"254":1}}],["laser",{"2":{"117":6}}],["lastcalla",{"2":{"809":1}}],["lastly",{"2":{"387":1}}],["last",{"2":{"35":2,"36":1,"37":1,"325":1,"328":1,"350":1,"351":1,"384":1,"659":1,"797":1,"807":2,"808":2,"809":1,"842":1,"888":1}}],["lastblock",{"2":{"14":1}}],["larger",{"2":{"327":1,"492":1,"1324":1}}],["large",{"2":{"102":2,"171":1,"172":2,"307":3,"384":2,"944":1}}],["launch",{"0":{"88":1},"2":{"88":1,"147":1}}],["launches",{"2":{"31":1}}],["later",{"2":{"35":1,"94":1,"107":1,"664":1,"996":1,"1069":1,"1095":1}}],["latest",{"2":{"1":1,"8":1,"17":1,"60":1,"83":2,"84":2,"85":1,"86":1,"87":1,"95":2,"96":2,"99":1,"133":1,"141":1,"145":1,"151":2,"154":1,"157":2,"176":1,"197":1,"283":1,"396":1,"399":2,"405":1,"602":4,"683":1,"684":1,"685":1,"689":1,"690":1,"807":1,"842":1}}],["layer",{"2":{"85":1,"272":1,"419":1}}],["layers",{"0":{"9":1},"2":{"7":1}}],["layout",{"0":{"37":1,"123":1,"402":1},"2":{"35":1,"172":1,"188":1,"893":1,"1039":1}}],["literals",{"2":{"307":1,"421":1,"440":1,"441":1,"485":1,"752":1}}],["literal",{"0":{"494":1},"2":{"307":5,"494":1,"788":1}}],["little",{"2":{"95":1}}],["liquidations",{"2":{"265":1}}],["liquidation",{"2":{"265":1}}],["lifecycle",{"2":{"375":1}}],["life",{"2":{"248":1,"492":1,"1351":1}}],["liberally",{"0":{"386":1},"2":{"386":1}}],["libc",{"2":{"178":1}}],["libusb",{"0":{"177":1},"2":{"177":4}}],["libstring",{"2":{"397":2}}],["libs",{"0":{"466":1},"2":{"126":1,"127":1,"172":1,"407":1,"410":1,"421":1,"466":2,"474":1}}],["lib",{"2":{"45":4,"54":1,"104":1,"115":1,"120":2,"123":2,"126":3,"127":2,"172":2,"177":1,"178":1,"188":2,"323":2,"393":2,"394":1,"396":3,"398":11,"399":1,"400":1,"402":4,"421":1,"466":1,"477":1}}],["library",{"0":{"75":1,"252":1,"329":1,"895":1,"1353":1},"1":{"76":1,"330":1,"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"1354":1},"2":{"45":3,"67":1,"75":2,"76":1,"77":4,"78":4,"107":1,"126":1,"170":2,"177":2,"187":1,"201":1,"202":1,"250":1,"251":1,"254":1,"323":1,"328":2,"329":2,"331":1,"332":1,"334":1,"336":4,"356":2,"367":1,"369":1,"394":2,"396":1,"398":1,"421":2,"656":1,"704":1,"709":1,"776":1,"789":1,"823":1,"829":1,"872":1,"894":1,"895":1,"925":1,"926":1,"931":1,"935":1,"942":1,"943":1,"947":1,"950":1,"962":1,"993":1,"998":1,"1076":1,"1104":1,"1127":1,"1298":1,"1303":1,"1353":1,"1354":2,"1384":1,"1392":1}}],["libraries",{"0":{"126":1,"127":1,"330":1,"369":1,"477":1},"1":{"331":1,"332":1,"333":1,"334":1,"335":1,"336":1},"2":{"45":6,"62":1,"76":1,"104":1,"170":1,"172":2,"329":2,"330":1,"398":1,"421":3,"458":2,"466":1,"476":1,"477":4,"517":1,"1354":1}}],["linter",{"0":{"448":1},"1":{"449":1,"450":1,"451":1},"2":{"303":1,"420":1,"448":1,"451":1,"452":1}}],["linted",{"2":{"303":1}}],["linting",{"2":{"172":2,"368":1}}],["lint",{"0":{"299":1},"1":{"300":1,"301":1,"302":1,"303":1,"304":1,"305":1,"306":1,"307":1,"308":1,"309":1,"310":1,"311":1,"312":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"320":1},"2":{"172":11,"300":2,"301":1,"302":2,"303":2,"304":10,"305":2,"307":6,"308":4,"309":5,"311":4,"313":4,"314":4,"315":4,"316":4,"317":4,"319":4,"320":1,"448":1,"449":1,"450":2,"451":1,"452":5,"454":2}}],["lints",{"0":{"305":1,"450":1},"1":{"306":1,"307":1,"308":1,"309":1,"310":1,"311":1,"312":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1},"2":{"172":4,"302":1,"303":3,"304":1,"305":1,"307":2,"308":2,"309":2,"311":2,"313":2,"314":2,"315":2,"316":2,"317":2,"319":2,"449":1,"450":1,"452":3,"453":4}}],["lint`",{"2":{"172":2}}],["linux",{"2":{"158":1,"178":1,"187":1,"189":1,"497":2}}],["linkpath",{"2":{"802":1}}],["links",{"2":{"426":1,"802":1}}],["link",{"0":{"408":1},"2":{"408":2,"409":1,"421":1,"477":1,"802":3}}],["linking`",{"2":{"172":1}}],["linking",{"0":{"102":1},"2":{"102":6,"172":7}}],["linked",{"2":{"45":3}}],["line2",{"2":{"804":2}}],["line1",{"2":{"804":2}}],["linenext",{"2":{"453":1}}],["linecurrent",{"2":{"453":1}}],["linedisables",{"2":{"453":2}}],["liner",{"2":{"342":1}}],["lines",{"0":{"433":1},"2":{"93":1,"370":1,"421":1,"430":2,"431":1,"432":1,"433":9}}],["line",{"0":{"430":1,"435":1,"444":1,"446":1,"447":1},"1":{"445":1,"446":1,"447":1},"2":{"18":3,"55":1,"94":2,"122":1,"123":2,"132":2,"135":1,"142":1,"158":1,"159":1,"165":1,"168":1,"259":1,"263":1,"370":2,"384":1,"420":1,"421":3,"430":5,"431":6,"433":4,"435":4,"442":1,"444":1,"445":1,"453":3,"454":1,"798":1,"802":3,"804":3,"894":1,"1056":1,"1096":1,"1392":1}}],["license",{"2":{"27":1,"35":1,"43":1,"62":1,"76":1,"94":2,"172":1,"271":1,"307":1,"308":1,"309":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"402":2,"482":2,"775":1,"1052":2,"1056":1}}],["likely",{"2":{"83":1,"189":1,"307":1,"368":1,"786":1}}],["like",{"2":{"8":1,"34":1,"51":1,"62":2,"67":2,"73":1,"83":1,"87":1,"89":2,"92":1,"94":4,"95":1,"106":1,"126":1,"127":1,"185":1,"188":3,"189":1,"190":1,"191":1,"195":1,"196":1,"199":1,"250":1,"253":1,"254":1,"270":1,"282":1,"283":1,"314":1,"355":1,"356":1,"359":1,"363":1,"368":1,"376":1,"382":1,"383":1,"384":1,"386":1,"393":1,"394":2,"396":1,"397":1,"414":1,"473":1,"567":1,"775":1,"787":1,"798":2,"803":1,"976":1,"1051":1,"1151":1,"1284":1,"1285":1,"1318":1}}],["lists",{"2":{"803":1}}],["listed",{"2":{"117":1,"175":1}}],["listen",{"2":{"17":1,"20":1}}],["listens",{"2":{"9":1}}],["listening",{"2":{"1":1}}],["list",{"2":{"7":1,"31":1,"35":4,"44":1,"90":1,"96":2,"170":1,"190":1,"289":1,"323":1,"384":1,"388":1,"392":1,"421":6,"427":2,"443":2,"450":1,"451":2,"452":1,"487":1,"545":1,"546":1,"617":1,"895":1,"920":1,"921":1,"937":1,"938":1,"1088":1}}],["limited",{"2":{"802":2,"944":2,"945":1}}],["limitation",{"2":{"536":1}}],["limitations",{"0":{"131":1},"2":{"928":1,"945":1}}],["limits",{"2":{"387":2,"536":1}}],["limiting",{"2":{"18":1,"89":1}}],["limit",{"0":{"536":1,"557":1,"558":1,"582":1},"2":{"1":1,"14":1,"18":1,"19":5,"20":2,"25":1,"172":3,"292":6,"338":1,"371":1,"393":1,"421":7,"536":5,"557":2,"558":3,"582":1,"788":1,"1001":1}}],["lives",{"2":{"345":1,"384":2,"561":1}}],["live",{"0":{"184":1},"2":{"1":1,"137":1,"141":1,"162":1,"184":1,"384":3,"429":1,"460":1}}],["lt",{"0":{"209":1,"211":1,"213":1},"1":{"210":1,"212":1,"214":1},"2":{"1":1,"3":1,"8":1,"9":1,"17":11,"18":8,"19":6,"20":3,"24":1,"31":4,"34":2,"35":26,"36":2,"40":1,"43":5,"44":1,"45":8,"59":2,"83":1,"85":1,"92":2,"95":15,"96":1,"102":3,"109":2,"115":1,"130":1,"133":2,"158":4,"172":71,"173":2,"183":4,"184":2,"188":3,"209":3,"211":3,"213":3,"219":3,"221":3,"227":3,"229":3,"231":3,"233":3,"235":3,"237":3,"239":3,"241":3,"243":3,"245":3,"252":1,"254":1,"282":3,"283":2,"291":1,"292":2,"307":8,"311":1,"323":2,"338":2,"339":2,"340":2,"355":14,"379":2,"390":1,"392":1,"393":1,"399":1,"400":2,"407":2,"410":2,"428":1,"452":4,"473":2,"477":3,"543":2,"549":1,"550":1,"551":1,"552":1,"553":1,"554":1,"629":7,"651":1,"655":1,"659":4,"734":1,"762":1,"783":1,"842":2,"929":1,"934":1,"946":1,"949":1,"1023":1,"1052":1,"1112":1,"1285":1,"1328":1,"1352":1,"1387":2,"1389":2,"1393":2}}],["smtlib2",{"2":{"504":1}}],["small",{"2":{"319":1,"384":1,"1351":1}}],["smaller",{"2":{"270":1,"384":1,"896":1}}],["smart",{"0":{"172":1},"2":{"5":1,"7":1,"43":2,"44":1,"55":1,"57":1,"82":1,"87":1,"94":3,"97":2,"132":1,"134":1,"135":1,"142":1,"159":1,"162":2,"163":1,"164":1,"168":1,"171":3,"172":3,"264":3,"328":2,"392":1,"395":1,"782":1,"1051":1,"1052":2}}],["square",{"2":{"355":1}}],["sweetness",{"2":{"929":9,"946":12}}],["swiss",{"2":{"132":1,"142":1}}],["switching",{"2":{"345":1}}],["switch",{"2":{"87":1,"117":1,"421":1}}],["swapethfortoken",{"2":{"889":3}}],["swaps",{"2":{"342":3,"1007":1}}],["swap",{"2":{"280":11}}],["swap2",{"2":{"117":1}}],["swap1",{"2":{"117":1}}],["svm",{"2":{"51":1,"187":6}}],["symlinked",{"2":{"188":2}}],["symlinks",{"2":{"188":1}}],["symbolic",{"2":{"277":1,"802":3,"1038":1}}],["symbol",{"2":{"43":2,"271":4}}],["systemaddress",{"2":{"1056":6}}],["systems",{"2":{"157":1,"272":1,"798":1}}],["system",{"2":{"67":1,"75":1,"87":1,"103":1,"127":1,"138":1,"172":2,"262":1,"266":1,"421":1,"455":1,"478":1,"1056":1}}],["syntax",{"2":{"109":1,"367":1,"926":3,"943":3}}],["syncing",{"2":{"12":1}}],["synopsis",{"0":{"6":1,"30":1,"295":1,"301":1,"592":1,"598":1,"605":1},"1":{"31":1,"32":1}}],["src",{"0":{"462":1},"2":{"35":1,"43":3,"45":4,"54":2,"62":3,"76":2,"85":1,"86":1,"94":2,"95":1,"115":1,"117":4,"120":2,"123":1,"126":1,"129":1,"172":7,"192":1,"198":2,"254":2,"283":2,"304":1,"323":1,"367":2,"368":1,"390":2,"393":1,"394":1,"396":1,"397":5,"401":1,"402":3,"421":2,"462":3,"477":1,"497":1,"499":1,"507":2,"517":4,"929":1,"931":1,"932":1,"946":1,"947":1}}],["sleeps",{"2":{"1065":1}}],["sleep",{"0":{"1063":1},"1":{"1064":1,"1065":1,"1066":1},"2":{"609":1,"790":1,"1064":1,"1066":1,"1121":1}}],["slacks",{"0":{"500":1}}],["slates",{"2":{"260":1}}],["slate",{"2":{"260":5}}],["slippage",{"2":{"172":1}}],["slither",{"0":{"115":1},"2":{"35":2,"115":17,"367":1}}],["sload",{"2":{"1038":1}}],["slower",{"2":{"386":1}}],["slow",{"2":{"44":1,"386":1,"654":1}}],["slot1",{"2":{"1083":5}}],["slot0",{"2":{"809":11,"1083":5}}],["slot",{"0":{"1395":1},"2":{"13":1,"335":1,"634":2,"869":1,"870":2,"871":1,"992":2,"1038":2,"1039":1,"1083":2,"1085":1,"1089":4,"1091":1,"1101":1,"1102":2,"1103":1,"1279":1,"1331":1,"1364":1,"1373":2,"1393":3,"1395":5,"1396":1,"1403":1}}],["slots",{"0":{"1315":1},"1":{"1316":1,"1317":1,"1318":1},"2":{"8":1,"13":1,"18":1,"291":1,"496":1,"633":1,"1316":1,"1317":1,"1318":1,"1393":2,"1395":4}}],["sdk",{"2":{"254":1}}],["sd",{"2":{"35":2}}],["satisfy",{"2":{"507":1}}],["satisfying",{"2":{"194":1,"507":1}}],["safer",{"2":{"333":1,"363":1}}],["safebatchtransferfrom",{"2":{"284":2}}],["safetransferfrom",{"2":{"284":2}}],["safetest",{"2":{"257":5}}],["safety",{"2":{"43":1,"253":1,"1354":1}}],["safe",{"2":{"162":1,"172":1,"257":15,"378":5,"787":3,"1395":1}}],["sablierlockup",{"2":{"102":1}}],["salt",{"2":{"58":2,"65":7,"421":2}}],["say",{"2":{"45":1,"257":1,"393":1,"782":1,"1394":1,"1395":1}}],["savings",{"2":{"102":1,"172":1}}],["saving",{"2":{"35":1}}],["saves",{"2":{"352":1,"416":1,"419":1,"1083":1}}],["saved",{"2":{"95":2,"96":2,"353":1,"354":1}}],["save",{"2":{"35":4,"106":2,"107":1,"121":1,"384":1,"416":1}}],["sandbox",{"2":{"33":1}}],["samsczun",{"2":{"364":1,"371":1}}],["samples",{"0":{"570":1,"584":1},"2":{"421":2,"570":1,"584":1}}],["sample",{"2":{"25":1,"75":1,"99":1,"100":1,"101":1,"115":2,"117":1,"378":1,"384":1}}],["same",{"2":{"7":1,"13":2,"18":3,"57":3,"59":1,"62":3,"65":1,"75":1,"86":3,"87":1,"104":1,"106":3,"107":1,"130":1,"131":1,"195":1,"198":1,"248":1,"260":2,"262":2,"264":1,"276":1,"280":1,"282":1,"311":1,"323":1,"325":1,"328":1,"344":1,"346":1,"355":1,"357":1,"363":1,"384":3,"387":1,"398":1,"416":1,"482":1,"507":1,"574":2,"752":1,"778":2,"786":2,"787":1,"820":1,"821":1,"826":1,"893":1,"926":1,"943":1,"1004":1,"1011":2,"1038":1,"1039":2,"1090":1,"1284":1,"1285":1,"1296":1,"1301":1}}],["snip",{"2":{"257":1,"444":1,"445":1,"446":1,"447":1,"1023":1}}],["snippets",{"2":{"33":1,"34":1,"146":1,"432":1,"898":1}}],["snap",{"2":{"282":1}}],["snapshotid",{"2":{"1081":4}}],["snapshotvalue",{"2":{"807":2,"809":3}}],["snapshotgastest",{"2":{"809":10}}],["snapshotgaslastcall",{"2":{"807":2,"809":1}}],["snapshotgas",{"0":{"806":1},"1":{"807":1,"808":1,"809":1},"2":{"285":1,"808":2}}],["snapshot2",{"2":{"283":2}}],["snapshotstatetest",{"2":{"1083":1}}],["snapshotstate",{"0":{"1080":1},"1":{"1081":1,"1082":1,"1083":1},"2":{"1081":1,"1082":1,"1083":1}}],["snapshots",{"0":{"281":1},"1":{"282":1,"283":1},"2":{"172":1,"281":1,"285":11,"808":3,"809":1,"896":1,"1081":2,"1082":2}}],["snapshot`",{"2":{"172":1,"844":1}}],["snapshot",{"2":{"14":4,"200":2,"281":5,"282":5,"283":8,"285":1,"324":1,"807":10,"808":9,"844":2,"896":1,"1081":17,"1082":4,"1083":6}}],["snake",{"0":{"316":1,"317":1},"2":{"172":2,"316":2,"317":2}}],["snekmate",{"2":{"126":5}}],["scientific",{"2":{"927":1,"944":1}}],["scoping",{"2":{"786":1}}],["scope",{"2":{"454":1,"782":1}}],["score",{"2":{"335":1}}],["scanning",{"2":{"421":1,"474":1}}],["scaffold",{"2":{"376":1}}],["scaling",{"2":{"163":1}}],["scheme",{"2":{"250":1}}],["schemes",{"2":{"67":1}}],["schedule",{"2":{"87":1}}],["scheduled",{"2":{"14":3}}],["scenario`",{"2":{"172":1}}],["scenarios",{"2":{"104":1,"172":2,"257":1,"258":2,"265":2,"357":1,"398":1,"444":1}}],["scenario",{"2":{"36":1,"265":1}}],["screamingsnakecaseimmutable",{"2":{"317":1}}],["screamingsnakecaseconstant",{"2":{"316":1}}],["screaming",{"0":{"316":1,"317":1},"2":{"172":2,"316":2,"317":2}}],["screen",{"2":{"151":1,"282":1}}],["scroll",{"2":{"40":2,"41":2,"42":2}}],["scratch",{"2":{"34":2}}],["scriptresume",{"2":{"844":1,"846":1}}],["scriptbroadcast",{"2":{"844":1,"846":1}}],["scriptdryrun",{"2":{"844":1,"846":1}}],["script`",{"2":{"844":1}}],["scriptgroup",{"2":{"844":1}}],["scripting",{"0":{"89":1,"372":1},"1":{"373":1,"374":1,"375":1,"376":1,"377":1,"378":1,"379":1},"2":{"43":1,"89":2,"94":1,"162":1,"172":1,"329":1,"1353":1}}],["scripts",{"0":{"130":1,"376":1,"975":1},"2":{"35":2,"64":1,"89":2,"94":1,"110":1,"115":2,"129":1,"130":2,"131":1,"138":1,"159":1,"162":1,"172":3,"251":2,"361":1,"362":1,"363":1,"375":1,"379":1,"402":1,"421":2,"561":1,"957":1,"972":3,"975":1,"1354":1}}],["script",{"0":{"94":1,"375":1,"464":1,"932":1,"1369":1},"2":{"22":1,"23":1,"35":3,"36":2,"43":1,"44":5,"56":4,"90":4,"94":11,"95":5,"96":5,"100":1,"101":1,"123":1,"129":3,"130":3,"138":2,"162":1,"172":27,"173":1,"200":1,"251":1,"326":1,"329":1,"360":2,"362":4,"363":1,"367":1,"374":2,"376":7,"378":5,"379":3,"391":1,"394":1,"396":1,"402":1,"421":3,"464":4,"798":2,"844":3,"846":3,"932":1,"975":2,"978":1,"1052":6,"1075":1,"1353":3,"1354":3}}],["shr",{"2":{"613":1}}],["shrink",{"0":{"582":1},"2":{"421":2,"582":3}}],["shl",{"2":{"613":1}}],["shipped",{"2":{"328":1}}],["ships",{"2":{"36":1,"55":1,"106":1,"285":1}}],["shifting",{"2":{"307":3}}],["shifted",{"2":{"307":3}}],["shift",{"0":{"307":1},"2":{"172":1,"303":1,"304":1,"307":7}}],["sh",{"2":{"85":1}}],["shouldn",{"2":{"386":1}}],["should",{"2":{"45":1,"51":1,"82":1,"93":2,"95":2,"106":3,"115":2,"172":2,"190":1,"197":2,"198":1,"199":1,"257":1,"260":1,"264":2,"279":1,"309":1,"364":3,"365":4,"371":1,"374":2,"382":2,"384":5,"390":1,"392":1,"416":1,"421":2,"481":2,"486":1,"497":1,"500":1,"547":1,"654":1,"655":1,"782":1,"787":1,"817":1,"957":1,"972":1,"1033":1,"1062":2,"1285":1}}],["showing",{"2":{"348":1,"384":1}}],["shows",{"2":{"82":1,"260":1,"786":1}}],["showcase",{"2":{"67":1}}],["shown",{"2":{"45":1,"272":1,"273":1,"1395":1}}],["show",{"0":{"105":1,"503":1,"556":1,"573":1,"586":1},"2":{"35":1,"39":1,"41":1,"42":1,"67":1,"79":1,"96":1,"102":1,"172":2,"267":1,"421":6,"444":1,"445":1,"446":2,"497":1,"556":2,"573":2,"586":1,"867":1}}],["shorter",{"2":{"1186":1,"1396":1}}],["shortcut",{"2":{"826":1}}],["shorthand",{"2":{"355":1}}],["short",{"2":{"33":1,"202":1,"329":1,"438":1,"492":1,"1353":1}}],["shells",{"2":{"22":1}}],["shell",{"0":{"22":1,"110":1},"1":{"23":1,"111":1,"112":1,"113":1},"2":{"22":3,"23":1,"35":2,"110":1,"158":1,"168":1,"249":1,"972":1,"1042":1}}],["shadowing",{"2":{"482":1}}],["sha",{"2":{"419":1}}],["sharing",{"2":{"410":1}}],["shared",{"0":{"358":1},"2":{"358":1,"875":1}}],["shares",{"2":{"172":8,"271":8,"272":1,"273":3,"274":3,"275":4,"276":2}}],["sharesafter",{"2":{"172":2}}],["sharesbefore",{"2":{"172":4}}],["share",{"2":{"111":3,"113":4,"187":1}}],["shanghai",{"2":{"17":1,"346":1,"355":1,"484":1}}],["sha3uncles",{"2":{"84":1}}],["sha3",{"2":{"12":1}}],["spacing",{"0":{"434":1,"437":1},"2":{"421":1,"434":4,"437":2}}],["spaces",{"2":{"421":2,"436":1,"437":1,"1285":1}}],["space",{"2":{"34":2,"248":1,"434":5,"798":1}}],["sparse",{"0":{"489":1},"2":{"421":1,"489":3}}],["split",{"2":{"90":1,"382":1}}],["spin",{"2":{"33":1}}],["spdx",{"2":{"27":1,"43":1,"76":1,"94":2,"172":1,"271":1,"307":1,"308":1,"309":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"482":1,"775":1,"1052":2,"1056":1}}],["spurious",{"2":{"18":1}}],["spend",{"2":{"1284":1}}],["spender",{"2":{"76":1,"78":3,"172":4}}],["spec",{"2":{"141":1,"927":1,"944":2}}],["specifier",{"2":{"1285":3}}],["specifiers",{"2":{"1285":4}}],["specifies",{"2":{"43":1,"303":2,"309":1,"410":1,"421":1,"449":1,"492":2,"499":1,"501":1,"555":1,"561":1}}],["specified",{"2":{"20":1,"45":3,"64":1,"94":1,"198":1,"200":1,"262":1,"325":8,"339":1,"399":1,"402":1,"410":1,"418":1,"421":7,"478":1,"481":1,"574":1,"625":1,"626":1,"629":1,"630":1,"778":3,"787":6,"875":1,"960":2,"1263":1,"1268":1,"1334":1,"1367":1,"1376":1,"1380":1}}],["specifically",{"2":{"67":1,"172":1,"307":1}}],["specification",{"2":{"15":1,"74":1,"78":1,"248":2}}],["specific",{"0":{"182":1,"183":1,"408":1},"2":{"18":2,"83":1,"151":1,"172":10,"173":1,"183":2,"184":1,"284":1,"291":2,"302":1,"304":2,"327":1,"328":2,"337":1,"342":1,"344":1,"346":1,"347":1,"353":1,"396":1,"399":1,"409":1,"414":1,"432":1,"444":1,"446":1,"447":1,"452":1,"454":1,"459":1,"481":2,"484":1,"517":1,"518":1,"519":1,"521":1,"524":1,"779":2,"782":2,"822":1,"827":1,"828":1,"846":3,"876":1,"880":1,"884":1,"925":1,"942":1,"1008":1,"1033":1,"1285":1}}],["specifying",{"2":{"291":1,"413":1,"507":1,"782":1}}],["specify",{"2":{"18":1,"108":1,"122":1,"282":2,"289":1,"338":1,"387":1,"444":2,"446":1,"447":1,"454":1,"702":1,"707":1,"717":1,"724":1,"731":1,"738":1,"745":1,"752":1,"754":1,"755":1,"759":1,"766":1}}],["specially",{"2":{"328":1}}],["specialized",{"2":{"172":1}}],["special",{"0":{"14":1},"2":{"14":1,"94":1,"356":1,"386":1}}],["speedup",{"2":{"102":1,"172":1}}],["speed",{"2":{"8":1,"94":1,"285":1,"564":1}}],["skipping",{"2":{"782":1}}],["skipped",{"2":{"56":4,"85":1,"86":1,"95":1,"96":1,"257":6,"328":3,"347":7,"394":3,"1061":5,"1062":2}}],["skips",{"2":{"102":1,"1376":1}}],["skip",{"0":{"1059":1,"1374":1},"1":{"1375":1,"1376":1,"1377":1},"2":{"18":1,"115":1,"126":1,"414":2,"782":1,"1060":2,"1061":2,"1062":2,"1127":1,"1375":1,"1377":1,"1382":1}}],["sourness",{"2":{"929":9,"946":12}}],["sourcify",{"2":{"43":1,"45":1}}],["sourced",{"2":{"403":1}}],["sources",{"2":{"54":1,"62":1,"365":1,"377":1,"462":1,"463":1,"464":1,"467":1,"507":1}}],["source",{"0":{"153":1,"176":1},"1":{"154":1,"155":1},"2":{"27":1,"31":1,"35":11,"37":1,"54":1,"62":4,"84":1,"85":2,"86":2,"95":1,"102":1,"112":1,"120":1,"133":1,"178":1,"188":1,"199":1,"200":2,"300":1,"302":1,"303":1,"323":2,"325":2,"327":1,"342":2,"347":1,"355":1,"386":2,"393":2,"409":1,"414":1,"419":1,"421":3,"426":1,"432":1,"438":1,"439":1,"440":1,"441":1,"475":1,"476":2,"482":1,"499":1,"507":2,"517":1,"615":1,"895":1}}],["soccer",{"2":{"609":1}}],["social",{"2":{"609":1}}],["sorts",{"2":{"432":1}}],["sort",{"0":{"432":1},"2":{"282":3,"432":6}}],["sorted",{"2":{"17":1,"21":1,"432":1}}],["sophisticated",{"2":{"271":1,"272":1}}],["so",{"2":{"31":1,"35":3,"45":1,"59":1,"92":2,"94":2,"95":1,"158":1,"178":1,"192":1,"257":3,"307":1,"328":1,"345":1,"351":1,"355":1,"359":1,"360":1,"365":1,"367":1,"377":1,"384":1,"386":4,"387":4,"388":2,"394":1,"396":1,"397":1,"409":1,"419":1,"432":1,"433":1,"655":1,"759":1,"788":2,"798":2,"1130":1,"1131":1,"1134":1,"1138":1,"1139":1,"1142":1,"1151":1,"1272":1,"1351":1}}],["soldeerignore",{"2":{"414":2}}],["soldeer",{"0":{"403":1,"404":1},"1":{"404":1,"405":1,"406":1,"407":1,"408":1,"409":1,"410":1,"411":1,"412":1,"413":1,"414":1,"415":1,"416":1,"417":1},"2":{"403":2,"405":3,"407":5,"408":1,"409":10,"410":3,"411":3,"412":4,"413":1,"414":6,"415":1,"416":5,"417":1,"418":3,"419":8}}],["solady",{"2":{"396":9,"397":12,"399":2,"400":3,"419":1}}],["solar",{"2":{"102":2}}],["sole",{"2":{"276":1}}],["sol`",{"2":{"172":7}}],["solutions",{"2":{"172":1,"378":1,"387":1}}],["solvers",{"0":{"504":1},"2":{"504":1}}],["solver",{"2":{"117":2,"497":1}}],["solve",{"2":{"85":1,"190":1,"277":1}}],["solc`",{"2":{"421":2}}],["solcurity",{"2":{"365":1}}],["solcerror",{"2":{"187":1}}],["solc=",{"2":{"183":1}}],["solc",{"0":{"60":1,"122":1,"187":1,"194":1,"478":1,"479":1},"2":{"51":2,"56":2,"59":2,"60":1,"115":3,"117":4,"122":1,"172":1,"183":10,"187":3,"188":3,"190":1,"193":1,"257":6,"289":8,"347":4,"367":1,"393":1,"394":2,"407":1,"410":1,"421":9,"475":2,"476":1,"478":2,"479":3,"480":3,"518":1}}],["solmate",{"2":{"43":1,"185":1}}],["sol",{"0":{"197":1},"2":{"27":1,"43":4,"44":1,"45":3,"54":4,"56":2,"62":2,"67":1,"75":2,"76":4,"85":1,"86":1,"94":4,"95":4,"96":3,"102":7,"106":3,"115":5,"117":3,"123":1,"128":1,"129":1,"138":1,"172":24,"181":1,"188":3,"189":1,"192":1,"193":1,"197":1,"202":2,"249":1,"251":1,"252":1,"257":4,"282":1,"283":2,"328":3,"329":12,"347":5,"356":6,"365":1,"367":3,"368":1,"375":2,"382":6,"390":3,"393":1,"394":1,"397":3,"402":3,"416":2,"473":2,"477":1,"481":2,"497":1,"499":1,"507":3,"517":2,"702":1,"703":1,"775":1,"820":2,"821":2,"822":2,"826":2,"827":1,"828":2,"846":1,"898":1,"931":1,"935":2,"947":1,"950":1,"1052":1,"1056":1,"1284":1,"1296":2,"1297":1,"1301":2,"1302":1,"1353":12,"1354":4,"1392":1,"1394":2,"1395":2}}],["solidity",{"0":{"89":1,"128":1,"148":1,"183":1,"471":1,"929":1,"946":1},"1":{"472":1,"473":1,"474":1,"475":1,"476":1,"477":1,"478":1,"479":1,"480":1,"481":1,"482":1,"483":1,"484":1,"485":1,"486":1,"487":1,"488":1,"489":1,"490":1,"491":1,"492":1,"493":1,"494":1,"495":1,"496":1,"497":1,"498":1,"499":1,"500":1,"501":1,"502":1,"503":1,"504":1,"505":1,"506":1,"507":1,"508":1,"509":1,"510":1,"511":1,"512":1,"513":1,"514":1,"515":1,"516":1,"517":1,"518":1,"519":1,"520":1,"521":1,"522":1,"523":1,"524":1,"525":1,"526":1},"2":{"26":1,"27":2,"29":1,"33":4,"34":1,"43":3,"45":1,"51":1,"60":1,"62":2,"65":1,"70":1,"72":1,"76":1,"82":2,"84":1,"85":2,"89":5,"94":3,"97":2,"102":1,"106":1,"115":1,"116":1,"118":2,"120":2,"121":3,"122":2,"123":2,"128":1,"130":1,"134":1,"146":2,"159":1,"162":1,"167":1,"172":5,"183":3,"186":1,"192":7,"250":2,"251":1,"252":1,"256":1,"257":1,"271":1,"289":3,"300":1,"302":1,"303":1,"304":1,"307":2,"308":2,"309":1,"311":2,"313":3,"314":2,"315":2,"316":3,"317":1,"319":2,"328":2,"329":1,"334":2,"336":1,"337":1,"341":1,"347":1,"356":2,"358":1,"398":1,"403":1,"420":1,"421":2,"432":1,"444":1,"471":1,"472":1,"473":1,"478":1,"479":1,"482":2,"483":1,"486":1,"487":1,"490":1,"491":2,"495":2,"496":1,"497":3,"500":1,"501":1,"502":1,"503":1,"504":1,"561":1,"775":1,"787":1,"884":1,"898":1,"929":2,"931":1,"946":2,"947":1,"1052":2,"1056":1,"1150":1,"1260":1,"1284":1,"1285":1,"1314":1,"1321":1,"1324":1,"1337":1,"1348":1,"1353":1,"1354":1,"1361":1,"1395":1,"1406":1}}],["somehow",{"2":{"929":1,"946":1}}],["someblasttest",{"2":{"775":1}}],["somecontract",{"2":{"358":6}}],["somewhere",{"2":{"111":1}}],["someone",{"2":{"79":1,"87":1,"328":1,"378":1}}],["something",{"2":{"51":1,"62":1,"95":1,"249":1,"254":1,"267":1,"270":1,"376":1,"922":1,"939":2}}],["sometimes",{"2":{"37":1,"186":1,"265":1,"355":2,"787":1}}],["some",{"2":{"15":1,"81":1,"82":1,"84":1,"92":2,"94":1,"131":1,"157":1,"248":2,"272":1,"285":1,"309":1,"355":3,"365":3,"384":1,"387":1,"393":1,"396":1,"397":1,"398":1,"409":2,"444":1,"507":1,"775":1,"798":1,"842":1,"884":1,"896":1,"928":1,"945":1,"1033":1,"1034":2,"1056":1,"1130":1,"1138":1,"1151":1,"1265":1,"1271":1,"1310":1,"1334":1,"1351":2,"1380":1,"1395":1}}],["soon",{"2":{"8":1,"356":1}}],["stereo",{"2":{"609":1}}],["step",{"2":{"37":1,"40":2,"90":3,"107":1,"377":1,"660":1,"1051":1,"1052":2,"1090":2}}],["steps",{"2":{"12":1,"17":2,"82":1,"99":1,"417":1,"496":3,"659":1,"782":1}}],["stick",{"2":{"373":1}}],["still",{"2":{"18":1,"94":1,"95":1,"262":1,"328":1,"342":1,"345":1,"363":1,"377":1,"492":1,"876":1}}],["stuff",{"2":{"356":1}}],["studio",{"2":{"118":1,"154":1}}],["styling",{"2":{"313":1,"434":1}}],["styled",{"2":{"1285":1}}],["style",{"0":{"312":1,"439":1},"1":{"313":1,"314":1,"315":1,"316":1,"317":1},"2":{"17":1,"35":1,"172":2,"179":1,"302":1,"313":1,"314":1,"315":1,"316":1,"329":1,"401":1,"421":4,"430":1,"431":2,"438":1,"439":3,"440":1,"441":1,"1353":1}}],["stdtoml",{"0":{"947":1},"2":{"942":1,"947":3,"950":1}}],["stdjson",{"0":{"931":1},"2":{"925":1,"931":3,"935":1}}],["stdutils",{"2":{"703":1}}],["stdcheats",{"2":{"702":1,"935":1}}],["stdchains",{"2":{"388":2}}],["stdin",{"2":{"601":1}}],["std~1",{"2":{"409":2}}],["stdmath",{"2":{"336":2,"1147":1,"1293":1,"1358":2}}],["stdstore",{"2":{"335":2,"1318":1,"1373":2,"1392":1,"1394":1,"1395":1,"1403":1}}],["stdstorage",{"2":{"335":3,"1278":5,"1305":2,"1316":2,"1330":1,"1363":5,"1371":4,"1392":4,"1398":2,"1401":6}}],["stderror",{"2":{"334":2,"356":5,"1149":1,"1151":2,"1259":1,"1313":1,"1320":1,"1323":1,"1336":1,"1347":1,"1360":1,"1405":1}}],["stdout",{"2":{"251":1}}],["std",{"0":{"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"1354":1,"1381":1,"1382":1,"1383":1,"1384":1,"1391":1,"1392":1},"1":{"1385":1,"1386":1,"1387":1,"1388":1,"1389":1,"1390":1,"1393":1,"1394":1,"1395":1,"1396":1},"2":{"27":1,"62":2,"76":1,"94":4,"107":1,"117":2,"123":1,"128":2,"129":1,"172":2,"181":3,"185":1,"197":1,"202":2,"249":1,"257":1,"268":1,"275":1,"276":1,"328":2,"329":8,"330":1,"331":1,"332":1,"333":2,"334":2,"335":2,"336":1,"356":5,"367":1,"384":1,"388":1,"393":5,"397":4,"402":1,"405":1,"407":1,"409":2,"410":1,"775":1,"789":1,"803":1,"846":1,"872":1,"895":2,"925":1,"930":1,"931":1,"942":1,"947":1,"993":1,"1104":1,"1284":1,"1353":8,"1354":8,"1384":1,"1392":4}}],["straightforward",{"2":{"392":1}}],["strategies",{"2":{"162":1}}],["strategy",{"2":{"101":1,"337":1}}],["strongly",{"2":{"95":1,"152":1}}],["strip",{"2":{"485":1}}],["strict",{"2":{"478":1}}],["strictly",{"2":{"83":1,"778":2,"808":1,"880":1,"884":1,"888":1,"892":1,"1208":1,"1212":1,"1224":1,"1228":1}}],["stringaddress",{"2":{"1108":2}}],["stringbytes",{"2":{"1108":2}}],["stringnumber",{"2":{"1108":2}}],["stringuint",{"2":{"928":1,"945":1}}],["stringified",{"2":{"928":1,"945":1,"1032":1,"1034":1,"1130":1,"1138":1}}],["stringifiedvalue",{"2":{"900":1,"904":1,"908":1,"912":1,"916":1,"952":1}}],["stringtouint",{"2":{"954":1}}],["stringtoint",{"2":{"918":1}}],["stringtobytes32",{"2":{"914":1}}],["stringtobytes",{"2":{"910":1}}],["stringtobool",{"2":{"906":1}}],["stringtoaddress",{"2":{"902":1}}],["strings2",{"2":{"251":1}}],["strings",{"0":{"485":1},"2":{"70":2,"268":2,"289":2,"421":2,"427":1,"443":1,"449":1,"450":1,"451":1,"466":1,"473":1,"475":1,"476":1,"477":1,"481":1,"482":1,"485":6,"486":1,"487":1,"502":1,"504":1,"506":1,"542":1,"545":1,"798":1,"842":1,"925":1,"929":1,"942":1,"944":2,"946":1,"1107":1}}],["string",{"0":{"47":1,"698":1,"699":1,"1177":1,"1184":1,"1237":1,"1244":1},"2":{"13":2,"43":2,"45":4,"47":1,"51":1,"72":2,"73":1,"74":1,"77":3,"78":3,"172":3,"185":1,"192":5,"203":13,"205":1,"209":1,"211":2,"213":1,"215":32,"226":2,"246":1,"249":2,"251":3,"254":2,"268":4,"271":4,"344":2,"345":2,"379":11,"384":2,"423":1,"424":1,"425":1,"426":1,"431":1,"438":1,"439":1,"440":1,"441":1,"462":1,"463":1,"464":1,"465":1,"468":1,"469":1,"478":1,"484":1,"485":1,"488":1,"496":1,"501":1,"509":1,"511":1,"514":1,"518":1,"520":1,"524":1,"525":1,"526":1,"531":1,"532":1,"533":1,"536":3,"539":1,"545":1,"546":1,"547":1,"548":1,"566":1,"571":1,"572":1,"585":1,"613":2,"658":2,"683":3,"688":3,"693":2,"697":1,"698":1,"699":1,"706":3,"708":2,"715":3,"719":1,"720":2,"722":3,"726":1,"727":2,"736":3,"740":1,"741":2,"743":3,"747":1,"748":2,"750":25,"752":2,"757":5,"758":3,"759":1,"761":5,"762":6,"764":3,"768":1,"769":2,"788":2,"796":1,"798":2,"799":9,"802":19,"804":9,"807":12,"819":1,"825":1,"831":1,"842":6,"853":3,"854":1,"855":2,"857":2,"859":2,"862":3,"863":1,"864":2,"866":1,"876":1,"900":1,"901":1,"902":1,"904":1,"905":1,"906":1,"908":1,"909":1,"910":1,"912":1,"913":1,"914":1,"916":1,"917":1,"918":1,"920":4,"921":1,"922":6,"924":3,"925":1,"927":5,"928":1,"929":9,"931":6,"932":7,"937":4,"938":1,"939":6,"941":3,"942":1,"944":8,"945":1,"946":9,"947":6,"952":1,"953":1,"954":1,"968":1,"971":5,"976":2,"978":1,"979":1,"988":1,"997":1,"1008":1,"1021":5,"1023":5,"1031":47,"1033":2,"1034":6,"1041":2,"1044":2,"1052":1,"1056":2,"1070":1,"1106":6,"1107":2,"1108":3,"1129":5,"1133":4,"1134":3,"1137":5,"1141":4,"1142":3,"1153":2,"1154":1,"1158":2,"1159":2,"1162":2,"1163":1,"1167":2,"1168":2,"1172":1,"1173":1,"1174":1,"1175":1,"1176":1,"1177":5,"1178":1,"1179":1,"1180":1,"1181":1,"1182":1,"1183":1,"1184":5,"1185":1,"1186":1,"1187":1,"1190":2,"1191":2,"1194":1,"1195":1,"1199":2,"1200":1,"1203":2,"1204":2,"1207":2,"1208":1,"1211":2,"1212":2,"1215":2,"1216":1,"1219":2,"1220":2,"1223":2,"1224":1,"1227":2,"1228":2,"1232":1,"1233":1,"1234":1,"1235":1,"1236":1,"1237":5,"1238":1,"1239":1,"1240":1,"1241":1,"1242":1,"1243":1,"1244":5,"1245":1,"1246":1,"1247":1,"1250":2,"1251":2,"1254":1,"1255":1,"1284":2,"1285":13,"1295":4,"1300":3,"1308":1,"1310":2,"1326":1,"1339":1,"1343":1,"1371":1,"1385":2,"1389":1,"1394":1}}],["structure",{"2":{"104":1,"172":3,"173":1,"328":1,"359":1,"387":1,"402":3,"929":1,"946":1}}],["structures",{"2":{"75":1}}],["structured",{"2":{"67":1,"171":1,"172":1}}],["structhash",{"0":{"78":1},"2":{"73":1,"74":1,"78":11,"172":4}}],["structs",{"0":{"929":1,"946":1},"2":{"69":1,"70":1,"72":1,"76":1,"77":1,"78":1,"172":1,"192":5,"314":1,"929":2,"932":1,"946":2}}],["struct",{"0":{"192":1,"313":1},"2":{"34":2,"72":1,"73":3,"76":3,"172":1,"174":1,"192":10,"280":3,"313":7,"453":1,"693":1,"694":1,"695":1,"840":1,"929":13,"930":5,"931":2,"932":3,"946":13,"947":2,"1050":1,"1052":1,"1083":1,"1085":3,"1306":1,"1393":1,"1394":1,"1395":7}}],["structlogs",{"2":{"12":1}}],["storing",{"2":{"875":1}}],["stores",{"2":{"996":1,"1102":1}}],["store",{"0":{"1100":1},"1":{"1101":1,"1102":1,"1103":1,"1104":1},"2":{"34":1,"355":1,"361":1,"362":1,"392":1,"412":1,"770":1,"1083":9,"1101":1,"1103":1,"1151":1,"1309":1,"1395":2}}],["stored",{"0":{"407":1,"408":1,"409":1},"2":{"31":1,"35":3,"94":1,"328":1,"401":2,"402":1,"421":1,"876":1,"1008":1}}],["storageaccesses",{"2":{"1085":1,"1088":1,"1090":1,"1091":7,"1092":10}}],["storageaccess",{"0":{"1089":1},"2":{"1085":2,"1086":2,"1089":2}}],["storagelayout",{"2":{"289":2,"393":1}}],["storage",{"0":{"335":1,"345":1,"543":1,"544":1,"545":1,"546":1,"568":1,"580":1,"1091":1,"1392":1},"1":{"545":1,"546":1,"1393":1,"1394":1,"1395":1,"1396":1},"2":{"13":2,"18":2,"260":1,"271":1,"279":1,"291":2,"335":4,"339":3,"342":2,"344":1,"345":2,"393":1,"421":5,"482":1,"543":2,"544":1,"568":2,"580":3,"588":1,"633":1,"680":2,"681":1,"870":1,"872":1,"875":1,"876":1,"893":1,"991":1,"993":1,"1008":1,"1038":3,"1039":2,"1083":2,"1086":2,"1088":1,"1089":5,"1090":1,"1102":1,"1104":1,"1278":5,"1279":1,"1305":2,"1316":2,"1317":1,"1321":1,"1330":1,"1331":1,"1354":2,"1363":5,"1364":1,"1371":4,"1388":1,"1390":1,"1392":4,"1393":3,"1395":7,"1398":2,"1401":6}}],["stopandreturnstatediff",{"0":{"1084":1},"1":{"1085":1,"1086":1,"1087":1,"1088":1,"1089":1,"1090":1,"1091":1,"1092":1},"2":{"770":1,"1075":1,"1079":1,"1085":1,"1091":1,"1092":1}}],["stopping",{"2":{"483":1}}],["stopprank",{"0":{"1097":1},"1":{"1098":1,"1099":1},"2":{"172":2,"276":1,"770":1,"1056":2,"1074":4,"1098":1,"1276":1}}],["stop",{"2":{"95":1,"325":1,"362":1,"376":2,"807":3,"808":1}}],["stopbroadcast",{"0":{"1093":1},"1":{"1094":1,"1095":1,"1096":1},"2":{"44":2,"94":1,"95":1,"172":2,"378":1,"666":1,"770":1,"997":2,"1070":2,"1071":1,"1094":1,"1096":1,"1310":2}}],["stopsnapshotgas",{"2":{"807":3,"809":8}}],["stops",{"2":{"13":1,"1095":1,"1099":1,"1276":1}}],["stopimpersonatingaccount",{"2":{"13":1}}],["stages",{"2":{"396":1}}],["stands",{"2":{"355":2}}],["stand",{"2":{"342":1}}],["standalone",{"0":{"109":1},"2":{"109":4,"342":1}}],["standardinput",{"2":{"254":2}}],["standardized",{"0":{"254":1},"2":{"254":2}}],["standards",{"2":{"162":1,"172":3}}],["standard",{"0":{"12":1,"123":1,"329":1,"330":1,"895":1,"1353":1},"1":{"330":1,"331":2,"332":2,"333":2,"334":2,"335":2,"336":2,"1354":1},"2":{"12":2,"67":2,"75":1,"87":1,"170":2,"172":1,"201":1,"202":1,"254":3,"262":1,"309":1,"314":1,"316":1,"328":2,"329":2,"330":1,"336":2,"356":2,"384":1,"394":1,"654":1,"656":1,"704":1,"709":1,"776":1,"789":1,"823":1,"829":1,"872":1,"894":1,"895":2,"962":1,"993":1,"998":1,"1076":1,"1104":1,"1127":1,"1284":1,"1298":1,"1303":1,"1353":1}}],["stable",{"2":{"99":1,"151":1,"152":2,"154":2,"176":3,"200":1,"787":2}}],["stay",{"2":{"63":1}}],["stays",{"2":{"59":1,"431":1}}],["stack",{"0":{"42":1},"2":{"35":6,"37":4,"42":3,"271":1,"348":3,"496":2,"529":3}}],["stackdump",{"2":{"35":2}}],["statistics",{"2":{"117":1}}],["static",{"0":{"114":1},"1":{"115":1,"116":1,"117":1},"2":{"90":1,"168":1,"187":1,"960":1,"1372":1,"1393":1}}],["staticcall",{"2":{"40":1,"130":2,"308":1,"1085":1,"1087":3}}],["status",{"0":{"861":1,"1274":1},"2":{"14":2,"45":1,"95":2,"363":1,"787":4,"850":1,"1008":1}}],["statecall",{"2":{"1090":1}}],["stateless",{"2":{"357":1,"826":1,"827":2}}],["statevariable",{"2":{"315":1}}],["states",{"2":{"262":1,"264":1,"265":1}}],["statemutability",{"2":{"62":3,"192":2}}],["statement",{"0":{"430":1},"2":{"34":1,"35":1,"271":1,"308":1,"430":6,"446":1,"447":1}}],["statements",{"2":{"34":4,"35":1,"376":1,"432":4,"444":2}}],["stateroot",{"2":{"25":2,"84":1}}],["state",{"0":{"141":1,"1091":1},"2":{"13":4,"14":2,"18":5,"25":3,"34":3,"35":9,"90":1,"137":1,"141":2,"162":1,"172":9,"262":2,"272":1,"274":2,"291":4,"309":1,"315":2,"328":1,"342":2,"357":3,"364":1,"376":2,"378":1,"421":1,"809":2,"875":2,"894":1,"896":4,"1027":1,"1075":1,"1079":2,"1081":3,"1082":3,"1083":3,"1086":5,"1088":1,"1089":1,"1090":3,"1110":2,"1111":1}}],["starthoax",{"0":{"1378":1},"1":{"1379":1,"1380":1},"2":{"704":1,"1076":1,"1379":4,"1382":1}}],["starter",{"2":{"394":1}}],["started",{"0":{"1":1,"27":1,"56":1,"58":1,"80":1,"91":1,"133":1,"134":1,"161":1},"1":{"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1},"2":{"57":1,"58":1,"161":1,"327":1,"329":1,"352":1,"353":1,"403":1,"1099":1,"1354":1}}],["startprank",{"0":{"1072":1},"1":{"1073":1,"1074":1,"1075":1,"1076":1},"2":{"172":2,"276":1,"329":1,"770":1,"982":1,"984":1,"1056":2,"1073":4,"1074":4,"1075":1,"1099":2,"1276":1,"1354":1}}],["startbroadcast",{"0":{"1067":1},"1":{"1068":1,"1069":1,"1070":1,"1071":1},"2":{"44":2,"90":1,"94":3,"95":1,"130":2,"131":2,"172":2,"378":1,"666":1,"770":1,"982":1,"984":1,"997":2,"1068":3,"1070":2,"1096":1,"1310":2}}],["start",{"0":{"140":1,"147":1},"2":{"18":1,"25":1,"27":1,"80":1,"82":1,"83":1,"84":1,"95":2,"96":1,"116":1,"140":1,"172":1,"257":1,"270":2,"354":1,"370":1,"394":1,"419":1,"433":1,"453":2,"454":1,"650":1,"654":1,"807":5,"808":1,"842":1,"987":1,"991":1,"997":2,"1086":1,"1107":1,"1121":2,"1310":2,"1352":4,"1380":1}}],["startsnapshotgas",{"2":{"807":2,"809":8}}],["startstatediffrecording",{"0":{"1077":1},"1":{"1078":1,"1079":1},"2":{"770":1,"1075":1,"1078":1,"1086":2,"1091":1,"1092":1}}],["starts",{"2":{"17":1,"347":1,"402":1,"745":1,"766":1,"927":2,"944":2}}],["startup",{"2":{"17":2}}],["starting",{"2":{"3":1,"18":1,"76":1,"117":1,"291":1,"507":1,"778":1,"880":1,"884":1,"1131":1,"1139":1,"1276":1}}],["segment",{"2":{"609":1}}],["segregation",{"2":{"87":1}}],["semantically",{"2":{"1033":1}}],["semver",{"2":{"478":1,"518":1}}],["semi",{"2":{"34":1}}],["severities",{"2":{"449":2}}],["severity",{"0":{"306":1,"310":1,"449":1},"1":{"307":1,"308":1,"309":1,"311":1},"2":{"172":6,"302":1,"303":4,"304":3,"305":1,"449":2}}],["several",{"2":{"71":1,"192":1,"193":1,"352":1,"495":1,"507":1,"508":1,"517":1,"787":1}}],["separate",{"2":{"289":1,"363":1,"421":2,"433":1,"717":1,"724":1,"731":1,"738":1,"745":1,"759":1,"766":1,"1052":1}}],["separated",{"0":{"345":1},"2":{"289":1,"323":1,"345":1,"427":1,"432":1,"443":1,"451":1,"452":1,"759":1,"1285":1}}],["separator",{"2":{"126":1,"441":1}}],["sepolia",{"2":{"44":14,"45":2,"86":1,"92":4,"93":5,"95":6,"172":13}}],["sequences",{"2":{"138":1,"262":2,"272":1,"353":1,"782":1}}],["sequence",{"2":{"95":1,"96":1,"262":1,"421":1,"582":1,"782":3}}],["sequentially",{"2":{"90":1}}],["sealfields",{"2":{"84":1}}],["search",{"2":{"81":1,"328":1,"407":1,"487":1,"925":1,"942":1,"1131":1,"1139":1}}],["searchtransactionsafter",{"2":{"15":1}}],["searchtransactionsbefore",{"2":{"15":1}}],["session",{"2":{"31":4,"34":2,"35":29,"37":1}}],["sessions",{"2":{"31":2,"35":8}}],["sense",{"2":{"957":1}}],["sensitive",{"2":{"95":1,"96":1,"414":2}}],["sent",{"2":{"18":1,"664":1,"1069":1}}],["sending",{"2":{"190":1}}],["sendunsignedtransaction",{"2":{"14":1}}],["senderprankaddress",{"2":{"983":4}}],["sender`",{"2":{"421":1}}],["senders",{"2":{"266":2,"268":2}}],["sender",{"0":{"531":1},"2":{"13":1,"15":1,"21":1,"43":1,"65":3,"94":4,"131":1,"257":1,"260":4,"266":1,"271":2,"276":1,"291":1,"309":2,"328":3,"342":1,"345":1,"362":3,"421":1,"531":3,"664":1,"775":1,"827":2,"850":2,"876":1,"960":4,"961":1,"982":1,"1052":2,"1056":1,"1069":1,"1074":4,"1075":2,"1099":1,"1112":5,"1151":7}}],["send",{"0":{"144":1},"2":{"13":1,"81":2,"132":1,"133":2,"134":1,"142":1,"144":2,"172":2,"257":1,"360":1,"361":1,"362":1,"378":2,"617":1,"788":2,"979":1,"1296":1,"1301":1}}],["sendrawtransaction",{"2":{"12":1}}],["sendtransaction",{"2":{"12":1}}],["selectively",{"2":{"787":1}}],["selects",{"2":{"344":1,"496":1,"689":1}}],["selectfork",{"0":{"1025":1},"1":{"1026":1,"1027":1,"1028":1,"1029":1},"2":{"342":5,"344":4,"345":4,"638":2,"639":1,"685":2,"686":1,"691":1,"800":1,"875":1,"876":2,"877":1,"1008":1,"1009":1,"1013":2,"1014":1,"1026":1,"1028":1,"1112":1,"1113":1}}],["select",{"0":{"344":1},"2":{"36":1,"337":1,"342":1,"344":2,"456":1,"690":2,"876":2,"1008":1,"1028":1}}],["selectors",{"2":{"197":1,"266":4,"268":4,"326":1,"421":1,"586":1,"587":1}}],["selector",{"2":{"35":1,"172":2,"196":1,"262":1,"289":2,"328":1,"335":1,"357":3,"779":3,"787":3,"788":5,"881":4,"885":3,"889":2,"892":1,"893":2,"1372":1,"1373":1,"1393":1}}],["selected",{"2":{"8":1,"342":2,"345":1,"875":2}}],["selfdestructed",{"2":{"1087":1,"1088":1}}],["selfdestruct",{"2":{"357":1,"1079":1,"1085":1,"1086":1,"1087":3,"1088":2}}],["self",{"2":{"15":1,"128":3,"375":1,"1278":5,"1305":1,"1316":1,"1330":1,"1363":5,"1371":2,"1398":1,"1401":3}}],["serialization",{"2":{"1034":2,"1130":1,"1133":1,"1138":1,"1141":1}}],["serialize",{"2":{"1033":4}}],["serializes",{"2":{"1032":1,"1033":1}}],["serializestring",{"2":{"1031":2,"1034":2}}],["serializebytes",{"2":{"1031":2}}],["serializebytes32",{"2":{"1031":2}}],["serializebool",{"2":{"1031":2,"1034":1}}],["serializeaddress",{"2":{"1031":2}}],["serializeint",{"2":{"1031":2}}],["serializeuint",{"2":{"1031":2,"1034":1}}],["serializejson",{"0":{"1030":1},"1":{"1031":1,"1032":1,"1033":1,"1034":1,"1035":1},"2":{"1031":1,"1033":1,"1130":1,"1135":1,"1138":1,"1143":1}}],["serialized",{"2":{"70":1,"1033":4,"1130":1,"1138":1}}],["serially",{"2":{"384":1,"929":2,"946":2}}],["series",{"2":{"13":1}}],["serve",{"2":{"256":1,"384":1}}],["serves",{"2":{"25":1}}],["server",{"0":{"20":1},"2":{"9":1,"18":1,"20":1,"48":1,"172":1,"421":1,"547":1}}],["services",{"2":{"88":1}}],["service",{"2":{"24":1,"83":2,"957":1}}],["setenv",{"0":{"1040":1},"1":{"1041":1,"1042":1,"1043":1,"1044":1},"2":{"790":1,"1041":1,"1042":1,"1044":1}}],["setarbitrarystorage",{"0":{"1036":1},"1":{"1037":1,"1038":1,"1039":1},"2":{"1037":1,"1039":2,"1122":1}}],["setapprovalforall",{"2":{"284":2}}],["setautomine",{"2":{"14":1}}],["setowner",{"2":{"102":1,"1039":2}}],["setupstate",{"2":{"383":1}}],["setups",{"0":{"357":1,"358":1},"2":{"94":2,"358":1,"646":1}}],["setup",{"0":{"83":1,"163":1,"269":1,"383":1},"2":{"94":1,"104":1,"128":1,"163":1,"168":2,"172":6,"195":1,"254":1,"257":1,"258":1,"265":1,"266":3,"268":3,"269":2,"270":3,"272":1,"280":1,"291":2,"328":1,"342":2,"344":2,"345":2,"348":2,"356":3,"357":2,"358":2,"383":2,"444":1,"529":2,"754":1,"775":1,"809":3,"885":1,"1052":1,"1056":1,"1083":1,"1276":1}}],["setb",{"2":{"357":3}}],["setblockgaslimit",{"2":{"14":1}}],["setblocktimestampinterval`",{"2":{"172":1}}],["setblocktimestampinterval",{"2":{"14":2}}],["setbalance",{"2":{"13":1}}],["setintervalmining",{"2":{"14":1}}],["setchainid",{"2":{"13":1}}],["setcount",{"2":{"681":3}}],["setcoinbase",{"2":{"13":1}}],["setcode",{"2":{"13":1}}],["setnum",{"2":{"1075":2}}],["setnumber",{"2":{"36":1,"56":1,"62":1,"85":3,"106":2,"115":2,"128":1,"347":1,"394":1}}],["setnextblocktimestamp",{"2":{"14":1}}],["setnextblockbasefeepergas",{"2":{"13":1}}],["setnonce",{"0":{"1045":1},"1":{"1046":1,"1047":1,"1048":1},"2":{"13":1,"770":1,"1046":1,"1048":1}}],["setmingasprice",{"2":{"13":1}}],["setloggingenabled",{"2":{"13":1}}],["setsystemaddress",{"2":{"1056":2}}],["setstorageat",{"2":{"13":1}}],["sets",{"2":{"13":6,"14":3,"18":1,"342":1,"402":1,"500":1,"502":1,"504":1,"505":1,"506":1,"669":1,"676":1,"702":1,"712":1,"773":1,"793":1,"867":1,"960":4,"965":1,"1012":1,"1017":1,"1027":1,"1047":1,"1051":1,"1074":4,"1116":1,"1125":1,"1279":1,"1306":1,"1334":1,"1372":1,"1399":1}}],["setrpcurl",{"2":{"13":1}}],["set",{"2":{"13":2,"17":4,"20":1,"21":1,"24":1,"25":1,"33":1,"35":1,"40":1,"45":4,"83":1,"86":1,"94":1,"102":2,"106":2,"107":1,"125":1,"128":3,"138":1,"144":1,"166":1,"172":2,"179":1,"183":3,"190":1,"191":1,"260":1,"262":2,"266":5,"267":1,"268":11,"269":3,"270":1,"275":1,"276":1,"302":1,"325":2,"328":5,"333":1,"340":1,"342":2,"344":1,"345":3,"346":1,"357":1,"362":1,"397":1,"416":1,"418":1,"421":3,"422":1,"432":1,"448":1,"474":1,"479":1,"480":1,"487":1,"491":1,"493":1,"494":1,"497":1,"507":1,"543":1,"555":1,"573":2,"574":6,"582":1,"604":1,"680":1,"681":1,"754":1,"755":1,"775":1,"778":1,"787":1,"808":6,"820":1,"821":1,"826":1,"827":1,"876":3,"975":1,"982":4,"1008":1,"1013":2,"1042":2,"1051":1,"1278":1,"1334":1,"1380":1,"1393":4,"1394":1,"1395":1}}],["settings",{"0":{"508":1,"515":1},"1":{"509":1,"510":1,"511":1,"512":1,"513":1,"514":1},"2":{"35":1,"45":1,"62":2,"120":1,"121":3,"123":2,"168":1,"172":1,"194":2,"195":1,"421":1,"425":1,"497":2,"507":3,"508":1,"516":1,"521":1,"524":1}}],["setting",{"0":{"76":1},"2":{"8":1,"58":1,"94":1,"95":2,"96":1,"102":1,"156":1,"384":1,"387":1,"421":1,"456":1,"497":1,"510":1,"511":1,"512":1,"513":1,"514":1,"519":1,"521":1,"522":3,"523":3,"524":1,"525":3,"526":3,"650":1,"654":1,"787":1,"803":1,"1288":1}}],["secp256k1",{"2":{"1050":1}}],["secret",{"2":{"972":1}}],["secrets",{"2":{"162":1}}],["securing",{"2":{"416":1}}],["security",{"0":{"364":1},"1":{"365":1},"2":{"67":1,"117":1,"162":2,"171":1,"172":6,"173":1,"308":1,"363":1,"365":1,"416":1,"419":1,"530":1}}],["securely",{"2":{"360":1}}],["secure",{"0":{"371":1},"2":{"162":1,"361":2,"364":1,"365":1,"371":1}}],["second",{"2":{"18":3,"280":1,"386":1,"707":2,"778":1,"782":1,"804":1,"880":1,"884":1,"1050":1}}],["seconds",{"2":{"8":2,"14":2,"17":1,"56":1,"95":1,"172":1,"262":1,"292":1,"327":1,"393":1,"562":1,"973":1,"1066":1,"1121":1,"1367":1,"1376":1}}],["sections",{"0":{"109":1},"2":{"109":2,"285":1,"370":1,"452":1,"459":1,"471":1,"527":1,"786":1,"809":1}}],["section",{"2":{"7":1,"109":2,"204":1,"216":1,"285":4,"305":1,"307":1,"308":1,"309":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"328":1,"342":1,"356":3,"363":1,"364":2,"422":1,"428":1,"429":1,"432":1,"448":1,"460":1,"495":2,"496":1,"497":1,"498":1,"561":1,"563":1,"574":11,"809":2,"895":1,"1386":1}}],["seek",{"2":{"609":1}}],["seeing",{"2":{"371":1}}],["seeduserwithausd",{"2":{"1395":1}}],["seed",{"0":{"566":1},"2":{"361":1,"363":1,"387":3,"566":2,"574":1}}],["seen",{"2":{"276":1,"414":1}}],["seemingly",{"2":{"194":1}}],["see",{"0":{"179":1,"298":1,"320":1,"404":1,"595":1,"610":1,"639":1,"656":1,"661":1,"666":1,"686":1,"691":1,"704":1,"709":1,"776":1,"789":1,"823":1,"829":1,"851":1,"872":1,"877":1,"962":1,"984":1,"993":1,"998":1,"1009":1,"1014":1,"1019":1,"1024":1,"1029":1,"1035":1,"1071":1,"1076":1,"1104":1,"1113":1,"1127":1,"1135":1,"1143":1,"1156":1,"1160":1,"1165":1,"1169":1,"1188":1,"1192":1,"1197":1,"1201":1,"1205":1,"1209":1,"1213":1,"1217":1,"1221":1,"1225":1,"1229":1,"1248":1,"1252":1,"1257":1,"1298":1,"1303":1,"1311":1},"2":{"0":1,"1":1,"26":1,"27":3,"32":1,"42":1,"44":1,"45":1,"55":1,"56":1,"80":1,"84":1,"95":1,"109":1,"115":1,"117":1,"132":1,"133":1,"169":1,"177":1,"179":4,"185":1,"188":1,"189":1,"190":1,"191":1,"192":2,"194":2,"195":2,"196":1,"197":1,"198":1,"203":1,"215":1,"251":1,"253":1,"257":2,"289":2,"291":3,"325":2,"328":3,"336":1,"345":1,"361":1,"363":1,"368":1,"384":1,"386":1,"388":1,"393":1,"396":1,"398":1,"408":1,"419":2,"459":2,"475":1,"476":1,"487":2,"501":1,"561":1,"575":1,"579":1,"580":1,"581":1,"778":3,"782":1,"783":1,"786":1,"787":2,"820":1,"826":1,"880":3,"884":3,"888":1,"892":2,"1131":2,"1139":2,"1351":1,"1354":4}}],["susd",{"2":{"787":2}}],["superset",{"2":{"329":1,"356":1}}],["super",{"2":{"275":1,"276":1}}],["suppress",{"2":{"452":1,"481":1}}],["supposed",{"2":{"782":1}}],["suppose",{"2":{"398":1}}],["supports",{"2":{"94":1,"124":1,"154":1,"183":2,"257":2,"302":1,"337":1,"340":1,"350":1,"355":1,"401":1}}],["support",{"0":{"124":1,"196":1,"197":1},"1":{"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1},"2":{"35":1,"106":1,"118":1,"131":1,"151":1,"168":2,"175":1,"187":1,"193":2,"196":1,"197":1,"277":1,"278":1,"355":1,"402":2,"932":2}}],["supported",{"0":{"9":1,"11":1,"305":1,"453":1,"822":1,"828":1},"1":{"12":1,"13":1,"14":1,"15":1,"306":1,"307":1,"308":1,"309":1,"310":1,"311":1,"312":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1},"2":{"7":2,"9":1,"12":1,"22":1,"35":1,"43":1,"48":1,"116":1,"303":1,"305":1,"370":1,"388":1,"478":1,"695":1,"752":1,"822":1,"828":1,"1285":1}}],["supplied",{"2":{"35":1,"45":1,"485":2}}],["supply`",{"2":{"172":1}}],["supply",{"2":{"35":2,"133":1,"264":1,"271":3,"384":4,"392":1,"1288":1}}],["suggested",{"2":{"193":1,"362":1}}],["sum1",{"2":{"384":1}}],["sums",{"2":{"280":4}}],["sumdeposits",{"2":{"276":1}}],["summing",{"2":{"273":1}}],["summarized",{"2":{"258":1}}],["summary",{"2":{"14":1,"348":1,"432":1,"433":1,"1061":1}}],["sumbalanceof",{"2":{"264":1,"273":2,"274":1,"275":2,"276":1}}],["sum",{"2":{"172":1,"264":1,"271":1,"280":1,"359":3,"384":1,"392":1,"618":1}}],["suffix",{"2":{"172":2,"327":1,"412":1}}],["suffice",{"2":{"134":1}}],["sufficient",{"2":{"25":1,"172":1}}],["sudo",{"2":{"111":3}}],["surround",{"2":{"1285":1}}],["surface",{"2":{"77":1,"78":1}}],["sure",{"2":{"14":1,"45":1,"47":1,"49":1,"50":1,"59":1,"62":1,"63":1,"91":1,"107":1,"158":1,"172":1,"176":1,"191":1,"257":1,"260":2,"328":2,"356":1,"365":1,"378":1,"387":1,"414":1,"416":1,"798":3,"931":1,"934":1,"947":1,"949":1}}],["succeeds",{"2":{"787":2}}],["succeed",{"2":{"345":1}}],["succeeded",{"2":{"90":2,"152":1,"787":2}}],["successtwo",{"2":{"1075":1}}],["success",{"2":{"43":1,"95":1,"96":1,"172":1,"218":2,"271":2,"308":6,"309":3,"786":1,"1052":2,"1081":3,"1151":4,"1256":2,"1268":1}}],["successfully",{"2":{"45":1,"56":1,"85":1,"92":1,"95":3,"96":1,"117":1,"190":1,"609":1,"1052":2,"1081":3}}],["successful",{"2":{"35":1,"36":1,"56":1,"95":1,"96":1,"257":3,"272":2,"275":1,"347":2,"351":1,"393":1,"394":1,"1284":1}}],["succinct",{"2":{"83":1}}],["such",{"2":{"3":1,"15":1,"25":1,"54":1,"115":1,"130":1,"138":1,"141":1,"151":1,"187":1,"268":1,"275":1,"282":1,"284":1,"285":1,"338":1,"348":1,"355":1,"356":1,"359":1,"361":1,"392":1,"394":1,"398":1,"402":1,"418":1,"419":1,"428":1,"444":1,"460":1,"482":1,"484":1,"654":1,"775":1,"787":1,"788":1,"798":1,"809":1,"932":1,"1107":1}}],["subtree",{"2":{"1131":1,"1139":1}}],["subtract43",{"2":{"356":1}}],["subtraces",{"2":{"355":2}}],["subprocess",{"2":{"409":1}}],["subweight",{"2":{"260":1}}],["sub",{"0":{"413":1},"2":{"198":2,"413":1,"928":1,"945":1,"1086":2,"1089":1,"1090":1}}],["subcommand",{"2":{"134":1,"200":2,"295":1,"592":1}}],["subcommands",{"0":{"31":1},"2":{"56":1,"133":1,"284":1}}],["subsections",{"2":{"896":1}}],["subsection",{"2":{"496":1}}],["subset",{"2":{"266":2}}],["subsequent",{"2":{"102":1,"352":1,"386":1,"1038":1,"1039":1,"1069":1,"1074":4}}],["subscribe",{"2":{"12":1}}],["submodule",{"2":{"101":1}}],["submodules",{"2":{"99":1,"172":2,"395":1,"398":1,"402":1,"403":1,"418":1}}],["submitting",{"2":{"95":1}}],["submitted",{"2":{"8":1,"14":1,"45":1,"90":1,"95":1}}],["submithashrate",{"2":{"12":1}}],["submitwork",{"2":{"12":1}}],["subject",{"2":{"83":1}}],["suites",{"2":{"102":1,"172":1,"264":1,"384":1}}],["suite",{"2":{"0":1,"26":1,"33":1,"55":1,"56":2,"67":1,"85":1,"132":1,"137":1,"172":1,"250":1,"257":6,"264":1,"328":2,"337":1,"347":6,"353":1,"394":2}}],["side",{"2":{"485":1}}],["six",{"2":{"330":1}}],["situation",{"2":{"265":2,"378":1,"398":1}}],["situations",{"2":{"199":1,"309":1,"802":2}}],["site",{"2":{"111":3,"127":1}}],["silicon",{"2":{"187":5}}],["silently",{"2":{"309":1}}],["silent",{"2":{"17":1,"251":2,"308":1}}],["sigma",{"2":{"929":2,"946":3}}],["sig",{"0":{"1370":1},"1":{"1371":1,"1372":1,"1373":1},"2":{"130":1,"172":1,"335":1,"618":2,"975":1,"1318":1,"1331":1,"1371":4,"1373":2,"1393":1,"1394":1,"1395":1,"1403":1}}],["sigdeadline",{"2":{"76":1,"78":1}}],["signs",{"2":{"1051":1,"1052":3,"1055":1}}],["signandattachdelegation",{"2":{"1050":1,"1051":1,"1052":1}}],["signatures",{"0":{"67":1,"197":1},"2":{"67":1,"162":1,"193":1,"197":1,"355":1,"787":2}}],["signature",{"0":{"50":1,"632":1,"636":1,"641":1,"645":1,"649":1,"653":1,"658":1,"663":1,"668":1,"672":1,"675":1,"679":1,"683":1,"688":1,"693":1,"701":1,"706":1,"711":1,"715":1,"722":1,"729":1,"736":1,"743":1,"750":1,"757":1,"764":1,"772":1,"781":1,"785":1,"792":1,"796":1,"802":1,"807":1,"811":1,"815":1,"819":1,"825":1,"831":1,"834":1,"840":1,"844":1,"848":1,"853":1,"857":1,"862":1,"866":1,"869":1,"874":1,"879":1,"883":1,"887":1,"891":1,"900":1,"904":1,"908":1,"912":1,"916":1,"920":1,"924":1,"937":1,"941":1,"952":1,"956":1,"959":1,"964":1,"968":1,"971":1,"981":1,"986":1,"990":1,"995":1,"1000":1,"1003":1,"1006":1,"1011":1,"1016":1,"1021":1,"1026":1,"1031":1,"1037":1,"1041":1,"1046":1,"1050":1,"1054":1,"1060":1,"1064":1,"1068":1,"1073":1,"1078":1,"1081":1,"1085":1,"1094":1,"1098":1,"1101":1,"1106":1,"1110":1,"1115":1,"1119":1,"1124":1,"1129":1,"1137":1,"1145":1,"1149":1,"1153":1,"1158":1,"1162":1,"1167":1,"1171":1,"1190":1,"1194":1,"1199":1,"1203":1,"1207":1,"1211":1,"1215":1,"1219":1,"1223":1,"1227":1,"1231":1,"1250":1,"1254":1,"1259":1,"1262":1,"1267":1,"1270":1,"1275":1,"1278":1,"1281":1,"1287":1,"1291":1,"1295":1,"1300":1,"1305":1,"1308":1,"1313":1,"1316":1,"1320":1,"1323":1,"1326":1,"1330":1,"1333":1,"1336":1,"1339":1,"1343":1,"1347":1,"1350":1,"1356":1,"1360":1,"1363":1,"1366":1,"1371":1,"1375":1,"1379":1,"1398":1,"1401":1,"1405":1},"1":{"1172":1,"1173":1,"1174":1,"1175":1,"1176":1,"1177":1,"1178":1,"1179":1,"1180":1,"1181":1,"1182":1,"1183":1,"1184":1,"1185":1,"1186":1,"1232":1,"1233":1,"1234":1,"1235":1,"1236":1,"1237":1,"1238":1,"1239":1,"1240":1,"1241":1,"1242":1,"1243":1,"1244":1,"1245":1,"1246":1},"2":{"14":1,"36":1,"67":1,"74":1,"172":11,"260":1,"379":1,"587":1,"702":1,"707":2,"778":1,"782":1,"783":1,"842":1,"880":1,"884":1,"1050":4,"1051":1,"1056":8,"1288":1}}],["signdelegationscript",{"2":{"1052":1}}],["signdelegationtest",{"2":{"1052":1}}],["signdelegation",{"0":{"1049":1},"1":{"1050":1,"1051":1,"1052":1},"2":{"1050":1,"1051":1,"1052":3,"1058":1}}],["signerprivatekey",{"2":{"1056":5}}],["signer",{"2":{"94":2,"152":2,"1055":1,"1056":6,"1057":2}}],["signedhash",{"2":{"1056":2}}],["signeddelegation",{"2":{"1050":7,"1052":6}}],["signed",{"2":{"74":1,"361":1,"664":1,"1050":1,"1051":2,"1052":2,"1055":1,"1056":1,"1057":1,"1069":1,"1310":1}}],["signifying",{"2":{"1107":1}}],["significantly",{"2":{"67":1,"386":1}}],["signingexampletest",{"2":{"1056":1}}],["signingexample",{"2":{"1056":7}}],["signing",{"0":{"1058":1},"2":{"67":2,"85":1,"94":1,"896":2,"1050":1,"1051":1,"1052":1}}],["signtypeddata",{"2":{"12":1}}],["sign",{"0":{"1053":1},"1":{"1054":1,"1055":1,"1056":1,"1057":1},"2":{"12":1,"67":1,"172":2,"361":1,"619":2,"626":1,"630":1,"665":1,"695":1,"1043":1,"1050":2,"1054":2,"1056":2,"1057":2,"1058":1,"1285":1,"1310":2}}],["sizes",{"0":{"560":1},"2":{"194":1,"421":2,"560":3}}],["size",{"2":{"19":3,"20":2,"37":1,"84":1,"260":1,"279":1,"284":3,"319":1,"482":3,"492":1,"752":1,"809":1}}],["simplifying",{"2":{"1051":1}}],["simplify",{"2":{"392":1}}],["simpledelegatecontract",{"2":{"1052":18}}],["simplefuzztest",{"2":{"444":1,"445":1}}],["simpler",{"2":{"369":1}}],["simplestoragecontract",{"2":{"345":5,"876":3,"1008":3}}],["simple",{"0":{"1133":1,"1141":1,"1394":1},"2":{"85":1,"95":1,"106":1,"128":1,"345":12,"359":1,"365":1,"394":1,"459":1,"599":1,"876":7,"931":1,"947":1,"1008":6,"1057":1}}],["simply",{"2":{"1":1,"27":1,"34":1,"56":1,"76":1,"151":1,"328":1,"329":1,"333":1,"339":1,"354":1,"1354":1}}],["simulation",{"2":{"89":1,"90":2,"378":3}}],["simulating",{"2":{"25":1}}],["simulates",{"2":{"378":1}}],["simulated",{"2":{"90":2,"95":1}}],["simulate",{"2":{"56":1,"172":1,"266":1,"357":1,"415":1}}],["similarly",{"2":{"81":1,"185":1,"370":1,"928":1,"945":1}}],["similar",{"2":{"14":2,"25":1,"45":1,"52":1,"191":1,"262":1,"274":1,"317":1,"342":1,"353":1,"428":1,"475":1,"782":1,"786":1,"787":1,"826":1,"1284":1}}],["sink",{"2":{"365":3}}],["singleton",{"2":{"378":1}}],["single",{"0":{"430":1,"719":1,"726":1,"733":1,"740":1,"747":1,"754":1,"761":1,"768":1},"2":{"13":1,"14":3,"36":2,"44":1,"62":1,"65":1,"77":1,"115":1,"280":1,"337":1,"357":2,"387":1,"398":1,"421":1,"430":6,"439":2,"478":1,"507":1,"583":1,"752":1,"782":1,"783":1,"787":1,"788":1,"1051":1,"1052":3,"1284":1,"1285":2}}],["since",{"2":{"3":1,"25":1,"62":1,"84":1,"95":1,"117":1,"151":1,"192":1,"270":1,"275":1,"328":3,"355":1,"362":1,"368":1,"391":1,"409":1,"421":1,"487":1,"497":1,"807":3,"929":1,"946":1,"972":1,"1120":1,"1131":1,"1139":1}}],["s",{"0":{"75":1,"252":1,"1354":1},"1":{"76":1},"2":{"1":1,"3":1,"8":1,"13":2,"14":4,"15":1,"18":2,"24":1,"25":1,"26":1,"31":1,"34":1,"35":8,"40":1,"43":1,"44":1,"45":3,"56":4,"57":2,"64":1,"65":6,"67":3,"73":1,"75":1,"76":1,"77":4,"78":5,"80":2,"81":6,"82":1,"83":2,"84":2,"85":1,"86":3,"87":2,"90":2,"91":2,"94":3,"95":3,"96":4,"103":1,"106":1,"107":1,"108":1,"115":1,"117":13,"127":1,"128":1,"130":1,"134":1,"138":1,"146":1,"154":1,"157":1,"166":1,"172":17,"173":1,"179":1,"181":1,"185":1,"189":2,"192":2,"248":1,"249":1,"250":2,"251":1,"254":2,"255":1,"257":2,"272":1,"289":1,"303":2,"323":2,"327":4,"328":3,"335":1,"342":2,"345":1,"347":1,"356":5,"362":2,"363":1,"364":2,"365":1,"371":1,"374":1,"375":3,"378":1,"379":1,"382":1,"384":3,"386":2,"388":1,"392":1,"393":2,"394":2,"397":1,"402":2,"421":1,"454":1,"455":1,"474":1,"480":1,"487":1,"561":1,"574":1,"625":1,"654":1,"698":3,"699":2,"782":2,"786":1,"788":1,"821":1,"875":1,"876":1,"894":1,"895":2,"897":1,"924":1,"925":1,"927":1,"928":1,"929":3,"931":1,"932":1,"941":1,"942":1,"944":1,"945":1,"946":3,"947":1,"996":1,"997":1,"1008":1,"1034":1,"1042":1,"1050":1,"1051":1,"1052":16,"1054":2,"1055":1,"1056":4,"1057":3,"1083":1,"1087":5,"1088":3,"1090":2,"1112":1,"1130":1,"1131":2,"1133":1,"1134":2,"1138":1,"1139":2,"1141":1,"1142":2,"1279":1,"1284":6,"1285":10,"1288":1,"1309":1,"1310":1,"1331":1,"1353":1,"1354":1,"1393":1,"1394":1,"1395":1,"1396":1}}],["yellow",{"2":{"355":1,"929":2,"946":3}}],["yet",{"2":{"0":1,"12":1,"26":1,"55":1,"57":1,"82":1,"106":1,"132":1,"485":1,"804":1,"932":1,"1283":1}}],["yul",{"0":{"496":1},"2":{"289":1,"421":1,"495":1,"496":1}}],["yieldmock",{"2":{"775":5}}],["yielded",{"2":{"311":1}}],["yield",{"2":{"265":1,"775":2}}],["yay3",{"2":{"260":2}}],["yay2",{"2":{"260":2}}],["yay1",{"2":{"260":2}}],["yay",{"2":{"260":5}}],["yaml",{"2":{"35":1,"188":2}}],["yml",{"2":{"88":1,"152":2}}],["y",{"2":{"51":3,"106":1,"148":2,"289":2,"359":1,"384":4,"1050":1}}],["youtube",{"2":{"97":1}}],["yourself",{"2":{"334":1,"419":1}}],["your",{"0":{"59":1,"108":1,"376":1},"1":{"60":1,"61":1,"62":1,"63":1,"64":1,"109":1},"2":{"18":1,"33":1,"35":3,"37":1,"40":2,"43":7,"44":1,"45":3,"55":1,"60":1,"61":2,"62":3,"63":1,"64":2,"69":1,"72":1,"82":1,"83":4,"84":2,"85":2,"87":4,"92":1,"93":1,"94":1,"95":1,"99":1,"100":1,"101":1,"102":1,"103":2,"106":4,"107":6,"108":2,"111":1,"115":2,"116":1,"117":1,"119":1,"120":3,"121":2,"122":1,"125":2,"126":3,"127":2,"129":1,"132":1,"134":1,"137":2,"138":2,"139":1,"142":1,"144":1,"151":3,"158":1,"159":2,"163":1,"168":1,"172":3,"175":1,"179":1,"180":1,"181":1,"183":3,"184":1,"185":4,"186":1,"190":1,"202":1,"249":1,"277":1,"281":3,"282":2,"283":1,"284":1,"285":3,"307":1,"308":1,"309":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"325":1,"328":2,"329":1,"333":1,"335":1,"337":3,"338":2,"340":2,"341":2,"344":2,"345":2,"347":2,"349":2,"355":1,"356":2,"358":1,"359":1,"362":3,"363":6,"365":1,"368":3,"375":1,"376":4,"378":2,"383":1,"384":3,"386":1,"387":4,"388":1,"391":1,"393":1,"394":1,"397":1,"398":3,"402":1,"409":1,"414":4,"416":1,"419":1,"452":1,"476":1,"479":1,"530":2,"567":1,"625":1,"629":1,"650":1,"654":2,"665":1,"759":1,"798":1,"808":3,"820":2,"826":2,"842":2,"894":2,"930":1,"931":1,"947":1,"973":1,"978":2,"1051":2,"1070":1,"1296":1,"1301":1,"1354":1,"1392":2}}],["you",{"0":{"404":2},"2":{"0":1,"7":1,"8":6,"10":1,"12":1,"14":2,"18":1,"26":1,"34":1,"35":5,"36":2,"37":3,"43":2,"44":2,"45":9,"48":2,"51":5,"55":1,"56":1,"57":3,"58":1,"62":2,"63":1,"64":3,"67":1,"69":1,"72":1,"76":2,"77":1,"78":1,"79":2,"80":1,"82":5,"83":4,"84":1,"85":1,"86":1,"87":2,"89":1,"92":3,"93":1,"94":3,"95":4,"96":2,"102":1,"103":1,"105":2,"106":2,"107":2,"108":4,"109":1,"110":1,"115":2,"117":2,"118":2,"119":2,"120":1,"121":1,"125":3,"126":3,"127":3,"129":2,"130":1,"131":2,"132":2,"133":1,"134":1,"142":1,"149":1,"151":4,"154":4,"155":3,"157":4,"158":1,"159":1,"170":1,"171":1,"172":3,"173":1,"175":2,"176":1,"177":3,"178":1,"179":4,"180":3,"181":3,"182":2,"183":5,"184":2,"185":6,"187":4,"189":1,"190":5,"191":1,"246":1,"247":1,"248":1,"249":1,"252":1,"253":1,"256":1,"257":1,"258":1,"260":1,"262":1,"282":6,"283":3,"284":3,"285":5,"291":1,"307":2,"308":2,"309":2,"311":2,"313":2,"314":2,"315":2,"316":2,"317":2,"319":2,"325":2,"327":1,"328":3,"329":2,"333":2,"334":2,"335":2,"336":1,"338":3,"340":1,"341":2,"342":1,"347":2,"348":1,"349":3,"355":4,"356":3,"362":2,"363":3,"364":1,"365":5,"367":1,"371":1,"376":2,"379":1,"382":1,"383":2,"384":6,"386":6,"387":5,"392":3,"394":3,"396":2,"397":3,"398":4,"399":3,"400":1,"402":6,"405":2,"407":3,"408":2,"409":4,"411":2,"413":2,"414":9,"415":4,"416":9,"417":4,"418":2,"419":1,"452":1,"454":2,"455":1,"456":2,"457":1,"476":1,"481":2,"484":2,"496":1,"536":1,"573":1,"650":2,"654":3,"655":1,"707":1,"717":1,"724":1,"731":1,"738":1,"745":1,"754":1,"755":1,"759":2,"766":1,"775":2,"778":1,"782":1,"786":8,"787":2,"788":5,"798":2,"808":6,"809":1,"822":1,"828":1,"842":1,"894":4,"895":2,"897":1,"925":2,"926":3,"929":2,"931":2,"932":2,"934":2,"942":2,"943":3,"946":2,"947":2,"949":2,"976":1,"1051":1,"1271":1,"1284":3,"1296":1,"1301":1,"1351":1,"1354":2}}],["tcp",{"2":{"190":1}}],["twitter",{"2":{"419":1}}],["twice",{"2":{"280":2,"416":1}}],["tweak",{"2":{"118":1,"495":1,"496":1}}],["two",{"2":{"34":1,"45":1,"84":1,"85":1,"108":1,"133":1,"192":1,"248":1,"262":2,"328":1,"337":1,"342":1,"344":1,"345":1,"363":1,"384":1,"394":1,"398":2,"407":1,"496":1,"778":1,"779":1,"786":1,"787":1,"893":1,"930":1,"1023":1,"1086":1,"1186":1,"1292":1,"1357":1}}],["tuples",{"2":{"192":1,"929":2,"946":2}}],["tuple",{"2":{"192":8,"308":1,"927":1,"929":3,"944":1,"946":3,"1306":1,"1393":1,"1396":1}}],["tutorials",{"2":{"97":1,"162":1}}],["tutorial",{"0":{"97":1}}],["turns",{"2":{"957":1,"1351":1}}],["turning",{"2":{"957":1}}],["turned",{"2":{"345":1}}],["turn",{"2":{"14":1}}],["title",{"0":{"424":1},"2":{"424":2,"1034":2,"1130":1,"1133":1,"1138":1,"1141":1}}],["tilde",{"2":{"258":1}}],["tips",{"0":{"695":1,"717":1,"724":1,"731":1,"738":1,"745":1,"752":1,"759":1,"766":1,"798":1,"1043":1},"2":{"364":1}}],["tip",{"0":{"930":1},"2":{"45":1,"76":1,"357":1}}],["timely",{"2":{"419":1}}],["time`",{"2":{"172":1}}],["times",{"2":{"40":2,"172":1,"262":2,"291":1,"342":1,"344":1,"444":1,"476":1,"492":1,"778":2,"779":3,"782":1,"1393":1,"1402":1}}],["timestamp",{"0":{"540":1},"2":{"1":1,"14":4,"17":3,"25":2,"78":3,"84":1,"172":2,"292":3,"338":1,"421":2,"540":3,"815":1,"816":5,"817":1,"1083":8,"1125":1,"1126":1,"1367":1,"1368":2,"1376":1,"1377":2}}],["timeouts",{"0":{"976":1},"2":{"972":1,"976":1}}],["timeout",{"0":{"505":1,"562":1},"2":{"18":3,"172":1,"262":1,"497":2,"505":1,"562":2,"957":1,"973":2,"976":1}}],["timed",{"2":{"18":1,"90":1}}],["time",{"2":{"7":1,"8":4,"14":2,"17":3,"25":2,"35":1,"36":1,"43":1,"56":2,"65":1,"85":1,"86":1,"92":1,"102":3,"117":1,"172":2,"257":6,"262":2,"328":5,"342":1,"347":6,"351":1,"384":1,"387":1,"394":2,"405":1,"421":1,"492":1,"497":2,"685":1,"690":1,"779":1,"808":1,"1013":1,"1050":1,"1070":1,"1120":1,"1366":1,"1375":1}}],["technically",{"2":{"895":1}}],["techniques",{"2":{"162":1}}],["team",{"2":{"410":1,"417":1,"419":1}}],["temporarily",{"2":{"363":1}}],["template",{"2":{"172":1,"256":1,"394":9}}],["tenderly",{"2":{"386":1}}],["ten",{"2":{"336":1,"1147":1}}],["text",{"2":{"254":1}}],["terminator",{"2":{"1393":1}}],["terminates",{"2":{"778":1}}],["terminal",{"2":{"37":1,"69":1,"96":2,"107":1,"151":2,"190":1,"355":1,"414":2,"416":1,"972":1}}],["terms",{"2":{"192":1,"927":1,"944":2}}],["telegram",{"2":{"175":1}}],["tells",{"2":{"475":1,"987":1}}],["tell",{"2":{"43":1,"407":1,"991":1}}],["tee",{"2":{"111":3}}],["testusercannotwithdrawexcessofdeposit",{"2":{"1151":1}}],["testutilities",{"2":{"384":1}}],["testutils",{"2":{"172":1}}],["test2",{"2":{"1096":1}}],["test1",{"2":{"1096":1}}],["testpurchase",{"2":{"1056":1}}],["testrevokepersistent",{"2":{"1008":1}}],["testreverttransferinsufficientbalance",{"2":{"281":1,"283":3}}],["testreverttransferfrominsufficientbalance",{"2":{"281":1,"283":3}}],["testreverttransferfrominsufficientallowance",{"2":{"281":1,"283":3}}],["testrevert",{"2":{"244":1,"246":1,"356":1,"1155":2,"1164":2}}],["testreadeip1559transactions",{"2":{"932":1}}],["testgroup",{"2":{"844":1}}],["testdata1",{"2":{"842":3}}],["testdata0",{"2":{"842":5}}],["testdeposit",{"2":{"347":1}}],["testlowlevelcallrevert",{"2":{"787":1}}],["testagoradollar",{"2":{"1395":1}}],["testaddress",{"2":{"1108":2}}],["testarbitrarystorage",{"2":{"1039":1}}],["testa",{"2":{"357":3}}],["testapprove",{"2":{"281":1,"283":4}}],["testnotskip",{"2":{"1062":1}}],["testnumber",{"2":{"356":7}}],["testnet",{"0":{"95":1},"2":{"5":1,"7":1,"45":1,"86":2,"87":1,"92":4,"95":2,"96":1,"172":1}}],["testtransferfrom",{"2":{"281":1,"283":3}}],["testtransfer",{"2":{"281":1,"283":3}}],["testincrementasowner",{"2":{"355":1}}],["testinfiniteapprovetransferfrom",{"2":{"281":1,"283":3}}],["testing",{"0":{"67":1,"75":1,"247":1,"250":1,"253":1,"254":1,"255":1,"257":1,"261":1,"270":1,"271":1,"277":1,"278":1,"337":1,"527":1,"975":1},"1":{"76":1,"248":1,"249":1,"250":1,"251":2,"252":2,"253":2,"254":2,"255":1,"256":1,"258":1,"259":1,"260":1,"262":1,"263":1,"264":1,"265":1,"266":1,"267":1,"268":1,"269":1,"270":1,"271":1,"272":2,"273":2,"274":2,"275":2,"276":2,"279":1,"280":1,"338":1,"339":1,"340":1,"341":1,"342":1,"343":1,"344":1,"345":1,"346":1,"528":1,"529":1,"530":1,"531":1,"532":1,"533":1,"534":1,"535":1,"536":1,"537":1,"538":1,"539":1,"540":1,"541":1,"542":1,"543":1,"544":1,"545":1,"546":1,"547":1,"548":1,"549":1,"550":1,"551":1,"552":1,"553":1,"554":1,"555":1,"556":1,"557":1,"558":1,"559":1,"560":1,"561":1,"562":1,"563":1,"564":1,"565":1,"566":1,"567":1,"568":1,"569":1,"570":1,"571":1,"572":1,"573":1,"574":1,"575":1,"576":1,"577":1,"578":1,"579":1,"580":1,"581":1,"582":1,"583":1,"584":1,"585":1,"586":1},"2":{"5":1,"7":1,"33":1,"35":1,"74":1,"76":2,"94":1,"124":1,"135":1,"138":5,"139":1,"141":1,"146":1,"162":2,"164":1,"170":2,"171":1,"172":23,"173":1,"195":1,"247":1,"248":8,"251":2,"252":1,"253":1,"254":3,"255":1,"257":5,"262":5,"264":2,"265":1,"266":2,"270":1,"272":3,"275":2,"277":7,"278":1,"328":1,"337":2,"338":1,"356":1,"363":1,"365":1,"382":2,"384":1,"394":1,"420":1,"421":1,"444":2,"564":1,"786":1,"787":2,"972":1,"975":1,"1055":1,"1056":1}}],["testbytes",{"2":{"1108":2}}],["testbreakpoint",{"2":{"660":1}}],["testburn",{"2":{"281":1,"283":3,"284":1}}],["testbase",{"2":{"185":3}}],["testc",{"2":{"357":3}}],["testcreatepersistentcontract",{"2":{"345":1}}],["testcreatecontract",{"2":{"345":1}}],["testcalculategas",{"2":{"1117":1}}],["testcancreateandselectforkinonestep",{"2":{"344":1}}],["testcansetforkblocknumber",{"2":{"344":1}}],["testcanselectfork",{"2":{"344":1}}],["testcanswitchforks",{"2":{"344":1}}],["testcasesum",{"2":{"279":2}}],["testcase",{"2":{"279":2,"280":9}}],["testcopystorage",{"2":{"681":1}}],["testcompatibilityopenzeppelinprover",{"2":{"252":1}}],["testcontract",{"2":{"249":1}}],["testmockfunction",{"2":{"893":1}}],["testmockpublicvariable",{"2":{"885":1}}],["testmockcallswithmsgvalue",{"2":{"889":1}}],["testmockcall",{"2":{"885":3,"889":1,"893":1}}],["testmockcallrevertwithvalue",{"2":{"881":1}}],["testmockcallrevertwithcustomerror",{"2":{"881":1}}],["testmockcallrevert",{"2":{"881":1}}],["testmarkpersistent",{"2":{"876":1}}],["testmultipleexpectreverts",{"2":{"788":1}}],["testmultiplereverts",{"2":{"786":1}}],["testmint",{"2":{"281":1,"283":3}}],["testmisc",{"2":{"197":2}}],["testmetadata",{"2":{"281":1,"283":3}}],["testmerklegenerateproofstandard",{"2":{"254":1}}],["testmerklerootmatchesjsimplementationfuzzed",{"2":{"251":1}}],["testmyffi",{"2":{"249":1}}],["testerror",{"2":{"881":1}}],["testerc20emitsbatchtransfer",{"2":{"783":1}}],["testerc20emitstransfer",{"2":{"783":3}}],["testexpectrevertnoreason",{"2":{"788":1}}],["testexample",{"2":{"195":3,"347":1}}],["tested",{"2":{"82":1,"84":1,"86":2,"87":1,"172":1,"258":1,"262":1,"270":1,"275":1,"278":1,"384":1,"390":1}}],["testfunc",{"2":{"1352":2}}],["testfuzz",{"2":{"36":1,"56":1,"85":2,"128":1,"172":2,"257":5,"347":1,"384":1,"394":1}}],["testfourlettermessage",{"2":{"788":1}}],["testforkfuzz",{"2":{"384":1}}],["testfork",{"2":{"384":1}}],["testforkiddiffer",{"2":{"344":1}}],["testfail",{"0":{"196":1},"2":{"193":1,"196":3}}],["test`",{"2":{"172":1,"421":1,"844":1}}],["testskip",{"2":{"1062":1}}],["testsignandattachdelegation",{"2":{"1052":1}}],["testsigndelegationandthenattachdelegation",{"2":{"1052":1}}],["testsnapshotstate",{"2":{"1083":1}}],["testsnapshotvalue",{"2":{"809":1}}],["testsnapshotgaslastcall",{"2":{"809":1}}],["testsnapshotgas",{"2":{"809":4}}],["testselector",{"2":{"357":4}}],["testsomethingelse",{"2":{"655":1}}],["testsomething",{"2":{"185":1,"651":1,"655":1,"775":1}}],["tests",{"0":{"128":1,"180":1,"182":1,"191":1,"196":1,"347":1,"352":1,"353":1,"356":1,"380":1,"384":1,"385":1,"386":1},"1":{"348":1,"349":1,"357":1,"358":1,"381":1,"382":1,"383":1,"384":1,"385":1,"386":2,"387":2,"388":2,"389":1,"390":1,"391":1,"392":1},"2":{"19":1,"21":1,"35":1,"55":1,"56":3,"64":2,"85":6,"94":1,"99":1,"106":4,"107":1,"115":2,"131":1,"137":1,"159":1,"162":1,"172":19,"173":1,"179":2,"180":1,"182":1,"193":1,"195":2,"196":1,"202":1,"250":3,"251":1,"253":1,"255":3,"257":7,"258":2,"259":1,"260":1,"262":3,"263":1,"270":1,"272":3,"273":1,"274":1,"275":1,"279":1,"281":1,"282":1,"283":2,"285":1,"291":6,"325":5,"328":2,"329":3,"337":2,"338":1,"341":1,"342":1,"346":1,"347":15,"348":6,"349":2,"351":2,"352":4,"353":4,"355":2,"356":5,"357":2,"364":7,"365":1,"376":3,"384":18,"386":4,"387":2,"388":2,"394":4,"402":1,"421":17,"444":1,"446":1,"467":1,"482":1,"484":1,"507":4,"529":5,"530":1,"531":1,"532":1,"534":1,"535":1,"537":1,"538":1,"539":1,"540":1,"541":1,"543":1,"561":1,"573":1,"578":1,"654":1,"797":2,"798":1,"808":3,"892":1,"894":2,"972":1,"975":1,"1061":2,"1263":1,"1271":1,"1276":1,"1353":2,"1354":2}}],["test",{"0":{"76":1,"85":1,"102":1,"137":1,"259":1,"260":1,"263":1,"268":1,"279":1,"324":1,"325":1,"357":1,"376":1,"381":1,"382":1,"389":1,"444":1,"463":1,"549":1,"550":1,"565":1,"1354":1},"1":{"260":1,"382":1,"383":1,"384":1,"390":1,"391":1,"392":1,"445":1,"446":1,"447":1},"2":{"1":11,"10":1,"29":1,"33":2,"35":1,"36":11,"37":3,"54":1,"56":5,"67":1,"76":2,"77":4,"78":5,"79":1,"82":1,"84":3,"85":4,"86":2,"94":1,"99":3,"100":2,"101":2,"102":11,"106":5,"115":1,"116":1,"117":3,"123":1,"128":7,"134":1,"137":3,"138":3,"148":1,"162":1,"172":37,"173":1,"179":1,"180":1,"182":5,"183":1,"184":3,"185":7,"191":1,"192":7,"195":4,"196":4,"197":1,"200":1,"201":1,"202":7,"247":1,"249":4,"250":1,"251":3,"252":1,"253":2,"254":5,"257":29,"258":1,"259":1,"260":1,"262":2,"263":1,"264":2,"266":2,"268":2,"270":2,"278":1,"280":4,"281":1,"282":3,"283":4,"284":4,"285":3,"286":1,"324":1,"325":17,"328":28,"329":8,"333":1,"335":2,"337":3,"338":2,"339":1,"340":1,"341":3,"342":5,"344":2,"345":2,"346":1,"347":24,"348":1,"349":3,"350":1,"351":3,"352":3,"353":3,"354":1,"356":26,"357":9,"358":3,"364":4,"367":1,"376":2,"377":1,"382":2,"383":2,"384":22,"387":3,"388":2,"390":4,"391":2,"392":2,"394":6,"396":1,"402":5,"409":21,"420":1,"421":14,"444":7,"445":4,"446":6,"447":3,"458":5,"463":4,"507":1,"527":1,"533":1,"536":1,"549":6,"550":6,"551":2,"552":2,"553":2,"554":2,"556":1,"564":1,"565":4,"573":1,"575":1,"586":1,"646":2,"650":3,"651":1,"654":2,"660":1,"664":1,"665":6,"708":24,"759":1,"775":3,"778":2,"786":1,"787":5,"788":1,"798":1,"808":3,"809":6,"812":1,"816":1,"822":1,"828":1,"844":3,"850":2,"867":2,"875":2,"885":1,"892":1,"894":1,"929":1,"931":1,"932":1,"946":1,"947":1,"997":12,"1039":1,"1052":4,"1056":1,"1061":4,"1062":3,"1069":1,"1070":5,"1083":1,"1096":4,"1151":1,"1310":24,"1327":1,"1328":1,"1353":3,"1354":10,"1392":3}}],["tsbuildinfo",{"2":{"35":1}}],["tsconfig",{"2":{"35":3}}],["ts",{"2":{"35":1}}],["tmp",{"2":{"17":1,"396":1}}],["tab",{"0":{"436":1},"2":{"421":1,"436":2}}],["tables",{"0":{"946":1},"2":{"428":1,"946":1,"947":1}}],["tableswaptest",{"2":{"280":2}}],["tablesumstest",{"2":{"279":2,"280":2}}],["table",{"0":{"278":1},"1":{"279":1,"280":1},"2":{"138":2,"200":1,"264":1,"277":1,"278":2,"279":2,"280":2,"446":1,"447":1,"452":1,"499":2,"561":2,"622":1,"857":1,"858":1,"944":3,"1090":1}}],["tainted",{"2":{"365":2}}],["taint",{"0":{"365":1}}],["tailor",{"2":{"15":1}}],["talk",{"2":{"364":1,"371":1,"392":1}}],["tagging",{"2":{"787":1}}],["tags",{"2":{"152":2,"172":1,"359":1}}],["tag",{"2":{"83":2,"393":1,"396":2,"409":3,"410":1,"808":1}}],["taking",{"2":{"65":1,"84":1,"198":1}}],["taken",{"2":{"327":1,"601":1,"1082":1}}],["takes",{"2":{"14":2,"74":1,"192":2,"257":1,"421":1,"625":1,"629":1,"880":1,"884":1,"1027":1,"1081":3,"1082":1}}],["take",{"2":{"14":1,"72":1,"95":1,"108":1,"274":1,"283":1,"307":1,"379":1,"419":1,"497":1,"654":1,"1055":1}}],["tasks",{"2":{"35":1,"87":1}}],["targetpath",{"2":{"802":1}}],["targetaddr",{"2":{"774":3,"821":1}}],["targetartifact",{"2":{"268":1}}],["targetartifactselector",{"2":{"268":1}}],["targetartifactselectors",{"2":{"266":1}}],["targetartifacts",{"2":{"266":1}}],["targeted",{"2":{"454":1}}],["targetedinterfaces",{"2":{"268":1}}],["targetedsenders",{"2":{"268":1}}],["targetedselectors",{"2":{"268":1}}],["targetedcontracts",{"2":{"268":1}}],["targetedartifactselectors",{"2":{"268":1}}],["targetedartifacts",{"2":{"268":1}}],["targetinterface",{"2":{"268":1}}],["targetinterfaces",{"2":{"266":1}}],["targeting",{"2":{"86":1,"87":1,"266":1,"268":2,"418":1}}],["targetcontract2",{"2":{"267":1}}],["targetcontract1",{"2":{"267":1}}],["targetcontracts",{"2":{"266":1,"269":1,"272":1}}],["targetcontract",{"2":{"172":1,"268":1,"393":1}}],["targetsender",{"2":{"268":1}}],["targetselector",{"2":{"268":1}}],["targetselectors",{"2":{"266":1}}],["targets",{"0":{"266":1,"506":1},"1":{"267":1,"268":1,"269":1},"2":{"61":1,"265":1,"497":2,"503":1,"506":1}}],["target",{"0":{"269":1,"1397":1},"1":{"1398":1,"1399":1},"2":{"15":2,"69":1,"70":1,"86":1,"266":8,"267":2,"268":9,"269":4,"270":2,"271":1,"272":1,"289":1,"308":4,"335":1,"473":1,"651":1,"680":1,"774":1,"779":10,"786":1,"827":3,"891":1,"892":2,"1037":1,"1038":1,"1318":1,"1331":1,"1373":2,"1393":2,"1394":1,"1395":1,"1398":2,"1403":1}}],["txorigin",{"2":{"959":2,"960":2,"981":1,"983":9,"1073":2,"1074":2}}],["txdetail",{"2":{"932":1}}],["tx1559detail",{"2":{"932":2}}],["tx1559",{"2":{"932":2}}],["txgasprice",{"0":{"1114":1},"1":{"1115":1,"1116":1,"1117":1},"2":{"770":1,"1115":2,"1117":1}}],["tx",{"0":{"532":1},"2":{"172":3,"292":1,"421":1,"532":3,"617":1,"665":1,"931":1,"960":2,"982":1,"1074":2,"1099":1,"1112":3,"1116":1,"1117":2}}],["txtype",{"2":{"932":1}}],["txt`",{"2":{"412":2}}],["txt",{"2":{"119":3,"123":1,"172":1,"249":2,"254":2,"352":2,"397":1,"398":2,"402":1,"411":1,"412":2,"474":1,"804":7}}],["txpool",{"2":{"14":3}}],["txhash",{"2":{"14":1,"1110":2}}],["trezor",{"2":{"361":2,"623":2,"627":2}}],["treats",{"2":{"1034":1}}],["treated",{"2":{"745":1,"766":1,"929":1,"946":1}}],["treatment",{"2":{"386":1}}],["treat",{"2":{"289":1,"363":1,"384":1,"421":1,"483":1}}],["trees",{"2":{"250":1}}],["tree",{"0":{"250":1},"1":{"251":1,"252":1,"253":1,"254":1},"2":{"15":1,"54":1,"250":1,"322":1,"357":1,"394":1,"396":1,"407":1,"410":1,"476":1}}],["tricky",{"2":{"775":1}}],["trick",{"2":{"609":1}}],["trivial",{"2":{"506":1}}],["triggered",{"2":{"414":1}}],["trigger",{"2":{"187":1,"452":1,"1070":1}}],["tried",{"2":{"929":1,"946":1}}],["tries",{"2":{"95":1,"496":1,"1034":1}}],["trie",{"2":{"25":1}}],["truffle",{"2":{"402":1}}],["truncates",{"2":{"311":1}}],["trusted",{"2":{"115":1}}],["true`",{"2":{"172":1}}],["true",{"2":{"13":2,"64":1,"100":1,"102":2,"108":1,"117":1,"121":1,"172":4,"194":1,"195":1,"215":1,"217":1,"264":1,"265":3,"267":1,"271":1,"275":1,"280":1,"328":10,"356":1,"384":6,"386":2,"412":2,"413":1,"418":1,"421":8,"430":4,"432":1,"433":1,"434":1,"444":1,"445":1,"446":1,"447":1,"467":1,"474":1,"479":1,"480":1,"492":1,"493":1,"494":1,"507":2,"508":1,"543":1,"568":1,"569":1,"573":1,"580":1,"581":1,"659":1,"724":3,"726":1,"727":3,"783":10,"787":4,"802":4,"808":2,"957":1,"960":2,"1034":2,"1062":1,"1074":2,"1075":1,"1091":2,"1092":2,"1130":1,"1131":1,"1133":2,"1134":3,"1138":1,"1139":1,"1141":2,"1142":3,"1255":1}}],["trying",{"2":{"95":1,"172":1,"190":1,"1321":1,"1324":1,"1337":1,"1348":1,"1361":1,"1406":1}}],["try",{"2":{"51":1,"56":1,"85":1,"91":2,"180":1,"183":1,"187":1,"196":1,"257":1,"265":1,"355":1,"397":1,"408":1,"414":1,"421":1,"435":1,"474":1,"479":1,"842":1,"929":1,"946":1,"976":2}}],["troubleshooting",{"0":{"46":1,"933":1,"948":1},"1":{"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"934":1,"949":1},"2":{"170":1}}],["traversed",{"2":{"1088":1}}],["travis",{"0":{"100":1},"2":{"100":1}}],["trade",{"2":{"492":1}}],["tradeoff",{"2":{"387":1}}],["tradeoffs",{"2":{"368":1}}],["tracks",{"2":{"285":1,"384":1,"1394":1}}],["tracked",{"2":{"273":1}}],["track",{"2":{"172":1,"392":1,"808":2}}],["tracking",{"0":{"285":1},"2":{"138":1,"172":1,"392":1}}],["trace",{"2":{"12":3,"133":1,"172":1,"355":2}}],["traces",{"0":{"340":1,"348":1,"355":1},"2":{"12":1,"14":1,"17":1,"35":4,"95":2,"108":1,"133":1,"179":3,"180":5,"291":4,"325":1,"329":1,"348":5,"355":6,"529":5,"867":2,"1353":1}}],["tracecall",{"2":{"12":1}}],["tracetransaction",{"2":{"12":1,"15":1}}],["tracing",{"2":{"12":1,"17":3,"35":2,"285":1}}],["transact",{"0":{"1109":1},"1":{"1110":1,"1111":1,"1112":1,"1113":1},"2":{"800":1,"1110":2,"1112":1}}],["transactiondetails",{"2":{"931":2}}],["transactions",{"0":{"144":1,"377":1},"2":{"13":2,"14":4,"15":1,"17":1,"21":1,"25":1,"48":1,"56":1,"67":1,"84":1,"90":5,"94":2,"95":2,"96":1,"132":1,"134":1,"142":1,"165":1,"172":1,"357":5,"360":2,"377":2,"378":1,"684":1,"689":1,"931":1,"932":3,"997":2,"1011":1,"1012":1,"1051":1,"1052":4,"1069":1,"1095":1,"1284":1,"1310":2}}],["transaction",{"0":{"617":1},"2":{"8":1,"12":1,"13":1,"14":3,"15":6,"18":3,"36":1,"40":2,"43":3,"86":1,"94":2,"95":1,"133":2,"172":5,"292":1,"357":1,"361":3,"378":3,"469":1,"626":1,"630":1,"664":1,"683":4,"684":2,"688":1,"689":2,"788":1,"812":1,"816":1,"1011":4,"1012":2,"1050":2,"1051":2,"1052":6,"1070":1,"1110":2,"1111":1,"1112":4,"1116":1,"1117":1,"1284":1}}],["transient",{"2":{"482":1}}],["transmissions11",{"2":{"365":1}}],["translates",{"2":{"188":1}}],["transferamount",{"2":{"1112":4}}],["transferownership",{"2":{"375":1}}],["transferfrom",{"2":{"271":2,"309":4,"779":1,"1151":1}}],["transferring",{"0":{"81":1}}],["transfer",{"0":{"309":1},"2":{"79":1,"81":3,"92":1,"257":3,"271":2,"272":1,"309":8,"328":7,"363":1,"378":1,"779":15,"783":11,"979":1,"1112":3,"1151":1}}],["transfers",{"2":{"15":1,"1268":1}}],["transport",{"0":{"9":1},"2":{"7":1}}],["typically",{"2":{"264":1,"1087":1}}],["typing",{"2":{"8":1}}],["typhash",{"0":{"77":1}}],["typos",{"2":{"69":1}}],["typeexplanationexampledirect",{"2":{"264":1}}],["typehash",{"2":{"72":1,"73":1,"77":11,"172":4}}],["typescript",{"0":{"251":1},"2":{"251":1,"253":1}}],["types",{"0":{"438":1,"896":1,"979":1},"2":{"68":1,"71":1,"131":1,"172":2,"192":4,"393":1,"407":1,"421":2,"438":3,"487":1,"928":1,"929":1,"944":1,"945":1,"946":1,"1086":1,"1088":1,"1284":2,"1285":3,"1396":1}}],["typedef",{"2":{"77":2,"78":2}}],["typed",{"2":{"67":1,"74":1}}],["type",{"0":{"209":1,"211":1,"213":1,"928":1,"945":1},"1":{"210":1,"212":1,"214":1},"2":{"1":1,"8":1,"27":3,"35":3,"40":2,"49":1,"62":5,"69":2,"70":1,"72":2,"73":2,"75":1,"76":1,"77":4,"78":2,"106":1,"132":1,"142":1,"148":2,"172":4,"192":17,"209":3,"211":3,"213":3,"219":3,"221":3,"227":3,"229":3,"231":3,"233":3,"235":3,"237":3,"239":3,"241":3,"243":3,"245":3,"248":1,"257":1,"260":4,"275":1,"423":1,"424":1,"425":1,"426":1,"427":1,"431":1,"435":1,"436":1,"437":1,"438":2,"439":1,"440":1,"441":1,"442":1,"443":1,"449":1,"450":1,"451":1,"462":1,"463":1,"464":1,"465":1,"466":1,"467":1,"468":1,"469":1,"470":1,"473":1,"474":1,"475":1,"476":1,"477":1,"478":1,"479":1,"480":1,"481":1,"482":1,"483":1,"484":1,"485":1,"486":1,"487":1,"488":1,"489":1,"491":1,"492":1,"493":1,"494":1,"499":1,"500":1,"501":1,"502":1,"503":1,"504":1,"505":1,"506":1,"508":1,"509":1,"510":1,"511":1,"512":1,"513":1,"514":1,"516":1,"517":1,"518":1,"519":1,"520":1,"521":1,"522":1,"523":1,"524":1,"525":1,"526":1,"529":1,"530":1,"531":1,"532":1,"533":1,"534":1,"535":1,"536":1,"537":1,"538":1,"539":1,"540":1,"541":1,"542":1,"543":1,"545":1,"546":1,"547":1,"548":1,"549":1,"550":1,"551":1,"552":1,"553":1,"554":1,"555":1,"556":1,"557":1,"558":1,"559":1,"560":1,"561":1,"562":1,"564":1,"565":1,"566":1,"567":2,"568":1,"569":1,"570":1,"571":1,"572":1,"573":1,"575":1,"576":1,"577":1,"578":1,"579":1,"580":1,"581":1,"582":1,"583":1,"584":1,"585":1,"586":1,"747":1,"748":2,"751":3,"752":3,"758":1,"768":1,"769":2,"788":4,"925":1,"927":2,"928":3,"929":1,"942":1,"944":2,"945":3,"946":1,"982":1,"1033":1,"1088":1,"1090":1,"1091":1,"1107":1,"1387":2,"1389":2,"1393":2}}],["thousand",{"2":{"440":1}}],["thousands",{"2":{"440":1}}],["thought",{"2":{"363":1,"364":1}}],["though",{"2":{"328":1,"409":1}}],["thoroughly",{"2":{"173":1}}],["those",{"2":{"157":1,"257":1,"338":1,"356":1,"393":1,"419":1,"775":1,"1284":1,"1337":1}}],["thus",{"2":{"131":1,"929":1,"946":1,"1042":1}}],["throw",{"2":{"788":1}}],["throwaway",{"2":{"362":1}}],["throughout",{"2":{"249":1,"270":1}}],["through",{"2":{"37":1,"94":1,"267":1,"334":1,"335":1,"336":1,"360":1,"387":1,"493":1,"508":1,"894":1,"1051":1,"1130":1,"1138":1}}],["threads",{"0":{"555":1},"2":{"421":2,"555":2}}],["thresholds",{"2":{"650":1,"654":1}}],["threshold",{"2":{"282":3}}],["three",{"2":{"14":1,"192":1,"269":1,"285":1,"328":1,"430":1}}],["thanks",{"2":{"364":1}}],["than",{"2":{"35":1,"56":1,"90":1,"102":1,"109":1,"172":2,"195":1,"215":4,"227":1,"229":1,"231":1,"233":1,"235":1,"237":1,"239":1,"241":1,"257":1,"319":1,"325":1,"362":1,"384":1,"440":1,"454":1,"491":1,"574":1,"786":1,"787":1,"788":1,"1033":1,"1047":1,"1186":1,"1200":1,"1204":1,"1208":1,"1212":1,"1216":1,"1220":1,"1224":1,"1228":1,"1285":1,"1324":1,"1348":1,"1396":1}}],["that",{"0":{"975":1},"2":{"3":1,"8":1,"12":1,"14":5,"25":2,"33":1,"34":4,"35":4,"37":2,"43":1,"45":2,"54":1,"55":1,"57":3,"58":1,"62":3,"65":2,"67":1,"75":2,"76":2,"77":1,"78":2,"81":1,"82":1,"83":1,"84":2,"85":1,"86":2,"87":4,"89":1,"90":3,"93":1,"94":6,"95":1,"103":1,"104":1,"107":1,"108":2,"111":1,"115":1,"117":1,"119":1,"121":1,"127":1,"134":1,"139":1,"152":1,"158":1,"171":2,"172":2,"179":1,"183":2,"184":1,"185":3,"186":1,"188":2,"189":1,"192":2,"195":1,"197":1,"198":1,"248":4,"251":3,"252":1,"254":2,"256":1,"257":6,"258":1,"259":1,"262":4,"263":1,"264":2,"265":3,"266":4,"268":2,"269":3,"270":2,"271":1,"272":2,"273":2,"275":5,"276":1,"278":2,"279":1,"282":1,"307":1,"309":4,"311":1,"313":1,"314":1,"315":2,"316":1,"317":1,"319":1,"323":1,"325":3,"327":1,"328":11,"329":2,"333":1,"334":1,"335":1,"336":2,"339":1,"342":3,"345":2,"347":3,"348":1,"353":1,"355":3,"357":2,"362":3,"363":3,"364":4,"365":10,"369":1,"370":1,"374":1,"376":2,"379":1,"384":5,"386":5,"387":1,"388":1,"390":4,"391":1,"392":1,"393":2,"394":1,"395":2,"396":1,"397":1,"398":1,"402":1,"413":3,"414":7,"415":1,"416":2,"417":1,"419":2,"421":10,"432":1,"444":1,"446":1,"452":1,"466":1,"481":2,"486":1,"488":1,"492":1,"497":1,"508":1,"547":1,"561":1,"565":1,"573":1,"575":1,"633":2,"646":2,"651":1,"659":1,"664":2,"684":1,"689":1,"712":1,"759":2,"778":1,"779":6,"782":3,"783":4,"786":1,"787":13,"788":2,"797":1,"798":5,"802":1,"803":2,"804":5,"808":1,"809":3,"812":1,"816":1,"827":1,"842":3,"875":2,"876":1,"896":4,"924":1,"925":2,"926":3,"927":3,"928":6,"929":11,"930":1,"934":1,"941":1,"942":2,"943":3,"944":3,"945":6,"946":11,"949":1,"957":4,"965":1,"972":2,"975":1,"1007":1,"1008":1,"1012":1,"1023":1,"1033":5,"1039":1,"1050":1,"1051":1,"1052":4,"1055":1,"1056":1,"1057":1,"1069":2,"1081":1,"1086":3,"1087":5,"1088":3,"1089":3,"1091":1,"1107":2,"1130":2,"1134":1,"1138":2,"1142":1,"1151":3,"1268":1,"1284":1,"1285":1,"1288":1,"1321":1,"1334":1,"1337":1,"1351":1,"1353":2,"1380":1,"1392":1,"1406":1}}],["think",{"2":{"786":1}}],["thinks",{"2":{"285":1}}],["thing",{"2":{"374":1,"565":1,"821":1}}],["things",{"2":{"62":1,"118":1,"364":2,"375":1}}],["third",{"2":{"8":1,"248":1,"328":1,"476":1,"782":1,"787":1}}],["this",{"0":{"87":1,"104":1},"2":{"3":2,"7":1,"8":5,"10":1,"12":2,"18":4,"25":1,"31":1,"33":1,"35":11,"45":1,"51":1,"52":1,"54":1,"57":1,"58":1,"61":1,"62":5,"64":2,"67":3,"69":1,"72":1,"75":1,"77":1,"78":1,"79":1,"80":1,"81":2,"82":3,"83":5,"84":1,"85":2,"86":2,"87":1,"90":1,"93":3,"94":5,"95":5,"96":1,"102":2,"103":2,"104":2,"105":1,"106":7,"107":1,"115":4,"117":1,"128":1,"131":1,"151":1,"157":2,"175":1,"177":1,"185":1,"187":1,"188":3,"189":1,"190":1,"191":1,"192":3,"193":1,"195":3,"196":1,"197":1,"198":1,"199":1,"203":1,"204":1,"215":1,"216":1,"248":3,"249":1,"251":1,"253":1,"254":2,"257":6,"258":1,"259":1,"262":2,"263":1,"265":3,"266":2,"267":2,"268":11,"270":5,"271":2,"272":10,"273":3,"274":5,"275":13,"276":6,"278":1,"281":2,"282":1,"284":2,"285":4,"303":1,"305":1,"307":4,"308":2,"309":3,"311":2,"313":3,"314":3,"315":3,"316":3,"317":3,"319":2,"323":2,"325":1,"327":1,"328":6,"334":1,"336":1,"338":1,"340":1,"342":1,"345":2,"347":1,"348":1,"351":1,"352":1,"353":1,"355":1,"356":2,"357":3,"360":1,"361":2,"362":4,"363":3,"364":1,"367":1,"369":1,"375":2,"376":1,"378":4,"384":5,"386":2,"387":2,"388":2,"390":2,"392":2,"393":2,"394":3,"396":1,"398":4,"399":1,"402":1,"407":4,"408":1,"409":1,"410":4,"411":1,"413":2,"414":1,"415":1,"416":2,"419":1,"421":5,"427":1,"428":2,"430":1,"431":1,"433":1,"443":1,"444":4,"446":1,"447":1,"451":1,"452":2,"456":1,"459":2,"460":1,"475":1,"476":1,"479":1,"481":2,"492":3,"495":1,"507":1,"530":1,"561":1,"646":2,"655":1,"664":1,"665":3,"754":1,"778":1,"782":1,"783":9,"786":3,"787":4,"797":1,"802":2,"804":4,"808":5,"812":3,"816":3,"826":2,"841":1,"850":1,"875":2,"876":1,"880":1,"884":3,"892":1,"894":1,"898":1,"929":2,"930":1,"934":1,"946":2,"949":1,"957":1,"972":2,"1033":3,"1034":1,"1052":1,"1055":1,"1056":1,"1062":6,"1069":1,"1070":1,"1081":1,"1082":1,"1083":4,"1086":1,"1087":1,"1088":3,"1089":4,"1090":1,"1091":2,"1092":1,"1096":1,"1117":1,"1130":3,"1131":1,"1134":1,"1138":3,"1139":1,"1142":1,"1151":2,"1268":1,"1283":1,"1285":3,"1296":1,"1301":2,"1328":1,"1351":1,"1386":1,"1394":1,"1403":1}}],["theorem",{"2":{"187":1}}],["themselves",{"2":{"365":1}}],["them",{"2":{"69":1,"90":1,"94":1,"104":1,"106":1,"119":1,"187":1,"276":1,"277":1,"316":1,"333":2,"334":1,"336":1,"350":1,"352":1,"358":1,"359":1,"376":1,"382":1,"384":2,"386":1,"397":1,"416":1,"419":1,"495":1,"496":1,"507":1,"759":1,"782":1,"798":1,"928":1,"930":1,"931":1,"945":1,"947":1,"987":1,"1033":1,"1310":1}}],["then",{"2":{"44":1,"75":1,"90":2,"96":1,"111":1,"126":1,"185":1,"189":1,"190":1,"251":1,"254":1,"260":1,"262":2,"325":1,"339":1,"346":1,"356":2,"362":1,"365":1,"376":1,"378":1,"379":1,"390":1,"407":1,"409":1,"410":1,"414":2,"421":2,"432":1,"507":1,"543":1,"573":1,"574":4,"660":1,"702":1,"778":1,"787":1,"880":1,"884":1,"892":1,"929":1,"930":1,"931":1,"932":1,"946":1,"947":1,"960":2,"1033":1,"1034":1,"1038":1,"1074":2,"1087":4,"1130":3,"1138":3,"1392":1}}],["these",{"2":{"31":1,"35":1,"70":1,"75":1,"76":1,"85":1,"94":1,"107":1,"195":1,"250":1,"260":1,"262":1,"265":1,"266":3,"267":1,"277":1,"285":1,"309":1,"341":1,"347":1,"355":2,"359":1,"364":1,"365":2,"384":2,"392":1,"397":2,"400":1,"419":1,"422":1,"429":1,"448":1,"481":1,"497":1,"561":1,"574":1,"752":1,"798":1,"802":2,"803":1,"808":1,"895":1,"925":1,"930":1,"932":1,"942":1,"1264":1}}],["they",{"2":{"14":1,"87":1,"89":2,"119":1,"152":1,"188":1,"196":1,"197":1,"251":1,"253":1,"262":1,"265":2,"269":1,"272":1,"274":2,"285":1,"328":1,"356":1,"357":1,"375":1,"384":2,"391":1,"398":1,"431":1,"487":1,"759":1,"787":1,"798":1,"927":1,"930":1,"944":2,"1033":2,"1042":1,"1107":1,"1284":1}}],["therefore",{"2":{"77":1,"78":1,"85":1,"192":1,"197":1,"262":1,"342":1,"345":1,"362":1,"363":1,"787":1}}],["there",{"2":{"8":1,"25":1,"34":2,"45":2,"90":1,"93":1,"131":1,"178":1,"189":1,"194":1,"257":1,"264":1,"265":2,"328":2,"342":1,"352":1,"360":1,"384":1,"391":1,"407":1,"434":1,"495":1,"496":1,"508":1,"517":1,"574":1,"778":1,"782":1,"786":1,"787":1,"788":1,"880":1,"884":2,"892":1,"928":2,"945":2,"982":3,"1086":1,"1091":1,"1131":1,"1139":1,"1284":1,"1285":1,"1351":1}}],["their",{"2":{"7":1,"21":1,"34":2,"35":2,"67":2,"70":1,"80":1,"194":1,"248":1,"250":1,"266":1,"274":1,"281":1,"303":1,"398":1,"414":1,"416":1,"419":2,"432":2,"444":1,"875":1,"928":1,"932":1,"945":1,"1086":1,"1107":1,"1285":1}}],["the",{"0":{"42":1,"65":1,"76":1,"84":1,"94":1,"104":1,"105":1,"147":1,"160":1,"249":1,"373":1,"404":2,"407":1,"414":1,"417":1},"1":{"161":1,"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"415":1,"416":1},"2":{"0":1,"1":2,"3":2,"7":1,"8":7,"9":2,"10":2,"12":2,"13":24,"14":31,"15":7,"17":14,"18":7,"19":4,"20":4,"21":4,"22":1,"24":5,"25":22,"26":4,"27":2,"31":5,"34":10,"35":63,"36":8,"37":26,"39":1,"40":8,"41":2,"42":4,"43":13,"44":3,"45":25,"47":1,"48":3,"49":1,"50":1,"51":8,"54":4,"55":1,"56":3,"57":12,"58":2,"59":1,"60":1,"61":1,"62":19,"63":1,"64":7,"65":21,"66":1,"67":1,"69":6,"70":5,"72":2,"73":3,"74":3,"75":7,"76":7,"77":15,"78":19,"79":1,"81":2,"82":2,"83":7,"84":7,"85":10,"86":11,"87":6,"88":1,"89":3,"90":11,"91":1,"92":5,"93":10,"94":23,"95":11,"96":5,"101":1,"102":10,"104":4,"106":15,"107":6,"108":7,"109":5,"111":1,"115":15,"116":3,"117":6,"118":2,"119":1,"120":3,"121":4,"122":2,"123":1,"125":3,"126":3,"127":1,"128":2,"130":2,"131":2,"132":3,"133":6,"134":2,"141":2,"142":1,"149":1,"150":1,"151":8,"152":3,"154":4,"155":4,"156":1,"157":6,"158":3,"159":2,"161":2,"163":1,"164":2,"165":1,"167":1,"169":1,"171":3,"172":4,"173":3,"175":1,"176":1,"177":3,"178":1,"179":1,"180":1,"181":1,"183":3,"184":1,"185":1,"186":1,"187":4,"188":5,"189":2,"190":2,"191":2,"192":14,"193":1,"195":3,"196":3,"197":3,"198":7,"199":3,"202":2,"203":1,"215":2,"217":1,"246":1,"247":1,"248":3,"249":3,"251":15,"252":2,"253":6,"254":9,"255":1,"257":12,"258":6,"260":7,"262":7,"264":7,"265":9,"266":13,"268":23,"269":8,"270":13,"271":3,"272":14,"273":3,"274":4,"275":5,"276":7,"277":2,"278":3,"279":1,"280":1,"281":1,"282":11,"283":7,"284":3,"285":8,"289":11,"291":7,"292":12,"296":1,"297":1,"303":10,"304":1,"305":2,"307":10,"308":6,"309":8,"311":4,"313":3,"314":3,"315":4,"316":4,"317":3,"319":4,"323":14,"325":23,"327":8,"328":41,"329":8,"331":2,"332":2,"333":1,"334":3,"335":4,"336":2,"337":1,"338":4,"339":4,"340":3,"342":17,"344":7,"345":11,"347":8,"348":3,"350":1,"351":3,"352":2,"353":3,"354":1,"355":21,"356":18,"357":7,"358":1,"359":6,"360":1,"361":6,"362":13,"363":8,"364":7,"365":5,"367":3,"368":3,"369":3,"370":1,"371":2,"373":1,"374":2,"375":2,"376":5,"377":2,"378":14,"379":4,"382":3,"383":1,"384":18,"386":6,"387":8,"388":6,"390":4,"391":1,"392":7,"393":10,"394":11,"396":5,"397":5,"398":8,"399":3,"400":3,"401":1,"402":8,"403":3,"405":4,"407":9,"408":5,"409":4,"410":5,"411":5,"412":7,"413":4,"414":9,"415":2,"416":13,"417":6,"418":3,"419":14,"421":84,"422":2,"424":1,"426":2,"428":1,"429":3,"430":6,"431":8,"432":7,"433":6,"434":6,"435":1,"438":4,"439":2,"440":2,"441":2,"444":9,"445":1,"446":4,"447":4,"448":3,"451":1,"452":4,"453":4,"454":2,"456":4,"459":4,"461":1,"462":4,"463":4,"464":4,"465":3,"466":2,"467":1,"468":4,"469":4,"470":1,"471":2,"472":2,"473":2,"474":2,"476":1,"477":1,"478":2,"480":1,"481":4,"484":2,"486":7,"487":4,"488":3,"490":1,"491":1,"492":10,"493":1,"495":4,"496":8,"497":13,"498":2,"499":5,"500":1,"501":5,"502":3,"503":1,"504":2,"505":2,"506":3,"507":8,"508":1,"527":1,"529":1,"530":1,"531":1,"532":1,"533":2,"534":1,"535":2,"536":4,"537":1,"538":1,"539":1,"540":1,"541":1,"542":1,"543":1,"544":1,"547":2,"548":1,"553":1,"554":1,"555":1,"557":1,"558":2,"561":6,"562":1,"564":2,"565":5,"566":1,"567":3,"568":1,"569":1,"572":1,"573":1,"574":16,"575":1,"576":1,"577":1,"579":2,"580":1,"581":1,"582":2,"583":1,"586":1,"593":1,"594":1,"599":2,"601":5,"608":4,"620":4,"621":1,"622":2,"623":1,"624":4,"625":7,"626":3,"628":4,"629":9,"630":3,"637":2,"638":1,"642":1,"646":4,"650":5,"654":8,"659":5,"660":4,"664":5,"680":1,"681":1,"683":12,"684":8,"685":1,"689":8,"690":1,"694":1,"695":1,"702":2,"707":5,"708":4,"717":3,"724":5,"731":3,"738":3,"745":4,"751":3,"752":5,"754":1,"755":2,"758":2,"759":4,"766":4,"773":1,"775":8,"778":22,"782":16,"783":20,"786":15,"787":34,"788":4,"797":2,"798":11,"802":18,"803":7,"804":2,"807":26,"808":16,"809":13,"812":3,"816":3,"820":11,"821":2,"822":2,"826":12,"827":2,"828":2,"832":2,"835":2,"841":2,"842":4,"845":1,"850":3,"867":2,"870":1,"875":6,"876":3,"880":9,"884":12,"888":6,"892":4,"894":5,"895":5,"896":4,"897":2,"898":1,"901":1,"905":1,"909":1,"913":1,"917":1,"924":2,"925":7,"926":8,"927":5,"928":5,"929":40,"930":10,"931":5,"932":6,"934":2,"941":2,"942":7,"943":8,"944":7,"945":5,"946":42,"947":5,"949":2,"953":1,"957":1,"960":11,"965":1,"969":2,"972":3,"975":3,"976":2,"978":1,"979":2,"982":7,"987":2,"991":2,"996":1,"997":3,"1001":1,"1004":1,"1007":2,"1008":1,"1011":9,"1012":4,"1013":3,"1021":2,"1022":4,"1023":4,"1027":1,"1033":27,"1034":2,"1038":5,"1039":1,"1042":4,"1043":6,"1047":5,"1050":9,"1051":12,"1052":17,"1055":1,"1056":2,"1057":3,"1061":5,"1062":1,"1069":4,"1074":1,"1079":3,"1081":22,"1082":8,"1083":3,"1086":5,"1087":20,"1088":26,"1089":10,"1090":3,"1096":1,"1099":1,"1102":1,"1107":2,"1110":6,"1111":3,"1112":3,"1116":2,"1120":1,"1130":14,"1131":4,"1133":3,"1134":3,"1138":14,"1139":4,"1141":3,"1142":3,"1146":1,"1150":1,"1151":2,"1154":1,"1159":2,"1163":1,"1168":2,"1187":1,"1191":2,"1195":1,"1200":1,"1204":2,"1208":1,"1212":2,"1216":1,"1220":2,"1224":1,"1228":2,"1247":1,"1251":2,"1255":1,"1260":1,"1263":2,"1264":2,"1268":3,"1271":1,"1276":2,"1279":2,"1282":2,"1284":4,"1285":16,"1288":4,"1292":1,"1296":9,"1301":10,"1306":3,"1309":1,"1310":2,"1314":1,"1317":1,"1321":1,"1324":4,"1328":1,"1334":1,"1337":1,"1340":4,"1344":4,"1348":1,"1351":3,"1353":3,"1354":7,"1357":1,"1361":1,"1364":2,"1367":1,"1372":2,"1376":1,"1380":1,"1384":2,"1392":3,"1393":14,"1394":1,"1395":24,"1396":1,"1399":2,"1402":2,"1406":1}}],["toethsignedmessagehash",{"2":{"1056":2}}],["together",{"2":{"809":1}}],["touch",{"2":{"421":1,"803":1}}],["tour",{"0":{"84":1}}],["towards",{"2":{"311":1,"567":1}}],["tohexstring",{"2":{"251":2}}],["tostring",{"0":{"1105":1},"1":{"1106":1,"1107":1,"1108":1},"2":{"251":1,"379":1,"798":1,"1106":6,"1108":3,"1122":1}}],["tolerance",{"2":{"248":1}}],["totypeddatahash",{"2":{"172":1}}],["totalshares",{"2":{"172":1}}],["totalsupplyequalsshares",{"2":{"172":1}}],["totalsupply",{"2":{"133":1,"172":3,"264":2,"271":6,"273":1,"702":1}}],["totalassets",{"2":{"172":2,"264":1,"271":2}}],["totaldifficulty",{"2":{"84":1}}],["total",{"2":{"25":1,"56":1,"95":2,"96":2,"117":4,"133":1,"172":1,"257":3,"264":1,"328":1,"347":3,"392":1,"393":1,"394":1,"1288":1}}],["topic3",{"2":{"783":1}}],["topic2",{"2":{"783":1,"842":1}}],["topic1",{"2":{"783":1,"842":2,"988":1}}],["topic0",{"2":{"783":1}}],["topics",{"2":{"328":3,"782":2,"840":1,"842":11,"988":2}}],["topic",{"2":{"259":1,"263":1,"328":9,"384":2,"782":2}}],["top",{"2":{"102":2,"107":1,"798":1,"1061":1,"1328":1}}],["tokenaddress",{"2":{"1318":1}}],["tokenamount2",{"2":{"889":2}}],["tokenamount1",{"2":{"889":2}}],["token",{"2":{"76":1,"77":1,"78":6,"123":1,"133":1,"172":9,"188":1,"264":4,"271":1,"272":2,"273":3,"274":3,"275":4,"276":2,"309":5,"387":1,"392":1,"416":4,"702":1,"779":21,"783":2,"1052":13,"1151":1,"1287":2,"1288":1,"1395":1}}],["tokens",{"0":{"49":1},"2":{"43":1,"79":1,"81":2,"309":1,"378":1,"755":3,"1052":7,"1056":1,"1151":3,"1288":1}}],["took",{"2":{"386":1}}],["too",{"2":{"62":1,"115":1,"127":1,"482":1,"751":1}}],["toolwhat",{"2":{"134":1}}],["toolkit",{"2":{"134":1,"161":1,"365":1}}],["toolbox",{"2":{"106":4}}],["toolchains",{"2":{"402":1}}],["toolchain",{"2":{"99":1,"151":1,"156":1,"159":1,"176":1,"386":1}}],["tools",{"2":{"89":1,"134":2,"168":1,"170":2,"171":1,"248":1,"285":2,"455":1}}],["tooling",{"2":{"84":1,"86":1,"172":1}}],["tool",{"2":{"33":1,"55":1,"116":1,"135":1,"161":1,"164":1,"168":1,"172":1,"262":1,"359":1,"419":1,"926":1,"943":1}}],["tomlfile",{"2":{"859":1}}],["toml`",{"2":{"172":1,"412":2}}],["toml",{"0":{"59":1,"93":1,"108":1,"388":1,"946":1},"1":{"60":1,"61":1,"62":1,"63":1,"64":1,"109":1},"2":{"35":1,"58":1,"59":1,"93":1,"94":1,"102":1,"107":3,"108":2,"109":1,"119":1,"122":1,"125":1,"126":1,"127":1,"168":1,"172":6,"188":2,"194":1,"275":1,"284":2,"307":1,"308":1,"309":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"339":1,"346":1,"352":1,"353":1,"388":1,"397":1,"402":4,"407":3,"410":1,"412":2,"425":2,"444":1,"457":1,"459":1,"474":1,"484":1,"650":1,"654":1,"787":1,"803":1,"808":2,"820":1,"826":1,"857":2,"858":1,"859":3,"934":1,"937":2,"938":1,"939":6,"941":3,"942":3,"944":2,"945":3,"946":8,"947":4,"949":1,"973":1,"978":1,"1022":1,"1023":1,"1033":1,"1051":1,"1138":7,"1141":4,"1142":6}}],["to",{"0":{"49":1,"88":1,"95":1,"96":1,"106":1,"107":1,"404":1,"414":1,"931":1,"947":1},"1":{"415":1,"416":1},"2":{"1":2,"3":2,"5":1,"7":1,"8":5,"10":1,"12":2,"13":5,"14":9,"15":2,"17":3,"18":2,"19":1,"20":1,"21":3,"24":4,"25":6,"27":3,"33":2,"34":9,"35":22,"36":2,"37":6,"40":7,"42":1,"43":10,"44":2,"45":15,"48":1,"51":2,"54":4,"56":3,"57":6,"58":1,"59":4,"60":2,"61":3,"62":2,"64":3,"65":3,"66":1,"67":6,"69":1,"70":2,"71":1,"72":1,"74":2,"75":5,"76":2,"77":3,"78":3,"79":3,"81":2,"82":3,"83":5,"84":1,"85":5,"86":5,"87":7,"88":2,"89":1,"90":3,"91":2,"92":6,"93":2,"94":8,"95":10,"96":3,"97":1,"99":1,"100":1,"101":2,"102":4,"103":1,"104":7,"105":2,"106":7,"107":3,"108":2,"109":3,"115":8,"116":3,"117":4,"118":2,"119":1,"120":3,"121":5,"122":3,"123":2,"125":2,"126":2,"127":2,"131":2,"133":1,"134":1,"138":2,"143":1,"144":1,"149":1,"151":3,"152":2,"154":1,"155":1,"156":1,"157":1,"158":5,"163":1,"165":1,"169":1,"171":3,"172":16,"173":3,"177":1,"179":8,"180":4,"181":4,"182":4,"183":8,"184":5,"186":1,"187":3,"188":9,"189":1,"190":4,"191":1,"192":10,"194":2,"195":4,"196":1,"197":2,"198":4,"199":2,"200":2,"202":2,"215":5,"219":1,"221":1,"223":1,"225":1,"231":1,"233":1,"239":1,"241":1,"243":1,"245":1,"246":1,"248":2,"249":2,"250":1,"251":1,"252":1,"253":2,"254":1,"255":1,"257":9,"258":2,"259":1,"260":9,"262":7,"263":1,"264":2,"265":8,"266":7,"267":4,"268":12,"269":4,"270":3,"271":3,"272":8,"273":1,"274":2,"275":4,"276":1,"277":2,"281":3,"282":7,"283":2,"284":6,"285":6,"289":7,"291":2,"303":4,"307":8,"308":3,"309":4,"311":3,"313":4,"314":3,"315":3,"316":3,"317":4,"319":2,"323":5,"325":2,"327":2,"328":20,"329":6,"333":1,"334":2,"335":2,"336":1,"337":3,"338":6,"339":2,"340":1,"341":2,"342":8,"344":1,"345":3,"346":1,"347":1,"348":1,"349":2,"351":1,"352":3,"353":1,"354":1,"355":6,"356":8,"357":3,"358":2,"359":3,"360":1,"361":3,"362":9,"363":7,"364":5,"365":3,"367":2,"368":2,"369":1,"370":2,"371":1,"374":2,"375":1,"376":2,"378":3,"379":2,"382":1,"383":1,"384":12,"386":6,"387":6,"388":1,"390":2,"391":3,"392":4,"393":2,"394":3,"396":2,"397":6,"398":8,"399":2,"400":3,"401":2,"402":2,"403":2,"405":1,"407":6,"408":1,"409":4,"410":1,"412":4,"413":1,"414":16,"415":2,"416":4,"417":2,"419":7,"421":42,"422":1,"425":1,"426":3,"427":1,"428":3,"429":1,"430":3,"432":3,"435":1,"437":1,"442":1,"443":1,"444":3,"446":2,"447":3,"448":1,"449":1,"450":1,"451":1,"452":4,"454":1,"455":1,"456":2,"457":1,"459":2,"461":1,"462":2,"463":2,"464":2,"465":2,"466":1,"467":1,"468":2,"469":2,"470":1,"471":1,"472":1,"473":1,"474":1,"475":1,"476":3,"477":1,"479":2,"480":2,"481":5,"482":1,"483":1,"484":3,"485":1,"486":1,"487":1,"488":1,"490":1,"491":2,"493":2,"494":2,"495":2,"496":4,"497":3,"499":2,"500":1,"501":2,"502":1,"503":2,"504":1,"507":7,"508":2,"527":1,"529":1,"530":2,"536":3,"542":1,"543":2,"546":1,"549":1,"550":1,"551":1,"552":1,"553":1,"554":1,"555":1,"556":1,"561":1,"562":1,"564":1,"565":1,"568":1,"569":1,"570":1,"572":1,"573":3,"574":1,"576":2,"580":1,"581":1,"582":2,"584":1,"586":1,"608":3,"613":12,"618":1,"623":1,"625":2,"629":4,"633":1,"646":2,"654":2,"659":3,"665":1,"679":1,"680":3,"681":2,"684":1,"689":1,"694":1,"702":2,"707":1,"717":1,"724":1,"731":1,"738":1,"745":1,"751":1,"752":4,"754":1,"755":1,"758":1,"759":1,"766":1,"773":1,"775":6,"778":8,"782":4,"783":4,"786":4,"787":13,"788":7,"797":3,"798":6,"802":14,"804":8,"808":6,"809":6,"812":3,"816":3,"820":4,"821":1,"822":1,"826":7,"828":1,"842":1,"855":1,"859":1,"864":1,"875":2,"880":4,"884":6,"888":2,"892":4,"893":2,"894":2,"895":2,"897":2,"924":1,"925":6,"926":3,"927":1,"928":2,"929":14,"930":6,"931":6,"932":4,"934":1,"941":1,"942":7,"943":3,"944":7,"945":3,"946":15,"947":6,"949":1,"957":1,"960":3,"965":1,"972":4,"973":1,"975":3,"976":1,"978":2,"979":4,"982":3,"987":2,"991":2,"997":2,"1001":2,"1011":4,"1012":1,"1021":1,"1022":2,"1023":4,"1033":17,"1034":5,"1038":2,"1039":1,"1050":4,"1051":7,"1052":25,"1055":1,"1057":1,"1061":2,"1079":2,"1081":9,"1082":2,"1086":3,"1088":2,"1089":1,"1090":2,"1099":1,"1107":2,"1117":1,"1130":8,"1131":2,"1138":8,"1139":2,"1151":6,"1154":1,"1159":1,"1163":1,"1168":1,"1187":1,"1191":1,"1200":1,"1204":1,"1216":1,"1220":1,"1247":1,"1251":1,"1263":2,"1264":1,"1268":2,"1271":1,"1276":1,"1279":2,"1282":1,"1284":5,"1285":9,"1287":3,"1296":3,"1301":5,"1310":2,"1318":1,"1321":1,"1324":2,"1334":1,"1337":1,"1348":1,"1353":4,"1354":1,"1361":1,"1372":1,"1380":1,"1392":1,"1393":4,"1394":2,"1395":11,"1402":2,"1406":1}}],["t",{"0":{"176":1,"179":1,"180":1},"2":{"0":1,"12":1,"17":1,"20":1,"26":1,"35":2,"42":1,"55":1,"56":1,"57":1,"62":1,"64":1,"76":1,"77":1,"78":1,"82":1,"83":2,"85":1,"86":1,"106":4,"107":1,"117":1,"132":1,"151":1,"157":2,"172":6,"187":1,"192":4,"195":1,"257":4,"262":1,"265":1,"282":1,"283":2,"309":1,"328":10,"347":5,"356":1,"357":1,"362":1,"364":1,"367":1,"382":4,"384":1,"386":4,"390":1,"394":1,"396":1,"402":1,"409":1,"414":1,"418":1,"421":1,"431":2,"623":1,"627":1,"665":4,"759":1,"783":1,"786":1,"788":1,"798":1,"802":1,"842":1,"929":1,"932":1,"935":1,"946":1,"975":1,"1042":2,"1043":3,"1050":1,"1070":3,"1089":1,"1283":1,"1394":1,"1395":1}}],["cvc4",{"2":{"504":1}}],["cse",{"2":{"495":1}}],["c`",{"2":{"412":1}}],["central",{"0":{"407":1,"414":1,"417":1},"1":{"415":1,"416":1},"2":{"407":1,"408":1,"414":3,"415":1,"416":1,"417":3}}],["cei",{"2":{"172":1}}],["certain",{"0":{"417":1},"2":{"15":5,"78":1,"248":1,"253":1,"257":1,"260":1,"265":2,"278":1,"355":1,"357":1,"363":1,"408":1,"417":1,"651":1,"654":1,"926":1,"943":1,"1271":1,"1276":1,"1327":1}}],["c++",{"2":{"154":1}}],["cmds",{"2":{"249":4}}],["cmd",{"2":{"151":1,"798":2}}],["cyfrin",{"2":{"116":1}}],["cyan",{"2":{"37":2,"355":1}}],["circumvent",{"2":{"884":1}}],["ci",{"0":{"100":1,"101":1,"156":1},"2":{"100":1,"101":1,"108":2,"109":1,"115":1,"156":1,"168":1,"172":1,"386":1,"387":1,"391":1,"444":2}}],["cbor",{"2":{"59":1,"62":1}}],["cpu",{"2":{"56":2,"85":1,"257":6,"328":2,"347":6,"394":2}}],["ctrl",{"2":{"41":2}}],["crop",{"2":{"609":1}}],["cross",{"2":{"168":1,"248":1}}],["crate",{"2":{"929":1,"946":1}}],["crates",{"2":{"155":4,"407":1,"410":1,"414":1}}],["crawl",{"2":{"419":1}}],["crawler",{"2":{"419":1}}],["cryptographic",{"2":{"250":1}}],["cryptography",{"2":{"188":2,"252":1,"1056":1}}],["crytic",{"2":{"35":1,"115":2}}],["criteria",{"2":{"152":1,"325":1}}],["credentials",{"2":{"87":1}}],["creating",{"0":{"85":1,"86":1,"394":1},"2":{"185":1,"358":1,"397":1,"802":2}}],["creationcode",{"2":{"1091":1}}],["creationtransaction",{"2":{"393":1}}],["creations",{"2":{"94":1}}],["creation",{"2":{"15":1,"25":1,"65":1,"94":1,"393":1,"820":1}}],["creator",{"2":{"25":1,"1088":1}}],["createwallet",{"0":{"692":1},"1":{"693":1,"694":1,"695":1,"696":1,"697":1,"698":1,"699":1},"2":{"693":3,"697":1,"698":1,"699":1,"838":1,"1057":1,"1122":1}}],["createproxy",{"2":{"378":1}}],["createfork",{"0":{"682":1},"1":{"683":1,"684":1,"685":1,"686":1},"2":{"342":2,"344":2,"345":2,"638":2,"639":1,"683":3,"685":2,"691":1,"800":1,"875":1,"877":1,"1009":1,"1013":2,"1014":1,"1027":1,"1028":1,"1029":1,"1112":1,"1113":1}}],["creates",{"2":{"93":1,"344":1,"345":2,"393":1,"394":1,"604":1,"683":3,"684":1,"689":1,"694":1,"1340":1,"1344":1}}],["createselectfork",{"0":{"687":1},"1":{"688":1,"689":1,"690":1,"691":1},"2":{"44":4,"342":1,"344":1,"686":1,"688":3,"690":2,"775":1,"800":1,"978":1}}],["created",{"2":{"15":1,"57":1,"79":1,"80":1,"88":1,"92":2,"94":2,"262":1,"342":2,"344":1,"347":1,"357":1,"414":1,"416":2,"507":1,"808":1,"932":1,"1027":1,"1028":1,"1081":3,"1082":1,"1086":3,"1087":2,"1088":1,"1090":1,"1340":1,"1344":1}}],["createaccesslist",{"2":{"12":1}}],["create2deployerall0x7109709ecfa91a80626ff3989d68f67f5b1dd12d",{"2":{"1264":1}}],["create2",{"0":{"10":1,"57":1,"64":1},"2":{"10":2,"17":2,"57":4,"58":3,"64":5,"65":4,"162":1,"266":1,"268":1,"378":2,"421":4,"618":1}}],["create",{"0":{"344":1,"1091":1},"2":{"5":1,"7":1,"27":1,"43":3,"44":2,"45":1,"57":1,"64":1,"65":2,"75":1,"76":1,"83":1,"86":1,"89":1,"93":1,"106":4,"108":1,"129":2,"136":1,"148":1,"173":1,"185":2,"189":1,"192":1,"266":1,"268":1,"290":1,"337":1,"342":1,"344":1,"345":1,"378":3,"394":1,"397":1,"414":2,"415":1,"421":2,"457":1,"609":1,"664":1,"685":2,"690":2,"804":1,"821":2,"876":1,"1008":1,"1033":1,"1069":1,"1079":1,"1085":1,"1086":2,"1087":2,"1088":3,"1091":1}}],["cd",{"2":{"35":1,"56":1,"115":1,"116":1,"136":1,"155":1,"168":1,"172":1,"394":1}}],["cc",{"2":{"35":2}}],["c",{"2":{"35":2,"40":2,"85":1,"158":1,"195":3,"311":2,"323":1,"782":4,"786":2,"809":2}}],["clauses",{"2":{"501":1}}],["claude",{"2":{"172":1}}],["clarity",{"2":{"373":1,"787":1}}],["clarifying",{"2":{"172":1}}],["clashes",{"2":{"266":1}}],["claim",{"2":{"92":1,"775":1}}],["clean",{"2":{"162":1,"287":1,"326":1,"339":1,"354":2,"365":1,"470":1}}],["clearmockedcalls",{"0":{"671":1},"1":{"672":1,"673":1},"2":{"672":1,"770":1,"880":1,"884":1,"888":1}}],["clearer",{"2":{"171":1}}],["clears",{"2":{"35":2,"673":1}}],["clearcache",{"2":{"35":2}}],["clear",{"2":{"31":1,"35":6,"172":1,"339":1,"384":1,"888":1}}],["cloning",{"2":{"393":1}}],["cloned",{"2":{"393":1}}],["clones",{"2":{"393":1}}],["clone",{"0":{"393":1},"2":{"155":2,"322":1,"393":6}}],["closefile",{"2":{"802":1}}],["closes",{"2":{"802":1}}],["closed",{"2":{"386":1}}],["close",{"2":{"253":1,"262":1}}],["cloud",{"2":{"87":1}}],["client",{"2":{"611":1}}],["clientversion",{"2":{"12":1}}],["clifftime",{"2":{"102":1}}],["click",{"2":{"62":1}}],["cli",{"2":{"43":1,"116":1,"151":1,"170":4,"183":1,"251":2,"341":1,"407":1}}],["cut",{"2":{"390":2}}],["curated",{"2":{"170":1}}],["curl",{"2":{"100":1,"151":1}}],["currentowner",{"2":{"1284":1}}],["currentactor",{"2":{"172":13,"276":5}}],["currently",{"2":{"13":1,"14":3,"131":1,"151":1,"285":1,"330":1,"342":1,"391":1,"413":1,"419":1,"637":2,"638":1,"778":1,"875":1,"880":1,"884":1,"892":1,"932":1,"1012":1,"1013":1,"1042":1}}],["current",{"2":{"13":2,"14":1,"35":20,"37":7,"42":1,"172":2,"194":1,"195":1,"283":1,"303":2,"323":2,"414":1,"426":1,"453":1,"650":1,"654":1,"782":1,"807":5,"808":1,"812":3,"816":3,"845":1,"850":1,"969":1,"982":1,"1001":1,"1021":1,"1047":1,"1050":1,"1081":1,"1088":2,"1110":2,"1111":1}}],["custody",{"2":{"85":1}}],["customgroup",{"2":{"809":4}}],["customcontract",{"2":{"195":4}}],["customerror",{"2":{"195":4,"788":3,"881":3}}],["customized",{"2":{"266":2}}],["customize",{"2":{"108":1,"168":1,"173":1,"397":1}}],["custom",{"0":{"13":1,"775":1},"2":{"3":1,"67":1,"115":1,"117":1,"141":1,"172":1,"185":1,"246":1,"248":1,"291":1,"408":4,"775":1,"783":1,"787":3,"788":3,"809":1,"880":1,"881":1,"1395":1}}],["cups",{"2":{"18":1}}],["coerce",{"2":{"928":2,"945":2}}],["coercion",{"0":{"928":1,"945":1}}],["copied",{"2":{"681":1,"1087":1}}],["copies",{"2":{"681":1}}],["copystorage",{"0":{"678":1},"1":{"679":1,"680":1,"681":1},"2":{"679":1,"681":2,"1122":1}}],["copying",{"0":{"369":1},"2":{"172":1,"181":1,"319":1,"369":1}}],["copy",{"2":{"51":1,"69":1,"77":1,"78":1,"85":2,"86":2,"119":1,"155":1,"342":1,"391":1,"680":1,"681":7}}],["costs",{"2":{"285":1,"957":1}}],["cost",{"2":{"284":3,"285":1,"492":3,"564":1}}],["covering",{"2":{"164":1}}],["coverage`",{"2":{"172":1,"844":1}}],["coverage",{"0":{"199":1},"2":{"117":5,"131":1,"138":3,"172":1,"193":1,"199":2,"324":1,"364":1,"421":2,"844":2}}],["cover",{"2":{"84":1,"104":1}}],["covers",{"2":{"7":1}}],["counts",{"2":{"633":1,"991":1}}],["countdisable",{"2":{"453":1}}],["counting",{"2":{"393":1,"1324":1}}],["count++",{"2":{"328":1}}],["count",{"2":{"117":1,"328":4,"355":2,"681":5,"777":2,"778":8,"785":6,"787":4,"893":10}}],["counterpart",{"2":{"1007":1}}],["counterfactory",{"2":{"517":1}}],["counterfactual",{"2":{"57":1}}],["counterlockfixture",{"2":{"106":3}}],["counterexamples",{"2":{"352":1}}],["counterexample",{"2":{"85":1,"257":1,"353":1}}],["countertest",{"2":{"56":1,"128":1,"347":1,"394":1}}],["counterscript",{"2":{"44":3,"94":4,"95":2,"96":1,"129":1}}],["counter",{"2":{"25":1,"37":1,"44":4,"56":5,"58":1,"62":3,"65":6,"85":3,"86":4,"91":2,"92":1,"94":14,"95":10,"96":5,"106":16,"115":6,"117":2,"128":9,"129":2,"130":5,"136":3,"138":1,"262":1,"347":1,"394":1,"402":3,"507":6,"517":2,"681":5,"787":4,"893":13,"1039":9}}],["could",{"2":{"88":1,"115":1,"183":1,"184":1,"185":1,"190":1,"193":1,"194":3,"195":1,"196":1,"197":1,"254":1,"260":1,"270":1,"309":1,"311":1,"929":1,"946":1}}],["coursepatrick",{"2":{"97":1}}],["course",{"2":{"85":1,"97":1,"104":1,"254":1,"264":1,"265":1,"266":1,"387":1,"928":1,"945":1}}],["coupled",{"2":{"925":1,"942":1}}],["couple",{"2":{"68":1,"106":1,"118":1}}],["collins",{"2":{"363":1}}],["collinsfoundry",{"2":{"97":1}}],["colliding",{"2":{"13":1}}],["collect",{"2":{"421":1,"586":1}}],["collecting",{"2":{"393":1,"1095":1}}],["collection",{"2":{"175":1,"329":1,"1353":1}}],["collected",{"2":{"90":2}}],["collects",{"2":{"90":1}}],["colors",{"2":{"355":1}}],["color",{"2":{"37":1,"355":1,"929":9,"946":12}}],["colon",{"2":{"34":1}}],["corrupted",{"2":{"1321":2}}],["correctness",{"2":{"302":1}}],["correctly",{"2":{"67":1,"75":1,"104":1,"106":2,"172":1,"309":1,"759":1,"929":1,"946":1}}],["correct",{"0":{"374":1},"2":{"49":1,"50":1,"77":1,"78":1,"194":1,"305":1,"307":1,"308":1,"309":1,"311":1,"313":1,"314":1,"315":2,"316":1,"317":1,"319":2,"364":1,"926":1,"943":1}}],["corresponds",{"2":{"787":1}}],["correspond",{"2":{"35":1,"787":1,"924":1,"929":1,"941":1,"946":1}}],["corresponding",{"2":{"31":1,"419":1,"996":1,"1011":2,"1027":1,"1285":2}}],["cores",{"2":{"421":1,"555":1}}],["core",{"2":{"164":1,"172":3,"248":1,"419":1,"1395":3}}],["coreadd",{"2":{"102":1}}],["cors",{"2":{"20":3}}],["coinbase`",{"2":{"421":1}}],["coinbase",{"0":{"539":1,"674":1},"1":{"675":1,"676":1,"677":1},"2":{"13":1,"25":2,"292":2,"338":1,"421":1,"539":3,"675":1,"676":1,"677":3,"770":1}}],["codehash",{"2":{"1087":1}}],["codesize",{"2":{"588":1,"1087":1}}],["codes",{"0":{"482":1,"801":1},"1":{"802":1,"803":1,"804":1},"2":{"289":3,"334":1,"355":1,"362":1,"421":3,"482":3,"803":1}}],["coder",{"2":{"192":1}}],["codebases",{"2":{"163":1}}],["codebase",{"2":{"87":1,"253":1,"359":1,"897":1}}],["code",{"0":{"371":1},"2":{"13":1,"15":1,"19":3,"27":2,"31":1,"33":4,"34":2,"35":3,"37":1,"45":1,"57":1,"65":1,"66":1,"82":2,"84":3,"85":5,"86":4,"87":2,"94":1,"95":2,"106":2,"116":1,"117":2,"118":1,"120":1,"121":1,"162":1,"168":1,"171":1,"172":5,"173":1,"194":1,"198":1,"248":1,"265":1,"289":1,"305":1,"313":1,"325":1,"337":1,"341":1,"342":1,"355":1,"364":4,"365":3,"370":1,"371":4,"378":1,"386":2,"393":2,"416":1,"430":2,"432":2,"438":1,"439":1,"440":1,"441":1,"452":2,"453":3,"482":2,"492":6,"506":1,"588":1,"646":1,"772":1,"773":1,"774":4,"775":1,"782":1,"797":1,"808":1,"809":3,"821":3,"826":1,"827":5,"884":2,"895":1,"957":1,"960":1,"1050":1,"1051":1,"1052":10,"1087":1,"1088":2,"1091":1}}],["concatenated",{"2":{"1285":1}}],["concat",{"2":{"379":4,"618":1,"929":1,"931":1,"932":1,"946":1,"947":1}}],["concept",{"2":{"272":1}}],["concepts",{"2":{"172":1}}],["concerned",{"2":{"87":1}}],["conversion",{"0":{"613":1},"2":{"944":4,"1138":2}}],["converted",{"2":{"946":3,"1107":1,"1285":2}}],["convert",{"2":{"798":1,"930":1,"1107":1,"1285":2,"1324":1}}],["converttoshares",{"2":{"271":2}}],["converting",{"2":{"257":1,"391":1,"930":1,"942":1}}],["convenient",{"2":{"327":1}}],["convenience",{"2":{"323":1}}],["convention",{"2":{"313":1,"314":1,"315":1,"316":1,"317":1,"347":1,"384":1}}],["conventions",{"2":{"172":3,"384":1}}],["conflict",{"2":{"398":2}}],["conflicts",{"0":{"398":1},"2":{"398":1,"521":1,"522":1,"523":1,"524":1,"525":1,"526":1}}],["conflicting",{"0":{"198":1},"2":{"193":1,"198":1}}],["confusing",{"2":{"199":1}}],["confusion",{"2":{"196":1}}],["confirming",{"2":{"248":1}}],["confirms",{"2":{"95":1}}],["confident",{"2":{"86":1}}],["confidence",{"2":{"67":1,"87":1,"275":1,"376":1,"564":1}}],["configs",{"0":{"446":1,"447":1},"2":{"259":1,"263":1,"444":2,"446":1,"447":1}}],["configurable",{"2":{"268":1,"302":1,"412":1,"495":1,"508":1,"517":1}}],["configurations",{"2":{"107":2,"266":2,"405":1,"444":2,"445":1}}],["configuration",{"0":{"168":1,"421":1,"444":1,"448":1,"452":1,"457":1,"459":1,"460":1,"973":1},"1":{"445":1,"446":1,"447":1,"449":1,"450":1,"451":1,"453":1,"454":1},"2":{"13":1,"18":1,"26":1,"32":1,"64":2,"88":1,"102":1,"107":1,"108":3,"109":1,"115":1,"127":1,"158":1,"168":1,"170":3,"172":7,"191":2,"194":2,"258":1,"259":1,"262":1,"263":1,"270":2,"307":2,"308":2,"309":2,"311":2,"313":2,"314":2,"315":2,"316":2,"317":2,"319":2,"346":2,"407":1,"410":1,"413":1,"420":1,"422":1,"428":3,"429":1,"430":1,"431":1,"432":2,"433":1,"434":1,"444":1,"448":1,"455":1,"456":1,"458":1,"459":2,"460":2,"461":1,"471":1,"472":1,"481":1,"490":1,"496":1,"497":1,"507":4,"527":1,"563":1,"574":2,"622":1,"787":1,"808":1,"973":1}}],["configuring",{"0":{"59":1,"93":1,"108":1,"259":1,"263":1},"1":{"60":1,"61":1,"62":1,"63":1,"64":1,"109":1,"260":1},"2":{"58":1,"96":1,"115":1,"339":1,"341":1,"430":1,"431":1,"434":1}}],["configures",{"2":{"357":1,"362":1,"393":1,"421":1,"508":1,"803":1}}],["configured",{"2":{"58":1,"108":1,"195":1,"346":1,"357":2,"497":1,"775":1,"798":1,"1021":2,"1022":2}}],["configure",{"0":{"388":1},"2":{"44":1,"59":1,"61":1,"104":1,"109":2,"121":1,"172":4,"284":1,"402":3,"455":1,"457":1,"507":1,"650":1,"654":1,"775":1,"896":1}}],["config",{"0":{"19":1,"420":1,"455":1},"1":{"456":1,"457":1,"458":1,"459":1,"460":1},"2":{"13":1,"20":1,"35":3,"106":4,"107":1,"112":6,"115":6,"117":3,"168":1,"170":1,"172":2,"183":2,"195":1,"201":1,"259":2,"263":2,"303":3,"307":1,"308":1,"309":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"320":1,"322":1,"323":2,"346":1,"352":2,"353":2,"356":1,"369":1,"388":2,"407":3,"408":1,"410":4,"411":3,"412":3,"413":1,"421":1,"444":5,"445":3,"446":5,"447":6,"452":1,"459":1,"574":1,"787":1,"808":1,"947":4,"1024":2}}],["connect",{"2":{"190":2}}],["connection",{"0":{"190":1},"2":{"190":2}}],["connections",{"2":{"9":1,"291":1}}],["connecting",{"2":{"15":1}}],["conditionally",{"2":{"1061":1}}],["conditional",{"0":{"265":1},"2":{"265":1}}],["conditions",{"2":{"264":1,"278":1,"506":1}}],["condition",{"2":{"215":2,"217":2,"265":2,"356":1,"376":1,"384":2}}],["condition`",{"2":{"172":2}}],["conditionnotmet",{"2":{"172":1}}],["consuming",{"2":{"808":1}}],["consumption",{"2":{"138":1,"930":1}}],["consumes",{"2":{"285":1,"788":1}}],["consumed",{"2":{"283":1,"842":1,"930":1}}],["consume",{"2":{"42":1,"281":1,"285":2,"841":1,"1086":1,"1285":1}}],["console2",{"2":{"329":4,"786":1,"929":2,"946":2,"1353":4}}],["console",{"0":{"181":1,"197":1,"1284":1,"1285":1},"1":{"1285":1},"2":{"94":2,"172":6,"179":1,"181":5,"193":1,"197":7,"329":8,"367":1,"446":1,"573":2,"1075":4,"1264":1,"1284":18,"1285":6,"1353":5,"1354":5}}],["consistency",{"2":{"313":1,"317":1}}],["consistent",{"2":{"63":1,"254":1,"384":1}}],["consistently",{"2":{"25":1}}],["consists",{"2":{"134":1,"330":1}}],["considered",{"2":{"347":1,"365":1,"402":1,"659":1,"787":1,"803":1,"1088":1}}],["considerations",{"2":{"162":1,"172":1}}],["consider",{"2":{"54":1,"85":1,"115":1,"172":2,"260":1,"359":2,"365":1,"375":1,"384":1,"387":2,"897":1,"1131":1,"1139":1}}],["construction",{"2":{"1296":1,"1301":1}}],["construct",{"2":{"507":1,"1052":3}}],["constructorarguments",{"2":{"393":1}}],["constructor",{"2":{"43":4,"45":4,"102":1,"129":1,"172":2,"192":1,"271":2,"328":1,"358":1,"362":1,"384":2,"393":1,"482":1,"1052":1,"1091":1,"1092":1,"1151":1}}],["constrained",{"2":{"501":1}}],["const",{"0":{"316":1},"2":{"106":6,"307":2}}],["constantcondition",{"2":{"506":1}}],["constantoptimizer",{"2":{"495":1}}],["constants",{"2":{"172":1,"307":1,"316":2,"317":1,"356":1,"384":1,"1395":1}}],["constantinople",{"2":{"57":1}}],["constant",{"2":{"27":1,"77":2,"130":1,"172":2,"254":1,"315":1,"316":8,"358":1,"775":1,"812":2,"816":2,"1052":8,"1395":1}}],["consensus",{"2":{"25":1}}],["contact",{"2":{"419":1}}],["containing",{"2":{"329":1,"431":1,"975":1}}],["contain",{"2":{"43":1,"109":1,"158":1,"466":1,"1023":1,"1043":2,"1086":1,"1285":1}}],["containerized",{"2":{"84":1,"162":1}}],["container",{"2":{"24":1,"84":2,"85":2,"86":2,"88":2,"157":1,"355":1}}],["contains",{"2":{"15":1,"108":1,"158":1,"249":1,"254":1,"255":1,"329":1,"363":1,"393":1,"394":1,"395":1,"414":1,"421":2,"798":1,"1089":1,"1353":1,"1396":1}}],["continues",{"2":{"308":1}}],["continuous",{"0":{"98":1},"1":{"99":1,"100":1},"2":{"168":1,"255":1}}],["contexts",{"2":{"398":2,"1089":1}}],["context",{"2":{"90":1,"172":3,"198":1,"377":1,"444":1,"473":4,"844":10,"845":1,"1079":1,"1086":3,"1087":2,"1088":2,"1089":3,"1090":4}}],["content",{"0":{"494":1},"2":{"14":1,"352":1,"353":1,"494":1,"802":2}}],["contents",{"2":{"13":1,"72":1,"94":1,"802":1}}],["contribute",{"2":{"256":1}}],["contribution",{"2":{"169":1}}],["contributing",{"0":{"169":1},"2":{"169":1,"402":1,"897":1}}],["controls",{"2":{"172":1,"173":1,"360":1,"430":1,"431":1,"432":1,"433":3,"434":1}}],["control",{"2":{"65":1,"92":1,"141":2,"172":1,"348":1,"444":1,"808":1,"1090":1}}],["controlled",{"2":{"57":1,"139":1,"172":1,"259":1,"263":1}}],["contrast",{"2":{"57":1,"492":1}}],["contractfile",{"2":{"820":2,"826":2,"1296":2,"1301":2}}],["contractaddress",{"2":{"775":2,"932":1}}],["contracta",{"2":{"499":1}}],["contractbtest",{"2":{"347":1,"356":1}}],["contractb",{"2":{"347":2,"499":1}}],["contracttest",{"2":{"195":2,"202":1,"329":1,"357":1,"1354":1}}],["contract`",{"2":{"172":1}}],["contractname",{"2":{"45":1,"820":1,"826":1,"932":1,"1296":1,"1301":1}}],["contract",{"0":{"45":1,"65":1,"92":1,"143":1,"269":1,"366":1,"393":1,"433":1,"551":1,"552":1},"1":{"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"93":1,"94":1,"95":1,"96":1,"367":1,"368":1,"369":1,"370":1,"371":1},"2":{"13":3,"15":2,"19":1,"27":2,"31":1,"34":1,"35":9,"43":6,"44":3,"45":14,"54":2,"57":1,"62":2,"64":1,"65":8,"66":1,"77":1,"78":1,"82":1,"86":1,"87":1,"90":2,"91":1,"92":1,"94":13,"95":8,"96":1,"97":2,"102":1,"106":2,"115":1,"117":1,"126":1,"128":2,"129":1,"132":1,"142":1,"143":1,"146":1,"148":1,"159":1,"162":2,"163":1,"164":1,"165":1,"168":1,"172":21,"173":1,"182":1,"185":6,"192":6,"194":1,"195":3,"202":2,"218":1,"249":2,"254":1,"257":5,"264":3,"266":5,"268":2,"270":4,"271":4,"272":5,"276":1,"281":1,"282":1,"284":3,"285":3,"289":1,"290":1,"307":1,"308":1,"309":3,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"325":3,"328":7,"329":2,"333":1,"335":4,"342":3,"344":1,"345":12,"347":4,"355":4,"356":7,"357":2,"358":3,"359":1,"362":1,"364":1,"378":1,"382":1,"384":10,"387":1,"390":5,"391":1,"392":1,"393":5,"394":2,"397":2,"402":1,"421":5,"433":14,"434":2,"444":1,"445":1,"446":1,"447":1,"453":1,"462":1,"463":1,"464":1,"465":1,"482":1,"487":1,"492":1,"497":3,"499":1,"502":2,"507":4,"517":1,"542":1,"551":4,"552":4,"559":1,"560":1,"567":1,"634":1,"646":2,"664":1,"680":2,"681":3,"775":2,"779":6,"782":1,"786":4,"787":1,"807":3,"809":9,"820":3,"821":1,"822":2,"826":3,"827":3,"828":2,"850":1,"871":1,"875":3,"876":6,"884":1,"885":2,"893":2,"894":1,"975":1,"992":1,"1007":1,"1008":4,"1039":3,"1050":1,"1051":1,"1052":18,"1056":2,"1069":1,"1075":3,"1083":1,"1090":2,"1091":9,"1092":2,"1103":1,"1151":3,"1196":1,"1256":1,"1282":2,"1283":6,"1296":3,"1301":3,"1354":4,"1392":2,"1393":1,"1395":2,"1399":1}}],["contracts~5",{"2":{"407":1}}],["contractsanvilrun",{"2":{"134":1}}],["contracts",{"0":{"54":1,"123":1,"137":1,"138":1,"172":1,"499":1},"2":{"5":1,"7":1,"35":2,"43":3,"44":1,"55":1,"56":1,"57":2,"62":1,"64":1,"69":1,"79":1,"81":1,"89":1,"91":1,"95":2,"97":1,"102":4,"104":1,"107":1,"115":1,"123":7,"124":1,"129":2,"131":2,"134":1,"135":1,"137":1,"138":2,"139":1,"162":2,"164":1,"171":3,"172":18,"179":1,"182":1,"185":1,"188":12,"198":4,"252":2,"254":1,"262":1,"265":1,"266":5,"267":3,"268":6,"269":8,"270":3,"272":4,"275":1,"282":1,"284":5,"285":1,"291":1,"304":1,"323":4,"325":2,"328":2,"329":1,"338":1,"340":1,"358":3,"362":1,"376":1,"384":6,"390":1,"391":1,"395":1,"397":1,"398":1,"401":2,"402":5,"407":1,"410":1,"411":1,"416":3,"421":7,"433":1,"434":2,"473":4,"476":1,"497":2,"499":2,"507":3,"517":4,"533":1,"542":1,"551":1,"552":1,"775":1,"826":1,"893":1,"1051":1,"1052":2,"1056":1,"1265":1,"1318":1,"1337":1,"1353":1}}],["combines",{"2":{"1051":1}}],["combine",{"2":{"895":1}}],["combineda",{"2":{"809":1}}],["combined",{"2":{"402":1,"446":1,"565":1}}],["combinations",{"2":{"131":1,"278":1,"782":1}}],["combination",{"2":{"106":1,"282":1,"284":1,"334":1,"356":1,"444":1,"782":1}}],["combining",{"2":{"79":1,"384":1,"821":1}}],["community",{"2":{"419":1}}],["comma",{"2":{"289":1,"323":1,"427":1,"443":1,"451":1,"452":1}}],["commandline",{"2":{"51":1}}],["commands",{"0":{"35":1,"68":1,"286":1,"287":1,"290":1,"321":1,"322":1,"324":1,"326":1,"404":1,"587":1,"588":1,"589":1,"611":1,"613":1,"614":1,"615":1,"616":1,"617":1,"618":1,"619":1},"1":{"69":1,"70":1},"2":{"27":1,"33":1,"34":1,"35":3,"67":1,"68":1,"83":1,"84":1,"170":4,"172":8,"201":2,"286":6,"400":1,"418":1,"797":1,"798":2,"896":1}}],["command",{"2":{"9":1,"18":3,"24":1,"31":1,"35":13,"43":1,"44":1,"45":4,"55":1,"69":1,"76":1,"86":1,"88":1,"95":1,"102":1,"115":3,"129":1,"130":1,"132":2,"134":1,"135":1,"142":1,"151":3,"155":1,"157":1,"159":1,"165":1,"168":1,"170":2,"183":1,"249":1,"251":2,"294":1,"296":1,"297":1,"327":4,"347":1,"405":1,"407":1,"408":1,"409":1,"410":1,"413":1,"416":1,"444":1,"591":1,"593":1,"594":1,"797":1,"798":3}}],["commonly",{"2":{"187":1}}],["common",{"0":{"288":1,"612":1},"2":{"172":2,"175":1,"188":1,"313":1,"334":1,"356":1,"386":1,"492":1,"574":1,"1354":1}}],["comment",{"2":{"199":1,"370":1,"452":2}}],["commentsblock",{"2":{"453":1}}],["comments",{"0":{"442":1,"445":1},"2":{"172":1,"359":5,"442":3,"444":1,"445":1,"454":1}}],["commenting",{"0":{"359":1},"2":{"162":2}}],["committed",{"2":{"357":1}}],["commitment",{"2":{"250":1}}],["commit",{"0":{"51":1},"2":{"45":2,"51":2,"151":1,"396":2,"399":2}}],["comes",{"2":{"36":1,"37":1,"64":1,"102":1,"121":1,"141":1,"181":1,"277":1,"278":1,"393":1,"394":2}}],["come",{"2":{"14":1,"355":1,"957":1}}],["compulation",{"2":{"481":1}}],["computation",{"2":{"25":1}}],["computecreateaddress",{"0":{"1280":1},"1":{"1281":1,"1282":1,"1283":1},"2":{"1281":1,"1283":1,"1354":1,"1369":1}}],["computer",{"2":{"530":1}}],["computes",{"2":{"73":1,"642":1,"1357":1}}],["compute",{"2":{"18":3,"172":1,"618":1,"1282":1,"1354":1}}],["computedaddress",{"2":{"376":1}}],["computed",{"2":{"14":1,"387":2,"787":1}}],["compressing",{"2":{"393":1}}],["comprehensive",{"2":{"162":1,"172":3,"173":1,"384":1}}],["compromise",{"2":{"363":1}}],["compromised",{"2":{"362":1,"363":2}}],["compact",{"2":{"393":1}}],["compare",{"2":{"264":2,"281":1,"283":4,"808":3,"842":1}}],["compared",{"2":{"253":1,"258":1,"328":1,"419":1}}],["comparing",{"0":{"283":1},"2":{"248":2}}],["compatibility",{"0":{"401":1},"2":{"168":1,"248":1,"401":1,"484":1}}],["compatible",{"2":{"5":1,"7":1,"15":1,"127":1,"166":1,"302":1,"303":1,"329":1,"932":1,"1052":1,"1284":1,"1353":1}}],["compinit",{"2":{"111":2}}],["compilations",{"2":{"102":1}}],["compilationtarget",{"2":{"62":1}}],["compilation",{"0":{"125":1,"507":1,"515":1,"516":1,"517":1,"518":1,"519":1,"520":1,"521":1,"522":1,"523":1,"524":1,"525":1,"526":1},"1":{"126":1,"127":1,"508":1,"509":1,"510":1,"511":1,"512":1,"513":1,"514":1,"515":1,"516":1,"517":2,"518":2,"519":2,"520":2,"521":2,"522":2,"523":2,"524":2,"525":2,"526":2},"2":{"45":1,"56":2,"62":1,"86":1,"95":1,"96":1,"102":2,"172":3,"289":1,"328":1,"347":1,"394":1,"398":1,"421":2,"471":1,"493":1,"494":1,"507":4,"508":1,"516":1,"517":2,"518":1,"519":1,"520":1,"521":1,"522":1,"523":1,"524":1,"525":1,"526":1,"812":1,"816":1}}],["compileusingremoteversion",{"2":{"122":1}}],["compiles",{"2":{"87":1,"159":1}}],["compile",{"2":{"62":1,"102":3,"115":1,"137":1,"172":1,"183":1,"378":1,"384":1,"421":1,"479":1,"507":1}}],["compiled",{"2":{"45":1,"84":1,"102":1,"172":2,"421":2,"507":6,"559":1,"560":1,"822":1,"828":1}}],["compilers",{"2":{"497":1}}],["compiler",{"0":{"51":1,"183":1,"289":1,"471":1,"508":1,"509":1,"510":1,"511":1,"512":1,"513":1,"514":1},"1":{"472":1,"473":1,"474":1,"475":1,"476":1,"477":1,"478":1,"479":1,"480":1,"481":1,"482":1,"483":1,"484":1,"485":1,"486":1,"487":1,"488":1,"489":1,"490":1,"491":1,"492":1,"493":1,"494":1,"495":1,"496":1,"497":1,"498":1,"499":1,"500":1,"501":1,"502":1,"503":1,"504":1,"505":1,"506":1,"507":1,"508":1,"509":2,"510":2,"511":2,"512":2,"513":2,"514":2,"515":1,"516":1,"517":1,"518":1,"519":1,"520":1,"521":1,"522":1,"523":1,"524":1,"525":1,"526":1},"2":{"45":2,"51":3,"54":1,"56":1,"62":3,"87":1,"95":1,"102":1,"117":1,"122":1,"154":1,"172":1,"183":2,"194":1,"257":3,"323":1,"347":2,"393":1,"394":1,"398":1,"420":1,"421":1,"471":1,"472":1,"478":1,"479":1,"481":1,"482":1,"483":1,"485":2,"486":1,"495":1,"496":2,"497":1,"507":5,"508":5,"509":1,"510":1,"511":1,"512":1,"513":1,"514":1,"787":1,"788":1}}],["compiling",{"2":{"43":1,"56":4,"91":1,"95":1,"96":1,"124":1,"257":3,"347":2,"393":2,"394":1,"467":1,"507":1}}],["compositions",{"2":{"895":1}}],["compose",{"0":{"88":1},"2":{"88":4}}],["components",{"2":{"192":6,"421":1}}],["component",{"2":{"65":1}}],["complaining",{"2":{"367":1}}],["complicatedcontract",{"2":{"347":1}}],["complicatedcontracttest",{"2":{"347":3}}],["compliant",{"2":{"173":1}}],["compliance",{"2":{"141":1}}],["comply",{"2":{"75":1}}],["complex",{"0":{"1134":1,"1142":1},"2":{"35":1,"67":1,"171":1,"172":2,"192":1,"262":1,"271":1,"272":1,"359":2,"403":1,"475":1,"507":1,"646":1}}],["complex256",{"2":{"34":1}}],["completion",{"2":{"113":4}}],["completions",{"0":{"22":1},"1":{"23":1},"2":{"22":2,"23":3,"111":9,"112":7,"113":7,"321":1,"616":1}}],["completely",{"2":{"198":1,"342":1}}],["completed",{"2":{"82":1,"117":1,"988":2}}],["complete",{"2":{"13":1,"56":1,"92":1,"95":1,"96":1,"97":1,"109":1,"133":1,"170":5,"172":2,"173":1,"203":1,"215":1,"250":1,"328":1,"336":1,"362":1,"405":1,"957":1,"1353":1}}],["com",{"2":{"1":1,"88":1,"115":2,"155":2,"172":1,"190":1,"344":1,"345":1,"393":1,"394":1,"396":1,"403":1,"407":1,"408":2,"409":9,"410":1,"978":2}}],["caveats",{"0":{"418":1}}],["causing",{"2":{"309":1,"398":1}}],["cause",{"2":{"265":1,"270":2,"272":2,"421":1,"481":1,"775":1}}],["caution",{"2":{"172":1}}],["campaign",{"2":{"262":3,"264":1,"265":2,"266":1,"270":1,"354":1}}],["campaigns",{"2":{"262":2,"266":1,"352":1,"353":1}}],["calculates",{"2":{"251":2}}],["calculate",{"2":{"251":1,"787":1}}],["callback",{"2":{"476":1}}],["callable",{"2":{"328":1}}],["callee",{"2":{"777":4,"778":2,"807":2,"809":1,"891":1,"892":2,"1087":1}}],["callermode",{"2":{"981":3,"982":10,"983":14}}],["caller",{"2":{"272":1,"875":1,"982":2,"1088":1}}],["callerisnotowner",{"2":{"196":1,"328":1}}],["called",{"2":{"8":1,"94":2,"108":1,"136":1,"190":1,"262":2,"266":1,"267":2,"272":2,"281":1,"308":1,"309":1,"342":1,"365":1,"374":1,"397":1,"408":1,"432":1,"633":1,"660":1,"778":2,"779":6,"841":1,"880":1,"884":1,"888":1,"926":1,"943":1,"1061":2,"1074":4,"1086":1,"1087":4,"1099":1}}],["calling",{"2":{"94":1,"260":1,"328":1,"333":1,"659":2,"778":1,"787":1,"1042":1,"1351":1}}],["callcode",{"2":{"40":1,"1085":1,"1087":3}}],["calldata=0x29facca7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe",{"2":{"257":1}}],["calldata=",{"2":{"85":1}}],["calldata",{"2":{"35":2,"133":1,"355":1,"357":1,"587":4,"683":3,"688":3,"693":2,"706":3,"715":3,"722":3,"729":3,"736":3,"743":3,"750":30,"757":3,"764":3,"772":1,"777":4,"778":2,"779":3,"785":4,"796":1,"802":14,"807":12,"819":1,"820":1,"825":1,"826":1,"827":1,"866":1,"874":1,"879":4,"880":1,"883":4,"884":1,"887":4,"891":1,"900":1,"904":1,"908":1,"912":1,"916":1,"920":2,"937":2,"952":1,"971":3,"1006":1,"1021":3,"1031":39,"1041":2,"1050":1,"1056":2,"1129":5,"1137":5,"1268":1,"1296":1,"1301":1}}],["call",{"0":{"267":1,"308":1,"578":1},"2":{"12":1,"14":1,"15":1,"35":1,"40":3,"80":1,"81":6,"90":1,"133":1,"138":1,"143":2,"145":1,"172":3,"195":3,"262":4,"270":1,"272":2,"274":1,"275":1,"276":1,"308":10,"328":1,"334":1,"345":1,"355":2,"357":1,"387":2,"390":1,"421":2,"447":2,"578":1,"594":2,"617":1,"650":1,"664":2,"778":13,"782":5,"783":8,"786":11,"787":19,"807":2,"808":1,"809":1,"842":1,"880":6,"881":3,"884":6,"885":2,"888":3,"892":5,"893":1,"960":5,"1023":1,"1039":1,"1050":2,"1052":23,"1069":1,"1075":1,"1079":1,"1085":1,"1086":3,"1087":3,"1088":2,"1090":11,"1092":3,"1096":1,"1151":1,"1268":2,"1284":2,"1372":1,"1393":1,"1406":1}}],["calls",{"0":{"40":1,"195":1},"2":{"3":1,"15":3,"17":1,"34":1,"81":1,"94":1,"132":1,"142":1,"165":1,"172":3,"193":1,"195":1,"262":3,"267":1,"270":3,"272":3,"273":1,"274":1,"276":1,"284":3,"285":1,"308":2,"309":1,"329":1,"355":4,"387":1,"421":2,"447":2,"547":1,"548":1,"576":1,"578":1,"664":2,"673":1,"778":2,"786":4,"787":6,"797":1,"809":2,"812":1,"816":1,"880":5,"884":7,"888":2,"889":2,"892":1,"893":1,"960":4,"1022":1,"1039":1,"1052":13,"1069":3,"1074":5,"1079":1,"1086":1,"1096":1,"1284":2,"1353":1}}],["cat",{"2":{"249":1,"254":1,"281":1}}],["catches",{"2":{"355":1}}],["catch",{"2":{"172":1,"196":1,"976":2,"1151":1}}],["capturing",{"2":{"807":3,"809":5}}],["captured",{"2":{"251":1,"285":1}}],["capture",{"2":{"249":1,"251":1,"285":2,"309":1,"807":9,"808":4}}],["caps",{"2":{"384":1}}],["capability",{"2":{"102":1}}],["capabilitiescastinteract",{"2":{"134":1}}],["capabilities",{"2":{"1":1,"27":1,"76":1,"89":1,"141":2,"166":1,"250":1}}],["carry",{"2":{"359":1}}],["cargo",{"2":{"100":1,"154":1,"155":6}}],["carefully",{"2":{"172":2,"360":1,"377":1,"786":1}}],["careful",{"2":{"94":1,"387":1}}],["care",{"2":{"31":1,"35":1,"419":1}}],["caches",{"2":{"386":1}}],["cache",{"0":{"467":1,"468":1},"2":{"31":4,"35":13,"85":2,"86":1,"95":1,"96":1,"100":1,"172":2,"184":1,"271":1,"323":2,"326":3,"339":4,"351":1,"352":1,"353":1,"354":1,"386":2,"394":2,"421":6,"458":1,"467":3,"468":4,"470":1,"543":1,"571":1,"585":1}}],["cached",{"2":{"18":1,"31":3,"35":6,"339":2,"386":1,"387":1,"388":1,"467":1,"543":2,"544":1,"545":2,"546":2}}],["caching",{"0":{"339":1,"543":1,"544":1,"545":1,"546":1},"1":{"545":1,"546":1},"2":{"18":2,"35":1,"291":2,"339":3,"421":2,"467":1,"543":2,"544":1}}],["cases",{"2":{"138":1,"172":4,"248":1,"253":1,"257":2,"262":1,"266":1,"291":1,"355":1,"398":1,"421":1,"574":1,"787":1,"802":2,"812":1,"816":1,"1271":1,"1285":1}}],["case",{"0":{"253":1,"313":1,"314":1,"315":1,"316":1,"317":1},"2":{"8":1,"35":1,"172":3,"248":1,"252":1,"253":1,"313":1,"314":1,"315":1,"316":2,"317":2,"325":2,"328":1,"337":1,"356":2,"378":1,"392":1,"415":1,"421":1,"431":2,"444":1,"446":1,"447":1,"450":1,"536":1,"564":1,"565":2,"655":1,"712":1,"758":1,"775":1,"826":1,"880":1,"884":1,"957":1,"965":1,"1088":3,"1134":1,"1142":1}}],["casting",{"2":{"752":1}}],["cast",{"0":{"79":1,"132":1,"142":1,"165":1,"177":1,"590":1,"596":1,"603":1},"1":{"133":1,"143":1,"144":1,"145":1,"591":1,"592":1,"593":1,"594":1,"595":1,"597":1,"598":1,"599":1,"600":1,"601":1,"602":1,"604":1,"605":1,"606":1,"607":1,"608":1,"609":1,"610":1},"2":{"0":1,"26":1,"36":3,"45":3,"55":1,"79":1,"81":9,"83":1,"84":3,"111":4,"112":2,"113":2,"132":3,"133":8,"142":1,"143":2,"144":1,"145":4,"151":1,"155":3,"162":1,"165":1,"170":2,"172":4,"192":1,"200":2,"201":1,"363":1,"587":10,"588":7,"589":6,"591":2,"592":1,"594":2,"595":1,"597":1,"598":1,"602":3,"604":1,"605":1,"609":1,"610":1,"611":3,"613":22,"614":3,"615":1,"616":3,"617":11,"618":13,"619":8,"798":1}}],["canonicalizing",{"2":{"189":1}}],["canonical",{"2":{"69":2,"72":1,"75":1,"76":1}}],["cannotsubtract43",{"2":{"356":1}}],["cannot",{"0":{"934":1,"949":1},"2":{"51":1,"271":2,"386":1,"391":1,"416":3,"536":1,"778":2,"944":1,"960":1,"1074":1,"1089":1,"1321":1}}],["cancun",{"2":{"17":1,"62":1,"484":1}}],["can",{"0":{"176":1,"179":1,"404":1},"2":{"3":1,"5":1,"7":2,"8":4,"9":1,"12":1,"13":1,"14":1,"25":3,"26":1,"34":2,"35":2,"36":1,"43":3,"44":1,"45":3,"48":1,"51":1,"52":1,"57":3,"58":1,"62":3,"64":1,"65":2,"67":2,"70":1,"72":1,"76":2,"79":1,"81":2,"82":1,"83":2,"84":4,"85":3,"86":3,"87":1,"90":3,"92":1,"94":2,"95":1,"96":1,"102":1,"104":1,"106":1,"107":1,"108":4,"109":2,"110":1,"115":1,"117":1,"118":1,"121":1,"123":1,"125":2,"126":1,"127":1,"128":1,"129":2,"130":2,"131":1,"132":2,"133":1,"134":1,"142":1,"150":1,"151":1,"152":1,"154":1,"155":3,"157":4,"158":2,"170":1,"171":2,"180":2,"181":1,"182":1,"183":3,"184":1,"185":2,"188":1,"189":2,"192":2,"195":1,"196":2,"209":1,"211":1,"213":1,"219":1,"221":1,"227":1,"229":1,"231":1,"233":1,"235":1,"237":1,"239":1,"241":1,"243":1,"245":1,"246":1,"247":2,"248":1,"249":1,"253":1,"254":2,"257":3,"258":1,"259":2,"260":6,"262":5,"263":2,"264":1,"265":3,"266":5,"269":2,"271":1,"272":5,"273":1,"274":1,"275":6,"276":3,"279":1,"281":2,"282":5,"283":3,"284":4,"285":2,"302":1,"307":4,"308":3,"309":2,"311":3,"313":2,"314":2,"315":2,"316":2,"317":2,"319":3,"328":3,"329":1,"333":1,"335":2,"340":1,"342":4,"344":1,"345":2,"346":2,"347":3,"348":1,"349":2,"351":1,"352":1,"353":1,"355":4,"356":1,"357":1,"361":1,"362":1,"363":1,"365":1,"367":2,"368":1,"378":1,"384":3,"386":1,"387":1,"388":1,"392":2,"393":1,"396":2,"397":4,"398":2,"399":2,"400":1,"402":4,"405":1,"407":2,"408":1,"409":2,"410":1,"411":2,"413":1,"414":4,"415":2,"416":1,"417":2,"419":2,"421":4,"428":1,"432":1,"444":1,"445":1,"446":1,"447":1,"456":2,"457":1,"458":1,"476":2,"492":1,"507":1,"508":1,"561":2,"583":1,"650":1,"654":3,"664":1,"702":1,"717":1,"724":1,"731":1,"738":1,"745":1,"754":1,"755":1,"759":3,"766":1,"775":2,"778":4,"782":2,"783":1,"786":1,"787":5,"788":3,"797":1,"798":3,"803":2,"808":5,"809":1,"820":1,"822":1,"826":1,"828":1,"875":1,"876":1,"880":2,"884":1,"888":1,"894":1,"895":2,"925":1,"926":2,"927":3,"928":1,"929":2,"932":1,"942":1,"943":2,"944":3,"945":1,"946":2,"957":1,"975":1,"976":1,"979":1,"996":1,"1033":2,"1043":3,"1050":1,"1051":1,"1069":1,"1117":1,"1131":3,"1139":3,"1151":1,"1271":1,"1284":4,"1285":1,"1296":2,"1301":3,"1354":1,"1387":1,"1389":1,"1393":1,"1402":1}}],["chc",{"2":{"497":2,"501":1}}],["churn",{"2":{"368":1}}],["choosing",{"2":{"507":1}}],["choose",{"0":{"978":1},"2":{"17":1,"21":1,"106":1,"338":1,"368":1,"409":1,"759":1,"978":1}}],["choice",{"2":{"83":1,"115":1,"172":1,"185":1}}],["chosen",{"2":{"65":1,"122":1,"248":1}}],["cheats",{"0":{"333":1,"1382":1},"2":{"333":2,"726":1,"727":1,"733":1,"734":1,"747":1,"748":1,"768":1,"769":1,"850":2,"876":7,"1008":6,"1044":1,"1096":3,"1108":2,"1354":1}}],["cheatcode",{"0":{"195":1,"249":1,"896":1,"897":1},"2":{"40":1,"77":4,"78":4,"94":1,"128":1,"131":1,"193":1,"195":3,"196":1,"247":1,"249":1,"251":1,"257":1,"267":1,"291":1,"328":2,"334":1,"342":1,"356":1,"358":1,"421":1,"530":2,"646":3,"654":1,"660":1,"664":1,"680":2,"681":1,"775":1,"778":6,"783":2,"786":1,"787":2,"798":2,"802":2,"822":1,"826":1,"828":1,"875":1,"880":1,"884":2,"892":1,"894":1,"895":1,"897":1,"925":1,"942":1,"972":2,"976":1,"1038":1,"1039":1,"1051":2,"1069":1,"1107":1,"1271":1,"1288":1,"1351":1}}],["cheatcodes",{"0":{"71":1,"328":1,"341":1,"388":1,"806":1,"894":1,"895":1,"898":1,"1020":1,"1080":1},"1":{"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"342":1,"343":1,"344":1,"345":1,"807":1,"808":1,"809":1,"895":1,"896":1,"897":1,"898":1,"1021":1,"1022":1,"1023":1,"1024":1,"1081":1,"1082":1,"1083":1},"2":{"37":1,"44":2,"67":1,"70":1,"71":1,"76":1,"102":1,"131":1,"170":1,"172":1,"201":1,"276":1,"285":1,"328":5,"329":2,"333":1,"337":3,"341":2,"345":1,"356":1,"388":1,"646":1,"787":2,"803":3,"808":3,"809":1,"820":1,"826":1,"894":3,"895":4,"896":11,"898":1,"925":1,"928":2,"935":2,"942":1,"945":2,"950":2,"979":1,"1022":1,"1033":2,"1051":1,"1052":3,"1130":1,"1138":1,"1311":1,"1353":1,"1354":4}}],["cheat",{"0":{"801":1},"1":{"802":1,"803":1,"804":1},"2":{"27":1,"355":1,"362":1,"421":1,"646":1,"782":1,"797":1,"803":1,"826":1,"960":1}}],["check=false",{"2":{"808":1}}],["check=true",{"2":{"808":2}}],["check=true|false",{"2":{"200":1}}],["checkdata",{"2":{"781":2}}],["checktopic3",{"2":{"781":2}}],["checktopic2",{"2":{"781":2}}],["checktopic1",{"2":{"781":2}}],["checker",{"0":{"497":1,"498":1,"499":1,"500":1,"501":1,"502":1,"503":1,"504":1,"505":1,"506":1},"1":{"498":1,"499":2,"500":2,"501":2,"502":2,"503":2,"504":2,"505":2,"506":2},"2":{"421":2,"471":1,"497":8,"498":1,"499":2,"501":2,"502":1,"504":1,"505":1,"506":1}}],["checked",{"0":{"1277":1},"1":{"1278":1,"1279":1},"2":{"303":1,"335":1,"365":2,"449":1,"497":1,"778":2,"782":1,"783":1,"808":1,"880":2,"884":2,"892":2,"1278":5,"1318":1,"1393":1,"1394":1,"1395":1}}],["checks",{"2":{"172":1,"305":1,"309":1,"365":1,"421":1,"578":1,"654":3,"782":1,"783":1,"787":1,"788":1,"845":1,"854":1,"858":1,"863":1,"1268":1}}],["checkout",{"2":{"99":1,"444":1}}],["checking",{"2":{"94":1,"308":1,"309":1,"328":2,"450":1,"782":2}}],["check",{"2":{"15":2,"45":3,"51":1,"81":3,"99":1,"101":1,"106":1,"133":2,"143":1,"152":1,"170":1,"186":1,"200":1,"253":1,"283":4,"290":1,"308":1,"309":3,"328":8,"363":1,"391":1,"394":1,"396":1,"403":1,"499":1,"618":1,"681":1,"778":1,"782":1,"783":4,"808":1,"850":1,"853":1,"857":1,"862":1,"884":1,"1395":1}}],["chimera",{"2":{"172":2}}],["chips",{"2":{"157":1}}],["children",{"2":{"802":1,"1131":1,"1139":1}}],["child",{"2":{"17":1,"434":2,"1042":1}}],["chisel",{"0":{"26":1,"28":1,"146":1,"167":1},"1":{"27":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"147":1,"148":1},"2":{"0":1,"26":4,"27":6,"29":1,"30":1,"31":6,"32":2,"33":1,"34":4,"35":20,"55":1,"132":1,"146":1,"147":2,"148":1,"151":1,"155":3,"167":1,"170":2,"172":1,"201":1}}],["chapter",{"2":{"180":1,"277":1}}],["channel",{"2":{"175":1}}],["changing",{"2":{"54":1,"102":1,"199":1,"378":1,"536":1,"1284":1}}],["changeprank",{"0":{"1273":1},"1":{"1274":1,"1275":1,"1276":1},"2":{"1076":1,"1274":1,"1275":1,"1382":1}}],["changes",{"0":{"1091":1},"2":{"62":2,"87":1,"172":2,"193":1,"274":1,"282":1,"283":2,"342":2,"349":1,"364":1,"376":1,"387":1,"493":1,"494":1,"508":1,"808":1,"875":1,"1050":1,"1079":2,"1086":2,"1088":1,"1112":1}}],["changelog",{"2":{"35":1}}],["changed",{"2":{"9":1,"56":2,"86":1,"95":1,"96":1,"195":1,"198":1,"328":1,"338":1,"347":1,"349":1,"352":1,"353":1,"394":1,"798":1,"808":1}}],["change",{"2":{"8":1,"21":1,"37":1,"84":1,"94":1,"107":1,"172":1,"198":1,"199":1,"283":2,"284":1,"327":2,"328":1,"335":1,"344":1,"345":1,"349":1,"364":1,"797":1,"1083":1,"1086":1}}],["chatgpt",{"2":{"172":1}}],["chai",{"2":{"106":1}}],["chainname",{"2":{"388":1}}],["chaindir",{"2":{"379":2}}],["chaininfo",{"2":{"1085":3,"1088":1}}],["chaining",{"2":{"357":1}}],["chainid",{"0":{"667":1},"1":{"668":1,"669":1,"670":1},"2":{"12":1,"25":2,"172":1,"379":2,"393":1,"535":1,"668":1,"669":1,"670":2,"770":1,"1085":1,"1262":1,"1263":1}}],["chainlist",{"2":{"92":1}}],["chains",{"0":{"545":1},"2":{"35":1,"43":1,"44":1,"57":1,"58":1,"291":1,"346":2,"363":1,"388":1,"545":2,"775":1,"932":1,"1265":1}}],["chain",{"0":{"44":1,"535":1,"611":1},"2":{"1":1,"13":3,"18":3,"19":3,"20":1,"44":1,"45":4,"56":1,"62":1,"65":1,"67":1,"85":1,"94":1,"95":3,"96":1,"132":1,"134":1,"137":1,"141":1,"142":1,"159":1,"162":1,"165":1,"172":2,"184":1,"191":1,"250":1,"292":3,"338":2,"339":1,"378":1,"393":2,"421":2,"428":3,"535":2,"543":1,"545":2,"611":2,"622":3,"775":1,"978":1,"1088":1,"1095":1,"1263":1,"1264":1,"1265":1}}],["characters",{"2":{"929":1,"946":1,"1394":1}}],["character",{"2":{"788":1,"798":1,"1043":2,"1394":3}}],["char",{"2":{"40":1,"659":5}}],["c4fcf12",{"2":{"1":1}}],["ie",{"2":{"929":1,"946":1}}],["ierc20like",{"2":{"271":3}}],["ierc20",{"2":{"172":2,"266":1,"309":1,"368":1,"881":2,"885":3,"889":3,"1151":2}}],["illustrated",{"2":{"444":1,"445":1}}],["illustrate",{"2":{"271":1,"1090":1}}],["illustrative",{"2":{"82":1}}],["ignored",{"0":{"198":1,"481":1,"482":1},"2":{"193":1,"289":1,"308":1,"309":2,"412":1,"421":2,"479":1,"481":4,"482":2,"787":1}}],["ignore",{"0":{"427":1,"443":1,"451":1},"2":{"172":1,"284":3,"289":1,"303":1,"339":1,"354":1,"369":1,"370":1,"421":3,"427":2,"443":3,"451":2,"481":1,"482":1,"787":1}}],["i++",{"2":{"172":1,"783":1,"929":1,"946":1,"1052":1,"1352":1}}],["iropt",{"2":{"486":1}}],["iroptimized",{"2":{"486":1}}],["ir",{"0":{"493":1,"510":1,"519":1},"2":{"172":1,"289":5,"421":1,"486":2,"493":3,"496":2,"507":11,"508":5,"510":1,"517":1,"519":1,"812":1,"816":1}}],["icon",{"2":{"609":1}}],["icontract",{"2":{"54":3}}],["icounter",{"2":{"128":3,"130":4}}],["iat",{"2":{"76":1,"78":4}}],["iallowancetransfer",{"2":{"76":2,"78":2}}],["i",{"0":{"176":1,"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"185":1,"186":1,"187":1,"189":1,"191":1},"2":{"40":1,"72":1,"106":2,"107":1,"109":2,"111":1,"172":3,"173":1,"200":1,"254":3,"327":1,"342":1,"345":1,"384":2,"440":1,"441":1,"478":1,"485":1,"625":1,"629":1,"734":4,"762":4,"783":3,"929":3,"944":3,"946":3,"957":1,"1001":1,"1004":1,"1042":1,"1052":3,"1086":1,"1088":1,"1284":2,"1285":1,"1352":3}}],["immediately",{"2":{"363":1,"787":1}}],["immutable",{"0":{"317":1},"2":{"271":2,"315":1,"317":9,"328":1,"1151":1}}],["immutables",{"2":{"172":1,"384":1}}],["imagine",{"2":{"248":1}}],["images",{"2":{"85":2,"87":1}}],["image",{"0":{"84":1,"85":1,"86":1},"2":{"82":1,"83":1,"84":3,"85":9,"86":5,"87":2,"88":1,"101":2,"157":3,"260":1}}],["imycontract",{"2":{"172":1}}],["im",{"2":{"34":1}}],["impl",{"2":{"1075":5}}],["implicit",{"2":{"438":1}}],["implications",{"2":{"172":1,"530":1}}],["implemented",{"2":{"262":1,"414":1,"485":2,"1284":1}}],["implement",{"2":{"172":5,"775":1,"786":1,"926":1,"943":1}}],["implementationtest",{"2":{"1075":3}}],["implementation",{"0":{"251":1},"2":{"67":1,"172":2,"173":1,"250":2,"251":4,"252":2,"253":2,"255":2,"264":2,"319":1,"1050":6,"1051":1,"1052":7,"1395":1}}],["implementations",{"0":{"250":1},"1":{"251":1,"252":1,"253":1,"254":1},"2":{"67":1,"248":5,"250":1,"254":1,"309":1,"1051":1}}],["implementing",{"0":{"67":1},"2":{"67":1,"162":1,"171":1,"248":1,"262":1,"357":1}}],["implements",{"2":{"15":1,"75":1,"895":1,"1284":1}}],["improved",{"0":{"340":1},"2":{"388":1,"1354":1}}],["improvements",{"2":{"254":1}}],["improve",{"2":{"169":1,"171":1,"313":1,"333":1,"433":1,"492":1,"496":1,"895":1}}],["improving",{"2":{"67":1}}],["importing",{"2":{"367":2,"369":1,"416":1,"507":1}}],["important",{"2":{"85":1,"90":1,"172":2,"262":1,"342":3,"358":3,"362":1,"365":1,"407":1,"410":1,"497":2,"1033":1,"1034":1}}],["imports",{"0":{"367":1,"368":1,"432":1},"2":{"54":1,"94":1,"172":2,"367":1,"368":1,"432":7,"473":1,"507":1}}],["import",{"0":{"54":1},"2":{"27":1,"43":1,"54":3,"76":4,"94":5,"106":1,"123":1,"126":2,"128":1,"129":1,"172":4,"181":2,"188":1,"202":2,"249":1,"252":1,"257":1,"328":2,"329":6,"356":5,"363":2,"367":5,"390":1,"397":7,"398":1,"416":2,"432":6,"473":3,"476":2,"619":1,"703":1,"775":1,"846":1,"931":2,"947":2,"1056":1,"1284":2,"1353":5,"1354":2,"1392":2}}],["imported",{"2":{"13":1,"198":1,"252":1,"367":1}}],["impersonate",{"2":{"17":1,"81":1,"172":1}}],["impersonated",{"2":{"13":1}}],["impersonateaccount`",{"2":{"172":1}}],["impersonateaccount",{"2":{"13":3,"81":1}}],["impersonation",{"2":{"13":1,"141":1}}],["impersonating",{"2":{"13":2}}],["impact",{"2":{"3":1}}],["ipfs",{"2":{"62":2,"421":1,"488":2,"514":1}}],["ip",{"2":{"20":1,"24":4,"88":1}}],["ipc",{"2":{"17":4}}],["itemdisables",{"2":{"453":1}}],["item",{"2":{"370":1,"453":2,"929":2,"946":2}}],["items",{"2":{"42":1,"367":1,"1348":1}}],["iterations",{"2":{"172":1,"492":1}}],["iterating",{"2":{"171":1}}],["ithappened",{"2":{"34":1}}],["ithaca",{"2":{"1":1,"3":1,"133":3,"137":1,"141":1,"143":2,"145":2}}],["it",{"0":{"1033":1},"2":{"5":1,"7":1,"8":3,"9":1,"13":2,"14":1,"15":2,"18":1,"25":1,"27":1,"33":2,"35":2,"45":8,"54":1,"56":1,"57":2,"60":2,"61":1,"64":1,"65":3,"67":1,"72":1,"73":1,"74":1,"77":3,"78":4,"82":2,"83":3,"85":1,"86":1,"87":3,"90":8,"94":8,"95":1,"102":1,"103":1,"104":1,"105":1,"106":3,"111":1,"122":1,"125":1,"127":1,"128":2,"134":3,"146":1,"151":1,"152":1,"154":1,"157":1,"172":1,"173":1,"181":2,"183":1,"187":1,"188":2,"189":1,"192":3,"194":1,"195":1,"198":1,"202":1,"249":1,"254":5,"255":1,"256":1,"257":5,"260":1,"264":2,"265":3,"272":2,"275":1,"276":1,"282":1,"283":1,"284":1,"305":1,"307":2,"309":2,"325":3,"327":1,"328":2,"329":2,"335":1,"338":1,"339":1,"342":3,"344":2,"345":3,"346":1,"351":1,"356":1,"357":1,"358":1,"360":1,"362":3,"363":8,"364":2,"365":3,"368":2,"369":2,"374":1,"382":1,"384":5,"386":3,"387":1,"393":2,"395":1,"396":1,"402":1,"407":1,"408":2,"414":2,"415":1,"416":3,"417":3,"419":1,"425":1,"430":2,"431":2,"432":2,"484":1,"492":2,"497":1,"507":2,"530":1,"574":1,"654":1,"684":2,"689":2,"712":1,"745":2,"754":1,"766":2,"775":1,"778":2,"782":1,"783":1,"786":2,"787":4,"788":2,"797":2,"798":1,"802":4,"804":1,"808":1,"832":2,"861":1,"875":2,"880":1,"884":1,"892":1,"894":1,"925":4,"927":3,"928":2,"929":5,"931":1,"932":1,"942":4,"944":5,"945":2,"946":5,"947":1,"965":1,"972":1,"975":1,"997":3,"1004":1,"1008":3,"1011":1,"1012":3,"1033":1,"1034":2,"1052":2,"1061":3,"1086":1,"1088":4,"1090":1,"1110":2,"1111":1,"1130":3,"1138":3,"1151":1,"1271":1,"1276":1,"1283":1,"1284":6,"1285":3,"1309":1,"1334":1,"1353":1,"1380":1}}],["itself",{"2":{"194":1,"257":1,"265":1,"342":2,"356":1,"376":1,"561":1,"850":1,"876":1,"1042":1}}],["its",{"2":{"1":1,"15":1,"27":1,"57":1,"250":1,"251":1,"265":1,"276":1,"305":1,"307":1,"308":1,"309":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"328":1,"335":1,"341":1,"342":1,"355":1,"356":2,"364":1,"388":1,"426":1,"431":1,"455":1,"507":1,"624":1,"628":1,"646":1,"778":1,"788":2,"802":1,"875":1,"880":1,"884":1,"892":1,"927":1,"931":1,"944":1,"947":1,"1033":1,"1042":1,"1089":1,"1090":1,"1107":1,"1131":1,"1139":1}}],["inner",{"2":{"1033":1}}],["inherent",{"2":{"928":1,"945":1}}],["inherited",{"2":{"444":1}}],["inheritable",{"2":{"328":1}}],["inheriting",{"2":{"275":1,"358":1}}],["inherits",{"2":{"94":1,"185":1,"390":1}}],["inherit",{"2":{"26":1,"108":1,"185":2,"202":1,"329":1,"356":1,"384":2,"390":1,"456":1,"1354":1}}],["injects",{"2":{"485":1}}],["inject",{"2":{"485":1,"775":1}}],["injecting",{"2":{"254":1,"775":1}}],["inevitably",{"2":{"270":1}}],["inefficient",{"2":{"264":1}}],["inliner",{"2":{"495":1}}],["inlineconfig",{"2":{"446":1,"447":1}}],["inline",{"0":{"452":1,"453":1},"1":{"453":1,"454":1},"2":{"191":1,"307":1,"308":1,"309":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":3,"346":1,"352":1,"353":1,"452":2,"787":1,"808":1,"944":2}}],["induced",{"2":{"1086":1}}],["industries",{"2":{"171":1}}],["indexooberror",{"0":{"1335":1},"1":{"1336":1,"1337":1},"2":{"1336":1,"1383":1}}],["indexes",{"2":{"625":2,"629":2}}],["indexed",{"2":{"34":1,"328":8,"384":1,"783":6,"842":3,"988":1,"1052":1,"1151":2}}],["index",{"2":{"506":1,"588":1,"618":1,"625":1,"629":1,"706":2,"707":1,"1308":1}}],["indentation",{"2":{"421":1,"436":1}}],["independently",{"2":{"430":1}}],["independent",{"2":{"342":1,"345":1,"875":1}}],["indeed",{"2":{"307":1}}],["indicate",{"2":{"1086":1,"1130":1,"1138":1,"1395":1}}],["indicates",{"2":{"446":1,"573":1,"982":1,"1087":1}}],["indicating",{"2":{"309":1,"421":4,"568":1,"569":1,"580":1,"581":1,"586":1}}],["indication",{"2":{"307":1}}],["individually",{"2":{"329":1}}],["individual",{"2":{"285":2,"307":1,"308":1,"309":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"353":1,"507":2,"932":1}}],["inferred",{"2":{"198":1}}],["influenced",{"2":{"90":1}}],["infura",{"2":{"80":1,"92":1,"172":1,"386":1,"602":1}}],["info`",{"2":{"421":1}}],["inform",{"2":{"337":1}}],["informational",{"0":{"312":1},"1":{"313":1,"314":1,"315":1,"316":1,"317":1}}],["information",{"2":{"1":1,"7":1,"17":2,"27":1,"84":1,"115":1,"117":1,"133":1,"172":1,"192":1,"246":1,"273":1,"288":1,"348":2,"355":1,"392":1,"393":2,"398":1,"485":1,"500":1,"501":1,"502":1,"503":1,"504":1,"612":1,"621":1,"654":1,"888":1,"972":1}}],["info",{"2":{"13":1,"117":6,"172":1,"303":1,"323":4,"383":1,"388":1,"421":4,"449":1,"1394":1}}],["inverse",{"2":{"347":2,"550":1,"552":1,"554":1}}],["invocation",{"2":{"387":1,"888":1}}],["invoked",{"2":{"328":1,"356":1,"497":1}}],["invoke",{"2":{"115":1,"1354":1}}],["involves",{"2":{"319":1}}],["involve",{"2":{"3":1}}],["invariantexample1",{"2":{"270":1}}],["invarianttests",{"2":{"172":1}}],["invariants",{"0":{"264":1,"265":1,"502":1},"1":{"265":1},"2":{"172":1,"262":5,"264":4,"265":3,"270":1,"392":1,"421":1,"502":3,"576":1}}],["invariant",{"0":{"261":1,"263":1,"266":1,"268":1,"353":1,"447":1,"574":1},"1":{"262":1,"263":1,"264":1,"265":1,"266":1,"267":2,"268":2,"269":2,"270":1,"271":1,"272":1,"273":1,"274":1,"275":1,"276":1,"575":1,"576":1,"577":1,"578":1,"579":1,"580":1,"581":1,"582":1,"583":1,"584":1,"585":1,"586":1},"2":{"109":1,"138":1,"172":15,"173":2,"262":19,"263":1,"264":1,"265":7,"266":5,"268":2,"270":5,"272":4,"273":2,"277":1,"353":6,"384":3,"387":1,"392":1,"421":6,"444":1,"447":11,"527":1,"574":7,"575":2,"576":1,"577":2,"578":2,"579":1,"582":1,"583":2,"584":1,"585":3,"586":1}}],["invariance",{"2":{"87":1}}],["invalidfeopcode",{"2":{"355":1}}],["invalid",{"0":{"52":1},"2":{"172":2,"355":1,"384":1,"782":2,"788":2,"1056":1}}],["inputdir",{"2":{"379":2}}],["inputs",{"2":{"29":1,"34":1,"62":3,"138":2,"172":5,"192":2,"248":1,"254":4,"257":1,"260":1,"262":1,"267":1,"270":2,"274":1,"278":1,"280":1,"379":1,"387":1,"446":1,"565":1,"567":1,"650":1,"654":1,"655":1,"798":2,"799":10,"1271":1}}],["input",{"0":{"979":1},"2":{"27":1,"34":1,"35":1,"77":1,"78":1,"172":3,"192":2,"248":1,"251":1,"275":1,"280":2,"365":2,"379":7,"387":1,"495":1,"496":1,"620":1,"654":1,"971":2,"972":2,"976":4,"1088":1,"1272":6}}],["initiated",{"2":{"1087":1}}],["initially",{"2":{"342":1}}],["initialnumber",{"2":{"128":4}}],["initializing",{"2":{"189":1,"393":1}}],["initialization",{"2":{"66":1}}],["initializes",{"2":{"393":1,"394":1}}],["initialized",{"2":{"107":1,"393":1,"1085":1,"1088":3,"1090":1,"1091":1,"1406":1}}],["initialize",{"0":{"136":1,"405":1},"2":{"17":1,"56":1,"106":1,"172":3}}],["initialsupply",{"2":{"43":2}}],["initial",{"0":{"533":1},"2":{"18":1,"25":1,"102":3,"128":2,"172":1,"253":1,"291":3,"421":2,"533":3,"681":1,"1001":1,"1052":2}}],["init",{"2":{"17":1,"56":1,"65":1,"91":1,"106":2,"107":2,"128":1,"136":1,"172":1,"322":1,"394":3,"405":2,"482":1}}],["inbound",{"2":{"15":2}}],["inserting",{"2":{"972":1}}],["inserts",{"2":{"884":1}}],["insert",{"2":{"787":1,"1151":1}}],["inserted",{"2":{"35":2}}],["inspired",{"2":{"363":1}}],["inspect",{"2":{"14":1,"172":2,"200":2,"287":1,"415":1}}],["insight",{"2":{"180":1,"285":1,"355":1}}],["inside",{"0":{"82":1},"1":{"83":1,"84":1,"85":1,"86":1,"87":1,"88":1},"2":{"15":1,"54":1,"85":1,"106":3,"107":3,"157":1,"162":1,"285":2,"333":1,"344":1,"345":1,"459":1,"798":1,"1306":1,"1393":1}}],["instructed",{"2":{"421":1}}],["instructs",{"2":{"398":1}}],["instruct",{"2":{"94":1}}],["instructions",{"2":{"83":1,"125":1,"151":1,"156":1}}],["instruction",{"2":{"35":2,"40":4,"117":1}}],["instantiations",{"2":{"102":1}}],["instance",{"0":{"96":1},"2":{"13":2,"138":1,"328":1,"329":2,"335":1,"393":1,"405":1,"421":1,"444":1,"681":1,"842":1,"957":1,"1034":1,"1052":1,"1131":1,"1139":1,"1354":1,"1392":1}}],["installs",{"2":{"200":1,"396":1}}],["installer",{"2":{"151":1}}],["installed",{"2":{"0":2,"26":2,"55":2,"83":1,"103":1,"104":3,"132":2,"152":1,"154":1,"157":2,"187":2,"289":1,"393":1,"394":1,"396":3,"398":1,"399":1,"407":1,"413":1,"418":1,"476":1,"480":1}}],["installing",{"0":{"413":1},"2":{"118":1,"151":1,"161":1,"393":1,"396":1,"412":1}}],["install",{"0":{"126":1},"2":{"83":1,"99":1,"100":1,"101":1,"104":1,"106":2,"107":2,"116":1,"117":2,"125":1,"126":3,"127":1,"151":5,"154":1,"155":10,"172":4,"177":2,"187":3,"200":1,"322":1,"396":5,"405":1,"407":2,"408":3,"409":9,"410":1,"413":2}}],["installation",{"0":{"83":1,"149":1,"156":1},"1":{"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1},"2":{"0":1,"26":1,"55":1,"83":2,"84":1,"132":1,"149":1,"409":1}}],["instead",{"2":{"8":1,"14":1,"17":1,"18":1,"48":2,"65":1,"67":1,"89":2,"102":1,"119":1,"172":1,"252":1,"257":1,"291":1,"341":1,"355":1,"357":1,"359":1,"363":1,"369":1,"376":1,"378":2,"383":1,"388":1,"416":1,"454":1,"712":1,"751":1,"752":1,"798":1,"812":1,"816":1,"842":1,"867":1,"965":1,"1034":1,"1271":1}}],["incompatible",{"2":{"358":1}}],["incompatibilities",{"2":{"61":1}}],["incoming",{"2":{"327":1}}],["incorrectshift",{"2":{"307":1}}],["incorrectly",{"2":{"248":1,"929":1,"946":1}}],["incorrect",{"0":{"307":1},"2":{"115":1,"172":1,"262":2,"265":1,"303":1,"304":1,"305":1,"307":3,"308":1,"309":2,"311":1,"313":1,"314":1,"315":2,"316":1,"317":1,"319":2,"786":1}}],["increasing",{"2":{"348":1,"387":1}}],["increased",{"2":{"786":1}}],["increases",{"2":{"87":1}}],["increase",{"2":{"19":1,"172":1,"180":1,"291":1,"786":1}}],["increasetime",{"2":{"14":3}}],["incrementally",{"2":{"350":1}}],["incrementasowner",{"2":{"328":2}}],["incrementasnotowner",{"2":{"196":1}}],["incrementing",{"2":{"274":1}}],["increments",{"2":{"262":1}}],["increment",{"2":{"36":1,"56":1,"62":1,"106":2,"115":2,"128":4,"130":3,"196":2,"328":4,"347":1,"355":1,"394":1,"778":1,"1092":2}}],["include",{"0":{"476":1,"568":1,"569":1,"580":1,"581":1},"2":{"34":1,"54":1,"172":3,"173":2,"248":1,"282":2,"289":1,"355":1,"391":1,"398":1,"419":1,"421":13,"476":2,"487":1,"568":2,"569":2,"580":3,"581":3,"798":1,"898":1,"1265":1}}],["included",{"2":{"25":1,"62":1,"202":1,"268":1,"1353":1,"1354":2}}],["includes",{"2":{"10":1,"62":1,"250":1,"260":1,"305":1,"348":1,"928":1,"945":1,"960":1,"1051":1,"1154":1,"1159":1,"1163":1,"1168":1,"1187":1,"1191":1,"1195":1,"1200":1,"1204":1,"1208":1,"1212":1,"1216":1,"1220":1,"1224":1,"1228":1,"1247":1,"1251":1,"1255":1}}],["including",{"2":{"25":1,"62":1,"141":1,"157":1,"172":1,"173":1,"291":1,"421":1,"507":2,"574":1,"928":1,"945":1,"1090":1}}],["inclusion",{"2":{"14":3,"115":1}}],["intasstring",{"2":{"918":2}}],["int256",{"0":{"1174":1,"1181":1,"1234":1,"1241":1},"2":{"421":1,"438":2,"613":1,"743":2,"744":2,"747":3,"748":4,"750":4,"916":1,"917":1,"918":1,"927":2,"944":2,"1031":2,"1106":1,"1145":1,"1153":4,"1158":4,"1162":4,"1167":4,"1174":4,"1181":4,"1190":4,"1199":4,"1203":4,"1207":4,"1211":4,"1215":4,"1219":4,"1223":4,"1227":4,"1234":4,"1241":4,"1250":4,"1278":1,"1285":3,"1291":2,"1356":2,"1363":1,"1364":1,"1385":2,"1387":1,"1389":1}}],["intuitive",{"2":{"328":1,"1033":1}}],["int",{"0":{"438":1},"2":{"203":6,"209":1,"211":1,"213":1,"215":40,"219":1,"221":1,"227":1,"229":1,"231":1,"233":1,"235":1,"237":1,"239":1,"241":1,"243":1,"245":1,"421":1,"438":3,"618":2,"747":2,"748":2,"752":2,"1278":1,"1284":1,"1363":1}}],["introducing",{"2":{"265":1}}],["introduces",{"2":{"355":1}}],["introduce",{"2":{"194":1,"265":1,"386":1,"398":1}}],["introduced",{"2":{"193":1,"265":1,"352":1,"504":1}}],["introduction",{"2":{"97":1}}],["intricate",{"2":{"67":1}}],["integers",{"2":{"482":1,"945":1}}],["integer",{"2":{"311":2,"327":1,"492":1,"513":1,"521":1,"522":1,"523":1,"529":1,"534":1,"535":1,"536":1,"537":1,"538":1,"540":1,"541":1,"555":1,"557":1,"558":1,"562":1,"564":1,"565":1,"567":1,"570":1,"575":1,"576":1,"579":1,"582":1,"583":1,"584":1,"944":3}}],["integrate",{"2":{"168":1}}],["integrated",{"2":{"167":1,"271":1}}],["integrating",{"0":{"103":1,"118":1},"1":{"104":1,"105":1,"106":1,"107":1,"119":1,"120":1,"121":1,"122":1,"123":1},"2":{"168":2,"384":1}}],["integration",{"0":{"98":1},"1":{"99":1,"100":1},"2":{"168":3,"172":4,"338":1,"364":1,"384":1}}],["integrity",{"0":{"152":1},"2":{"25":2,"152":1}}],["intended",{"2":{"58":1,"86":1,"276":1,"307":2,"374":1,"375":1,"783":1,"808":1}}],["intermediary",{"2":{"930":3}}],["intermediate",{"2":{"289":1,"421":1}}],["interpretation",{"2":{"1033":1}}],["interpret",{"2":{"929":1,"946":1,"1034":1,"1079":1,"1088":1}}],["interpreted",{"2":{"745":1,"766":1,"929":1,"946":1}}],["interpreting",{"0":{"258":1}}],["interesting",{"2":{"444":1,"567":1}}],["interfacing",{"2":{"84":1}}],["interfaces",{"2":{"35":2,"76":1,"172":1,"266":1,"368":1,"482":1}}],["interface",{"0":{"898":1},"2":{"35":4,"51":1,"84":1,"128":1,"130":2,"172":2,"271":1,"329":2,"618":1,"782":1,"842":1,"898":1,"1353":1}}],["interaction",{"2":{"172":1}}],["interactions",{"2":{"172":1}}],["interacting",{"2":{"79":1,"132":1,"142":1,"386":1}}],["interactively",{"2":{"146":1,"167":1}}],["interactives",{"2":{"95":2,"96":1,"172":4,"625":1}}],["interactive",{"0":{"148":1},"2":{"33":1,"36":1,"95":1,"625":1,"628":1,"629":2,"972":3}}],["interact",{"0":{"145":1},"2":{"57":1,"71":1,"87":1,"159":1,"165":1,"338":1,"775":1,"896":1}}],["internalc",{"2":{"809":2}}],["internalb",{"2":{"809":2}}],["internala",{"2":{"809":2}}],["internaltype",{"2":{"62":2,"192":9}}],["internal",{"0":{"195":1,"390":1},"2":{"15":1,"27":1,"34":1,"90":1,"172":2,"193":1,"195":5,"215":56,"217":1,"219":1,"221":1,"223":1,"225":1,"227":1,"229":1,"231":1,"233":1,"235":1,"237":1,"239":1,"241":1,"243":1,"245":1,"262":1,"276":1,"285":1,"333":1,"334":2,"356":2,"374":1,"379":1,"390":4,"391":1,"421":2,"485":1,"778":2,"786":2,"787":5,"809":2,"880":2,"884":2,"1052":1,"1056":3,"1091":1,"1145":1,"1150":1,"1153":4,"1158":4,"1162":4,"1167":4,"1172":2,"1173":2,"1174":2,"1175":2,"1176":2,"1177":2,"1178":2,"1179":2,"1180":2,"1181":2,"1182":2,"1183":2,"1184":2,"1185":2,"1186":3,"1190":4,"1194":2,"1199":4,"1203":4,"1207":4,"1211":4,"1215":4,"1219":4,"1223":4,"1227":4,"1232":2,"1233":2,"1234":2,"1235":2,"1236":2,"1237":2,"1238":2,"1239":2,"1240":2,"1241":2,"1242":2,"1243":2,"1244":2,"1245":2,"1246":2,"1250":4,"1254":2,"1260":1,"1275":1,"1278":5,"1281":1,"1291":2,"1300":3,"1305":1,"1308":1,"1314":1,"1316":1,"1321":1,"1324":1,"1326":1,"1330":1,"1337":1,"1339":1,"1343":1,"1348":1,"1352":2,"1354":1,"1356":2,"1361":1,"1363":5,"1371":2,"1395":3,"1398":1,"1401":3,"1406":1}}],["interval",{"2":{"8":2,"14":4,"17":2,"172":1}}],["into",{"0":{"929":1,"946":1,"979":1},"2":{"13":2,"35":1,"37":1,"56":1,"57":1,"69":1,"84":1,"85":1,"86":1,"90":1,"94":1,"102":1,"106":1,"127":1,"138":1,"172":1,"178":1,"180":1,"198":1,"252":1,"254":3,"265":1,"273":1,"277":1,"345":1,"355":1,"391":1,"393":2,"398":1,"407":1,"414":2,"416":1,"417":1,"431":1,"456":1,"609":1,"808":1,"901":1,"905":1,"909":1,"913":1,"917":1,"927":2,"929":2,"930":1,"944":2,"946":4,"953":1,"1050":1,"1051":1,"1151":1,"1271":1}}],["in",{"0":{"188":1,"191":1,"383":1,"388":1,"407":1,"409":1,"417":1,"444":1,"446":1,"447":1},"1":{"445":1,"446":1,"447":1},"2":{"1":1,"3":1,"8":5,"14":6,"15":1,"17":2,"18":5,"19":2,"21":1,"24":2,"25":6,"26":1,"27":1,"31":1,"33":1,"34":4,"35":11,"37":4,"43":1,"44":1,"45":4,"48":1,"56":4,"57":1,"58":1,"59":1,"62":1,"64":1,"65":2,"67":1,"69":2,"70":1,"75":1,"76":1,"77":2,"81":1,"82":2,"83":1,"84":2,"85":2,"87":2,"89":1,"90":3,"91":1,"92":2,"93":3,"94":7,"95":3,"96":2,"102":4,"103":1,"104":3,"106":1,"107":1,"108":2,"111":1,"115":5,"119":2,"121":1,"122":2,"125":2,"126":1,"127":1,"129":1,"130":1,"131":3,"134":1,"139":1,"151":1,"152":1,"156":1,"158":2,"172":8,"173":1,"175":1,"177":1,"180":1,"183":2,"185":1,"188":4,"189":2,"190":1,"192":5,"193":1,"194":2,"195":1,"196":2,"197":1,"198":3,"199":3,"202":2,"215":2,"243":1,"245":1,"248":2,"249":1,"250":3,"251":2,"252":1,"253":1,"254":4,"257":12,"259":1,"260":3,"262":5,"263":1,"264":2,"265":5,"266":5,"267":1,"268":2,"269":2,"270":1,"271":1,"272":9,"273":1,"274":2,"275":5,"276":4,"277":1,"278":1,"279":1,"280":1,"282":7,"283":3,"284":3,"285":6,"289":2,"291":1,"292":4,"302":1,"303":1,"304":2,"307":2,"308":2,"311":4,"313":1,"314":1,"316":1,"317":1,"323":1,"325":6,"328":15,"329":1,"334":1,"335":2,"336":1,"337":3,"338":1,"339":1,"340":1,"341":2,"342":8,"344":1,"345":1,"346":1,"347":15,"351":1,"352":4,"353":2,"355":2,"356":10,"357":2,"358":1,"359":3,"360":1,"361":1,"362":3,"363":3,"364":1,"365":2,"367":3,"369":1,"374":1,"376":1,"377":2,"378":1,"379":1,"383":2,"384":7,"386":2,"387":3,"388":2,"391":1,"392":3,"393":3,"394":3,"396":2,"397":4,"398":3,"401":2,"402":3,"403":2,"405":1,"407":3,"408":1,"410":2,"413":2,"414":4,"415":1,"416":5,"417":3,"420":1,"421":26,"422":1,"428":1,"430":2,"431":5,"432":5,"433":2,"434":1,"438":1,"439":1,"440":2,"441":2,"444":5,"445":3,"446":2,"447":2,"448":1,"456":1,"457":1,"459":3,"461":1,"465":1,"467":1,"473":1,"474":1,"476":1,"477":1,"481":1,"484":1,"486":6,"487":1,"492":1,"495":1,"497":6,"498":1,"504":1,"505":1,"507":1,"517":1,"531":1,"532":1,"533":2,"534":1,"535":1,"536":2,"537":2,"538":2,"539":1,"540":1,"541":1,"543":1,"551":1,"552":1,"558":1,"561":2,"564":1,"573":2,"574":7,"576":1,"586":1,"620":1,"624":1,"628":1,"646":3,"650":1,"651":2,"654":1,"655":1,"659":2,"660":1,"683":2,"684":1,"689":1,"702":1,"712":1,"758":1,"759":2,"775":1,"778":3,"782":6,"783":1,"786":1,"787":5,"788":1,"798":1,"802":2,"803":1,"807":4,"808":5,"809":1,"812":1,"816":2,"820":3,"826":3,"853":1,"854":1,"857":1,"858":1,"861":2,"862":1,"863":1,"867":2,"875":1,"876":1,"880":3,"884":3,"888":2,"892":1,"894":2,"895":1,"898":1,"920":1,"921":1,"925":3,"927":2,"929":5,"930":1,"931":1,"932":1,"934":1,"937":1,"938":1,"942":3,"944":3,"946":5,"947":1,"949":1,"957":1,"965":1,"972":2,"973":3,"978":2,"996":1,"997":1,"1008":1,"1011":1,"1012":1,"1022":1,"1023":3,"1033":6,"1051":1,"1052":3,"1079":1,"1088":4,"1090":2,"1091":1,"1102":1,"1107":1,"1111":1,"1112":1,"1120":1,"1130":5,"1131":2,"1133":1,"1134":1,"1138":5,"1139":2,"1141":1,"1142":1,"1151":4,"1154":2,"1159":3,"1163":2,"1168":3,"1187":1,"1191":2,"1195":1,"1200":1,"1204":2,"1208":1,"1212":2,"1216":1,"1220":2,"1224":1,"1228":2,"1247":1,"1251":2,"1255":1,"1271":1,"1276":2,"1284":6,"1285":2,"1292":1,"1296":1,"1301":1,"1306":1,"1309":1,"1321":1,"1324":1,"1328":1,"1337":1,"1354":4,"1357":1,"1392":2,"1393":1,"1395":2}}],["idaddressnameall0x01ecrecoverall0x02sha",{"2":{"1264":1}}],["idstartstopall0x000xff433114",{"2":{"1265":1}}],["ids",{"2":{"344":1,"450":1,"452":2,"1082":1}}],["idea",{"2":{"1033":1}}],["identity",{"2":{"328":1}}],["identify",{"2":{"384":1,"1061":1}}],["identifying",{"2":{"248":1,"340":1}}],["identifiable",{"2":{"316":1}}],["identified",{"2":{"341":1,"342":1,"1013":1}}],["identifies",{"2":{"307":1}}],["identifiers",{"2":{"266":1,"302":1,"314":1,"344":1,"345":1,"452":1,"482":1}}],["identifier",{"2":{"25":2,"27":1,"43":1,"76":1,"94":2,"172":1,"271":1,"307":1,"308":1,"309":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"341":1,"342":2,"637":1,"683":2,"684":1,"689":1,"775":1,"1012":1,"1027":1,"1052":2,"1056":1,"1082":1}}],["identical",{"2":{"87":1,"391":1,"782":1,"1285":1}}],["ide",{"2":{"83":1}}],["id",{"0":{"535":1},"2":{"1":1,"13":1,"14":1,"18":2,"19":3,"31":6,"35":13,"45":4,"172":3,"292":3,"303":2,"304":1,"305":1,"307":1,"308":1,"309":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"338":1,"345":1,"421":2,"535":2,"543":1,"611":1,"638":1,"1081":5,"1082":1}}],["iownable",{"2":{"266":1}}],["io",{"2":{"1":1,"3":1,"45":1,"80":1,"83":1,"85":1,"86":1,"88":1,"95":1,"101":1,"133":1,"157":1,"172":2,"414":1,"421":1,"561":1,"602":1,"1023":3,"1112":2}}],["if|when",{"2":{"356":1,"384":2}}],["if",{"0":{"404":1,"417":1},"2":{"0":1,"8":2,"13":3,"14":1,"15":3,"18":1,"26":2,"31":2,"34":1,"35":7,"36":1,"43":2,"44":1,"45":12,"48":1,"51":1,"55":1,"56":1,"57":1,"60":1,"62":2,"63":1,"64":2,"72":1,"75":1,"77":1,"78":1,"82":2,"83":1,"84":1,"85":2,"87":1,"90":4,"92":1,"94":3,"102":2,"105":1,"107":2,"111":1,"117":1,"119":2,"125":1,"126":1,"127":1,"132":1,"149":1,"151":2,"154":1,"157":1,"172":1,"175":1,"177":1,"178":1,"179":2,"182":1,"183":1,"185":3,"187":5,"189":1,"190":1,"194":1,"198":2,"200":1,"248":2,"251":1,"256":1,"257":1,"260":1,"262":4,"265":4,"266":1,"269":2,"282":1,"283":2,"291":1,"303":1,"307":1,"308":2,"309":1,"311":2,"325":6,"327":1,"328":6,"338":1,"339":1,"342":1,"344":2,"345":1,"346":2,"349":1,"355":1,"356":4,"357":2,"362":2,"363":2,"369":1,"376":3,"378":1,"379":1,"382":1,"383":1,"384":2,"386":1,"387":1,"394":1,"396":2,"399":1,"405":1,"408":1,"409":2,"414":3,"415":1,"416":2,"417":2,"418":1,"419":1,"421":6,"426":1,"430":3,"431":1,"432":1,"440":1,"447":1,"449":1,"467":1,"474":2,"476":2,"478":1,"479":2,"480":2,"483":1,"484":1,"485":2,"491":1,"493":1,"494":1,"496":1,"497":1,"507":3,"543":1,"565":1,"574":5,"577":1,"582":1,"601":2,"637":1,"646":1,"650":2,"651":1,"654":2,"659":1,"680":1,"684":2,"689":2,"702":1,"712":1,"745":1,"751":1,"752":1,"754":1,"755":1,"766":1,"775":2,"778":7,"782":2,"786":2,"787":4,"788":3,"797":1,"798":1,"802":7,"804":1,"808":2,"820":1,"822":1,"826":1,"828":1,"832":2,"846":3,"853":1,"854":1,"857":1,"858":1,"862":1,"863":1,"867":1,"880":5,"884":7,"888":1,"892":6,"894":1,"897":1,"927":2,"930":1,"931":2,"934":1,"944":2,"947":2,"949":1,"960":2,"965":1,"976":1,"982":8,"1012":2,"1023":1,"1033":1,"1034":1,"1038":2,"1039":1,"1061":1,"1074":2,"1081":6,"1086":1,"1087":4,"1088":4,"1089":2,"1090":1,"1130":3,"1138":3,"1279":1,"1285":3,"1288":1,"1296":2,"1301":2,"1324":1,"1327":1,"1328":1,"1331":1,"1334":1,"1364":1,"1380":1,"1395":1,"1396":1}}],["isfrozen",{"2":{"1395":2}}],["isfile",{"2":{"802":1,"804":1}}],["iswrite",{"2":{"1085":1,"1089":1,"1091":1,"1092":4}}],["isvalidsignature",{"2":{"1056":2}}],["isdir",{"2":{"802":1,"804":1}}],["iscontext",{"0":{"843":1},"1":{"844":1,"845":1,"846":1},"2":{"770":1,"844":1,"846":3}}],["ispersistent",{"0":{"847":1},"1":{"848":1,"849":1,"850":1,"851":1},"2":{"345":2,"800":1,"848":1,"850":2,"876":4,"877":1,"1008":3,"1009":1}}],["isn",{"2":{"328":1,"386":1,"409":1,"421":1,"1089":1}}],["isapprovedforall",{"2":{"284":2}}],["isolate",{"2":{"808":2}}],["isolated",{"2":{"172":1,"257":1,"342":1,"808":2,"892":2}}],["isolation",{"2":{"808":1}}],["isolationmodemagic",{"2":{"189":1}}],["issues",{"0":{"53":1,"1396":1},"1":{"54":1},"2":{"117":2,"149":1,"157":1,"172":3,"265":1,"275":1,"398":2}}],["issue",{"2":{"3":1,"157":1,"187":1,"189":1,"305":1,"417":1,"419":1,"778":1,"787":1,"880":1,"884":1}}],["is",{"0":{"87":1,"417":1},"2":{"0":3,"8":2,"13":3,"14":1,"15":1,"20":1,"24":2,"25":2,"26":4,"33":1,"34":1,"35":8,"36":3,"37":4,"43":4,"44":2,"45":5,"48":1,"50":1,"54":2,"55":3,"56":1,"57":4,"58":1,"60":2,"61":1,"62":1,"65":11,"67":2,"72":1,"73":1,"75":1,"77":1,"78":2,"79":1,"82":3,"83":5,"84":2,"85":3,"86":1,"87":3,"89":2,"90":3,"91":1,"94":10,"95":2,"99":1,"100":1,"101":1,"102":1,"104":3,"106":3,"107":1,"108":2,"109":1,"111":1,"115":3,"117":1,"120":2,"122":1,"128":1,"129":1,"131":1,"132":3,"134":1,"135":1,"139":2,"141":1,"142":1,"146":1,"151":1,"152":1,"154":1,"157":2,"158":1,"159":1,"171":2,"172":4,"175":1,"185":2,"187":1,"188":2,"191":1,"192":3,"194":1,"195":5,"196":1,"198":2,"202":2,"203":1,"215":10,"217":1,"219":1,"221":1,"223":1,"225":1,"227":1,"229":1,"231":1,"233":1,"235":1,"237":1,"239":1,"241":1,"243":1,"245":2,"248":4,"249":1,"250":1,"251":1,"252":2,"253":1,"254":4,"255":1,"257":8,"258":2,"259":1,"260":5,"262":7,"263":1,"264":1,"265":7,"267":2,"268":9,"270":4,"271":1,"272":5,"273":1,"274":2,"275":4,"276":3,"285":1,"289":1,"291":1,"297":1,"303":1,"307":4,"308":2,"309":1,"313":1,"314":1,"316":1,"323":4,"325":4,"327":5,"328":21,"329":4,"334":1,"336":2,"338":2,"339":3,"341":1,"342":15,"344":2,"345":9,"346":1,"347":2,"348":1,"351":2,"352":3,"353":3,"355":5,"356":5,"357":5,"358":3,"361":1,"362":3,"363":2,"365":2,"367":1,"376":2,"378":5,"382":1,"384":4,"386":3,"387":4,"388":1,"390":2,"391":1,"392":2,"393":1,"394":3,"398":1,"400":2,"402":5,"403":1,"407":1,"410":2,"412":1,"414":3,"416":3,"417":2,"418":2,"419":1,"421":4,"427":1,"428":2,"432":3,"434":4,"440":1,"441":1,"443":1,"444":3,"445":1,"446":1,"447":1,"451":1,"452":3,"456":1,"475":1,"476":1,"478":2,"479":2,"481":1,"488":1,"491":2,"492":4,"495":1,"496":1,"497":6,"499":2,"507":6,"543":1,"561":1,"565":2,"574":2,"582":1,"594":1,"601":2,"637":1,"646":2,"655":1,"659":3,"680":1,"681":1,"684":2,"689":2,"702":1,"751":1,"752":1,"754":1,"755":1,"758":1,"775":5,"778":7,"779":6,"782":8,"783":3,"786":7,"787":8,"788":1,"797":2,"798":1,"802":7,"803":2,"804":1,"807":3,"808":5,"809":6,"812":3,"816":3,"822":1,"826":1,"828":1,"842":1,"849":1,"861":1,"867":1,"875":5,"876":3,"880":8,"884":9,"885":1,"892":6,"898":1,"926":1,"927":7,"928":1,"929":5,"930":1,"934":1,"943":1,"944":16,"945":2,"946":5,"949":1,"957":1,"960":2,"972":2,"973":1,"975":1,"982":4,"1008":2,"1012":2,"1023":2,"1033":5,"1038":4,"1039":2,"1052":4,"1055":1,"1056":4,"1057":1,"1061":2,"1074":6,"1075":1,"1083":1,"1086":4,"1087":8,"1088":5,"1090":2,"1112":1,"1117":1,"1130":5,"1131":1,"1134":1,"1138":5,"1139":1,"1142":1,"1151":2,"1154":1,"1159":1,"1163":2,"1168":2,"1187":1,"1191":1,"1195":1,"1200":1,"1204":1,"1208":1,"1212":1,"1216":1,"1220":1,"1224":1,"1228":1,"1247":1,"1251":1,"1255":1,"1274":1,"1284":2,"1285":7,"1288":1,"1296":1,"1301":1,"1321":1,"1324":1,"1327":1,"1334":1,"1337":1,"1340":1,"1344":1,"1351":1,"1353":3,"1354":1,"1357":1,"1380":1,"1392":1,"1395":2}}],["f2",{"2":{"248":3}}],["f1",{"2":{"248":3}}],["ff4ea8a7bbde4488428de69f2c40a7fc56184f5e",{"2":{"190":1}}],["ffi`",{"2":{"421":1}}],["ffi",{"0":{"249":1,"530":1,"795":1},"1":{"796":1,"797":1,"798":1,"799":1},"2":{"172":1,"247":1,"249":3,"250":1,"251":4,"252":1,"254":3,"255":1,"291":2,"421":1,"458":3,"530":3,"790":1,"796":1,"797":1,"798":1,"799":2,"1107":1}}],["fs",{"2":{"172":1,"421":1,"458":3,"790":1,"803":3,"804":3,"820":1,"826":1,"934":1,"949":1}}],["fmt",{"2":{"109":3,"421":1,"429":1,"431":2,"432":1,"435":2,"436":2,"437":2,"438":2,"439":2,"440":2,"441":2,"442":2,"443":2}}],["flexible",{"2":{"402":1}}],["flexibility",{"2":{"65":1,"337":1,"387":1,"388":1,"402":1}}],["float",{"2":{"944":3}}],["floating",{"2":{"248":1,"927":2,"944":2}}],["flow",{"2":{"90":1,"1090":1}}],["flare",{"2":{"809":15}}],["flatten",{"2":{"172":2,"290":1}}],["flawed",{"2":{"77":1,"78":1}}],["flag",{"2":{"8":2,"18":1,"43":4,"45":3,"48":1,"87":1,"90":3,"102":1,"115":1,"117":1,"172":1,"186":1,"200":1,"297":1,"307":1,"323":1,"325":1,"337":1,"338":1,"340":1,"347":1,"348":1,"355":1,"362":1,"388":1,"394":1,"401":1,"402":1,"415":1,"418":1,"421":4,"446":1,"568":1,"569":1,"573":1,"580":1,"581":1,"586":1,"594":1,"808":1}}],["flags",{"0":{"32":1},"2":{"7":2,"32":1,"155":1,"347":1,"361":1,"402":2,"775":2}}],["f00d7308",{"2":{"51":2}}],["fc410830",{"2":{"45":1}}],["furthermore",{"2":{"414":1,"416":1}}],["further",{"2":{"255":1,"485":1,"803":1}}],["fulfillrandomness",{"2":{"133":1}}],["fully",{"2":{"65":1,"82":1,"412":1,"775":1,"1038":1}}],["full",{"0":{"404":1},"2":{"20":1,"27":1,"35":1,"62":1,"74":1,"97":2,"141":1,"148":1,"253":1,"289":2,"367":2,"400":1,"407":1,"410":1}}],["func",{"0":{"431":1},"2":{"421":1,"431":3,"482":1}}],["functiondescriptionexcludecontract",{"2":{"268":1}}],["function3",{"2":{"267":1}}],["function2",{"2":{"267":2}}],["function1",{"2":{"267":2}}],["functionality",{"2":{"172":1,"173":1,"202":1,"329":2,"335":1,"356":1,"392":1,"1285":1,"1353":1,"1354":1}}],["functionname`",{"2":{"172":1}}],["functionname",{"2":{"172":2}}],["functionsig",{"2":{"932":1}}],["functions",{"0":{"216":1,"268":1,"272":1,"275":1,"390":1,"391":1,"392":1,"1393":1},"1":{"217":1,"218":1,"219":1,"220":1,"221":1,"222":1,"223":1,"224":1,"225":1,"226":1,"227":1,"228":1,"229":1,"230":1,"231":1,"232":1,"233":1,"234":1,"235":1,"236":1,"237":1,"238":1,"239":1,"240":1,"241":1,"242":1,"243":1,"244":1,"245":1,"246":1},"2":{"34":1,"67":1,"75":2,"111":3,"148":1,"172":6,"173":1,"182":1,"195":1,"202":1,"215":1,"216":1,"246":1,"260":2,"262":1,"266":1,"267":3,"268":2,"271":2,"274":1,"275":1,"276":1,"279":2,"281":1,"285":2,"309":1,"314":1,"325":3,"328":1,"332":1,"336":1,"342":1,"356":5,"357":1,"365":2,"384":3,"390":2,"391":2,"392":1,"421":3,"782":1,"786":2,"787":1,"931":1,"932":1,"947":1,"1055":1,"1056":1,"1264":1,"1284":2,"1354":7,"1393":2}}],["function",{"0":{"267":1,"274":1,"281":1,"314":1,"373":1,"374":1},"1":{"282":1,"283":1},"2":{"27":1,"34":2,"35":4,"36":2,"44":1,"57":1,"62":3,"77":2,"78":3,"85":1,"94":4,"106":4,"115":1,"128":6,"129":1,"138":1,"143":1,"148":1,"172":18,"185":2,"192":9,"195":7,"196":2,"215":56,"217":1,"219":1,"221":1,"223":1,"225":1,"227":1,"229":1,"231":1,"233":1,"235":1,"237":1,"239":1,"241":1,"243":1,"244":1,"245":1,"246":1,"248":3,"249":1,"251":1,"252":1,"253":1,"254":2,"257":6,"260":5,"262":16,"265":3,"266":4,"267":2,"269":1,"270":6,"271":6,"272":6,"273":2,"274":3,"275":6,"276":4,"278":1,"279":3,"280":4,"284":3,"285":5,"307":2,"308":3,"309":3,"311":2,"314":7,"315":2,"319":3,"325":1,"328":8,"333":1,"342":1,"344":6,"345":4,"347":1,"355":3,"356":8,"357":7,"358":2,"373":1,"378":3,"379":1,"383":2,"384":3,"390":4,"392":1,"402":1,"421":2,"431":11,"434":3,"444":1,"445":1,"446":1,"447":1,"450":1,"453":1,"632":1,"636":1,"641":1,"645":1,"649":1,"651":3,"653":1,"655":2,"658":2,"660":1,"663":3,"665":1,"668":1,"672":1,"675":1,"679":1,"681":2,"683":3,"688":3,"693":3,"695":1,"701":1,"706":2,"711":1,"715":2,"722":2,"729":2,"736":2,"743":2,"750":14,"754":1,"755":2,"757":2,"764":2,"772":1,"775":5,"777":4,"781":4,"782":1,"783":4,"785":14,"786":2,"787":6,"788":5,"792":1,"796":1,"802":12,"807":9,"808":1,"809":9,"811":1,"815":1,"819":1,"825":1,"827":1,"831":1,"834":2,"840":1,"841":1,"844":1,"848":1,"866":1,"869":1,"874":4,"876":2,"879":2,"881":3,"883":2,"885":6,"887":2,"889":2,"891":1,"892":1,"893":6,"900":1,"904":1,"908":1,"912":1,"916":1,"920":1,"925":1,"930":1,"931":1,"932":1,"937":1,"942":1,"947":1,"952":1,"956":1,"959":4,"961":1,"964":1,"968":1,"971":3,"975":2,"981":1,"986":1,"990":1,"995":1,"1000":1,"1003":1,"1006":2,"1008":2,"1011":4,"1016":1,"1021":3,"1026":1,"1031":15,"1033":1,"1037":1,"1039":3,"1041":1,"1046":1,"1050":3,"1051":1,"1052":8,"1054":2,"1056":5,"1060":1,"1062":2,"1064":1,"1068":3,"1070":2,"1073":4,"1075":2,"1078":1,"1081":5,"1083":2,"1085":1,"1086":1,"1092":2,"1094":1,"1096":1,"1098":1,"1101":1,"1106":6,"1110":2,"1115":2,"1117":1,"1119":1,"1124":1,"1129":2,"1137":2,"1145":1,"1151":5,"1153":4,"1155":1,"1158":4,"1162":4,"1164":1,"1167":4,"1172":2,"1173":2,"1174":2,"1175":2,"1176":2,"1177":2,"1178":2,"1179":2,"1180":2,"1181":2,"1182":2,"1183":2,"1184":2,"1185":2,"1186":3,"1190":4,"1194":2,"1199":4,"1203":4,"1207":4,"1211":4,"1215":4,"1219":4,"1223":4,"1227":4,"1232":2,"1233":2,"1234":2,"1235":2,"1236":2,"1237":2,"1238":2,"1239":2,"1240":2,"1241":2,"1242":2,"1243":2,"1244":2,"1245":2,"1246":2,"1250":4,"1254":2,"1262":2,"1267":1,"1270":1,"1271":1,"1275":1,"1276":1,"1278":5,"1281":1,"1287":3,"1291":2,"1295":4,"1300":3,"1305":1,"1308":1,"1316":1,"1326":1,"1328":1,"1330":1,"1333":4,"1339":1,"1343":1,"1351":2,"1352":3,"1356":2,"1363":5,"1366":1,"1371":2,"1372":1,"1375":1,"1379":4,"1393":2,"1395":6,"1398":1,"1401":3,"1402":1,"1406":2}}],["fun",{"2":{"218":1,"1196":1,"1256":1,"1373":2,"1403":1}}],["funds",{"2":{"262":1,"309":1,"360":1,"362":2,"363":4}}],["funded",{"2":{"140":1}}],["fundamentalscyfrin",{"2":{"97":1}}],["fund",{"2":{"92":1}}],["fusd",{"2":{"43":1,"45":2}}],["fuzzinterface",{"2":{"268":3}}],["fuzzing",{"0":{"251":1,"252":1},"2":{"106":1,"247":1,"248":2,"250":1,"256":1,"257":2,"260":3,"264":1,"265":2,"266":1,"268":1,"270":1,"387":2,"421":1,"447":1,"566":1,"577":1}}],["fuzzartifactselectors",{"2":{"268":1}}],["fuzzartifactselector",{"2":{"268":2}}],["fuzzselectors",{"2":{"268":2}}],["fuzzselector",{"2":{"268":4}}],["fuzzed",{"2":{"253":1,"255":1,"260":4,"262":1,"266":1,"267":1,"270":1,"272":1,"274":1,"421":1,"586":1,"894":1}}],["fuzzer",{"0":{"805":1},"2":{"251":1,"257":1,"258":3,"260":2,"265":1,"266":3,"272":1,"275":1,"444":1,"650":1,"654":1,"896":2}}],["fuzzmycontract",{"2":{"172":1}}],["fuzz",{"0":{"257":1,"259":1,"260":1,"352":1,"446":1,"563":1},"1":{"258":1,"259":1,"260":2,"564":1,"565":1,"566":1,"567":1,"568":1,"569":1,"570":1,"571":1,"572":1,"573":1},"2":{"36":2,"106":1,"109":2,"138":1,"172":12,"173":1,"257":1,"258":3,"259":1,"260":1,"262":1,"266":1,"268":1,"274":1,"277":1,"325":3,"352":6,"353":1,"357":1,"384":2,"387":6,"407":1,"410":1,"421":6,"444":5,"445":3,"446":7,"458":2,"527":1,"563":1,"564":4,"565":1,"566":1,"567":2,"568":1,"569":1,"570":1,"571":3,"572":2,"573":2,"574":5,"575":1,"579":1,"580":2,"581":2,"650":3,"654":3,"894":1,"1263":1,"1271":1}}],["futurecontract",{"2":{"1354":1}}],["future",{"2":{"14":3,"35":1,"83":1,"102":1,"131":1,"277":1,"339":1,"454":1,"861":1}}],["feasible",{"2":{"387":1}}],["features",{"2":{"173":1,"364":1,"368":1}}],["feature",{"2":{"102":2,"340":1,"355":1,"897":1,"926":1,"943":1}}],["fea38858b0",{"2":{"88":1}}],["few",{"2":{"75":1,"87":1,"92":1,"107":1,"133":1,"182":1,"360":1}}],["fe",{"2":{"35":2}}],["fetches",{"2":{"1110":2,"1111":1}}],["fetched",{"2":{"18":1,"35":1,"344":1}}],["fetching",{"2":{"18":1,"35":1,"822":1,"828":1,"1296":1,"1301":1}}],["fetch",{"2":{"18":3,"35":4,"84":1,"101":1,"172":1,"291":3,"387":1,"822":1,"828":1}}],["feel",{"2":{"281":1,"370":1,"386":1}}],["feedback",{"2":{"27":1,"29":1}}],["fees",{"2":{"17":1,"173":1}}],["feehistory",{"2":{"12":1}}],["fee",{"0":{"538":1,"791":1},"1":{"792":1,"793":1,"794":1},"2":{"1":1,"13":1,"19":5,"292":5,"338":1,"421":1,"538":3,"770":1,"792":1,"794":1}}],["f",{"2":{"18":1,"35":2,"192":10,"248":2,"291":1,"630":1,"782":7}}],["fifth",{"2":{"783":1}}],["fifo",{"2":{"21":2}}],["fire",{"2":{"309":1}}],["firstly",{"2":{"775":1}}],["first",{"2":{"36":2,"37":1,"56":1,"77":1,"82":2,"86":1,"90":1,"111":1,"190":1,"195":1,"271":1,"280":1,"325":2,"328":1,"335":1,"342":1,"355":1,"386":2,"387":1,"405":1,"431":6,"507":1,"601":1,"633":1,"681":1,"703":1,"707":1,"778":2,"782":1,"786":3,"787":2,"804":1,"880":2,"884":2,"892":1,"927":1,"929":4,"944":1,"946":4,"1034":1,"1038":1,"1050":1,"1052":1,"1130":1,"1138":1,"1285":1}}],["fit",{"2":{"186":1,"431":2,"655":1}}],["field",{"2":{"172":1,"284":2,"408":1,"412":1,"413":1,"1088":1}}],["fields",{"2":{"15":1,"932":1,"1089":1}}],["fix",{"2":{"177":1,"198":1}}],["fixturewallet",{"2":{"280":4}}],["fixtureyay",{"2":{"260":1}}],["fixtureowner",{"2":{"260":1}}],["fixtureamount",{"2":{"260":1}}],["fixture",{"2":{"260":4,"279":2}}],["fixtureindex",{"2":{"172":2}}],["fixtureswap",{"2":{"280":4}}],["fixturesums",{"2":{"280":2}}],["fixtureslate",{"2":{"260":1}}],["fixtures",{"0":{"260":1},"2":{"172":2,"260":6,"279":1,"384":1,"929":1,"931":1,"932":1,"946":1,"947":1}}],["fixed",{"2":{"65":3,"260":1,"279":1,"319":1,"476":1,"506":1,"613":2,"752":1}}],["filter`",{"2":{"421":1}}],["filters",{"2":{"282":1,"325":1,"565":1}}],["filtering",{"0":{"282":1},"2":{"302":1,"384":1,"654":1}}],["filter",{"2":{"115":1,"172":1,"182":3,"347":1,"384":1,"1263":2,"1268":1}}],["filename",{"2":{"624":1,"628":1,"820":1,"826":1,"1296":1,"1301":1}}],["filenames",{"2":{"347":1}}],["file2",{"2":{"481":1}}],["file1",{"2":{"481":1}}],["file=",{"2":{"352":1}}],["filesystem",{"2":{"803":3,"804":2}}],["files",{"0":{"375":1,"379":1,"382":1,"486":1},"2":{"31":1,"35":1,"43":1,"56":3,"62":3,"69":1,"70":1,"86":1,"95":1,"96":1,"172":2,"182":1,"188":1,"257":3,"289":2,"300":1,"302":1,"303":2,"304":2,"323":2,"325":2,"327":1,"328":1,"347":3,"349":2,"353":1,"354":1,"367":2,"368":2,"379":3,"382":1,"384":2,"393":2,"394":2,"402":1,"411":1,"414":4,"416":1,"419":1,"421":7,"426":1,"427":1,"443":1,"451":1,"459":1,"475":1,"481":1,"486":1,"507":2,"517":1,"553":1,"554":1,"624":1,"629":1,"804":4,"896":2,"925":1,"926":1,"935":1,"942":1,"943":1,"950":1}}],["file",{"0":{"572":1,"801":1,"934":1,"949":1},"1":{"802":1,"803":1,"804":1},"2":{"17":1,"18":1,"20":2,"25":1,"35":2,"36":1,"43":1,"45":1,"62":5,"76":1,"93":5,"94":3,"95":1,"102":1,"106":7,"107":4,"108":2,"109":1,"111":1,"115":5,"123":2,"158":1,"172":1,"181":1,"183":2,"188":1,"254":2,"281":1,"282":3,"283":7,"285":2,"307":1,"308":1,"309":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"323":2,"327":2,"344":2,"345":2,"346":1,"351":2,"352":4,"353":1,"367":1,"369":2,"374":1,"379":3,"382":2,"384":1,"388":2,"390":2,"393":3,"396":1,"397":1,"398":1,"410":2,"412":1,"413":1,"414":3,"415":1,"416":3,"419":2,"421":3,"457":1,"477":1,"481":3,"486":5,"499":1,"507":3,"572":2,"625":1,"628":1,"650":1,"654":1,"707":1,"759":1,"798":1,"802":12,"803":1,"804":13,"820":1,"826":1,"896":1,"924":1,"925":1,"929":1,"934":1,"935":1,"941":1,"942":1,"946":1,"949":1,"950":1,"978":1,"1033":7,"1034":1,"1130":10,"1138":10}}],["figure",{"2":{"94":1,"285":1}}],["finer",{"2":{"444":1}}],["finds",{"2":{"432":1,"1331":1}}],["finding",{"2":{"257":1}}],["findings",{"2":{"117":1,"497":1}}],["find",{"0":{"1329":1},"1":{"1330":1,"1331":1},"2":{"120":1,"175":1,"248":1,"335":2,"355":1,"365":1,"387":1,"432":1,"589":1,"654":1,"1330":1,"1373":2,"1393":1,"1403":1}}],["finished",{"2":{"35":2,"56":2,"85":1,"257":6,"283":2,"328":1,"347":5,"393":1,"394":2}}],["finaljson",{"2":{"1034":2}}],["finally",{"2":{"27":1,"56":1,"83":1,"88":1,"122":1,"251":1,"282":1,"788":1,"1033":2,"1034":2,"1130":1,"1133":1,"1138":1,"1141":1}}],["final",{"2":{"25":1,"65":1,"74":1,"930":3,"1134":1,"1142":1}}],["finalized",{"2":{"8":1}}],["finalization",{"2":{"8":1}}],["fish",{"0":{"112":1},"2":{"22":1,"110":1,"112":12}}],["frame",{"2":{"1001":1}}],["framework",{"2":{"168":1,"170":1,"172":1,"185":1}}],["frameworks",{"2":{"37":1}}],["fruitstall",{"2":{"929":8,"946":8}}],["fruit",{"2":{"929":2,"946":3}}],["frozen",{"2":{"1395":1}}],["frontrunning",{"2":{"378":1}}],["frontrun",{"0":{"378":1}}],["front",{"2":{"34":1,"90":1,"172":1}}],["froms",{"2":{"626":1}}],["from",{"0":{"153":1,"176":1,"184":1,"369":1,"481":1},"1":{"154":1,"155":1},"2":{"13":1,"14":1,"18":6,"27":2,"34":2,"35":6,"37":1,"43":2,"45":1,"51":1,"52":1,"64":1,"67":1,"70":1,"72":2,"76":2,"78":2,"79":1,"81":2,"82":1,"85":1,"86":1,"90":3,"92":1,"94":6,"96":1,"97":1,"102":1,"108":1,"123":2,"126":1,"128":2,"129":1,"132":2,"133":1,"142":1,"150":1,"152":1,"155":1,"157":2,"158":2,"159":1,"165":1,"172":4,"178":1,"179":2,"181":3,"184":3,"185":3,"187":1,"190":1,"193":1,"202":2,"249":1,"252":1,"257":2,"260":1,"262":1,"267":1,"268":4,"269":1,"271":1,"275":2,"276":1,"280":2,"283":1,"291":4,"314":1,"328":8,"329":6,"331":1,"332":1,"338":1,"344":3,"345":1,"348":1,"351":1,"352":1,"353":1,"356":6,"363":2,"364":1,"365":1,"367":1,"368":1,"369":1,"371":1,"376":2,"378":2,"379":2,"384":4,"390":3,"393":2,"394":1,"397":3,"399":1,"407":1,"408":1,"419":1,"421":3,"432":1,"444":1,"450":1,"452":1,"456":1,"473":2,"475":1,"481":5,"483":1,"486":1,"507":1,"508":1,"543":1,"567":1,"568":1,"574":2,"580":1,"608":1,"613":5,"624":1,"625":1,"626":1,"628":1,"629":1,"630":2,"646":1,"665":1,"679":1,"680":1,"681":1,"684":1,"689":1,"694":1,"707":1,"708":2,"775":1,"783":3,"786":1,"787":2,"798":1,"802":1,"804":1,"807":5,"809":1,"846":1,"870":1,"884":1,"894":1,"925":1,"931":1,"932":2,"942":1,"947":1,"957":1,"960":1,"979":1,"997":2,"1052":2,"1056":2,"1070":1,"1074":1,"1110":2,"1111":1,"1151":3,"1263":1,"1284":2,"1285":2,"1296":1,"1301":1,"1309":1,"1310":2,"1324":1,"1334":1,"1340":1,"1344":1,"1353":5,"1354":5,"1364":1,"1380":1,"1384":1,"1392":1,"1393":1}}],["friendly",{"2":{"15":1,"89":1,"329":1,"1353":1}}],["freeing",{"2":{"496":1}}],["free",{"2":{"108":1,"370":1,"386":2}}],["freshly",{"2":{"347":1}}],["fresh",{"2":{"13":2,"187":1,"405":1,"929":2,"946":3}}],["frequently",{"2":{"170":1,"250":1}}],["frequent",{"2":{"8":1}}],["far",{"2":{"1134":1,"1142":1}}],["family",{"2":{"928":1,"945":1}}],["familiarity",{"2":{"82":1,"103":1}}],["favor",{"2":{"861":1}}],["falls",{"2":{"654":1}}],["fallback",{"2":{"444":1,"574":1}}],["false",{"2":{"13":2,"18":1,"59":1,"62":2,"85":1,"172":3,"262":1,"265":1,"270":1,"275":1,"280":1,"309":2,"328":6,"407":1,"410":1,"412":1,"421":19,"432":1,"433":1,"434":1,"437":1,"442":1,"447":1,"452":1,"470":1,"474":1,"480":1,"483":1,"489":1,"491":1,"493":1,"494":1,"500":1,"503":1,"507":1,"510":1,"512":1,"530":1,"543":1,"556":1,"559":1,"560":1,"573":1,"577":1,"578":1,"586":1,"601":2,"602":2,"654":1,"659":1,"724":3,"727":4,"754":2,"783":6,"787":2,"802":3,"808":1,"906":2,"1061":1,"1062":1,"1091":2,"1092":2,"1195":1}}],["fact",{"2":{"262":1,"444":1}}],["factory",{"0":{"64":1},"2":{"17":1,"64":4,"421":2}}],["faulty",{"2":{"197":1}}],["faucet",{"2":{"92":1}}],["faucets",{"2":{"92":2}}],["faq",{"0":{"175":1},"1":{"176":1,"177":1,"178":1,"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"185":1,"186":1,"187":1,"188":1,"189":1,"190":1,"191":1},"2":{"149":1,"170":1}}],["failure",{"0":{"571":1,"572":1,"585":1},"2":{"196":1,"309":1,"325":3,"352":2,"353":2,"421":3,"571":1,"572":1,"585":1,"1196":2}}],["failures",{"0":{"350":1,"351":1,"352":1,"353":1,"354":1},"1":{"351":1,"352":1,"353":1,"354":1},"2":{"172":1,"194":1,"195":1,"196":1,"197":1,"308":1,"350":1,"351":3,"352":5,"353":3,"354":1,"384":2,"421":4,"571":1,"572":2,"585":1}}],["fails",{"0":{"188":1},"2":{"85":1,"251":1,"257":1,"309":1,"325":1,"356":1,"357":1,"421":1,"577":1,"778":1,"783":1,"787":1,"798":1,"976":1,"1034":1,"1150":1,"1260":1,"1314":1}}],["failed",{"0":{"49":1},"2":{"56":2,"85":8,"90":1,"172":3,"189":1,"190":1,"257":7,"283":2,"308":2,"309":2,"328":2,"347":6,"351":1,"353":1,"394":2,"582":1,"758":1,"783":1,"817":1,"1023":1,"1151":2,"1155":1,"1164":1}}],["fail",{"0":{"577":1,"1325":1},"1":{"1326":1,"1327":1,"1328":1},"2":{"37":2,"85":1,"172":1,"185":1,"194":1,"195":1,"198":1,"226":1,"257":1,"270":2,"275":2,"325":2,"328":1,"398":1,"421":2,"447":2,"577":1,"650":1,"651":1,"654":1,"758":2,"783":1,"786":1,"798":1,"808":1,"934":1,"949":1,"1039":1,"1062":1,"1155":1,"1164":1,"1326":1,"1327":1,"1328":1,"1381":1}}],["failing",{"0":{"180":1},"2":{"36":1,"179":1,"180":1,"195":1,"291":2,"348":3,"355":1,"529":2,"751":1,"787":1,"1284":1}}],["faster",{"2":{"172":1,"285":1,"329":1,"384":1,"386":1,"1353":1}}],["fastest",{"2":{"171":1}}],["fast",{"2":{"0":1,"26":1,"89":1,"102":1,"134":1,"139":1,"146":1,"166":1,"172":1,"325":1}}],["fooresume",{"2":{"1092":7}}],["foocall",{"2":{"1092":9}}],["footgun",{"2":{"786":1}}],["foo",{"2":{"270":10,"284":1,"307":7,"308":1,"434":2,"758":1,"804":6,"1092":10,"1134":1,"1142":1,"1285":4}}],["focus",{"2":{"75":1,"172":1}}],["followed",{"2":{"260":2,"279":2}}],["follow",{"2":{"78":1,"83":1,"93":1,"116":1,"151":1,"172":3,"173":1,"309":1,"355":1,"364":1,"392":1,"452":1,"931":1,"947":1,"972":1}}],["follows",{"2":{"59":1,"62":1,"126":1,"127":1,"254":1,"390":1,"398":1,"487":1,"786":2,"787":1,"802":1,"929":2,"946":2}}],["following",{"2":{"8":1,"9":1,"14":1,"54":1,"64":1,"65":1,"88":1,"93":1,"94":1,"96":1,"106":1,"111":1,"115":1,"120":1,"121":1,"122":1,"125":2,"126":1,"128":1,"130":1,"151":1,"152":1,"155":1,"157":1,"171":1,"173":1,"177":1,"178":1,"188":1,"260":2,"269":1,"271":1,"276":1,"280":1,"328":2,"338":1,"345":1,"356":2,"364":1,"388":1,"402":1,"409":1,"412":1,"417":1,"473":2,"477":1,"487":1,"498":1,"561":1,"758":1,"786":2,"787":1,"802":2,"803":1,"808":3,"894":1,"928":1,"929":2,"945":1,"946":4,"975":1,"1023":1,"1034":1,"1039":1,"1089":1,"1090":1,"1131":1,"1139":1,"1284":1,"1392":2}}],["folders",{"2":{"188":1,"396":1,"421":1,"624":1}}],["folder",{"2":{"54":2,"94":1,"104":1,"189":4,"323":1,"327":1,"396":1,"397":1,"419":2,"457":1,"474":1,"624":1,"628":2}}],["fourth",{"2":{"328":1}}],["four",{"2":{"37":1,"134":1,"788":1,"1293":1}}],["found",{"2":{"25":1,"115":1,"117":1,"178":1,"188":1,"325":1,"353":1,"356":1,"384":1,"388":1,"393":1,"654":1,"758":1,"798":1,"880":1,"884":1,"892":1,"1023":1,"1284":1,"1396":1}}],["foundryissue",{"2":{"1075":1}}],["foundrycyfrin",{"2":{"97":1}}],["foundryaxelarcyfrin",{"2":{"97":1}}],["foundrysmart",{"2":{"97":1}}],["foundryup",{"0":{"151":1},"1":{"152":1},"2":{"83":1,"100":1,"134":1,"150":1,"151":8,"152":1,"155":3,"178":1,"200":2}}],["foundry",{"0":{"59":1,"82":1,"84":1,"93":1,"97":1,"106":1,"107":1,"108":1,"157":1,"159":1,"193":1,"388":1,"421":1},"1":{"60":1,"61":1,"62":1,"63":1,"64":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"109":1,"194":1,"195":1,"196":1,"197":1,"198":1,"199":1,"200":1},"2":{"0":3,"1":2,"26":5,"31":2,"33":1,"35":8,"37":1,"55":4,"58":1,"59":1,"67":3,"71":1,"75":1,"76":2,"82":1,"83":4,"84":3,"85":4,"86":3,"88":4,"89":1,"91":1,"93":2,"94":3,"97":3,"99":4,"100":3,"101":2,"102":3,"103":3,"104":7,"105":1,"106":6,"107":9,"108":3,"109":1,"115":3,"118":1,"119":2,"121":1,"122":2,"124":1,"125":2,"126":1,"127":2,"132":4,"134":1,"151":2,"152":7,"154":1,"155":7,"156":3,"157":6,"158":12,"159":2,"161":1,"162":2,"166":1,"168":2,"169":1,"170":3,"171":1,"172":16,"173":1,"183":1,"187":1,"188":5,"193":2,"194":2,"195":1,"196":1,"197":1,"198":1,"199":1,"250":1,"262":1,"275":1,"278":1,"284":2,"307":1,"308":1,"309":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"328":1,"329":1,"339":2,"346":1,"351":1,"352":2,"353":2,"383":2,"384":2,"386":1,"388":1,"393":2,"394":6,"396":1,"397":1,"402":5,"403":1,"405":1,"407":5,"409":2,"410":4,"412":1,"423":1,"424":1,"425":1,"426":1,"427":1,"430":1,"431":2,"432":1,"433":1,"434":1,"435":1,"436":1,"437":1,"438":1,"439":1,"440":1,"441":1,"442":1,"443":1,"444":2,"449":1,"450":1,"451":1,"455":1,"456":1,"457":3,"458":6,"462":1,"463":1,"464":1,"465":1,"466":1,"467":1,"468":1,"470":1,"473":1,"474":3,"475":1,"476":1,"477":1,"478":1,"479":2,"480":2,"481":1,"482":1,"483":2,"484":2,"485":1,"488":1,"489":1,"491":1,"492":1,"493":1,"529":1,"530":1,"531":1,"532":1,"533":1,"534":1,"535":1,"536":1,"537":1,"538":1,"539":1,"540":1,"541":1,"542":1,"543":2,"547":1,"548":1,"549":1,"550":1,"551":1,"552":1,"553":1,"554":1,"555":1,"556":1,"557":1,"558":1,"559":1,"560":1,"562":1,"564":1,"565":1,"566":1,"567":1,"568":1,"569":1,"570":1,"571":1,"572":1,"573":1,"575":1,"576":1,"577":1,"578":1,"579":1,"580":1,"581":1,"582":1,"583":1,"584":1,"585":1,"586":1,"624":1,"628":1,"650":1,"654":1,"775":1,"787":2,"803":1,"808":2,"820":1,"826":1,"897":1,"934":1,"949":1,"969":1,"973":1,"978":1,"1022":1,"1023":1,"1051":1,"1264":3,"1353":1}}],["force",{"0":{"470":1},"2":{"115":1,"155":4,"421":1,"470":2}}],["formerly",{"2":{"419":1}}],["formal",{"2":{"392":1}}],["formats",{"0":{"822":1,"828":1}}],["formatted",{"2":{"430":3,"431":1,"440":1,"441":1,"1159":1,"1168":1,"1191":1,"1204":1,"1212":1,"1220":1,"1228":1,"1251":1,"1285":3}}],["formatter",{"0":{"121":1,"429":1},"1":{"430":1,"431":1,"432":1,"433":1,"434":1,"435":1,"436":1,"437":1,"438":1,"439":1,"440":1,"441":1,"442":1,"443":1},"2":{"121":4,"303":1,"420":1,"421":1,"429":1,"432":1,"435":1}}],["formatting",{"0":{"370":1},"2":{"369":1,"370":1,"430":2,"431":1,"443":1,"1284":1,"1285":2}}],["formatonsave",{"2":{"121":1}}],["format",{"0":{"459":1,"1285":1},"2":{"45":2,"93":1,"121":1,"138":1,"289":1,"302":1,"323":1,"355":3,"452":1,"459":1,"473":1,"477":1,"613":1,"1285":5}}],["form",{"2":{"328":1,"446":1,"447":1,"820":1,"826":1,"925":2,"926":1,"942":2,"943":1,"1033":1,"1130":1,"1138":1,"1296":1,"1301":1}}],["formula",{"2":{"65":1,"264":1}}],["forwards",{"2":{"40":1}}],["forward",{"2":{"14":1,"1376":1}}],["for",{"0":{"47":1,"51":1,"196":1,"197":1,"775":1},"2":{"1":1,"5":1,"7":1,"8":2,"13":4,"14":9,"15":5,"17":3,"18":4,"19":1,"22":1,"23":1,"25":4,"27":1,"32":1,"33":4,"34":1,"35":9,"36":2,"37":2,"43":2,"44":2,"45":6,"51":1,"52":1,"56":2,"57":1,"64":2,"65":1,"67":2,"70":1,"72":1,"74":1,"75":1,"77":2,"78":2,"81":1,"82":1,"83":2,"84":2,"85":3,"86":1,"87":1,"92":1,"93":1,"94":4,"95":8,"96":1,"102":2,"104":2,"107":1,"109":2,"110":1,"111":1,"115":4,"117":4,"118":1,"120":1,"128":1,"132":1,"133":1,"134":3,"135":1,"139":1,"141":1,"142":1,"146":2,"149":1,"150":1,"151":2,"152":1,"154":1,"156":1,"157":1,"162":2,"163":1,"165":1,"167":1,"168":1,"170":1,"172":50,"173":2,"179":2,"180":1,"183":2,"184":2,"185":2,"186":1,"187":2,"190":1,"191":1,"192":1,"193":2,"194":1,"195":1,"196":2,"197":3,"200":2,"202":1,"203":1,"204":1,"215":1,"216":1,"247":1,"248":4,"251":2,"253":2,"254":3,"255":3,"257":6,"259":1,"260":4,"262":5,"263":1,"264":3,"265":7,"266":8,"267":1,"268":6,"270":3,"271":1,"272":1,"273":1,"275":2,"276":1,"278":2,"281":2,"282":2,"283":4,"284":3,"285":2,"289":2,"291":6,"294":1,"296":1,"297":1,"302":1,"305":1,"307":3,"308":1,"309":1,"311":2,"313":1,"314":1,"315":2,"316":2,"317":1,"319":3,"328":8,"329":3,"335":1,"336":1,"337":1,"339":2,"342":3,"345":1,"346":1,"347":4,"348":4,"355":14,"357":5,"359":3,"360":1,"362":2,"363":2,"364":5,"365":1,"368":2,"369":1,"370":1,"373":1,"375":1,"376":1,"378":1,"379":1,"382":2,"384":16,"386":4,"388":1,"390":1,"392":3,"393":1,"394":3,"397":1,"398":4,"399":2,"400":1,"402":4,"403":1,"405":1,"407":1,"408":1,"409":2,"410":1,"412":2,"419":4,"421":14,"423":1,"424":1,"428":1,"430":1,"431":1,"433":1,"434":1,"444":6,"446":1,"447":1,"452":2,"453":4,"473":1,"475":1,"477":1,"478":1,"481":1,"482":2,"484":1,"485":3,"487":2,"488":1,"489":1,"495":1,"496":1,"497":1,"499":1,"500":1,"501":1,"502":1,"503":1,"504":1,"505":1,"506":1,"507":3,"508":2,"517":5,"518":1,"519":1,"521":1,"522":1,"523":1,"524":1,"525":1,"526":1,"529":3,"530":1,"536":1,"542":1,"547":1,"548":1,"563":1,"564":1,"566":1,"570":1,"574":4,"575":1,"578":1,"584":1,"591":1,"593":1,"594":1,"599":1,"601":1,"608":1,"625":1,"629":2,"637":1,"642":1,"646":1,"651":1,"654":2,"695":1,"717":1,"724":5,"731":1,"734":1,"738":1,"745":1,"752":1,"759":1,"762":1,"766":1,"778":2,"783":2,"787":7,"802":1,"803":3,"809":1,"820":2,"822":1,"826":3,"828":1,"832":1,"867":1,"888":2,"893":1,"894":1,"896":3,"898":1,"925":3,"926":1,"928":3,"929":2,"930":2,"931":1,"932":1,"934":1,"935":1,"942":3,"943":1,"945":3,"946":2,"947":1,"949":1,"950":1,"957":2,"960":4,"972":3,"996":1,"1013":2,"1021":1,"1033":3,"1034":1,"1039":1,"1050":2,"1051":2,"1052":4,"1055":1,"1056":4,"1065":1,"1066":1,"1074":4,"1079":1,"1083":4,"1088":3,"1095":1,"1107":1,"1116":1,"1117":1,"1121":1,"1130":1,"1131":2,"1138":1,"1139":2,"1186":1,"1265":1,"1271":1,"1272":4,"1276":1,"1282":1,"1284":1,"1285":3,"1288":1,"1328":1,"1337":2,"1340":1,"1344":1,"1351":1,"1352":1,"1353":3,"1354":5,"1392":1,"1395":2}}],["forkid",{"2":{"342":2,"685":4,"690":2,"1011":2,"1013":3,"1026":1,"1028":3,"1085":1,"1110":1}}],["forking",{"0":{"79":1,"338":1,"341":1,"800":1},"1":{"339":1,"340":1,"342":1,"343":1,"344":1,"345":1},"2":{"10":2,"17":1,"18":1,"44":3,"80":1,"134":1,"137":1,"141":1,"162":1,"166":1,"337":5,"338":2,"341":4,"342":1,"345":1,"388":1,"421":1,"646":2,"896":2,"1111":1,"1112":2}}],["forks",{"0":{"344":1},"2":{"337":2,"341":1,"342":3,"344":4,"345":6,"384":1,"386":1,"875":2}}],["forktest",{"2":{"172":1,"344":1,"345":2}}],["forked",{"2":{"13":1,"191":1,"266":1,"268":1,"337":2,"338":2,"340":1,"346":2,"646":1,"1027":1}}],["fork",{"0":{"141":1,"184":1,"337":1,"385":1,"386":1,"388":1},"1":{"338":1,"339":1,"340":1,"341":1,"342":1,"343":1,"344":1,"345":1,"346":1,"386":1,"387":1,"388":1},"2":{"1":5,"3":2,"5":1,"7":1,"13":2,"18":10,"35":5,"44":1,"57":1,"79":1,"80":1,"90":2,"96":2,"137":1,"141":3,"172":9,"184":7,"291":6,"325":1,"337":2,"338":6,"339":2,"340":1,"341":1,"342":15,"344":5,"345":5,"364":1,"384":1,"386":3,"387":2,"388":3,"421":2,"637":2,"638":1,"683":5,"684":4,"685":2,"689":4,"690":2,"754":3,"875":3,"876":2,"965":1,"1007":1,"1008":1,"1011":4,"1012":4,"1013":2,"1021":1,"1022":1,"1027":1,"1028":1,"1088":1,"1110":2,"1112":2}}],["forgecontext",{"2":{"844":2,"846":3}}],["forgefmt",{"2":{"370":1}}],["forgeusd",{"2":{"43":1,"45":2}}],["forge",{"0":{"55":1,"69":1,"70":1,"126":1,"135":1,"164":1,"177":1,"186":1,"188":1,"190":1,"199":1,"286":1,"293":1,"299":1,"329":1,"895":1,"932":1,"1353":1,"1354":1},"1":{"56":1,"72":1,"73":1,"74":1,"136":1,"137":1,"138":1,"294":1,"295":1,"296":1,"297":1,"298":1,"300":1,"301":1,"302":1,"303":1,"304":1,"305":1,"306":1,"307":1,"308":1,"309":1,"310":1,"311":1,"312":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"320":1,"330":1,"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"1354":1},"2":{"0":1,"26":1,"27":1,"35":1,"36":8,"43":8,"44":1,"45":6,"54":1,"55":3,"56":6,"62":2,"68":1,"69":1,"72":1,"76":2,"83":1,"84":3,"85":4,"86":4,"87":1,"89":1,"90":1,"91":2,"94":5,"95":3,"96":1,"99":1,"100":1,"101":2,"102":2,"104":1,"106":1,"107":1,"108":2,"111":4,"112":2,"113":2,"115":1,"117":2,"119":1,"121":1,"123":2,"126":2,"128":2,"129":3,"130":1,"131":1,"132":1,"135":1,"136":1,"137":3,"138":5,"151":1,"152":2,"155":3,"163":1,"164":1,"170":3,"172":19,"178":2,"179":2,"180":1,"181":3,"182":1,"183":5,"184":3,"185":1,"186":2,"188":1,"190":2,"192":1,"193":1,"195":1,"197":1,"198":1,"199":1,"200":9,"201":2,"202":3,"247":1,"248":1,"249":1,"251":2,"257":8,"259":1,"263":1,"268":1,"275":1,"276":1,"277":2,"279":2,"281":3,"282":3,"283":2,"284":3,"285":3,"287":3,"290":4,"294":2,"295":1,"297":2,"298":1,"300":1,"301":1,"304":4,"305":1,"321":3,"322":9,"324":3,"326":7,"328":8,"329":9,"330":1,"333":1,"336":2,"337":2,"338":2,"339":1,"340":2,"341":1,"346":1,"347":7,"348":1,"349":3,"350":1,"351":2,"352":2,"353":1,"354":1,"355":2,"356":11,"359":2,"361":2,"367":1,"378":1,"384":1,"386":2,"387":1,"388":1,"393":11,"394":8,"395":1,"396":5,"397":7,"398":3,"399":3,"400":3,"401":1,"402":3,"405":2,"407":3,"408":1,"409":13,"410":2,"411":2,"414":4,"415":1,"421":1,"422":1,"426":1,"428":1,"429":1,"444":5,"445":3,"446":4,"447":5,"452":1,"487":1,"497":1,"506":1,"527":1,"536":1,"549":1,"550":1,"551":1,"552":1,"553":1,"554":1,"573":1,"654":1,"656":1,"704":1,"709":1,"758":1,"759":2,"775":1,"776":1,"787":1,"789":1,"803":1,"808":3,"812":1,"816":1,"823":1,"829":1,"845":1,"846":1,"872":1,"894":1,"895":4,"896":1,"898":1,"925":1,"930":1,"931":1,"932":1,"942":1,"947":1,"962":1,"993":1,"996":1,"997":1,"998":1,"1024":1,"1042":3,"1052":4,"1076":1,"1104":1,"1127":1,"1284":1,"1298":1,"1303":1,"1309":1,"1353":10,"1354":3,"1392":1}}],["ahead",{"2":{"932":1}}],["aaaa",{"2":{"788":3}}],["aarch64",{"2":{"190":1}}],["aka",{"0":{"413":1},"2":{"826":1}}],["akojwj9xvm",{"2":{"396":1}}],["awesomecontract",{"2":{"774":1}}],["awesome",{"2":{"170":2}}],["await",{"2":{"106":8}}],["aware",{"2":{"90":1,"199":1,"262":1,"775":1}}],["ai",{"2":{"97":1,"171":2,"172":1,"173":1}}],["affords",{"2":{"337":1}}],["affecting",{"2":{"481":1}}],["affect",{"2":{"93":1,"194":1,"195":1,"196":1,"197":1,"365":1,"444":1,"1042":1}}],["afterinvariant",{"2":{"262":1}}],["after",{"2":{"15":1,"25":1,"35":4,"45":1,"78":1,"95":1,"102":2,"130":2,"134":1,"178":1,"262":3,"273":1,"274":1,"281":1,"325":1,"342":1,"345":1,"362":1,"414":1,"433":5,"434":3,"492":1,"787":1,"842":1,"942":1,"1038":1,"1042":1,"1050":1,"1082":1,"1086":1,"1089":1,"1090":1,"1138":2,"1288":1}}],["ausd",{"2":{"1318":1,"1395":2}}],["audit",{"0":{"377":1},"2":{"377":1}}],["auditors",{"2":{"369":1}}],["audited",{"2":{"82":1}}],["auction",{"2":{"255":1}}],["auctions",{"0":{"255":1},"2":{"256":1}}],["authorized",{"2":{"1051":1}}],["authorization",{"2":{"1050":3,"1051":3}}],["authority",{"2":{"1050":2,"1051":2}}],["auth",{"2":{"619":1}}],["authlist7702",{"2":{"3":1}}],["autodetect",{"2":{"421":1}}],["autocomplete",{"2":{"368":1}}],["autocompletion",{"0":{"110":1},"1":{"111":1,"112":1,"113":1},"2":{"110":1,"168":1}}],["autogenerate",{"2":{"359":1}}],["autogenerated",{"2":{"119":1}}],["automation",{"2":{"162":2}}],["automatic",{"2":{"13":1,"14":1,"172":1,"402":1}}],["automatically",{"2":{"8":1,"13":1,"35":1,"45":1,"70":1,"76":1,"93":1,"115":1,"121":1,"125":1,"151":1,"269":1,"397":1,"409":1,"410":1,"413":1,"474":1,"479":1,"491":1,"574":1,"759":1,"1081":2}}],["autoload",{"2":{"111":1}}],["autoimpersonate",{"2":{"17":1}}],["autoimpersonateaccount",{"2":{"13":1}}],["auto",{"0":{"474":1,"479":1},"2":{"8":1,"13":1,"17":2,"45":2,"183":1,"289":2,"407":1,"410":1,"421":4,"474":3,"478":1,"479":2,"480":2}}],["agoradollarerc1967proxy",{"2":{"1395":2}}],["agoradollar",{"2":{"1395":2}}],["age",{"2":{"589":1}}],["again",{"2":{"85":1,"90":1,"95":1,"187":1,"189":1,"362":1,"1038":1,"1070":1}}],["against",{"0":{"251":1,"252":1,"253":1,"254":1},"2":{"1":1,"77":1,"78":1,"84":1,"137":1,"162":1,"247":1,"248":1,"250":2,"251":1,"252":1,"253":1,"262":3,"264":2,"275":1,"283":2,"307":1,"311":1,"328":1,"337":1,"369":1,"376":1,"378":1,"421":1,"477":1,"808":1,"1052":1,"1268":1}}],["agnostic",{"2":{"66":1}}],["amt",{"2":{"1278":1,"1401":1}}],["ambiguity",{"2":{"880":1,"884":1,"1131":1,"1139":1}}],["ambiguous",{"0":{"54":1},"2":{"172":1}}],["amms",{"2":{"172":1}}],["amp",{"2":{"95":1,"96":1,"97":1,"170":1,"172":5,"280":4,"651":2,"655":2,"972":1,"1395":1}}],["amounts",{"2":{"257":1,"328":1}}],["amountfixtures",{"2":{"172":3}}],["amountout",{"2":{"102":1}}],["amount",{"2":{"14":1,"25":2,"76":1,"77":1,"78":3,"95":2,"96":1,"172":9,"192":6,"210":2,"212":4,"214":4,"257":9,"258":1,"260":1,"270":6,"271":4,"280":2,"309":4,"328":5,"446":1,"447":1,"564":1,"608":1,"651":6,"778":1,"783":3,"788":1,"979":3,"1004":1,"1052":4,"1056":5,"1065":1,"1112":1,"1151":13,"1284":1,"1318":1,"1395":3}}],["abs",{"0":{"1144":1},"1":{"1145":1,"1146":1,"1147":1},"2":{"336":1,"1145":1,"1147":1,"1357":1,"1391":1}}],["absolute",{"0":{"368":1},"2":{"215":1,"243":1,"336":1,"368":3,"1146":1,"1154":1,"1159":1,"1292":1}}],["abstractcontract",{"2":{"172":1}}],["abstracts",{"2":{"172":1}}],["abstract",{"2":{"172":2,"358":2}}],["abcdefg",{"2":{"428":2}}],["abcd",{"2":{"208":1,"224":1}}],["able",{"2":{"54":1,"62":1,"104":1,"188":2,"198":1,"262":1,"782":1,"797":1,"929":1,"946":1}}],["aborts",{"2":{"446":1,"565":1}}],["above",{"2":{"35":1,"43":1,"45":2,"87":1,"115":1,"141":1,"192":1,"246":1,"271":1,"272":1,"273":1,"276":1,"282":1,"342":1,"362":1,"363":1,"408":1,"417":1,"506":1,"507":1,"574":1,"775":1,"787":1,"809":1,"928":1,"929":2,"945":1,"946":2,"1056":1,"1284":1}}],["about",{"2":{"7":1,"37":1,"62":1,"83":1,"87":2,"94":1,"138":1,"141":1,"145":1,"148":1,"151":1,"180":1,"363":2,"367":1,"392":1,"398":1,"497":1,"895":1,"926":1,"943":1,"1394":1}}],["ability",{"2":{"274":1,"285":1,"452":1,"894":1,"1022":1}}],["abiencoderv2",{"2":{"192":1}}],["abi",{"0":{"587":1},"2":{"34":1,"45":6,"62":2,"73":1,"78":2,"128":1,"129":1,"172":8,"192":8,"197":1,"249":2,"251":2,"254":1,"260":4,"266":2,"289":2,"308":1,"319":1,"357":2,"394":1,"485":1,"487":1,"587":2,"697":1,"698":1,"699":1,"720":2,"727":2,"734":2,"741":2,"748":2,"762":2,"769":2,"779":7,"788":2,"798":1,"799":3,"821":4,"842":3,"881":4,"885":8,"889":6,"893":2,"925":2,"929":4,"931":2,"942":2,"946":4,"947":2,"988":1,"1052":3,"1056":3,"1075":1,"1091":1,"1297":1,"1302":1,"1395":1}}],["apache",{"2":{"402":1}}],["apart",{"2":{"34":1,"787":1}}],["apis",{"2":{"170":1}}],["api",{"0":{"52":1,"548":1},"2":{"35":1,"43":2,"44":2,"45":6,"52":1,"90":1,"92":1,"93":3,"133":2,"170":1,"172":10,"200":1,"325":3,"340":5,"386":2,"393":2,"421":2,"428":4,"548":3,"622":3,"1284":1}}],["appear",{"2":{"355":1,"759":1,"775":1,"1061":1}}],["append",{"2":{"804":1}}],["appending",{"2":{"134":1,"409":1}}],["appends",{"2":{"62":1,"485":1}}],["appended",{"2":{"34":1,"35":1,"62":1,"90":1,"421":1,"488":1}}],["approximate",{"2":{"248":1}}],["approximately",{"2":{"215":2,"243":1,"245":1,"1154":1,"1159":1,"1163":1,"1168":1}}],["approve",{"2":{"172":1,"272":1,"273":1,"274":1,"275":2,"276":1,"783":1}}],["appropriate",{"2":{"172":3,"248":1,"398":1,"479":1,"925":1,"942":1}}],["approaches",{"2":{"172":1,"337":1,"363":1}}],["approach",{"2":{"43":1,"196":1,"265":1,"272":1,"278":1,"337":2,"361":1,"362":2,"368":1,"384":3,"388":2,"398":1,"403":1}}],["app",{"2":{"84":2,"85":1,"86":1,"134":1}}],["apply",{"2":{"277":1,"342":1,"375":1,"517":3,"565":1,"787":1}}],["apples",{"2":{"929":4,"946":7}}],["apple",{"2":{"187":5,"929":9,"946":9}}],["appleclang",{"2":{"51":2}}],["applies",{"2":{"346":1,"507":1,"517":1}}],["applied",{"2":{"27":1,"259":1,"263":1,"357":2,"496":1}}],["applicable",{"2":{"172":1}}],["application",{"2":{"134":1,"187":1}}],["applications",{"2":{"132":1,"142":1,"172":1,"250":1}}],["acronym",{"2":{"355":1}}],["across",{"2":{"57":2,"138":2,"172":1,"254":1,"258":2,"265":1,"273":1,"342":3,"492":1,"808":1,"875":1,"1007":1}}],["achieve",{"2":{"271":1}}],["achieved",{"2":{"117":2,"272":1}}],["acts",{"2":{"414":2}}],["act",{"2":{"363":1}}],["actual",{"2":{"328":1,"338":1,"348":1,"775":3,"975":1,"1023":1}}],["actually",{"2":{"85":1,"94":1,"786":1,"812":1,"816":1}}],["actorindexseed",{"2":{"276":6}}],["actor",{"0":{"276":1},"2":{"172":10}}],["actorseed",{"2":{"172":8}}],["actors",{"2":{"90":1,"172":8,"266":1,"276":5}}],["acting",{"2":{"444":1}}],["activefork",{"0":{"635":1},"1":{"636":1,"637":1,"638":1,"639":1},"2":{"342":1,"344":4,"345":1,"636":1,"638":2,"686":1,"800":1,"1014":1,"1028":1,"1029":1,"1113":1}}],["active",{"2":{"342":3,"345":6,"371":1,"637":2,"638":1,"875":1,"982":4,"1011":2,"1012":1,"1013":1,"1027":1,"1099":1,"1110":1,"1276":1}}],["activates",{"2":{"303":1}}],["activate",{"2":{"289":1}}],["activated",{"0":{"48":1},"2":{"45":1,"48":1,"192":2,"355":1}}],["action",{"2":{"115":1,"156":1,"172":1,"327":2,"386":1,"411":1,"1131":1,"1139":1}}],["actions",{"0":{"99":1,"156":1},"2":{"24":1,"99":2}}],["accrued",{"2":{"775":1}}],["accidentally",{"2":{"363":1}}],["accurate",{"2":{"199":1,"808":1,"1117":1}}],["accumulated",{"2":{"37":1,"327":1}}],["according",{"2":{"752":1}}],["accordingly",{"2":{"82":1,"197":1,"752":1}}],["accomplished",{"2":{"275":2,"276":1}}],["accomplish",{"2":{"85":1}}],["accountdata",{"2":{"1395":5}}],["accountaccesskind",{"0":{"1087":1},"2":{"1085":2,"1088":4,"1091":1,"1092":3}}],["accountaccesses",{"2":{"1075":11,"1090":1}}],["accountaccess",{"0":{"1088":1,"1090":1},"2":{"1075":1,"1085":2,"1086":7,"1088":1,"1089":2,"1090":3,"1091":1,"1092":4}}],["account2",{"2":{"874":1}}],["account1",{"2":{"874":2}}],["account0",{"2":{"874":2}}],["account",{"0":{"588":1,"1092":1},"2":{"13":4,"37":1,"43":1,"57":1,"79":1,"81":1,"141":1,"198":1,"342":1,"345":3,"360":1,"362":1,"363":1,"414":2,"609":1,"624":3,"628":3,"630":1,"665":2,"834":1,"835":1,"849":1,"850":1,"869":1,"870":2,"874":1,"875":1,"1046":1,"1047":2,"1050":3,"1051":4,"1052":7,"1070":1,"1075":3,"1085":2,"1086":2,"1087":19,"1088":16,"1089":2,"1090":1,"1091":3,"1092":2,"1101":1,"1102":2,"1395":14}}],["accounts",{"0":{"3":1},"2":{"1":1,"3":2,"12":1,"13":2,"17":5,"21":2,"25":1,"80":1,"81":1,"96":2,"133":1,"140":1,"172":4,"345":1,"363":2,"608":2,"609":1,"626":1,"646":1,"874":1,"875":1}}],["accessor",{"2":{"1075":3,"1085":1,"1088":1,"1090":1,"1091":1,"1092":2,"1283":1}}],["accesslist",{"2":{"932":2}}],["accessing",{"2":{"812":1,"816":1,"1395":1}}],["accessible",{"2":{"36":1,"1042":1}}],["accesses",{"0":{"631":1},"1":{"632":1,"633":1,"634":1},"2":{"632":1,"634":1,"770":1,"991":1,"992":1,"1085":1,"1086":3,"1088":1,"1089":2,"1090":1,"1091":1}}],["accessed",{"2":{"391":1,"421":1,"803":1,"934":1,"949":1,"1087":1,"1088":5,"1089":2,"1354":1}}],["accesscontrol",{"2":{"172":1}}],["access",{"0":{"1092":1},"2":{"83":1,"172":3,"173":1,"188":1,"189":1,"190":2,"202":1,"285":1,"289":1,"328":1,"329":1,"333":1,"334":1,"335":1,"336":1,"342":1,"344":1,"345":1,"356":1,"388":1,"428":1,"506":1,"617":1,"646":5,"803":8,"804":6,"820":2,"826":2,"894":1,"932":1,"987":1,"991":1,"1022":1,"1079":1,"1087":2,"1088":7,"1089":4,"1090":12,"1321":1,"1337":1,"1392":1}}],["accept",{"2":{"365":1}}],["accepting",{"2":{"192":1}}],["accepted",{"2":{"87":1,"183":1,"497":1}}],["acceptable",{"2":{"62":1}}],["accepts",{"2":{"13":1,"73":1,"271":1,"279":1,"412":1,"925":1,"942":1}}],["archive",{"2":{"386":1,"408":1}}],["art",{"2":{"359":1}}],["artifact",{"2":{"152":1,"189":1,"266":1,"268":1,"289":1,"394":1,"421":2,"487":1,"507":1,"820":1,"822":1,"826":1,"828":1,"932":1,"1296":1,"1301":1}}],["artifacts",{"0":{"199":1,"932":1},"2":{"35":2,"102":1,"172":2,"193":1,"199":2,"266":1,"268":2,"339":1,"354":1,"411":2,"465":1,"483":1,"486":6,"507":1,"822":2,"828":2,"932":2,"1296":1,"1301":1}}],["article",{"2":{"83":1,"103":2,"104":1}}],["arithmeticerror",{"0":{"1148":1},"1":{"1149":1,"1150":1,"1151":1},"2":{"334":1,"356":2,"1149":1,"1151":2,"1383":1}}],["arithmetic",{"2":{"270":1,"311":1,"334":1,"355":1,"506":2,"1150":1,"1151":1}}],["array",{"0":{"720":1,"727":1,"734":1,"741":1,"748":1,"755":1,"762":1,"769":1,"1387":1,"1389":1},"1":{"1388":1,"1390":1},"2":{"253":1,"254":3,"260":1,"268":11,"269":2,"272":1,"279":1,"307":1,"308":1,"309":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"357":1,"392":1,"427":1,"443":1,"449":1,"450":1,"451":1,"466":2,"473":2,"475":1,"476":1,"477":2,"481":3,"482":2,"486":1,"487":1,"499":1,"502":1,"504":1,"506":3,"508":1,"516":1,"542":1,"545":1,"546":1,"752":1,"755":1,"798":1,"888":1,"925":1,"927":3,"942":1,"944":5,"1039":1,"1337":1,"1348":1,"1361":1,"1385":4,"1387":1,"1388":1,"1389":1,"1390":1}}],["arrays",{"2":{"192":1,"253":1,"260":1,"279":1,"717":1,"724":1,"731":1,"738":1,"745":1,"751":1,"752":3,"759":1,"766":1,"928":1,"945":1,"1337":1}}],["arbitraryaddr",{"2":{"1302":1}}],["arbitrarystoragetest",{"2":{"1039":1}}],["arbitrary",{"2":{"249":1,"285":1,"357":1,"530":1,"680":1,"797":2,"798":1,"807":2,"808":1,"809":1,"821":2,"826":1,"827":2,"926":2,"943":2,"972":1,"1033":1,"1038":1,"1039":2,"1301":1,"1318":1,"1331":1}}],["arbitrarily",{"2":{"192":1,"456":1}}],["arbitrum",{"2":{"172":3,"775":1}}],["arbiscan",{"2":{"172":2}}],["army",{"2":{"132":1,"142":1}}],["around",{"0":{"84":1},"2":{"87":1,"262":1,"333":1,"334":1,"368":1,"433":1,"895":1,"1288":1,"1354":2}}],["arg2",{"2":{"821":3,"1297":1,"1302":1}}],["arg1",{"2":{"821":3,"1297":1,"1302":1}}],["arg",{"2":{"183":1}}],["args=",{"2":{"85":1,"257":1}}],["args",{"0":{"1285":1},"2":{"35":4,"43":2,"45":1,"129":1,"172":4,"192":1,"200":1,"821":4,"1295":2,"1300":2}}],["argument",{"2":{"14":1,"17":1,"35":3,"45":1,"51":1,"58":1,"94":1,"192":1,"325":1,"328":3,"362":1,"409":1,"413":1,"684":1,"689":1,"783":1,"975":1,"1012":1,"1013":1,"1130":2,"1138":2,"1285":5,"1393":1,"1402":1}}],["arguments",{"2":{"12":1,"24":1,"35":2,"43":1,"45":4,"49":1,"54":1,"279":1,"328":1,"341":1,"384":2,"393":1,"409":1,"787":2,"798":1,"932":1,"1285":2,"1337":1,"1402":1}}],["aren",{"2":{"414":1}}],["are",{"0":{"180":1,"198":1},"2":{"3":2,"8":1,"9":1,"12":2,"14":4,"17":1,"18":1,"21":1,"22":1,"25":1,"31":1,"34":4,"35":6,"37":4,"45":3,"49":1,"51":2,"52":1,"62":3,"63":1,"68":1,"76":2,"77":1,"78":1,"80":1,"82":1,"87":1,"89":3,"92":1,"94":1,"95":1,"96":1,"102":1,"108":1,"119":1,"127":1,"133":1,"152":1,"172":3,"177":1,"178":1,"180":1,"183":1,"187":2,"188":2,"192":2,"193":1,"194":1,"198":1,"199":1,"248":1,"250":3,"251":2,"253":2,"257":2,"258":2,"262":9,"264":4,"266":3,"267":1,"268":3,"269":6,"270":1,"274":2,"278":1,"279":2,"285":3,"289":1,"291":1,"303":1,"315":1,"325":1,"327":1,"328":9,"333":1,"334":1,"336":1,"338":1,"339":1,"342":8,"344":1,"345":3,"346":1,"347":1,"348":5,"349":1,"351":1,"352":3,"353":3,"356":5,"357":3,"360":1,"362":1,"365":1,"368":2,"370":1,"374":1,"377":3,"384":2,"386":3,"387":2,"388":2,"391":1,"392":1,"400":1,"401":2,"402":2,"412":1,"413":1,"414":1,"416":1,"418":1,"419":1,"421":5,"422":1,"428":1,"431":3,"432":1,"433":1,"438":1,"439":1,"440":1,"441":1,"444":2,"448":1,"449":1,"456":1,"458":1,"459":1,"467":1,"474":1,"478":1,"480":1,"482":1,"484":2,"485":2,"486":1,"487":2,"488":1,"495":2,"496":1,"497":4,"498":1,"501":1,"502":1,"504":1,"506":1,"507":5,"508":1,"517":1,"529":5,"544":1,"545":3,"546":3,"571":1,"574":4,"585":1,"601":1,"608":1,"646":1,"651":1,"752":1,"775":1,"782":4,"783":1,"786":3,"787":5,"803":3,"808":2,"820":1,"826":1,"842":1,"850":1,"875":3,"876":1,"880":1,"884":1,"894":1,"895":1,"896":2,"925":1,"926":1,"927":4,"928":1,"929":3,"942":1,"943":1,"944":5,"945":1,"946":4,"957":1,"973":1,"975":1,"1004":1,"1033":2,"1039":1,"1042":1,"1086":2,"1088":1,"1089":1,"1090":1,"1091":1,"1107":2,"1159":1,"1168":1,"1191":1,"1204":1,"1212":1,"1220":1,"1228":1,"1251":1,"1264":1,"1285":6,"1296":1,"1301":1,"1395":1}}],["albeit",{"2":{"1351":1}}],["alpha",{"2":{"1090":3}}],["alphabetically",{"2":{"432":4,"929":1,"946":1}}],["alphabetical",{"2":{"384":1,"929":5,"931":1,"946":5,"947":1}}],["algorithm",{"2":{"566":1}}],["algorithms",{"2":{"25":1}}],["alone",{"2":{"342":1}}],["along",{"2":{"35":1,"45":1,"787":1,"812":1,"816":1,"1079":1,"1088":1}}],["alongside",{"2":{"0":1,"26":1,"55":1,"103":1,"132":1}}],["alchemyapi",{"2":{"133":1,"421":1,"561":1,"1023":2}}],["alchemy",{"2":{"92":2,"344":4,"345":4,"386":1}}],["alicepk",{"2":{"1056":2}}],["alice=0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",{"2":{"81":1}}],["alice",{"2":{"80":1,"81":2,"226":1,"329":4,"333":2,"643":2,"703":10,"779":23,"838":3,"1052":34,"1056":5,"1057":5,"1289":2,"1341":3,"1345":3,"1354":4}}],["aligns",{"2":{"67":1,"315":1}}],["aliases",{"2":{"17":1,"388":1,"1023":1}}],["alias",{"2":{"13":1,"93":1,"421":1,"1021":3,"1023":1}}],["alter",{"2":{"894":1,"896":1}}],["alternative",{"2":{"127":1,"168":1,"200":1,"265":1,"702":1,"1288":1}}],["alternatively",{"2":{"40":2,"82":1,"127":1,"155":1,"181":1,"307":2,"308":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"340":1,"399":1,"402":1,"1033":1,"1052":1}}],["altered",{"2":{"35":1,"87":1}}],["always",{"2":{"18":1,"64":2,"87":1,"107":1,"108":2,"134":1,"172":2,"173":1,"253":2,"264":2,"328":1,"342":1,"348":1,"363":1,"367":1,"375":1,"384":1,"386":1,"387":1,"388":1,"421":2,"430":1,"454":1,"487":1,"492":1,"529":1,"782":2,"783":1,"1131":1,"1139":1,"1284":1}}],["already",{"2":{"18":1,"45":1,"93":1,"105":1,"107":1,"119":1,"187":1,"327":1,"335":1,"386":1,"646":2,"783":1,"1033":1,"1130":2,"1138":2}}],["allurls",{"2":{"1023":4}}],["alloy",{"2":{"200":1}}],["allocate",{"2":{"1348":1}}],["allocation",{"2":{"35":3,"319":1,"496":2}}],["allocating",{"2":{"25":1}}],["alloc",{"2":{"25":2}}],["allowcheatcodes",{"0":{"644":1},"1":{"645":1,"646":1},"2":{"645":1,"800":1}}],["allowed",{"2":{"188":3,"280":1,"421":1,"475":1,"646":1,"680":1,"803":2,"927":1,"934":1,"944":1,"949":1,"1033":1,"1130":1,"1138":1}}],["allowing",{"2":{"131":1,"262":1,"802":1,"1052":2}}],["allow",{"0":{"475":1},"2":{"20":3,"70":1,"131":1,"188":3,"195":2,"266":1,"268":1,"325":1,"328":2,"341":2,"356":1,"421":4,"475":3,"787":3,"808":1,"1353":1,"1393":1}}],["allows",{"2":{"10":1,"25":1,"33":1,"35":1,"57":1,"65":1,"86":1,"184":1,"249":1,"262":1,"276":1,"329":1,"421":1,"430":1,"431":1,"455":1,"507":1,"530":1,"707":1,"808":1,"1033":1}}],["all",{"2":{"14":2,"15":1,"18":1,"25":4,"31":2,"32":1,"35":10,"44":1,"56":1,"58":1,"77":1,"87":1,"90":3,"93":1,"95":2,"102":1,"104":1,"106":1,"108":1,"115":1,"123":1,"132":1,"133":1,"134":1,"141":1,"170":2,"172":3,"173":1,"179":1,"183":1,"187":1,"203":1,"204":1,"215":1,"216":1,"248":1,"257":1,"258":2,"262":5,"264":1,"265":1,"266":1,"267":1,"270":1,"272":3,"273":1,"281":2,"282":1,"283":1,"284":1,"291":4,"303":1,"304":1,"309":1,"327":2,"328":1,"329":1,"337":1,"338":1,"339":1,"342":4,"344":1,"345":1,"346":1,"347":1,"348":1,"349":2,"352":1,"354":1,"355":2,"360":1,"363":1,"364":1,"365":1,"376":1,"384":8,"392":2,"393":1,"399":1,"410":1,"412":1,"413":1,"414":1,"421":1,"428":1,"431":2,"440":1,"441":1,"444":2,"449":2,"452":2,"453":1,"454":1,"456":1,"460":2,"485":1,"497":2,"499":1,"501":2,"503":1,"506":1,"507":3,"517":1,"529":1,"545":3,"546":1,"633":1,"673":1,"683":1,"684":1,"689":1,"782":1,"803":1,"808":1,"880":1,"884":1,"888":1,"893":1,"898":1,"928":2,"945":2,"987":1,"991":1,"1011":1,"1012":1,"1021":1,"1022":1,"1023":1,"1069":1,"1074":4,"1079":1,"1081":1,"1088":3,"1096":1,"1264":1,"1285":2,"1354":3}}],["also",{"0":{"298":1,"320":1,"595":1,"610":1,"639":1,"656":1,"661":1,"666":1,"686":1,"691":1,"704":1,"709":1,"776":1,"789":1,"823":1,"829":1,"851":1,"872":1,"877":1,"962":1,"984":1,"993":1,"998":1,"1009":1,"1014":1,"1019":1,"1024":1,"1029":1,"1035":1,"1071":1,"1076":1,"1104":1,"1113":1,"1127":1,"1135":1,"1143":1,"1156":1,"1160":1,"1165":1,"1169":1,"1188":1,"1192":1,"1197":1,"1201":1,"1205":1,"1209":1,"1213":1,"1217":1,"1221":1,"1225":1,"1229":1,"1248":1,"1252":1,"1257":1,"1298":1,"1303":1,"1311":1},"2":{"5":1,"7":1,"8":1,"35":1,"37":1,"70":2,"81":1,"84":2,"94":1,"95":2,"103":1,"109":1,"115":1,"138":1,"154":1,"155":1,"157":2,"170":1,"183":2,"184":1,"188":1,"253":1,"254":1,"268":1,"275":2,"277":1,"282":3,"283":1,"284":2,"285":1,"297":1,"307":1,"308":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"325":1,"328":1,"339":1,"342":1,"344":1,"345":2,"347":2,"348":2,"355":1,"356":1,"384":1,"386":1,"392":1,"393":1,"394":2,"397":1,"401":1,"402":1,"414":1,"433":1,"445":1,"452":1,"475":1,"476":1,"497":2,"529":2,"575":1,"579":1,"580":1,"581":1,"594":1,"633":1,"665":1,"752":1,"778":2,"783":2,"787":1,"788":1,"809":1,"822":1,"828":1,"875":1,"894":1,"929":1,"946":1,"972":1,"991":1,"1265":1,"1284":2,"1288":1,"1296":1,"1301":1,"1309":1,"1354":1,"1395":1}}],["avg",{"2":{"96":1,"117":3,"284":3}}],["avoids",{"2":{"812":1,"816":1}}],["avoiding",{"2":{"398":1}}],["avoided",{"2":{"311":1}}],["avoid",{"0":{"378":1},"2":{"3":1,"57":1,"69":1,"172":2,"195":1,"197":1,"265":1,"369":1,"386":1,"387":1,"393":1,"798":1}}],["available",{"0":{"35":1},"2":{"1":1,"18":1,"27":1,"32":1,"35":1,"44":1,"56":1,"58":1,"77":1,"78":2,"85":1,"92":1,"96":1,"125":1,"133":1,"134":1,"151":1,"187":1,"203":1,"215":1,"297":1,"328":2,"342":3,"345":2,"355":1,"357":1,"476":1,"487":1,"497":2,"498":1,"594":1,"620":2,"775":1,"782":1,"875":1,"894":2,"1023":1}}],["ad",{"2":{"441":1}}],["adjacent",{"2":{"364":1}}],["adjusts",{"2":{"1288":1}}],["adjust",{"2":{"82":1,"126":1,"1287":1}}],["adhere",{"2":{"313":1,"314":1,"315":1,"316":1,"317":1}}],["adhering",{"2":{"171":1}}],["admin",{"2":{"173":1}}],["aderyn",{"0":{"116":1},"2":{"116":2}}],["adapt",{"2":{"105":1}}],["adapts",{"2":{"82":1}}],["advised",{"2":{"797":1,"972":1}}],["advanced",{"0":{"277":1},"2":{"86":1,"89":1,"97":1,"138":1,"141":2,"162":1,"172":3,"266":1,"277":1,"356":1}}],["advent",{"2":{"3":1}}],["addtob",{"2":{"270":2}}],["addtoa",{"2":{"270":2}}],["addweight",{"2":{"260":1}}],["addstwonumbers",{"2":{"384":1}}],["adds",{"2":{"158":1,"184":1,"268":10,"348":1}}],["added",{"2":{"95":1,"198":1,"269":5,"272":1,"328":1,"352":1,"407":2,"410":2,"433":4,"434":1,"507":1}}],["add",{"0":{"185":1,"407":1,"408":1,"409":1,"897":1},"2":{"86":1,"93":2,"106":1,"107":1,"108":1,"111":1,"115":1,"117":1,"120":1,"121":1,"122":1,"123":2,"148":2,"172":2,"181":1,"185":1,"273":1,"307":1,"308":1,"309":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"319":1,"325":1,"335":1,"384":5,"396":1,"398":1,"407":2,"412":1,"414":1,"440":1,"441":1,"454":1,"456":2,"507":1,"787":2,"821":2,"897":1,"1130":1,"1138":1,"1392":1}}],["addinloopnogas",{"2":{"1352":2}}],["addinloop",{"2":{"1352":3}}],["adding",{"0":{"106":1,"107":1,"396":1,"406":1},"1":{"407":1,"408":1,"409":1},"2":{"8":1,"104":2,"125":1,"188":1,"198":1,"272":1,"363":1,"417":1,"507":1}}],["addition",{"2":{"275":1,"433":2,"646":1}}],["additionally",{"2":{"37":1,"43":2,"70":1,"108":1,"394":1,"411":1,"702":1,"1284":1}}],["additional",{"0":{"66":1,"508":1,"509":1,"510":1,"511":1,"512":1,"513":1,"514":1},"1":{"509":1,"510":1,"511":1,"512":1,"513":1,"514":1},"2":{"25":1,"102":1,"151":1,"194":1,"200":1,"246":1,"272":1,"273":1,"325":1,"363":1,"371":1,"393":1,"408":1,"409":1,"421":3,"475":1,"476":1,"507":2,"508":4,"509":1,"510":1,"511":1,"512":1,"513":1,"514":1,"633":1,"991":1}}],["addr=0",{"2":{"24":1}}],["addr",{"0":{"640":1},"1":{"641":1,"642":1,"643":1},"2":{"24":1,"35":9,"88":1,"172":1,"192":6,"641":1,"643":1,"693":1,"697":4,"698":4,"699":4,"866":1,"867":1,"1056":3,"1057":1,"1122":1,"1262":2,"1267":1,"1268":1,"1339":1,"1343":1,"1373":3,"1403":1}}],["addressasstring",{"2":{"902":2}}],["addressed",{"2":{"131":1}}],["addresses",{"2":{"25":1,"57":3,"59":1,"64":1,"162":1,"172":1,"266":1,"268":4,"276":1,"567":1,"626":2,"826":1,"884":1,"894":1,"960":2,"1263":1,"1264":1,"1268":1}}],["address",{"0":{"837":1,"1175":1,"1182":1,"1235":1,"1242":1},"2":{"3":1,"10":1,"13":2,"15":5,"20":1,"21":1,"25":1,"27":1,"34":1,"35":2,"37":1,"45":6,"57":4,"58":1,"65":9,"72":1,"76":2,"77":1,"78":3,"81":5,"92":1,"94":1,"95":8,"96":1,"130":2,"131":1,"143":1,"144":1,"172":30,"192":11,"196":2,"203":4,"209":1,"211":1,"215":4,"219":1,"249":7,"257":7,"260":6,"268":8,"271":11,"272":3,"273":3,"274":5,"275":10,"276":7,"280":5,"291":2,"292":2,"308":4,"309":1,"317":1,"328":15,"329":1,"335":1,"345":3,"355":1,"358":4,"363":1,"376":1,"378":4,"387":1,"393":2,"398":1,"421":4,"477":1,"531":1,"532":1,"539":1,"609":1,"613":1,"614":1,"618":3,"619":1,"630":2,"632":1,"633":1,"634":1,"641":1,"642":1,"643":2,"645":1,"646":2,"663":1,"664":2,"675":1,"677":2,"679":2,"680":1,"681":3,"693":1,"697":3,"698":3,"699":3,"701":1,"702":2,"703":6,"715":2,"716":2,"719":4,"720":4,"737":1,"750":4,"754":2,"755":4,"772":1,"773":1,"774":3,"775":9,"777":4,"778":1,"779":16,"781":2,"782":4,"783":23,"785":7,"787":5,"788":2,"821":5,"827":8,"831":1,"832":2,"834":1,"837":1,"840":1,"848":1,"850":1,"866":1,"867":2,"869":1,"871":1,"874":7,"876":4,"879":2,"880":1,"881":9,"883":2,"884":3,"885":11,"887":2,"888":1,"889":10,"891":2,"892":3,"893":4,"894":3,"900":1,"901":1,"902":1,"927":4,"931":1,"932":3,"944":4,"947":1,"959":6,"960":9,"979":1,"981":2,"983":2,"992":1,"995":1,"996":1,"997":2,"1006":2,"1008":5,"1031":2,"1037":1,"1038":1,"1039":7,"1046":1,"1048":1,"1050":4,"1052":46,"1056":13,"1057":1,"1068":1,"1069":2,"1073":6,"1074":6,"1075":6,"1083":4,"1085":3,"1091":4,"1092":4,"1101":1,"1103":2,"1106":1,"1108":1,"1112":4,"1151":4,"1175":4,"1182":4,"1235":4,"1242":4,"1262":2,"1267":1,"1275":1,"1276":1,"1278":1,"1281":2,"1282":3,"1283":2,"1284":2,"1287":5,"1289":1,"1295":4,"1297":1,"1300":3,"1301":1,"1308":1,"1309":1,"1310":4,"1318":1,"1328":1,"1333":6,"1334":1,"1339":1,"1340":2,"1341":2,"1343":1,"1344":2,"1345":2,"1354":3,"1363":2,"1364":1,"1379":6,"1380":1,"1387":1,"1389":1,"1393":1,"1394":4,"1395":7,"1398":1,"1399":2,"1401":1,"1403":2}}],["astring",{"2":{"1133":3,"1141":3}}],["asd",{"2":{"1034":2,"1133":1,"1141":1}}],["aspect",{"2":{"388":1}}],["aspects",{"2":{"262":1,"359":1}}],["asm",{"0":{"319":1},"2":{"319":1,"486":1}}],["ascii",{"2":{"359":1,"613":1}}],["ascending",{"2":{"282":1}}],["asc",{"2":{"282":1}}],["asking",{"2":{"172":1,"444":1}}],["ask",{"2":{"172":1}}],["asked",{"2":{"170":1}}],["async",{"2":{"106":3}}],["asynchronous",{"2":{"90":1}}],["assistant",{"2":{"172":1}}],["assistance",{"2":{"149":1}}],["assist",{"2":{"171":1}}],["assigned",{"2":{"342":1,"1052":3}}],["assign",{"0":{"374":1},"2":{"34":1,"35":1,"1033":1}}],["assumptions",{"2":{"172":1,"262":1,"275":1}}],["assuming",{"2":{"127":1,"1283":1,"1388":1,"1390":1}}],["assumepayable",{"0":{"1266":1},"1":{"1267":1,"1268":1},"2":{"1267":1}}],["assumenotprecompile",{"0":{"1261":1},"1":{"1262":1,"1263":1,"1264":1,"1265":1},"2":{"1262":2,"1264":1}}],["assumenorevert",{"0":{"648":1},"1":{"649":1,"650":1,"651":1},"2":{"649":1,"651":1,"805":1}}],["assume`",{"2":{"421":2}}],["assumes",{"2":{"103":2,"798":1,"957":1}}],["assume",{"0":{"583":1,"652":1},"1":{"653":1,"654":1,"655":1,"656":1},"2":{"77":1,"78":2,"172":3,"249":1,"251":1,"252":2,"257":2,"267":1,"363":1,"421":1,"583":2,"653":1,"654":2,"655":3,"786":1,"805":1,"894":1,"1034":1,"1151":1,"1263":1,"1268":2,"1271":1}}],["assumed",{"2":{"18":1,"83":1,"812":1,"816":1,"1131":1,"1139":1}}],["associated",{"2":{"102":1,"335":1,"414":1,"1086":1,"1089":1,"1351":1}}],["asset",{"2":{"172":12,"271":6,"272":3,"273":2,"274":4,"275":8,"276":4}}],["assetsgreaterthansupply",{"2":{"172":1}}],["assetsbefore",{"2":{"172":2}}],["assets",{"2":{"102":3,"172":12,"271":10,"272":4,"273":4,"274":6,"275":16,"276":10}}],["assertnoteqdecimal",{"0":{"1249":1},"1":{"1250":1,"1251":1,"1252":1},"2":{"1248":1,"1250":4,"1381":1}}],["assertnoteq32",{"2":{"1246":2}}],["assertnoteq",{"0":{"1230":1},"1":{"1231":1,"1232":1,"1233":1,"1234":1,"1235":1,"1236":1,"1237":1,"1238":1,"1239":1,"1240":1,"1241":1,"1242":1,"1243":1,"1244":1,"1245":1,"1246":1,"1247":1,"1248":1},"2":{"1188":1,"1232":2,"1233":2,"1234":2,"1235":2,"1236":2,"1237":2,"1238":2,"1239":2,"1240":2,"1241":2,"1242":2,"1243":2,"1244":2,"1245":2,"1252":1,"1381":1}}],["assertfalse",{"0":{"1193":1},"1":{"1194":1,"1195":1,"1196":1,"1197":1},"2":{"804":1,"1194":2,"1196":1,"1257":1,"1381":1}}],["asserted",{"2":{"262":4,"265":1}}],["assertequint",{"2":{"1186":1}}],["asserteq0",{"0":{"225":1},"1":{"226":1},"2":{"215":2,"225":1,"226":1,"821":1}}],["asserteq32",{"0":{"223":1},"1":{"224":1},"2":{"215":2,"223":1,"1186":2}}],["asserteqdecimal",{"0":{"221":1,"1189":1},"1":{"222":1,"1190":1,"1191":1,"1192":1},"2":{"215":4,"221":1,"222":1,"1188":1,"1190":4,"1381":1}}],["asserteq",{"0":{"219":1,"1170":1},"1":{"220":1,"1171":1,"1172":1,"1173":1,"1174":1,"1175":1,"1176":1,"1177":1,"1178":1,"1179":1,"1180":1,"1181":1,"1182":1,"1183":1,"1184":1,"1185":1,"1186":1,"1187":1,"1188":1},"2":{"77":2,"78":2,"85":1,"128":3,"172":6,"215":10,"219":1,"220":1,"224":1,"251":1,"257":2,"262":2,"264":2,"265":2,"270":1,"274":1,"275":2,"276":1,"328":2,"329":1,"344":5,"345":4,"356":2,"357":2,"376":1,"384":4,"638":2,"681":2,"685":2,"690":2,"733":1,"761":1,"799":2,"804":1,"813":2,"817":2,"827":1,"842":16,"876":2,"881":4,"885":9,"889":4,"893":4,"983":12,"988":4,"1013":3,"1023":5,"1028":1,"1039":2,"1052":3,"1056":1,"1057":1,"1083":8,"1091":18,"1092":18,"1108":3,"1112":3,"1121":1,"1172":2,"1173":2,"1174":2,"1175":2,"1176":2,"1177":2,"1178":2,"1179":2,"1180":2,"1181":2,"1182":2,"1183":2,"1184":2,"1185":2,"1192":1,"1248":1,"1283":1,"1289":1,"1354":1,"1368":2,"1377":2,"1381":1}}],["assertapproxeqreldecimal",{"0":{"1166":1},"1":{"1167":1,"1168":1,"1169":1},"2":{"1165":1,"1167":4,"1381":1}}],["assertapproxeqrel",{"0":{"245":1,"1161":1},"1":{"246":1,"1162":1,"1163":1,"1164":1,"1165":1},"2":{"215":2,"245":1,"246":1,"1156":1,"1162":4,"1164":1,"1169":1,"1381":1}}],["assertapproxeqabsdecimal",{"0":{"1157":1},"1":{"1158":1,"1159":1,"1160":1},"2":{"1156":1,"1158":4,"1381":1}}],["assertapproxeqabs",{"0":{"243":1,"1152":1},"1":{"244":1,"1153":1,"1154":1,"1155":1,"1156":1},"2":{"215":2,"243":1,"244":1,"1153":4,"1155":1,"1160":1,"1165":1,"1381":1}}],["asserts",{"2":{"215":2,"217":1,"219":1,"221":1,"223":1,"225":1,"227":1,"229":1,"231":1,"233":1,"235":1,"237":1,"239":1,"241":1,"243":1,"245":1,"251":1,"782":3,"787":6,"1154":1,"1159":1,"1163":1,"1168":1,"1187":1,"1191":1,"1195":1,"1200":1,"1204":1,"1208":1,"1212":1,"1216":1,"1220":1,"1224":1,"1228":1,"1247":1,"1251":1,"1255":1}}],["assertledecimal",{"0":{"241":1,"1218":1},"1":{"242":1,"1219":1,"1220":1,"1221":1},"2":{"215":4,"241":1,"242":1,"1217":1,"1219":4,"1381":1}}],["assertle",{"0":{"239":1,"1214":1},"1":{"240":1,"1215":1,"1216":1,"1217":1},"2":{"215":4,"239":1,"240":1,"265":1,"1215":4,"1221":1,"1225":1,"1381":1}}],["assertltdecimal",{"0":{"237":1,"1226":1},"1":{"238":1,"1227":1,"1228":1,"1229":1},"2":{"215":4,"237":1,"238":1,"1225":1,"1227":4,"1381":1}}],["assertlt",{"0":{"235":1,"1222":1},"1":{"236":1,"1223":1,"1224":1,"1225":1},"2":{"215":4,"235":1,"236":1,"1217":1,"1223":4,"1229":1,"1381":1}}],["asserttrue",{"0":{"217":1,"1253":1},"1":{"218":1,"1254":1,"1255":1,"1256":1,"1257":1},"2":{"215":2,"217":1,"218":1,"252":1,"787":1,"804":3,"855":1,"859":1,"864":1,"1197":1,"1254":2,"1256":1,"1381":1}}],["assertinvariants",{"2":{"262":3}}],["asserting",{"0":{"215":1},"2":{"216":1,"274":1,"328":1,"1186":1,"1354":1}}],["assertionerror",{"0":{"1258":1},"1":{"1259":1,"1260":1},"2":{"1259":1,"1383":1}}],["assertionsquery",{"2":{"264":2}}],["assertions",{"0":{"185":1,"274":1,"332":1,"383":1,"647":1,"1381":1},"2":{"172":3,"185":2,"264":1,"265":1,"274":1,"332":1,"383":1,"384":1,"497":1,"506":1,"894":1,"896":2,"1354":1}}],["assertion",{"0":{"216":1},"1":{"217":1,"218":1,"219":1,"220":1,"221":1,"222":1,"223":1,"224":1,"225":1,"226":1,"227":1,"228":1,"229":1,"230":1,"231":1,"232":1,"233":1,"234":1,"235":1,"236":1,"237":1,"238":1,"239":1,"240":1,"241":1,"242":1,"243":1,"244":1,"245":1,"246":1},"2":{"37":2,"77":1,"78":1,"85":2,"172":1,"202":1,"215":1,"332":1,"348":1,"356":1,"384":1,"1155":1,"1164":1,"1354":1}}],["assertgedecimal",{"0":{"233":1,"1202":1},"1":{"234":1,"1203":1,"1204":1,"1205":1},"2":{"215":4,"233":1,"234":1,"1201":1,"1203":4,"1381":1}}],["assertge",{"0":{"231":1,"1198":1},"1":{"232":1,"1199":1,"1200":1,"1201":1},"2":{"172":2,"215":4,"231":1,"232":1,"264":1,"270":1,"1199":4,"1205":1,"1209":1,"1381":1}}],["assertgtdecimal",{"0":{"229":1,"1210":1},"1":{"230":1,"1211":1,"1212":1,"1213":1},"2":{"215":4,"229":1,"230":1,"1209":1,"1211":4,"1381":1}}],["assertgt",{"0":{"227":1,"1206":1},"1":{"228":1,"1207":1,"1208":1,"1209":1},"2":{"172":1,"215":4,"227":1,"228":1,"1201":1,"1207":4,"1213":1,"1381":1}}],["assert",{"2":{"130":1,"196":1,"215":6,"262":3,"264":2,"274":1,"329":1,"344":1,"345":2,"376":1,"497":1,"506":2,"638":1,"719":1,"720":1,"726":1,"727":1,"734":1,"740":1,"741":1,"747":1,"748":1,"762":1,"768":1,"769":1,"778":1,"783":1,"787":1,"788":2,"850":2,"876":4,"1008":3,"1112":1,"1260":1}}],["assembly",{"2":{"34":1,"35":1,"289":2,"319":3,"486":1,"787":1,"821":2,"1321":1,"1395":2}}],["as",{"0":{"373":1,"403":1},"1":{"404":1,"405":1,"406":1,"407":1,"408":1,"409":1,"410":1,"411":1,"412":1,"413":1,"414":1,"415":1,"416":1,"417":1},"2":{"3":1,"8":2,"13":1,"14":7,"20":1,"24":1,"25":2,"33":2,"34":1,"35":2,"37":3,"41":1,"43":1,"44":2,"45":1,"51":1,"54":1,"57":4,"59":1,"62":3,"74":1,"76":2,"77":1,"78":1,"81":1,"82":1,"83":1,"84":2,"85":1,"87":1,"94":1,"106":2,"108":4,"115":4,"126":1,"127":1,"129":1,"130":1,"138":1,"141":1,"151":2,"177":1,"180":2,"187":1,"192":3,"195":1,"196":1,"197":1,"198":1,"250":2,"251":1,"253":1,"254":1,"256":1,"257":3,"260":5,"262":1,"264":4,"265":1,"267":1,"268":1,"272":2,"273":1,"274":3,"276":1,"279":2,"282":1,"284":1,"285":3,"304":1,"307":2,"309":1,"323":1,"325":1,"327":1,"328":5,"333":2,"334":2,"336":1,"338":2,"345":3,"348":1,"355":3,"356":3,"357":1,"359":1,"361":1,"362":1,"363":4,"364":1,"365":2,"367":1,"371":2,"373":1,"374":1,"379":1,"384":9,"390":1,"392":2,"393":2,"394":1,"398":1,"401":1,"402":2,"403":2,"408":1,"409":2,"412":1,"413":2,"414":1,"418":1,"419":1,"428":1,"440":2,"441":2,"444":2,"445":1,"446":1,"460":1,"482":1,"483":1,"484":1,"486":5,"487":1,"492":2,"496":1,"497":1,"507":1,"508":1,"530":1,"565":1,"574":2,"601":2,"621":1,"633":1,"654":2,"664":1,"684":1,"685":1,"689":1,"690":1,"695":1,"702":2,"707":1,"716":1,"723":1,"730":1,"737":1,"744":1,"745":2,"752":1,"758":2,"765":1,"766":2,"775":1,"782":1,"783":3,"786":2,"787":5,"788":2,"797":2,"798":5,"799":1,"802":1,"809":1,"812":1,"816":1,"826":1,"842":1,"849":1,"875":1,"876":4,"925":2,"927":9,"928":4,"929":8,"930":3,"932":3,"942":2,"944":15,"945":4,"946":8,"957":3,"960":1,"991":1,"1004":1,"1008":1,"1011":2,"1012":1,"1013":1,"1027":1,"1032":1,"1033":1,"1034":2,"1050":2,"1051":1,"1052":5,"1061":2,"1062":2,"1069":1,"1079":1,"1082":2,"1086":2,"1089":1,"1090":1,"1107":1,"1131":2,"1139":2,"1151":1,"1285":4,"1340":1,"1344":1,"1364":1,"1393":1,"1395":1}}],["attrs",{"2":{"421":1}}],["attributes",{"2":{"421":1,"431":4,"929":2,"946":2}}],["attribute",{"2":{"328":1,"929":1,"946":1}}],["attacks",{"2":{"1051":1}}],["attacker",{"2":{"365":1}}],["attaches",{"2":{"1052":3}}],["attachdelegation",{"2":{"1050":1,"1051":1,"1052":2}}],["attaching",{"2":{"88":1,"1051":2}}],["attestation",{"2":{"152":3}}],["attestations",{"2":{"152":1}}],["attested",{"2":{"152":1}}],["attempted",{"2":{"94":1}}],["attempts",{"2":{"35":3,"421":1,"582":1,"1151":1}}],["attempt",{"2":{"35":1,"90":1,"421":1,"426":1,"447":1,"480":1,"576":1}}],["at",{"0":{"408":1},"2":{"1":1,"7":1,"8":1,"10":1,"14":2,"17":1,"35":2,"36":1,"43":1,"57":1,"58":1,"62":1,"84":1,"90":2,"95":1,"102":7,"108":1,"117":1,"134":1,"172":3,"180":1,"184":1,"195":2,"248":1,"257":1,"262":2,"265":1,"266":1,"267":1,"272":1,"280":1,"285":1,"328":1,"338":1,"342":2,"344":1,"355":1,"365":2,"387":1,"399":1,"414":2,"444":1,"564":1,"574":1,"625":1,"629":1,"659":1,"660":1,"664":1,"683":1,"707":1,"708":2,"775":1,"778":2,"779":1,"786":3,"787":2,"802":3,"827":2,"880":1,"884":1,"997":1,"1004":2,"1023":1,"1050":1,"1051":1,"1061":1,"1069":1,"1086":1,"1107":1,"1112":1,"1130":1,"1138":1,"1282":2,"1310":2,"1354":1}}],["anumber",{"2":{"1131":4,"1133":2,"1134":6,"1139":4,"1141":2,"1142":6}}],["anonymous",{"2":{"976":1}}],["anotheraddress",{"2":{"821":3}}],["anotherfork",{"2":{"344":2}}],["another",{"2":{"141":1,"192":1,"252":1,"256":1,"265":1,"271":1,"274":1,"328":1,"342":1,"345":1,"392":1,"680":1,"681":1,"778":1,"842":1,"875":1,"929":1,"946":1}}],["answers",{"2":{"175":1}}],["anthropic",{"2":{"172":1}}],["analysis",{"0":{"365":1},"2":{"117":3,"138":1,"168":1,"172":1}}],["analyzes",{"2":{"302":1}}],["analyzer",{"2":{"117":1}}],["analyzers",{"0":{"114":1},"1":{"115":1,"116":1,"117":1},"2":{"168":1}}],["analyze",{"2":{"117":2,"499":1}}],["analyzed",{"2":{"115":1}}],["anyone",{"2":{"797":1}}],["anyways",{"2":{"364":1,"371":1}}],["anywhere",{"2":{"347":1}}],["anymore",{"2":{"199":1}}],["anything",{"2":{"17":1,"18":1,"95":1,"329":1}}],["any",{"2":{"12":1,"13":2,"45":2,"83":1,"84":1,"90":1,"94":1,"115":1,"117":2,"132":1,"134":1,"142":1,"149":1,"158":1,"173":1,"199":1,"254":1,"257":1,"283":1,"328":1,"333":1,"335":1,"342":1,"345":1,"347":1,"357":1,"359":1,"374":1,"384":1,"386":1,"391":1,"395":1,"397":1,"402":1,"414":1,"421":2,"444":1,"480":2,"481":1,"497":1,"547":1,"574":1,"751":1,"775":1,"779":1,"782":1,"787":1,"888":1,"975":1,"1038":1,"1061":1,"1082":1,"1107":1,"1284":1,"1285":1,"1337":1}}],["an",{"2":{"7":1,"8":1,"13":5,"14":1,"17":1,"18":1,"33":1,"34":2,"35":8,"36":1,"45":1,"57":2,"61":1,"62":1,"65":1,"67":1,"72":1,"77":1,"78":1,"79":1,"82":1,"83":2,"84":1,"86":2,"87":1,"90":2,"92":2,"95":1,"106":1,"107":1,"126":1,"134":1,"144":1,"154":1,"168":1,"171":1,"172":1,"178":1,"188":1,"189":1,"190":1,"191":1,"192":1,"193":1,"198":1,"246":1,"248":2,"249":2,"253":1,"254":2,"255":1,"260":3,"264":1,"265":2,"271":1,"274":1,"279":1,"283":1,"285":2,"291":1,"305":1,"307":3,"309":1,"327":2,"328":3,"334":1,"337":1,"338":2,"345":2,"347":1,"355":2,"356":1,"357":1,"362":2,"363":1,"364":1,"365":1,"367":1,"387":3,"390":1,"393":2,"394":1,"408":1,"409":1,"414":1,"417":1,"419":3,"421":1,"423":1,"433":2,"440":1,"466":1,"473":2,"476":1,"477":1,"481":1,"482":1,"484":1,"496":1,"499":1,"506":1,"507":1,"508":1,"517":1,"561":4,"622":1,"625":1,"629":1,"633":2,"646":1,"651":1,"681":1,"684":1,"689":1,"702":2,"716":1,"723":1,"730":1,"737":1,"744":1,"751":1,"752":3,"755":1,"758":1,"765":1,"773":1,"782":4,"783":1,"786":2,"787":2,"788":2,"797":1,"798":1,"802":1,"807":2,"808":1,"809":3,"820":1,"821":2,"826":1,"827":2,"832":1,"849":1,"867":1,"880":1,"881":1,"884":2,"885":2,"888":1,"892":1,"893":1,"925":2,"927":6,"929":3,"942":2,"944":6,"946":3,"960":1,"965":1,"972":2,"976":1,"978":1,"982":3,"991":1,"1012":1,"1021":1,"1023":1,"1033":3,"1034":3,"1038":1,"1042":1,"1050":6,"1051":4,"1052":2,"1055":1,"1074":1,"1086":3,"1087":1,"1088":3,"1089":2,"1099":1,"1130":1,"1138":1,"1150":1,"1151":2,"1154":1,"1159":1,"1163":1,"1168":1,"1187":1,"1191":1,"1195":1,"1200":1,"1204":1,"1208":1,"1212":1,"1216":1,"1220":1,"1224":1,"1228":1,"1247":1,"1251":1,"1255":1,"1260":1,"1268":1,"1285":2,"1296":1,"1301":2,"1310":1,"1324":1,"1331":1,"1334":1,"1337":2,"1340":1,"1344":1,"1361":2,"1380":1,"1393":1,"1395":1,"1402":1}}],["and",{"0":{"3":1,"62":1,"67":1,"79":1,"83":1,"85":1,"123":1,"137":1,"152":1,"180":1,"344":1,"345":1,"348":1,"384":1,"388":1,"404":1,"699":1},"2":{"0":2,"1":1,"3":1,"5":1,"7":2,"8":2,"9":1,"13":3,"15":8,"17":2,"18":2,"21":1,"25":3,"26":4,"27":2,"29":1,"31":1,"33":4,"34":3,"35":4,"36":1,"37":2,"40":1,"43":3,"44":6,"45":2,"51":3,"55":3,"56":1,"62":3,"64":1,"65":3,"67":6,"69":1,"70":1,"75":2,"76":2,"79":2,"80":1,"81":3,"82":5,"83":1,"84":4,"85":3,"86":4,"87":2,"89":2,"90":5,"92":1,"93":2,"94":7,"95":3,"102":3,"103":2,"104":3,"106":7,"107":2,"108":1,"110":1,"115":3,"119":1,"120":1,"124":1,"127":1,"128":1,"129":1,"131":3,"132":3,"133":2,"134":4,"135":1,"138":1,"139":1,"141":1,"146":3,"148":1,"151":4,"152":2,"154":1,"157":1,"158":1,"159":2,"161":2,"162":10,"164":1,"165":1,"167":1,"168":3,"170":4,"171":4,"172":29,"173":1,"175":2,"182":1,"184":1,"185":3,"187":2,"188":1,"189":1,"192":6,"194":2,"195":1,"196":1,"197":1,"198":1,"199":1,"200":2,"202":2,"203":1,"204":1,"215":1,"216":1,"247":1,"248":5,"249":2,"250":4,"251":2,"253":1,"254":4,"257":4,"258":1,"259":1,"260":3,"262":11,"263":1,"264":5,"265":1,"266":2,"267":1,"268":3,"270":5,"271":2,"272":2,"273":1,"274":1,"275":1,"276":1,"277":1,"278":2,"279":1,"280":2,"281":2,"282":2,"283":2,"285":2,"289":1,"291":2,"302":2,"304":2,"305":2,"307":1,"309":1,"311":1,"313":1,"314":1,"315":1,"317":1,"319":1,"323":1,"325":2,"327":2,"328":6,"329":5,"333":1,"334":1,"335":2,"337":3,"339":3,"341":1,"342":4,"344":2,"345":3,"347":2,"348":3,"351":1,"352":2,"353":1,"354":2,"355":5,"356":3,"357":3,"358":1,"359":4,"361":4,"362":3,"363":4,"364":3,"365":2,"367":2,"368":4,"369":1,"376":1,"378":3,"379":1,"382":1,"384":6,"386":6,"387":1,"388":3,"391":1,"393":1,"394":3,"396":1,"398":3,"401":1,"402":3,"403":1,"405":1,"407":2,"408":1,"410":1,"414":2,"417":2,"418":1,"419":4,"421":5,"426":1,"430":1,"431":1,"432":1,"433":4,"434":2,"440":1,"444":4,"453":1,"456":1,"458":1,"467":1,"474":1,"478":1,"480":1,"481":1,"482":1,"485":2,"492":1,"494":1,"496":1,"497":3,"499":1,"500":1,"506":1,"507":5,"521":1,"524":1,"529":2,"561":4,"567":1,"571":1,"573":1,"579":1,"585":1,"586":1,"599":1,"629":1,"646":1,"650":1,"654":2,"660":1,"664":2,"683":6,"684":2,"689":3,"690":2,"695":1,"712":1,"752":2,"775":1,"778":1,"779":2,"782":5,"783":1,"786":1,"787":10,"797":1,"798":1,"802":4,"803":2,"804":1,"808":5,"809":4,"812":1,"816":1,"820":1,"821":1,"826":1,"827":1,"850":2,"875":1,"876":1,"880":2,"884":1,"888":2,"894":1,"927":1,"928":5,"929":5,"930":1,"931":1,"932":4,"944":1,"945":5,"946":5,"947":1,"957":1,"960":2,"972":2,"973":1,"975":1,"982":2,"991":2,"996":1,"997":2,"1011":1,"1012":1,"1022":1,"1027":1,"1033":4,"1038":1,"1042":2,"1050":1,"1051":1,"1052":10,"1055":1,"1061":1,"1062":1,"1069":2,"1074":2,"1075":1,"1079":1,"1081":2,"1082":1,"1086":4,"1088":1,"1090":1,"1096":1,"1099":1,"1110":2,"1111":1,"1112":2,"1130":2,"1131":1,"1138":2,"1139":1,"1150":1,"1159":1,"1168":1,"1191":1,"1204":1,"1212":1,"1220":1,"1228":1,"1251":1,"1268":1,"1272":1,"1276":2,"1282":1,"1284":5,"1285":3,"1296":1,"1301":1,"1309":2,"1310":2,"1331":1,"1340":1,"1353":2,"1354":6,"1395":1}}],["anvil",{"0":{"0":1,"4":1,"79":1,"88":1,"96":1,"139":1,"166":1},"1":{"1":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"140":1,"141":1},"2":{"0":2,"1":6,"3":5,"5":1,"6":1,"7":1,"8":3,"9":1,"10":1,"12":1,"13":26,"14":4,"17":3,"20":1,"21":3,"22":1,"23":2,"24":3,"25":1,"26":1,"55":1,"79":2,"80":1,"81":2,"88":20,"96":5,"111":4,"112":2,"113":2,"132":1,"133":1,"138":1,"139":1,"140":2,"141":5,"151":1,"155":3,"162":1,"166":1,"170":2,"172":5,"201":1,"1052":2,"1284":1}}],["a",{"0":{"45":1,"84":1,"85":1,"86":1,"95":1,"96":1,"106":1,"107":1,"136":1,"140":1,"172":1,"183":1,"184":1,"251":1,"253":1,"363":1,"393":1,"394":1,"396":1,"403":1,"405":1,"406":1,"407":1,"408":2,"409":1,"414":1,"417":1,"897":1,"930":1,"1091":1,"1133":1,"1134":1,"1141":1,"1142":1},"1":{"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"404":1,"405":1,"406":1,"407":2,"408":2,"409":2,"410":1,"411":1,"412":1,"413":1,"414":1,"415":2,"416":2,"417":1},"2":{"0":1,"1":1,"3":1,"5":1,"7":1,"8":7,"13":7,"14":8,"15":13,"17":1,"18":5,"19":1,"22":1,"24":1,"25":8,"26":3,"27":6,"29":1,"31":2,"33":4,"34":8,"35":21,"36":3,"37":1,"40":5,"43":7,"44":4,"45":4,"48":1,"55":1,"56":3,"57":2,"58":1,"60":1,"62":5,"64":1,"65":6,"67":4,"68":1,"72":2,"73":2,"74":1,"75":1,"78":1,"79":1,"81":1,"82":2,"83":4,"84":5,"85":6,"86":3,"87":2,"89":1,"90":6,"92":6,"93":3,"94":5,"95":6,"96":1,"99":1,"100":1,"101":1,"104":2,"105":1,"106":9,"107":3,"108":5,"109":1,"115":6,"117":1,"118":1,"122":1,"127":2,"128":1,"132":2,"133":3,"134":3,"135":1,"136":1,"138":1,"139":2,"143":1,"146":1,"148":2,"151":1,"154":1,"155":1,"156":1,"157":2,"158":1,"159":1,"170":1,"171":1,"172":3,"173":2,"175":1,"182":1,"183":5,"184":2,"185":7,"187":1,"188":1,"189":1,"192":6,"195":4,"196":2,"198":1,"203":1,"215":55,"219":2,"220":2,"221":2,"222":2,"223":2,"225":2,"227":2,"228":2,"229":2,"230":2,"231":2,"232":2,"233":2,"234":2,"235":2,"236":2,"237":2,"238":2,"239":2,"240":2,"241":2,"242":2,"243":2,"244":2,"245":2,"246":3,"248":3,"249":1,"250":5,"251":1,"253":3,"254":1,"255":1,"256":1,"257":6,"258":1,"259":1,"260":6,"262":12,"263":1,"264":7,"265":5,"266":8,"267":3,"268":11,"270":3,"272":7,"273":1,"276":2,"277":1,"278":2,"280":2,"281":2,"282":5,"283":3,"284":1,"285":3,"289":5,"291":4,"292":1,"294":1,"296":1,"297":1,"302":2,"304":1,"305":1,"307":10,"308":1,"309":2,"311":5,"313":1,"314":1,"319":5,"323":2,"325":4,"327":4,"328":9,"329":3,"333":1,"334":1,"335":2,"336":3,"337":3,"338":3,"340":1,"341":1,"342":12,"344":3,"345":6,"347":5,"348":1,"349":1,"353":1,"354":1,"355":6,"356":6,"357":10,"359":1,"360":3,"361":4,"362":6,"363":10,"365":3,"369":2,"375":1,"376":2,"377":1,"378":5,"383":1,"384":14,"386":6,"387":7,"388":2,"390":2,"391":1,"392":2,"393":6,"394":6,"396":3,"397":2,"398":1,"399":1,"402":2,"403":3,"405":2,"407":2,"408":3,"409":4,"410":3,"411":1,"412":3,"413":2,"414":6,"415":2,"416":4,"417":2,"419":1,"421":9,"427":1,"428":1,"430":2,"432":1,"433":2,"434":4,"443":1,"444":6,"446":2,"447":2,"451":1,"452":2,"456":1,"457":1,"460":1,"470":1,"473":1,"476":2,"478":1,"481":4,"484":1,"486":6,"487":2,"491":1,"492":4,"497":3,"499":2,"500":1,"501":1,"502":2,"503":1,"504":2,"505":2,"506":1,"507":4,"508":2,"525":1,"526":1,"536":4,"545":2,"546":2,"561":3,"562":1,"565":1,"567":1,"577":1,"582":1,"583":1,"591":1,"593":1,"594":1,"597":1,"599":1,"604":2,"606":1,"608":1,"609":2,"623":2,"624":1,"625":1,"626":1,"627":2,"628":1,"629":2,"642":1,"650":1,"651":1,"654":4,"655":9,"659":1,"660":3,"664":1,"665":2,"681":1,"683":3,"684":3,"685":3,"689":3,"690":3,"694":2,"707":2,"712":1,"745":2,"751":2,"752":1,"759":2,"766":2,"775":1,"778":7,"779":8,"782":8,"783":2,"786":4,"787":11,"788":10,"797":2,"798":4,"799":1,"802":7,"804":9,"807":6,"808":1,"809":6,"812":3,"816":3,"820":1,"821":1,"822":2,"826":2,"827":3,"828":2,"853":2,"854":2,"857":2,"858":2,"862":2,"863":2,"867":1,"876":4,"880":6,"881":5,"884":4,"885":3,"892":3,"893":8,"897":1,"898":1,"920":1,"921":1,"922":4,"925":4,"926":2,"927":9,"928":6,"929":6,"930":2,"932":2,"937":1,"938":1,"939":6,"942":4,"943":2,"944":14,"945":6,"946":7,"957":4,"972":2,"973":1,"975":1,"976":1,"996":1,"997":1,"1008":4,"1012":2,"1021":1,"1023":1,"1027":1,"1028":1,"1032":1,"1033":5,"1034":4,"1039":1,"1042":1,"1050":1,"1051":3,"1052":9,"1055":1,"1056":1,"1057":1,"1061":3,"1065":1,"1070":4,"1081":3,"1082":1,"1086":5,"1087":2,"1088":3,"1089":2,"1090":19,"1107":1,"1112":2,"1117":1,"1130":7,"1131":3,"1133":1,"1138":7,"1139":3,"1141":1,"1145":1,"1146":1,"1151":5,"1155":2,"1164":2,"1186":1,"1263":1,"1268":1,"1271":2,"1276":1,"1279":1,"1282":3,"1283":2,"1284":2,"1285":10,"1288":1,"1291":2,"1296":1,"1301":1,"1306":1,"1309":2,"1310":1,"1314":1,"1324":2,"1327":3,"1331":1,"1334":1,"1340":1,"1344":1,"1348":1,"1351":1,"1353":1,"1354":3,"1356":2,"1357":2,"1364":1,"1380":1,"1392":1,"1393":1,"1395":9,"1406":2}}]],"serializationVersion":2}
